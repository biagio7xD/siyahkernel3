diff -Naur ./arch/arm/mach-exynos/asv-4x12.c ../../HK_JB/Kernel/arch/arm/mach-exynos/asv-4x12.c
--- ./arch/arm/mach-exynos/asv-4x12.c	2012-12-08 20:40:46.109821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/asv-4x12.c	2012-11-22 09:13:14.000000000 +0100
@@ -62,25 +62,8 @@
 };
 
 struct asv_judge_table exynos4x12_limit_rev2[] = {
-#if 0
-	/* 0705 dvfs table */
 	/* HPM, IDS */
-	{  0,   0},		/* Reserved Group */
-	{ 15,   8},		/* ASV1 Group */
-	{ 16,  11},
-	{ 18,  14},
-	{ 19,  18},
-	{ 20,  22},
-	{ 21,  26},
-	{ 22,  29},
-	{ 23,  36},
-	{ 24,  44},
-	{ 25,  56},
-	{999, 999},		/* ASV11 Group */
-#else
-	/* 0725 dvfs table */
-	/* HPM, IDS */
-	{  0,   0},		/* Reserved Group */
+	{  0,   3},		/* Reserved Group */
 	{ 15,   8},		/* ASV1 Group */
 	{ 16,  11},
 	{ 18,  14},
@@ -93,7 +76,6 @@
 	{ 25,  45},
 	{ 26,  50},
 	{999, 999},		/* ASV11 Group */
-#endif
 };
 
 struct asv_judge_table exynos4212_limit[] = {
@@ -225,8 +207,10 @@
 	 * If ASV result value is lower than default value
 	 * Fix with default value.
 	 */
-	if (exynos_result_of_asv < DEFAULT_ASV_GROUP)
-		exynos_result_of_asv = DEFAULT_ASV_GROUP;
+	if (samsung_rev() < EXYNOS4412_REV_2_0) {
+		if (exynos_result_of_asv < DEFAULT_ASV_GROUP)
+			exynos_result_of_asv = DEFAULT_ASV_GROUP;
+	}
 
 #ifndef CONFIG_SAMSUNG_PRODUCT_SHIP
 	pr_info("EXYNOS4X12(NO SG): IDS : %d HPM : %d RESULT : %d\n",
@@ -305,6 +289,18 @@
 		pr_info("EXYNOS4X12(SG):  ORIG : %d MOD : %d RESULT : %d\n",
 			exynos_orig_sp, exynos_mod_sp, exynos_result_of_asv);
 
+		/*
+		 * If fused speed group is 1 and ids value is lower than 3,
+		 * voltage value should be set to asv 0 group.
+		 */
+		if (samsung_rev() >= EXYNOS4412_REV_2_0) {
+			if (exynos_result_of_asv == 1) {
+				exynos4x12_get_ids(asv_info);
+				if ((asv_info->ids_result <= exynos4x12_limit_rev2[0].ids_limit))
+					exynos_result_of_asv = 0;
+			}
+		}
+
 		/* set Special flag into exynos_special_flag */
 		exynos_special_flag = (tmp >> LOCKING_OFFSET) & LOCKING_MASK;
 
diff -Naur ./arch/arm/mach-exynos/asv-5250.c ../../HK_JB/Kernel/arch/arm/mach-exynos/asv-5250.c
--- ./arch/arm/mach-exynos/asv-5250.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/asv-5250.c	2012-11-22 09:13:14.000000000 +0100
@@ -0,0 +1,200 @@
+/* linux/arch/arm/mach-exynos/asv-4x12.c
+ *
+ * Copyright (c) 2012 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com/
+ *
+ * EXYNOS5250 - ASV(Adaptive Supply Voltage) driver
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+*/
+
+#include <linux/init.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/err.h>
+#include <linux/clk.h>
+#include <linux/io.h>
+#include <linux/string.h>
+
+#include <mach/asv.h>
+#include <mach/map.h>
+
+#include <plat/cpu.h>
+
+/* ASV function for Fused Chip */
+#define IDS_ARM_OFFSET		24
+#define IDS_ARM_MASK		0xFF
+#define HPM_OFFSET		12
+#define HPM_MASK		0x1F
+
+#define FUSED_SG_OFFSET		3
+#define ORIG_SG_OFFSET		17
+#define ORIG_SG_MASK		0xF
+#define MOD_SG_OFFSET		21
+#define MOD_SG_MASK		0x7
+
+#define DEFAULT_ASV_GROUP	1
+
+#define CHIP_ID_REG		(S5P_VA_CHIPID + 0x4)
+#define LOT_ID_REG		(S5P_VA_CHIPID + 0x14)
+
+struct asv_judge_table exynos5250_limit[] = {
+	/* HPM, IDS */
+	{  0,   0},		/* Reserved Group */
+	{  9,   7},
+	{ 10,   9},
+	{ 12,  11},
+	{ 14,  14},
+	{ 15,  17},
+	{ 16,  20},
+	{ 17,  23},
+	{ 18,  27},
+	{ 19,  30},
+	{100, 100},
+	{999, 999},		/* Reserved Group */
+};
+
+static int exynos5250_get_hpm(struct samsung_asv *asv_info)
+{
+	asv_info->hpm_result = (asv_info->pkg_id >> HPM_OFFSET) & HPM_MASK;
+
+	return 0;
+}
+
+static int exynos5250_get_ids(struct samsung_asv *asv_info)
+{
+	asv_info->ids_result = (asv_info->pkg_id >> IDS_ARM_OFFSET) & IDS_ARM_MASK;
+
+	return 0;
+}
+
+/*
+ * If lot id is "NZVPU", it is need to modify for ARM_IDS value
+ */
+static int exynos5250_check_lot_id(void)
+{
+	unsigned int lid_reg = 0;
+	unsigned int rev_lid = 0;
+	unsigned int i;
+	unsigned int tmp;
+	char lot_id[5];
+
+	lid_reg = __raw_readl(LOT_ID_REG);
+
+	for (i = 0; i < 32; i++) {
+		tmp = (lid_reg >> i) & 0x1;
+		rev_lid += tmp << (31 - i);
+	}
+
+	lot_id[0] = 'N';
+	lid_reg = (rev_lid >> 11) & 0x1FFFFF;
+
+	for (i = 4; i >= 1; i--) {
+		tmp = lid_reg % 36;
+		lid_reg /= 36;
+		lot_id[i] = (tmp < 10) ? (tmp + '0') : ((tmp - 10) + 'A');
+	}
+
+	return strncmp(lot_id, "NZVPU", ARRAY_SIZE(lot_id));
+}
+
+static void exynos5250_pre_set_abb(void)
+{
+	switch (exynos_result_of_asv) {
+	case 0:
+	case 1:
+	case 2:
+		exynos4x12_set_abb(ABB_MODE_080V);
+		break;
+	case 3:
+	case 4:
+		exynos4x12_set_abb(ABB_MODE_BYPASS);
+		break;
+	default:
+		exynos4x12_set_abb(ABB_MODE_130V);
+		break;
+	}
+}
+
+static int exynos5250_asv_store_result(struct samsung_asv *asv_info)
+{
+	unsigned int i;
+
+	if (!exynos5250_check_lot_id())
+		asv_info->ids_result -= 15;
+
+	if (soc_is_exynos5250()) {
+		for (i = 0; i < ARRAY_SIZE(exynos5250_limit); i++) {
+			if ((asv_info->ids_result <= exynos5250_limit[i].ids_limit) ||
+			    (asv_info->hpm_result <= exynos5250_limit[i].hpm_limit)) {
+				exynos_result_of_asv = i;
+				break;
+			}
+		}
+	}
+
+	/*
+	 * If ASV result value is lower than default value
+	 * Fix with default value.
+	 */
+	if (exynos_result_of_asv < DEFAULT_ASV_GROUP)
+		exynos_result_of_asv = DEFAULT_ASV_GROUP;
+
+	pr_info("EXYNOS5250(NO SG): IDS : %d HPM : %d RESULT : %d\n",
+		asv_info->ids_result, asv_info->hpm_result, exynos_result_of_asv);
+
+	exynos5250_pre_set_abb();
+
+	return 0;
+}
+
+int exynos5250_asv_init(struct samsung_asv *asv_info)
+{
+	unsigned int tmp;
+	unsigned int exynos_orig_sp;
+	unsigned int exynos_mod_sp;
+	int exynos_cal_asv;
+
+	exynos_result_of_asv = 0;
+
+	pr_info("EXYNOS5250: Adaptive Support Voltage init\n");
+
+	tmp = __raw_readl(CHIP_ID_REG);
+
+	/* Store PKG_ID */
+	asv_info->pkg_id = tmp;
+
+	/* If Speed group is fused, get speed group from */
+	if ((tmp >> FUSED_SG_OFFSET) & 0x1) {
+		exynos_orig_sp = (tmp >> ORIG_SG_OFFSET) & ORIG_SG_MASK;
+		exynos_mod_sp = (tmp >> MOD_SG_OFFSET) & MOD_SG_MASK;
+
+		exynos_cal_asv = exynos_orig_sp - exynos_mod_sp;
+		/*
+		 * If There is no origin speed group,
+		 * store 1 asv group into exynos_result_of_asv.
+		 */
+		if (!exynos_orig_sp) {
+			pr_info("EXYNOS5250: No Origin speed Group\n");
+			exynos_result_of_asv = DEFAULT_ASV_GROUP;
+		} else {
+			if (exynos_cal_asv < DEFAULT_ASV_GROUP)
+				exynos_result_of_asv = DEFAULT_ASV_GROUP;
+			else
+				exynos_result_of_asv = exynos_cal_asv;
+		}
+
+		pr_info("EXYNOS5250(SG):  ORIG : %d MOD : %d RESULT : %d\n",
+			exynos_orig_sp, exynos_mod_sp, exynos_result_of_asv);
+
+		return -EEXIST;
+	}
+
+	asv_info->get_ids = exynos5250_get_ids;
+	asv_info->get_hpm = exynos5250_get_hpm;
+	asv_info->store_result = exynos5250_asv_store_result;
+
+	return 0;
+}
diff -Naur ./arch/arm/mach-exynos/baffin-gpio.c ../../HK_JB/Kernel/arch/arm/mach-exynos/baffin-gpio.c
--- ./arch/arm/mach-exynos/baffin-gpio.c	2012-12-08 20:40:46.109821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/baffin-gpio.c	2012-11-22 09:13:14.000000000 +0100
@@ -54,8 +54,13 @@
 	{EXYNOS4_GPD1(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* GSENSE_SCL_1.8V */
 
+#if defined(CONFIG_MACH_BAFFIN_KOR_LGT)
 	{EXYNOS4_GPX0(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
-			S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* DET_3.5 */
+			S3C_GPIO_PULL_UP, S5P_GPIO_DRVSTR_LV1}, /* Home KEY */
+#else
+	{EXYNOS4_GPX0(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_ONE,
+			S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* Home KEY */
+#endif
 	{EXYNOS4_GPX0(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* PS_ALS_INT */
 	{EXYNOS4_GPX0(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
@@ -78,24 +83,28 @@
 	{EXYNOS4_GPX2(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
 	{EXYNOS4_GPX2(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
-		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},	/* NC */
 	{EXYNOS4_GPX2(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* V_BUS_INT */
 	{EXYNOS4_GPX2(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* FUEL_ALERT */
 	{EXYNOS4_GPX2(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
-		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* WLAN_HOST_WAKEUP */
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* WLAN_HOST_WAKEUP */
 	{EXYNOS4_GPX2(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* BT_HOST_WAKEUP */
 	{EXYNOS4_GPX2(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* nPower */
 
-	{EXYNOS4_GPX3(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
-		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* WPC_INT */
+	{EXYNOS4_GPX3(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_ZERO,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
 	{EXYNOS4_GPX3(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* BT_WAKE */
 	{EXYNOS4_GPX3(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
+#ifdef CONFIG_MACH_BAFFIN
+	{EXYNOS4_GPX3(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* EAR_GND_DET */
+#endif
 	{EXYNOS4212_GPJ0(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_ZERO,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV4}, /* WLAN_EN */
 	{EXYNOS4_GPK3(0), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_ZERO,
@@ -157,6 +166,19 @@
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV4}, /* SD_DAT2 */
 	{EXYNOS4_GPK2(6), S3C_GPIO_SFN(2), S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV4}, /* SD_DAT3 */
+#if defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	{EXYNOS4_GPF0(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_ZERO,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+#endif
+#if defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	{EXYNOS4_GPY2(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_ZERO,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+#else
+	{EXYNOS4_GPY2(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_ZERO,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* VIB_ON */
+#endif
+	{EXYNOS4_GPY2(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_ZERO,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
 };
 
 /*
@@ -167,10 +189,10 @@
 	{EXYNOS4_GPA0(1),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* BT_UART_TXD */
 	{EXYNOS4_GPA0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* BT_UART_CTS */
 	{EXYNOS4_GPA0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /* BT_UART_RTS */
-	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* GPS_UART_RXD */
-	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* GPS_UART_TXD */
+	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /* GPS_UART_RXD */
+	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /* GPS_UART_TXD */
 	{EXYNOS4_GPA0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* GPS_UART_CTS */
-	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /* GPS_UART_RTS */
+	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* GPS_UART_RTS */
 
 	{EXYNOS4_GPA1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* AP_RXD */
 	{EXYNOS4_GPA1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* AP_TXD */
@@ -193,15 +215,16 @@
 	{EXYNOS4_GPB(6),   S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CAM_SPI_MISO */
 	{EXYNOS4_GPB(7),   S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CAM_SPI_MOSI */
 
-	{EXYNOS4_GPC0(0),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* TDMB_PWR_EN */
+	{EXYNOS4_GPC0(0),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* TDMB_PWR_EN */
 	{EXYNOS4_GPC0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* LCD_2.2V_EN */
-#if defined(CONFIG_MACH_BAFFIN_KOR_SKT) || defined(CONFIG_MACH_BAFFIN_KOR_KT)
+#if defined(CONFIG_MACH_BAFFIN_KOR_SKT) || defined(CONFIG_MACH_BAFFIN_KOR_KT) \
+	|| defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
 	{EXYNOS4_GPC0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 #else
 	{EXYNOS4_GPC0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* AP_CP_WAKEUP_1.8V */
 #endif
 	{EXYNOS4_GPC0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
-	{EXYNOS4_GPC0(4),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /* TDMB_INT */
+	{EXYNOS4_GPC0(4),  S3C_GPIO_SLP_INPUT,  S3C_GPIO_PULL_DOWN}, /* TDMB_INT */
 
 #if defined(CONFIG_MACH_BAFFIN_KOR_LGT)
 	{EXYNOS4_GPC1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* CP_RST_INDICATE_1.8V */
@@ -227,9 +250,9 @@
 	{EXYNOS4_GPF0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* RGB_SCL_1.8V_AP */
 	{EXYNOS4_GPF0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPF0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* GYRO_INT */
-	{EXYNOS4_GPF0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* MHL_SDA_1.8V */
-	{EXYNOS4_GPF0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* BARO_INT */
-	{EXYNOS4_GPF0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* MHL_SCL_1.8V */
+	{EXYNOS4_GPF0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4_GPF0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* LCD_BL_EN */
+	{EXYNOS4_GPF0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC	*/
 	{EXYNOS4_GPF0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* OTG_EN */
 
 	{EXYNOS4_GPF1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* OLED_ID */
@@ -252,10 +275,14 @@
 	{EXYNOS4_GPF2(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 #endif
 	{EXYNOS4_GPF2(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
-	{EXYNOS4_GPF2(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* S_LED_I2C_SCL */
-	{EXYNOS4_GPF2(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* S_LED_I2C_SDA */
+#if defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	{EXYNOS4_GPF2(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#else
+	{EXYNOS4_GPF2(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* KEY_LED_CTRL */
+#endif
+	{EXYNOS4_GPF2(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 
-	{EXYNOS4_GPF3(0),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* OLED_DET */
+	{EXYNOS4_GPF3(0),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_DET */
 	{EXYNOS4_GPF3(1),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* BUCK2_SEL */
 	{EXYNOS4_GPF3(2),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* BUCK3_SEL */
 	{EXYNOS4_GPF3(3),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* BUCK4_SEL */
@@ -294,21 +321,23 @@
 	{EXYNOS4_GPK3(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* WLAN_SDIO_D(2) */
 	{EXYNOS4_GPK3(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* WLAN_SDIO_D(3) */
 
-	{EXYNOS4_GPL0(0),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* USB_HUB_RST */
+	{EXYNOS4_GPL0(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPL0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPL0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 #if defined(CONFIG_MACH_BAFFIN_KOR_LGT)
 	{EXYNOS4_GPL0(3),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* GPIO_FM34_PWDN */
+#elif defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	{EXYNOS4_GPL0(3),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* LINEOUT_EN */
 #else
 	{EXYNOS4_GPL0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 #endif
-	{EXYNOS4_GPL0(4),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* HDMI_EN */
+	{EXYNOS4_GPL0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 /*	{EXYNOS4_GPL0(5),  S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE}, */
 	{EXYNOS4_GPL0(6),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /* BT_EN */
 /*	{EXYNOS4_GPL0(7),  S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE}, */
 
-	{EXYNOS4_GPL1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* USB_HUB_SCL */
-	{EXYNOS4_GPL1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* USB_HUB_SDA */
+	{EXYNOS4_GPL1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4_GPL1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 /*	{EXYNOS4_GPL1(2),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, */
 
 	{EXYNOS4_GPL2(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* GYRO_DE */
@@ -354,8 +383,12 @@
 
 	{EXYNOS4_GPY2(0),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* TF_EN */
 	{EXYNOS4_GPY2(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
-	{EXYNOS4_GPY2(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* BSENSE_SDA_1.8V */
-	{EXYNOS4_GPY2(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* BSENSE_SCL_1.8V */
+#if defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	{EXYNOS4_GPY2(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#else
+	{EXYNOS4_GPY2(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* VIB_ON */
+#endif
+	{EXYNOS4_GPY2(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPY2(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* MSENSE_SDA_1.8V */
 	{EXYNOS4_GPY2(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* MSENSE_SCL_1.8V */
 
@@ -417,9 +450,18 @@
 #endif
 	{EXYNOS4212_GPJ0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* MSENSE_INT */
 
+#if defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	{EXYNOS4212_GPJ1(0),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* CAM_SW_EN */
+#else
 	{EXYNOS4212_GPJ1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#endif
+#if defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
 	{EXYNOS4212_GPJ1(1),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* TORCH_EN */
 	{EXYNOS4212_GPJ1(2),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* TORCH_SET */
+#else
+	{EXYNOS4212_GPJ1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4212_GPJ1(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#endif
 	{EXYNOS4212_GPJ1(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CAM_MCLK */
 	{EXYNOS4212_GPJ1(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* MHL_WAKE_UP */
 
@@ -474,10 +516,10 @@
 #endif
 	{EXYNOS4212_GPM4(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* VT_CAM_SCL */
 	{EXYNOS4212_GPM4(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* VT_CAM_SDA */
-	{EXYNOS4212_GPM4(4),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* CMC_CLK_1.8V */
-	{EXYNOS4212_GPM4(5),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* CMC_CS_1.8V */
-	{EXYNOS4212_GPM4(6),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* CMC_DI_1.8V */
-	{EXYNOS4212_GPM4(7),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* CMC_DO_1.8V */
+	{EXYNOS4212_GPM4(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4212_GPM4(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4212_GPM4(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4212_GPM4(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 
 	{EXYNOS4212_GPV0(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4212_GPV0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
diff -Naur ./arch/arm/mach-exynos/baffin-power.c ../../HK_JB/Kernel/arch/arm/mach-exynos/baffin-power.c
--- ./arch/arm/mach-exynos/baffin-power.c	2012-12-08 20:40:46.109821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/baffin-power.c	2012-11-22 09:13:14.000000000 +0100
@@ -321,12 +321,19 @@
 	REGULATOR_SUPPLY("votg_3.0v", NULL),
 };
 
+static struct regulator_consumer_supply ldo13_supply[] = {
+	REGULATOR_SUPPLY("tdmb_1.8v", NULL),
+};
+
 static struct regulator_consumer_supply ldo14_supply[] = {
 	REGULATOR_SUPPLY("vabb2_1.95v", NULL),
 };
 
 static struct regulator_consumer_supply ldo17_supply[] = {
 	REGULATOR_SUPPLY("cam_sensor_core_1.2v", NULL),
+#if defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	REGULATOR_SUPPLY("vtouch_1.8v", NULL),
+#endif
 };
 
 static struct regulator_consumer_supply ldo18_supply[] = {
@@ -350,7 +357,11 @@
 };
 
 static struct regulator_consumer_supply ldo25_supply[] = {
+#ifdef CONFIG_MACH_SUPERIOR_KOR_SKT
+	REGULATOR_SUPPLY("vlcd_3.1v", NULL),
+#else
 	REGULATOR_SUPPLY("vlcd_3.3v", NULL),
+#endif
 	REGULATOR_SUPPLY("VCI", "s6e8aa0"),
 #if defined(CONFIG_MACH_SLP_T0_LTE)
 	REGULATOR_SUPPLY("VCI", "ea8061"),
@@ -421,10 +432,17 @@
 	       REGULATOR_CHANGE_STATUS, 1);
 REGULATOR_INIT(ldo12, "VUOTG_3.0V", 3000000, 3000000, 1,
 	       REGULATOR_CHANGE_STATUS, 0);
+REGULATOR_INIT(ldo13, "tdmb_1.8v", 1800000, 1800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
 REGULATOR_INIT(ldo14, "VABB2_1.95V", 1950000, 1950000, 1,
 	       REGULATOR_CHANGE_STATUS, 1);
+#if defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+REGULATOR_INIT(ldo17, "VTOUCH_1.8V", 1800000, 1800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+#else
 REGULATOR_INIT(ldo17, "CAM_SENSOR_CORE_1.2V", 1200000, 1200000, 0,
 	       REGULATOR_CHANGE_STATUS, 1);
+#endif
 REGULATOR_INIT(ldo18, "CAM_ISP_SENSOR_1.8V", 1800000, 1800000, 0,
 	       REGULATOR_CHANGE_STATUS, 1);
 REGULATOR_INIT(ldo19, "VT_CAM_1.8V", 1800000, 1800000, 0,
@@ -435,8 +453,13 @@
 	       REGULATOR_CHANGE_STATUS, 1);
 REGULATOR_INIT(ldo24, "VDD_1.8V_TSP", 1800000, 1800000, 0,
 	       REGULATOR_CHANGE_STATUS, 1);
+#ifdef CONFIG_MACH_SUPERIOR_KOR_SKT
+REGULATOR_INIT(ldo25, "VCC_3.1V_LCD", 3100000, 3100000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+#else
 REGULATOR_INIT(ldo25, "VCC_3.3V_LCD", 3300000, 3300000, 0,
 	       REGULATOR_CHANGE_STATUS, 1);
+#endif
 REGULATOR_INIT(ldo26, "VCC_MOTOR_3.0V", 3000000, 3000000, 0,
 	       REGULATOR_CHANGE_STATUS, 1);
 
diff -Naur ./arch/arm/mach-exynos/board-ap-idpram-example-modems.c ../../HK_JB/Kernel/arch/arm/mach-exynos/board-ap-idpram-example-modems.c
--- ./arch/arm/mach-exynos/board-ap-idpram-example-modems.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/board-ap-idpram-example-modems.c	2012-11-22 09:13:14.000000000 +0100
@@ -0,0 +1,480 @@
+/* linux/arch/arm/mach-xxxx/board-u1-spr-modem.c
+ * Copyright (C) 2010 Samsung Electronics. All rights reserved.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/irq.h>
+#include <linux/interrupt.h>
+#include <linux/err.h>
+#include <linux/io.h>
+#include <linux/delay.h>
+#include <linux/clk.h>
+
+#include <plat/gpio-cfg.h>
+#include <mach/gpio.h>
+#include <mach/s5p-idpram.h>
+#include <linux/platform_data/modem.h>
+
+static int __init init_modem(void);
+
+/*
+** CDMA target platform data
+*/
+static struct modem_io_t cdma_io_devices[] = {
+	[0] = {
+		.name = "cdma_boot0",
+		.id = 0x1,
+		.format = IPC_BOOT,
+		.io_type = IODEV_MISC,
+		.links = LINKTYPE(LINKDEV_DPRAM),
+	},
+	[1] = {
+		.name = "cdma_ipc0",
+		.id = 0x1,
+		.format = IPC_FMT,
+		.io_type = IODEV_MISC,
+		.links = LINKTYPE(LINKDEV_DPRAM),
+	},
+	[2] = {
+		.name = "cdma_rfs0",
+		.id = 0x33,		/* 0x13 (ch.id) | 0x20 (mask) */
+		.format = IPC_RAW,
+		.io_type = IODEV_MISC,
+		.links = LINKTYPE(LINKDEV_DPRAM),
+	},
+	[3] = {
+		.name = "cdma_multipdp",
+		.id = 0x1,
+		.format = IPC_MULTI_RAW,
+		.io_type = IODEV_DUMMY,
+		.links = LINKTYPE(LINKDEV_DPRAM),
+	},
+	[4] = {
+		.name = "cdma_rmnet0",
+		.id = 0x2A,
+		.format = IPC_RAW,
+		.io_type = IODEV_NET,
+		.links = LINKTYPE(LINKDEV_DPRAM),
+	},
+	[5] = {
+		.name = "cdma_rmnet1",
+		.id = 0x2B,
+		.format = IPC_RAW,
+		.io_type = IODEV_NET,
+		.links = LINKTYPE(LINKDEV_DPRAM),
+	},
+	[6] = {
+		.name = "cdma_rmnet2",
+		.id = 0x2C,
+		.format = IPC_RAW,
+		.io_type = IODEV_NET,
+		.links = LINKTYPE(LINKDEV_DPRAM),
+	},
+	[7] = {
+		.name = "cdma_rmnet3",
+		.id = 0x2D,
+		.format = IPC_RAW,
+		.io_type = IODEV_NET,
+		.links = LINKTYPE(LINKDEV_DPRAM),
+	},
+	[8] = {
+		.name = "cdma_rmnet4",
+		.id = 0x27,
+		.format = IPC_RAW,
+		.io_type = IODEV_NET,
+		.links = LINKTYPE(LINKDEV_DPRAM),
+	},
+	[9] = {
+		.name = "cdma_rmnet5", /* DM Port IO device */
+		.id = 0x3A,
+		.format = IPC_RAW,
+		.io_type = IODEV_MISC,
+		.links = LINKTYPE(LINKDEV_DPRAM),
+	},
+	[10] = {
+		.name = "cdma_rmnet6", /* AT CMD IO device */
+		.id = 0x31,
+		.format = IPC_RAW,
+		.io_type = IODEV_MISC,
+		.links = LINKTYPE(LINKDEV_DPRAM),
+	},
+	[11] = {
+		.name = "cdma_ramdump0",
+		.id = 0x1,
+		.format = IPC_RAMDUMP,
+		.io_type = IODEV_MISC,
+		.links = LINKTYPE(LINKDEV_DPRAM),
+	},
+};
+
+/*
+	magic_code +
+	access_enable +
+	fmt_tx_head + fmt_tx_tail + fmt_tx_buff +
+	raw_tx_head + raw_tx_tail + raw_tx_buff +
+	fmt_rx_head + fmt_rx_tail + fmt_rx_buff +
+	raw_rx_head + raw_rx_tail + raw_rx_buff +
+	mbx_ap2cp +
+	mbx_cp2ap
+ =	2 +
+	2 +
+	2 + 2 + 1020 +
+	2 + 2 + 7160 +
+	2 + 2 + 1020 +
+	2 + 2 + 7160 +
+	2 +
+	2
+ =	16384
+*/
+
+#define DP_FMT_TX_BUFF_SZ	1020
+#define DP_RAW_TX_BUFF_SZ	7160
+#define DP_FMT_RX_BUFF_SZ	1020
+#define DP_RAW_RX_BUFF_SZ	7160
+
+#define INT_MASK_REQ_ACK_F	0x0020
+#define INT_MASK_REQ_ACK_R	0x0010
+#define INT_MASK_RES_ACK_F	0x0008
+#define INT_MASK_RES_ACK_R	0x0004
+#define INT_MASK_SEND_F		0x0002
+#define INT_MASK_SEND_R		0x0001
+
+struct s5p_idpram_ipc_cfg {
+	u16 magic;
+	u16 access;
+
+	u16 fmt_tx_head;
+	u16 fmt_tx_tail;
+	u8 fmt_tx_buff[DP_FMT_TX_BUFF_SZ];
+
+	u16 raw_tx_head;
+	u16 raw_tx_tail;
+	u8 raw_tx_buff[DP_RAW_TX_BUFF_SZ];
+
+	u16 fmt_rx_head;
+	u16 fmt_rx_tail;
+	u8 fmt_rx_buff[DP_FMT_RX_BUFF_SZ];
+
+	u16 raw_rx_head;
+	u16 raw_rx_tail;
+	u8 raw_rx_buff[DP_RAW_RX_BUFF_SZ];
+
+	u16 mbx_ap2cp;
+	u16 mbx_cp2ap;
+} __packed;
+
+static struct dpram_ipc_map s5p_idpram_ipc_map;
+
+static struct modemlink_dpram_data s5p_idpram = {
+	.type = AP_IDPRAM,
+	.ap = S5P,
+	.aligned = 1,
+	.ipc_map = &s5p_idpram_ipc_map,
+	.clear_int2ap = idpram_clr_intr,
+};
+
+static struct resource cdma_modem_res[] = {
+	[RES_DPRAM_MEM_ID] = {
+		.name = STR_DPRAM_BASE,
+		.start = IDPRAM_PHYS_ADDR,
+		.end = IDPRAM_PHYS_END,
+		.flags = IORESOURCE_MEM,
+	},
+};
+
+/* To get modem state, register phone active irq using resource */
+static struct modem_data cdma_modem_data = {
+	.name = "qsc6085",
+
+	.gpio_cp_on = GPIO_QSC_PHONE_ON,
+	.gpio_cp_reset = GPIO_QSC_PHONE_RST,
+
+	.gpio_pda_active = GPIO_PDA_ACTIVE,
+
+	.gpio_phone_active = GPIO_QSC_PHONE_ACTIVE,
+	.irq_phone_active = IRQ_QSC_PHONE_ACTIVE;
+
+	.gpio_ipc_int2ap = 0,
+	.irq_ipc_int2ap = IRQ_MODEM_IF,
+
+	.gpio_ipc_int2cp = GPIO_DPRAM_INT_CP_N,
+
+	.gpio_ap_wakeup = GPIO_C210_DPRAM_INT_N,
+
+	.gpio_cp_dump_int = GPIO_CP_DUMP_INT,
+
+	.modem_net = CDMA_NETWORK,
+	.modem_type = QC_QSC6085,
+
+	.link_types = LINKTYPE(LINKDEV_DPRAM),
+	.link_name = "s5p_idpram",
+	.dpram = &s5p_idpram,
+
+	.num_iodevs = ARRAY_SIZE(cdma_io_devices),
+	.iodevs = cdma_io_devices,
+
+	.max_ipc_dev = (IPC_RAW + 1),
+};
+
+/* if use more than one modem device, then set id num */
+static struct platform_device cdma_modem = {
+	.name = "modem_if",
+	.id = 1,
+	.num_resources = ARRAY_SIZE(cdma_modem_res),
+	.resource = cdma_modem_res,
+	.dev = {
+		.platform_data = &cdma_modem_data,
+	},
+};
+
+static void config_cdma_modem_gpio(void)
+{
+	int err;
+	unsigned gpio_cp_on = cdma_modem_data.gpio_cp_on;
+	unsigned gpio_cp_rst = cdma_modem_data.gpio_cp_reset;
+	unsigned gpio_pda_active = cdma_modem_data.gpio_pda_active;
+	unsigned gpio_phone_active = cdma_modem_data.gpio_phone_active;
+	unsigned gpio_ap_wakeup = cdma_modem_data.gpio_ap_wakeup;
+	unsigned gpio_cp_dump_int = cdma_modem_data.gpio_cp_dump_int;
+	unsigned gpio_ipc_int2cp = cdma_modem_data.gpio_ipc_int2cp;
+
+	pr_info("MIF: <%s>\n", __func__);
+
+	if (gpio_cp_on) {
+		err = gpio_request(gpio_cp_on, "QSC_ON");
+		if (err) {
+			pr_err("MIF: fail to request gpio %s\n", "QSC_ON");
+		} else {
+			gpio_direction_output(gpio_cp_on, 0);
+			s3c_gpio_setpull(gpio_cp_on, S3C_GPIO_PULL_NONE);
+		}
+	}
+
+	if (gpio_cp_rst) {
+		err = gpio_request(gpio_cp_rst, "QSC_RST");
+		if (err) {
+			pr_err("MIF: fail to request gpio %s\n", "QSC_RST");
+		} else {
+			gpio_direction_output(gpio_cp_rst, 0);
+			s3c_gpio_setpull(gpio_cp_rst, S3C_GPIO_PULL_NONE);
+			s5p_gpio_set_drvstr(gpio_cp_rst, S5P_GPIO_DRVSTR_LV4);
+		}
+	}
+
+	if (gpio_pda_active) {
+		err = gpio_request(gpio_pda_active, "PDA_ACTIVE");
+		if (err) {
+			pr_err("MIF: fail to request gpio %s\n", "PDA_ACTIVE");
+		} else {
+			gpio_direction_output(gpio_pda_active, 1);
+			s3c_gpio_setpull(gpio_pda_active, S3C_GPIO_PULL_NONE);
+		}
+	}
+
+	if (gpio_phone_active) {
+		err = gpio_request(gpio_phone_active, "PHONE_ACTIVE");
+		if (err) {
+			pr_err("MIF: fail to request gpio %s\n",
+				"PHONE_ACTIVE");
+		} else {
+			s3c_gpio_cfgpin(gpio_phone_active, S3C_GPIO_SFN(0xF));
+			s3c_gpio_setpull(gpio_phone_active,
+				S3C_GPIO_PULL_NONE);
+		}
+	}
+
+	if (gpio_ap_wakeup) {
+		err = gpio_request(gpio_ap_wakeup, "HOST_WAKEUP");
+		if (err) {
+			pr_err("MIF: fail to request gpio %s\n",
+				"HOST_WAKEUP");
+		} else {
+			s3c_gpio_cfgpin(gpio_ap_wakeup, S3C_GPIO_SFN(0xF));
+			s3c_gpio_setpull(gpio_ap_wakeup, S3C_GPIO_PULL_NONE);
+		}
+	}
+
+	if (gpio_cp_dump_int) {
+		err = gpio_request(gpio_cp_dump_int, "CP_DUMP_INT");
+		if (err) {
+			pr_err("MIF: fail to request gpio %s\n",
+				"CP_DUMP_INT");
+		} else {
+			s3c_gpio_cfgpin(gpio_cp_dump_int, S3C_GPIO_SFN(0xF));
+			s3c_gpio_setpull(gpio_cp_dump_int, S3C_GPIO_PULL_DOWN);
+		}
+	}
+
+	if (gpio_ipc_int2cp) {
+		err = gpio_request(gpio_ipc_int2cp, "DPRAM_INT2CP");
+		if (err) {
+			pr_err("MIF: fail to request gpio %s\n",
+				"DPRAM_INT2CP");
+		} else {
+			s3c_gpio_cfgpin(gpio_ipc_int2cp, S3C_GPIO_SFN(0xF));
+			gpio_direction_output(gpio_ipc_int2cp, 1);
+			s3c_gpio_setpull(gpio_ipc_int2cp, S3C_GPIO_PULL_UP);
+		}
+	}
+}
+
+static u8 *setup_idpram_ipc_map(unsigned long addr, unsigned long size)
+{
+	int dp_addr = addr;
+	int dp_size = size;
+	u8 __iomem *dp_base = NULL;
+	struct s5p_idpram_ipc_cfg *mem_cfg = NULL;
+	struct dpram_ipc_device *dev = NULL;
+
+	dp_addr = addr;
+	dp_size = size;
+	dp_base = (u8 *)ioremap_nocache(dp_addr, dp_size);
+	if (!dp_base) {
+		pr_err("mif: %s: ioremap fail\n", __func__);
+		return NULL;
+	}
+	pr_info("mif: %s: DPRAM VA=0x%08X\n", __func__, (int)dp_base);
+
+	s5p_idpram.base = (u8 __iomem *)dp_base;
+	s5p_idpram.size = dp_size;
+
+	/* Map for IPC */
+	mem_cfg = (struct s5p_idpram_ipc_cfg *)dp_base;
+
+	/* Magic code and access enable fields */
+	s5p_idpram_ipc_map.magic = (u16 __iomem *)&mem_cfg->magic;
+	s5p_idpram_ipc_map.access = (u16 __iomem *)&mem_cfg->access;
+
+	/* FMT */
+	dev = &s5p_idpram_ipc_map.dev[IPC_FMT];
+
+	strcpy(dev->name, "FMT");
+	dev->id = IPC_FMT;
+
+	dev->txq.head = (u16 __iomem *)(&mem_cfg->fmt_tx_head);
+	dev->txq.tail = (u16 __iomem *)(&mem_cfg->fmt_tx_tail);
+	dev->txq.buff = (u8 __iomem *)(&mem_cfg->fmt_tx_buff[0]);
+	dev->txq.size = DP_FMT_TX_BUFF_SZ;
+
+	dev->rxq.head = (u16 __iomem *)(&mem_cfg->fmt_rx_head);
+	dev->rxq.tail = (u16 __iomem *)(&mem_cfg->fmt_rx_tail);
+	dev->rxq.buff = (u8 __iomem *)(&mem_cfg->fmt_rx_buff[0]);
+	dev->rxq.size = DP_FMT_RX_BUFF_SZ;
+
+	dev->mask_req_ack = INT_MASK_REQ_ACK_F;
+	dev->mask_res_ack = INT_MASK_RES_ACK_F;
+	dev->mask_send = INT_MASK_SEND_F;
+
+	/* RAW */
+	dev = &s5p_idpram_ipc_map.dev[IPC_RAW];
+
+	strcpy(dev->name, "RAW");
+	dev->id = IPC_RAW;
+
+	dev->txq.head = (u16 __iomem *)(&mem_cfg->raw_tx_head);
+	dev->txq.tail = (u16 __iomem *)(&mem_cfg->raw_tx_tail);
+	dev->txq.buff = (u8 __iomem *)(&mem_cfg->raw_tx_buff[0]);
+	dev->txq.size = DP_RAW_TX_BUFF_SZ;
+
+	dev->rxq.head = (u16 __iomem *)(&mem_cfg->raw_rx_head);
+	dev->rxq.tail = (u16 __iomem *)(&mem_cfg->raw_rx_tail);
+	dev->rxq.buff = (u8 __iomem *)(&mem_cfg->raw_rx_buff[0]);
+	dev->rxq.size = DP_RAW_RX_BUFF_SZ;
+
+	dev->mask_req_ack = INT_MASK_REQ_ACK_R;
+	dev->mask_res_ack = INT_MASK_RES_ACK_R;
+	dev->mask_send = INT_MASK_SEND_R;
+
+	/* Mailboxes */
+	s5p_idpram_ipc_map.mbx_ap2cp = (u16 __iomem *)(&mem_cfg->mbx_ap2cp);
+	s5p_idpram_ipc_map.mbx_cp2ap = (u16 __iomem *)(&mem_cfg->mbx_cp2ap);
+
+	return dp_base;
+}
+
+static int init_idpram(void)
+{
+	int err;
+	u8 *base;
+
+	idpram_config_demux_gpio();
+
+	err = idpram_init_sfr();
+	if (err)
+		return err;
+
+	idpram_init_demux_mode();
+
+	err = idpram_enable();
+	if (err)
+		return err;
+
+	base = setup_idpram_ipc_map(IDPRAM_PHYS_ADDR, IDPRAM_SIZE);
+	if (!base)
+		return -EINVAL;
+
+	return 0;
+}
+
+static int recovery_boot;
+
+static int __init setup_bootmode(char *str)
+{
+	if (!str)
+		return 0;
+
+	pr_err("%s: %s\n", __func__, str);
+
+	pr_err("%s: old recovery_boot = %d\n", __func__, recovery_boot);
+
+	if ((*str == '2') || (*str == '4'))
+		recovery_boot = 1;
+
+	pr_err("%s: new recovery_boot = %d\n", __func__, recovery_boot);
+
+	return 0;
+}
+__setup("bootmode=", setup_bootmode);
+
+struct platform_device sec_device_dpram_recovery = {
+	.name = "dpram-recovery",
+	.id = -1,
+};
+
+static int __init init_modem(void)
+{
+	int err = 0;
+
+	pr_info("mif: %s+++\n", __func__);
+
+	if (recovery_boot) {
+		pr_info("mif: %s: boot mode = recovery\n", __func__);
+		platform_device_register(&sec_device_dpram_recovery);
+	} else {
+		pr_info("mif: %s: boot mode = normal\n", __func__);
+		err = init_idpram();
+		if (err)
+			goto exit;
+		config_cdma_modem_gpio();
+		platform_device_register(&cdma_modem);
+	}
+
+	pr_info("mif: %s---\n", __func__);
+
+exit:
+	return err;
+}
+late_initcall(init_modem);
+
diff -Naur ./arch/arm/mach-exynos/board-c1lgt-modems.c ../../HK_JB/Kernel/arch/arm/mach-exynos/board-c1lgt-modems.c
--- ./arch/arm/mach-exynos/board-c1lgt-modems.c	2012-12-08 20:40:46.109821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/board-c1lgt-modems.c	2012-11-22 09:13:14.000000000 +0100
@@ -48,6 +48,10 @@
 #endif
 
 static int __init init_modem(void);
+static void setup_dpram_access_timing(enum dpram_speed speed);
+static int host_port_enable(int port, int enable);
+static int exynos_frequency_lock(struct device *dev);
+static int exynos_frequency_unlock(struct device *dev);
 
 static struct modem_io_t umts_io_devices[] = {
 	[0] = {
@@ -56,6 +60,7 @@
 		.format = IPC_BOOT,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM),
+		.app = "CBD"
 	},
 	[1] = {
 		.name = "umts_ipc0",
@@ -63,6 +68,7 @@
 		.format = IPC_FMT,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM),
+		.app = "RIL"
 	},
 	[2] = {
 		.name = "umts_rfs0",
@@ -70,6 +76,7 @@
 		.format = IPC_RAW,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM),
+		.app = "RFS"
 	},
 	[3] = {
 		.name = "multipdp",
@@ -124,6 +131,7 @@
 		.format = IPC_RAW,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM),
+		.app = "Data Router"
 	},
 	[10] = {
 		.name = "umts_dm0",	/* DM Port */
@@ -131,6 +139,7 @@
 		.format = IPC_RAW,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM),
+		.app = "DIAG"
 	},
 	[11] = {
 		.name = "umts_loopback_cp2ap",
@@ -139,6 +148,7 @@
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM) | LINKTYPE(LINKDEV_USB),
 		.tx_link = LINKDEV_DPRAM,
+		.app = "CP Loopback"
 	},
 	[12] = {
 		.name = "umts_loopback_ap2cp",
@@ -146,6 +156,7 @@
 		.format = IPC_RAW,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM),
+		.app = "AP loopback"
 	},
 	[13] = {
 		.name = "umts_ramdump0",
@@ -177,6 +188,7 @@
 		.format = IPC_BOOT,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM),
+		.app = "CBD"
 	},
 	[1] = {
 		.name = "cdma_ipc0",
@@ -184,6 +196,7 @@
 		.format = IPC_FMT,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM),
+		.app = "RIL"
 	},
 	[2] = {
 		.name = "cdma_rfs0",
@@ -191,6 +204,7 @@
 		.format = IPC_RAW,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM),
+		.app = "RFS"
 	},
 	[3] = {
 		.name = "cdma_multipdp",
@@ -261,6 +275,7 @@
 		.format = IPC_RAW,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM),
+		.app = "DIAG"
 	},
 };
 
@@ -277,39 +292,11 @@
 };
 
 /* For CMC221 IDPRAM (Internal DPRAM) */
+#define CMC_IDPRAM_BASE		SROM_CS0_BASE
 #define CMC_IDPRAM_SIZE		DPRAM_SIZE_16KB
 
-/* For CMC221 SFR for IDPRAM */
-#define CMC_INT2CP_REG		0x10	/* Interrupt to CP            */
-#define CMC_INT2AP_REG		0x50
-#define CMC_CLR_INT_REG		0x28	/* Clear Interrupt to AP      */
-#define CMC_RESET_REG		0x3C
-#define CMC_PUT_REG		0x40	/* AP->CP reg for hostbooting */
-#define CMC_GET_REG		0x50	/* CP->AP reg for hostbooting */
-
-struct cmc22x_idpram_sfr {
-	u16 __iomem *int2cp;
-	u16 __iomem *int2ap;
-	u16 __iomem *clr_int2ap;
-	u16 __iomem *reset;
-	u16 __iomem *msg2cp;
-	u16 __iomem *msg2ap;
-};
-
-/*
-** Function prototypes for CMC221
-*/
-static void cmc_idpram_reset(void);
-static void cmc_idpram_clr_intr(void);
-static u16 cmc_idpram_recv_intr(void);
-static void cmc_idpram_send_intr(u16 irq_mask);
-static u16 cmc_idpram_recv_msg(void);
-static void cmc_idpram_send_msg(u16 msg);
-
-static int cmc_idpram_wakeup(void);
-static void cmc_idpram_sleep(void);
-
-static void cmc_idpram_setup_speed(enum dpram_speed speed);
+#define CMC_IDPRAM_SFR_BASE	(CMC_IDPRAM_BASE + CMC_IDPRAM_SIZE)
+#define CMC_IDPRAM_SFR_SIZE	DPRAM_SIZE_16KB
 
 /*
 ** Static variables for CMC221
@@ -317,36 +304,34 @@
 static struct sromc_bank_cfg cmc_idpram_bank_cfg = {
 	.csn = 0,
 	.attr = SROMC_DATA_16,
-	.size = CMC_IDPRAM_SIZE,
-	.addr = SROM_CS0_BASE,
 };
 
 static struct sromc_timing_cfg cmc_idpram_timing_cfg[] = {
 	[DPRAM_SPEED_LOW] = {
-		/* CP 33 MHz clk, 315 ns (63 cycles) with 200 MHz INT clk */
+		/* CP 33 MHz clk, 360 ns (72 cycles) with 200 MHz INT clk */
 		.tacs = 0x0F << 28,
 		.tcos = 0x0F << 24,
 		.tacc = 0x1F << 16,
-		.tcoh = 0x01 << 12,
+		.tcoh = 0x0A << 12,
 		.tcah = 0x00 << 8,
 		.tacp = 0x00 << 4,
 		.pmc  = 0x00 << 0,
 	},
 	[DPRAM_SPEED_MID] = {
-		/* CP 66 MHz clk, 160 ns (32 cycles) with 200 MHz INT clk */
+		/* CP 66 MHz clk, 180 ns (36 cycles) with 200 MHz INT clk */
 		.tacs = 0x01 << 28,
-		.tcos = 0x01 << 24,
-		.tacc = 0x1C << 16,
+		.tcos = 0x02 << 24,
+		.tacc = 0x1F << 16,
 		.tcoh = 0x01 << 12,
 		.tcah = 0x00 << 8,
 		.tacp = 0x00 << 4,
 		.pmc  = 0x00 << 0,
 	},
 	[DPRAM_SPEED_HIGH] = {
-		/* CP 133 MHz clk, 80 ns (16 cycles) with 200 MHz INT clk */
+		/* CP 133 MHz clk, 90 ns (18 cycles) with 200 MHz INT clk */
 		.tacs = 0x01 << 28,
 		.tcos = 0x01 << 24,
-		.tacc = 0x0C << 16,
+		.tacc = 0x0E << 16,
 		.tcoh = 0x01 << 12,
 		.tcah = 0x00 << 8,
 		.tacp = 0x00 << 4,
@@ -354,44 +339,23 @@
 	},
 };
 
-static struct modemlink_dpram_control cmc_idpram_ctrl = {
-	.reset = cmc_idpram_reset,
-	.clear_intr = cmc_idpram_clr_intr,
-	.recv_intr = cmc_idpram_recv_intr,
-	.send_intr = cmc_idpram_send_intr,
-	.recv_msg = cmc_idpram_recv_msg,
-	.send_msg = cmc_idpram_send_msg,
-
-	.wakeup = cmc_idpram_wakeup,
-	.sleep = cmc_idpram_sleep,
-
-	.setup_speed = cmc_idpram_setup_speed,
-
-	.dp_type = CP_IDPRAM,
-
-	.dpram_irq_flags = (IRQF_NO_SUSPEND | IRQF_TRIGGER_RISING),
+static struct modemlink_dpram_data cmc_idpram = {
+	.type = CP_IDPRAM,
+	.setup_speed = setup_dpram_access_timing,
 };
 
-static struct cmc22x_idpram_sfr cmc_idpram_sfr;
-
 static struct resource umts_modem_res[] = {
-	[RES_CP_ACTIVE_IRQ_ID] = {
-		.name = "cp_active_irq",
-		.start = LTE_ACTIVE_IRQ,
-		.end = LTE_ACTIVE_IRQ,
-		.flags = IORESOURCE_IRQ,
-	},
 	[RES_DPRAM_MEM_ID] = {
-		.name = "dpram_base",
-		.start = SROM_CS0_BASE,
-		.end = SROM_CS0_BASE + (CMC_IDPRAM_SIZE - 1),
+		.name = STR_DPRAM_BASE,
+		.start = CMC_IDPRAM_BASE,
+		.end = CMC_IDPRAM_BASE + (CMC_IDPRAM_SIZE - 1),
 		.flags = IORESOURCE_MEM,
 	},
-	[RES_DPRAM_IRQ_ID] = {
-		.name = "dpram_irq",
-		.start = CMC_IDPRAM_INT_IRQ_01,
-		.end = CMC_IDPRAM_INT_IRQ_01,
-		.flags = IORESOURCE_IRQ,
+	[RES_DPRAM_SFR_ID] = {
+		.name = STR_DPRAM_SFR_BASE,
+		.start = CMC_IDPRAM_SFR_BASE,
+		.end = CMC_IDPRAM_SFR_BASE + (CMC_IDPRAM_SIZE - 1),
+		.flags = IORESOURCE_MEM,
 	},
 };
 
@@ -400,25 +364,30 @@
 
 	.gpio_cp_on = CP_CMC221_PMIC_PWRON,
 	.gpio_cp_reset = CP_CMC221_CPU_RST,
+
+	.gpio_pda_active = GPIO_PDA_ACTIVE,
+
 	.gpio_phone_active = GPIO_LTE_ACTIVE,
-#if 1
-	.gpio_pda_active   = GPIO_PDA_ACTIVE,
-#endif
+	.irq_phone_active = LTE_ACTIVE_IRQ,
 
-	.gpio_dpram_int = GPIO_CMC_IDPRAM_INT_01,
-	.gpio_dpram_status = GPIO_CMC_IDPRAM_STATUS,
-	.gpio_dpram_wakeup = GPIO_CMC_IDPRAM_WAKEUP,
+	.gpio_ipc_int2ap = GPIO_CMC_IDPRAM_INT_01,
+	.irq_ipc_int2ap = CMC_IDPRAM_INT_IRQ_01,
+	.irqf_ipc_int2ap = (IRQF_NO_SUSPEND | IRQF_TRIGGER_RISING),
+
+	.gpio_cp_wakeup = GPIO_CMC_IDPRAM_WAKEUP,
+	.gpio_cp_status = GPIO_CMC_IDPRAM_STATUS,
 
 	.gpio_slave_wakeup = GPIO_IPC_SLAVE_WAKEUP,
 	.gpio_host_active = GPIO_ACTIVE_STATE,
 	.gpio_host_wakeup = GPIO_IPC_HOST_WAKEUP,
-	.gpio_dynamic_switching = GPIO_AP2CMC_INT2,
+
+	.gpio_link_switch = GPIO_AP2CMC_INT2,
 
 	.modem_net = UMTS_NETWORK,
 	.modem_type = SEC_CMC221,
 	.link_types = LINKTYPE(LINKDEV_DPRAM) | LINKTYPE(LINKDEV_USB),
 	.link_name = "cmc221_idpram",
-	.dpram_ctl = &cmc_idpram_ctrl,
+	.dpram = &cmc_idpram,
 
 	.num_iodevs = ARRAY_SIZE(umts_io_devices),
 	.iodevs = umts_io_devices,
@@ -426,7 +395,6 @@
 	.use_handover = true,
 
 	.ipc_version = SIPC_VER_50,
-	.use_mif_log = true,
 };
 
 static struct platform_device umts_modem = {
@@ -442,128 +410,30 @@
 /*
 ** Function definitions
 */
-static void cmc_idpram_reset(void)
-{
-	iowrite16(1, cmc_idpram_sfr.reset);
-}
-
-static void cmc_idpram_clr_intr(void)
-{
-	iowrite16(0xFFFF, cmc_idpram_sfr.clr_int2ap);
-	iowrite16(0, cmc_idpram_sfr.int2ap);
-}
-
-static u16 cmc_idpram_recv_intr(void)
-{
-	return ioread16(cmc_idpram_sfr.int2ap);
-}
-
-static void cmc_idpram_send_intr(u16 irq_mask)
-{
-	iowrite16(irq_mask, cmc_idpram_sfr.int2cp);
-}
-
-static u16 cmc_idpram_recv_msg(void)
-{
-	return ioread16(cmc_idpram_sfr.msg2ap);
-}
-
-static void cmc_idpram_send_msg(u16 msg)
-{
-	iowrite16(msg, cmc_idpram_sfr.msg2cp);
-}
-
-static int cmc_idpram_wakeup(void)
-{
-	int cnt = 0;
-
-	gpio_set_value(umts_modem_data.gpio_dpram_wakeup, 1);
-
-	while (!gpio_get_value(umts_modem_data.gpio_dpram_status)) {
-		if (cnt++ > 10) {
-			if (in_irq())
-				mif_err("ERR! gpio_dpram_status == 0 in IRQ\n");
-			else
-				mif_err("ERR! gpio_dpram_status == 0\n");
-			return -EACCES;
-		}
-
-		mif_info("gpio_dpram_status == 0 (cnt %d)\n", cnt);
-		if (in_interrupt())
-			udelay(1000);
-		else
-			usleep_range(1000, 2000);
-	}
-
-	return 0;
-}
-
-static void cmc_idpram_sleep(void)
-{
-	gpio_set_value(umts_modem_data.gpio_dpram_wakeup, 0);
-}
-
-static void cmc_idpram_setup_speed(enum dpram_speed speed)
-{
-	sromc_config_access_timing(cmc_idpram_bank_cfg.csn,
-				&cmc_idpram_timing_cfg[speed]);
-}
-
-static u8 *cmc_idpram_remap_sfr_region(struct sromc_bank_cfg *cfg)
-{
-	int dp_addr = cfg->addr + cfg->size;
-	int dp_size = cfg->size;
-	u8 __iomem *sfr_base;
-
-	/* Remap DPRAM SFR region */
-	sfr_base = (u8 __iomem *)ioremap_nocache(dp_addr, dp_size);
-	if (!sfr_base) {
-		mif_err("ERR: ioremap_nocache fail\n");
-		return NULL;
-	}
-
-	cmc_idpram_sfr.int2cp = (u16 __iomem *)(sfr_base + CMC_INT2CP_REG);
-	cmc_idpram_sfr.int2ap = (u16 __iomem *)(sfr_base + CMC_INT2AP_REG);
-	cmc_idpram_sfr.clr_int2ap = (u16 __iomem *)(sfr_base + CMC_CLR_INT_REG);
-	cmc_idpram_sfr.reset = (u16 __iomem *)(sfr_base + CMC_RESET_REG);
-	cmc_idpram_sfr.msg2cp = (u16 __iomem *)(sfr_base + CMC_PUT_REG);
-	cmc_idpram_sfr.msg2ap = (u16 __iomem *)(sfr_base + CMC_GET_REG);
-
-	return sfr_base;
-}
-
-/* Set dynamic environment for a modem */
 static void setup_umts_modem_env(void)
 {
-	unsigned int addr;
-	unsigned int end;
-
 	/* Config DPRAM control structure */
-	if (system_rev == 1 || system_rev >= 4) {
-		cmc_idpram_bank_cfg.csn = 0;
-		cmc_idpram_bank_cfg.addr = SROM_CS0_BASE;
-	} else {
+#if !defined(CONFIG_MACH_BAFFIN_KOR_LGT)
+	if (system_rev != 1 && system_rev < 4) {
+		unsigned int addr;
+		unsigned int end;
+
 		cmc_idpram_bank_cfg.csn = 1;
-		cmc_idpram_bank_cfg.addr = SROM_CS1_BASE;
-	}
 
-	addr = cmc_idpram_bank_cfg.addr;
-	end = addr + cmc_idpram_bank_cfg.size - 1;
-	umts_modem_res[RES_DPRAM_MEM_ID].start = addr;
-	umts_modem_res[RES_DPRAM_MEM_ID].end = end;
+		addr = SROM_CS1_BASE;
+		end = addr + CMC_IDPRAM_SIZE - 1;
+		umts_modem_res[RES_DPRAM_MEM_ID].start = addr;
+		umts_modem_res[RES_DPRAM_MEM_ID].end = end;
+
+		addr = SROM_CS1_BASE + CMC_IDPRAM_SIZE;
+		end = addr + CMC_IDPRAM_SIZE - 1;
+		umts_modem_res[RES_DPRAM_SFR_ID].start = addr;
+		umts_modem_res[RES_DPRAM_SFR_ID].end = end;
 
-	if (system_rev == 1 || system_rev >= 4) {
-		umts_modem_res[RES_DPRAM_IRQ_ID].start = CMC_IDPRAM_INT_IRQ_01;
-		umts_modem_res[RES_DPRAM_IRQ_ID].end = CMC_IDPRAM_INT_IRQ_01;
-	} else {
-		umts_modem_res[RES_DPRAM_IRQ_ID].start = CMC_IDPRAM_INT_IRQ_00;
-		umts_modem_res[RES_DPRAM_IRQ_ID].end = CMC_IDPRAM_INT_IRQ_00;
+		umts_modem_data.gpio_ipc_int2ap = GPIO_CMC_IDPRAM_INT_00;
+		umts_modem_data.irq_ipc_int2ap = CMC_IDPRAM_INT_IRQ_00;
 	}
-
-	if (system_rev == 1 || system_rev >= 4)
-		umts_modem_data.gpio_dpram_int = GPIO_CMC_IDPRAM_INT_01;
-	else
-		umts_modem_data.gpio_dpram_int = GPIO_CMC_IDPRAM_INT_00;
+#endif
 }
 
 static void config_umts_modem_gpio(void)
@@ -576,11 +446,10 @@
 	unsigned gpio_active_state = umts_modem_data.gpio_host_active;
 	unsigned gpio_host_wakeup = umts_modem_data.gpio_host_wakeup;
 	unsigned gpio_slave_wakeup = umts_modem_data.gpio_slave_wakeup;
-	unsigned gpio_dpram_int = umts_modem_data.gpio_dpram_int;
-	unsigned gpio_dpram_status = umts_modem_data.gpio_dpram_status;
-	unsigned gpio_dpram_wakeup = umts_modem_data.gpio_dpram_wakeup;
-	unsigned gpio_dynamic_switching =
-			umts_modem_data.gpio_dynamic_switching;
+	unsigned gpio_ipc_int2ap = umts_modem_data.gpio_ipc_int2ap;
+	unsigned gpio_cp_status = umts_modem_data.gpio_cp_status;
+	unsigned gpio_cp_wakeup = umts_modem_data.gpio_cp_wakeup;
+	unsigned gpio_link_switch = umts_modem_data.gpio_link_switch;
 
 	if (gpio_cp_on) {
 		err = gpio_request(gpio_cp_on, "CMC_ON");
@@ -659,59 +528,60 @@
 		}
 	}
 
-	if (gpio_dpram_int) {
-		err = gpio_request(gpio_dpram_int, "CMC_DPRAM_INT");
+	if (gpio_ipc_int2ap) {
+		err = gpio_request(gpio_ipc_int2ap, "CMC_DPRAM_INT");
 		if (err) {
 			mif_err("ERR: fail to request gpio %s\n",
 				"CMC_DPRAM_INT");
 		} else {
 			/* Configure as a wake-up source */
-			gpio_direction_input(gpio_dpram_int);
-			s3c_gpio_setpull(gpio_dpram_int, S3C_GPIO_PULL_NONE);
-			s3c_gpio_cfgpin(gpio_dpram_int, S3C_GPIO_SFN(0xF));
+			gpio_direction_input(gpio_ipc_int2ap);
+			s3c_gpio_setpull(gpio_ipc_int2ap, S3C_GPIO_PULL_NONE);
+			s3c_gpio_cfgpin(gpio_ipc_int2ap, S3C_GPIO_SFN(0xF));
 		}
 	}
 
-	if (gpio_dpram_status) {
-		err = gpio_request(gpio_dpram_status, "CMC_DPRAM_STATUS");
+	if (gpio_cp_status) {
+		err = gpio_request(gpio_cp_status, "CMC_DPRAM_STATUS");
 		if (err) {
 			mif_err("ERR: fail to request gpio %s\n",
 				"CMC_DPRAM_STATUS");
 		} else {
-			gpio_direction_input(gpio_dpram_status);
-			s3c_gpio_setpull(gpio_dpram_status, S3C_GPIO_PULL_NONE);
+			gpio_direction_input(gpio_cp_status);
+			s3c_gpio_setpull(gpio_cp_status, S3C_GPIO_PULL_NONE);
 		}
 	}
 
-	if (gpio_dpram_wakeup) {
-		err = gpio_request(gpio_dpram_wakeup, "CMC_DPRAM_WAKEUP");
+	if (gpio_cp_wakeup) {
+		err = gpio_request(gpio_cp_wakeup, "CMC_DPRAM_WAKEUP");
 		if (err) {
 			mif_err("ERR: fail to request gpio %s\n",
 				"CMC_DPRAM_WAKEUP");
 		} else {
-			gpio_direction_output(gpio_dpram_wakeup, 1);
-			s3c_gpio_setpull(gpio_dpram_wakeup, S3C_GPIO_PULL_NONE);
+			gpio_direction_output(gpio_cp_wakeup, 1);
+			s3c_gpio_setpull(gpio_cp_wakeup, S3C_GPIO_PULL_NONE);
 		}
 	}
 
-	if (gpio_dynamic_switching) {
-		err = gpio_request(gpio_dynamic_switching, "DYNAMIC_SWITCHING");
+	if (gpio_link_switch) {
+		err = gpio_request(gpio_link_switch, "DYNAMIC_SWITCHING");
 		if (err) {
 			mif_err("ERR: fail to request gpio %s\n",
 					"DYNAMIC_SWITCHING\n");
 		} else {
-			gpio_direction_input(gpio_dynamic_switching);
-			s3c_gpio_setpull(gpio_dynamic_switching,
-					S3C_GPIO_PULL_DOWN);
+			gpio_direction_input(gpio_link_switch);
+			s3c_gpio_setpull(gpio_link_switch, S3C_GPIO_PULL_DOWN);
 		}
 	}
 
 	mif_info("done\n");
 }
 
-static int host_port_enable(int port, int enable);
-static int exynos_frequency_lock(struct device *dev);
-static int exynos_frequency_unlock(struct device *dev);
+static void setup_dpram_access_timing(enum dpram_speed speed)
+{
+	sromc_config_access_timing(cmc_idpram_bank_cfg.csn,
+				&cmc_idpram_timing_cfg[speed]);
+}
 
 static struct modemlink_pm_data umts_link_pm_data = {
 	.name = "umts_link_pm",
@@ -875,6 +745,7 @@
 }
 
 /* For CBP7.2 EDPRAM (External DPRAM) */
+#define CBP_EDPRAM_BASE		SROM_CS1_BASE
 #define CBP_EDPRAM_SIZE		DPRAM_SIZE_16KB
 
 /*
@@ -883,8 +754,6 @@
 static struct sromc_bank_cfg cbp_edpram_bank_cfg = {
 	.csn = 1,
 	.attr = SROMC_DATA_16 | SROMC_BYTE_EN,
-	.size = CBP_EDPRAM_SIZE,
-	.addr = SROM_CS1_BASE,
 };
 
 static struct sromc_timing_cfg cbp_edpram_timing_cfg = {
@@ -897,51 +766,44 @@
 	.pmc  = 0x00 << 0,
 };
 
-static struct modemlink_dpram_control cbp_edpram_ctrl = {
-	.dp_type = EXT_DPRAM,
-	.dpram_irq_flags = (IRQF_NO_SUSPEND | IRQF_TRIGGER_FALLING),
+static struct modemlink_dpram_data cbp_edpram = {
+	.type = EXT_DPRAM,
+	.res_ack_wait_timeout = 100,
 };
 
 static struct resource cdma_modem_res[] = {
-	[RES_CP_ACTIVE_IRQ_ID] = {
-		.name = "cp_active_irq",
-		.start = CBP_PHONE_ACTIVE_IRQ,
-		.end = CBP_PHONE_ACTIVE_IRQ,
-		.flags = IORESOURCE_IRQ,
-	},
 	[RES_DPRAM_MEM_ID] = {
-		.name = "dpram_base",
-		.start = SROM_CS1_BASE,
-		.end = SROM_CS1_BASE + (CBP_EDPRAM_SIZE - 1),
+		.name = STR_DPRAM_BASE,
+		.start = CBP_EDPRAM_BASE,
+		.end = CBP_EDPRAM_BASE + (CBP_EDPRAM_SIZE - 1),
 		.flags = IORESOURCE_MEM,
 	},
-	[RES_DPRAM_IRQ_ID] = {
-		.name = "dpram_irq",
-		.start = CBP_DPRAM_INT_IRQ_01,
-		.end = CBP_DPRAM_INT_IRQ_01,
-		.flags = IORESOURCE_IRQ,
-	},
 };
 
 static struct modem_data cdma_modem_data = {
 	.name = "cbp7.2",
 
-	.gpio_cp_on        = GPIO_CBP_PMIC_PWRON,
-	.gpio_cp_off       = GPIO_CBP_PS_HOLD_OFF,
-	.gpio_cp_reset     = GPIO_CBP_CP_RST,
-	.gpio_pda_active   = GPIO_PDA_ACTIVE,
+	.gpio_cp_on = GPIO_CBP_PMIC_PWRON,
+	.gpio_cp_off = GPIO_CBP_PS_HOLD_OFF,
+	.gpio_cp_reset = GPIO_CBP_CP_RST,
+
+	.gpio_pda_active = GPIO_PDA_ACTIVE,
+
 	.gpio_phone_active = GPIO_CBP_PHONE_ACTIVE,
+	.irq_phone_active = CBP_PHONE_ACTIVE_IRQ,
 
-	.gpio_dpram_int = GPIO_CBP_DPRAM_INT_01,
+	.gpio_ipc_int2ap = GPIO_CBP_DPRAM_INT_01,
+	.irq_ipc_int2ap = CBP_DPRAM_INT_IRQ_01,
+	.irqf_ipc_int2ap = (IRQF_NO_SUSPEND | IRQF_TRIGGER_FALLING),
 
-	.modem_net  = CDMA_NETWORK,
+	.modem_net = CDMA_NETWORK,
 	.modem_type = VIA_CBP72,
 	.link_types = LINKTYPE(LINKDEV_DPRAM),
-	.link_name  = "cbp72_edpram",
-	.dpram_ctl  = &cbp_edpram_ctrl,
+	.link_name = "cbp72_edpram",
+	.dpram = &cbp_edpram,
 
 	.num_iodevs = ARRAY_SIZE(cdma_io_devices),
-	.iodevs     = cdma_io_devices,
+	.iodevs = cdma_io_devices,
 
 	.use_handover = true,
 
@@ -961,35 +823,22 @@
 /* Set dynamic environment for a modem */
 static void setup_cdma_modem_env(void)
 {
-	unsigned int addr;
-	unsigned int end;
+#if !defined(CONFIG_MACH_BAFFIN_KOR_LGT)
+	if (system_rev != 1 && system_rev < 4) {
+		unsigned int addr;
+		unsigned int end;
 
-	/* Config DPRAM control structure */
-	if (system_rev == 1 || system_rev >= 4) {
-		cbp_edpram_bank_cfg.csn = 1;
-		cbp_edpram_bank_cfg.addr = SROM_CS1_BASE;
-	} else {
 		cbp_edpram_bank_cfg.csn = 0;
-		cbp_edpram_bank_cfg.addr = SROM_CS0_BASE;
-	}
 
-	addr = cbp_edpram_bank_cfg.addr;
-	end = addr + cbp_edpram_bank_cfg.size - 1;
-	cdma_modem_res[RES_DPRAM_MEM_ID].start = addr;
-	cdma_modem_res[RES_DPRAM_MEM_ID].end = end;
+		addr = SROM_CS0_BASE;
+		end = addr + CBP_EDPRAM_SIZE - 1;
+		cdma_modem_res[RES_DPRAM_MEM_ID].start = addr;
+		cdma_modem_res[RES_DPRAM_MEM_ID].end = end;
 
-	if (system_rev == 1 || system_rev >= 4) {
-		cdma_modem_res[RES_DPRAM_IRQ_ID].start = CBP_DPRAM_INT_IRQ_01;
-		cdma_modem_res[RES_DPRAM_IRQ_ID].end = CBP_DPRAM_INT_IRQ_01;
-	} else {
-		cdma_modem_res[RES_DPRAM_IRQ_ID].start = CBP_DPRAM_INT_IRQ_00;
-		cdma_modem_res[RES_DPRAM_IRQ_ID].end = CBP_DPRAM_INT_IRQ_00;
+		cdma_modem_data.gpio_ipc_int2ap = GPIO_CBP_DPRAM_INT_00;
+		cdma_modem_data.irq_ipc_int2ap = CBP_DPRAM_INT_IRQ_00;
 	}
-
-	if (system_rev == 1 || system_rev >= 4)
-		cdma_modem_data.gpio_dpram_int = GPIO_CBP_DPRAM_INT_01;
-	else
-		cdma_modem_data.gpio_dpram_int = GPIO_CBP_DPRAM_INT_00;
+#endif
 }
 
 static void config_cdma_modem_gpio(void)
@@ -1001,7 +850,7 @@
 	unsigned gpio_cp_rst = cdma_modem_data.gpio_cp_reset;
 	unsigned gpio_pda_active = cdma_modem_data.gpio_pda_active;
 	unsigned gpio_phone_active = cdma_modem_data.gpio_phone_active;
-	unsigned gpio_dpram_int = cdma_modem_data.gpio_dpram_int;
+	unsigned gpio_ipc_int2ap = cdma_modem_data.gpio_ipc_int2ap;
 
 	pr_info("[MDM] <%s>\n", __func__);
 
@@ -1067,15 +916,15 @@
 		}
 	}
 
-	if (gpio_dpram_int) {
-		err = gpio_request(gpio_dpram_int, "CBP_DPRAM_INT");
+	if (gpio_ipc_int2ap) {
+		err = gpio_request(gpio_ipc_int2ap, "CBP_DPRAM_INT");
 		if (err) {
 			pr_err("fail to request gpio %s\n", "CBP_DPRAM_INT");
 		} else {
 			/* Configure as a wake-up source */
-			gpio_direction_input(gpio_dpram_int);
-			s3c_gpio_setpull(gpio_dpram_int, S3C_GPIO_PULL_NONE);
-			s3c_gpio_cfgpin(gpio_dpram_int, S3C_GPIO_SFN(0xF));
+			gpio_direction_input(gpio_ipc_int2ap);
+			s3c_gpio_setpull(gpio_ipc_int2ap, S3C_GPIO_PULL_NONE);
+			s3c_gpio_cfgpin(gpio_ipc_int2ap, S3C_GPIO_SFN(0xF));
 		}
 	}
 
@@ -1162,13 +1011,13 @@
 
 	/* hub off from cpuidle(LPA), skip the msleep schedule*/
 	if (val) {
-		msleep(20);
+		usleep_range(3000, 3100);
 		mif_info("val = %d\n", gpio_get_value(GPIO_USB_HUB_RST));
 
 		gpio_set_value(GPIO_USB_HUB_RST, !!val);
 
 		mif_info("val = %d\n", gpio_get_value(GPIO_USB_HUB_RST));
-		udelay(5); /* need it ?*/
+		usleep_range(7000, 7100);
 	}
 	return 0;
 }
@@ -1207,14 +1056,13 @@
 
 	mif_info("port(%d) control(%d)\n", port, enable);
 
-	if (!modem_using_hub())
-		return 0;
-
 	if (enable) {
-		err = usbhub_set_mode(usbhub_ctl, USB3503_MODE_HUB);
-		if (err < 0) {
-			mif_err("ERR: hub on fail\n");
-			goto exit;
+		if (modem_using_hub()) {
+			err = usbhub_set_mode(usbhub_ctl, USB3503_MODE_HUB);
+			if (err < 0) {
+				mif_err("ERR: hub on fail\n");
+				goto exit;
+			}
 		}
 		err = s5p_ehci_port_control(&s5p_device_ehci, port, 1);
 		if (err < 0) {
@@ -1222,10 +1070,12 @@
 			goto exit;
 		}
 	} else {
-		err = usbhub_set_mode(usbhub_ctl, USB3503_MODE_STANDBY);
-		if (err < 0) {
-			mif_err("ERR: hub off fail\n");
-			goto exit;
+		if (modem_using_hub()) {
+			err = usbhub_set_mode(usbhub_ctl, USB3503_MODE_STANDBY);
+			if (err < 0) {
+				mif_err("ERR: hub off fail\n");
+				goto exit;
+			}
 		}
 		err = s5p_ehci_port_control(&s5p_device_ehci, port, 0);
 		if (err < 0) {
@@ -1251,7 +1101,9 @@
 	platform_device_register(&s3c_device_i2c20);
 	return 0;
 }
+#if !defined(CONFIG_MACH_BAFFIN)
 device_initcall(init_usbhub);
+#endif
 
 static int __init init_modem(void)
 {
@@ -1261,6 +1113,14 @@
 
 	mif_err("System Revision = %d\n", system_rev);
 
+#ifdef CONFIG_MACH_BAFFIN
+	umts_link_pm_data.has_usbhub = false;
+#endif
+#if defined(CONFIG_SEC_MODEM_C1_LGT)
+	if (system_rev >= 11)
+		umts_link_pm_data.has_usbhub = false;
+#endif
+
 	/*
 	** Complete modem_data configuration including link_pm_data
 	*/
@@ -1302,12 +1162,6 @@
 	sromc_config_access_timing(bnk_cfg->csn, tm_cfg);
 
 	/*
-	** Remap SFR region for CMC22x IDPRAM
-	*/
-	if (!cmc_idpram_remap_sfr_region(&cmc_idpram_bank_cfg))
-		return -1;
-
-	/*
 	** Register the modem devices
 	*/
 	platform_device_register(&umts_modem);
diff -Naur ./arch/arm/mach-exynos/board-c1-modems.c ../../HK_JB/Kernel/arch/arm/mach-exynos/board-c1-modems.c
--- ./arch/arm/mach-exynos/board-c1-modems.c	2012-12-08 20:40:46.109821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/board-c1-modems.c	2012-11-22 09:13:14.000000000 +0100
@@ -50,6 +50,10 @@
 #define C1ATT_REV_0_7	9	/* rev0.7 == system_rev:9 */
 
 static int __init init_modem(void);
+static void setup_dpram_access_timing(enum dpram_speed speed);
+static int host_port_enable(int port, int enable);
+static int exynos_frequency_lock(struct device *dev);
+static int exynos_frequency_unlock(struct device *dev);
 
 static struct modem_io_t umts_io_devices[] = {
 	[0] = {
@@ -58,6 +62,7 @@
 		.format = IPC_BOOT,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM),
+		.app = "CBD"
 	},
 	[1] = {
 		.name = "umts_ipc0",
@@ -65,6 +70,7 @@
 		.format = IPC_FMT,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM),
+		.app = "RIL"
 	},
 	[2] = {
 		.name = "umts_rfs0",
@@ -72,6 +78,7 @@
 		.format = IPC_RAW,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM),
+		.app = "RFS"
 	},
 	[3] = {
 		.name = "multipdp",
@@ -126,6 +133,7 @@
 		.format = IPC_RAW,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM),
+		.app = "Data Router"
 	},
 	[10] = {
 		.name = "umts_dm0",	/* DM Port */
@@ -133,6 +141,7 @@
 		.format = IPC_RAW,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM),
+		.app = "DIAG"
 	},
 	[11] = {
 		.name = "umts_loopback_cp2ap",
@@ -141,6 +150,7 @@
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM) | LINKTYPE(LINKDEV_USB),
 		.tx_link = LINKDEV_DPRAM,
+		.app = "CP Loopback"
 	},
 	[12] = {
 		.name = "umts_loopback_ap2cp",
@@ -148,6 +158,7 @@
 		.format = IPC_RAW,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM),
+		.app = "AP loopback"
 	},
 	[13] = {
 		.name = "umts_ramdump0",
@@ -184,76 +195,46 @@
 };
 
 /* For CMC221 IDPRAM (Internal DPRAM) */
+#define CMC_IDPRAM_BASE		SROM_CS0_BASE
 #define CMC_IDPRAM_SIZE		DPRAM_SIZE_16KB
 
-/* For CMC221 SFR for IDPRAM */
-#define CMC_INT2CP_REG		0x10	/* Interrupt to CP            */
-#define CMC_INT2AP_REG		0x50
-#define CMC_CLR_INT_REG		0x28	/* Clear Interrupt to AP      */
-#define CMC_RESET_REG		0x3C
-#define CMC_PUT_REG		0x40	/* AP->CP reg for hostbooting */
-#define CMC_GET_REG		0x50	/* CP->AP reg for hostbooting */
-
-struct cmc22x_idpram_sfr {
-	u16 __iomem *int2cp;
-	u16 __iomem *int2ap;
-	u16 __iomem *clr_int2ap;
-	u16 __iomem *reset;
-	u16 __iomem *msg2cp;
-	u16 __iomem *msg2ap;
-};
+#define CMC_IDPRAM_SFR_BASE	(CMC_IDPRAM_BASE + CMC_IDPRAM_SIZE)
+#define CMC_IDPRAM_SFR_SIZE	DPRAM_SIZE_16KB
 
 /*
-** Function prototypes for CMC221
-*/
-static void cmc_idpram_reset(void);
-static void cmc_idpram_clr_intr(void);
-static u16 cmc_idpram_recv_intr(void);
-static void cmc_idpram_send_intr(u16 irq_mask);
-static u16 cmc_idpram_recv_msg(void);
-static void cmc_idpram_send_msg(u16 msg);
-
-static int cmc_idpram_wakeup(void);
-static void cmc_idpram_sleep(void);
-
-static void cmc_idpram_setup_speed(enum dpram_speed speed);
-
-/*
-** Static variables
+** Static variables for CMC221
 */
 static struct sromc_bank_cfg cmc_idpram_bank_cfg = {
 	.csn = 0,
 	.attr = SROMC_DATA_16,
-	.size = CMC_IDPRAM_SIZE,
-	.addr = SROM_CS0_BASE,
 };
 
 static struct sromc_timing_cfg cmc_idpram_timing_cfg[] = {
 	[DPRAM_SPEED_LOW] = {
-		/* CP 33 MHz clk, 315 ns (63 cycles) with 200 MHz INT clk */
+		/* CP 33 MHz clk, 360 ns (72 cycles) with 200 MHz INT clk */
 		.tacs = 0x0F << 28,
 		.tcos = 0x0F << 24,
 		.tacc = 0x1F << 16,
-		.tcoh = 0x01 << 12,
+		.tcoh = 0x0A << 12,
 		.tcah = 0x00 << 8,
 		.tacp = 0x00 << 4,
 		.pmc  = 0x00 << 0,
 	},
 	[DPRAM_SPEED_MID] = {
-		/* CP 66 MHz clk, 160 ns (32 cycles) with 200 MHz INT clk */
+		/* CP 66 MHz clk, 180 ns (36 cycles) with 200 MHz INT clk */
 		.tacs = 0x01 << 28,
-		.tcos = 0x01 << 24,
-		.tacc = 0x1C << 16,
+		.tcos = 0x02 << 24,
+		.tacc = 0x1F << 16,
 		.tcoh = 0x01 << 12,
 		.tcah = 0x00 << 8,
 		.tacp = 0x00 << 4,
 		.pmc  = 0x00 << 0,
 	},
 	[DPRAM_SPEED_HIGH] = {
-		/* CP 133 MHz clk, 80 ns (16 cycles) with 200 MHz INT clk */
+		/* CP 133 MHz clk, 90 ns (18 cycles) with 200 MHz INT clk */
 		.tacs = 0x01 << 28,
 		.tcos = 0x01 << 24,
-		.tacc = 0x0C << 16,
+		.tacc = 0x0E << 16,
 		.tcoh = 0x01 << 12,
 		.tcah = 0x00 << 8,
 		.tacp = 0x00 << 4,
@@ -261,44 +242,23 @@
 	},
 };
 
-static struct modemlink_dpram_control cmc_idpram_ctrl = {
-	.reset = cmc_idpram_reset,
-	.clear_intr = cmc_idpram_clr_intr,
-	.recv_intr = cmc_idpram_recv_intr,
-	.send_intr = cmc_idpram_send_intr,
-	.recv_msg = cmc_idpram_recv_msg,
-	.send_msg = cmc_idpram_send_msg,
-
-	.wakeup = cmc_idpram_wakeup,
-	.sleep = cmc_idpram_sleep,
-
-	.setup_speed = cmc_idpram_setup_speed,
-
-	.dp_type = CP_IDPRAM,
-
-	.dpram_irq_flags = (IRQF_NO_SUSPEND | IRQF_TRIGGER_RISING),
+static struct modemlink_dpram_data cmc_idpram = {
+	.type = CP_IDPRAM,
+	.setup_speed = setup_dpram_access_timing,
 };
 
-static struct cmc22x_idpram_sfr cmc_idpram_sfr;
-
 static struct resource umts_modem_res[] = {
-	[RES_CP_ACTIVE_IRQ_ID] = {
-		.name = "cp_active_irq",
-		.start = LTE_ACTIVE_IRQ,
-		.end = LTE_ACTIVE_IRQ,
-		.flags = IORESOURCE_IRQ,
-	},
 	[RES_DPRAM_MEM_ID] = {
-		.name = "dpram_base",
-		.start = SROM_CS0_BASE,
-		.end = SROM_CS0_BASE + (CMC_IDPRAM_SIZE - 1),
+		.name = STR_DPRAM_BASE,
+		.start = CMC_IDPRAM_BASE,
+		.end = CMC_IDPRAM_BASE + (CMC_IDPRAM_SIZE - 1),
 		.flags = IORESOURCE_MEM,
 	},
-	[RES_DPRAM_IRQ_ID] = {
-		.name = "dpram_irq",
-		.start = CMC_IDPRAM_INT_IRQ_00,
-		.end = CMC_IDPRAM_INT_IRQ_00,
-		.flags = IORESOURCE_IRQ,
+	[RES_DPRAM_SFR_ID] = {
+		.name = STR_DPRAM_SFR_BASE,
+		.start = CMC_IDPRAM_SFR_BASE,
+		.end = CMC_IDPRAM_SFR_BASE + (CMC_IDPRAM_SIZE - 1),
+		.flags = IORESOURCE_MEM,
 	},
 };
 
@@ -307,25 +267,34 @@
 
 	.gpio_cp_on = CP_CMC221_PMIC_PWRON,
 	.gpio_cp_reset = CP_CMC221_CPU_RST,
-	.gpio_phone_active = GPIO_LTE_ACTIVE,
-#if defined(CONFIG_MACH_C1_KOR_SKT) || defined(CONFIG_MACH_C1_KOR_KT)
+
+#if defined(CONFIG_MACH_C1_KOR_SKT) || defined(CONFIG_MACH_C1_KOR_KT) || \
+defined(CONFIG_MACH_BAFFIN_KOR_SKT) || defined(CONFIG_MACH_BAFFIN_KOR_KT) || \
+defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
 	.gpio_pda_active   = GPIO_PDA_ACTIVE,
 #endif
 
-	.gpio_dpram_int = GPIO_CMC_IDPRAM_INT_00,
-	.gpio_dpram_status = GPIO_CMC_IDPRAM_STATUS,
-	.gpio_dpram_wakeup = GPIO_CMC_IDPRAM_WAKEUP,
+	.gpio_phone_active = GPIO_LTE_ACTIVE,
+	.irq_phone_active = LTE_ACTIVE_IRQ,
+
+	.gpio_ipc_int2ap = GPIO_CMC_IDPRAM_INT_00,
+	.irq_ipc_int2ap = CMC_IDPRAM_INT_IRQ_00,
+	.irqf_ipc_int2ap = (IRQF_NO_SUSPEND | IRQF_TRIGGER_RISING),
+
+	.gpio_cp_wakeup = GPIO_CMC_IDPRAM_WAKEUP,
+	.gpio_cp_status = GPIO_CMC_IDPRAM_STATUS,
 
 	.gpio_slave_wakeup = GPIO_IPC_SLAVE_WAKEUP,
 	.gpio_host_active = GPIO_ACTIVE_STATE,
 	.gpio_host_wakeup = GPIO_IPC_HOST_WAKEUP,
-	.gpio_dynamic_switching = GPIO_AP2CMC_INT2,
+
+	.gpio_link_switch = GPIO_AP2CMC_INT2,
 
 	.modem_net = UMTS_NETWORK,
 	.modem_type = SEC_CMC221,
 	.link_types = LINKTYPE(LINKDEV_DPRAM) | LINKTYPE(LINKDEV_USB),
 	.link_name = "cmc221_idpram",
-	.dpram_ctl = &cmc_idpram_ctrl,
+	.dpram = &cmc_idpram,
 
 	.num_iodevs = ARRAY_SIZE(umts_io_devices),
 	.iodevs = umts_io_devices,
@@ -333,7 +302,6 @@
 	.use_handover = false,
 
 	.ipc_version = SIPC_VER_50,
-	.use_mif_log = true,
 };
 
 static struct platform_device umts_modem = {
@@ -349,96 +317,6 @@
 /*
 ** Function definitions
 */
-static void cmc_idpram_reset(void)
-{
-	iowrite16(1, cmc_idpram_sfr.reset);
-}
-
-static void cmc_idpram_clr_intr(void)
-{
-	iowrite16(0xFFFF, cmc_idpram_sfr.clr_int2ap);
-	iowrite16(0, cmc_idpram_sfr.int2ap);
-}
-
-static u16 cmc_idpram_recv_intr(void)
-{
-	return ioread16(cmc_idpram_sfr.int2ap);
-}
-
-static void cmc_idpram_send_intr(u16 irq_mask)
-{
-	iowrite16(irq_mask, cmc_idpram_sfr.int2cp);
-}
-
-static u16 cmc_idpram_recv_msg(void)
-{
-	return ioread16(cmc_idpram_sfr.msg2ap);
-}
-
-static void cmc_idpram_send_msg(u16 msg)
-{
-	iowrite16(msg, cmc_idpram_sfr.msg2cp);
-}
-
-static int cmc_idpram_wakeup(void)
-{
-	int cnt = 0;
-
-	gpio_set_value(umts_modem_data.gpio_dpram_wakeup, 1);
-
-	while (!gpio_get_value(umts_modem_data.gpio_dpram_status)) {
-		if (cnt++ > 10) {
-			if (in_irq())
-				mif_err("ERR! gpio_dpram_status == 0 in IRQ\n");
-			else
-				mif_err("ERR! gpio_dpram_status == 0\n");
-			return -EACCES;
-		}
-
-		mif_info("gpio_dpram_status == 0 (cnt %d)\n", cnt);
-		if (in_interrupt())
-			udelay(1000);
-		else
-			usleep_range(1000, 2000);
-	}
-
-	return 0;
-}
-
-static void cmc_idpram_sleep(void)
-{
-	gpio_set_value(umts_modem_data.gpio_dpram_wakeup, 0);
-}
-
-static void cmc_idpram_setup_speed(enum dpram_speed speed)
-{
-	sromc_config_access_timing(cmc_idpram_bank_cfg.csn,
-				&cmc_idpram_timing_cfg[speed]);
-}
-
-static u8 *cmc_idpram_remap_sfr_region(struct sromc_bank_cfg *cfg)
-{
-	int dp_addr = cfg->addr + cfg->size;
-	int dp_size = cfg->size;
-	u8 __iomem *sfr_base;
-
-	/* Remap DPRAM SFR region */
-	sfr_base = (u8 __iomem *)ioremap_nocache(dp_addr, dp_size);
-	if (!sfr_base) {
-		mif_err("ERR: ioremap_nocache fail\n");
-		return NULL;
-	}
-
-	cmc_idpram_sfr.int2cp = (u16 __iomem *)(sfr_base + CMC_INT2CP_REG);
-	cmc_idpram_sfr.int2ap = (u16 __iomem *)(sfr_base + CMC_INT2AP_REG);
-	cmc_idpram_sfr.clr_int2ap = (u16 __iomem *)(sfr_base + CMC_CLR_INT_REG);
-	cmc_idpram_sfr.reset = (u16 __iomem *)(sfr_base + CMC_RESET_REG);
-	cmc_idpram_sfr.msg2cp = (u16 __iomem *)(sfr_base + CMC_PUT_REG);
-	cmc_idpram_sfr.msg2ap = (u16 __iomem *)(sfr_base + CMC_GET_REG);
-
-	return sfr_base;
-}
-
 static void config_umts_modem_gpio(void)
 {
 	int err;
@@ -449,11 +327,10 @@
 	unsigned gpio_active_state = umts_modem_data.gpio_host_active;
 	unsigned gpio_host_wakeup = umts_modem_data.gpio_host_wakeup;
 	unsigned gpio_slave_wakeup = umts_modem_data.gpio_slave_wakeup;
-	unsigned gpio_dpram_int = umts_modem_data.gpio_dpram_int;
-	unsigned gpio_dpram_status = umts_modem_data.gpio_dpram_status;
-	unsigned gpio_dpram_wakeup = umts_modem_data.gpio_dpram_wakeup;
-	unsigned gpio_dynamic_switching =
-			umts_modem_data.gpio_dynamic_switching;
+	unsigned gpio_ipc_int2ap = umts_modem_data.gpio_ipc_int2ap;
+	unsigned gpio_cp_status = umts_modem_data.gpio_cp_status;
+	unsigned gpio_cp_wakeup = umts_modem_data.gpio_cp_wakeup;
+	unsigned gpio_link_switch = umts_modem_data.gpio_link_switch;
 
 	if (gpio_cp_on) {
 		err = gpio_request(gpio_cp_on, "CMC_ON");
@@ -532,59 +409,60 @@
 		}
 	}
 
-	if (gpio_dpram_int) {
-		err = gpio_request(gpio_dpram_int, "CMC_DPRAM_INT");
+	if (gpio_ipc_int2ap) {
+		err = gpio_request(gpio_ipc_int2ap, "CMC_DPRAM_INT");
 		if (err) {
 			mif_err("ERR: fail to request gpio %s\n",
 				"CMC_DPRAM_INT");
 		} else {
 			/* Configure as a wake-up source */
-			gpio_direction_input(gpio_dpram_int);
-			s3c_gpio_setpull(gpio_dpram_int, S3C_GPIO_PULL_NONE);
-			s3c_gpio_cfgpin(gpio_dpram_int, S3C_GPIO_SFN(0xF));
+			gpio_direction_input(gpio_ipc_int2ap);
+			s3c_gpio_setpull(gpio_ipc_int2ap, S3C_GPIO_PULL_NONE);
+			s3c_gpio_cfgpin(gpio_ipc_int2ap, S3C_GPIO_SFN(0xF));
 		}
 	}
 
-	if (gpio_dpram_status) {
-		err = gpio_request(gpio_dpram_status, "CMC_DPRAM_STATUS");
+	if (gpio_cp_status) {
+		err = gpio_request(gpio_cp_status, "CMC_DPRAM_STATUS");
 		if (err) {
 			mif_err("ERR: fail to request gpio %s\n",
 				"CMC_DPRAM_STATUS");
 		} else {
-			gpio_direction_input(gpio_dpram_status);
-			s3c_gpio_setpull(gpio_dpram_status, S3C_GPIO_PULL_NONE);
+			gpio_direction_input(gpio_cp_status);
+			s3c_gpio_setpull(gpio_cp_status, S3C_GPIO_PULL_NONE);
 		}
 	}
 
-	if (gpio_dpram_wakeup) {
-		err = gpio_request(gpio_dpram_wakeup, "CMC_DPRAM_WAKEUP");
+	if (gpio_cp_wakeup) {
+		err = gpio_request(gpio_cp_wakeup, "CMC_DPRAM_WAKEUP");
 		if (err) {
 			mif_err("ERR: fail to request gpio %s\n",
 				"CMC_DPRAM_WAKEUP");
 		} else {
-			gpio_direction_output(gpio_dpram_wakeup, 1);
-			s3c_gpio_setpull(gpio_dpram_wakeup, S3C_GPIO_PULL_NONE);
+			gpio_direction_output(gpio_cp_wakeup, 1);
+			s3c_gpio_setpull(gpio_cp_wakeup, S3C_GPIO_PULL_NONE);
 		}
 	}
 
-	if (gpio_dynamic_switching) {
-		err = gpio_request(gpio_dynamic_switching, "DYNAMIC_SWITCHING");
+	if (gpio_link_switch) {
+		err = gpio_request(gpio_link_switch, "DYNAMIC_SWITCHING");
 		if (err) {
 			mif_err("ERR: fail to request gpio %s\n",
 					"DYNAMIC_SWITCHING\n");
 		} else {
-			gpio_direction_input(gpio_dynamic_switching);
-			s3c_gpio_setpull(gpio_dynamic_switching,
-					S3C_GPIO_PULL_DOWN);
+			gpio_direction_input(gpio_link_switch);
+			s3c_gpio_setpull(gpio_link_switch, S3C_GPIO_PULL_DOWN);
 		}
 	}
 
 	mif_info("done\n");
 }
 
-static int host_port_enable(int port, int enable);
-static int exynos_frequency_lock(struct device *dev);
-static int exynos_frequency_unlock(struct device *dev);
+static void setup_dpram_access_timing(enum dpram_speed speed)
+{
+	sromc_config_access_timing(cmc_idpram_bank_cfg.csn,
+				&cmc_idpram_timing_cfg[speed]);
+}
 
 static struct modemlink_pm_data umts_link_pm_data = {
 	.name = "umts_link_pm",
@@ -808,13 +686,13 @@
 
 	/* hub off from cpuidle(LPA), skip the msleep schedule*/
 	if (val) {
-		msleep(20);
+		usleep_range(3000, 3100);
 		mif_info("val = %d\n", gpio_get_value(GPIO_USB_HUB_RST));
 
 		gpio_set_value(GPIO_USB_HUB_RST, !!val);
 
 		mif_info("val = %d\n", gpio_get_value(GPIO_USB_HUB_RST));
-		udelay(5); /* need it ?*/
+		usleep_range(7000, 7100);
 	}
 	return 0;
 }
@@ -898,7 +776,9 @@
 	platform_device_register(&s3c_device_i2c20);
 	return 0;
 }
+#if !defined(CONFIG_MACH_BAFFIN)
 device_initcall(init_usbhub);
+#endif
 
 static int __init init_modem(void)
 {
@@ -919,6 +799,11 @@
 #ifdef CONFIG_MACH_BAFFIN
 		umts_link_pm_data.has_usbhub = false;
 #endif
+#if defined(CONFIG_MACH_C1_KOR_SKT) || defined(CONFIG_MACH_C1_KOR_KT)
+	if (system_rev >= 15)
+		umts_link_pm_data.has_usbhub = false;
+#endif
+
 	/*
 	** Complete modem_data configuration including link_pm_data
 	*/
@@ -949,12 +834,6 @@
 	sromc_config_access_timing(bnk_cfg->csn, tm_cfg);
 
 	/*
-	** Remap SFR region for CMC22x IDPRAM
-	*/
-	if (!cmc_idpram_remap_sfr_region(&cmc_idpram_bank_cfg))
-		return -1;
-
-	/*
 	** Register the modem device
 	*/
 	platform_device_register(&umts_modem);
diff -Naur ./arch/arm/mach-exynos/board-gaia-modems.c ../../HK_JB/Kernel/arch/arm/mach-exynos/board-gaia-modems.c
--- ./arch/arm/mach-exynos/board-gaia-modems.c	2012-12-08 20:40:46.109821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/board-gaia-modems.c	2012-11-22 09:13:14.000000000 +0100
@@ -76,7 +76,11 @@
 };
 
 /* For CMC221 IDPRAM (Internal DPRAM) */
-#define CMC_IDPRAM_SIZE		0x4000	/* 16 KB */
+#define CMC_IDPRAM_BASE		SROM_CS0_BASE
+#define CMC_IDPRAM_SIZE		DPRAM_SIZE_16KB
+
+#define CMC_IDPRAM_SFR_BASE	(CMC_IDPRAM_BASE + CMC_IDPRAM_SIZE)
+#define CMC_IDPRAM_SFR_SIZE	DPRAM_SIZE_16KB
 
 /* FOR CMC221 SFR for IDPRAM */
 #define CMC_INT2CP_REG		0x10	/* Interrupt to CP            */
@@ -283,22 +287,22 @@
 static u16  cmc_idpram_get_mask_res_ack(int dev_id);
 static u16  cmc_idpram_get_mask_send(int dev_id);
 
-static struct modemlink_dpram_control cmc_idpram_ctrl = {
+static struct modemlink_dpram_data cmc_idpram = {
 	.reset = cmc_idpram_reset,
 
 	.setup_speed = cmc_idpram_setup_speed,
 
 	.wakeup = cmc_idpram_wakeup,
-	.sleep  = cmc_idpram_sleep,
+	.sleep = cmc_idpram_sleep,
 
 	.clear_intr = cmc_idpram_clr_intr,
-	.recv_intr  = cmc_idpram_recv_intr,
-	.send_intr  = cmc_idpram_send_intr,
-	.recv_msg   = cmc_idpram_recv_msg,
-	.send_msg   = cmc_idpram_send_msg,
+	.recv_intr = cmc_idpram_recv_intr,
+	.send_intr = cmc_idpram_send_intr,
+	.recv_msg = cmc_idpram_recv_msg,
+	.send_msg = cmc_idpram_send_msg,
 
-	.get_magic  = cmc_idpram_get_magic,
-	.set_magic  = cmc_idpram_set_magic,
+	.get_magic = cmc_idpram_get_magic,
+	.set_magic = cmc_idpram_set_magic,
 	.get_access = cmc_idpram_get_access,
 	.set_access = cmc_idpram_set_access,
 
@@ -318,19 +322,12 @@
 
 	.get_mask_req_ack = cmc_idpram_get_mask_req_ack,
 	.get_mask_res_ack = cmc_idpram_get_mask_res_ack,
-	.get_mask_send    = cmc_idpram_get_mask_send,
+	.get_mask_send = cmc_idpram_get_mask_send,
 
-	.dp_base = NULL,
-	.dp_size = 0,
-	.dp_type = CP_IDPRAM,
+	.base = NULL,
+	.size = 0,
+	.type = CP_IDPRAM,
 	.aligned = 1,
-
-	.dpram_irq        = CMC_IDPRAM_INT_IRQ_00,
-	.dpram_irq_flags  = (IRQF_NO_SUSPEND | IRQF_TRIGGER_RISING),
-	.dpram_irq_name   = "CMC221_IDPRAM_IRQ",
-	.dpram_wlock_name = "CMC221_IDPRAM_WLOCK",
-
-	.max_ipc_dev = MAX_CMC_IDPRAM_IPC_DEV,
 };
 
 /*
@@ -483,13 +480,18 @@
 static struct modem_data umts_modem_data = {
 	.name = "cmc221",
 
-	.gpio_cp_on        = CP_CMC221_PMIC_PWRON,
-	.gpio_cp_reset     = CP_CMC221_CPU_RST,
+	.gpio_cp_on = CP_CMC221_PMIC_PWRON,
+	.gpio_cp_reset = CP_CMC221_CPU_RST,
+
 	.gpio_phone_active = GPIO_LTE_ACTIVE,
+	.irq_phone_active = LTE_ACTIVE_IRQ,
 
-	.gpio_dpram_int    = GPIO_CMC_IDPRAM_INT_00,
-	.gpio_dpram_status = GPIO_CMC_IDPRAM_STATUS,
-	.gpio_dpram_wakeup = GPIO_CMC_IDPRAM_WAKEUP,
+	.gpio_ipc_int2ap = GPIO_CMC_IDPRAM_INT_00,
+	.irq_ipc_int2ap = CMC_IDPRAM_INT_IRQ_00,
+	.irqf_ipc_int2ap = (IRQF_NO_SUSPEND | IRQF_TRIGGER_RISING),
+
+	.gpio_cp_wakeup = GPIO_CMC_IDPRAM_WAKEUP,
+	.gpio_cp_status = GPIO_CMC_IDPRAM_STATUS,
 	/*
 	.gpio_slave_wakeup = GPIO_IPC_SLAVE_WAKEUP,
 	.gpio_host_active  = GPIO_ACTIVE_STATE,
@@ -500,7 +502,7 @@
 	/* .link_types = LINKTYPE(LINKDEV_DPRAM) | LINKTYPE(LINKDEV_USB), */
 	.link_types = LINKTYPE(LINKDEV_DPRAM),
 	.link_name  = "cmc221_idpram",
-	.dpram_ctl  = &cmc_idpram_ctrl,
+	.dpram = &cmc_idpram,
 
 	.num_iodevs = ARRAY_SIZE(umts_io_devices),
 	.iodevs     = umts_io_devices,
@@ -508,14 +510,15 @@
 	.link_pm_data = &umts_link_pm_data,
 
 	.ipc_version = SIPC_VER_41,
+	.max_ipc_dev = MAX_CMC_IDPRAM_IPC_DEV,
 };
 
 static struct resource umts_modem_res[] = {
-	[0] = {
-		.name  = "cp_active_irq",
-		.start = LTE_ACTIVE_IRQ,
-		.end   = LTE_ACTIVE_IRQ,
-		.flags = IORESOURCE_IRQ,
+	[RES_DPRAM_MEM_ID] = {
+		.name = STR_DPRAM_BASE,
+		.start = CMC_IDPRAM_BASE,
+		.end = CMC_IDPRAM_BASE + (CMC_IDPRAM_SIZE - 1),
+		.flags = IORESOURCE_MEM,
 	},
 };
 
@@ -566,12 +569,12 @@
 	u16 magic = 0;
 	u16 access = 0;
 
-	gpio_set_value(umts_modem_data.gpio_dpram_wakeup, 1);
+	gpio_set_value(umts_modem_data.gpio_cp_wakeup, 1);
 
 	cnt = 0;
-	while (!gpio_get_value(umts_modem_data.gpio_dpram_status)) {
+	while (!gpio_get_value(umts_modem_data.gpio_cp_status)) {
 		if (cnt++ > 10) {
-			pr_err("[MDM/E] <%s> gpio_dpram_status == 0\n",
+			pr_err("[MDM/E] <%s> gpio_cp_status == 0\n",
 				__func__);
 			break;	/* return -EAGAIN; */
 		}
@@ -587,7 +590,7 @@
 
 static void cmc_idpram_sleep(void)
 {
-	gpio_set_value(umts_modem_data.gpio_dpram_wakeup, 0);
+	gpio_set_value(umts_modem_data.gpio_cp_wakeup, 0);
 }
 
 static void cmc_idpram_clr_intr(void)
@@ -783,22 +786,22 @@
 	cmc_idpram_cfg.addr = SROM_CS0_BASE + (SROM_WIDTH * cmc_idpram_cfg.csn);
 	cmc_idpram_cfg.end  = cmc_idpram_cfg.addr + cmc_idpram_cfg.size - 1;
 
-	umts_modem_data.gpio_dpram_int = GPIO_CMC_IDPRAM_INT_00;
+	umts_modem_data.gpio_ipc_int2ap = GPIO_CMC_IDPRAM_INT_00;
 }
 
 static void config_umts_modem_gpio(void)
 {
 	int err = 0;
-	unsigned gpio_cp_on        = umts_modem_data.gpio_cp_on;
-	unsigned gpio_cp_rst       = umts_modem_data.gpio_cp_reset;
-	unsigned gpio_pda_active   = umts_modem_data.gpio_pda_active;
+	unsigned gpio_cp_on = umts_modem_data.gpio_cp_on;
+	unsigned gpio_cp_rst = umts_modem_data.gpio_cp_reset;
+	unsigned gpio_pda_active = umts_modem_data.gpio_pda_active;
 	unsigned gpio_phone_active = umts_modem_data.gpio_phone_active;
 	unsigned gpio_active_state = umts_modem_data.gpio_host_active;
-	unsigned gpio_host_wakeup  = umts_modem_data.gpio_host_wakeup;
+	unsigned gpio_host_wakeup = umts_modem_data.gpio_host_wakeup;
 	unsigned gpio_slave_wakeup = umts_modem_data.gpio_slave_wakeup;
-	unsigned gpio_dpram_int    = umts_modem_data.gpio_dpram_int;
-	unsigned gpio_dpram_status = umts_modem_data.gpio_dpram_status;
-	unsigned gpio_dpram_wakeup = umts_modem_data.gpio_dpram_wakeup;
+	unsigned gpio_ipc_int2ap = umts_modem_data.gpio_ipc_int2ap;
+	unsigned gpio_cp_status = umts_modem_data.gpio_cp_status;
+	unsigned gpio_cp_wakeup = umts_modem_data.gpio_cp_wakeup;
 
 	pr_info("[MDM] <%s>\n", __func__);
 
@@ -872,45 +875,45 @@
 		}
 	}
 
-	if (gpio_dpram_int) {
-		err = gpio_request(gpio_dpram_int, "CMC_DPRAM_INT");
+	if (gpio_ipc_int2ap) {
+		err = gpio_request(gpio_ipc_int2ap, "CMC_DPRAM_INT");
 		if (err) {
 			pr_err("fail to request gpio %s\n", "CMC_DPRAM_INT");
 		} else {
 			/* Configure as a wake-up source */
-			s3c_gpio_cfgpin(gpio_dpram_int, S3C_GPIO_SFN(0xF));
-			s3c_gpio_setpull(gpio_dpram_int, S3C_GPIO_PULL_NONE);
+			s3c_gpio_cfgpin(gpio_ipc_int2ap, S3C_GPIO_SFN(0xF));
+			s3c_gpio_setpull(gpio_ipc_int2ap, S3C_GPIO_PULL_NONE);
 		}
 	}
 
-	if (gpio_dpram_status) {
-		err = gpio_request(gpio_dpram_status, "CMC_DPRAM_STATUS");
+	if (gpio_cp_status) {
+		err = gpio_request(gpio_cp_status, "CMC_DPRAM_STATUS");
 		if (err) {
 			pr_err("fail to request gpio %s\n", "CMC_DPRAM_STATUS");
 		} else {
 			/* Configure as a wake-up source */
-			s3c_gpio_cfgpin(gpio_dpram_status, S3C_GPIO_SFN(0xF));
-			s3c_gpio_setpull(gpio_dpram_status, S3C_GPIO_PULL_NONE);
+			s3c_gpio_cfgpin(gpio_cp_status, S3C_GPIO_SFN(0xF));
+			s3c_gpio_setpull(gpio_cp_status, S3C_GPIO_PULL_NONE);
 		}
 	}
 
-	if (gpio_dpram_wakeup) {
-		err = gpio_request(gpio_dpram_wakeup, "CMC_DPRAM_WAKEUP");
+	if (gpio_cp_wakeup) {
+		err = gpio_request(gpio_cp_wakeup, "CMC_DPRAM_WAKEUP");
 		if (err) {
 			pr_err("fail to request gpio %s\n", "CMC_DPRAM_WAKEUP");
 		} else {
-			gpio_direction_output(gpio_dpram_wakeup, 1);
-			s3c_gpio_setpull(gpio_dpram_wakeup, S3C_GPIO_PULL_NONE);
+			gpio_direction_output(gpio_cp_wakeup, 1);
+			s3c_gpio_setpull(gpio_cp_wakeup, S3C_GPIO_PULL_NONE);
 		}
 	}
 }
 
 static u8 *cmc_idpram_remap_mem_region(struct sromc_cfg *cfg)
 {
-	int			 dp_addr = 0;
-	int			 dp_size = 0;
-	u8 __iomem              *dp_base = NULL;
-	struct dpram_ipc_cfg    *ipc_map = NULL;
+	int dp_addr = 0;
+	int dp_size = 0;
+	u8 __iomem *dp_base = NULL;
+	struct dpram_ipc_cfg *ipc_map = NULL;
 	struct cmc_dpram_ipc_device *dev = NULL;
 
 	dp_addr = cfg->addr;
@@ -936,9 +939,8 @@
 	cmc_sfr.msg2cp     = (u16 __iomem *)(cmc_sfr_base + CMC_PUT_REG);
 	cmc_sfr.msg2ap     = (u16 __iomem *)(cmc_sfr_base + CMC_GET_REG);
 
-
-	cmc_idpram_ctrl.dp_base = (u8 __iomem *)dp_base;
-	cmc_idpram_ctrl.dp_size = dp_size;
+	cmc_idpram.base = (u8 __iomem *)dp_base;
+	cmc_idpram.size = dp_size;
 
 	/* Map for IPC */
 	ipc_map = (struct dpram_ipc_cfg *)dp_base;
diff -Naur ./arch/arm/mach-exynos/board-gps-gsd4t.c ../../HK_JB/Kernel/arch/arm/mach-exynos/board-gps-gsd4t.c
--- ./arch/arm/mach-exynos/board-gps-gsd4t.c	2012-12-08 20:40:46.109821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/board-gps-gsd4t.c	2012-11-22 09:13:14.000000000 +0100
@@ -87,27 +87,4 @@
 	return 0;
 }
 
-#ifdef CONFIG_CPU_EXYNOS4210
-int u1_gps_ntt_init(void)
-{
-       //int isntt = 1;
-       //if(isntt!=1) return 0;
-       s3c_gpio_cfgpin(GPIO_GPS_PWR_EN, S3C_GPIO_SLP_INPUT);
-       s3c_gpio_setpull(GPIO_GPS_PWR_EN, S3C_GPIO_PULL_DOWN);
-       gpio_unexport(GPIO_GPS_PWR_EN);
-       gpio_free(GPIO_GPS_PWR_EN);
-       
-       if (gpio_request(GPIO_GPS_PWR_EN_NTT, "GPS_PWR_EN"))
-               WARN(1, "fail to request gpio (GPS_PWR_EN)\n");
-       s3c_gpio_setpull(GPIO_GPS_PWR_EN_NTT, S3C_GPIO_PULL_NONE);
-       s3c_gpio_cfgpin(GPIO_GPS_PWR_EN_NTT, S3C_GPIO_OUTPUT);
-       gpio_direction_output(GPIO_GPS_PWR_EN_NTT, 0);
-       gpio_export(GPIO_GPS_PWR_EN_NTT, 1);
-       sysfs_remove_link(&gps_dev->kobj,"GPS_PWR_EN");
-       gpio_export_link(gps_dev, "GPS_PWR_EN", GPIO_GPS_PWR_EN_NTT);
-       return 0;
-
-}
-#endif
-
 device_initcall(gps_gsd4t_init);
diff -Naur ./arch/arm/mach-exynos/board-iron-modems.c ../../HK_JB/Kernel/arch/arm/mach-exynos/board-iron-modems.c
--- ./arch/arm/mach-exynos/board-iron-modems.c	2012-12-08 20:40:46.113821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/board-iron-modems.c	2012-11-22 09:13:14.000000000 +0100
@@ -102,7 +102,6 @@
 
 #define MAX_MSM_EDPRAM_IPC_DEV	2	/* FMT, RAW */
 
-
 struct msm_edpram_ipc_cfg {
 	u16 magic;
 	u16 access;
@@ -663,13 +662,9 @@
 	},
 };
 
-static struct modemlink_dpram_control gsm_edpram_ctrl = {
-	.dp_type = EXT_DPRAM,
-
-	.dpram_irq        = ESC_DPRAM_INT_IRQ,
-	.dpram_irq_flags  = IRQF_TRIGGER_FALLING,
+static struct modemlink_dpram_data gsm_edpram = {
+	.type = EXT_DPRAM,
 
-	.max_ipc_dev = IPC_RFS,
 	.ipc_map = &gsm_ipc_map,
 
 	.boot_size_offset = DP_BOOT_SIZE_OFFSET,
@@ -769,10 +764,15 @@
 	.gpio_reset_req_n  = 0,	/* GPIO_CP_MSM_PMU_RST, */
 	.gpio_cp_reset     = GPIO_CP2_MSM_RST,
 	.gpio_pda_active   = 0,
+
 	.gpio_phone_active = GPIO_ESC_PHONE_ACTIVE,
+	.irq_phone_active = ESC_PHONE_ACTIVE_IRQ,
+
 	.gpio_flm_uart_sel = GPIO_BOOT_SW_SEL_CP2,
 
-	.gpio_dpram_int = GPIO_ESC_DPRAM_INT,
+	.gpio_ipc_int2ap = GPIO_ESC_DPRAM_INT,
+	.irq_ipc_int2ap = ESC_DPRAM_INT_IRQ,
+	.irqf_ipc_int2ap = IRQF_TRIGGER_FALLING,
 
 	.gpio_cp_dump_int   = 0,
 	.gpio_cp_warm_reset = 0,
@@ -783,34 +783,20 @@
 	.modem_type = QC_ESC6270,
 	.link_types = LINKTYPE(LINKDEV_DPRAM),
 	.link_name  = "esc6270_edpram",
-	.dpram_ctl  = &gsm_edpram_ctrl,
+	.dpram = &gsm_edpram,
 
-	.ipc_version	= SIPC_VER_41,
+	.ipc_version = SIPC_VER_41,
+	.max_ipc_dev = (IPC_RAW + 1),
 
 	.num_iodevs = ARRAY_SIZE(gsm_io_devices),
 	.iodevs     = gsm_io_devices,
 };
 
-static struct resource gsm_modem_res[] = {
-	[0] = {
-		.name  = "cp_active_irq",
-		.start = ESC_PHONE_ACTIVE_IRQ,
-		.end   = ESC_PHONE_ACTIVE_IRQ,
-		.flags = IORESOURCE_IRQ,
-	},
-	[1] = {
-		.name = "dpram_irq",
-		.start = ESC_DPRAM_INT_IRQ,
-		.end = ESC_DPRAM_INT_IRQ,
-		.flags = IORESOURCE_IRQ,
-	},
-};
-
 static struct platform_device gsm_modem = {
 	.name = "modem_if",
 	.id = 1,
-	.num_resources = ARRAY_SIZE(gsm_modem_res),
-	.resource = gsm_modem_res,
+	.num_resources = 0,
+	.resource = NULL,
 	.dev = {
 		.platform_data = &gsm_modem_data,
 	},
@@ -935,7 +921,7 @@
 	unsigned gpio_pda_active = gsm_modem_data.gpio_pda_active;
 	unsigned gpio_phone_active = gsm_modem_data.gpio_phone_active;
 	unsigned gpio_flm_uart_sel = gsm_modem_data.gpio_flm_uart_sel;
-	unsigned gpio_dpram_int = gsm_modem_data.gpio_dpram_int;
+	unsigned gpio_ipc_int2ap = gsm_modem_data.gpio_ipc_int2ap;
 
 	pr_err("[MODEMS] <%s>\n", __func__);
 
@@ -1025,15 +1011,15 @@
 		gpio_set_value(gpio_cp_rst, 0);
 	}
 
-	if (gpio_dpram_int) {
-		err = gpio_request(gpio_dpram_int, "ESC_DPRAM_INT");
+	if (gpio_ipc_int2ap) {
+		err = gpio_request(gpio_ipc_int2ap, "ESC_DPRAM_INT");
 		if (err) {
 			pr_err("fail to request gpio %s, gpio %d, errno %d\n",
-					"ESC_DPRAM_INT", gpio_dpram_int, err);
+					"ESC_DPRAM_INT", gpio_ipc_int2ap, err);
 		} else {
 			/* Configure as a wake-up source */
-			s3c_gpio_cfgpin(gpio_dpram_int, S3C_GPIO_SFN(0xF));
-			s3c_gpio_setpull(gpio_dpram_int, S3C_GPIO_PULL_NONE);
+			s3c_gpio_cfgpin(gpio_ipc_int2ap, S3C_GPIO_SFN(0xF));
+			s3c_gpio_setpull(gpio_ipc_int2ap, S3C_GPIO_PULL_NONE);
 		}
 	}
 
@@ -1058,10 +1044,10 @@
 
 static u8 *gsm_edpram_remap_mem_region(struct sromc_cfg *cfg)
 {
-	int			      dp_addr = 0;
-	int			      dp_size = 0;
-	u8 __iomem                   *dp_base = NULL;
-	struct msm_edpram_ipc_cfg    *ipc_map = NULL;
+	int dp_addr = 0;
+	int dp_size = 0;
+	u8 __iomem *dp_base = NULL;
+	struct msm_edpram_ipc_cfg *ipc_map = NULL;
 	struct dpram_ipc_device *dev = NULL;
 
 	dp_addr = cfg->addr;
@@ -1073,8 +1059,8 @@
 	}
 	pr_info("[MDM] <%s> DPRAM VA=0x%08X\n", __func__, (int)dp_base);
 
-	gsm_edpram_ctrl.dp_base = (u8 __iomem *)dp_base;
-	gsm_edpram_ctrl.dp_size = dp_size;
+	gsm_edpram.base = (u8 __iomem *)dp_base;
+	gsm_edpram.size = dp_size;
 
 	/* Map for IPC */
 	ipc_map = (struct msm_edpram_ipc_cfg *)dp_base;
diff -Naur ./arch/arm/mach-exynos/board-m0ctc-modems.c ../../HK_JB/Kernel/arch/arm/mach-exynos/board-m0ctc-modems.c
--- ./arch/arm/mach-exynos/board-m0ctc-modems.c	2012-12-08 20:40:46.113821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/board-m0ctc-modems.c	2012-11-22 09:13:14.000000000 +0100
@@ -351,13 +351,10 @@
 
 static struct dpram_ipc_map msm_ipc_map;
 
-static struct modemlink_dpram_control msm_edpram_ctrl = {
-	.dp_type = EXT_DPRAM,
+static struct modemlink_dpram_data msm_edpram = {
+	.type = EXT_DPRAM,
+	.disabled = true,
 
-	.dpram_irq = MSM_DPRAM_INT_IRQ,
-	.dpram_irq_flags = IRQF_TRIGGER_FALLING,
-
-	.max_ipc_dev = IPC_RFS,
 	.ipc_map = &msm_ipc_map,
 
 	.boot_size_offset = DP_BOOT_SIZE_OFFSET,
@@ -390,15 +387,15 @@
 		.links = LINKTYPE(LINKDEV_PLD),
 	},
 	[2] = {
-		.name = "umts_ipc0",
-		.id = 0x01,
+		.name = "cdma_ipc0",
+		.id = 0x00,
 		.format = IPC_FMT,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_PLD),
 	},
 	[3] = {
-		.name = "cdma_ipc0",
-		.id = 0x00,
+		.name = "umts_ipc0",
+		.id = 0x01,
 		.format = IPC_FMT,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_PLD),
@@ -541,15 +538,15 @@
 		.links = LINKTYPE(LINKDEV_DPRAM),
 	},
 	[2] = {
-		.name = "umts_ipc0",
-		.id = 0x01,
+		.name = "cdma_ipc0",
+		.id = 0x00,
 		.format = IPC_FMT,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM),
 	},
 	[3] = {
-		.name = "cdma_ipc0",
-		.id = 0x00,
+		.name = "umts_ipc0",
+		.id = 0x01,
 		.format = IPC_FMT,
 		.io_type = IODEV_MISC,
 		.links = LINKTYPE(LINKDEV_DPRAM),
@@ -683,15 +680,22 @@
 	.gpio_cp_off = 0,
 	.gpio_reset_req_n = GPIO_CP_MSM_PMU_RST,
 	.gpio_cp_reset = GPIO_CP_MSM_RST,
+
 	.gpio_pda_active = GPIO_PDA_ACTIVE,
+
 	.gpio_phone_active = GPIO_MSM_PHONE_ACTIVE,
+	.irq_phone_active = MSM_PHONE_ACTIVE_IRQ,
+
 	.gpio_flm_uart_sel = GPIO_BOOT_SW_SEL,
 #if defined(CONFIG_MACH_M0_CTC)
 	.gpio_flm_uart_sel_rev06 = GPIO_BOOT_SW_SEL_REV06,
 	.gpio_host_wakeup = GPIO_IPC_HOST_WAKEUP,
 #endif
 
-	.gpio_dpram_int = GPIO_MSM_DPRAM_INT,
+	.gpio_ipc_int2ap = GPIO_MSM_DPRAM_INT,
+	.irq_ipc_int2ap = MSM_DPRAM_INT_IRQ,
+	.irqf_ipc_int2ap = IRQF_TRIGGER_FALLING,
+
 	.gpio_cp_dump_int = GPIO_CP_DUMP_INT,
 	.gpio_cp_warm_reset = 0,
 
@@ -699,6 +703,7 @@
 
 #if defined(CONFIG_SIM_DETECT)
 	.gpio_sim_detect = GPIO_CP_SIM_DETECT,
+	.irq_sim_detect = CP_SIM_DETECT_IRQ,
 #else
 	.gpio_sim_detect = 0,
 #endif
@@ -718,42 +723,24 @@
 	.link_types = LINKTYPE(LINKDEV_DPRAM),
 #endif
 	.link_name = "mdm6600_edpram",
-	.dpram_ctl = &msm_edpram_ctrl,
+	.dpram = &msm_edpram,
 
+#if defined(CONFIG_MACH_M0_CTC) && !defined(CONFIG_GSM_MODEM_ESC6270)
 	.ipc_version = SIPC_VER_42,
+#else
+	.ipc_version = SIPC_VER_41,
+#endif
+	.max_ipc_dev = (IPC_RAW + 1),
 
 	.num_iodevs = ARRAY_SIZE(cdma_io_devices),
 	.iodevs = cdma_io_devices,
 };
 
-static struct resource cdma_modem_res[] = {
-	[0] = {
-		.name = "cp_active_irq",
-		.start = MSM_PHONE_ACTIVE_IRQ,
-		.end = MSM_PHONE_ACTIVE_IRQ,
-		.flags = IORESOURCE_IRQ,
-	},
-	[1] = {
-		.name = "dpram_irq",
-		.start = MSM_DPRAM_INT_IRQ,
-		.end = MSM_DPRAM_INT_IRQ,
-		.flags = IORESOURCE_IRQ,
-	},
-#if defined(CONFIG_SIM_DETECT)
-	[2] = {
-		.name = "sim_irq",
-		.start = CP_SIM_DETECT_IRQ,
-		.end = CP_SIM_DETECT_IRQ,
-		.flags = IORESOURCE_IRQ,
-	},
-#endif
-};
-
 static struct platform_device cdma_modem = {
 	.name = "modem_if",
 	.id = 2,
-	.num_resources = ARRAY_SIZE(cdma_modem_res),
-	.resource = cdma_modem_res,
+	.num_resources = 0,
+	.resource = NULL,
 	.dev = {
 		.platform_data = &cdma_modem_data,
 	},
@@ -774,7 +761,7 @@
 			cdma_modem_data.gpio_flm_uart_sel_rev06;
 	unsigned gpio_host_wakeup = cdma_modem_data.gpio_host_wakeup;
 #endif
-	unsigned gpio_dpram_int = cdma_modem_data.gpio_dpram_int;
+	unsigned gpio_ipc_int2ap = cdma_modem_data.gpio_ipc_int2ap;
 	unsigned gpio_cp_dump_int = cdma_modem_data.gpio_cp_dump_int;
 	unsigned gpio_sim_detect = cdma_modem_data.gpio_sim_detect;
 
@@ -907,14 +894,14 @@
 		gpio_set_value(gpio_cp_rst, 0);
 	}
 
-	if (gpio_dpram_int) {
-		err = gpio_request(gpio_dpram_int, "MSM_DPRAM_INT");
+	if (gpio_ipc_int2ap) {
+		err = gpio_request(gpio_ipc_int2ap, "MSM_DPRAM_INT");
 		if (err) {
 			pr_err("fail to request gpio %s\n", "MSM_DPRAM_INT");
 		} else {
 			/* Configure as a wake-up source */
-			s3c_gpio_cfgpin(gpio_dpram_int, S3C_GPIO_SFN(0xF));
-			s3c_gpio_setpull(gpio_dpram_int, S3C_GPIO_PULL_NONE);
+			s3c_gpio_cfgpin(gpio_ipc_int2ap, S3C_GPIO_SFN(0xF));
+			s3c_gpio_setpull(gpio_ipc_int2ap, S3C_GPIO_PULL_NONE);
 		}
 	}
 
@@ -1020,8 +1007,8 @@
 	}
 	pr_info("[MDM] <%s> DPRAM VA=0x%08X\n", __func__, (int)dp_base);
 
-	msm_edpram_ctrl.dp_base = (u8 __iomem *) dp_base;
-	msm_edpram_ctrl.dp_size = dp_size;
+	msm_edpram.base = (u8 __iomem *)dp_base;
+	msm_edpram.size = dp_size;
 
 	/* Map for IPC */
 	ipc_map = (struct msm_edpram_ipc_cfg *)dp_base;
@@ -1263,13 +1250,10 @@
 };
 #endif
 
-static struct modemlink_dpram_control gsm_edpram_ctrl = {
-	.dp_type = EXT_DPRAM,
+static struct modemlink_dpram_data gsm_edpram = {
+	.type = EXT_DPRAM,
+	.disabled = true,
 
-	.dpram_irq = ESC_DPRAM_INT_IRQ,
-	.dpram_irq_flags = IRQF_TRIGGER_FALLING,
-
-	.max_ipc_dev = IPC_RFS,
 	.ipc_map = &gsm_ipc_map,
 
 	.boot_size_offset = DP_BOOT_SIZE_OFFSET,
@@ -1454,17 +1438,24 @@
 	.gpio_cp_off = 0,
 	.gpio_reset_req_n = 0,	/* GPIO_CP_MSM_PMU_RST, */
 	.gpio_cp_reset = GPIO_CP2_MSM_RST,
+
 	.gpio_pda_active = 0,
+
 	.gpio_phone_active = GPIO_ESC_PHONE_ACTIVE,
+	.irq_phone_active = ESC_PHONE_ACTIVE_IRQ,
+
 	.gpio_flm_uart_sel = GPIO_BOOT_SW_SEL_CP2,
 
-	.gpio_dpram_int = GPIO_ESC_DPRAM_INT,
+	.gpio_ipc_int2ap = GPIO_ESC_DPRAM_INT,
+	.irq_ipc_int2ap = ESC_DPRAM_INT_IRQ,
+	.irqf_ipc_int2ap = IRQF_TRIGGER_FALLING,
 
 	.gpio_cp_dump_int = 0,
 	.gpio_cp_warm_reset = 0,
 
 #if defined(CONFIG_SIM_DETECT)
 	.gpio_sim_detect = GPIO_ESC_SIM_DETECT,
+	.irq_sim_detect = ESC_SIM_DETECT_IRQ,
 #else
 	.gpio_sim_detect = 0,
 #endif
@@ -1486,42 +1477,20 @@
 	.link_types = LINKTYPE(LINKDEV_DPRAM),
 #endif
 	.link_name = "esc6270_edpram",
-	.dpram_ctl = &gsm_edpram_ctrl,
+	.dpram = &gsm_edpram,
 
 	.ipc_version = SIPC_VER_41,
+	.max_ipc_dev = (IPC_RAW + 1),
 
 	.num_iodevs = ARRAY_SIZE(gsm_io_devices),
 	.iodevs     = gsm_io_devices,
 };
 
-static struct resource gsm_modem_res[] = {
-	[0] = {
-		.name = "cp_active_irq",
-		.start = ESC_PHONE_ACTIVE_IRQ,
-		.end = ESC_PHONE_ACTIVE_IRQ,
-		.flags = IORESOURCE_IRQ,
-	},
-	[1] = {
-		.name = "dpram_irq",
-		.start = ESC_DPRAM_INT_IRQ,
-		.end = ESC_DPRAM_INT_IRQ,
-		.flags = IORESOURCE_IRQ,
-	},
-#if defined(CONFIG_SIM_DETECT)
-	[2] = {
-		.name = "sim_irq",
-		.start = ESC_SIM_DETECT_IRQ,
-		.end = ESC_SIM_DETECT_IRQ,
-		.flags = IORESOURCE_IRQ,
-	},
-#endif
-};
-
 static struct platform_device gsm_modem = {
 	.name = "modem_if",
 	.id = 1,
-	.num_resources = ARRAY_SIZE(gsm_modem_res),
-	.resource = gsm_modem_res,
+	.num_resources = 0,
+	.resource = NULL,
 	.dev = {
 		.platform_data = &gsm_modem_data,
 	},
@@ -1537,7 +1506,7 @@
 	unsigned gpio_pda_active = gsm_modem_data.gpio_pda_active;
 	unsigned gpio_phone_active = gsm_modem_data.gpio_phone_active;
 	unsigned gpio_flm_uart_sel = gsm_modem_data.gpio_flm_uart_sel;
-	unsigned gpio_dpram_int = gsm_modem_data.gpio_dpram_int;
+	unsigned gpio_ipc_int2ap = gsm_modem_data.gpio_ipc_int2ap;
 	unsigned gpio_sim_detect = gsm_modem_data.gpio_sim_detect;
 
 #if defined(CONFIG_LINK_DEVICE_PLD)
@@ -1635,15 +1604,15 @@
 		gpio_set_value(gpio_cp_rst, 0);
 	}
 
-	if (gpio_dpram_int) {
-		err = gpio_request(gpio_dpram_int, "ESC_DPRAM_INT");
+	if (gpio_ipc_int2ap) {
+		err = gpio_request(gpio_ipc_int2ap, "ESC_DPRAM_INT");
 		if (err) {
 			pr_err("fail to request gpio %s, gpio %d, errno %d\n",
-					"ESC_DPRAM_INT", gpio_dpram_int, err);
+					"ESC_DPRAM_INT", gpio_ipc_int2ap, err);
 		} else {
 			/* Configure as a wake-up source */
-			s3c_gpio_cfgpin(gpio_dpram_int, S3C_GPIO_SFN(0xF));
-			s3c_gpio_setpull(gpio_dpram_int, S3C_GPIO_PULL_NONE);
+			s3c_gpio_cfgpin(gpio_ipc_int2ap, S3C_GPIO_SFN(0xF));
+			s3c_gpio_setpull(gpio_ipc_int2ap, S3C_GPIO_PULL_NONE);
 		}
 	}
 
@@ -1742,8 +1711,8 @@
 	}
 	pr_info("[MDM] <%s> DPRAM VA=0x%08X\n", __func__, (int)dp_base);
 
-	gsm_edpram_ctrl.dp_base = (u8 __iomem *)dp_base;
-	gsm_edpram_ctrl.dp_size = dp_size;
+	gsm_edpram.base = (u8 __iomem *)dp_base;
+	gsm_edpram.size = dp_size;
 
 	/* Map for IPC */
 	ipc_map = (struct msm_edpram_ipc_cfg *)dp_base;
@@ -2235,6 +2204,7 @@
 			goto exit;
 		}
 
+#if !defined(CONFIG_MACH_GRANDE) && !defined(CONFIG_MACH_M0_DUOSCTC)
 		gpio_direction_output(GPIO_USB_BOOT_EN, 0);
 		s3c_gpio_setpull(GPIO_USB_BOOT_EN, S3C_GPIO_PULL_NONE);
 		gpio_set_value(GPIO_USB_BOOT_EN, 0);
@@ -2312,6 +2282,7 @@
 			gpio_set_value(GPIO_BOOT_SW_SEL_REV06, 1);
 
 		}
+#endif
 
 	}
 
diff -Naur ./arch/arm/mach-exynos/board-m0-modems.c ../../HK_JB/Kernel/arch/arm/mach-exynos/board-m0-modems.c
--- ./arch/arm/mach-exynos/board-m0-modems.c	2012-12-08 20:40:46.113821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/board-m0-modems.c	2012-11-22 09:13:14.000000000 +0100
@@ -444,7 +444,7 @@
 
 		/* gpio_direction_input(gpio_sim_detect); */
 		s3c_gpio_cfgpin(gpio_sim_detect, S3C_GPIO_SFN(0xF));
-		s3c_gpio_setpull(gpio_sim_detect, S3C_GPIO_PULL_NONE);
+		s3c_gpio_setpull(gpio_sim_detect, S3C_GPIO_PULL_DOWN);
 		irq_set_irq_type(gpio_to_irq(gpio_sim_detect),
 							IRQ_TYPE_EDGE_BOTH);
 	}
diff -Naur ./arch/arm/mach-exynos/board-m0-td-modems.c ../../HK_JB/Kernel/arch/arm/mach-exynos/board-m0-td-modems.c
--- ./arch/arm/mach-exynos/board-m0-td-modems.c	2012-12-08 20:40:46.113821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/board-m0-td-modems.c	2012-11-22 09:13:14.000000000 +0100
@@ -120,6 +120,11 @@
 	},
 };
 
+static struct modemlink_pm_data modem_link_pm_data = {
+	.name = "td_link_pm",
+	.gpio_link_enable = 0,
+};
+
 /* To get modem state, register phone active irq using resource */
 static struct resource tdscdma_modem_res[] = {
 };
@@ -148,6 +153,8 @@
 
 	.num_iodevs = ARRAY_SIZE(tdscdma_io_devices),
 	.iodevs = tdscdma_io_devices,
+
+	.link_pm_data = &modem_link_pm_data,
 };
 
 /* if use more than one modem device, then set id num */
@@ -173,6 +180,7 @@
 	unsigned gpio_ipc_srdy = tdscdma_modem_data.gpio_ipc_srdy;
 	unsigned gpio_ipc_sub_mrdy = tdscdma_modem_data.gpio_ipc_sub_mrdy;
 	unsigned gpio_ipc_sub_srdy = tdscdma_modem_data.gpio_ipc_sub_srdy;
+	unsigned gpio_ap_cp_int2 = tdscdma_modem_data.gpio_ap_cp_int2;
 #ifdef CONFIG_SEC_DUAL_MODEM_MODE
 	unsigned gpio_sim_io_sel = tdscdma_modem_data.gpio_sim_io_sel;
 	unsigned gpio_cp_ctrl1 = tdscdma_modem_data.gpio_cp_ctrl1;
@@ -301,6 +309,16 @@
 		}
 	}
 
+	if (gpio_ap_cp_int2) {
+		err = gpio_request(gpio_ap_cp_int2, "AP_CP_INT2");
+		if (err) {
+			printk(KERN_ERR "ipc_spi_cfg_gpio - fail to request gpio %s : %d\n",
+				"AP_CP_INT2", err);
+		} else {
+			gpio_direction_output(gpio_ap_cp_int2, 0);
+		}
+	}
+
 	pr_info(LOG_TAG "tdscdma_modem_cfg_gpio done\n");
 }
 
diff -Naur ./arch/arm/mach-exynos/board-p10-wlan.c ../../HK_JB/Kernel/arch/arm/mach-exynos/board-p10-wlan.c
--- ./arch/arm/mach-exynos/board-p10-wlan.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/board-p10-wlan.c	2012-11-22 09:13:14.000000000 +0100
@@ -0,0 +1,333 @@
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/delay.h>
+#include <linux/err.h>
+#include <linux/skbuff.h>
+#include <linux/wlan_plat.h>
+
+#include <plat/devs.h>
+#include <plat/sdhci.h>
+#include <plat/gpio-cfg.h>
+#include <mach/regs-gpio.h>
+#include <mach/gpio.h>
+
+#ifdef CONFIG_BROADCOM_WIFI_RESERVED_MEM
+
+#define WLAN_STATIC_SCAN_BUF0		5
+#define WLAN_STATIC_SCAN_BUF1		6
+#define WLAN_SCAN_BUF_SIZE		(64 * 1024)
+#define PREALLOC_WLAN_SEC_NUM		4
+#define PREALLOC_WLAN_BUF_NUM		160
+#define PREALLOC_WLAN_SECTION_HEADER	24
+
+#define WLAN_SECTION_SIZE_0	(PREALLOC_WLAN_BUF_NUM * 128)
+#define WLAN_SECTION_SIZE_1	(PREALLOC_WLAN_BUF_NUM * 128)
+#define WLAN_SECTION_SIZE_2	(PREALLOC_WLAN_BUF_NUM * 512)
+#define WLAN_SECTION_SIZE_3	(PREALLOC_WLAN_BUF_NUM * 1024)
+
+#define DHD_SKB_HDRSIZE			336
+#define DHD_SKB_1PAGE_BUFSIZE	((PAGE_SIZE*1)-DHD_SKB_HDRSIZE)
+#define DHD_SKB_2PAGE_BUFSIZE	((PAGE_SIZE*2)-DHD_SKB_HDRSIZE)
+#define DHD_SKB_4PAGE_BUFSIZE	((PAGE_SIZE*4)-DHD_SKB_HDRSIZE)
+
+#define WLAN_SKB_BUF_NUM	17
+
+static struct sk_buff *wlan_static_skb[WLAN_SKB_BUF_NUM];
+
+struct wlan_mem_prealloc {
+	void *mem_ptr;
+	unsigned long size;
+};
+
+static struct wlan_mem_prealloc wlan_mem_array[PREALLOC_WLAN_SEC_NUM] = {
+	{NULL, (WLAN_SECTION_SIZE_0 + PREALLOC_WLAN_SECTION_HEADER)},
+	{NULL, (WLAN_SECTION_SIZE_1 + PREALLOC_WLAN_SECTION_HEADER)},
+	{NULL, (WLAN_SECTION_SIZE_2 + PREALLOC_WLAN_SECTION_HEADER)},
+	{NULL, (WLAN_SECTION_SIZE_3 + PREALLOC_WLAN_SECTION_HEADER)}
+};
+
+void *wlan_static_scan_buf0;
+void *wlan_static_scan_buf1;
+
+static void *brcm_wlan_mem_prealloc(int section, unsigned long size)
+{
+	if (section == PREALLOC_WLAN_SEC_NUM)
+		return wlan_static_skb;
+
+	if (section == WLAN_STATIC_SCAN_BUF0)
+		return wlan_static_scan_buf0;
+
+	if (section == WLAN_STATIC_SCAN_BUF1)
+		return wlan_static_scan_buf1;
+
+	if ((section < 0) || (section > PREALLOC_WLAN_SEC_NUM))
+		return NULL;
+
+	if (wlan_mem_array[section].size < size)
+		return NULL;
+
+	return wlan_mem_array[section].mem_ptr;
+}
+
+static int brcm_init_wlan_mem(void)
+{
+	int i;
+	int j;
+
+	for (i = 0; i < 8; i++) {
+		wlan_static_skb[i] = dev_alloc_skb(DHD_SKB_1PAGE_BUFSIZE);
+		if (!wlan_static_skb[i])
+			goto err_skb_alloc;
+	}
+
+	for (; i < 16; i++) {
+		wlan_static_skb[i] = dev_alloc_skb(DHD_SKB_2PAGE_BUFSIZE);
+		if (!wlan_static_skb[i])
+			goto err_skb_alloc;
+	}
+
+	wlan_static_skb[i] = dev_alloc_skb(DHD_SKB_4PAGE_BUFSIZE);
+	if (!wlan_static_skb[i])
+		goto err_skb_alloc;
+
+	for (i = 0 ; i < PREALLOC_WLAN_SEC_NUM ; i++) {
+		wlan_mem_array[i].mem_ptr =
+				kmalloc(wlan_mem_array[i].size, GFP_KERNEL);
+
+		if (!wlan_mem_array[i].mem_ptr)
+			goto err_mem_alloc;
+	}
+
+	wlan_static_scan_buf0 = kmalloc (WLAN_SCAN_BUF_SIZE, GFP_KERNEL);
+	if (!wlan_static_scan_buf0)
+		goto err_mem_alloc;
+
+	wlan_static_scan_buf1 = kmalloc (WLAN_SCAN_BUF_SIZE, GFP_KERNEL);
+	if (!wlan_static_scan_buf1)
+		goto err_mem_alloc;
+
+	printk(KERN_INFO"%s: WIFI MEM Allocated\n", __func__);
+	return 0;
+
+ err_mem_alloc:
+	pr_err("Failed to mem_alloc for WLAN\n");
+	for (j = 0 ; j < i ; j++)
+		kfree(wlan_mem_array[j].mem_ptr);
+
+	i = WLAN_SKB_BUF_NUM;
+
+ err_skb_alloc:
+	pr_err("Failed to skb_alloc for WLAN\n");
+	for (j = 0 ; j < i ; j++)
+		dev_kfree_skb(wlan_static_skb[j]);
+
+	return -ENOMEM;
+}
+#endif /* CONFIG_BROADCOM_WIFI_RESERVED_MEM */
+
+static unsigned int wlan_on_gpio_table[][4] = {
+	{GPIO_WLAN_EN , GPIO_WLAN_EN_AF, GPIO_LEVEL_HIGH, S3C_GPIO_PULL_NONE},
+	{GPIO_WLAN_HOST_WAKE, GPIO_WLAN_HOST_WAKE_AF,
+	 GPIO_LEVEL_NONE, S3C_GPIO_PULL_DOWN},
+};
+
+static unsigned int wlan_off_gpio_table[][4] = {
+	{GPIO_WLAN_EN , GPIO_WLAN_EN_AF, GPIO_LEVEL_LOW, S3C_GPIO_PULL_NONE},
+	{GPIO_WLAN_HOST_WAKE, 0 , GPIO_LEVEL_NONE, S3C_GPIO_PULL_DOWN},
+};
+
+static unsigned int wlan_sdio_on_table[][4] = {
+	{GPIO_WLAN_SDIO_CLK, GPIO_WLAN_SDIO_CLK_AF,
+	 GPIO_LEVEL_NONE, S3C_GPIO_PULL_NONE},
+	{GPIO_WLAN_SDIO_CMD, GPIO_WLAN_SDIO_CMD_AF,
+	 GPIO_LEVEL_NONE, S3C_GPIO_PULL_NONE},
+	{GPIO_WLAN_SDIO_D0, GPIO_WLAN_SDIO_D0_AF,
+	 GPIO_LEVEL_NONE, S3C_GPIO_PULL_NONE},
+	{GPIO_WLAN_SDIO_D1, GPIO_WLAN_SDIO_D1_AF,
+	 GPIO_LEVEL_NONE, S3C_GPIO_PULL_NONE},
+	{GPIO_WLAN_SDIO_D2, GPIO_WLAN_SDIO_D2_AF,
+	 GPIO_LEVEL_NONE, S3C_GPIO_PULL_NONE},
+	{GPIO_WLAN_SDIO_D3, GPIO_WLAN_SDIO_D3_AF,
+	 GPIO_LEVEL_NONE, S3C_GPIO_PULL_NONE},
+};
+
+static unsigned int wlan_sdio_off_table[][4] = {
+	{GPIO_WLAN_SDIO_CLK, 1, GPIO_LEVEL_LOW, S3C_GPIO_PULL_NONE},
+	{GPIO_WLAN_SDIO_CMD, 0, GPIO_LEVEL_NONE, S3C_GPIO_PULL_NONE},
+	{GPIO_WLAN_SDIO_D0, 0, GPIO_LEVEL_NONE, S3C_GPIO_PULL_NONE},
+	{GPIO_WLAN_SDIO_D1, 0, GPIO_LEVEL_NONE, S3C_GPIO_PULL_NONE},
+	{GPIO_WLAN_SDIO_D2, 0, GPIO_LEVEL_NONE, S3C_GPIO_PULL_NONE},
+	{GPIO_WLAN_SDIO_D3, 0, GPIO_LEVEL_NONE, S3C_GPIO_PULL_NONE},
+};
+
+static void s3c_config_gpio_alive_table
+(int array_size, unsigned int
+(*gpio_table)[4])
+{
+	u32 i, gpio;
+	printk(KERN_INFO"gpio_table = [%d] \r\n" , array_size);
+	for (i = 0; i < array_size; i++) {
+		gpio = gpio_table[i][0];
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(gpio_table[i][1]));
+		s3c_gpio_setpull(gpio, gpio_table[i][3]);
+		if (gpio_table[i][2] != GPIO_LEVEL_NONE)
+			gpio_set_value(gpio, gpio_table[i][2]);
+	}
+}
+
+static int brcm_wlan_power(int onoff)
+{
+	printk(KERN_INFO"------------------------------------------------");
+	printk(KERN_INFO"------------------------------------------------\n");
+	printk(KERN_INFO"%s Enter: power %s\n", __func__, onoff ? "on" : "off");
+	if (onoff) {
+		s3c_config_gpio_alive_table
+		(ARRAY_SIZE(wlan_on_gpio_table), wlan_on_gpio_table);
+		udelay(200);
+		gpio_set_value(GPIO_WLAN_EN, GPIO_LEVEL_HIGH);
+		printk(KERN_DEBUG"WLAN: GPIO_WLAN_EN = %d\n",
+		gpio_get_value(GPIO_WLAN_EN));
+	} else {
+		gpio_set_value(GPIO_WLAN_EN, GPIO_LEVEL_LOW);
+		s3c_config_gpio_alive_table
+		(ARRAY_SIZE(wlan_off_gpio_table), wlan_off_gpio_table);
+		printk(KERN_DEBUG"WLAN: GPIO_WLAN_EN = %d\n",
+		gpio_get_value(GPIO_WLAN_EN));
+	}
+
+	return 0;
+}
+
+static int brcm_wlan_reset(int onoff)
+{
+	gpio_set_value(GPIO_WLAN_EN,
+			onoff ? GPIO_LEVEL_HIGH : GPIO_LEVEL_LOW);
+	return 0;
+}
+
+static int brcm_wlan_set_carddetect(int onoff)
+{
+	if (onoff) {
+		s3c_config_gpio_alive_table(
+ARRAY_SIZE(wlan_sdio_on_table), wlan_sdio_on_table);
+	} else {
+		s3c_config_gpio_alive_table(
+ARRAY_SIZE(wlan_sdio_off_table), wlan_sdio_off_table); }
+
+	udelay(200);
+
+	mmc_force_presence_change(&s3c_device_hsmmc3);
+	msleep(500); /* wait for carddetect */
+	return 0;
+}
+
+/* Customized Locale table : OPTIONAL feature */
+#define WLC_CNTRY_BUF_SZ        4
+struct cntry_locales_custom {
+	char iso_abbrev[WLC_CNTRY_BUF_SZ];
+	char custom_locale[WLC_CNTRY_BUF_SZ];
+	int  custom_locale_rev;
+};
+
+static struct cntry_locales_custom brcm_wlan_translate_custom_table[] = {
+	/* Table should be filled out based
+ on custom platform regulatory requirement */
+	{"",   "XY", 4},  /* universal */
+	{"US", "US", 69}, /* input ISO "US" to : US regrev 69 */
+	{"CA", "US", 69}, /* input ISO "CA" to : US regrev 69 */
+	{"EU", "EU", 5},  /* European union countries */
+	{"AT", "EU", 5},
+	{"BE", "EU", 5},
+	{"BG", "EU", 5},
+	{"CY", "EU", 5},
+	{"CZ", "EU", 5},
+	{"DK", "EU", 5},
+	{"EE", "EU", 5},
+	{"FI", "EU", 5},
+	{"FR", "EU", 5},
+	{"DE", "EU", 5},
+	{"GR", "EU", 5},
+	{"HU", "EU", 5},
+	{"IE", "EU", 5},
+	{"IT", "EU", 5},
+	{"LV", "EU", 5},
+	{"LI", "EU", 5},
+	{"LT", "EU", 5},
+	{"LU", "EU", 5},
+	{"MT", "EU", 5},
+	{"NL", "EU", 5},
+	{"PL", "EU", 5},
+	{"PT", "EU", 5},
+	{"RO", "EU", 5},
+	{"SK", "EU", 5},
+	{"SI", "EU", 5},
+	{"ES", "EU", 5},
+	{"SE", "EU", 5},
+	{"GB", "EU", 5},  /* input ISO "GB" to : EU regrev 05 */
+	{"IL", "IL", 0},
+	{"CH", "CH", 0},
+	{"TR", "TR", 0},
+	{"NO", "NO", 0},
+	{"KR", "XY", 3},
+	{"AU", "XY", 3},
+	{"CN", "XY", 3},  /* input ISO "CN" to : XY regrev 03 */
+	{"TW", "XY", 3},
+	{"AR", "XY", 3},
+	{"MX", "XY", 3}
+};
+
+static void *brcm_wlan_get_country_code(char *ccode)
+{
+	int size = ARRAY_SIZE(brcm_wlan_translate_custom_table);
+	int i;
+
+	if (!ccode)
+		return NULL;
+
+	for (i = 0; i < size; i++)
+		if (strcmp(ccode,
+		brcm_wlan_translate_custom_table[i].iso_abbrev) == 0)
+			return &brcm_wlan_translate_custom_table[i];
+	return &brcm_wlan_translate_custom_table[0];
+}
+
+static struct resource brcm_wlan_resources[] = {
+	[0] = {
+		.name	= "bcmdhd_wlan_irq",
+		.start	= IRQ_EINT(21),
+		.end	= IRQ_EINT(21),
+		.flags	= IORESOURCE_IRQ | IORESOURCE_IRQ_HIGHLEVEL | IORESOURCE_IRQ_SHAREABLE,
+	},
+};
+
+static struct wifi_platform_data brcm_wlan_control = {
+	.set_power	= brcm_wlan_power,
+	.set_reset	= brcm_wlan_reset,
+	.set_carddetect	= brcm_wlan_set_carddetect,
+#ifdef CONFIG_BROADCOM_WIFI_RESERVED_MEM
+	.mem_prealloc	= brcm_wlan_mem_prealloc,
+#endif
+	.get_country_code = brcm_wlan_get_country_code,
+};
+
+static struct platform_device brcm_device_wlan = {
+	.name		= "bcmdhd_wlan",
+	.id		= 1,
+	.num_resources	= ARRAY_SIZE(brcm_wlan_resources),
+	.resource	= brcm_wlan_resources,
+	.dev		= {
+		.platform_data = &brcm_wlan_control,
+	},
+};
+
+int __init brcm_wlan_init(void)
+{
+	printk(KERN_INFO"%s: start\n", __func__);
+
+#ifdef CONFIG_BROADCOM_WIFI_RESERVED_MEM
+	brcm_init_wlan_mem();
+#endif
+
+	return platform_device_register(&brcm_device_wlan);
+}
diff -Naur ./arch/arm/mach-exynos/board-redwood.c ../../HK_JB/Kernel/arch/arm/mach-exynos/board-redwood.c
--- ./arch/arm/mach-exynos/board-redwood.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/board-redwood.c	2012-11-22 09:13:14.000000000 +0100
@@ -0,0 +1,2981 @@
+/*
+ * linux/arch/arm/mach-exynos/board-redwood.c
+ *
+ * Copyright (c) 2011 Samsung Electronics Co., Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/platform_device.h>
+#include <linux/serial_core.h>
+#include <linux/spi/spi.h>
+#include <linux/gpio.h>
+#include <linux/gpio_keys.h>
+#include <linux/i2c.h>
+#include <linux/i2c-gpio.h>
+#include <linux/mmc/host.h>
+#include <linux/regulator/machine.h>
+#include <linux/regulator/fixed.h>
+#include <linux/mfd/wm8994/pdata.h>
+#include <linux/lcd.h>
+#include <linux/lcd-property.h>
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/input.h>
+#include <linux/sensor/sensors_core.h>
+#include <linux/sensor/lsm330dlc_accel.h>
+#include <linux/sensor/lsm330dlc_gyro.h>
+#include <linux/sensor/ak8975.h>
+#include <linux/sensor/ak8963.h>
+#include <linux/sensor/cm36651.h>
+#include <linux/sensor/gp2a.h>
+#include <linux/cma.h>
+#include <linux/jack.h>
+#include <linux/uart_select.h>
+#include <linux/utsname.h>
+#include <linux/mfd/max77686.h>
+#include <linux/mfd/max77693.h>
+#include <linux/mfd/max77693-private.h>
+#include <linux/leds-max77693.h>
+#include <linux/battery/max17047_fuelgauge.h>
+#include <linux/power/charger-manager.h>
+#include <linux/devfreq/exynos4_bus.h>
+#include <linux/pm_qos_params.h>
+#include <drm/exynos_drm.h>
+#include <linux/printk.h>
+
+#include <asm/mach/arch.h>
+#include <asm/mach-types.h>
+
+#include <plat/regs-serial.h>
+#include <plat/exynos4.h>
+#include <plat/clock.h>
+#include <plat/cpu.h>
+#include <plat/devs.h>
+#include <plat/gpio-cfg.h>
+#include <plat/iic.h>
+#include <plat/pd.h>
+#include <plat/sdhci.h>
+#include <plat/mshci.h>
+#include <plat/ehci.h>
+#include <plat/usbgadget.h>
+#include <plat/s3c64xx-spi.h>
+#include <plat/csis.h>
+#include <plat/udc-hs.h>
+#include <plat/media.h>
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+#include <media/exynos_fimc_is.h>
+#endif
+#include <plat/regs-fb.h>
+#include <plat/fb-core.h>
+#include <plat/mipi_dsim2.h>
+#include <plat/fimd_lite_ext.h>
+#include <plat/hdmi.h>
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC) || defined(CONFIG_VIDEO_MFC5X)
+#include <plat/s5p-mfc.h>
+#endif
+
+#ifdef CONFIG_I2C_SI4705
+#include <linux/si4705_pdata.h>
+#endif
+
+#ifdef CONFIG_VIDEO_JPEG_V2X
+#include <plat/jpeg.h>
+#endif
+
+#include <mach/map.h>
+#include <mach/spi-clocks.h>
+#include <mach/sec_debug.h>
+
+#ifdef CONFIG_SND_SOC_WM8994
+#include <linux/mfd/wm8994/pdata.h>
+#include <linux/mfd/wm8994/gpio.h>
+#endif
+
+#include <mach/midas-power.h>
+#ifdef CONFIG_TOUCHSCREEN_MELFAS_MMS
+#include <linux/melfas_mms_ts.h>
+#endif
+#include <mach/dwmci.h>
+
+#include <mach/bcm47511.h>
+#include <mach/bcm4752.h>
+
+#include <mach/regs-pmu.h>
+
+#include <../../../drivers/video/samsung/s3cfb.h>
+#include <mach/dev-sysmmu.h>
+
+#include "board-mobile.h"
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+#include <plat/s5p-tmu.h>
+#include <mach/regs-tmu.h>
+#endif
+
+#ifdef CONFIG_BUSFREQ_OPP
+#include <mach/dev.h>
+#include <mach/ppmu.h>
+#endif
+
+#if defined(CONFIG_BATTERY_SAMSUNG)
+#include <linux/power_supply.h>
+#include <linux/battery/samsung_battery.h>
+#endif
+#include <mach/midas-thermistor.h>
+
+#include <linux/host_notify.h>
+
+#ifdef CONFIG_INPUT_SECBRIDGE
+#include <linux/input/sec-input-bridge.h>
+#endif
+
+enum gpio_i2c {
+	I2C_LAST_HW	= 8, /* I2C0~8 are reserved */
+	I2C_CODEC	= 9, /* I2C9 is reserved for CODEC (hardcoded) */
+	I2C_NFC,
+	I2C_3_TOUCH,
+	I2C_FUEL,
+	I2C_BSENSE,
+	I2C_MSENSE,
+	I2C_MHL		= 15, /* 15 is hardcoded from midas-mhl.c */
+	I2C_MHL_D	= 16, /* 16 is hardcoded from midas-mhl.c */
+	I2C_PSENSE,
+	I2C_IF_PMIC,
+	I2C_FM_RADIO	= 19, /* refer from midas */
+};
+
+enum board_rev {
+	REDWOOD_REV0_1_0425 = 0xc,
+	REDWOOD_REV0_1_0704 = 0x4,
+};
+
+static int hwrevision(int rev)
+{
+	switch (rev) {
+	case 0: return (system_rev == 0x3);
+	case 1: return (system_rev == 0x0);
+	}
+	return 0;
+}
+
+/* Following are default values for UCON, ULCON and UFCON UART registers */
+#define SLP_MIDAS_UCON_DEFAULT	(S3C2410_UCON_TXILEVEL |	\
+				 S3C2410_UCON_RXILEVEL |	\
+				 S3C2410_UCON_TXIRQMODE |	\
+				 S3C2410_UCON_RXIRQMODE |	\
+				 S3C2410_UCON_RXFIFO_TOI |	\
+				 S3C2443_UCON_RXERR_IRQEN)
+
+#define SLP_MIDAS_ULCON_DEFAULT	S3C2410_LCON_CS8
+
+#define SLP_MIDAS_UFCON_DEFAULT	(S3C2410_UFCON_FIFOMODE |	\
+				 S5PV210_UFCON_TXTRIG4 |	\
+				 S5PV210_UFCON_RXTRIG4)
+
+static struct s3c2410_uartcfg slp_midas_uartcfgs[] __initdata = {
+	[0] = {
+		.hwport		= 0,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+	[1] = {
+		.hwport		= 1,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+	[2] = {
+		.hwport		= 2,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+	[3] = {
+		.hwport		= 3,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+};
+
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+static struct s3c64xx_spi_csinfo spi1_csi[] = {
+	[0] = {
+		.line = EXYNOS4_GPB(5),
+		.set_level = gpio_set_value,
+		.fb_delay = 0x2,
+	},
+};
+
+static struct spi_board_info spi1_board_info[] __initdata = {
+	{
+		.modalias = "s5c73m3_spi",
+		.platform_data = NULL,
+		.max_speed_hz = 50000000,
+		.bus_num = 1,
+		.chip_select = 0,
+		.mode = SPI_MODE_0,
+		.controller_data = &spi1_csi[0],
+	}
+};
+#endif
+
+#ifdef CONFIG_EXYNOS4_DEV_DWMCI
+#define DIV_FSYS3	(S5P_VA_CMU + 0x0C54C)
+static void exynos_dwmci_cfg_gpio(int width)
+{
+	unsigned int gpio;
+
+	for (gpio = EXYNOS4_GPK0(0); gpio < EXYNOS4_GPK0(2); gpio++) {
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+	}
+
+	width = (1 << width);
+
+	switch (width) {
+	case 8:
+		for (gpio = EXYNOS4_GPK1(3); gpio <= EXYNOS4_GPK1(6); gpio++) {
+			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(4));
+			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+		}
+	case 4:
+		for (gpio = EXYNOS4_GPK0(3); gpio <= EXYNOS4_GPK0(6); gpio++) {
+			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
+			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+		}
+		break;
+	case 1:
+		gpio = EXYNOS4_GPK0(3);
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+
+		/* Workaround
+		 * NOTE : In future, should be modified bootloader
+		 * Set this value when 1-bit buswidth(it's initial time)*/
+		__raw_writel(0x1, DIV_FSYS3);
+	default:
+		break;
+	}
+}
+
+/*
+ * block setting of dwmci
+ * max_segs = PAGE_SIZE / size of IDMAC desc,
+ * max_blk_size = 512,
+ * max_blk_count = 65536,
+ * max_seg_size = PAGE_SIZE,
+ * max_req_size = max_seg_size * max_blk_count
+ **/
+static struct block_settings exynos_dwmci_blk_setting = {
+	.max_segs		= 0x1000,
+	.max_blk_size		= 0x200,
+	.max_blk_count		= 0x10000,
+	.max_seg_size		= 0x1000,
+	.max_req_size		= 0x1000 * 0x10000,
+};
+
+static struct dw_mci_board exynos_dwmci_pdata __initdata = {
+	.num_slots		= 1,
+	.quirks			= DW_MCI_QUIRK_BROKEN_CARD_DETECTION |
+				DW_MCI_QUIRK_HIGHSPEED,
+	.bus_hz			= 100 * 1000 * 1000,
+	.caps			= MMC_CAP_UHS_DDR50 | MMC_CAP_1_8V_DDR |
+				MMC_CAP_8_BIT_DATA | MMC_CAP_CMD23,
+	.caps2			= MMC_CAP2_PACKED_CMD,
+	.detect_delay_ms	= 200,
+	.hclk_name		= "dwmci",
+	.cclk_name		= "sclk_dwmci",
+	.cfg_gpio		= exynos_dwmci_cfg_gpio,
+	.blk_settings		= &exynos_dwmci_blk_setting,
+	.buf_size		= PAGE_SIZE << 4,
+};
+#else
+static struct s3c_mshci_platdata exynos4_mshc_pdata __initdata = {
+	.cd_type                = S3C_MSHCI_CD_PERMANENT,
+	.fifo_depth		= 0x80,
+	.max_width              = 8,
+	.host_caps              = MMC_CAP_8_BIT_DATA | MMC_CAP_1_8V_DDR |
+				  MMC_CAP_UHS_DDR50 | MMC_CAP_CMD23,
+	.host_caps2		= MMC_CAP2_PACKED_CMD,
+};
+#endif
+
+static struct s3c_sdhci_platdata slp_midas_hsmmc2_pdata __initdata = {
+	.cd_type                = S3C_SDHCI_CD_GPIO,
+	.ext_cd_gpio            = EXYNOS4_GPX3(4),
+	.ext_cd_gpio_invert	= true,
+	.clk_type		= S3C_SDHCI_CLK_DIV_EXTERNAL,
+	.max_width		= 4,
+	.host_caps		= MMC_CAP_4_BIT_DATA,
+	.vmmc_name		= "vtf_2.8v",
+};
+
+static DEFINE_MUTEX(notify_lock);
+
+/* FIXME: For coexistence of both slp-pq and redwood board. Need to fix */
+#define DEFINE_MMC_CARD_NOTIFIER(num) \
+extern void (*hsmmc##num##_notify_func)(struct platform_device *, int state); \
+static int ext_cd_init_hsmmc##num(void (*notify_func)( \
+			struct platform_device *, int state)) \
+{ \
+	mutex_lock(&notify_lock); \
+	WARN_ON(hsmmc##num##_notify_func); \
+	hsmmc##num##_notify_func = notify_func; \
+	mutex_unlock(&notify_lock); \
+	return 0; \
+} \
+static int ext_cd_cleanup_hsmmc##num(void (*notify_func)( \
+			struct platform_device *, int state)) \
+{ \
+	mutex_lock(&notify_lock); \
+	WARN_ON(hsmmc##num##_notify_func != notify_func); \
+	hsmmc##num##_notify_func = NULL; \
+	mutex_unlock(&notify_lock); \
+	return 0; \
+}
+
+DEFINE_MMC_CARD_NOTIFIER(3)
+
+/*
+ * call this when you need sd stack to recognize insertion or removal of card
+ * that can't be told by SDHCI regs
+ */
+
+static struct s3c_sdhci_platdata slp_midas_hsmmc3_pdata __initdata = {
+/* new code for brm4334 */
+	.cd_type	= S3C_SDHCI_CD_EXTERNAL,
+	.clk_type	= S3C_SDHCI_CLK_DIV_EXTERNAL,
+	.pm_flags	= S3C_SDHCI_PM_IGNORE_SUSPEND_RESUME,
+	.ext_cd_init	= ext_cd_init_hsmmc3,
+	.ext_cd_cleanup	= ext_cd_cleanup_hsmmc3,
+};
+
+#ifdef CONFIG_DRM_EXYNOS
+static struct resource exynos_drm_resource[] = {
+	[0] = {
+		.start = IRQ_FIMD0_VSYNC,
+		.end   = IRQ_FIMD0_VSYNC,
+		.flags = IORESOURCE_IRQ,
+	},
+};
+
+static struct platform_device exynos_drm_device = {
+	.name	= "exynos-drm",
+	.id	= -1,
+	.num_resources	  = ARRAY_SIZE(exynos_drm_resource),
+	.resource	  = exynos_drm_resource,
+	.dev	= {
+		.dma_mask = &exynos_drm_device.dev.coherent_dma_mask,
+		.coherent_dma_mask = 0xffffffffUL,
+	}
+};
+#endif
+
+enum fixed_regulator_id {
+	FIXED_REG_ID_LCD = 0,
+	FIXED_REG_ID_HDMI = 1,
+};
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+static struct exynos_drm_fimd_pdata drm_fimd_pdata = {
+	.panel = {
+		.timing	= {
+			.xres		= 720,
+			.yres		= 1280,
+			.hsync_len	= 3,
+			.left_margin	= 15,
+			.right_margin	= 50,
+			.vsync_len	= 2,
+			.upper_margin	= 2,
+			.lower_margin	= 3,
+			.refresh	= 60,
+		},
+		.width_mm	= 63,	/* 63.2 mm */
+		.height_mm	= 114,	/* 114.19 mm */
+	},
+	.vidcon0		= VIDCON0_VIDOUT_RGB | VIDCON0_PNRMODE_RGB,
+	.vidcon1		= VIDCON1_INV_VCLK,
+	.default_win		= 3,
+	.bpp			= 32,
+	.dynamic_refresh	= 0,
+	.high_freq		= 1,
+};
+
+#ifdef CONFIG_MDNIE_SUPPORT
+static struct resource exynos4_fimd_lite_resource[] = {
+	[0] = {
+		.start	= EXYNOS4_PA_LCD_LITE0,
+		.end	= EXYNOS4_PA_LCD_LITE0 + S5P_SZ_LCD_LITE0 - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= IRQ_LCD_LITE0,
+		.end	= IRQ_LCD_LITE0,
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct resource exynos4_mdnie_resource[] = {
+	[0] = {
+		.start	= EXYNOS4_PA_MDNIE0,
+		.end	= EXYNOS4_PA_MDNIE0 + S5P_SZ_MDNIE0 - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+};
+
+static struct mdnie_platform_data exynos4_mdnie_pdata = {
+	.width			= 720,
+	.height			= 1280,
+};
+
+static struct s5p_fimd_ext_device exynos4_fimd_lite_device = {
+	.name			= "fimd_lite",
+	.id			= -1,
+	.num_resources		= ARRAY_SIZE(exynos4_fimd_lite_resource),
+	.resource		= exynos4_fimd_lite_resource,
+	.dev			= {
+		.platform_data	= &drm_fimd_pdata,
+	},
+};
+
+static struct s5p_fimd_ext_device exynos4_mdnie_device = {
+	.name			= "mdnie",
+	.id			= -1,
+	.num_resources		= ARRAY_SIZE(exynos4_mdnie_resource),
+	.resource		= exynos4_mdnie_resource,
+	.dev			= {
+		.platform_data	= &exynos4_mdnie_pdata,
+	},
+};
+
+/* FIXME:!! why init at this point ? */
+static int exynos4_common_setup_clock(const char *sclk_name,
+	const char *pclk_name, unsigned long rate, unsigned int rate_set)
+{
+	struct clk *sclk = NULL;
+	struct clk *pclk = NULL;
+
+	sclk = clk_get(NULL, sclk_name);
+	if (IS_ERR(sclk)) {
+		printk(KERN_ERR "failed to get %s clock.\n", sclk_name);
+		goto err_clk;
+	}
+
+	pclk = clk_get(NULL, pclk_name);
+	if (IS_ERR(pclk)) {
+		printk(KERN_ERR "failed to get %s clock.\n", pclk_name);
+		goto err_clk;
+	}
+
+	clk_set_parent(sclk, pclk);
+
+	printk(KERN_INFO "set parent clock of %s to %s\n", sclk_name,
+			pclk_name);
+	if (!rate_set)
+		goto set_end;
+
+	if (!rate)
+		rate = 200 * MHZ;
+
+	clk_set_rate(sclk, rate);
+
+set_end:
+	clk_put(sclk);
+	clk_put(pclk);
+
+	return 0;
+
+err_clk:
+	clk_put(sclk);
+	clk_put(pclk);
+
+	return -EINVAL;
+
+}
+#endif
+
+static struct regulator_consumer_supply lcd_supplies[] = {
+	REGULATOR_SUPPLY("VDD", "s6d6aa1"),
+};
+
+static struct regulator_init_data lcd_fixed_reg_initdata = {
+	.constraints = {
+		.valid_ops_mask = REGULATOR_CHANGE_STATUS,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(lcd_supplies),
+	.consumer_supplies = lcd_supplies,
+};
+
+#define GPIO_LCD_VDD_EN_5V	EXYNOS4212_GPM0(0)
+static struct fixed_voltage_config lcd_config = {
+	.init_data = &lcd_fixed_reg_initdata,
+	.microvolts = 5000000,
+	.supply_name = "VDD",
+	.gpio = GPIO_LCD_VDD_EN_5V,
+	.enable_high = 1,
+	.enabled_at_boot = 1,
+};
+
+static struct platform_device lcd_fixed_reg_device = {
+	.name = "reg-fixed-voltage",
+	.id = FIXED_REG_ID_LCD,
+	.dev = {
+		.platform_data = &lcd_config,
+	},
+};
+
+static int reset_lcd(struct lcd_device *ld)
+{
+	static unsigned int first = 1;
+	int reset_gpio = -1;
+
+	reset_gpio = EXYNOS4_GPF2(1);
+
+	if (first) {
+		gpio_request(reset_gpio, "MLCD_RST");
+		first = 0;
+	}
+
+	gpio_direction_output(reset_gpio, 1);
+	usleep_range(1000, 2000);
+	gpio_direction_output(reset_gpio, 0);
+		usleep_range(1000, 2000);
+	gpio_direction_output(reset_gpio, 1);
+
+	dev_info(&ld->dev, "reset completed.\n");
+
+	return 0;
+}
+
+static struct lcd_property s6d6aa1_property = {
+	.flip = LCD_PROPERTY_FLIP_VERTICAL |
+		LCD_PROPERTY_FLIP_HORIZONTAL,
+	.dynamic_refresh = false,
+};
+
+static struct lcd_platform_data s6d6aa1_pdata = {
+	.reset			= reset_lcd,
+	.reset_delay		= 1,
+	.power_off_delay	= 130,
+	.power_on_delay		= 10,
+	.lcd_enabled		= 1,
+	.pdata	= &s6d6aa1_property,
+};
+
+static void lcd_cfg_gpio(void)
+{
+	int reg;
+	int reset_gpio = EXYNOS4_GPF2(1);
+
+	/* MLCD_RST */
+	s3c_gpio_cfgpin(reset_gpio, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(reset_gpio, S3C_GPIO_PULL_NONE);
+
+	/* LCD_EN */
+	s3c_gpio_cfgpin(GPIO_LCD_VDD_EN_5V, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_LCD_VDD_EN_5V, S3C_GPIO_PULL_NONE);
+
+	reg = __raw_readl(S3C_VA_SYS + 0x210);
+	reg |= 1 << 1;
+	__raw_writel(reg, S3C_VA_SYS + 0x210);
+
+	return;
+}
+
+#ifdef CONFIG_S5P_MIPI_DSI2
+static struct mipi_dsim_config dsim_config = {
+	.e_interface		= DSIM_VIDEO,
+	.e_virtual_ch		= DSIM_VIRTUAL_CH_0,
+	.e_pixel_format		= DSIM_24BPP_888,
+	.e_burst_mode		= DSIM_BURST_SYNC_EVENT,
+	.e_no_data_lane		= DSIM_DATA_LANE_4,
+	.e_byte_clk		= DSIM_PLL_OUT_DIV8,
+	.cmd_allow		= 0xf,
+
+	/*
+	 * ===========================================
+	 * |    P    |    M    |    S    |    MHz    |
+	 * -------------------------------------------
+	 * |    3    |   100   |    3    |    100    |
+	 * |    3    |   100   |    2    |    200    |
+	 * |    3    |    63   |    1    |    252    |
+	 * |    4    |   100   |    1    |    300    |
+	 * |    4    |   110   |    1    |    330    |
+	 * |   12    |   350   |    1    |    350    |
+	 * |    3    |   100   |    1    |    400    |
+	 * |    4    |   150   |    1    |    450    |
+	 * |    3    |   120   |    1    |    480    |
+	 * |   12    |   250   |    0    |    500    |
+	 * |    4    |   100   |    0    |    600    |
+	 * |    3    |    81   |    0    |    648    |
+	 * |    3    |    88   |    0    |    704    |
+	 * |    3    |    90   |    0    |    720    |
+	 * |    3    |   100   |    0    |    800    |
+	 * |   12    |   425   |    0    |    850    |
+	 * |    4    |   150   |    0    |    900    |
+	 * |   12    |   475   |    0    |    950    |
+	 * |    6    |   250   |    0    |   1000    |
+	 * -------------------------------------------
+	 */
+
+	.p			= 12,
+	.m			= 250,
+	.s			= 0,
+
+	/* D-PHY PLL stable time spec :min = 200usec ~ max 400usec */
+	.pll_stable_time	= 500,
+
+	/* escape clk : 10MHz */
+	.esc_clk		= 10 * 1000000,
+
+	/* stop state holding counter after bta change count 0 ~ 0xfff */
+	.stop_holding_cnt	= 0x7ff,
+	/* bta timeout 0 ~ 0xff */
+	.bta_timeout		= 0xff,
+	/* lp rx timeout 0 ~ 0xffff */
+	.rx_timeout		= 0xffff,
+};
+
+static struct s5p_platform_mipi_dsim dsim_platform_data = {
+	/* already enabled at boot loader. FIXME!!! */
+	.enabled		= true,
+	.phy_enable		= s5p_dsim_phy_enable,
+	.dsim_config		= &dsim_config,
+};
+
+static struct mipi_dsim_lcd_device mipi_lcd_device = {
+	.name			= "s6d6aa1",
+	.id			= -1,
+	.bus_id			= 0,
+
+	.platform_data		= (void *)&s6d6aa1_pdata,
+};
+#endif
+
+static void __init redwood_fb_init(void)
+{
+#ifdef CONFIG_S5P_MIPI_DSI2
+	struct s5p_platform_mipi_dsim *dsim_pdata;
+
+	dsim_pdata = (struct s5p_platform_mipi_dsim *)&dsim_platform_data;
+	strcpy(dsim_pdata->lcd_panel_name, "s6d6aa1");
+	dsim_pdata->lcd_panel_info = (void *)&drm_fimd_pdata.panel.timing;
+
+	s5p_mipi_dsi_register_lcd_device(&mipi_lcd_device);
+	platform_device_register(&lcd_fixed_reg_device);
+#ifdef CONFIG_MDNIE_SUPPORT
+	s5p_fimd_ext_device_register(&exynos4_mdnie_device);
+	s5p_fimd_ext_device_register(&exynos4_fimd_lite_device);
+	exynos4_common_setup_clock("sclk_mdnie", "mout_mpll_user",
+				400 * MHZ, 1);
+#endif
+	s5p_device_mipi_dsim0.dev.platform_data = (void *)&dsim_platform_data;
+	platform_device_register(&s5p_device_mipi_dsim0);
+#endif
+
+	s5p_device_fimd0.dev.platform_data = &drm_fimd_pdata;
+	lcd_cfg_gpio();
+}
+
+static unsigned long fbmem_start;
+static int __init early_fbmem(char *p)
+{
+	char *endp;
+	unsigned long size;
+
+	if (!p)
+		return -EINVAL;
+
+	size = memparse(p, &endp);
+	if (*endp == '@')
+		fbmem_start = memparse(endp + 1, &endp);
+
+	return endp > p ? 0 : -EINVAL;
+}
+early_param("fbmem", early_fbmem);
+#endif
+
+#ifdef CONFIG_DRM_EXYNOS_HDMI
+/* I2C HDMIPHY */
+static struct s3c2410_platform_i2c hdmiphy_i2c_data __initdata = {
+	.bus_num	= 8,
+	.flags		= 0,
+	.slave_addr	= 0x10,
+	.frequency	= 100*1000,
+	.sda_delay	= 100,
+};
+
+static struct i2c_board_info i2c_hdmiphy_devs[] __initdata = {
+	{
+		/* hdmiphy */
+		I2C_BOARD_INFO("s5p_hdmiphy", (0x70 >> 1)),
+	},
+};
+
+static struct exynos_drm_hdmi_pdata drm_hdmi_pdata = {
+	.cfg_hpd	= s5p_hdmi_cfg_hpd,
+	.get_hpd	= s5p_hdmi_get_hpd,
+};
+
+static struct exynos_drm_common_hdmi_pd drm_common_hdmi_pdata = {
+	.hdmi_dev	= &s5p_device_hdmi.dev,
+	.mixer_dev	= &s5p_device_mixer.dev,
+};
+
+static struct platform_device exynos_drm_hdmi_device = {
+	.name	= "exynos-drm-hdmi",
+	.dev	= {
+		.platform_data = &drm_common_hdmi_pdata,
+	},
+};
+
+static void redwood_tv_init(void)
+{
+	/* HDMI PHY */
+	s5p_i2c_hdmiphy_set_platdata(&hdmiphy_i2c_data);
+	i2c_register_board_info(8, i2c_hdmiphy_devs,
+				ARRAY_SIZE(i2c_hdmiphy_devs));
+
+	gpio_request(GPIO_HDMI_HPD, "HDMI_HPD");
+	gpio_direction_input(GPIO_HDMI_HPD);
+	s3c_gpio_cfgpin(GPIO_HDMI_HPD, S3C_GPIO_SFN(0x3));
+	s3c_gpio_setpull(GPIO_HDMI_HPD, S3C_GPIO_PULL_DOWN);
+
+#ifdef CONFIG_EXYNOS_DEV_PD
+	s5p_device_hdmi.dev.parent = &exynos4_device_pd[PD_TV].dev;
+	s5p_device_mixer.dev.parent = &exynos4_device_pd[PD_TV].dev;
+#endif
+	s5p_device_hdmi.dev.platform_data = &drm_hdmi_pdata;
+}
+#endif
+
+static struct platform_device exynos_drm_vidi_device = {
+	.name	= "exynos-drm-vidi",
+};
+
+#ifdef CONFIG_CPU_FREQ_GOV_ONDEMAND_FLEXRATE
+static void flexrate_work(struct work_struct *work)
+{
+	cpufreq_ondemand_flexrate_request(10000, 10);
+}
+static DECLARE_WORK(flex_work, flexrate_work);
+#endif
+
+#include <linux/pm_qos_params.h>
+static struct pm_qos_request_list busfreq_qos;
+static void flexrate_qos_cancel(struct work_struct *work)
+{
+	pm_qos_update_request(&busfreq_qos, 0);
+}
+
+static DECLARE_DELAYED_WORK(busqos_work, flexrate_qos_cancel);
+
+static void tsp_request_qos(void *data)
+{
+#ifdef CONFIG_CPU_FREQ_GOV_ONDEMAND_FLEXRATE
+	if (!work_pending(&flex_work))
+		schedule_work_on(0, &flex_work);
+#endif
+	/* Guarantee that the bus runs at >= 266MHz */
+	if (!pm_qos_request_active(&busfreq_qos))
+		pm_qos_add_request(&busfreq_qos, PM_QOS_BUS_DMA_THROUGHPUT,
+				   266000);
+	else {
+		cancel_delayed_work_sync(&busqos_work);
+		pm_qos_update_request(&busfreq_qos, 266000);
+	}
+
+	/* Cancel the QoS request after 1/10 sec */
+	schedule_delayed_work_on(0, &busqos_work, HZ / 5);
+}
+
+#ifdef CONFIG_TOUCHSCREEN_MELFAS_MMS
+/* MELFAS TSP */
+static bool enabled;
+static int melfas_mms_power(int on)
+{
+	struct regulator *regulator_avdd;
+	struct regulator *regulator_iovdd;
+
+	if (enabled == on)
+		return 0;
+
+	/* Analog-Panel Power: 3.3V */
+	regulator_avdd = regulator_get(NULL, "touch");
+	if (IS_ERR(regulator_avdd))
+		return PTR_ERR(regulator_avdd);
+
+	/* IO Logic Power: 1.8V */
+	regulator_iovdd = regulator_get(NULL, "touch_1.8v");
+	if (IS_ERR(regulator_iovdd)) {
+		regulator_put(regulator_avdd);
+		return PTR_ERR(regulator_iovdd);
+	}
+
+	printk(KERN_DEBUG "[TSP] %s %s\n", __func__, on ? "on" : "off");
+
+	if (on) {
+		regulator_enable(regulator_avdd);
+		regulator_enable(regulator_iovdd);
+	} else {
+		if (regulator_is_enabled(regulator_iovdd))
+			regulator_disable(regulator_iovdd);
+		if (regulator_is_enabled(regulator_avdd))
+			regulator_disable(regulator_avdd);
+	}
+
+	enabled = on;
+	regulator_put(regulator_avdd);
+	regulator_put(regulator_iovdd);
+
+	return 0;
+}
+
+static int is_melfas_mms_vdd_on(void)
+{
+	int ret;
+	/* 3.3V */
+	static struct regulator *regulator;
+
+	if (!regulator) {
+		regulator = regulator_get(NULL, "touch");
+		if (IS_ERR(regulator)) {
+			ret = PTR_ERR(regulator);
+			pr_err("could not get touch, rc = %d\n", ret);
+			return ret;
+		}
+	}
+
+	if (regulator_is_enabled(regulator))
+		return 1;
+	else
+		return 0;
+}
+
+static int melfas_mms_mux_fw_flash(bool to_gpios)
+{
+	pr_info("%s:to_gpios=%d\n", __func__, to_gpios);
+
+	/* TOUCH_EN is always an output */
+	if (to_gpios) {
+		if (gpio_request(GPIO_TSP_SCL_18V, "GPIO_TSP_SCL"))
+			pr_err("failed to request gpio(GPIO_TSP_SCL)\n");
+		if (gpio_request(GPIO_TSP_SDA_18V, "GPIO_TSP_SDA"))
+			pr_err("failed to request gpio(GPIO_TSP_SDA)\n");
+
+		gpio_direction_output(GPIO_TSP_INT, 0);
+		s3c_gpio_cfgpin(GPIO_TSP_INT, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_TSP_INT, S3C_GPIO_PULL_NONE);
+
+		gpio_direction_output(GPIO_TSP_SCL_18V, 0);
+		s3c_gpio_cfgpin(GPIO_TSP_SCL_18V, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_TSP_SCL_18V, S3C_GPIO_PULL_NONE);
+
+		gpio_direction_output(GPIO_TSP_SDA_18V, 0);
+		s3c_gpio_cfgpin(GPIO_TSP_SDA_18V, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_TSP_SDA_18V, S3C_GPIO_PULL_NONE);
+
+	} else {
+		gpio_direction_output(GPIO_TSP_INT, 1);
+		gpio_direction_input(GPIO_TSP_INT);
+		s3c_gpio_cfgpin(GPIO_TSP_INT, S3C_GPIO_SFN(0xf));
+		/*s3c_gpio_cfgpin(GPIO_TSP_INT, S3C_GPIO_INPUT); */
+		s3c_gpio_setpull(GPIO_TSP_INT, S3C_GPIO_PULL_NONE);
+		/*S3C_GPIO_PULL_UP */
+
+		gpio_direction_output(GPIO_TSP_SCL_18V, 1);
+		gpio_direction_input(GPIO_TSP_SCL_18V);
+		s3c_gpio_cfgpin(GPIO_TSP_SCL_18V, S3C_GPIO_SFN(3));
+		s3c_gpio_setpull(GPIO_TSP_SCL_18V, S3C_GPIO_PULL_NONE);
+
+		gpio_direction_output(GPIO_TSP_SDA_18V, 1);
+		gpio_direction_input(GPIO_TSP_SDA_18V);
+		s3c_gpio_cfgpin(GPIO_TSP_SDA_18V, S3C_GPIO_SFN(3));
+		s3c_gpio_setpull(GPIO_TSP_SDA_18V, S3C_GPIO_PULL_NONE);
+
+		gpio_free(GPIO_TSP_SCL_18V);
+		gpio_free(GPIO_TSP_SDA_18V);
+	}
+	return 0;
+}
+
+static struct tsp_callbacks *charger_callbacks;
+static struct tsp_callbacks {
+	void (*inform_charger)(struct tsp_callbacks *, bool);
+};
+
+static void tsp_charger_infom(bool en)
+{
+	if (charger_callbacks && charger_callbacks->inform_charger)
+		charger_callbacks->inform_charger(charger_callbacks, en);
+}
+
+static void melfas_register_callback(void *cb)
+{
+	charger_callbacks = cb;
+	pr_debug("[TSP] melfas_register_callback\n");
+}
+
+static struct melfas_mms_platform_data mms_ts_pdata = {
+	.max_x = 720,
+	.max_y = 1280,
+	.invert_x = 0,
+	.invert_y = 0,
+	.gpio_int = GPIO_TSP_INT,
+	.gpio_scl = GPIO_TSP_SCL_18V,
+	.gpio_sda = GPIO_TSP_SDA_18V,
+	.power = melfas_mms_power,
+	.mux_fw_flash = melfas_mms_mux_fw_flash,
+	.is_vdd_on = is_melfas_mms_vdd_on,
+	.input_event = tsp_request_qos,
+	.register_cb = melfas_register_callback,
+};
+
+static struct melfas_mms_platform_data mms_ts_pdata_rotate = {
+	.max_x = 720,
+	.max_y = 1280,
+	.invert_x = 720,
+	.invert_y = 1280,
+	.gpio_int = GPIO_TSP_INT,
+	.gpio_scl = GPIO_TSP_SCL_18V,
+	.gpio_sda = GPIO_TSP_SDA_18V,
+	.power = melfas_mms_power,
+	.mux_fw_flash = melfas_mms_mux_fw_flash,
+	.is_vdd_on = is_melfas_mms_vdd_on,
+	.input_event = tsp_request_qos,
+	.register_cb = melfas_register_callback,
+};
+
+static struct i2c_board_info i2c_devs3[] = {
+	{
+	 I2C_BOARD_INFO(MELFAS_TS_NAME, 0x48),
+	 .platform_data = &mms_ts_pdata},
+};
+
+static void __init redwood_tsp_set_platdata(struct melfas_mms_platform_data
+	*pdata)
+{
+	if (!pdata)
+		pdata = &mms_ts_pdata;
+
+	i2c_devs3[0].platform_data = pdata;
+}
+
+static void __init redwood_tsp_init(void)
+{
+	int gpio;
+	int ret;
+	printk(KERN_INFO "[TSP] midas_tsp_init() is called\n");
+
+	/* TSP_INT: XEINT_4 */
+	gpio = GPIO_TSP_INT;
+	ret = gpio_request(gpio, "TSP_INT");
+	if (ret)
+		pr_err("failed to request gpio(TSP_INT)\n");
+	s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(0xf));
+	s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+
+	s5p_register_gpio_interrupt(gpio);
+	i2c_devs3[0].irq = gpio_to_irq(gpio);
+
+	printk(KERN_INFO "%s touch : %d\n", __func__, i2c_devs3[0].irq);
+
+	i2c_register_board_info(3, i2c_devs3, ARRAY_SIZE(i2c_devs3));
+}
+#endif
+
+static struct i2c_board_info i2c_devs0[] __initdata = {
+	/*
+	 * GPD1(0, 1) / XI2C0SDA/SCL
+	 * PQ_LTE: 8M_CAM, PQ(proxima): NC
+	 */
+};
+
+#ifdef CONFIG_VIBETONZ
+static struct max77693_haptic_platform_data max77693_haptic_pdata = {
+	.max_timeout = 10000,
+	.duty = 37641,
+	.period = 38022,
+	.reg2 = MOTOR_LRA | EXT_PWM | DIVIDER_128,
+	.init_hw = NULL,
+	.motor_en = NULL,
+	.pwm_id = 0,
+	.regulator_name = "vmotor",
+};
+#endif
+
+#ifdef CONFIG_LEDS_MAX77693
+static struct max77693_led_platform_data max77693_led_pdata = {
+	.num_leds = 4,
+
+	.leds[0].name = "leds-sec1",
+	.leds[0].id = MAX77693_FLASH_LED_1,
+	.leds[0].timer = MAX77693_FLASH_TIME_500MS,
+	.leds[0].timer_mode = MAX77693_TIMER_MODE_MAX_TIMER,
+	.leds[0].cntrl_mode = MAX77693_LED_CTRL_BY_FLASHSTB,
+	.leds[0].brightness = 0x1F,
+
+	.leds[1].name = "leds-sec2",
+	.leds[1].id = MAX77693_FLASH_LED_2,
+	.leds[1].timer = MAX77693_FLASH_TIME_500MS,
+	.leds[1].timer_mode = MAX77693_TIMER_MODE_MAX_TIMER,
+	.leds[1].cntrl_mode = MAX77693_LED_CTRL_BY_FLASHSTB,
+	.leds[1].brightness = 0x1F,
+
+	.leds[2].name = "torch-sec1",
+	.leds[2].id = MAX77693_TORCH_LED_1,
+	.leds[2].cntrl_mode = MAX77693_LED_CTRL_BY_FLASHSTB,
+	.leds[2].brightness = 0x0F,
+
+	.leds[3].name = "torch-sec2",
+	.leds[3].id = MAX77693_TORCH_LED_2,
+	.leds[3].cntrl_mode = MAX77693_LED_CTRL_BY_I2C,
+	.leds[3].brightness = 0x0F,
+
+};
+#endif
+
+static struct max77693_charger_reg_data max77693_charger_regs[] = {
+	{
+		/*
+		 * charger setting unlock
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_06,
+		.data = 0x3 << 2,
+	}, {
+		/*
+		 * fast-charge timer : 10hr
+		 * charger restart threshold : disabled
+		 * low-battery prequalification mode : enabled
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_01,
+		.data = (0x4 << 0) | (0x3 << 4),
+	}, {
+		/*
+		 * CHGIN output current limit in OTG mode : 900mA
+		 * fast-charge current : 466mA
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_02,
+		.data = (1 << 7) | 0xf,
+	}, {
+		/*
+		 * TOP off timer setting : 0min
+		 * TOP off current threshold : 100mA
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_03,
+		.data = 0x0,
+	}, {
+		/*
+		* minimum system regulation voltage : 3.6V
+		* primary charge termination voltage : 4.2V
+		*/
+		.addr = MAX77693_CHG_REG_CHG_CNFG_04,
+		.data = 0xd6,
+	}, {
+		/*
+		 * maximum input current limit : 600mA
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_09,
+		.data = 0x1e,
+	}, {
+		/*
+		 * VBYPSET 5V for USB HOST
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_11,
+		.data = 0x50,
+	},
+};
+
+static struct max77693_charger_platform_data max77693_charger_pdata = {
+	.init_data = max77693_charger_regs,
+	.num_init_data = ARRAY_SIZE(max77693_charger_regs),
+};
+
+static void max77693_change_top_off_vol(void)
+{
+	int i = 0;
+
+	/*
+	* minimum system regulation voltage : 3.6V
+	* primary charge termination voltage : 4.35V
+	*/
+	for (i = 0; i < max77693_charger_pdata.num_init_data; i++) {
+		if (max77693_charger_pdata.init_data[i].addr ==
+				MAX77693_CHG_REG_CHG_CNFG_04)
+			max77693_charger_pdata.init_data[i].data = 0xdd;
+	}
+
+	return ;
+}
+
+static struct max77693_platform_data midas_max77693_info = {
+	.irq_base	= IRQ_BOARD_IFIC_START,
+	.irq_gpio	= GPIO_IF_PMIC_IRQ,
+	.wakeup		= 1,
+	.muic = &max77693_muic,
+	.regulators = &max77693_regulators,
+	.num_regulators = MAX77693_REG_MAX,
+#ifdef CONFIG_VIBETONZ
+	.haptic_data = &max77693_haptic_pdata,
+#endif
+#ifdef CONFIG_LEDS_MAX77693
+	.led_data = &max77693_led_pdata,
+#endif
+	.charger_data = &max77693_charger_pdata,
+};
+
+/* I2C GPIO: PQ/PQ_LTE use GPM2[0,1] for MAX77693 */
+static struct i2c_gpio_platform_data gpio_i2c_if_pmic = {
+	/* PQ/PQLTE use GPF1(4, 5) */
+	.sda_pin = GPIO_IF_PMIC_SDA,
+	.scl_pin = GPIO_IF_PMIC_SCL,
+};
+
+static struct platform_device device_i2c_if_pmic = {
+	.name = "i2c-gpio",
+	.id = I2C_IF_PMIC,
+	.dev.platform_data = &gpio_i2c_if_pmic,
+};
+
+static struct i2c_board_info i2c_devs_if_pmic[] __initdata = {
+	{
+		I2C_BOARD_INFO("max77693", (0xCC >> 1)),
+		.platform_data = &midas_max77693_info,
+	},
+};
+
+/* Both PQ/PQ_LTE use I2C7 (XPWMTOUT_2/3) for MAX77686 */
+static struct i2c_board_info i2c_devs7[] __initdata = {
+	{
+		I2C_BOARD_INFO("max77686", (0x12 >> 1)),
+		.platform_data	= &exynos4_max77686_info,
+	}
+};
+
+#ifdef CONFIG_USB_EHCI_S5P
+static struct s5p_ehci_platdata smdk4212_ehci_pdata;
+
+static void __init smdk4212_ehci_init(void)
+{
+	struct s5p_ehci_platdata *pdata = &smdk4212_ehci_pdata;
+
+	s5p_ehci_set_platdata(pdata);
+}
+#endif
+
+#ifdef CONFIG_USB_OHCI_S5P
+static struct s5p_ohci_platdata smdk4212_ohci_pdata;
+
+static void __init smdk4212_ohci_init(void)
+{
+	struct s5p_ohci_platdata *pdata = &smdk4212_ohci_pdata;
+
+	s5p_ohci_set_platdata(pdata);
+}
+#endif
+
+
+/* USB GADGET */
+#ifdef CONFIG_USB_GADGET
+static struct s5p_usbgadget_platdata smdk4212_usbgadget_pdata;
+
+static void __init smdk4212_usbgadget_init(void)
+{
+	struct s5p_usbgadget_platdata *pdata = &smdk4212_usbgadget_pdata;
+
+	s5p_usbgadget_set_platdata(pdata);
+}
+#endif
+
+#ifdef CONFIG_USB_G_SLP
+#include <linux/usb/slp_multi.h>
+static struct slp_multi_func_data midas_slp_multi_funcs[] = {
+	{
+		.name = "mtp",
+		.usb_config_id = USB_CONFIGURATION_DUAL,
+	}, {
+		.name = "acm",
+		.usb_config_id = USB_CONFIGURATION_2,
+	}, {
+		.name = "sdb",
+		.usb_config_id = USB_CONFIGURATION_2,
+	}, {
+		.name = "mass_storage",
+		.usb_config_id = USB_CONFIGURATION_1,
+	}, {
+		.name = "rndis",
+		.usb_config_id = USB_CONFIGURATION_1,
+	},
+};
+
+static struct slp_multi_platform_data midas_slp_multi_pdata = {
+	.nluns	= 2,
+	.funcs = midas_slp_multi_funcs,
+	.nfuncs = ARRAY_SIZE(midas_slp_multi_funcs),
+};
+
+static struct platform_device midas_slp_usb_multi = {
+	.name		= "slp_multi",
+	.id			= -1,
+	.dev		= {
+		.platform_data = &midas_slp_multi_pdata,
+	},
+};
+#endif
+
+#ifdef CONFIG_SND_SOC_WM8994
+/* vbatt device (for WM8994) */
+static struct regulator_consumer_supply vbatt_supplies[] = {
+	REGULATOR_SUPPLY("LDO1VDD", NULL),
+	REGULATOR_SUPPLY("SPKVDD1", NULL),
+	REGULATOR_SUPPLY("SPKVDD2", NULL),
+};
+
+static struct regulator_init_data vbatt_initdata = {
+	.constraints = {
+		.always_on = 1,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(vbatt_supplies),
+	.consumer_supplies = vbatt_supplies,
+};
+
+static struct fixed_voltage_config vbatt_config = {
+	.init_data = &vbatt_initdata,
+	.microvolts = 5000000,
+	.supply_name = "VBATT",
+	.gpio = -EINVAL,
+};
+
+static struct platform_device vbatt_device = {
+	.name = "reg-fixed-voltage",
+	.id = -1,
+	.dev = {
+		.platform_data = &vbatt_config,
+	},
+};
+
+/* I2C GPIO: GPF0(0/1) for CODEC_SDA/SCL */
+static struct regulator_consumer_supply wm1811_ldo1_supplies[] = {
+	REGULATOR_SUPPLY("AVDD1", NULL),
+};
+
+static struct regulator_init_data wm1811_ldo1_initdata = {
+	.constraints = {
+		.name = "WM1811 LDO1",
+		.valid_ops_mask = REGULATOR_CHANGE_STATUS,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(wm1811_ldo1_supplies),
+	.consumer_supplies = wm1811_ldo1_supplies,
+};
+
+static struct regulator_consumer_supply wm1811_ldo2_supplies[] = {
+	REGULATOR_SUPPLY("DCVDD", NULL),
+};
+
+static struct regulator_init_data wm1811_ldo2_initdata = {
+	.constraints = {
+		.name = "WM1811 LDO2",
+		.always_on = true, /* Actually status changed by LDO1 */
+	},
+	.num_consumer_supplies = ARRAY_SIZE(wm1811_ldo2_supplies),
+	.consumer_supplies = wm1811_ldo2_supplies,
+};
+
+static struct wm8994_pdata wm1811_pdata = {
+	.gpio_defaults = {
+		[0] = WM8994_GP_FN_IRQ,   /* GPIO1 IRQ output, CMOS mode */
+		[7] = WM8994_GPN_DIR | WM8994_GP_FN_PIN_SPECIFIC, /* DACDAT3 */
+		[8] = WM8994_CONFIGURE_GPIO |
+			  WM8994_GP_FN_PIN_SPECIFIC, /* ADCDAT3 */
+		[9] = WM8994_CONFIGURE_GPIO |\
+			  WM8994_GP_FN_PIN_SPECIFIC, /* LRCLK3 */
+		[10] = WM8994_CONFIGURE_GPIO |\
+			   WM8994_GP_FN_PIN_SPECIFIC, /* BCLK3 */
+	},
+
+	.irq_base = IRQ_BOARD_CODEC_START,
+
+	/* The enable is shared but assign it to LDO1 for software */
+	.ldo = {
+		{
+			.enable = GPIO_WM8994_LDO,
+			.init_data = &wm1811_ldo1_initdata,
+		},
+		{
+			.init_data = &wm1811_ldo2_initdata,
+		},
+	},
+
+	/* Support external capacitors */
+	/* This works on wm1811a only (board REV06 or above) */
+	.jd_ext_cap = 1,
+
+	/* Regulated mode at highest output voltage */
+	/* 2.0V for micbias2 */
+	.micbias = {0x2f, 0x27},
+
+	.micd_lvl_sel = 0xFF,
+
+	.ldo_ena_always_driven = true,
+	.ldo_ena_delay = 30000,
+
+	/* Disable ground loop noise feedback on lineout1 - NC - */
+	.lineout1fb = 0,
+	/* Enable ground loop noise feedback on lineout2 dock audio */
+	.lineout2fb = 1,
+};
+#endif
+
+/* I2C4's GPIO: Redwood CODEC */
+static struct i2c_board_info i2c_devs4[] __initdata = {
+#if defined(CONFIG_SND_SOC_WM8994)
+	{
+		I2C_BOARD_INFO("wm1811", (0x34 >> 1)),	/* Audio CODEC */
+		.platform_data = &wm1811_pdata,
+		.irq = IRQ_EINT(30),
+	},
+#endif
+};
+
+/* I2C GPIO: NFC */
+static struct i2c_gpio_platform_data gpio_i2c_nfc = {
+#ifdef CONFIG_MACH_REDWOOD
+	.sda_pin = GPIO_NFC_SDA_18V,
+	.scl_pin = GPIO_NFC_SCL_18V,
+#elif defined(CONFIG_MACH_SLP_PQ_LTE)
+	.sda_pin = EXYNOS4212_GPM4(1),
+	.scl_pin = EXYNOS4212_GPM4(0),
+#endif
+};
+
+static struct platform_device device_i2c_nfc = {
+	.name = "i2c-gpio",
+	.id = I2C_NFC,
+	.dev.platform_data = &gpio_i2c_nfc,
+};
+
+/* Bluetooth */
+static struct platform_device bcm4334_bluetooth_device = {
+	.name = "bcm4334_bluetooth",
+	.id = -1,
+};
+
+#ifdef CONFIG_MACH_REDWOOD
+/* BCM47511 GPS */
+static struct bcm47511_platform_data midas_bcm47511_data = {
+	.regpu		= GPIO_GPS_PWR_EN,	/* XM0DATA[15] */
+	.nrst		= GPIO_GPS_nRST,	/* XM0DATA[14] */
+	.uart_rxd	= GPIO_GPS_RXD,		/* XURXD[1] */
+	.gps_cntl	= -1,	/* GPS_CNTL - XM0ADDR[6] */
+	.reg32khz	= "lpo_in",
+};
+
+static struct platform_device midas_bcm47511 = {
+	.name	= "bcm47511",
+	.id	= -1,
+	.dev	= {
+		.platform_data	= &midas_bcm47511_data,
+	},
+};
+
+/* BCM4752 GPS */
+static struct bcm4752_platform_data midas_bcm4752_data = {
+	.regpu		= GPIO_GPS_PWR_EN,	/* XM0DATA[15] */
+	.uart_rxd	= GPIO_GPS_RXD,		/* XURXD[1] */
+	.gps_cntl	= -1,	/* GPS_CNTL - XM0ADDR[6] */
+	.reg32khz	= "lpo_in",
+};
+
+static struct platform_device midas_bcm4752 = {
+	.name	= "bcm4752",
+	.id	= -1,
+	.dev	= {
+		.platform_data	= &midas_bcm4752_data,
+	},
+};
+#endif
+
+/* I2C GPIO: 3_TOUCH */
+#ifdef CONFIG_MACH_SLP_PQ_LTE
+static struct i2c_gpio_platform_data gpio_i2c_3_touch = {
+	.sda_pin = GPIO_3_TOUCH_SDA,
+	.scl_pin = GPIO_3_TOUCH_SCL,
+};
+
+static struct platform_device device_i2c_3_touch = {
+	.name = "i2c-gpio",
+	.id = I2C_3_TOUCH,
+	.dev.platform_data = &gpio_i2c_3_touch,
+};
+
+static struct i2c_board_info i2c_devs_3_touch[] __initdata = {
+	{
+		I2C_BOARD_INFO("melfas-touchkey", 0x20),
+	},
+};
+#endif
+
+#define GPIO_KEYS(_code, _gpio, _active_low, _iswake, _hook)		\
+{					\
+	.code = _code,			\
+	.gpio = _gpio,	\
+	.active_low = _active_low,		\
+	.type = EV_KEY,			\
+	.wakeup = _iswake,		\
+	.debounce_interval = 10,	\
+	.isr_hook = _hook,			\
+	.value = 1 \
+}
+
+
+static struct gpio_keys_button redwood_buttons[] = {
+	GPIO_KEYS(KEY_VOLUMEUP, GPIO_VOL_UP_00,
+		  1, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_VOLUMEDOWN, GPIO_VOL_DOWN_00,
+		  1, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_POWER, GPIO_nPOWER,
+		  1, 1, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_MENU, GPIO_OK_KEY_ANDROID,
+		  1, 1, sec_debug_check_crash_key),
+};
+
+static struct gpio_keys_platform_data redwood_gpiokeys_platform_data = {
+	.buttons = redwood_buttons,
+	.nbuttons = ARRAY_SIZE(redwood_buttons),
+};
+
+static struct platform_device redwood_keypad = {
+	.name	= "gpio-keys",
+	.dev	= {
+		.platform_data = &redwood_gpiokeys_platform_data,
+	},
+};
+
+#ifdef CONFIG_I2C_SI4705
+static void pq_si4705_reset(int enable)
+{
+	pr_info("%s: enable is %d", __func__, enable);
+	if (enable)
+		gpio_set_value(GPIO_FM_RST, 1);
+	else
+		gpio_set_value(GPIO_FM_RST, 0);
+}
+
+static void pq_si4705_init(void)
+{
+	gpio_request(GPIO_FM_RST, "fmradio_reset");
+	s3c_gpio_cfgpin(GPIO_FM_RST, S3C_GPIO_OUTPUT);
+	gpio_set_value(GPIO_FM_RST, 0);
+}
+
+static struct i2c_gpio_platform_data gpio_i2c_fm_radio = {
+	.sda_pin	= EXYNOS4_GPY0(3),
+	.scl_pin	= EXYNOS4_GPY0(2),
+};
+
+static struct platform_device device_i2c_fm_radio = {
+	.name = "i2c-gpio",
+	.id = I2C_FM_RADIO,
+	.dev.platform_data = &gpio_i2c_fm_radio,
+};
+
+static struct si4705_pdata pq_fm_radio_info = {
+	.reset = pq_si4705_reset,
+	.pdata_values = (SI4705_PDATA_BIT_VOL_STEPS |
+			 SI4705_PDATA_BIT_VOL_TABLE |
+			 SI4705_PDATA_BIT_RSSI_THRESHOLD |
+			 SI4705_PDATA_BIT_SNR_THRESHOLD),
+	.rx_vol_steps = 16,
+	.rx_vol_table = {	0x0, 0x13, 0x16, 0x19,
+				0x1C, 0x1F, 0x22, 0x25,
+				0x28, 0x2B, 0x2E, 0x31,
+				0x34, 0x37, 0x3A, 0x3D	},
+	.rx_seek_tune_rssi_threshold = 0x00,
+	.rx_seek_tune_snr_threshold = 0x01,
+};
+
+static struct i2c_board_info i2c_devs_fm_radio[] __initdata = {
+	{
+		I2C_BOARD_INFO("si4705", 0x22>>1),
+		.platform_data = &pq_fm_radio_info,
+		.irq = IRQ_EINT(11),
+	}
+};
+#endif
+
+#if defined(CONFIG_BATTERY_SAMSUNG)
+static struct samsung_battery_platform_data samsung_battery_pdata = {
+	.charger_name	= "max77693-charger",
+	.fuelgauge_name	= "max17047-fuelgauge",
+	.voltage_max = 4200000,
+	.voltage_min = 3400000,
+
+	.in_curr_limit = 1000,
+	.chg_curr_ta = 1000,
+
+	.chg_curr_usb = 475,
+	.chg_curr_cdp = 1000,
+	.chg_curr_wpc = 475,
+	.chg_curr_dock = 1000,
+	.chg_curr_etc = 475,
+
+	.chng_interval = 30,
+	.chng_susp_interval = 60,
+	.norm_interval = 120,
+	.norm_susp_interval = 7200,
+	.emer_lv1_interval = 30,
+	.emer_lv2_interval = 10,
+
+	.recharge_voltage = 4150000,	/* it will be cacaluated in probe */
+
+	.abstimer_charge_duration = 6 * 60 * 60,
+	.abstimer_charge_duration_wpc = 8 * 60 * 60,
+	.abstimer_recharge_duration = 1.5 * 60 * 60,
+
+	.cb_det_src = CABLE_DET_CHARGER,
+	.overheat_stop_temp = 600,
+	.overheat_recovery_temp = 400,
+	.freeze_stop_temp = -50,
+	.freeze_recovery_temp = 0,
+
+	/* CTIA spec */
+	.ctia_spec  = false,
+
+	/* CTIA temperature spec */
+	.event_time = 10 * 60,
+	.event_overheat_stop_temp = 600,
+	.event_overheat_recovery_temp = 400,
+	.event_freeze_stop_temp = -50,
+	.event_freeze_recovery_temp = 0,
+	.lpm_overheat_stop_temp = 480,
+	.lpm_overheat_recovery_temp = 450,
+	.lpm_freeze_stop_temp = -50,
+	.lpm_freeze_recovery_temp = 0,
+
+	.temper_src = TEMPER_AP_ADC,
+	.temper_ch = 2,
+#ifdef CONFIG_S3C_ADC
+	/* s3c adc driver does not convert raw adc data.
+	 * so, register convert function.
+	 */
+	.covert_adc = convert_adc,
+#endif
+
+	.vf_det_src = VF_DET_CHARGER,
+	.vf_det_ch = 0,	/* if src == VF_DET_ADC */
+	.vf_det_th_l = 500,
+	.vf_det_th_h = 1500,
+
+	.suspend_chging = true,
+
+	.led_indicator = false,
+
+	.battery_standever = false,
+};
+
+static struct platform_device samsung_device_battery = {
+	.name	= "samsung-battery",
+	.id	= -1,
+	.dev.platform_data = &samsung_battery_pdata,
+};
+#endif
+
+/* I2C GPIO: Fuel Gauge */
+static struct i2c_gpio_platform_data gpio_i2c_fuel = {
+	/* PQ/PQLTE use GPF1(4, 5) */
+	.sda_pin = GPIO_FUEL_SDA,
+	.scl_pin = GPIO_FUEL_SCL,
+};
+
+static struct platform_device device_i2c_fuel = {
+	.name = "i2c-gpio",
+	.id = I2C_FUEL,
+	.dev.platform_data = &gpio_i2c_fuel,
+};
+
+static struct max17047_platform_data max17047_pdata = {
+	.irq_gpio = GPIO_FUEL_ALERT,
+};
+
+static struct i2c_board_info i2c_devs_fuel[] __initdata = {
+	{
+		I2C_BOARD_INFO("max17047-fuelgauge", 0x36),
+		.platform_data = &max17047_pdata,
+	},
+};
+
+#ifdef CONFIG_BUSFREQ_OPP
+static struct device_domain busfreq;
+
+static struct platform_device exynos4_busfreq = {
+	.id = -1,
+	.name = "exynos-busfreq",
+};
+#endif
+
+#ifdef CONFIG_DISPFREQ_OPP
+static struct platform_device exynos4_dispfreq = {
+	.name	= "exynos4-dispfreq",
+	.id		= -1,
+};
+#endif
+
+/* I2C GPIO: MHL */
+static struct i2c_gpio_platform_data gpio_i2c_mhl = {
+	.sda_pin = GPIO_MHL_SDA_1_8V,
+	.scl_pin = GPIO_MHL_SCL_1_8V,
+	.udelay = 3,
+};
+
+static struct platform_device device_i2c_mhl = {
+	.name = "i2c-gpio",
+	.id = I2C_MHL,
+	.dev.platform_data = &gpio_i2c_mhl,
+};
+
+/* I2C GPIO: MHL_D */
+static struct i2c_gpio_platform_data gpio_i2c_mhl_d = {
+	.sda_pin = GPIO_MHL_DSDA_2_8V,
+	.scl_pin = GPIO_MHL_DSCL_2_8V,
+};
+
+static struct platform_device device_i2c_mhl_d = {
+	.name = "i2c-gpio",
+	.id = I2C_MHL_D,
+	.dev.platform_data = &gpio_i2c_mhl_d,
+};
+
+/* Sensor */
+/* Accelometer & Gyro Sensor */
+static int lsm330dlc_accel_get_position(void)
+{
+	int position = 0;
+
+	return position;
+}
+
+static struct accel_platform_data lsm330dlc_accel_pdata = {
+	.accel_get_position = lsm330dlc_accel_get_position,
+	.axis_adjust = true,
+};
+
+static struct i2c_board_info i2c_devs1[] __initdata = {
+	/* PQ_LTE/PQ both use GSENSE_SCL/SDA */
+	{
+		I2C_BOARD_INFO("lsm330dlc_accel", (0x32 >> 1)),
+		.platform_data = &lsm330dlc_accel_pdata,
+	},
+	{
+		I2C_BOARD_INFO("lsm330dlc_gyro", (0xD6 >> 1)),
+	},
+};
+
+static void lsm331dlc_gpio_init(void)
+{
+	int ret = gpio_request(GPIO_GYRO_INT, "lsm330dlc_gyro_irq");
+
+	printk(KERN_INFO "%s\n", __func__);
+
+	if (ret)
+		printk(KERN_ERR "Failed to request gpio lsm330dlc_gyro_irq\n");
+
+	ret = gpio_request(GPIO_GYRO_DE, "lsm330dlc_gyro_data_enable");
+
+	if (ret)
+		printk(KERN_ERR "Failed to request gpio lsm330dlc_gyro_data_enable\n");
+
+	ret = gpio_request(GPIO_ACC_INT, "lsm330dlc_accel_irq");
+
+	if (ret)
+		printk(KERN_ERR "Failed to request gpio lsm330dlc_accel_irq\n");
+
+	/* Accelerometer sensor interrupt pin initialization */
+	s3c_gpio_cfgpin(GPIO_ACC_INT, S3C_GPIO_INPUT);
+	gpio_set_value(GPIO_ACC_INT, 2);
+	s3c_gpio_setpull(GPIO_ACC_INT, S3C_GPIO_PULL_NONE);
+	s5p_gpio_set_drvstr(GPIO_ACC_INT, S5P_GPIO_DRVSTR_LV1);
+	i2c_devs1[0].irq = gpio_to_irq(GPIO_ACC_INT);
+
+	/* Gyro sensor interrupt pin initialization */
+	s3c_gpio_cfgpin(GPIO_GYRO_INT, S3C_GPIO_INPUT);
+	gpio_set_value(GPIO_GYRO_INT, 2);
+	s3c_gpio_setpull(GPIO_GYRO_INT, S3C_GPIO_PULL_NONE);
+	s5p_gpio_set_drvstr(GPIO_GYRO_INT, S5P_GPIO_DRVSTR_LV1);
+	i2c_devs1[1].irq = gpio_to_irq(GPIO_GYRO_INT);
+
+	/* Gyro sensor data enable pin initialization */
+	s3c_gpio_cfgpin(GPIO_GYRO_DE, S3C_GPIO_OUTPUT);
+	gpio_set_value(GPIO_GYRO_DE, 0);
+	s3c_gpio_setpull(GPIO_GYRO_DE, S3C_GPIO_PULL_DOWN);
+	s5p_gpio_set_drvstr(GPIO_GYRO_DE, S5P_GPIO_DRVSTR_LV1);
+}
+
+/* Magnetic (MSEMSE) Sensor */
+static struct i2c_gpio_platform_data gpio_i2c_msense = {
+	.sda_pin = GPIO_MSENSOR_SDA_18V,
+	.scl_pin = GPIO_MSENSOR_SCL_18V,
+	.udelay = 2, /* 250KHz */
+};
+
+static struct platform_device device_i2c_msense = {
+	.name = "i2c-gpio",
+	.id = I2C_MSENSE,
+	.dev.platform_data = &gpio_i2c_msense,
+};
+
+static struct akm8975_platform_data akm8975_pdata = {
+	.gpio_data_ready_int = GPIO_MSENSOR_INT,
+};
+
+static struct i2c_board_info i2c_devs_msense_ak8975[] __initdata = {
+	{
+		I2C_BOARD_INFO("ak8975", 0x0C),
+		.platform_data = &akm8975_pdata,
+	},
+};
+
+static void ak8975c_gpio_init(void)
+{
+	int ret = gpio_request(GPIO_MSENSOR_INT, "gpio_akm_int");
+
+	printk(KERN_INFO "%s\n", __func__);
+
+	if (ret)
+		printk(KERN_ERR "Failed to request gpio akm_int.\n");
+
+	s5p_register_gpio_interrupt(GPIO_MSENSOR_INT);
+	s3c_gpio_setpull(GPIO_MSENSOR_INT, S3C_GPIO_PULL_DOWN);
+	s3c_gpio_cfgpin(GPIO_MSENSOR_INT, S3C_GPIO_SFN(0xF));
+	i2c_devs_msense_ak8975[0].irq = gpio_to_irq(GPIO_MSENSOR_INT);
+}
+
+static struct akm8963_platform_data akm8963_pdata = {
+	.gpio_data_ready_int = GPIO_MSENSOR_INT,
+	.layout = 1,
+	.outbit = 1,
+	.gpio_RST = GPIO_MSENSE_RST_N,
+};
+
+static struct i2c_board_info i2c_devs_msense_ak8963[] __initdata = {
+	{
+		I2C_BOARD_INFO("ak8963", 0x0C),
+		.platform_data = &akm8963_pdata,
+	},
+};
+
+static int ak8963c_gpio_init(void)
+{
+	int ret = gpio_request(GPIO_MSENSOR_INT, "gpio_akm_int");
+
+	pr_info("%s\n", __func__);
+
+	if (ret) {
+		pr_err("%s, Failed to request gpio akm_int.(%d)\n",
+			__func__, ret);
+		return ret;
+	}
+
+	s3c_gpio_cfgpin(GPIO_MSENSE_RST_N, S3C_GPIO_OUTPUT);
+	gpio_set_value(GPIO_MSENSE_RST_N, 1);
+	s3c_gpio_setpull(GPIO_MSENSE_RST_N, S3C_GPIO_PULL_NONE);
+
+	s5p_register_gpio_interrupt(GPIO_MSENSOR_INT);
+	s3c_gpio_setpull(GPIO_MSENSOR_INT, S3C_GPIO_PULL_DOWN);
+	s3c_gpio_cfgpin(GPIO_MSENSOR_INT, S3C_GPIO_SFN(0xF));
+	i2c_devs_msense_ak8963[0].irq = gpio_to_irq(GPIO_MSENSOR_INT);
+
+	return ret;
+}
+
+/* Proximity & Light Sensor */
+static int proximity_leda_on(bool enable)
+{
+	struct regulator *regulator;
+	DEFINE_MUTEX(lock);
+	int ret = 0;
+
+	pr_info("%s, enable = %d\n", __func__, enable);
+	mutex_lock(&lock);
+
+	regulator = regulator_get(NULL, "led_a_2.8v");
+	WARN(IS_ERR_OR_NULL(regulator), "%s cannot get regulator\n", __func__);
+	if (IS_ERR_OR_NULL(regulator)) {
+		regulator = NULL;
+		ret = -ENODEV;
+		goto leda_out;
+	}
+
+	if (regulator_is_enabled(regulator))
+		regulator_force_disable(regulator);
+
+	if (enable)
+		regulator_enable(regulator);
+
+leda_out:
+	if (regulator)
+		regulator_put(regulator);
+	mutex_unlock(&lock);
+	return ret;
+}
+
+
+/* I2C GPIO: PS_ALS (PSENSE) */
+static struct i2c_gpio_platform_data gpio_i2c_psense_cm36651 = {
+	.sda_pin = GPIO_RGB_SDA_1_8V,
+	.scl_pin = GPIO_RGB_SCL_1_8V,
+	.udelay = 2, /* 250KHz */
+};
+
+static struct platform_device device_i2c_psense_cm36651 = {
+	.name = "i2c-gpio",
+	.id = I2C_PSENSE,
+	.dev.platform_data = &gpio_i2c_psense_cm36651,
+};
+
+static u8 proximity_get_threshold(void)
+{
+	u8 new_threshold = 9;
+
+	if (system_rev == 0x0c)
+		new_threshold = 75;
+
+	return new_threshold;
+}
+
+static struct cm36651_platform_data cm36651_pdata = {
+	.cm36651_led_on = proximity_leda_on,
+	.cm36651_get_threshold = proximity_get_threshold,
+	.irq = GPIO_PS_ALS_INT,
+};
+
+static struct i2c_board_info i2c_devs_psense_cm36651[] __initdata = {
+	{
+		I2C_BOARD_INFO("cm36651", (0x30 >> 1)),
+		.platform_data = &cm36651_pdata,
+	},
+};
+
+/* I2C GPIO: PS_ALS (PSENSE) */
+static struct i2c_gpio_platform_data gpio_i2c_psense_gp2a = {
+	.sda_pin = EXYNOS4_GPF0(0),	/* GPIO_PS_ALS_SDA_28V, */
+	.scl_pin = EXYNOS4_GPF0(1),	/* GPIO_PS_ALS_SCL_28V, */
+	.udelay = 2, /* 250KHz */
+};
+
+static struct platform_device device_i2c_psense_gp2a = {
+	.name = "i2c-gpio",
+	.id = I2C_PSENSE,
+	.dev.platform_data = &gpio_i2c_psense_gp2a,
+};
+
+static unsigned long gp2a_get_threshold(void)
+{
+	int new_threshold = 7; /* LTH value */
+
+	if (system_rev != 0x0c)
+		new_threshold = 260;
+
+	return new_threshold;
+}
+
+static struct gp2a_platform_data gp2a_pdata = {
+	.gp2a_led_on	= proximity_leda_on,
+	.gp2a_get_threshold = gp2a_get_threshold,
+	.p_out = GPIO_PS_ALS_INT,
+};
+
+static struct platform_device opt_gp2a = {
+	.name = "gp2a-opt",
+	.id = -1,
+	.dev = {
+		.platform_data = &gp2a_pdata,
+	},
+};
+
+static struct i2c_board_info i2c_devs_psense_gp2a[] __initdata = {
+	{
+		I2C_BOARD_INFO("gp2a", (0x72 >> 1)),
+	},
+};
+
+static struct jack_platform_data midas_jack_data = {
+	.usb_online		= 0,
+	.charger_online	= 0,
+	.hdmi_online	= 0,
+	.earjack_online	= 0,
+	.earkey_online	= 0,
+	.ums_online		= -1,
+	.cdrom_online	= -1,
+	.jig_online		= -1,
+	.host_online	= 0,
+};
+
+static struct platform_device midas_jack = {
+	.name		= "jack",
+	.id			= -1,
+	.dev		= {
+		.platform_data = &midas_jack_data,
+	},
+};
+
+#if defined(CONFIG_ARM_EXYNOS4_BUS_DEVFREQ)
+static struct exynos4_bus_platdata devfreq_bus_pdata = {
+	.threshold = {
+		.upthreshold = 90,
+		.downdifferential = 10,
+	},
+	.polling_ms = 50,
+};
+static struct platform_device devfreq_busfreq = {
+	.name		= "exynos4412-busfreq",
+	.id		= -1,
+	.dev		= {
+		.platform_data = &devfreq_bus_pdata,
+	},
+};
+#endif
+
+#if defined(CONFIG_ARM_EXYNOS4_DISPLAY_DEVFREQ)
+static struct platform_device devfreq_display = {
+	.name		= "exynos4412-display",
+	.id		= -1,
+};
+#endif
+
+/* Uart Select */
+static void midas_set_uart_switch(int path)
+{
+	int gpio;
+
+	gpio = EXYNOS4_GPF2(3);
+	gpio_request(gpio, "UART_SEL");
+
+	/* gpio_high == AP */
+	if (path == UART_SW_PATH_AP)
+		gpio_set_value(gpio, GPIO_LEVEL_HIGH);
+	else if (path == UART_SW_PATH_CP)
+		gpio_set_value(gpio, GPIO_LEVEL_LOW);
+
+	gpio_free(gpio);
+	return;
+}
+
+static int midas_get_uart_switch(void)
+{
+	int val;
+	int gpio;
+
+	gpio = EXYNOS4_GPF2(3);
+	gpio_request(gpio, "UART_SEL");
+	val = gpio_get_value(gpio);
+	gpio_free(gpio);
+
+	/* gpio_high == AP */
+	if (val == GPIO_LEVEL_HIGH)
+		return UART_SW_PATH_AP;
+	else if (val == GPIO_LEVEL_LOW)
+		return UART_SW_PATH_CP;
+	else
+		return UART_SW_PATH_NA;
+}
+
+static struct uart_select_platform_data midas_uart_select_data = {
+	.set_uart_switch	= midas_set_uart_switch,
+	.get_uart_switch	= midas_get_uart_switch,
+};
+
+static struct platform_device midas_uart_select = {
+	.name			= "uart-select",
+	.id			= -1,
+	.dev			= {
+		.platform_data	= &midas_uart_select_data,
+	},
+};
+#ifdef CONFIG_INPUT_SECBRIDGE
+/*============================================================
+sec-input-bridge
+/*============================================================*/
+static const struct sec_input_bridge_mkey redwood_appslog_mkey_map[] = {
+	{ .type = EV_KEY , .code = KEY_VOLUMEUP			},
+	{ .type = EV_KEY , .code = KEY_VOLUMEDOWN			},
+	{ .type = EV_KEY , .code = KEY_VOLUMEUP			},
+	{ .type = EV_KEY , .code = KEY_VOLUMEDOWN			},
+	{ .type = EV_KEY , .code = KEY_POWER				},
+	{ .type = EV_KEY , .code = KEY_VOLUMEDOWN			},
+	{ .type = EV_KEY , .code = KEY_VOLUMEUP			},
+	{ .type = EV_KEY , .code = KEY_POWER				},
+};
+
+static const struct sec_input_bridge_mmap redwood_mmap[] = {
+	{
+		.mkey_map = redwood_appslog_mkey_map,
+		.num_mkey = ARRAY_SIZE(redwood_appslog_mkey_map),
+		.uevent_env_str = "APPS_LOG",
+		.enable_uevent = 1,
+		.uevent_action = KOBJ_CHANGE,
+		.uevent_env_value = "ON",
+		},
+};
+
+static struct sec_input_bridge_platform_data redwood_input_bridge_data = {
+	.mmap = redwood_mmap,
+	.num_map = ARRAY_SIZE(redwood_mmap),
+	/* .lcd_warning_func = lcd_warning_function,*/
+};
+
+static struct platform_device redwood_input_bridge = {
+	.name	= "samsung_input_bridge",
+	.id	= -1,
+	.dev	= {
+		.platform_data = &redwood_input_bridge_data,
+			},
+};
+#endif
+
+static struct platform_device *slp_midas_devices[] __initdata = {
+	/* Samsung Power Domain */
+	&exynos4_device_pd[PD_MFC],
+	&exynos4_device_pd[PD_G3D],
+	&exynos4_device_pd[PD_LCD0],
+	&exynos4_device_pd[PD_CAM],
+	&exynos4_device_pd[PD_TV],
+	&exynos4_device_pd[PD_GPS],
+	&exynos4_device_pd[PD_GPS_ALIVE],
+	&exynos4_device_pd[PD_ISP],
+
+	&s3c_device_wdt,
+	&s3c_device_rtc,
+	&s3c_device_i2c0,	/* PQ_LTE only: 8M CAM */
+	&s3c_device_i2c1,	/* Gyro/Acc */
+	/* i2c2: used by GPS UART */
+	&s3c_device_i2c3,	/* Meltas TSP */
+	/* i2c4: NC(PQ) / codec: wm1811 (PQ rev01) / Modem(PQ LTE) */
+	&s3c_device_i2c4,
+	/* i2c5: NC(PQ) / Modem(PQ LTE) */
+	&s3c_device_i2c7,	/* MAX77686 PMIC */
+#ifdef CONFIG_MACH_SLP_PQ_LTE
+	&device_i2c_3_touch,	/* PQ_LTE only: Meltas Touchkey */
+#endif
+#ifdef CONFIG_I2C_SI4705
+	&device_i2c_fm_radio,
+#endif
+	&device_i2c_if_pmic,	/* if_pmic: max77693 */
+	&device_i2c_fuel,	/* max17047-fuelgauge */
+	&device_i2c_msense, /* magnetic ak8975c */
+	&device_i2c_mhl,
+	/* TODO: SW I2C for 8M CAM of PQ (same gpio with PQ_LTE NFC) */
+	/* TODO: SW I2C for VT_CAM (GPIO_VT_CAM_SCL/SDA) */
+	/* TODO: SW I2C for ADC (GPIO_ADC_SCL/SDA) */
+	/* TODO: SW I2C for LTE of PQ_LTE (F2(4) SDA, F2(5) SCL) */
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+	&s5p_device_fimd0,
+#endif
+#ifdef CONFIG_DRM_EXYNOS_HDMI
+	&s5p_device_i2c_hdmiphy,
+	&s5p_device_hdmi,
+	&s5p_device_mixer,
+	&exynos_drm_hdmi_device,
+#endif
+	&exynos_drm_vidi_device,
+#ifdef CONFIG_DRM_EXYNOS_G2D
+	&s5p_device_fimg2d,
+#endif
+#ifdef CONFIG_DRM_EXYNOS
+	&exynos_drm_device,
+#endif
+#ifdef CONFIG_HAVE_PWM
+	&s3c_device_timer[0],
+	&s3c_device_timer[1],
+	&s3c_device_timer[2],
+	&s3c_device_timer[3],
+#endif
+
+#ifdef CONFIG_SND_SOC_WM8994
+	&vbatt_device,
+#endif
+	&samsung_asoc_dma,
+#ifndef CONFIG_SND_SOC_SAMSUNG_USE_DMA_WRAPPER
+	&samsung_asoc_idma,
+#endif
+
+#ifdef CONFIG_SND_SAMSUNG_AC97
+	&exynos_device_ac97,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_I2S
+	&exynos_device_i2s0,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_PCM
+	&exynos_device_pcm0,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_SPDIF
+	&exynos_device_spdif,
+#endif
+#if defined(CONFIG_SND_SAMSUNG_RP) || defined(CONFIG_SND_SAMSUNG_ALP)
+	&exynos_device_srp,
+#endif
+#if defined CONFIG_USB_EHCI_S5P && !defined CONFIG_LINK_DEVICE_HSIC
+	&s5p_device_ehci,
+#endif
+#if defined CONFIG_USB_OHCI_S5P && !defined CONFIG_LINK_DEVICE_HSIC
+	&s5p_device_ohci,
+#endif
+#ifdef CONFIG_USB_GADGET
+	&s3c_device_usbgadget,
+#endif
+#ifdef CONFIG_USB_G_SLP
+	&midas_slp_usb_multi,
+#endif
+#ifdef CONFIG_EXYNOS4_DEV_DWMCI
+	&exynos_device_dwmci,
+#else
+	&s3c_device_mshci,
+#endif
+	&s3c_device_hsmmc2,
+	&s3c_device_hsmmc3,
+
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+	&exynos4_device_fimc_is,
+#endif
+#ifdef CONFIG_VIDEO_FIMC
+	&s3c_device_fimc0,
+	&s3c_device_fimc1,
+	&s3c_device_fimc2,
+	&s3c_device_fimc3,
+#elif defined(CONFIG_VIDEO_SAMSUNG_S5P_FIMC)
+	&s5p_device_fimc0,
+	&s5p_device_fimc1,
+	&s5p_device_fimc2,
+	&s5p_device_fimc3,
+#endif
+#if defined(CONFIG_VIDEO_FIMC_MIPI)
+	&s3c_device_csis0,
+	&s3c_device_csis1,
+#endif
+#if defined(CONFIG_VIDEO_MFC5X) || defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+	&s5p_device_mfc,
+#endif
+#ifdef CONFIG_S5P_SYSTEM_MMU
+	&SYSMMU_PLATDEV(fimd0),
+	&SYSMMU_PLATDEV(tv),
+	&SYSMMU_PLATDEV(g2d_acp),
+	&SYSMMU_PLATDEV(mfc_l),
+	&SYSMMU_PLATDEV(mfc_r),
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_LITE
+	&exynos_device_flite0,
+	&exynos_device_flite1,
+#endif
+#ifdef CONFIG_CHARGER_MANAGER
+	&midas_charger_manager,
+#endif
+#ifdef CONFIG_S3C_ADC
+	&s3c_device_adc,
+#endif
+#if defined(CONFIG_BATTERY_SAMSUNG)
+	&samsung_device_battery,
+#endif
+#ifdef CONFIG_SENSORS_NTC_THERMISTOR
+	&midas_ncp15wb473_thermistor,
+#endif
+#ifdef CONFIG_VIDEO_JPEG_V2X
+	&s5p_device_jpeg,
+#endif
+	&redwood_keypad,
+	&midas_jack,
+	&midas_uart_select,
+	&bcm4334_bluetooth_device,
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+	&exynos_device_spi1,
+#endif
+#if defined(CONFIG_ARM_EXYNOS4_BUS_DEVFREQ)
+	&devfreq_busfreq,
+#endif
+#if defined(CONFIG_ARM_EXYNOS4_DISPLAY_DEVFREQ)
+	&devfreq_display,
+#endif
+
+#if defined(CONFIG_BUSFREQ_OPP)
+	&exynos4_busfreq,
+#endif
+
+#if defined(CONFIG_DISPFREQ_OPP)
+	&exynos4_dispfreq,
+#endif
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+	&s5p_device_tmu,
+#else
+	&exynos4_device_tmu,
+#endif
+	&host_notifier_device,
+#ifdef CONFIG_INPUT_SECBRIDGE
+	&redwood_input_bridge,
+#endif
+};
+
+static void check_hw_revision(void)
+{
+	unsigned int hwrev = system_rev & 0xff;
+
+	switch (hwrev) {
+	case REDWOOD_REV0_1_0425:
+	case REDWOOD_REV0_1_0704:
+		/*REDWOOD_REV0_1_0425:REDWOOD_UNIV_REV0.1_0425 */
+		/*REDWOOD_REV0_1_0704:REDWOOD_UNIV_REV0.1_0704*/
+		redwood_tsp_set_platdata(&mms_ts_pdata);
+		redwood_tsp_init();
+		/* VOL_UP/DOWN keys are not EXTINT. Register them. */
+		s5p_register_gpio_interrupt(GPIO_VOL_UP);
+		s5p_register_gpio_interrupt(GPIO_VOL_DOWN);
+		s5p_register_gpio_interrupt(GPIO_OK_KEY_ANDROID);
+		break;
+	default:
+		break;
+	}
+}
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+/* below temperature base on the celcius degree */
+static struct s5p_platform_tmu midas_tmu_data __initdata = {
+	.ts = {
+		.stop_1st_throttle  = 78,
+		.start_1st_throttle = 80,
+		.stop_2nd_throttle  = 87,
+		.start_2nd_throttle = 103,
+		/* temp to do tripping */
+		.start_tripping     = 110,
+		/* To protect chip,forcely kernel panic */
+		.start_emergency    = 120,
+		.stop_mem_throttle  = 80,
+		.start_mem_throttle = 85,
+	},
+	.cpufreq = {
+		.limit_1st_throttle  = 800000, /* 800MHz in KHz order */
+		.limit_2nd_throttle  = 200000, /* 200MHz in KHz order */
+	},
+	.temp_compensate = {
+		/* vdd_arm in uV for temperature compensation */
+		.arm_volt = 900000,
+		/* vdd_bus in uV for temperature compensation */
+		.bus_volt = 900000,
+		/* vdd_g3d in uV for temperature compensation */
+		.g3d_volt = 900000,
+	},
+};
+#endif
+
+/*
+ * The following initcall is already included in board_slp_pq.c
+ * If the Redwood binary is seperated from PQ kernel,
+ * maybe it will be enabled again.
+ */
+#if 0
+#ifdef CONFIG_LINK_DEVICE_HSIC
+static int __init s5p_hci_device_initcall(void)
+{
+	/*
+	 * ehcd should be probed first.
+	 * Unless device detected as fullspeed always.
+	 */
+#ifdef CONFIG_USB_EHCI_S5P
+	int ret = platform_device_register(&s5p_device_ehci);
+	if (ret)
+		return ret;
+
+	/*
+	 * Exynos AP-EVT0 can't use both USB host and device(client)
+	 * on running time, because that has critical ASIC problem
+	 * about USB PHY CLOCK. That issue was already announced by
+	 * S.SLI team (djkim@samsung.com) and already fixed it on
+	 * the new EVT1 chip (new target, system_rev != 3).
+	 * But we have many EVT0 targets (system_rev == 3)
+	 * So, to using old target(EVT0) only using by usb device mode
+	 * we added following unregister codes(disable USB Host)
+	 * by yongsul96.oh@samsung.com 20120417-SLP
+	 */
+	if (system_rev == 3) {
+		pr_warn("[USB-EHCI]AP is EVT0 type!!, unregister ehci!!!");
+		platform_device_unregister(&s5p_device_ehci);
+	}
+#endif
+#ifdef CONFIG_USB_OHCI_S5P
+	return platform_device_register(&s5p_device_ohci);
+#endif
+}
+late_initcall(s5p_hci_device_initcall);
+#endif	/* LINK_DEVICE_HSIC */
+#endif
+
+#if defined(CONFIG_S5P_MEM_CMA)
+static struct cma_region regions[] = {
+	/*
+	 * caution : do not allowed other region definitions above of drm.
+	 * drm only using region 0 for startup screen display.
+	 */
+#ifdef CONFIG_DRM_EXYNOS
+	{
+		.name = "drm",
+		.size = CONFIG_DRM_EXYNOS_MEMSIZE * SZ_1K,
+		.start = 0
+	},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_DMA
+	{
+		.name = "dma",
+		.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_DMA * SZ_1K,
+		.start = 0
+	},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC1
+	{
+		.name = "mfc1",
+		.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC1 * SZ_1K,
+		{
+			.alignment = 1 << 17,
+		},
+		.start = 0,
+	},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC0
+	{
+		.name = "mfc0",
+		.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC0 * SZ_1K,
+		{
+			.alignment = 1 << 17,
+		},
+		.start = 0,
+	},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC
+	{
+		.name = "mfc",
+		.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC * SZ_1K,
+		{
+			.alignment = 1 << 17,
+		},
+		.start = 0
+	},
+#endif
+#if !defined(CONFIG_EXYNOS_CONTENT_PATH_PROTECTION) && \
+	defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+	{
+		.name		= "b2",
+		.size		= 32 << 20,
+		{ .alignment	= 128 << 10 },
+	},
+	{
+		.name		= "b1",
+		.size		= 32 << 20,
+		{ .alignment	= 128 << 10 },
+	},
+	{
+		.name		= "fw",
+		.size		= 1 << 20,
+		{ .alignment	= 128 << 10 },
+		.start		= 0x60500000,	/* FIXME */
+	},
+#endif
+#ifdef CONFIG_AUDIO_SAMSUNG_MEMSIZE_SRP
+	{
+		.name = "srp",
+		.size = CONFIG_AUDIO_SAMSUNG_MEMSIZE_SRP * SZ_1K,
+		.start = 0,
+	},
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+	{
+		.name = "fimc_is",
+		.size = CONFIG_VIDEO_EXYNOS_MEMSIZE_FIMC_IS * SZ_1K,
+		{
+			.alignment = 1 << 26,
+		},
+		.start = 0
+	},
+#endif
+	{
+		.size = 0
+	},
+};
+
+static void __init exynos4_reserve_mem(void)
+{
+	static const char map[] __initconst =
+#ifdef CONFIG_DRM_EXYNOS
+		"exynos-drm=drm;"
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_DMA
+		"s3c-fimc.0=dma;s3c-fimc.1=dma;s3c-fimc.2=dma;s3c-fimc.3=dma;s3c-mem=dma;"
+		"exynos4210-fimc.0=dma;exynos4210-fimc.1=dma;exynos4210-fimc.2=dma;exynos4210-fimc.3=dma;"
+#endif
+#ifdef CONFIG_VIDEO_MFC5X
+		"s3c-mfc/A=mfc0,mfc-secure;"
+		"s3c-mfc/B=mfc1,mfc-normal;"
+		"s3c-mfc/AB=mfc;"
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_S5P_MFC
+		"s5p-mfc/f=fw;"
+		"s5p-mfc/a=b1;"
+		"s5p-mfc/b=b2;"
+#endif
+		"samsung-rp=srp;"
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+		"exynos4-fimc-is=fimc_is;"
+#endif
+		""
+	;
+
+	if (fbmem_start) {
+		int i = 0, drm = 0, dma = 0, mfc1 = 0, mfc0 = 0;
+		regions[drm].start = (dma_addr_t) fbmem_start;
+		for (i = 0; i < ARRAY_SIZE(regions) - 1 /* terminator */; ++i) {
+			if (strncmp(regions[i].name, "dma",
+				strlen(regions[i].name)) == 0) {
+				dma = i;
+				regions[dma].start =
+					(dma_addr_t) regions[drm].start
+					-regions[dma].size;
+			}
+			if (strncmp(regions[i].name, "mfc1",
+				strlen(regions[i].name)) == 0) {
+				mfc1 = i;
+				regions[mfc1].start =
+					(dma_addr_t) regions[dma].start
+					-regions[mfc1].size;
+			}
+			if (strncmp(regions[i].name, "mfc0",
+				strlen(regions[i].name)) == 0) {
+				mfc0 = i;
+				regions[mfc0].start =
+					(dma_addr_t) regions[mfc1].start
+					-regions[mfc0].size;
+			}
+		}
+	}
+
+	s5p_cma_region_reserve(regions, NULL, 0, map);
+}
+
+/*
+ * The following initcall is already included in board_slp_pq.c
+ * If the Redwood binary is seperated from PQ kernel,
+ * maybe it will be enabled again.
+ */
+#if 0
+#ifdef CONFIG_HIBERNATION
+static int __init exynos_set_nosave_regions(void)
+{
+	int i;
+
+	for (i = ARRAY_SIZE(regions) - 2; i >= 0 /* terminator */; i--) {
+		/*
+		 * MFC firmware region SHOULD BE saved.
+		 * If the name of region is fw, don't register to nosave regions
+		 */
+		if (strcmp(regions[i].name, "fw")) {
+			register_nosave_region_late(
+					__phys_to_pfn(regions[i].start),
+					__phys_to_pfn(regions[i].start +
+						regions[i].size));
+		}
+	}
+	return 0;
+}
+late_initcall(exynos_set_nosave_regions);
+#endif /* CONFIG_HIBERNATION */
+#endif
+#endif /* CONFIG_S5P_MEM_CMA */
+
+static void __init redwood_map_io(void)
+{
+	clk_xusbxti.rate = 24000000;
+	s5p_init_io(NULL, 0, S5P_VA_CHIPID);
+	s3c24xx_init_clocks(24000000);
+	s3c24xx_init_uarts(slp_midas_uartcfgs, ARRAY_SIZE(slp_midas_uartcfgs));
+
+#if defined(CONFIG_S5P_MEM_CMA)
+	exynos4_reserve_mem();
+#endif
+
+	/* as soon as INFORM6 is visible, sec_debug is ready to run */
+	sec_debug_init();
+}
+
+static void __init exynos_sysmmu_init(void)
+{
+	ASSIGN_SYSMMU_POWERDOMAIN(mfc_l, &exynos4_device_pd[PD_MFC].dev);
+	ASSIGN_SYSMMU_POWERDOMAIN(mfc_r, &exynos4_device_pd[PD_MFC].dev);
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+	sysmmu_set_owner(&SYSMMU_PLATDEV(fimd0).dev, &s5p_device_fimd0.dev);
+#endif
+#ifdef CONFIG_DRM_EXYNOS_HDMI
+	sysmmu_set_owner(&SYSMMU_PLATDEV(tv).dev, &s5p_device_hdmi.dev);
+#endif
+#ifdef CONFIG_DRM_EXYNOS_G2D
+	sysmmu_set_owner(&SYSMMU_PLATDEV(g2d_acp).dev, &s5p_device_fimg2d.dev);
+#endif
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC) || defined(CONFIG_VIDEO_MFC5X)
+	sysmmu_set_owner(&SYSMMU_PLATDEV(mfc_l).dev, &s5p_device_mfc.dev);
+	sysmmu_set_owner(&SYSMMU_PLATDEV(mfc_r).dev, &s5p_device_mfc.dev);
+#endif
+}
+
+/*
+ * This function disable unused clocks to remove power leakage on idle state.
+ */
+static void midas_disable_unused_clock(void)
+{
+/* Following array include the unused clock list */
+	struct __unused_clock_list {
+		char *dev_id;
+		char *con_id;
+	} clock_list[] =  {
+		{
+			/* UART Ch 4 is only dedicated for communication
+			 * with internal GPS in SoC */
+			.dev_id = "s5pv210-uart.4",
+			.con_id = "uart",
+		}, {
+			.dev_id = "s5p-qe.3",
+			.con_id = "qefimc",
+		}, {
+			.dev_id = "s5p-qe.2",
+			.con_id = "qefimc",
+		}, {
+			.dev_id = "s5p-qe.1",
+			.con_id = "qefimc",
+		},
+	};
+	struct device dev;
+	struct clk *clk;
+	char *con_id;
+	int i;
+
+	for (i = 0 ; i < ARRAY_SIZE(clock_list) ; i++) {
+		dev.init_name = clock_list[i].dev_id;
+		con_id = clock_list[i].con_id;
+
+		clk = clk_get(&dev, con_id);
+		if (IS_ERR(clk)) {
+			printk(KERN_ERR "Failed to get %s for %s\n",
+					con_id, dev.init_name);
+			continue;
+		}
+		clk_enable(clk);
+		clk_disable(clk);
+		clk_put(clk);
+	}
+}
+
+/* Use exynos4-display with DEVFREQ to control LCD refresh rate
+ * dynamically when specific power domain is turning ON/OFF.
+ */
+#if defined(CONFIG_ARM_EXYNOS4_DISPLAY_DEVFREQ) || defined(CONFIG_DISPFREQ_OPP)
+#include <linux/devfreq/exynos4_display.h>
+/* EXYNOS4 series SoC use ten power domains,
+   the last power domain is PD_MAUDIO */
+#define PD_NUMBER	(PD_MAUDIO + 1)
+static struct pm_qos_request_list exynos_display_qos[PD_NUMBER];
+static int __exynos_pd_enable(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+
+	pm_qos_update_request(&exynos_display_qos[pdev->id],
+					EXYNOS4_DISPLAY_LV_HF);
+
+	return exynos_pd_enable(dev);
+}
+
+static int __exynos_pd_disable(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+
+	pm_qos_update_request(&exynos_display_qos[pdev->id],
+					EXYNOS4_DISPLAY_LV_LF);
+
+	return exynos_pd_disable(dev);
+}
+#else
+static int __exynos_pd_enable(struct device *dev)
+{
+	return exynos_pd_enable(dev);
+}
+static int __exynos_pd_disable(struct device *dev)
+{
+	return exynos_pd_disable(dev);
+}
+#endif
+
+static void midas_exynos_display_init(void)
+{
+	unsigned int pd_list[] = { PD_MFC, PD_G3D };
+	struct device *dev;
+	struct samsung_pd_info *pdata;
+	int i, id;
+
+	for (i = 0 ; i < ARRAY_SIZE(pd_list) ; i++) {
+		id = pd_list[i];
+
+		dev = &exynos4_device_pd[id].dev;
+		pdata = dev->platform_data;
+		pdata->enable = __exynos_pd_enable;
+		pdata->disable = __exynos_pd_disable;
+
+#if defined(CONFIG_ARM_EXYNOS4_DISPLAY_DEVFREQ) || defined(CONFIG_DISPFREQ_OPP)
+		pm_qos_add_request(&exynos_display_qos[id],
+			PM_QOS_DISPLAY_FREQUENCY, EXYNOS4_DISPLAY_LV_HF);
+#endif
+	}
+}
+
+static void flash_gpio_init(void)
+{
+	/* GPIO initialize for STG5223QTR analog SW */
+	gpio_request(GPIO_CAM_SW_EN, "CAM_SW_EN");
+	gpio_direction_output(GPIO_CAM_SW_EN, 1);
+
+	gpio_request(GPIO_TORCH_EN, "TORCH_EN");
+	gpio_direction_output(GPIO_TORCH_EN, 0);
+
+	gpio_request(GPIO_TORCH_SET, "TORCH_SET");
+	gpio_direction_output(GPIO_TORCH_SET, 0);
+
+}
+
+static void __init redwood_machine_init(void)
+{
+#ifdef CONFIG_BUSFREQ_OPP
+	struct clk *ppmu_clk = NULL;
+#endif
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+	unsigned int gpio;
+	struct clk *sclk = NULL;
+	struct clk *prnt = NULL;
+	struct device *spi1_dev = &exynos_device_spi1.dev;
+#endif
+	strcpy(utsname()->nodename, machine_desc->name);
+
+	/* Workaround: bootloader needs to set GPX*PUD registers */
+	s3c_gpio_setpull(EXYNOS4_GPX2(7), S3C_GPIO_PULL_NONE);
+
+#if defined(CONFIG_EXYNOS_DEV_PD) && defined(CONFIG_PM_RUNTIME)
+	exynos_pd_disable(&exynos4_device_pd[PD_MFC].dev);
+
+	/*
+	 * FIXME: now runtime pm of mali driver isn't worked yet.
+	 * if the runtime pm is worked fine, then remove this call.
+	 */
+	exynos_pd_enable(&exynos4_device_pd[PD_G3D].dev);
+
+	/* PD_LCD0 : The child devie control LCD0 power domain
+	 * because LCD should be always enabled during kernel booting.
+	 * So, LCD power domain can't turn off when machine initialization.*/
+	exynos_pd_disable(&exynos4_device_pd[PD_CAM].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_TV].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_GPS].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_GPS_ALIVE].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_ISP].dev);
+#elif defined(CONFIG_EXYNOS_DEV_PD)
+	/*
+	 * These power domains should be always on
+	 * without runtime pm support.
+	 */
+	exynos_pd_enable(&exynos4_device_pd[PD_MFC].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_G3D].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_LCD0].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_CAM].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_TV].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_GPS].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_GPS_ALIVE].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_ISP].dev);
+#endif
+
+	/* initialise the gpios */
+	midas_config_gpio_table();
+	exynos4_sleep_gpio_table_set = midas_config_sleep_gpio_table;
+
+	s3c_i2c0_set_platdata(NULL);
+	i2c_register_board_info(0, i2c_devs0, ARRAY_SIZE(i2c_devs0));
+
+	/* LSM330DLC (Gyro & Accelerometer Sensor) */
+	s3c_i2c1_set_platdata(NULL);
+	lsm331dlc_gpio_init();
+	i2c_register_board_info(1, i2c_devs1, ARRAY_SIZE(i2c_devs1));
+
+	s3c_i2c3_set_platdata(NULL);
+
+	s3c_i2c4_set_platdata(NULL);
+	i2c_register_board_info(4, i2c_devs4, ARRAY_SIZE(i2c_devs4));
+
+	s3c_i2c7_set_platdata(NULL);
+	s3c_i2c7_set_platdata(NULL);
+
+	/* Workaround for repeated interrupts from MAX77686 during sleep */
+	if (hwrevision(0))
+		exynos4_max77686_info.wakeup = 0;
+
+	i2c_register_board_info(7, i2c_devs7, ARRAY_SIZE(i2c_devs7));
+
+	GPIO_I2C_PIN_SETUP(if_pmic);
+	midas_power_set_muic_pdata(NULL, EXYNOS4_GPX0(7));
+	i2c_register_board_info(I2C_IF_PMIC, i2c_devs_if_pmic,
+				ARRAY_SIZE(i2c_devs_if_pmic));
+
+	/* NFC */
+#ifdef CONFIG_MACH_REDWOOD
+	if (hwrevision(1) || system_rev >= 0x7) {
+		s3c_i2c5_set_platdata(NULL);
+		platform_device_register(&s3c_device_i2c5);
+		midas_nfc_init(s3c_device_i2c5.id);
+	} else {
+		GPIO_I2C_PIN_SETUP(nfc);
+		platform_device_register(&device_i2c_nfc);
+		midas_nfc_init(device_i2c_nfc.id);
+	}
+#else
+	/* CONFIG_MACH_SLP_PQ_LTE */
+	GPIO_I2C_PIN_SETUP(nfc);
+	platform_device_register(&device_i2c_nfc);
+	midas_nfc_init(device_i2c_nfc.id);
+#endif
+
+	/* MHL / MHL_D */
+	GPIO_I2C_PIN_SETUP(mhl);
+
+#ifdef CONFIG_MACH_REDWOOD
+	if (hwrevision(0)) {
+		GPIO_I2C_PIN_SETUP(mhl_d);
+		platform_device_register(&device_i2c_mhl_d);
+	} else {
+		/* nothing */
+	}
+#else
+	GPIO_I2C_PIN_SETUP(mhl_d);
+	platform_device_register(&device_i2c_mhl_d);
+#endif
+
+	/* Magnetic Sensor */
+	if (system_rev == 0x0c) {
+		ak8975c_gpio_init();
+
+		GPIO_I2C_PIN_SETUP(msense);
+		i2c_register_board_info(I2C_MSENSE, i2c_devs_msense_ak8975,
+					ARRAY_SIZE(i2c_devs_msense_ak8975));
+	} else {
+		ak8963c_gpio_init();
+
+		GPIO_I2C_PIN_SETUP(msense);
+		i2c_register_board_info(I2C_MSENSE, i2c_devs_msense_ak8963,
+					ARRAY_SIZE(i2c_devs_msense_ak8963));
+	}
+
+	/* Proximity & Light Sensor */
+	if (system_rev == 0x0C) {
+		GPIO_I2C_PIN_SETUP(psense_cm36651);
+		i2c_register_board_info(I2C_PSENSE, i2c_devs_psense_cm36651,
+					ARRAY_SIZE(i2c_devs_psense_cm36651));
+
+		platform_device_register(&device_i2c_psense_cm36651);
+	} else {
+		GPIO_I2C_PIN_SETUP(psense_gp2a);
+		i2c_register_board_info(I2C_PSENSE, i2c_devs_psense_gp2a,
+					ARRAY_SIZE(i2c_devs_psense_gp2a));
+
+		platform_device_register(&device_i2c_psense_gp2a);
+		platform_device_register(&opt_gp2a);
+	}
+
+	/* GPS HW driver */
+	if (system_rev == REDWOOD_REV0_1_0425)
+		platform_device_register(&midas_bcm47511);
+	else
+		platform_device_register(&midas_bcm4752);
+
+#ifdef CONFIG_USB_EHCI_S5P
+	smdk4212_ehci_init();
+#endif
+#ifdef CONFIG_USB_OHCI_S5P
+	smdk4212_ohci_init();
+#endif
+#ifdef CONFIG_USB_GADGET
+	smdk4212_usbgadget_init();
+#endif
+
+#ifdef CONFIG_MACH_SLP_PQ_LTE
+	GPIO_I2C_PIN_SETUP(3_touch);
+	gpio_request(GPIO_3_TOUCH_INT, "3_TOUCH_INT");
+	s5p_register_gpio_interrupt(GPIO_3_TOUCH_INT);
+	i2c_register_board_info(I2C_3_TOUCH, i2c_devs_3_touch,
+				ARRAY_SIZE(i2c_devs_3_touch));
+#endif
+
+	GPIO_I2C_PIN_SETUP(fuel);
+	i2c_register_board_info(I2C_FUEL, i2c_devs_fuel,
+				ARRAY_SIZE(i2c_devs_fuel));
+
+#ifdef CONFIG_I2C_SI4705
+	GPIO_I2C_PIN_SETUP(fm_radio);
+	pq_si4705_init();
+	i2c_register_board_info(I2C_FM_RADIO, i2c_devs_fm_radio,
+				ARRAY_SIZE(i2c_devs_fm_radio));
+#endif
+#ifdef CONFIG_EXYNOS4_DEV_DWMCI
+	exynos_dwmci_set_platdata(&exynos_dwmci_pdata, 0);
+#else
+	s3c_mshci_set_platdata(&exynos4_mshc_pdata);
+#endif
+	s3c_sdhci2_set_platdata(&slp_midas_hsmmc2_pdata);
+	s3c_sdhci3_set_platdata(&slp_midas_hsmmc3_pdata);
+
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+	exynos4_fimc_is_set_platdata(NULL);
+	exynos4_device_fimc_is.dev.parent = &exynos4_device_pd[PD_ISP].dev;
+#endif
+
+	/* FIMC */
+	midas_camera_init();
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+	/*
+	 * platform device name for fimd driver should be changed
+	 * because we can get source clock with this name.
+	 *
+	 * P.S. refer to sclk_fimd definition of clock-exynos4.c
+	 */
+	s5p_fb_setname(0, "s3cfb");
+	s5p_device_fimd0.dev.parent = &exynos4_device_pd[PD_LCD0].dev;
+#ifdef CONFIG_S5P_MIPI_DSI2
+	s5p_device_mipi_dsim0.dev.parent = &exynos4_device_pd[PD_LCD0].dev;
+#endif
+#endif
+
+	setup_charger_manager(&midas_charger_g_desc);
+
+#ifdef CONFIG_VIDEO_JPEG_V2X
+#ifdef CONFIG_EXYNOS_DEV_PD
+	s5p_device_jpeg.dev.parent = &exynos4_device_pd[PD_CAM].dev;
+	exynos4_jpeg_setup_clock(&s5p_device_jpeg.dev, 160000000);
+#endif
+#endif
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+	s5p_tmu_set_platdata(&midas_tmu_data);
+#endif
+
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+	dev_set_name(&s5p_device_mfc.dev, "s3c-mfc");
+	clk_add_alias("mfc", "s5p-mfc", "mfc", &s5p_device_mfc.dev);
+	s5p_mfc_setname(&s5p_device_mfc, "s5p-mfc");
+#endif
+
+#if defined(CONFIG_VIDEO_MFC5X) || defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+#ifdef CONFIG_EXYNOS_DEV_PD
+	s5p_device_mfc.dev.parent = &exynos4_device_pd[PD_MFC].dev;
+#endif
+	exynos4_mfc_setup_clock(&s5p_device_mfc.dev, 267 * MHZ);
+#endif
+
+	exynos_sysmmu_init();
+
+	/* Disable unused clocks to remove power leakage on idle state */
+	midas_disable_unused_clock();
+
+	/* exynos4-display with DEVFREQ */
+	midas_exynos_display_init();
+
+#ifdef CONFIG_SENSORS_NTC_THERMISTOR
+	/* PQ Rev00 doesn't have ntc on board */
+	if (!hwrevision(0))
+		adc_ntc_init(2); /* Channel 2 */
+#endif
+
+	platform_add_devices(slp_midas_devices, ARRAY_SIZE(slp_midas_devices));
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+	redwood_fb_init();
+#endif
+#ifdef CONFIG_DRM_EXYNOS_HDMI
+	redwood_tv_init();
+#endif
+
+	brcm_wlan_init();
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+	sclk = clk_get(spi1_dev, "dout_spi1");
+	if (IS_ERR(sclk))
+		dev_err(spi1_dev, "failed to get sclk for SPI-1\n");
+	prnt = clk_get(spi1_dev, "mout_mpll_user");
+	if (IS_ERR(prnt))
+		dev_err(spi1_dev, "failed to get prnt\n");
+	if (clk_set_parent(sclk, prnt))
+		printk(KERN_ERR "Unable to set parent %s of clock %s.\n",
+		       prnt->name, sclk->name);
+
+	clk_set_rate(sclk, 800 * 1000 * 1000);
+	clk_put(sclk);
+	clk_put(prnt);
+
+	if (!gpio_request(EXYNOS4_GPB(5), "SPI_CS1")) {
+		gpio_direction_output(EXYNOS4_GPB(5), 1);
+		s3c_gpio_cfgpin(EXYNOS4_GPB(5), S3C_GPIO_SFN(1));
+		s3c_gpio_setpull(EXYNOS4_GPB(5), S3C_GPIO_PULL_UP);
+		exynos_spi_set_info(1, EXYNOS_SPI_SRCCLK_SCLK,
+				     ARRAY_SIZE(spi1_csi));
+	}
+
+	for (gpio = EXYNOS4_GPB(4); gpio < EXYNOS4_GPB(8); gpio++)
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV3);
+
+	spi_register_board_info(spi1_board_info, ARRAY_SIZE(spi1_board_info));
+#endif
+#ifdef CONFIG_BUSFREQ_OPP
+	dev_add(&busfreq, &exynos4_busfreq.dev);
+
+	/* PPMUs using for cpufreq get clk from clk_list */
+	ppmu_clk = clk_get(NULL, "ppmudmc0");
+	if (IS_ERR(ppmu_clk))
+		printk(KERN_ERR "failed to get ppmu_dmc0\n");
+	clk_enable(ppmu_clk);
+	clk_put(ppmu_clk);
+
+	ppmu_clk = clk_get(NULL, "ppmudmc1");
+	if (IS_ERR(ppmu_clk))
+		printk(KERN_ERR "failed to get ppmu_dmc1\n");
+	clk_enable(ppmu_clk);
+	clk_put(ppmu_clk);
+
+	ppmu_clk = clk_get(NULL, "ppmucpu");
+	if (IS_ERR(ppmu_clk))
+		printk(KERN_ERR "failed to get ppmu_cpu\n");
+	clk_enable(ppmu_clk);
+	clk_put(ppmu_clk);
+
+	ppmu_init(&exynos_ppmu[PPMU_DMC0], &exynos4_busfreq.dev);
+	ppmu_init(&exynos_ppmu[PPMU_DMC1], &exynos4_busfreq.dev);
+	ppmu_init(&exynos_ppmu[PPMU_CPU], &exynos4_busfreq.dev);
+#endif
+
+	flash_gpio_init();
+
+	check_hw_revision();
+}
+
+MACHINE_START(REDWOOD, "REDWOOD")
+	.boot_params	= S5P_PA_SDRAM + 0x100,
+	.init_irq	= exynos4_init_irq,
+	.map_io = redwood_map_io,
+	.init_machine	= redwood_machine_init,
+	.timer		= &exynos4_timer,
+MACHINE_END
diff -Naur ./arch/arm/mach-exynos/board-slp-midas.c ../../HK_JB/Kernel/arch/arm/mach-exynos/board-slp-midas.c
--- ./arch/arm/mach-exynos/board-slp-midas.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/board-slp-midas.c	2012-11-22 09:13:14.000000000 +0100
@@ -0,0 +1,1476 @@
+/*
+ * linux/arch/arm/mach-exynos/board-slp-midas.c
+ *
+ * Copyright (c) 2011 Samsung Electronics Co., Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/platform_device.h>
+#include <linux/serial_core.h>
+#include <linux/spi/spi.h>
+#include <linux/gpio.h>
+#include <linux/gpio_keys.h>
+#include <linux/i2c.h>
+#include <linux/i2c-gpio.h>
+#include <linux/i2c/mms114.h>
+#include <linux/mmc/host.h>
+#include <linux/regulator/machine.h>
+#include <linux/regulator/fixed.h>
+#include <linux/mfd/wm8994/pdata.h>
+#include <linux/lcd.h>
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/input.h>
+#include <linux/cma.h>
+#include <linux/jack.h>
+#include <linux/utsname.h>
+#ifdef CONFIG_MFD_MAX8997
+#include <linux/mfd/max8997.h>
+#include <linux/mfd/max8997-private.h>
+#endif
+#ifdef CONFIG_MFD_MAX77693
+#include <linux/mfd/max77693.h>
+#include <linux/mfd/max77693-private.h>
+#include <linux/leds-max77693.h>
+#endif
+#include <linux/battery/max17047_fuelgauge.h>
+#include <linux/power/max17042_battery.h>
+#include <linux/power/charger-manager.h>
+#include <linux/devfreq/exynos4_bus.h>
+#include <drm/exynos_drm.h>
+
+#include <asm/mach/arch.h>
+#include <asm/mach-types.h>
+
+#include <plat/regs-serial.h>
+#include <plat/exynos4.h>
+#include <plat/clock.h>
+#include <plat/cpu.h>
+#include <plat/devs.h>
+#include <plat/gpio-cfg.h>
+#include <plat/iic.h>
+#include <plat/pd.h>
+#include <plat/sdhci.h>
+#include <plat/mshci.h>
+#include <plat/ehci.h>
+#include <plat/usbgadget.h>
+#include <plat/s3c64xx-spi.h>
+#include <plat/csis.h>
+#include <plat/udc-hs.h>
+#include <plat/regs-fb.h>
+#include <plat/fb-core.h>
+#include <plat/mipi_dsim2.h>
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC) || defined(CONFIG_VIDEO_MFC5X)
+#include <plat/s5p-mfc.h>
+#endif
+#include <media/exynos_fimc_is.h>
+
+#include <mach/map.h>
+#include <mach/spi-clocks.h>
+
+#ifdef CONFIG_SND_SOC_WM8994
+#include <linux/mfd/wm8994/pdata.h>
+#include <linux/mfd/wm8994/gpio.h>
+#endif
+
+#include <mach/midas-power.h>
+#include <mach/midas-tsp.h>
+
+#include <mach/bcm47511.h>
+
+#include <mach/regs-pmu.h>
+
+#include <../../../drivers/video/samsung/s3cfb.h>
+#include <mach/dev-sysmmu.h>
+
+#include "board-mobile.h"
+
+/* Following are default values for UCON, ULCON and UFCON UART registers */
+#define SLP_MIDAS_UCON_DEFAULT	(S3C2410_UCON_TXILEVEL |	\
+				 S3C2410_UCON_RXILEVEL |	\
+				 S3C2410_UCON_TXIRQMODE |	\
+				 S3C2410_UCON_RXIRQMODE |	\
+				 S3C2410_UCON_RXFIFO_TOI |	\
+				 S3C2443_UCON_RXERR_IRQEN)
+
+#define SLP_MIDAS_ULCON_DEFAULT	S3C2410_LCON_CS8
+
+#define SLP_MIDAS_UFCON_DEFAULT	(S3C2410_UFCON_FIFOMODE |	\
+				 S5PV210_UFCON_TXTRIG4 |	\
+				 S5PV210_UFCON_RXTRIG4)
+
+static struct s3c2410_uartcfg slp_midas_uartcfgs[] __initdata = {
+	[0] = {
+		.hwport		= 0,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+	[1] = {
+		.hwport		= 1,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+	[2] = {
+		.hwport		= 2,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+	[3] = {
+		.hwport		= 3,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+};
+
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+static struct s3c64xx_spi_csinfo spi1_csi[] = {
+	[0] = {
+		.line = EXYNOS4_GPB(5),
+		.set_level = gpio_set_value,
+		.fb_delay = 0x2,
+	},
+};
+
+static struct spi_board_info spi1_board_info[] __initdata = {
+	{
+		.modalias = "s5c73m3_spi",
+		.platform_data = NULL,
+		.max_speed_hz = 50000000,
+		.bus_num = 1,
+		.chip_select = 0,
+		.mode = SPI_MODE_0,
+		.controller_data = &spi1_csi[0],
+	}
+};
+#endif
+
+#ifdef CONFIG_S3C_DEV_HSMMC
+static struct s3c_sdhci_platdata slp_midas_hsmmc0_pdata __initdata = {
+	.cd_type		= S3C_MSHCI_CD_PERMANENT,
+	.clk_type		= S3C_SDHCI_CLK_DIV_EXTERNAL,
+#ifdef CONFIG_EXYNOS4_SDHCI_CH0_8BIT
+	.max_width		= 8,
+	.host_caps		= MMC_CAP_8_BIT_DATA,
+#endif
+};
+#endif
+
+#ifdef CONFIG_S3C_DEV_HSMMC1
+static struct s3c_sdhci_platdata slp_midas_hsmmc1_pdata __initdata = {
+	.cd_type		= S3C_SDHCI_CD_INTERNAL,
+	.clk_type		= S3C_SDHCI_CLK_DIV_EXTERNAL,
+};
+#endif
+
+#ifdef CONFIG_S3C_DEV_HSMMC2
+static struct s3c_sdhci_platdata slp_midas_hsmmc2_pdata __initdata = {
+	.cd_type                = S3C_SDHCI_CD_GPIO,
+	.ext_cd_gpio            = EXYNOS4_GPX3(4),
+	.ext_cd_gpio_invert	= true,
+	.clk_type		= S3C_SDHCI_CLK_DIV_EXTERNAL,
+#ifdef CONFIG_EXYNOS4_SDHCI_CH2_8BIT
+	.max_width		= 8,
+	.host_caps		= MMC_CAP_8_BIT_DATA,
+#endif
+};
+#endif
+
+static DEFINE_MUTEX(notify_lock);
+
+#define DEFINE_MMC_CARD_NOTIFIER(num) \
+static void (*hsmmc##num##_notify_func)(struct platform_device *, int state); \
+static int ext_cd_init_hsmmc##num(void (*notify_func)( \
+			struct platform_device *, int state)) \
+{ \
+	mutex_lock(&notify_lock); \
+	WARN_ON(hsmmc##num##_notify_func); \
+	hsmmc##num##_notify_func = notify_func; \
+	mutex_unlock(&notify_lock); \
+	return 0; \
+} \
+static int ext_cd_cleanup_hsmmc##num(void (*notify_func)( \
+			struct platform_device *, int state)) \
+{ \
+	mutex_lock(&notify_lock); \
+	WARN_ON(hsmmc##num##_notify_func != notify_func); \
+	hsmmc##num##_notify_func = NULL; \
+	mutex_unlock(&notify_lock); \
+	return 0; \
+}
+
+#ifdef CONFIG_S3C_DEV_HSMMC3
+	DEFINE_MMC_CARD_NOTIFIER(3)
+#endif
+
+/*
+ * call this when you need sd stack to recognize insertion or removal of card
+ * that can't be told by SDHCI regs
+ */
+
+void mmc_force_presence_change(struct platform_device *pdev)
+{
+	void (*notify_func)(struct platform_device *, int state) = NULL;
+	mutex_lock(&notify_lock);
+#ifdef CONFIG_S3C_DEV_HSMMC3
+	if (pdev == &s3c_device_hsmmc3)
+		notify_func = hsmmc3_notify_func;
+#endif
+	if (notify_func)
+		notify_func(pdev, 1);
+	else
+		pr_warn("%s: called for device with no notifier\n", __func__);
+	mutex_unlock(&notify_lock);
+}
+EXPORT_SYMBOL_GPL(mmc_force_presence_change);
+
+#ifdef CONFIG_S3C_DEV_HSMMC3
+static struct s3c_sdhci_platdata slp_midas_hsmmc3_pdata __initdata = {
+/* new code for brm4334 */
+	.cd_type	= S3C_SDHCI_CD_EXTERNAL,
+	.clk_type	= S3C_SDHCI_CLK_DIV_EXTERNAL,
+	.pm_flags	= S3C_SDHCI_PM_IGNORE_SUSPEND_RESUME,
+	.ext_cd_init	= ext_cd_init_hsmmc3,
+	.ext_cd_cleanup	= ext_cd_cleanup_hsmmc3,
+};
+#endif
+
+#ifdef CONFIG_EXYNOS4_DEV_MSHC
+static struct s3c_mshci_platdata exynos4_mshc_pdata __initdata = {
+	.cd_type                = S3C_MSHCI_CD_PERMANENT,
+	.fifo_depth		= 0x80,
+#if defined(CONFIG_EXYNOS4_MSHC_8BIT) && \
+	defined(CONFIG_EXYNOS4_MSHC_DDR)
+	.max_width              = 8,
+	.host_caps              = MMC_CAP_8_BIT_DATA | MMC_CAP_1_8V_DDR |
+				  MMC_CAP_UHS_DDR50,
+#elif defined(CONFIG_EXYNOS4_MSHC_8BIT)
+	.max_width		= 8,
+	.host_caps		= MMC_CAP_8_BIT_DATA,
+#elif defined(CONFIG_EXYNOS4_MSHC_DDR)
+	.host_caps              = MMC_CAP_1_8V_DDR | MMC_CAP_UHS_DDR50,
+#endif
+};
+#endif
+
+static void lcd_cfg_gpio(void)
+{
+	int reg;
+
+	reg = __raw_readl(S3C_VA_SYS + 0x210);
+	reg |= 1 << 1;
+	__raw_writel(reg, S3C_VA_SYS + 0x210);
+
+	return;
+}
+
+static int reset_lcd(struct lcd_device *ld)
+{
+	static unsigned int first = 1;
+	int reset_gpio = -1;
+
+	reset_gpio = EXYNOS4_GPY4(5);
+
+	if (first) {
+		gpio_request(reset_gpio, "MLCD_RST");
+		first = 0;
+	}
+
+	mdelay(10);
+	gpio_direction_output(reset_gpio, 0);
+	mdelay(10);
+	gpio_direction_output(reset_gpio, 1);
+
+	dev_info(&ld->dev, "reset completed.\n");
+
+	return 0;
+}
+
+static struct lcd_platform_data s6e8aa0_pd = {
+	.reset			= reset_lcd,
+	.reset_delay		= 25,
+	.power_off_delay	= 120,
+	.power_on_delay		= 120,
+	.lcd_enabled		= 1,
+};
+
+#ifdef CONFIG_DRM_EXYNOS
+static struct resource exynos_drm_resource[] = {
+	[0] = {
+		.start = IRQ_FIMD0_VSYNC,
+		.end   = IRQ_FIMD0_VSYNC,
+		.flags = IORESOURCE_IRQ,
+	},
+};
+
+static struct platform_device exynos_drm_device = {
+	.name	= "exynos-drm",
+	.id	= -1,
+	.num_resources	  = ARRAY_SIZE(exynos_drm_resource),
+	.resource	  = exynos_drm_resource,
+	.dev	= {
+		.dma_mask = &exynos_drm_device.dev.coherent_dma_mask,
+		.coherent_dma_mask = 0xffffffffUL,
+	}
+};
+#endif
+
+#ifdef CONFIG_S5P_MIPI_DSI2
+static struct mipi_dsim_config dsim_config = {
+	.e_interface		= DSIM_VIDEO,
+	.e_virtual_ch		= DSIM_VIRTUAL_CH_0,
+	.e_pixel_format		= DSIM_24BPP_888,
+	.e_burst_mode		= DSIM_BURST_SYNC_EVENT,
+	.e_no_data_lane		= DSIM_DATA_LANE_4,
+	.e_byte_clk		= DSIM_PLL_OUT_DIV8,
+	.cmd_allow		= 0xf,
+
+	/*
+	 * ===========================================
+	 * |    P    |    M    |    S    |    MHz    |
+	 * -------------------------------------------
+	 * |    3    |   100   |    3    |    100    |
+	 * |    3    |   100   |    2    |    200    |
+	 * |    3    |    63   |    1    |    252    |
+	 * |    4    |   100   |    1    |    300    |
+	 * |    4    |   110   |    1    |    330    |
+	 * |   12    |   350   |    1    |    350    |
+	 * |    3    |   100   |    1    |    400    |
+	 * |    4    |   150   |    1    |    450    |
+	 * |    3    |   120   |    1    |    480    |
+	 * |   12    |   250   |    0    |    500    |
+	 * |    4    |   100   |    0    |    600    |
+	 * |    3    |    81   |    0    |    648    |
+	 * |    3    |    88   |    0    |    704    |
+	 * |    3    |    90   |    0    |    720    |
+	 * |    3    |   100   |    0    |    800    |
+	 * |   12    |   425   |    0    |    850    |
+	 * |    4    |   150   |    0    |    900    |
+	 * |   12    |   475   |    0    |    950    |
+	 * |    6    |   250   |    0    |   1000    |
+	 * -------------------------------------------
+	 */
+
+	.p			= 12,
+	.m			= 250,
+	.s			= 0,
+
+	/* D-PHY PLL stable time spec :min = 200usec ~ max 400usec */
+	.pll_stable_time	= 500,
+
+	/* escape clk : 10MHz */
+	.esc_clk		= 10 * 1000000,
+
+	/* stop state holding counter after bta change count 0 ~ 0xfff */
+	.stop_holding_cnt	= 0x7ff,
+	/* bta timeout 0 ~ 0xff */
+	.bta_timeout		= 0xff,
+	/* lp rx timeout 0 ~ 0xffff */
+	.rx_timeout		= 0xffff,
+};
+
+static struct s5p_platform_mipi_dsim dsim_platform_data = {
+	/* already enabled at boot loader. FIXME!!! */
+	.enabled		= true,
+	.phy_enable		= s5p_dsim_phy_enable,
+	.dsim_config		= &dsim_config,
+};
+
+static struct mipi_dsim_lcd_device mipi_lcd_device = {
+	.name			= "s6e8aa0",
+	.id			= -1,
+	.bus_id			= 0,
+
+	.platform_data		= (void *)&s6e8aa0_pd,
+};
+#endif
+
+static struct melfas_tsi_platform_data melfas_tsp_pdata = {
+	.x_size = 720,
+	.y_size = 1280,
+	.gpio_int = GPIO_TSP_INT,
+	.power = melfas_power,
+	.mt_protocol_b = true,
+	.enable_btn_touch = true,
+	.set_touch_i2c = melfas_set_touch_i2c,
+	.set_touch_i2c_to_gpio = melfas_set_touch_i2c_to_gpio,
+	.input_event = midas_tsp_request_qos,
+};
+
+static struct i2c_board_info i2c_devs0[] __initdata = {
+};
+
+static struct i2c_board_info i2c_devs1[] __initdata = {
+#ifdef CONFIG_VIDEO_TVOUT
+	{
+		I2C_BOARD_INFO("s5p_ddc", (0x74 >> 1)),
+	},
+#endif
+};
+
+#ifdef CONFIG_MFD_MAX77693
+#ifdef CONFIG_VIBETONZ
+static struct max77693_haptic_platform_data max77693_haptic_pdata = {
+	.max_timeout = 10000,
+	.duty = 44000,
+	.period = 44642,
+	.reg2 = MOTOR_LRA | EXT_PWM | DIVIDER_128,
+	.init_hw = NULL,
+	.motor_en = NULL,
+	.pwm_id = 1,
+	.regulator_name = "vmotor",
+};
+#endif
+
+#ifdef CONFIG_LEDS_MAX77693
+static struct max77693_led_platform_data max77693_led_pdata = {
+	.num_leds = 2,
+
+	.leds[0].name = "leds-sec",
+	.leds[0].id = MAX77693_FLASH_LED_1,
+	.leds[0].timer = MAX77693_FLASH_TIME_1000MS,
+	.leds[0].timer_mode = MAX77693_TIMER_MODE_MAX_TIMER,
+	.leds[0].cntrl_mode = MAX77693_LED_CTRL_BY_I2C,
+	.leds[0].brightness = MAX_FLASH_DRV_LEVEL,
+
+	.leds[1].name = "torch-sec",
+	.leds[1].id = MAX77693_TORCH_LED_1,
+	.leds[1].timer = MAX77693_DIS_TORCH_TMR,
+	.leds[1].timer_mode = MAX77693_TIMER_MODE_MAX_TIMER,
+	.leds[1].cntrl_mode = MAX77693_LED_CTRL_BY_I2C,
+	.leds[1].brightness = MAX_TORCH_DRV_LEVEL,
+};
+#endif
+
+static struct max77693_charger_reg_data max77693_charger_regs[] = {
+	{
+		/*
+		 * charger setting unlock
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_06,
+		.data = 0x3 << 2,
+	}, {
+		/*
+		 * fast-charge timer : 5hr
+		 * charger restart threshold : disabled
+		 * low-battery prequalification mode : enabled
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_01,
+		.data = (0x1 << 7) | (0x3 << 4) | 0x2,
+	}, {
+		/*
+		 * CHGIN output current limit in OTG mode : 900mA
+		 * fast-charge current : 500mA
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_02,
+		.data = (1 << 7) | 0xf,
+	}, {
+		/*
+		 * TOP off timer setting : 0min
+		 * TOP off current threshold : 250mA
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_03,
+		.data = 0x3,
+	}, {
+		/*
+		 * minimum system regulation voltage : 3.0V
+		 * primary charge termination voltage : 4.2V
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_04,
+		.data = 0x16,
+	}, {
+		/*
+		 * maximum input current limit : 600mA
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_09,
+		.data = 0x1e,
+	},
+};
+
+static struct max77693_charger_platform_data max77693_charger_pdata = {
+	.init_data = max77693_charger_regs,
+	.num_init_data = ARRAY_SIZE(max77693_charger_regs),
+};
+
+static struct max77693_platform_data midas_max77693_info = {
+	.irq_base	= IRQ_BOARD_IFIC_START,
+	.irq_gpio	= GPIO_IF_PMIC_IRQ,
+	.wakeup		= 1,
+	.muic = &max77693_muic,
+	.regulators = &max77693_regulators,
+	.num_regulators = MAX77693_REG_MAX,
+#ifdef CONFIG_VIBETONZ
+	.haptic_data = &max77693_haptic_pdata,
+#endif
+#ifdef CONFIG_LEDS_MAX77693
+	.led_data = &max77693_led_pdata,
+#endif
+	.charger_data = &max77693_charger_pdata,
+};
+
+static struct i2c_board_info i2c_devs4[] __initdata = {
+	{
+		I2C_BOARD_INFO("max77693", (0xCC >> 1)),
+		.platform_data	= &midas_max77693_info,
+	}
+};
+#endif
+
+#ifdef CONFIG_REGULATOR_MAX8997
+static struct i2c_board_info i2c_devs5[] __initdata = {
+	{
+		I2C_BOARD_INFO("max8997", (0xcc >> 1)),
+		.platform_data = &exynos4_max8997_info,
+		.irq = IRQ_EINT(7),
+	}
+};
+#elif defined(CONFIG_REGULATOR_MAX77686)
+static struct i2c_board_info i2c_devs5[] __initdata = {
+	{
+		I2C_BOARD_INFO("max77686", (0x12 >> 1)),
+		.platform_data	= &exynos4_max77686_info,
+		.irq = IRQ_EINT(7),
+	}
+};
+#endif
+
+#ifdef CONFIG_USB_EHCI_S5P
+static struct s5p_ehci_platdata smdk4212_ehci_pdata;
+
+static void __init smdk4212_ehci_init(void)
+{
+	struct s5p_ehci_platdata *pdata = &smdk4212_ehci_pdata;
+
+	s5p_ehci_set_platdata(pdata);
+}
+#endif
+
+#ifdef CONFIG_USB_OHCI_S5P
+static struct s5p_ohci_platdata smdk4212_ohci_pdata;
+
+static void __init smdk4212_ohci_init(void)
+{
+	struct s5p_ohci_platdata *pdata = &smdk4212_ohci_pdata;
+
+	s5p_ohci_set_platdata(pdata);
+}
+#endif
+
+/* USB GADGET */
+#ifdef CONFIG_USB_GADGET
+static struct s5p_usbgadget_platdata smdk4212_usbgadget_pdata;
+
+static void __init smdk4212_usbgadget_init(void)
+{
+	struct s5p_usbgadget_platdata *pdata = &smdk4212_usbgadget_pdata;
+
+	s5p_usbgadget_set_platdata(pdata);
+}
+#endif
+
+#ifdef CONFIG_USB_G_SLP
+#include <linux/usb/slp_multi.h>
+static struct slp_multi_func_data midas_slp_multi_funcs[] = {
+	{
+		.name = "mtp",
+		.usb_config_id = USB_CONFIGURATION_DUAL,
+	}, {
+		.name = "acm",
+		.usb_config_id = USB_CONFIGURATION_2,
+	}, {
+		.name = "sdb",
+		.usb_config_id = USB_CONFIGURATION_2,
+	}, {
+		.name = "mass_storage",
+		.usb_config_id = USB_CONFIGURATION_1,
+	}, {
+		.name = "rndis",
+		.usb_config_id = USB_CONFIGURATION_1,
+	},
+};
+
+static struct slp_multi_platform_data midas_slp_multi_pdata = {
+	.nluns	= 2,
+	.funcs = midas_slp_multi_funcs,
+	.nfuncs = ARRAY_SIZE(midas_slp_multi_funcs),
+};
+
+static struct platform_device midas_slp_usb_multi = {
+	.name		= "slp_multi",
+	.id			= -1,
+	.dev		= {
+		.platform_data = &midas_slp_multi_pdata,
+	},
+};
+#endif
+
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+static struct exynos_drm_fimd_pdata drm_fimd_pdata = {
+	.panel = {
+		.timing	= {
+			.xres		= 720,
+			.yres		= 1280,
+			.hsync_len	= 5,
+			.left_margin	= 10,
+			.right_margin	= 10,
+			.vsync_len	= 2,
+			.upper_margin	= 13,
+			.lower_margin	= 1,
+			.refresh	= 60,
+		},
+		.width_mm	= 58,
+		.height_mm	= 103,
+	},
+	.vidcon0	= VIDCON0_VIDOUT_RGB | VIDCON0_PNRMODE_RGB,
+	.vidcon1	= VIDCON1_INV_VCLK,
+	.default_win	= 3,
+	.bpp		= 32,
+};
+#endif
+
+#ifdef CONFIG_MFD_MAX8997
+static void midas_usb_cb(u8 usb_mode)
+{
+#ifdef CONFIG_JACK_MON
+	if (usb_mode == USB_OTGHOST_ATTACHED)
+		jack_event_handler("host", USB_CABLE_ATTACHED);
+	else if (usb_mode == USB_OTGHOST_DETACHED)
+		jack_event_handler("host", USB_CABLE_DETACHED);
+	else if ((usb_mode == USB_CABLE_ATTACHED)
+		|| (usb_mode == USB_CABLE_DETACHED))
+		jack_event_handler("usb", usb_mode);
+#endif
+}
+
+static int midas_charger_cb(int cable_type)
+{
+	bool is_cable_attached;
+
+	switch (cable_type) {
+	case CABLE_TYPE_NONE:
+	case CABLE_TYPE_OTG:
+	case CABLE_TYPE_JIG_UART_OFF:
+	case CABLE_TYPE_MHL:
+		is_cable_attached = false;
+		break;
+
+	case CABLE_TYPE_USB:
+	case CABLE_TYPE_JIG_USB_OFF:
+	case CABLE_TYPE_JIG_USB_ON:
+	case CABLE_TYPE_MHL_VB:
+	case CABLE_TYPE_TA:
+	case CABLE_TYPE_CARDOCK:
+	case CABLE_TYPE_DESKDOCK:
+	case CABLE_TYPE_JIG_UART_OFF_VB:
+		is_cable_attached = true;
+		break;
+
+	default:
+		printk(KERN_ERR "%s: invalid type:%d\n", __func__, cable_type);
+		return -EINVAL;
+	}
+
+#ifdef CONFIG_JACK_MON
+	jack_event_handler("charger", is_cable_attached);
+#endif
+
+	return 0;
+}
+
+static struct max8997_muic_data midas_muic_pdata = {
+	.usb_cb = midas_usb_cb,
+	.charger_cb = midas_charger_cb,
+	.gpio_usb_sel = EXYNOS4_GPL0(7),	/* done */
+	.uart_path = -1,	/* muic does not control uart path*/
+};
+#endif
+
+/* vbatt device (for WM8994) */
+static struct regulator_consumer_supply vbatt_supplies[] = {
+	REGULATOR_SUPPLY("LDO1VDD", NULL),
+	REGULATOR_SUPPLY("SPKVDD1", NULL),
+	REGULATOR_SUPPLY("SPKVDD2", NULL),
+};
+
+static struct regulator_init_data vbatt_initdata = {
+	.constraints = {
+		.always_on = 1,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(vbatt_supplies),
+	.consumer_supplies = vbatt_supplies,
+};
+
+static struct fixed_voltage_config vbatt_config = {
+	.init_data = &vbatt_initdata,
+	.microvolts = 5000000,
+	.supply_name = "VBATT",
+	.gpio = -EINVAL,
+};
+
+static struct platform_device vbatt_device = {
+	.name = "reg-fixed-voltage",
+	.id = -1,
+	.dev = {
+		.platform_data = &vbatt_config,
+	},
+};
+
+#ifdef CONFIG_SND_SOC_WM8994
+static struct regulator_consumer_supply wm1811_ldo1_supplies[] = {
+	REGULATOR_SUPPLY("AVDD1", NULL),
+};
+
+static struct regulator_init_data wm1811_ldo1_initdata = {
+	.constraints = {
+		.name = "WM1811 LDO1",
+		.valid_ops_mask = REGULATOR_CHANGE_STATUS,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(wm1811_ldo1_supplies),
+	.consumer_supplies = wm1811_ldo1_supplies,
+};
+
+static struct regulator_consumer_supply wm1811_ldo2_supplies[] = {
+	REGULATOR_SUPPLY("DCVDD", NULL),
+};
+
+static struct regulator_init_data wm1811_ldo2_initdata = {
+	.constraints = {
+		.name = "WM1811 LDO2",
+		.always_on = true, /* Actually status changed by LDO1 */
+	},
+	.num_consumer_supplies = ARRAY_SIZE(wm1811_ldo2_supplies),
+	.consumer_supplies = wm1811_ldo2_supplies,
+};
+
+static struct wm8994_pdata wm1811_pdata = {
+	.gpio_defaults = {
+		[0] = WM8994_GP_FN_IRQ, /* GPIO1 IRQ output, CMOS mode */
+		[7] = WM8994_GPN_DIR | WM8994_GP_FN_PIN_SPECIFIC, /* DACDAT3 */
+		[8] = WM8994_CONFIGURE_GPIO |\
+		WM8994_GP_FN_PIN_SPECIFIC, /* ADCDAT3 */
+		[9] = WM8994_CONFIGURE_GPIO |\
+		WM8994_GP_FN_PIN_SPECIFIC, /* LRCLK3 */
+		[10] = WM8994_CONFIGURE_GPIO |\
+		WM8994_GP_FN_PIN_SPECIFIC, /* BCLK3 */
+	},
+
+	/* To do */
+	.irq_base = IRQ_BOARD_CODEC_START,
+
+	/* The enable is shared but assign it to LDO1 for software */
+	.ldo = {
+		{
+			.enable = EXYNOS4212_GPJ0(4),
+			.init_data = &wm1811_ldo1_initdata,
+		},
+		{
+			.init_data = &wm1811_ldo2_initdata,
+		},
+	},
+
+	/* Regulated mode at highest output voltage */
+	.micbias = {0x3f, 0x3e},
+
+	.ldo_ena_always_driven = true,
+};
+#endif
+
+static struct i2c_board_info i2c_devs7[] __initdata = {
+#ifdef CONFIG_SND_SOC_WM8994
+	{
+		I2C_BOARD_INFO("wm1811", (0x34 >> 1)),	/* Audio CODEC */
+		.platform_data = &wm1811_pdata,
+		.irq = IRQ_EINT(30),
+	},
+#endif
+};
+
+/* Bluetooth */
+static struct platform_device bcm4334_bluetooth_device = {
+	.name = "bcm4334_bluetooth",
+	.id = -1,
+};
+
+/* BCM47511 GPS */
+static struct bcm47511_platform_data midas_bcm47511_data = {
+	.regpu		= GPIO_GPS_PWR_EN,	/* XM0DATA[15] */
+	.nrst		= GPIO_GPS_nRST,	/* XM0DATA[14] */
+	.uart_rxd	= GPIO_GPS_RXD,		/* XURXD[1] */
+	.gps_cntl	= GPIO_GPS_CNTL,	/* XM0ADDR[6] */
+	.reg32khz	= "lpo_in",
+};
+
+static struct platform_device midas_bcm47511 = {
+	.name	= "bcm47511",
+	.id	= -1,
+	.dev	= {
+		.platform_data	= &midas_bcm47511_data,
+	},
+};
+
+static struct i2c_gpio_platform_data gpio_i2c_data8 = {
+	.sda_pin = GPIO_3_TOUCH_SDA,
+	.scl_pin = GPIO_3_TOUCH_SCL,
+};
+
+static struct platform_device s3c_device_i2c8 = {
+	.name = "i2c-gpio",
+	.id = 8,
+	.dev.platform_data = &gpio_i2c_data8,
+};
+
+/* I2C8 */
+static struct i2c_board_info i2c_devs8_emul[] __initdata = {
+	{
+		I2C_BOARD_INFO("melfas-touchkey", 0x20),
+	},
+};
+
+/* For GP2A sensor */
+static struct i2c_gpio_platform_data i2c9_platdata = {
+	.sda_pin	= GPIO_PS_ALS_SDA_28V,
+	.scl_pin	= GPIO_PS_ALS_SCL_28V,
+	.udelay	= 2, /* 250KHz */
+	.sda_is_open_drain	= 0,
+	.scl_is_open_drain	= 0,
+	.scl_is_output_only = 0,
+};
+
+static struct platform_device s3c_device_i2c9 = {
+	.name	= "i2c-gpio",
+	.id	= 9,
+	.dev.platform_data	= &i2c9_platdata,
+};
+
+/* For AK8975C sensor */
+static struct i2c_gpio_platform_data i2c10_platdata = {
+	.sda_pin	= GPIO_MSENSOR_SDA_18V,
+	.scl_pin	= GPIO_MSENSOR_SCL_18V,
+	.udelay	= 2, /* 250KHz */
+	.sda_is_open_drain	= 0,
+	.scl_is_open_drain	= 0,
+	.scl_is_output_only = 0,
+};
+
+static struct platform_device s3c_device_i2c10 = {
+	.name	= "i2c-gpio",
+	.id	= 10,
+	.dev.platform_data	= &i2c10_platdata,
+};
+
+/* For LPS331 sensor */
+static struct i2c_gpio_platform_data i2c11_platdata = {
+	.sda_pin	= GPIO_BSENSE_SDA_18V,
+	.scl_pin	= GPIO_BENSE_SCL_18V,
+	.udelay	= 2, /* 250KHz */
+	.sda_is_open_drain	= 0,
+	.scl_is_open_drain	= 0,
+	.scl_is_output_only = 0,
+};
+
+static struct platform_device s3c_device_i2c11 = {
+	.name			= "i2c-gpio",
+	.id	= 11,
+	.dev.platform_data	= &i2c11_platdata,
+};
+
+#ifdef CONFIG_PN65N_NFC
+static struct i2c_gpio_platform_data i2c12_platdata = {
+	.sda_pin		= GPIO_NFC_SDA_18V,
+	.scl_pin		= GPIO_NFC_SCL_18V,
+	.udelay			= 2, /* 250 kHz */
+	.sda_is_open_drain	= 0,
+	.scl_is_open_drain	= 0,
+	.scl_is_output_only = 0,
+};
+
+static struct platform_device s3c_device_i2c12 = {
+	.name	= "i2c-gpio",
+	.id		= 12,
+	.dev.platform_data	= &i2c12_platdata,
+};
+#endif
+
+#define GPIO_KEYS(_code, _gpio, _active_low, _iswake, _hook)		\
+{					\
+	.code = _code,			\
+	.gpio = _gpio,	\
+	.active_low = _active_low,		\
+	.type = EV_KEY,			\
+	.wakeup = _iswake,		\
+	.debounce_interval = 10,	\
+	.isr_hook = _hook,			\
+	.value = 1 \
+}
+
+static struct gpio_keys_button midas_buttons[] = {
+	GPIO_KEYS(KEY_VOLUMEUP, GPIO_VOL_UP,
+		  1, 0, NULL),
+	GPIO_KEYS(KEY_VOLUMEDOWN, GPIO_VOL_DOWN,
+		  1, 0, NULL),
+	GPIO_KEYS(KEY_POWER, GPIO_nPOWER,
+		  1, 1, NULL),
+	GPIO_KEYS(KEY_MENU, GPIO_OK_KEY,
+		  1, 0, NULL),
+};
+
+static struct gpio_keys_platform_data midas_gpiokeys_platform_data = {
+	.buttons = midas_buttons,
+	.nbuttons = ARRAY_SIZE(midas_buttons),
+};
+
+static struct platform_device midas_keypad = {
+	.name	= "gpio-keys",
+	.dev	= {
+		.platform_data = &midas_gpiokeys_platform_data,
+	},
+};
+
+static struct i2c_gpio_platform_data gpio_i2c_data14 = {
+	.sda_pin = GPIO_FUEL_SDA,
+	.scl_pin = GPIO_FUEL_SCL,
+};
+
+static struct platform_device s3c_device_i2c14 = {
+	.name = "i2c-gpio",
+	.id = 14,
+	.dev.platform_data = &gpio_i2c_data14,
+};
+
+#ifdef CONFIG_BATTERY_MAX17047_FUELGAUGE
+static struct max17047_platform_data max17047_pdata = {
+	.irq_gpio = GPIO_FUEL_ALERT,
+};
+#endif
+
+#ifdef CONFIG_BATTERY_MAX17042
+static struct max17042_platform_data max17042_pdata = {
+	.psy_name = "battery", /* FIXME temporarily set name as battery */
+};
+#endif
+
+/* I2C14 */
+static struct i2c_board_info i2c_devs14_emul[] __initdata = {
+#ifdef CONFIG_BATTERY_MAX17047_FUELGAUGE
+	{
+		I2C_BOARD_INFO("max17047-fuelgauge", 0x36),
+		.platform_data = &max17047_pdata,
+	},
+#elif defined(CONFIG_BATTERY_MAX17042)
+	{
+		I2C_BOARD_INFO("max17042", 0x36),
+		.platform_data = &max17042_pdata,
+	},
+#endif
+};
+
+static struct jack_platform_data midas_jack_data = {
+	.usb_online		= 0,
+	.charger_online	= 0,
+	.hdmi_online	= -1,
+	.earjack_online	= 0,
+	.earkey_online	= -1,
+	.ums_online		= -1,
+	.cdrom_online	= -1,
+	.jig_online		= -1,
+	.host_online	= -1,
+};
+
+static struct platform_device midas_jack = {
+	.name		= "jack",
+	.id			= -1,
+	.dev		= {
+		.platform_data = &midas_jack_data,
+	},
+};
+
+#if defined(CONFIG_ARM_EXYNOS4_BUS_DEVFREQ)
+static struct exynos4_bus_platdata devfreq_bus_pdata = {
+	.threshold = {
+		.upthreshold = 90,
+		.downdifferential = 10,
+	},
+	.polling_ms = 50,
+};
+static struct platform_device devfreq_busfreq __initdata = {
+	.name		= "exynos4412-busfreq",
+	.id		= -1,
+	.dev		= {
+		.platform_data = &devfreq_bus_pdata,
+	},
+};
+#endif
+
+static struct platform_device *slp_midas_devices[] __initdata = {
+	/* Samsung Power Domain */
+	&exynos4_device_pd[PD_MFC],
+	&exynos4_device_pd[PD_G3D],
+	&exynos4_device_pd[PD_LCD0],
+	&exynos4_device_pd[PD_CAM],
+	&exynos4_device_pd[PD_TV],
+	&exynos4_device_pd[PD_GPS],
+	&exynos4_device_pd[PD_GPS_ALIVE],
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+	&exynos4_device_pd[PD_ISP],
+#endif
+
+	&s3c_device_wdt,
+	&s3c_device_rtc,
+	&s3c_device_i2c0,
+	&s3c_device_i2c1,
+	&s3c_device_i2c3,
+	&s3c_device_i2c4,
+	&s3c_device_i2c5,
+	&s3c_device_i2c7,
+	&s3c_device_i2c8,
+	&s3c_device_i2c9,
+	&s3c_device_i2c10,
+	&s3c_device_i2c11,
+#ifdef CONFIG_PN65N_NFC
+	&s3c_device_i2c12,	/* NFC */
+#endif
+	&s3c_device_i2c14,	/* max17047-fuelgauge */
+
+	&vbatt_device,
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+	&s5p_device_fimd0,
+#endif
+#ifdef CONFIG_HAVE_PWM
+	&s3c_device_timer[0],
+	&s3c_device_timer[1],
+	&s3c_device_timer[2],
+	&s3c_device_timer[3],
+#endif
+
+	&samsung_asoc_dma,
+
+#ifdef CONFIG_SND_SAMSUNG_AC97
+	&exynos_device_ac97,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_I2S
+	&exynos_device_i2s0,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_PCM
+	&exynos_device_pcm0,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_SPDIF
+	&exynos_device_spdif,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_RP
+	&exynos_device_srp,
+#endif
+#ifdef CONFIG_EXYNOS4_DEV_MSHC
+	&s3c_device_mshci,
+#endif
+#ifdef CONFIG_USB_EHCI_S5P
+	&s5p_device_ehci,
+#endif
+#ifdef CONFIG_USB_OHCI_S5P
+	&s5p_device_ohci,
+#endif
+#ifdef CONFIG_USB_GADGET
+	&s3c_device_usbgadget,
+#endif
+#ifdef CONFIG_USB_G_SLP
+	&midas_slp_usb_multi,
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC
+	&s3c_device_hsmmc0,
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC1
+	&s3c_device_hsmmc1,
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC2
+	&s3c_device_hsmmc2,
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC3
+	&s3c_device_hsmmc3,
+#endif
+#ifdef CONFIG_DRM_EXYNOS
+	&exynos_drm_device,
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+	&exynos4_device_fimc_is,
+#endif
+#ifdef CONFIG_VIDEO_FIMC
+	&s3c_device_fimc0,
+	&s3c_device_fimc1,
+	&s3c_device_fimc2,
+	&s3c_device_fimc3,
+/* CONFIG_VIDEO_SAMSUNG_S5P_FIMC is the feature for mainline */
+#elif defined(CONFIG_VIDEO_SAMSUNG_S5P_FIMC)
+	&s5p_device_fimc0,
+	&s5p_device_fimc1,
+	&s5p_device_fimc2,
+	&s5p_device_fimc3,
+#endif
+#if defined(CONFIG_VIDEO_FIMC_MIPI)
+	&s3c_device_csis0,
+	&s3c_device_csis1,
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_LITE
+	&exynos_device_flite0,
+	&exynos_device_flite1,
+#endif
+#ifdef CONFIG_VIDEO_MFC5X
+	&s5p_device_mfc,
+#endif
+#ifdef CONFIG_S5P_SYSTEM_MMU
+	&SYSMMU_PLATDEV(mfc_l),
+	&SYSMMU_PLATDEV(mfc_r),
+#endif
+	&midas_charger_manager,
+	&midas_keypad,
+	&midas_jack,
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+	&exynos_device_spi1,
+#endif
+	&midas_bcm47511,
+#if defined(CONFIG_ARM_EXYNOS4_BUS_DEVFREQ)
+	&devfreq_busfreq,
+#endif
+};
+
+#if defined(CONFIG_S5P_MEM_CMA)
+static void __init exynos4_reserve_mem(void)
+{
+	static struct cma_region regions[] = {
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC0
+		{
+			.name = "fimc0",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC0 * SZ_1K,
+			.start = 0
+		},
+#endif
+#if !defined(CONFIG_EXYNOS_CONTENT_PATH_PROTECTION) && \
+	defined(CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC1)
+		{
+			.name = "fimc1",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC1 * SZ_1K,
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC2
+		{
+			.name = "fimc2",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC2 * SZ_1K,
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC1
+		{
+			.name = "mfc1",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC1 * SZ_1K,
+			{
+				.alignment = 1 << 17,
+			},
+			.start = 0,
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC0
+		{
+			.name = "mfc0",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC0 * SZ_1K,
+			{
+				.alignment = 1 << 17,
+			},
+			.start = 0,
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC
+		{
+			.name = "mfc",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC * SZ_1K,
+			{
+				.alignment = 1 << 17,
+			},
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_DRM_EXYNOS
+		{
+			.name = "drm",
+			.size = CONFIG_DRM_EXYNOS_MEMSIZE * SZ_1K,
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+		{
+			.name = "fimc_is",
+			.size = CONFIG_VIDEO_EXYNOS_MEMSIZE_FIMC_IS * SZ_1K,
+			{
+				.alignment = 1 << 26,
+			},
+			.start = 0
+		},
+#endif
+		{
+			.size = 0
+		},
+	};
+
+	static const char map[] __initconst =
+		"s3c-fimc.0=fimc0;s3c-fimc.1=fimc1;s3c-fimc.2=fimc2;s3c-fimc.3=fimc3;"
+		"exynos4210-fimc.0=fimc0;exynos4210-fimc.1=fimc1;exynos4210-fimc.2=fimc2;exynos4210-fimc.3=fimc3;"
+#ifdef CONFIG_VIDEO_MFC5X
+		"s3c-mfc=mfc,mfc0,mfc1;"
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+		"exynos4-fimc-is=fimc_is;"
+#endif
+#ifdef CONFIG_DRM_EXYNOS
+		"exynos-drm=drm"
+#endif
+		""
+	;
+
+	cma_set_defaults(regions, map);
+	cma_early_regions_reserve(NULL);
+}
+#endif
+
+static void __init midas_map_io(void)
+{
+	clk_xusbxti.rate = 24000000;
+	s5p_init_io(NULL, 0, S5P_VA_CHIPID);
+	s3c24xx_init_clocks(24000000);
+	s3c24xx_init_uarts(slp_midas_uartcfgs, ARRAY_SIZE(slp_midas_uartcfgs));
+
+#if defined(CONFIG_S5P_MEM_CMA)
+	exynos4_reserve_mem();
+#endif
+}
+
+static void __init midas_fb_init(void)
+{
+#ifdef CONFIG_S5P_MIPI_DSI2
+	struct s5p_platform_mipi_dsim *dsim_pd;
+
+	s5p_device_mipi_dsim0.dev.platform_data = (void *)&dsim_platform_data;
+	dsim_pd = (struct s5p_platform_mipi_dsim *)&dsim_platform_data;
+
+	strcpy(dsim_pd->lcd_panel_name, "s6e8aa0");
+	dsim_pd->lcd_panel_info = (void *)&drm_fimd_pdata.panel.timing;
+
+	s5p_mipi_dsi_register_lcd_device(&mipi_lcd_device);
+	platform_device_register(&s5p_device_mipi_dsim0);
+
+	s5p_device_mipi_dsim0.dev.parent = &exynos4_device_pd[PD_LCD0].dev;
+#endif
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+	s5p_device_fimd0.dev.platform_data = &drm_fimd_pdata;
+#endif
+	lcd_cfg_gpio();
+}
+
+static void __init exynos_sysmmu_init(void)
+{
+	ASSIGN_SYSMMU_POWERDOMAIN(mfc_l, &exynos4_device_pd[PD_MFC].dev);
+	ASSIGN_SYSMMU_POWERDOMAIN(mfc_r, &exynos4_device_pd[PD_MFC].dev);
+#ifdef CONFIG_VIDEO_MFC5X
+	sysmmu_set_owner(&SYSMMU_PLATDEV(mfc_l).dev, &s5p_device_mfc.dev);
+	sysmmu_set_owner(&SYSMMU_PLATDEV(mfc_r).dev, &s5p_device_mfc.dev);
+#endif
+}
+
+static void __init midas_machine_init(void)
+{
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+	unsigned int gpio;
+	struct clk *sclk = NULL;
+	struct clk *prnt = NULL;
+	struct device *spi1_dev = &exynos_device_spi1.dev;
+#endif
+	strcpy(utsname()->nodename, machine_desc->name);
+
+	/* Workaround: bootloader needs to set GPX*PUD registers */
+	s3c_gpio_setpull(EXYNOS4_GPX2(7), S3C_GPIO_PULL_NONE);
+
+#ifdef CONFIG_PM_RUNTIME
+	exynos_pd_disable(&exynos4_device_pd[PD_MFC].dev);
+
+	/*
+	 * FIXME: now runtime pm of mali driver isn't worked yet.
+	 * if the runtime pm is worked fine, then remove this call.
+	 */
+	exynos_pd_enable(&exynos4_device_pd[PD_G3D].dev);
+
+	/* PD_LCD0 : The child devie control LCD0 power domain
+	 * because LCD should be always enabled during kernel booting.
+	 * So, LCD power domain can't turn off when machine initialization.*/
+	exynos_pd_disable(&exynos4_device_pd[PD_CAM].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_TV].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_GPS].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_GPS_ALIVE].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_ISP].dev);
+#else
+	/*
+	 * These power domains should be always on
+	 * without runtime pm support.
+	 */
+	exynos_pd_enable(&exynos4_device_pd[PD_MFC].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_G3D].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_LCD0].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_CAM].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_TV].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_GPS].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_GPS_ALIVE].dev);
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+	exynos_pd_enable(&exynos4_device_pd[PD_ISP].dev);
+#endif
+#endif
+	s3c_i2c0_set_platdata(NULL);
+	i2c_register_board_info(0, i2c_devs0, ARRAY_SIZE(i2c_devs0));
+
+	s3c_i2c1_set_platdata(NULL);
+	i2c_register_board_info(1, i2c_devs1, ARRAY_SIZE(i2c_devs1));
+
+	s3c_i2c3_set_platdata(NULL);
+	midas_tsp_set_platdata(&melfas_tsp_pdata);
+	midas_tsp_init();
+
+#ifdef CONFIG_MFD_MAX77693
+	s3c_i2c4_set_platdata(NULL);
+	i2c_register_board_info(4, i2c_devs4, ARRAY_SIZE(i2c_devs4));
+	midas_power_set_muic_pdata(NULL, EXYNOS4_GPX0(7));
+#endif
+#ifdef CONFIG_MFD_MAX8997
+	midas_power_set_muic_pdata(&midas_muic_pdata, EXYNOS4_GPX0(7));
+	midas_power_gpio_init();
+#endif
+	s3c_i2c5_set_platdata(NULL);
+	i2c_register_board_info(5, i2c_devs5, ARRAY_SIZE(i2c_devs5));
+
+	s3c_i2c7_set_platdata(NULL);
+	i2c_register_board_info(7, i2c_devs7, ARRAY_SIZE(i2c_devs7));
+
+#ifdef CONFIG_USB_EHCI_S5P
+	smdk4212_ehci_init();
+#endif
+#ifdef CONFIG_USB_OHCI_S5P
+	smdk4212_ohci_init();
+#endif
+#ifdef CONFIG_USB_GADGET
+	smdk4212_usbgadget_init();
+#endif
+
+	i2c_register_board_info(8, i2c_devs8_emul, ARRAY_SIZE(i2c_devs8_emul));
+	gpio_request(GPIO_3_TOUCH_INT, "3_TOUCH_INT");
+	s5p_register_gpio_interrupt(GPIO_3_TOUCH_INT);
+
+#ifdef CONFIG_PN65N_NFC
+	midas_nfc_init(12); /* NFC */
+#endif
+	/* max17047 fuel gauge */
+	i2c_register_board_info(14, i2c_devs14_emul,
+				ARRAY_SIZE(i2c_devs14_emul));
+
+#ifdef CONFIG_EXYNOS4_DEV_MSHC
+	s3c_mshci_set_platdata(&exynos4_mshc_pdata);
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC
+	s3c_sdhci0_set_platdata(&slp_midas_hsmmc0_pdata);
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC1
+	s3c_sdhci1_set_platdata(&slp_midas_hsmmc1_pdata);
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC2
+	s3c_sdhci2_set_platdata(&slp_midas_hsmmc2_pdata);
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC3
+	s3c_sdhci3_set_platdata(&slp_midas_hsmmc3_pdata);
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+	exynos4_fimc_is_set_platdata(NULL);
+	exynos4_device_fimc_is.dev.parent = &exynos4_device_pd[PD_ISP].dev;
+#endif
+
+	/* FIMC */
+	midas_camera_init();
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+	/*
+	 * platform device name for fimd driver should be changed
+	 * because we can get source clock with this name.
+	 *
+	 * P.S. refer to sclk_fimd definition of clock-exynos4.c
+	 */
+	s5p_fb_setname(0, "s3cfb");
+	s5p_device_fimd0.dev.parent = &exynos4_device_pd[PD_LCD0].dev;
+#endif
+	setup_charger_manager(&midas_charger_g_desc);
+
+	platform_add_devices(slp_midas_devices, ARRAY_SIZE(slp_midas_devices));
+
+	midas_fb_init();
+
+#ifdef CONFIG_VIDEO_MFC5X
+	s5p_device_mfc.dev.parent = &exynos4_device_pd[PD_MFC].dev;
+	exynos4_mfc_setup_clock(&s5p_device_mfc.dev, 267 * MHZ);
+#endif
+
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+	dev_set_name(&s5p_device_mfc.dev, "s3c-mfc");
+	clk_add_alias("mfc", "s5p-mfc", "mfc", &s5p_device_mfc.dev);
+	s5p_mfc_setname(&s5p_device_mfc, "s5p-mfc");
+#endif
+
+	exynos_sysmmu_init();
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+	sclk = clk_get(spi1_dev, "dout_spi1");
+	if (IS_ERR(sclk))
+		dev_err(spi1_dev, "failed to get sclk for SPI-1\n");
+	prnt = clk_get(spi1_dev, "mout_mpll_user");
+	if (IS_ERR(prnt))
+		dev_err(spi1_dev, "failed to get prnt\n");
+	if (clk_set_parent(sclk, prnt))
+		printk(KERN_ERR "Unable to set parent %s of clock %s.\n",
+		       prnt->name, sclk->name);
+
+	clk_set_rate(sclk, 800 * 1000 * 1000);
+	clk_put(sclk);
+	clk_put(prnt);
+
+	if (!gpio_request(EXYNOS4_GPB(5), "SPI_CS1")) {
+		gpio_direction_output(EXYNOS4_GPB(5), 1);
+		s3c_gpio_cfgpin(EXYNOS4_GPB(5), S3C_GPIO_SFN(1));
+		s3c_gpio_setpull(EXYNOS4_GPB(5), S3C_GPIO_PULL_UP);
+		exynos_spi_set_info(1, EXYNOS_SPI_SRCCLK_SCLK,
+				     ARRAY_SIZE(spi1_csi));
+	}
+
+	for (gpio = EXYNOS4_GPB(4); gpio < EXYNOS4_GPB(8); gpio++)
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV3);
+
+	spi_register_board_info(spi1_board_info, ARRAY_SIZE(spi1_board_info));
+#endif
+}
+
+MACHINE_START(SMDK4412, "SMDK4412")
+	.boot_params	= S5P_PA_SDRAM + 0x100,
+	.init_irq	= exynos4_init_irq,
+	.map_io		= midas_map_io,
+	.init_machine	= midas_machine_init,
+	.timer		= &exynos4_timer,
+MACHINE_END
+
+MACHINE_START(SMDK4212, "SMDK4212")
+	.boot_params	= S5P_PA_SDRAM + 0x100,
+	.init_irq	= exynos4_init_irq,
+	.map_io		= midas_map_io,
+	.init_machine	= midas_machine_init,
+	.timer		= &exynos4_timer,
+MACHINE_END
diff -Naur ./arch/arm/mach-exynos/board-slp-naples.c ../../HK_JB/Kernel/arch/arm/mach-exynos/board-slp-naples.c
--- ./arch/arm/mach-exynos/board-slp-naples.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/board-slp-naples.c	2012-11-22 09:13:14.000000000 +0100
@@ -0,0 +1,2266 @@
+/*
+ * linux/arch/arm/mach-exynos/board-slp-naples.c
+ *
+ * Copyright (c) 2012 Samsung Electronics Co., Ltd.
+ *
+ * Based on mach-exynos/board-slp-pq.c
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/platform_device.h>
+#include <linux/serial_core.h>
+#include <linux/spi/spi.h>
+#include <linux/gpio.h>
+#include <linux/gpio_keys.h>
+#include <linux/i2c.h>
+#include <linux/i2c-gpio.h>
+#include <linux/i2c/mms114.h>
+#include <linux/mmc/host.h>
+#include <linux/regulator/machine.h>
+#include <linux/regulator/fixed.h>
+#include <linux/mfd/wm8994/pdata.h>
+#include <linux/lcd.h>
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/input.h>
+#include <linux/sensor/lsm330dlc_accel.h>
+#include <linux/sensor/lsm330dlc_gyro.h>
+#include <linux/sensor/ak8975.h>
+#ifdef CONFIG_SENSORS_TAOS
+#include <linux/sensor/taos.h>
+#endif
+#ifdef CONFIG_SENSORS_GP2A
+#include <linux/sensor/gp2a.h>
+#endif
+#include <linux/cma.h>
+#include <linux/jack.h>
+#include <linux/uart_select.h>
+#include <linux/utsname.h>
+#include <linux/mfd/max77686.h>
+#include <linux/mfd/max77693.h>
+#include <linux/mfd/max77693-private.h>
+#include <linux/leds-max77693.h>
+#include <linux/battery/max17047_fuelgauge.h>
+#include <linux/power/charger-manager.h>
+#include <linux/sensor/lps331ap.h>
+#include <linux/devfreq/exynos4_bus.h>
+#include <linux/extcon.h>
+#include <drm/exynos_drm.h>
+
+#include <asm/mach/arch.h>
+#include <asm/mach-types.h>
+
+#include <plat/regs-serial.h>
+#include <plat/exynos4.h>
+#include <plat/clock.h>
+#include <plat/cpu.h>
+#include <plat/devs.h>
+#include <plat/gpio-cfg.h>
+#include <plat/iic.h>
+#include <plat/pd.h>
+#include <plat/sdhci.h>
+#include <plat/mshci.h>
+#include <plat/ehci.h>
+#include <plat/usbgadget.h>
+#include <plat/s3c64xx-spi.h>
+#include <plat/csis.h>
+#include <plat/udc-hs.h>
+#ifdef CONFIG_EXYNOS4_DEV_FIMC_IS
+#include <media/exynos_fimc_is.h>
+#endif
+#include <plat/regs-fb.h>
+#include <plat/fb-core.h>
+#include <plat/mipi_dsim2.h>
+#include <plat/fimd_lite_ext.h>
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC) || defined(CONFIG_VIDEO_MFC5X)
+#include <plat/s5p-mfc.h>
+#endif
+
+#include <mach/map.h>
+#include <mach/spi-clocks.h>
+
+#ifdef CONFIG_SND_SOC_WM8994
+#include <linux/mfd/wm8994/pdata.h>
+#include <linux/mfd/wm8994/gpio.h>
+#endif
+
+#include <mach/midas-power.h>
+#include <mach/naples-tsp.h>
+#include <mach/midas-tsp.h>
+#include <mach/dwmci.h>
+
+#ifdef CONFIG_TOUCHSCREEN_ATMEL_MXT224
+#include <linux/i2c/mxt224.h>
+#endif
+#ifdef CONFIG_I2C_SI4705
+#include <linux/si4705_pdata.h>
+#endif
+
+#include <mach/regs-pmu.h>
+
+#include <../../../drivers/video/samsung/s3cfb.h>
+#include <mach/dev-sysmmu.h>
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+#include <plat/s5p-tmu.h>
+#include <mach/regs-tmu.h>
+#endif
+
+#include <linux/host_notify.h>
+
+#include "board-mobile.h"
+
+#ifdef CONFIG_SEC_DEBUG
+#include <mach/sec_debug.h>
+#endif
+
+enum gpio_i2c {
+	I2C_LAST_HW	= 8, /* I2C0~8 are reserved */
+	I2C_FM_RADIO	= 9, /* I2C9 is reserved for CODEC (hardcoded) */
+	I2C_NFC,
+	I2C_3_TOUCH,
+	I2C_FUEL,
+	I2C_BSENSE,
+	I2C_MSENSE,
+	I2C_MHL		= 15, /* 15 is hardcoded from midas-mhl.c */
+	I2C_MHL_D	= 16, /* 16 is hardcoded from midas-mhl.c */
+	I2C_PSENSE,
+	I2C_IF_PMIC,
+	I2C_GSENSE,
+	I2C_VTCAM,
+};
+
+static int hwrevision(int rev)
+{
+	switch (rev) {
+	case 0: return (system_rev == 0x3);
+	case 1: return (system_rev == 0x0);
+	}
+	return 0;
+}
+
+/* Following are default values for UCON, ULCON and UFCON UART registers */
+#define SLP_MIDAS_UCON_DEFAULT	(S3C2410_UCON_TXILEVEL |	\
+				 S3C2410_UCON_RXILEVEL |	\
+				 S3C2410_UCON_TXIRQMODE |	\
+				 S3C2410_UCON_RXIRQMODE |	\
+				 S3C2410_UCON_RXFIFO_TOI |	\
+				 S3C2443_UCON_RXERR_IRQEN)
+
+#define SLP_MIDAS_ULCON_DEFAULT	S3C2410_LCON_CS8
+
+#define SLP_MIDAS_UFCON_DEFAULT	(S3C2410_UFCON_FIFOMODE |	\
+				 S5PV210_UFCON_TXTRIG4 |	\
+				 S5PV210_UFCON_RXTRIG4)
+
+static struct s3c2410_uartcfg slp_midas_uartcfgs[] __initdata = {
+	[0] = {
+		.hwport		= 0,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+	[1] = {
+		.hwport		= 1,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+	[2] = {
+		.hwport		= 2,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+	[3] = {
+		.hwport		= 3,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+};
+
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+static struct s3c64xx_spi_csinfo spi1_csi[] = {
+	[0] = {
+		.line = EXYNOS4_GPB(5),
+		.set_level = gpio_set_value,
+		.fb_delay = 0x2,
+	},
+};
+
+static struct spi_board_info spi1_board_info[] __initdata = {
+	{
+		.modalias = "s5c73m3_spi",
+		.platform_data = NULL,
+		.max_speed_hz = 50000000,
+		.bus_num = 1,
+		.chip_select = 0,
+		.mode = SPI_MODE_0,
+		.controller_data = &spi1_csi[0],
+	}
+};
+#endif
+
+#ifdef CONFIG_EXYNOS4_DEV_DWMCI
+#define DIV_FSYS3	(S5P_VA_CMU + 0x0C54C)
+static void exynos_dwmci_cfg_gpio(int width)
+{
+	unsigned int gpio;
+
+	for (gpio = EXYNOS4_GPK0(0); gpio < EXYNOS4_GPK0(2); gpio++) {
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+	}
+
+	switch (width) {
+	case 8:
+		for (gpio = EXYNOS4_GPK1(3); gpio <= EXYNOS4_GPK1(6); gpio++) {
+			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(4));
+			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+		}
+	case 4:
+		for (gpio = EXYNOS4_GPK0(3); gpio <= EXYNOS4_GPK0(6); gpio++) {
+			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
+			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+		}
+		break;
+	case 1:
+		gpio = EXYNOS4_GPK0(3);
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+
+		/* Workaround
+		 * NOTE : In future, should be modified bootloader
+		 * Set this value when 1-bit buswidth(it's initial time)*/
+		__raw_writel(0x1, DIV_FSYS3);
+	default:
+		break;
+	}
+}
+
+/*
+ * block setting of dwmci
+ * max_segs = PAGE_SIZE / size of IDMAC desc,
+ * max_blk_size = 512,
+ * max_blk_count = 65536,
+ * max_seg_size = PAGE_SIZE,
+ * max_req_size = max_seg_size * max_blk_count
+ **/
+static struct block_settings exynos_dwmci_blk_setting = {
+	.max_segs		= 0x1000,
+	.max_blk_size		= 0x200,
+	.max_blk_count		= 0x10000,
+	.max_seg_size		= 0x1000,
+	.max_req_size		= 0x1000 * 0x10000,
+};
+
+static struct dw_mci_board exynos_dwmci_pdata __initdata = {
+	.num_slots		= 1,
+	.quirks			= DW_MCI_QUIRK_BROKEN_CARD_DETECTION |
+				DW_MCI_QUIRK_HIGHSPEED,
+	.bus_hz			= 100 * 1000 * 1000,
+	.caps			= MMC_CAP_UHS_DDR50 | MMC_CAP_1_8V_DDR |
+				MMC_CAP_8_BIT_DATA | MMC_CAP_CMD23,
+	.caps2			= MMC_CAP2_PACKED_CMD,
+	.detect_delay_ms	= 200,
+	.hclk_name		= "dwmci",
+	.cclk_name		= "sclk_dwmci",
+	.cfg_gpio		= exynos_dwmci_cfg_gpio,
+	.blk_settings		= &exynos_dwmci_blk_setting,
+	.buf_size		= PAGE_SIZE << 4,
+};
+#else
+static struct s3c_mshci_platdata exynos4_mshc_pdata __initdata = {
+	.cd_type                = S3C_MSHCI_CD_PERMANENT,
+	.fifo_depth		= 0x80,
+	.max_width              = 8,
+	.host_caps              = MMC_CAP_8_BIT_DATA | MMC_CAP_1_8V_DDR |
+				  MMC_CAP_UHS_DDR50 | MMC_CAP_CMD23,
+	.host_caps2		= MMC_CAP2_PACKED_CMD,
+};
+#endif
+
+static struct s3c_sdhci_platdata slp_midas_hsmmc2_pdata __initdata = {
+	.cd_type                = S3C_SDHCI_CD_GPIO,
+	.ext_cd_gpio            = EXYNOS4_GPX3(4),
+	.ext_cd_gpio_invert	= true,
+	.clk_type		= S3C_SDHCI_CLK_DIV_EXTERNAL,
+	.max_width		= 4,
+	.host_caps		= MMC_CAP_4_BIT_DATA,
+	.vmmc_name		= "vtf_2.8v",
+};
+
+static DEFINE_MUTEX(notify_lock);
+
+#define DEFINE_MMC_CARD_NOTIFIER(num) \
+static void (*hsmmc##num##_notify_func)(struct platform_device *, int state); \
+static int ext_cd_init_hsmmc##num(void (*notify_func)( \
+			struct platform_device *, int state)) \
+{ \
+	mutex_lock(&notify_lock); \
+	WARN_ON(hsmmc##num##_notify_func); \
+	hsmmc##num##_notify_func = notify_func; \
+	mutex_unlock(&notify_lock); \
+	return 0; \
+} \
+static int ext_cd_cleanup_hsmmc##num(void (*notify_func)( \
+			struct platform_device *, int state)) \
+{ \
+	mutex_lock(&notify_lock); \
+	WARN_ON(hsmmc##num##_notify_func != notify_func); \
+	hsmmc##num##_notify_func = NULL; \
+	mutex_unlock(&notify_lock); \
+	return 0; \
+}
+
+DEFINE_MMC_CARD_NOTIFIER(3)
+
+/*
+ * call this when you need sd stack to recognize insertion or removal of card
+ * that can't be told by SDHCI regs
+ */
+
+void mmc_force_presence_change(struct platform_device *pdev)
+{
+	void (*notify_func)(struct platform_device *, int state) = NULL;
+	mutex_lock(&notify_lock);
+	if (pdev == &s3c_device_hsmmc3)
+		notify_func = hsmmc3_notify_func;
+
+	if (notify_func)
+		notify_func(pdev, 1);
+	else
+		pr_warn("%s: called for device with no notifier\n", __func__);
+	mutex_unlock(&notify_lock);
+}
+EXPORT_SYMBOL_GPL(mmc_force_presence_change);
+
+static struct s3c_sdhci_platdata slp_midas_hsmmc3_pdata __initdata = {
+/* new code for brm4334 */
+	.cd_type	= S3C_SDHCI_CD_EXTERNAL,
+	.clk_type	= S3C_SDHCI_CLK_DIV_EXTERNAL,
+	.pm_flags	= S3C_SDHCI_PM_IGNORE_SUSPEND_RESUME,
+	.ext_cd_init	= ext_cd_init_hsmmc3,
+	.ext_cd_cleanup	= ext_cd_cleanup_hsmmc3,
+};
+
+enum fixed_regulator_id {
+	FIXED_REG_ID_LCD = 0,
+};
+
+static struct regulator_consumer_supply lcd_supplies[] = {
+	REGULATOR_SUPPLY("VDD3", "s6e8aa0"),
+};
+
+static struct regulator_init_data lcd_fixed_reg_initdata = {
+	.num_consumer_supplies = ARRAY_SIZE(lcd_supplies),
+	.consumer_supplies = lcd_supplies,
+};
+
+static struct fixed_voltage_config lcd_config = {
+	.init_data = &lcd_fixed_reg_initdata,
+	.microvolts = 2200000,
+	.gpio = GPIO_LCD_22V_EN_00,
+};
+
+static struct platform_device lcd_fixed_reg_device = {
+	.name = "reg-fixed-voltage",
+	.id = FIXED_REG_ID_LCD,
+	.dev = {
+		.platform_data = &lcd_config,
+	},
+};
+
+static void lcd_cfg_gpio(void)
+{
+	int reg;
+	reg = __raw_readl(S3C_VA_SYS + 0x210);
+	reg |= 1 << 1;
+	__raw_writel(reg, S3C_VA_SYS + 0x210);
+
+	if (hwrevision(1)) {
+		/* LCD_EN */
+		s3c_gpio_cfgpin(GPIO_LCD_22V_EN_00, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_LCD_22V_EN_00, S3C_GPIO_PULL_NONE);
+	}
+
+	return;
+}
+
+static int reset_lcd(struct lcd_device *ld)
+{
+	static unsigned int first = 1;
+
+	if (first) {
+		gpio_request(GPIO_MLCD_RST, "MLCD_RST");
+		first = 0;
+	}
+
+	mdelay(10);
+	gpio_direction_output(GPIO_MLCD_RST, 0);
+	mdelay(10);
+	gpio_direction_output(GPIO_MLCD_RST, 1);
+
+	dev_info(&ld->dev, "reset completed.\n");
+
+	return 0;
+}
+
+static struct lcd_platform_data s6e39a0x02_pd = {
+	.reset			= reset_lcd,
+	.reset_delay		= 25,
+	.power_off_delay	= 120,
+	.power_on_delay		= 120,
+	.lcd_enabled		= 1,
+};
+
+#ifdef CONFIG_DRM_EXYNOS
+static struct resource exynos_drm_resource[] = {
+	[0] = {
+		.start = IRQ_FIMD0_VSYNC,
+		.end   = IRQ_FIMD0_VSYNC,
+		.flags = IORESOURCE_IRQ,
+	},
+};
+
+static struct platform_device exynos_drm_device = {
+	.name	= "exynos-drm",
+	.id	= -1,
+	.num_resources	  = ARRAY_SIZE(exynos_drm_resource),
+	.resource	  = exynos_drm_resource,
+	.dev	= {
+		.dma_mask = &exynos_drm_device.dev.coherent_dma_mask,
+		.coherent_dma_mask = 0xffffffffUL,
+	}
+};
+#endif
+
+#ifdef CONFIG_S5P_MIPI_DSI2
+static struct mipi_dsim_config dsim_config = {
+	.e_interface		= DSIM_COMMAND,
+	.e_virtual_ch		= DSIM_VIRTUAL_CH_0,
+	.e_pixel_format		= DSIM_24BPP_888,
+	.e_burst_mode	= DSIM_NON_VIDEO_MODE,
+	.e_no_data_lane	= DSIM_DATA_LANE_2,
+	.e_byte_clk		= DSIM_PLL_OUT_DIV8,
+	.cmd_allow		= 0xf,
+
+	/*
+	 * ===========================================
+	 * |    P    |    M    |    S    |    MHz    |
+	 * -------------------------------------------
+	 * |    3    |   100   |    3    |    100    |
+	 * |    3    |   100   |    2    |    200    |
+	 * |    3    |    63   |    1    |    252    |
+	 * |    4    |   100   |    1    |    300    |
+	 * |    4    |   110   |    1    |    330    |
+	 * |   12    |   350   |    1    |    350    |
+	 * |    3    |   100   |    1    |    400    |
+	 * |    4    |   150   |    1    |    450    |
+	 * |    3    |   120   |    1    |    480    |
+	 * |   12    |   250   |    0    |    500    |
+	 * |    4    |   100   |    0    |    600    |
+	 * |    3    |    81   |    0    |    648    |
+	 * |    3    |    88   |    0    |    704    |
+	 * |    3    |    90   |    0    |    720    |
+	 * |    3    |   100   |    0    |    800    |
+	 * |   12    |   425   |    0    |    850    |
+	 * |    4    |   150   |    0    |    900    |
+	 * |   12    |   475   |    0    |    950    |
+	 * |    6    |   250   |    0    |   1000    |
+	 * -------------------------------------------
+	 */
+
+	.p			= 3,
+	.m			= 120,
+	.s			= 1,
+
+	/* D-PHY PLL stable time spec :min = 200usec ~ max 400usec */
+	.pll_stable_time	= 500,
+
+	/* escape clk : 10MHz */
+	.esc_clk		= 20 * 1000000,
+
+	/* stop state holding counter after bta change count 0 ~ 0xfff */
+	.stop_holding_cnt	= 0x7ff,
+	/* bta timeout 0 ~ 0xff */
+	.bta_timeout		= 0xff,
+	/* lp rx timeout 0 ~ 0xffff */
+	.rx_timeout		= 0xffff,
+};
+
+static struct s5p_platform_mipi_dsim dsim_platform_data = {
+	/* already enabled at boot loader. FIXME!!! */
+	.enabled		= true,
+	.phy_enable		= s5p_dsim_phy_enable,
+	.dsim_config		= &dsim_config,
+};
+
+static struct mipi_dsim_lcd_device mipi_lcd_device = {
+	.name			= "s6e39a0x02",
+	.id			= -1,
+	.bus_id			= 0,
+
+	.platform_data		= (void *)&s6e39a0x02_pd,
+};
+#endif
+
+#ifdef CONFIG_TOUCHSCREEN_MELFAS
+static struct melfas_tsi_platform_data melfas_tsp_pdata = {
+	.x_size = 720,
+	.y_size = 1280,
+	.gpio_int = GPIO_TSP_INT,
+	.power = melfas_power,
+	.mt_protocol_b = true,
+	.enable_btn_touch = true,
+	.set_touch_i2c = melfas_set_touch_i2c,
+	.set_touch_i2c_to_gpio = melfas_set_touch_i2c_to_gpio,
+	.input_event = midas_tsp_request_qos,
+};
+#endif
+static struct i2c_board_info i2c_devs0[] __initdata = {
+	/*
+	 * GPD1(0, 1) / XI2C0SDA/SCL
+	 * PQ_LTE: 8M_CAM, PQ(proxima): NC
+	 */
+};
+
+#ifdef CONFIG_SENSORS_LSM330DLC
+static struct i2c_board_info i2c_devs1[] __initdata = {
+	/* PQ_LTE/PQ both use GSENSE_SCL/SDA */
+	{
+		I2C_BOARD_INFO("lsm330dlc_accel", (0x32 >> 1)),
+	},
+	{
+		I2C_BOARD_INFO("lsm330dlc_gyro", (0xD6 >> 1)),
+	},
+};
+
+static void lsm331dlc_gpio_init(void)
+{
+	int ret = gpio_request(GPIO_GYRO_INT, "lsm330dlc_gyro_irq");
+
+	pr_info("%s\n", __func__);
+
+	if (ret)
+		pr_err("Failed to request gpio lsm330dlc_gyro_irq\n");
+
+	ret = gpio_request(GPIO_GYRO_DE, "lsm330dlc_gyro_data_enable");
+
+	if (ret)
+		pr_err("Failed to request gpio lsm330dlc_gyro_data_enable\n");
+
+	ret = gpio_request(GPIO_ACC_INT, "lsm330dlc_accel_irq");
+
+	if (ret)
+		pr_err("Failed to request gpio lsm330dlc_accel_irq\n");
+
+	/* Accelerometer sensor interrupt pin initialization */
+	s3c_gpio_cfgpin(GPIO_ACC_INT, S3C_GPIO_INPUT);
+	gpio_set_value(GPIO_ACC_INT, 2);
+	s3c_gpio_setpull(GPIO_ACC_INT, S3C_GPIO_PULL_NONE);
+	s5p_gpio_set_drvstr(GPIO_ACC_INT, S5P_GPIO_DRVSTR_LV1);
+	i2c_devs1[0].irq = gpio_to_irq(GPIO_ACC_INT);
+
+	/* Gyro sensor interrupt pin initialization */
+	s3c_gpio_cfgpin(GPIO_GYRO_INT, S3C_GPIO_INPUT);
+	gpio_set_value(GPIO_GYRO_INT, 2);
+	s3c_gpio_setpull(GPIO_GYRO_INT, S3C_GPIO_PULL_NONE);
+	s5p_gpio_set_drvstr(GPIO_GYRO_INT, S5P_GPIO_DRVSTR_LV1);
+	i2c_devs1[1].irq = gpio_to_irq(GPIO_GYRO_INT);
+
+	/* Gyro sensor data enable pin initialization */
+	s3c_gpio_cfgpin(GPIO_GYRO_DE, S3C_GPIO_OUTPUT);
+	gpio_set_value(GPIO_GYRO_DE, 0);
+	s3c_gpio_setpull(GPIO_GYRO_DE, S3C_GPIO_PULL_DOWN);
+	s5p_gpio_set_drvstr(GPIO_GYRO_DE, S5P_GPIO_DRVSTR_LV1);
+}
+#endif
+
+#ifdef CONFIG_VIBETONZ
+static struct max77693_haptic_platform_data max77693_haptic_pdata = {
+	.max_timeout = 10000,
+	.duty = 44000,
+	.period = 44642,
+	.reg2 = MOTOR_LRA | EXT_PWM | DIVIDER_128,
+	.init_hw = NULL,
+	.motor_en = NULL,
+	.pwm_id = 0,
+	.regulator_name = "vmotor",
+};
+#endif
+
+#ifdef CONFIG_LEDS_MAX77693
+static struct max77693_led_platform_data max77693_led_pdata = {
+	.num_leds = 2,
+
+	.leds[0].name = "leds-sec",
+	.leds[0].id = MAX77693_FLASH_LED_1,
+	.leds[0].timer = MAX77693_FLASH_TIME_1000MS,
+	.leds[0].timer_mode = MAX77693_TIMER_MODE_MAX_TIMER,
+	.leds[0].cntrl_mode = MAX77693_LED_CTRL_BY_FLASHSTB,
+	.leds[0].brightness = MAX_FLASH_DRV_LEVEL,
+
+	.leds[1].name = "torch-sec",
+	.leds[1].id = MAX77693_TORCH_LED_1,
+	.leds[1].timer = MAX77693_DIS_TORCH_TMR,
+	.leds[1].timer_mode = MAX77693_TIMER_MODE_MAX_TIMER,
+	.leds[1].cntrl_mode = MAX77693_LED_CTRL_BY_FLASHSTB,
+	.leds[1].brightness = MAX_TORCH_DRV_LEVEL,
+};
+#endif
+
+static struct max77693_charger_reg_data max77693_charger_regs[] = {
+	{
+		/*
+		 * charger setting unlock
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_06,
+		.data = 0x3 << 2,
+	}, {
+		/*
+		 * fast-charge timer : 5hr
+		 * charger restart threshold : disabled
+		 * low-battery prequalification mode : enabled
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_01,
+		.data = (0x1 << 7) | (0x3 << 4) | 0x2,
+	}, {
+		/*
+		 * CHGIN output current limit in OTG mode : 900mA
+		 * fast-charge current : 500mA
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_02,
+		.data = (1 << 7) | 0xf,
+	}, {
+		/*
+		 * TOP off timer setting : 0min
+		 * TOP off current threshold : 250mA
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_03,
+		.data = 0x3,
+	}, {
+		/*
+		 * minimum system regulation voltage : 3.0V
+		 * primary charge termination voltage : 4.2V
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_04,
+		.data = 0x16,
+	}, {
+		/*
+		 * maximum input current limit : 600mA
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_09,
+		.data = 0x1e,
+	}, {
+		/*
+		 * VBYPSET 5V for USB HOST
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_11,
+		.data = 0x50,
+	},
+};
+
+static struct max77693_charger_platform_data max77693_charger_pdata = {
+	.init_data = max77693_charger_regs,
+	.num_init_data = ARRAY_SIZE(max77693_charger_regs),
+};
+
+static struct max77693_platform_data midas_max77693_info = {
+	.irq_base	= IRQ_BOARD_IFIC_START,
+	.irq_gpio	= GPIO_IF_PMIC_IRQ,
+	.wakeup		= 1,
+	.muic = &max77693_muic,
+	.regulators = &max77693_regulators,
+	.num_regulators = MAX77693_REG_MAX,
+#ifdef CONFIG_VIBETONZ
+	.haptic_data = &max77693_haptic_pdata,
+#endif
+#ifdef CONFIG_LEDS_MAX77693
+	.led_data = &max77693_led_pdata,
+#endif
+	.charger_data = &max77693_charger_pdata,
+};
+
+/* I2C GPIO: PQ/PQ_LTE use GPM2[0,1] for MAX77693 */
+static struct i2c_gpio_platform_data gpio_i2c_if_pmic = {
+	/* PQ/PQLTE use GPF1(4, 5) */
+	.sda_pin = GPIO_IF_PMIC_SDA,
+	.scl_pin = GPIO_IF_PMIC_SCL,
+};
+
+static struct platform_device device_i2c_if_pmic = {
+	.name = "i2c-gpio",
+	.id = I2C_IF_PMIC,
+	.dev.platform_data = &gpio_i2c_if_pmic,
+};
+
+static struct i2c_board_info i2c_devs_if_pmic[] __initdata = {
+	{
+		I2C_BOARD_INFO("max77693", (0xCC >> 1)),
+		.platform_data = &midas_max77693_info,
+	},
+};
+
+#if defined(CONFIG_REGULATOR_S5M8767)
+static struct i2c_board_info i2c_devs7[] __initdata = {
+	{
+		I2C_BOARD_INFO("s5m87xx", 0xCC >> 1),
+		.platform_data = &exynos4_s5m8767_info,
+		.irq	= IRQ_EINT(7),
+	}
+};
+#endif
+
+
+#if defined(CONFIG_REGULATOR_MAX77686)
+/* Both PQ/PQ_LTE use I2C7 (XPWMTOUT_2/3) for MAX77686 */
+static struct i2c_board_info i2c_devs7[] __initdata = {
+	{
+		I2C_BOARD_INFO("max77686", (0x12 >> 1)),
+		.platform_data	= &exynos4_max77686_info,
+	}
+};
+#endif
+
+#ifdef CONFIG_I2C_SI4705
+static void naples_si4705_reset(int enable)
+{
+	pr_info("%s: enable is %d", __func__, enable);
+	if (enable)
+		gpio_set_value(GPIO_FM_RST, 1);
+	else
+		gpio_set_value(GPIO_FM_RST, 0);
+}
+
+static void naples_si4705_init(void)
+{
+	gpio_request(GPIO_FM_RST, "fmradio_reset");
+	s3c_gpio_cfgpin(GPIO_FM_RST, S3C_GPIO_OUTPUT);
+	gpio_set_value(GPIO_FM_RST, 0);
+}
+
+static struct i2c_gpio_platform_data gpio_i2c_fm_radio = {
+	.sda_pin = EXYNOS4_GPY0(3),
+	.scl_pin = EXYNOS4_GPY0(2),
+};
+
+static struct platform_device device_i2c_fm_radio = {
+	.name = "i2c-gpio",
+	.id = I2C_FM_RADIO,
+	.dev.platform_data = &gpio_i2c_fm_radio,
+};
+
+static struct si4705_pdata naples_fm_radio_info = {
+	.reset = naples_si4705_reset,
+	.pdata_values = (SI4705_PDATA_BIT_VOL_STEPS |
+			 SI4705_PDATA_BIT_VOL_TABLE |
+			 SI4705_PDATA_BIT_RSSI_THRESHOLD |
+			 SI4705_PDATA_BIT_SNR_THRESHOLD),
+	.rx_vol_steps = 16,
+	.rx_vol_table = {	0x0, 0x13, 0x16, 0x19,
+				0x1C, 0x1F, 0x22, 0x25,
+				0x28, 0x2B, 0x2E, 0x31,
+				0x34, 0x37, 0x3A, 0x3D	},
+	.rx_seek_tune_rssi_threshold = 0x00,
+	.rx_seek_tune_snr_threshold = 0x01,
+};
+
+static struct i2c_board_info i2c_devs_fm_radio[] __initdata = {
+	{
+		I2C_BOARD_INFO("si4705", 0x22>>1),
+		.platform_data = &naples_fm_radio_info,
+		.irq = IRQ_EINT(11),
+	},
+};
+#endif
+
+#ifdef CONFIG_USB_EHCI_S5P
+static struct s5p_ehci_platdata smdk4212_ehci_pdata;
+
+static void __init smdk4212_ehci_init(void)
+{
+	struct s5p_ehci_platdata *pdata = &smdk4212_ehci_pdata;
+
+	s5p_ehci_set_platdata(pdata);
+}
+#endif
+
+#ifdef CONFIG_USB_OHCI_S5P
+static struct s5p_ohci_platdata smdk4212_ohci_pdata;
+
+static void __init smdk4212_ohci_init(void)
+{
+	struct s5p_ohci_platdata *pdata = &smdk4212_ohci_pdata;
+
+	s5p_ohci_set_platdata(pdata);
+}
+#endif
+
+static void otg_accessory_power(int enable)
+{
+	u8 on = (u8)!!enable;
+
+	gpio_request(GPIO_OTG_EN, "USB_OTG_EN");
+	gpio_direction_output(GPIO_OTG_EN, on);
+	gpio_free(GPIO_OTG_EN);
+	pr_info("%s: otg accessory power = %d\n", __func__, on);
+}
+
+static struct host_notifier_platform_data host_notifier_pdata = {
+	.ndev.name	= "usb_otg",
+	.booster	= otg_accessory_power,
+	.thread_enable	= 0,
+};
+
+struct platform_device host_notifier_device = {
+	.name = "host_notifier",
+	.dev.platform_data = &host_notifier_pdata,
+};
+
+/* USB GADGET */
+#ifdef CONFIG_USB_GADGET
+static struct s5p_usbgadget_platdata smdk4212_usbgadget_pdata;
+
+static void __init smdk4212_usbgadget_init(void)
+{
+	struct s5p_usbgadget_platdata *pdata = &smdk4212_usbgadget_pdata;
+
+	s5p_usbgadget_set_platdata(pdata);
+}
+#endif
+
+#ifdef CONFIG_USB_G_SLP
+#include <linux/usb/slp_multi.h>
+static struct slp_multi_func_data midas_slp_multi_funcs[] = {
+	{
+		.name = "mtp",
+		.usb_config_id = USB_CONFIGURATION_DUAL,
+	}, {
+		.name = "acm",
+		.usb_config_id = USB_CONFIGURATION_2,
+	}, {
+		.name = "sdb",
+		.usb_config_id = USB_CONFIGURATION_2,
+	}, {
+		.name = "mass_storage",
+		.usb_config_id = USB_CONFIGURATION_1,
+	}, {
+		.name = "rndis",
+		.usb_config_id = USB_CONFIGURATION_1,
+	},
+};
+
+static struct slp_multi_platform_data midas_slp_multi_pdata = {
+	.nluns	= 2,
+	.funcs = midas_slp_multi_funcs,
+	.nfuncs = ARRAY_SIZE(midas_slp_multi_funcs),
+};
+
+static struct platform_device midas_slp_usb_multi = {
+	.name		= "slp_multi",
+	.id			= -1,
+	.dev		= {
+		.platform_data = &midas_slp_multi_pdata,
+	},
+};
+#endif
+
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+#define VIDCON0_DSI_ENABLE			(1 << 30)
+
+static struct exynos_drm_fimd_pdata drm_fimd_pdata = {
+	.panel = {
+		.timing	= {
+			.xres		= 540,
+			.yres		= 960,
+			.hsync_len	= 0,
+			.left_margin	= 0,
+			.right_margin	= 0,
+			.vsync_len	= 1,
+			.upper_margin	= 0x4D,
+			.lower_margin	= 0x2,
+			.refresh	= 60,
+		},
+		.width_mm	= 53,
+		.height_mm	= 95,
+	},
+	.vidcon0	= VIDCON0_DSI_ENABLE | VIDCON0_VIDOUT_I80_LDI0
+			 | VIDCON0_PNRMODE_RGB, /* MIPI COMMAND MODE */
+	.default_win	= 3,
+	.bpp		= 32,
+	.dynamic_refresh	= 1,
+	.high_freq		= 1,
+};
+#endif
+
+#ifdef CONFIG_MDNIE_SUPPORT
+static struct resource exynos4_fimd_lite_resource[] = {
+	[0] = {
+		.start	= EXYNOS4_PA_LCD_LITE0,
+		.end	= EXYNOS4_PA_LCD_LITE0 + S5P_SZ_LCD_LITE0 - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= IRQ_LCD_LITE0,
+		.end	= IRQ_LCD_LITE0,
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct resource exynos4_mdnie_resource[] = {
+	[0] = {
+		.start	= EXYNOS4_PA_MDNIE0,
+		.end	= EXYNOS4_PA_MDNIE0 + S5P_SZ_MDNIE0 - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+};
+
+static struct mdnie_platform_data exynos4_mdnie_pd = {
+	.width			= 720,
+	.height			= 1280,
+};
+
+static struct s5p_fimd_ext_device exynos4_fimd_lite_device = {
+	.name			= "fimd_lite",
+	.id			= -1,
+	.num_resources		= ARRAY_SIZE(exynos4_fimd_lite_resource),
+	.resource		= exynos4_fimd_lite_resource,
+	.dev			= {
+		.platform_data	= &drm_fimd_pdata,
+	},
+};
+
+static struct s5p_fimd_ext_device exynos4_mdnie_device = {
+	.name			= "mdnie",
+	.id			= -1,
+	.num_resources		= ARRAY_SIZE(exynos4_mdnie_resource),
+	.resource		= exynos4_mdnie_resource,
+	.dev			= {
+		.platform_data	= &exynos4_mdnie_pd,
+	},
+};
+#endif
+
+#ifdef CONFIG_SND_SOC_WM8994
+/* vbatt device (for WM8994) */
+static struct regulator_consumer_supply vbatt_supplies[] = {
+	REGULATOR_SUPPLY("LDO1VDD", NULL),
+	REGULATOR_SUPPLY("SPKVDD1", NULL),
+	REGULATOR_SUPPLY("SPKVDD2", NULL),
+};
+
+static struct regulator_init_data vbatt_initdata = {
+	.constraints = {
+		.always_on = 1,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(vbatt_supplies),
+	.consumer_supplies = vbatt_supplies,
+};
+
+static struct fixed_voltage_config vbatt_config = {
+	.init_data = &vbatt_initdata,
+	.microvolts = 5000000,
+	.supply_name = "VBATT",
+	.gpio = -EINVAL,
+};
+
+static struct platform_device vbatt_device = {
+	.name = "reg-fixed-voltage",
+	.id = -1,
+	.dev = {
+		.platform_data = &vbatt_config,
+	},
+};
+
+/* I2C GPIO: GPF0(0/1) for CODEC_SDA/SCL */
+static struct regulator_consumer_supply wm1811_ldo1_supplies[] = {
+	REGULATOR_SUPPLY("AVDD1", NULL),
+};
+
+static struct regulator_init_data wm1811_ldo1_initdata = {
+	.constraints = {
+		.name = "WM1811 LDO1",
+		.valid_ops_mask = REGULATOR_CHANGE_STATUS,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(wm1811_ldo1_supplies),
+	.consumer_supplies = wm1811_ldo1_supplies,
+};
+
+static struct regulator_consumer_supply wm1811_ldo2_supplies[] = {
+	REGULATOR_SUPPLY("DCVDD", NULL),
+};
+
+static struct regulator_init_data wm1811_ldo2_initdata = {
+	.constraints = {
+		.name = "WM1811 LDO2",
+		.always_on = true, /* Actually status changed by LDO1 */
+	},
+	.num_consumer_supplies = ARRAY_SIZE(wm1811_ldo2_supplies),
+	.consumer_supplies = wm1811_ldo2_supplies,
+};
+
+static struct wm8994_pdata wm1811_pdata = {
+	.gpio_defaults = {
+		[0] = WM8994_GP_FN_IRQ,   /* GPIO1 IRQ output, CMOS mode */
+		[7] = WM8994_GPN_DIR | WM8994_GP_FN_PIN_SPECIFIC, /* DACDAT3 */
+		[8] = WM8994_CONFIGURE_GPIO |
+			  WM8994_GP_FN_PIN_SPECIFIC, /* ADCDAT3 */
+		[9] = WM8994_CONFIGURE_GPIO |\
+			  WM8994_GP_FN_PIN_SPECIFIC, /* LRCLK3 */
+		[10] = WM8994_CONFIGURE_GPIO |\
+			   WM8994_GP_FN_PIN_SPECIFIC, /* BCLK3 */
+	},
+
+	.irq_base = IRQ_BOARD_CODEC_START,
+
+	/* The enable is shared but assign it to LDO1 for software */
+	.ldo = {
+		{
+			.enable = EXYNOS4212_GPJ0(4),
+			.init_data = &wm1811_ldo1_initdata,
+		},
+		{
+			.init_data = &wm1811_ldo2_initdata,
+		},
+	},
+
+	/* Regulated mode at highest output voltage */
+	.micbias = {0x3f, 0x3e},
+
+	.micd_lvl_sel = 0xFF,
+
+	.ldo_ena_always_driven = true,
+
+	/* external cap for mic bias2 */
+	.jd_ext_cap = 1,
+};
+#endif
+
+/* I2C4's GPIO: PQ_LTE(CMC_CS) / PQ(NC) / PQ Rev01 (codec) */
+static struct i2c_board_info i2c_devs4[] __initdata = {
+#ifdef CONFIG_SND_SOC_WM8994
+	{
+		I2C_BOARD_INFO("wm1811", (0x34 >> 1)),	/* Audio CODEC */
+		.platform_data = &wm1811_pdata,
+		.irq = IRQ_EINT(30),
+	},
+#endif
+};
+
+static void naples_audio_init(void)
+{
+	int err;
+
+	/* Main Microphone BIAS */
+	err = gpio_request(GPIO_MIC_BIAS_EN_00, "MICBIAS_EN");
+	if (err) {
+		pr_err("%s: MIC_BIAS_EN GPIO set error", __func__);
+		return;
+	}
+	gpio_direction_output(GPIO_MIC_BIAS_EN_00, 0);
+	gpio_free(GPIO_MIC_BIAS_EN_00);
+
+	/* Sub Microphone BIAS */
+	err = gpio_request(GPIO_SUB_MIC_BIAS_EN_00, "SUB_MICBIAS_EN");
+	if (err) {
+		pr_err("%s: SUB_MIC_BIAS_EN GPIO set error", __func__);
+		return;
+	}
+	gpio_direction_output(GPIO_SUB_MIC_BIAS_EN_00, 0);
+	gpio_free(GPIO_SUB_MIC_BIAS_EN_00);
+}
+
+/* I2C GPIO: NFC */
+static struct i2c_gpio_platform_data gpio_i2c_nfc = {
+	.sda_pin = GPIO_NFC_SDA_18V,
+	.scl_pin = GPIO_NFC_SCL_18V,
+};
+
+static struct platform_device device_i2c_nfc = {
+	.name = "i2c-gpio",
+	.id = I2C_NFC,
+	.dev.platform_data = &gpio_i2c_nfc,
+};
+
+/* Bluetooth */
+#ifdef CONFIG_BT_BCM4334
+static struct platform_device bcm4334_bluetooth_device = {
+	.name = "bcm4334_bluetooth",
+	.id = -1,
+};
+#endif
+
+#define GPIO_KEYS(_code, _gpio, _active_low, _iswake, _hook)		\
+{					\
+	.code = _code,			\
+	.gpio = _gpio,	\
+	.active_low = _active_low,		\
+	.type = EV_KEY,			\
+	.wakeup = _iswake,		\
+	.debounce_interval = 10,	\
+	.isr_hook = _hook,			\
+	.value = 1 \
+}
+
+static struct gpio_keys_button midas_buttons[] = {
+#ifdef CONFIG_SEC_DEBUG
+	GPIO_KEYS(KEY_VOLUMEUP, GPIO_VOL_UP,
+		  1, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_VOLUMEDOWN, GPIO_VOL_DOWN,
+		  1, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_POWER, GPIO_nPOWER,
+		  1, 1, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_MENU, GPIO_OK_KEY,
+			  1, 1, NULL),
+#else
+	GPIO_KEYS(KEY_VOLUMEUP, GPIO_VOL_UP,
+		  1, 0, NULL),
+	GPIO_KEYS(KEY_VOLUMEDOWN, GPIO_VOL_DOWN,
+		  1, 0, NULL),
+	GPIO_KEYS(KEY_POWER, GPIO_nPOWER,
+		  1, 1, NULL),
+	GPIO_KEYS(KEY_MENU, GPIO_OK_KEY,
+		  1, 1, NULL),
+#endif
+
+};
+
+static struct gpio_keys_platform_data midas_gpiokeys_platform_data = {
+	.buttons = midas_buttons,
+	.nbuttons = ARRAY_SIZE(midas_buttons),
+};
+
+static struct platform_device midas_keypad = {
+	.name	= "gpio-keys",
+	.dev	= {
+		.platform_data = &midas_gpiokeys_platform_data,
+	},
+};
+
+/* I2C GPIO: Fuel Gauge */
+static struct i2c_gpio_platform_data gpio_i2c_fuel = {
+	/* PQ/PQLTE use GPF1(4, 5) */
+	.sda_pin = GPIO_FUEL_SDA,
+	.scl_pin = GPIO_FUEL_SCL,
+};
+
+static struct platform_device device_i2c_fuel = {
+	.name = "i2c-gpio",
+	.id = I2C_FUEL,
+	.dev.platform_data = &gpio_i2c_fuel,
+};
+
+static struct max17047_platform_data max17047_pdata = {
+	.irq_gpio = GPIO_FUEL_ALERT,
+};
+
+static struct i2c_board_info i2c_devs_fuel[] __initdata = {
+	{
+		I2C_BOARD_INFO("max17047-fuelgauge", 0x36),
+		.platform_data = &max17047_pdata,
+	},
+};
+
+#ifdef CONFIG_VIDEO_SLP_DB8131M
+/* I2C GPIO: 1.3M VT CAM */
+static struct i2c_gpio_platform_data gpio_i2c_vtcam = {
+	.sda_pin		= GPIO_VT_CAM_SDA_18V,
+	.scl_pin		= GPIO_VT_CAM_SCL_18V,
+	.udelay			= 2, /* 250 kHz */
+	.sda_is_open_drain	= 0,
+	.scl_is_open_drain	= 0,
+	.scl_is_output_only = 0,
+};
+
+static struct platform_device device_i2c_vtcam = {
+	.name	= "i2c-gpio",
+	.id	= I2C_VTCAM,
+	.dev.platform_data	= &gpio_i2c_vtcam,
+};
+
+static struct i2c_board_info i2c_devs_vtcam[] __initdata = {
+};
+#endif
+
+#ifdef CONFIG_SENSORS_LPS331
+/* I2C GPIO: Barometer (BSENSE) */
+static struct i2c_gpio_platform_data gpio_i2c_bsense = {
+	.sda_pin = GPIO_BSENSE_SDA_18V,
+	.scl_pin = GPIO_BENSE_SCL_18V,
+};
+
+static struct platform_device device_i2c_bsense = {
+	.name = "i2c-gpio",
+	.id = I2C_BSENSE,
+	.dev.platform_data = &gpio_i2c_bsense,
+};
+
+static struct lps331ap_platform_data lps331_pdata = {
+	.irq = GPIO_BARO_INT,
+};
+
+static struct i2c_board_info i2c_devs_bsense[] __initdata = {
+	{
+		I2C_BOARD_INFO(LPS331AP_PRS_DEV_NAME, LPS331AP_PRS_I2C_SAD_H),
+		.platform_data = &lps331_pdata,
+	},
+};
+
+static void lps331ap_gpio_init(void)
+{
+	int ret = gpio_request(GPIO_BARO_INT, "lps331_irq");
+
+	pr_info("%s\n", __func__);
+
+	if (ret)
+		pr_err("Failed to request gpio lps331_irq\n");
+
+	s3c_gpio_cfgpin(GPIO_BARO_INT, S3C_GPIO_INPUT);
+	gpio_set_value(GPIO_BARO_INT, 2);
+	s3c_gpio_setpull(GPIO_BARO_INT, S3C_GPIO_PULL_NONE);
+	s5p_gpio_set_drvstr(GPIO_BARO_INT, S5P_GPIO_DRVSTR_LV1);
+};
+#endif
+
+#if defined(CONFIG_SENSORS_BMA254)
+static struct i2c_gpio_platform_data bma250_i2c_gpio_data = {
+	.sda_pin	= GPIO_GSENSE_SDA_18V,
+	.scl_pin	= GPIO_GSENSE_SCL_18V,
+};
+
+static struct platform_device bma254_i2c_gpio_device = {
+	.name	= "i2c-gpio",
+	.id	= I2C_GSENSE,
+	.dev	= {
+		.platform_data  = &bma250_i2c_gpio_data,
+	},
+};
+
+static struct i2c_board_info bma254_i2c_devices[] __initdata = {
+	{
+		I2C_BOARD_INFO("bma254", 0x18),
+		.irq = GPIO_ACC_INT,
+		.platform_data = &bma250_i2c_gpio_data,
+	},
+};
+
+static int __init bma254_gpio_init(void)
+{
+	int ret;
+
+	pr_err("bma254_gpio_init\n");
+
+	s3c_gpio_cfgpin(GPIO_GSENSE_SDA_18V, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_GSENSE_SDA_18V, S3C_GPIO_PULL_UP);
+	s5p_gpio_set_drvstr(GPIO_GSENSE_SDA_18V, S5P_GPIO_DRVSTR_LV1);
+
+	s3c_gpio_cfgpin(GPIO_GSENSE_SCL_18V, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_GSENSE_SCL_18V, S3C_GPIO_PULL_UP);
+	s5p_gpio_set_drvstr(GPIO_GSENSE_SCL_18V, S5P_GPIO_DRVSTR_LV1);
+
+	ret = gpio_request(GPIO_ACC_INT, "bma254_accel_irq");
+
+	if (ret)
+		pr_err("Failed to request gpio bma254_accel_irq = %d\n", ret);
+
+	/* Accelerometer sensor interrupt pin initialization */
+	s3c_gpio_cfgpin(GPIO_ACC_INT, S3C_GPIO_INPUT);
+	gpio_set_value(GPIO_ACC_INT, 2);
+	s3c_gpio_setpull(GPIO_ACC_INT, S3C_GPIO_PULL_NONE);
+	s5p_gpio_set_drvstr(GPIO_ACC_INT, S5P_GPIO_DRVSTR_LV1);
+	s5p_register_gpio_interrupt(GPIO_ACC_INT);
+	bma254_i2c_devices[0].irq = gpio_to_irq(GPIO_ACC_INT);
+
+	return 0;
+}
+#endif
+
+/* I2C GPIO: Magnetic (MSENSE) */
+static struct i2c_gpio_platform_data gpio_i2c_msense = {
+	.sda_pin = GPIO_MSENSOR_SDA_18V,
+	.scl_pin = GPIO_MSENSOR_SCL_18V,
+	.udelay = 2, /* 250KHz */
+};
+
+static struct platform_device device_i2c_msense = {
+	.name = "i2c-gpio",
+	.id = I2C_MSENSE,
+	.dev.platform_data = &gpio_i2c_msense,
+};
+
+static struct akm8975_platform_data akm8975_pdata = {
+	.gpio_data_ready_int = GPIO_MSENSOR_INT,
+};
+
+static struct i2c_board_info i2c_devs_msense[] __initdata = {
+	{
+		I2C_BOARD_INFO("ak8975", 0x0C),
+		.platform_data = &akm8975_pdata,
+	},
+};
+
+static void ak8975c_gpio_init(void)
+{
+	int ret = gpio_request(GPIO_MSENSOR_INT, "gpio_akm_int");
+
+	pr_info("%s\n", __func__);
+
+	if (ret)
+		pr_err("Failed to request gpio akm_int.\n");
+
+	s5p_register_gpio_interrupt(GPIO_MSENSOR_INT);
+	s3c_gpio_setpull(GPIO_MSENSOR_INT, S3C_GPIO_PULL_DOWN);
+	s3c_gpio_cfgpin(GPIO_MSENSOR_INT, S3C_GPIO_SFN(0xF));
+	i2c_devs_msense[0].irq = gpio_to_irq(GPIO_MSENSOR_INT);
+}
+
+/* I2C GPIO: MHL */
+static struct i2c_gpio_platform_data gpio_i2c_mhl = {
+	.sda_pin = GPIO_MHL_SDA_1_8V,
+	.scl_pin = GPIO_MHL_SCL_1_8V,
+	.udelay = 3,
+};
+
+static struct platform_device device_i2c_mhl = {
+	.name = "i2c-gpio",
+	.id = I2C_MHL,
+	.dev.platform_data = &gpio_i2c_mhl,
+};
+
+/* I2C GPIO: MHL_D */
+static struct i2c_gpio_platform_data gpio_i2c_mhl_d = {
+	.sda_pin = GPIO_MHL_DSDA_2_8V,
+	.scl_pin = GPIO_MHL_DSCL_2_8V,
+};
+
+static struct platform_device device_i2c_mhl_d = {
+	.name = "i2c-gpio",
+	.id = I2C_MHL_D,
+	.dev.platform_data = &gpio_i2c_mhl_d,
+};
+
+#ifdef CONFIG_SENSORS_TAOS
+static struct i2c_gpio_platform_data gpio_i2c_psense = {
+	.sda_pin    = GPIO_RGB_SDA_1_8V,
+	.scl_pin    = GPIO_RGB_SCL_1_8V,
+	.udelay		= 2,
+};
+
+static struct platform_device device_i2c_psense = {
+	.name       = "i2c-gpio",
+	.id     = I2C_PSENSE,
+	.dev        = {
+		.platform_data  = &gpio_i2c_psense,
+	},
+};
+
+static struct taos_platform_data taos_pdata = {
+	.p_out = GPIO_PS_ALS_INT,
+};
+
+static struct i2c_board_info taos_i2c_board_info[] = {
+	{
+		I2C_BOARD_INFO("taos", 0x39),
+		.platform_data	= &taos_pdata,
+	},
+};
+
+static void optical_gpio_init(void)
+{
+	pr_info("%s\n", __func__);
+
+	s3c_gpio_setpull(GPIO_PS_ALS_INT, S3C_GPIO_PULL_UP);
+}
+#endif
+
+#ifdef CONFIG_SENSORS_GP2A
+/* I2C GPIO: PS_ALS (PSENSE) */
+static struct i2c_gpio_platform_data gpio_i2c_psense = {
+	.sda_pin = GPIO_PS_ALS_SDA_28V,
+	.scl_pin = GPIO_PS_ALS_SCL_28V,
+	.udelay = 2, /* 250KHz */
+};
+
+static struct platform_device device_i2c_psense = {
+	.name = "i2c-gpio",
+	.id = I2C_PSENSE,
+	.dev.platform_data = &gpio_i2c_psense,
+};
+
+static struct i2c_board_info i2c_devs_psense[] __initdata = {
+	{
+		I2C_BOARD_INFO("gp2a", (0x72 >> 1)),
+	},
+};
+
+static int proximity_leda_on(bool onoff)
+{
+	pr_info("%s, onoff = %d\n", __func__, onoff);
+
+	gpio_set_value(GPIO_PS_ALS_EN, onoff);
+
+	return 0;
+}
+
+static struct gp2a_platform_data gp2a_pdata = {
+	.gp2a_led_on	= proximity_leda_on,
+	.p_out = GPIO_PS_ALS_INT,
+};
+
+static struct platform_device opt_gp2a = {
+	.name = "gp2a-opt",
+	.id = -1,
+	.dev = {
+		.platform_data = &gp2a_pdata,
+	},
+};
+
+static void optical_gpio_init(void)
+{
+	int ret = gpio_request(GPIO_PS_ALS_EN, "optical_power_supply_on");
+
+	pr_info("%s\n", __func__);
+
+	if (ret)
+		pr_err("Failed to request gpio optical power supply.\n");
+
+	/* configuring for gp2a gpio for LEDA power */
+	s3c_gpio_cfgpin(GPIO_PS_ALS_EN, S3C_GPIO_OUTPUT);
+	gpio_set_value(GPIO_PS_ALS_EN, 0);
+	s3c_gpio_setpull(GPIO_PS_ALS_EN, S3C_GPIO_PULL_NONE);
+
+	s3c_gpio_setpull(GPIO_PS_ALS_INT, S3C_GPIO_PULL_UP);
+}
+#endif
+
+static struct jack_platform_data midas_jack_data = {
+	.usb_online		= 0,
+	.charger_online	= 0,
+	.hdmi_online	= -1,
+	.earjack_online	= 0,
+	.earkey_online	= -1,
+	.ums_online		= -1,
+	.cdrom_online	= -1,
+	.jig_online		= -1,
+	.host_online	= 0,
+};
+
+static struct platform_device midas_jack = {
+	.name		= "jack",
+	.id			= -1,
+	.dev		= {
+		.platform_data = &midas_jack_data,
+	},
+};
+
+#if defined(CONFIG_ARM_EXYNOS4_BUS_DEVFREQ)
+static struct exynos4_bus_platdata devfreq_bus_pdata = {
+	.threshold = {
+		.upthreshold = 90,
+		.downdifferential = 10,
+	},
+	.polling_ms = 5,
+};
+static struct platform_device devfreq_busfreq = {
+	.name		= "exynos4412-busfreq",
+	.id		= -1,
+	.dev		= {
+		.platform_data = &devfreq_bus_pdata,
+	},
+};
+#endif
+
+/* Uart Select */
+static void midas_set_uart_switch(int path)
+{
+	int gpio;
+
+	gpio = EXYNOS4_GPF2(3);
+	gpio_request(gpio, "UART_SEL");
+
+	/* gpio_high == AP */
+	if (path == UART_SW_PATH_AP)
+		gpio_set_value(gpio, GPIO_LEVEL_HIGH);
+	else if (path == UART_SW_PATH_CP)
+		gpio_set_value(gpio, GPIO_LEVEL_LOW);
+
+	gpio_free(gpio);
+	return;
+}
+
+static int midas_get_uart_switch(void)
+{
+	int val;
+	int gpio;
+
+	gpio = EXYNOS4_GPF2(3);
+	gpio_request(gpio, "UART_SEL");
+	val = gpio_get_value(gpio);
+	gpio_free(gpio);
+
+	/* gpio_high == AP */
+	if (val == GPIO_LEVEL_HIGH)
+		return UART_SW_PATH_AP;
+	else if (val == GPIO_LEVEL_LOW)
+		return UART_SW_PATH_CP;
+	else
+		return UART_SW_PATH_NA;
+}
+
+static struct uart_select_platform_data midas_uart_select_data = {
+	.set_uart_switch	= midas_set_uart_switch,
+	.get_uart_switch	= midas_get_uart_switch,
+};
+
+static struct platform_device midas_uart_select = {
+	.name			= "uart-select",
+	.id			= -1,
+	.dev			= {
+		.platform_data	= &midas_uart_select_data,
+	},
+};
+
+/* External connector */
+static struct extcon_dev midas_usb_extcon = {
+	.name			= "usb-connector",
+	.supported_cable	= extcon_cable_name,
+};
+
+static void midas_extcon_init(void)
+{
+	int ret;
+
+	ret = extcon_dev_register(&midas_usb_extcon, NULL);
+	if (ret)
+		pr_err(KERN_ERR "failed to register extcon_dev\n");
+}
+
+static struct platform_device *slp_midas_devices[] __initdata = {
+	/* Samsung Power Domain */
+	&exynos4_device_pd[PD_MFC],
+	&exynos4_device_pd[PD_G3D],
+	&exynos4_device_pd[PD_LCD0],
+	&exynos4_device_pd[PD_CAM],
+	&exynos4_device_pd[PD_TV],
+	&exynos4_device_pd[PD_GPS],
+	&exynos4_device_pd[PD_GPS_ALIVE],
+	&exynos4_device_pd[PD_ISP],
+
+	&s3c_device_wdt,
+	&s3c_device_rtc,
+	&s3c_device_i2c0,	/* 5M CAM */
+	&s3c_device_i2c1,	/* Gyro/Acc */
+	/* i2c2: used by GPS UART */
+	&s3c_device_i2c3,	/* Meltas TSP */
+	/* i2c4: NC(PQ) / codec: wm1811 (PQ rev01) / Modem(PQ LTE) */
+	&s3c_device_i2c4,
+	/* i2c5: NC(PQ) / Modem(PQ LTE) */
+	&s3c_device_i2c7,	/* MAX77686 PMIC */
+#ifdef CONFIG_I2C_SI4705
+	&device_i2c_fm_radio,
+#endif
+	&device_i2c_if_pmic,	/* if_pmic: max77693 */
+	&device_i2c_fuel,	/* max17047-fuelgauge */
+	#ifdef CONFIG_VIDEO_SLP_DB8131M
+	&device_i2c_vtcam, /* I2C GPIO: 1.3M VT CAM */
+#endif
+#ifdef CONFIG_SENSORS_LPS331
+	&device_i2c_bsense,	/* barometer lps331ap */
+#endif
+#if defined(CONFIG_SENSORS_BMA254)
+	&bma254_i2c_gpio_device,
+#endif
+	&device_i2c_msense, /* magnetic ak8975c */
+	&device_i2c_mhl,
+#ifdef CONFIG_SENSORS_TAOS
+	&device_i2c_psense,
+#endif
+#ifdef CONFIG_SENSORS_GP2A
+	&device_i2c_psense, /* PS_ALS gp2a020 */
+#endif
+	/* TODO: SW I2C for 8M CAM of PQ (same gpio with PQ_LTE NFC) */
+	/* TODO: SW I2C for VT_CAM (GPIO_VT_CAM_SCL/SDA) */
+	/* TODO: SW I2C for ADC (GPIO_ADC_SCL/SDA) */
+	/* TODO: SW I2C for LTE of PQ_LTE (F2(4) SDA, F2(5) SCL) */
+
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+	&s5p_device_fimd0,
+#endif
+#ifdef CONFIG_HAVE_PWM
+	&s3c_device_timer[0],
+	&s3c_device_timer[1],
+	&s3c_device_timer[2],
+	&s3c_device_timer[3],
+#endif
+
+#ifdef CONFIG_SND_SOC_WM8994
+	&vbatt_device,
+#endif
+	&samsung_asoc_dma,
+#ifndef CONFIG_SND_SOC_SAMSUNG_USE_DMA_WRAPPER
+	&samsung_asoc_idma,
+#endif
+
+#ifdef CONFIG_SND_SAMSUNG_AC97
+	&exynos_device_ac97,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_I2S
+	&exynos_device_i2s0,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_PCM
+	&exynos_device_pcm0,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_SPDIF
+	&exynos_device_spdif,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_RP
+	&exynos_device_srp,
+#endif
+#ifdef CONFIG_USB_EHCI_S5P
+	&s5p_device_ehci,
+#endif
+#ifdef CONFIG_USB_OHCI_S5P
+	&s5p_device_ohci,
+#endif
+#ifdef CONFIG_USB_GADGET
+	&s3c_device_usbgadget,
+#endif
+#ifdef CONFIG_USB_G_SLP
+	&midas_slp_usb_multi,
+#endif
+#ifdef CONFIG_EXYNOS4_DEV_DWMCI
+	&exynos_device_dwmci,
+#else
+	&s3c_device_mshci,
+#endif
+	&s3c_device_hsmmc2,
+	&s3c_device_hsmmc3,
+#ifdef CONFIG_DRM_EXYNOS
+	&exynos_drm_device,
+#endif
+#ifdef CONFIG_EXYNOS4_DEV_FIMC_IS
+	&exynos4_device_fimc_is,
+#endif
+#ifdef CONFIG_VIDEO_FIMC
+	&s3c_device_fimc0,
+	&s3c_device_fimc1,
+	&s3c_device_fimc2,
+	&s3c_device_fimc3,
+#elif defined(CONFIG_VIDEO_SAMSUNG_S5P_FIMC)
+	&s5p_device_fimc0,
+	&s5p_device_fimc1,
+	&s5p_device_fimc2,
+	&s5p_device_fimc3,
+#endif
+#if defined(CONFIG_VIDEO_FIMC_MIPI)
+	&s3c_device_csis0,
+	&s3c_device_csis1,
+#endif
+#if defined(CONFIG_VIDEO_MFC5X) || defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+	&s5p_device_mfc,
+#endif
+#ifdef CONFIG_S5P_SYSTEM_MMU
+	&SYSMMU_PLATDEV(mfc_l),
+	&SYSMMU_PLATDEV(mfc_r),
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_LITE
+	&exynos_device_flite0,
+	&exynos_device_flite1,
+#endif
+	&midas_charger_manager,
+	&midas_keypad,
+	&midas_jack,
+	&midas_uart_select,
+	&bcm4334_bluetooth_device,
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+	&exynos_device_spi1,
+#endif
+#if defined(CONFIG_ARM_EXYNOS4_BUS_DEVFREQ)
+	&devfreq_busfreq,
+#endif
+#ifdef CONFIG_SENSORS_GP2A
+	&opt_gp2a,
+#endif
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+	&s5p_device_tmu,
+#endif
+	&host_notifier_device,
+
+};
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+/* below temperature base on the celcius degree */
+static struct s5p_platform_tmu midas_tmu_data __initdata = {
+	.ts = {
+		.stop_1st_throttle  = 78,
+		.start_1st_throttle = 80,
+		.stop_2nd_throttle  = 87,
+		.start_2nd_throttle = 103,
+		/* temp to do tripping */
+		.start_tripping     = 110,
+		/* To protect chip,forcely kernel panic */
+		.start_emergency    = 120,
+		.stop_mem_throttle  = 80,
+		.start_mem_throttle = 85,
+	},
+	.cpufreq = {
+		.limit_1st_throttle  = 800000, /* 800MHz in KHz order */
+		.limit_2nd_throttle  = 200000, /* 200MHz in KHz order */
+	},
+};
+#endif
+
+#if defined(CONFIG_S5P_MEM_CMA)
+static void __init exynos4_reserve_mem(void)
+{
+	static struct cma_region regions[] = {
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC0
+		{
+			.name = "fimc0",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC0 * SZ_1K,
+			.start = 0
+		},
+#endif
+#if !defined(CONFIG_EXYNOS_CONTENT_PATH_PROTECTION) && \
+	defined(CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC1)
+		{
+			.name = "fimc1",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC1 * SZ_1K,
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC2
+		{
+			.name = "fimc2",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC2 * SZ_1K,
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC1
+		{
+			.name = "mfc1",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC1 * SZ_1K,
+			{
+				.alignment = 1 << 17,
+			},
+			.start = 0,
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC0
+		{
+			.name = "mfc0",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC0 * SZ_1K,
+			{
+				.alignment = 1 << 17,
+			},
+			.start = 0,
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC
+		{
+			.name = "mfc",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC * SZ_1K,
+			{
+				.alignment = 1 << 17,
+			},
+			.start = 0
+		},
+#endif
+#if !defined(CONFIG_EXYNOS_CONTENT_PATH_PROTECTION) && \
+	defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+		{
+			.name		= "b2",
+			.size		= 32 << 20,
+			{ .alignment	= 128 << 10 },
+		},
+		{
+			.name		= "b1",
+			.size		= 32 << 20,
+			{ .alignment	= 128 << 10 },
+		},
+		{
+			.name		= "fw",
+			.size		= 1 << 20,
+			{ .alignment	= 128 << 10 },
+		},
+#endif
+#ifdef CONFIG_DRM_EXYNOS
+		{
+			.name = "drm",
+			.size = CONFIG_DRM_EXYNOS_MEMSIZE * SZ_1K,
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_EXYNOS4_DEV_FIMC_IS
+		{
+			.name = "fimc_is",
+			.size = CONFIG_VIDEO_EXYNOS_MEMSIZE_FIMC_IS * SZ_1K,
+			{
+				.alignment = 1 << 26,
+			},
+			.start = 0
+		},
+#endif
+		{
+			.size = 0
+		},
+	};
+
+	static const char map[] __initconst =
+		"s3cfb.0=fimd;"
+		"s3c-fimc.0=fimc0;s3c-fimc.1=fimc1;s3c-fimc.2=fimc2;s3c-fimc.3=fimc3;"
+		"exynos4210-fimc.0=fimc0;exynos4210-fimc.1=fimc1;exynos4210-fimc.2=fimc2;exynos4210-fimc.3=fimc3;"
+#ifdef CONFIG_VIDEO_MFC5X
+		"s3c-mfc=mfc,mfc0,mfc1;"
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_S5P_MFC
+		"s5p-mfc/f=fw;"
+		"s5p-mfc/a=b1;"
+		"s5p-mfc/b=b2;"
+#endif
+#ifdef CONFIG_EXYNOS4_DEV_FIMC_IS
+		"exynos4-fimc-is=fimc_is;"
+#endif
+#ifdef CONFIG_DRM_EXYNOS
+		"exynos-drm=drm"
+#endif
+		""
+	;
+
+	cma_set_defaults(regions, map);
+	cma_early_regions_reserve(NULL);
+}
+#endif
+
+static void __init midas_map_io(void)
+{
+	clk_xusbxti.rate = 24000000;
+	s5p_init_io(NULL, 0, S5P_VA_CHIPID);
+	s3c24xx_init_clocks(24000000);
+	s3c24xx_init_uarts(slp_midas_uartcfgs, ARRAY_SIZE(slp_midas_uartcfgs));
+
+#if defined(CONFIG_S5P_MEM_CMA)
+	exynos4_reserve_mem();
+#endif
+
+#ifdef CONFIG_SEC_DEBUG
+	/* as soon as INFORM6 is visible, sec_debug is ready to run */
+	sec_debug_init();
+#endif
+
+}
+
+#ifdef CONFIG_MDNIE_SUPPORT
+static int exynos4_common_setup_clock(const char *sclk_name,
+	const char *pclk_name, unsigned long rate, unsigned int rate_set)
+{
+	struct clk *sclk = NULL;
+	struct clk *pclk = NULL;
+
+	sclk = clk_get(NULL, sclk_name);
+	if (IS_ERR(sclk)) {
+		pr_err("failed to get %s clock.\n", sclk_name);
+		goto err_clk;
+	}
+
+	pclk = clk_get(NULL, pclk_name);
+	if (IS_ERR(pclk)) {
+		pr_err("failed to get %s clock.\n", pclk_name);
+		goto err_clk;
+	}
+
+	clk_set_parent(sclk, pclk);
+
+	pr_info("set parent clock of %s to %s\n", sclk_name,
+			pclk_name);
+	if (!rate_set)
+		goto set_end;
+
+	if (!rate)
+		rate = 200 * MHZ;
+
+	clk_set_rate(sclk, rate);
+
+set_end:
+	clk_put(sclk);
+	clk_put(pclk);
+
+	return 0;
+
+err_clk:
+	clk_put(sclk);
+	clk_put(pclk);
+
+	return -EINVAL;
+
+}
+#endif
+
+static void __init midas_fb_init(void)
+{
+#ifdef CONFIG_S5P_MIPI_DSI2
+	struct s5p_platform_mipi_dsim *dsim_pd;
+
+	s5p_device_mipi_dsim0.dev.platform_data = (void *)&dsim_platform_data;
+	dsim_pd = (struct s5p_platform_mipi_dsim *)&dsim_platform_data;
+
+	strcpy(dsim_pd->lcd_panel_name, "s6e39a0x02");
+	dsim_pd->lcd_panel_info = (void *)&drm_fimd_pdata.panel.timing;
+
+	s5p_mipi_dsi_register_lcd_device(&mipi_lcd_device);
+	if (hwrevision(1))
+		platform_device_register(&lcd_fixed_reg_device);
+#ifdef CONFIG_MDNIE_SUPPORT
+	s5p_fimd_ext_device_register(&exynos4_mdnie_device);
+	s5p_fimd_ext_device_register(&exynos4_fimd_lite_device);
+#endif
+	platform_device_register(&s5p_device_mipi_dsim0);
+#endif
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+	s5p_device_fimd0.dev.platform_data = &drm_fimd_pdata;
+#endif
+	lcd_cfg_gpio();
+}
+
+static void __init exynos_sysmmu_init(void)
+{
+	ASSIGN_SYSMMU_POWERDOMAIN(mfc_l, &exynos4_device_pd[PD_MFC].dev);
+	ASSIGN_SYSMMU_POWERDOMAIN(mfc_r, &exynos4_device_pd[PD_MFC].dev);
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC) || defined(CONFIG_VIDEO_MFC5X)
+	sysmmu_set_owner(&SYSMMU_PLATDEV(mfc_l).dev, &s5p_device_mfc.dev);
+	sysmmu_set_owner(&SYSMMU_PLATDEV(mfc_r).dev, &s5p_device_mfc.dev);
+#endif
+}
+
+/*
+ * This function disable unused clocks to remove power leakage on idle state.
+ */
+static void midas_disable_unused_clock(void)
+{
+/* Following array include the unused clock list */
+	struct __unused_clock_list {
+		char *dev_id;
+		char *con_id;
+	} clock_list[] =  {
+		{
+			/* UART Ch 4 is only dedicated for communication
+			 * with internal GPS in SoC */
+			.dev_id = "s5pv210-uart.4",
+			.con_id = "uart",
+		}, {
+			.dev_id = "s5p-qe.3",
+			.con_id = "qefimc",
+		}, {
+			.dev_id = "s5p-qe.2",
+			.con_id = "qefimc",
+		}, {
+			.dev_id = "s5p-qe.1",
+			.con_id = "qefimc",
+		},
+	};
+	struct device dev;
+	struct clk *clk;
+	char *con_id;
+	int i;
+
+	for (i = 0 ; i < ARRAY_SIZE(clock_list) ; i++) {
+		dev.init_name = clock_list[i].dev_id;
+		con_id = clock_list[i].con_id;
+
+		clk = clk_get(&dev, con_id);
+		if (IS_ERR(clk)) {
+			pr_err("Failed to get %s for %s\n",
+					con_id, dev.init_name);
+			continue;
+		}
+		clk_enable(clk);
+		clk_disable(clk);
+		clk_put(clk);
+	}
+}
+
+static void __init midas_machine_init(void)
+{
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+	unsigned int gpio;
+	struct clk *sclk = NULL;
+	struct clk *prnt = NULL;
+	struct device *spi1_dev = &exynos_device_spi1.dev;
+#endif
+	strcpy(utsname()->nodename, machine_desc->name);
+
+	/* Workaround: bootloader needs to set GPX*PUD registers */
+	s3c_gpio_setpull(EXYNOS4_GPX2(7), S3C_GPIO_PULL_NONE);
+
+#if defined(CONFIG_EXYNOS_DEV_PD) && defined(CONFIG_PM_RUNTIME)
+	exynos_pd_disable(&exynos4_device_pd[PD_MFC].dev);
+
+	/*
+	 * FIXME: now runtime pm of mali driver isn't worked yet.
+	 * if the runtime pm is worked fine, then remove this call.
+	 */
+	exynos_pd_enable(&exynos4_device_pd[PD_G3D].dev);
+
+	/* PD_LCD0 : The child devie control LCD0 power domain
+	 * because LCD should be always enabled during kernel booting.
+	 * So, LCD power domain can't turn off when machine initialization.*/
+	exynos_pd_disable(&exynos4_device_pd[PD_CAM].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_TV].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_GPS].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_GPS_ALIVE].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_ISP].dev);
+#elif defined(CONFIG_EXYNOS_DEV_PD)
+	/*
+	 * These power domains should be always on
+	 * without runtime pm support.
+	 */
+	exynos_pd_enable(&exynos4_device_pd[PD_MFC].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_G3D].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_LCD0].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_CAM].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_TV].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_GPS].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_GPS_ALIVE].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_ISP].dev);
+#endif
+
+	/* initialise the gpios */
+	midas_config_gpio_table();
+	exynos4_sleep_gpio_table_set = midas_config_sleep_gpio_table;
+/*
+#ifndef NAPLES_BT_BRING_UP
+	naples_config_init_bt_gpio_table();
+#endif
+*/
+	s3c_i2c0_set_platdata(NULL);
+	i2c_register_board_info(0, i2c_devs0, ARRAY_SIZE(i2c_devs0));
+
+#ifdef CONFIG_SENSORS_LSM330DLC
+	/* LSM330DLC (Gyro & Accelerometer Sensor) */
+	s3c_i2c1_set_platdata(NULL);
+	lsm331dlc_gpio_init();
+	i2c_register_board_info(1, i2c_devs1, ARRAY_SIZE(i2c_devs1));
+#endif
+
+	s3c_i2c3_set_platdata(NULL);
+
+#ifdef CONFIG_TOUCHSCREEN_MELFAS
+	midas_tsp_set_platdata(&melfas_tsp_pdata);
+	midas_tsp_init();
+#endif
+#ifdef CONFIG_TOUCHSCREEN_ATMEL_MXT224
+	naples_tsp_init();
+#endif
+
+#ifdef CONFIG_I2C_SI4705
+	GPIO_I2C_PIN_SETUP(fm_radio);
+	naples_si4705_init();
+	i2c_register_board_info(I2C_FM_RADIO, i2c_devs_fm_radio,
+				ARRAY_SIZE(i2c_devs_fm_radio));
+#endif
+
+	/* Audio Codec WM1811 */
+	naples_audio_init();
+	s3c_i2c4_set_platdata(NULL);
+	i2c_register_board_info(4, i2c_devs4, ARRAY_SIZE(i2c_devs4));
+
+	s3c_i2c7_set_platdata(NULL);
+	s3c_i2c7_set_platdata(NULL);
+
+#if defined(CONFIG_REGULATOR_MAX77686)
+	/* Workaround for repeated interrupts from MAX77686 during sleep */
+	exynos4_max77686_info.wakeup = 0;
+#endif
+	i2c_register_board_info(7, i2c_devs7, ARRAY_SIZE(i2c_devs7));
+
+	GPIO_I2C_PIN_SETUP(if_pmic);
+	midas_power_set_muic_pdata(NULL, EXYNOS4_GPX0(7));
+	i2c_register_board_info(I2C_IF_PMIC, i2c_devs_if_pmic,
+				ARRAY_SIZE(i2c_devs_if_pmic));
+
+	/* NFC */
+	GPIO_I2C_PIN_SETUP(nfc);
+	platform_device_register(&device_i2c_nfc);
+	midas_nfc_init(device_i2c_nfc.id);
+
+	/* MHL / MHL_D */
+	GPIO_I2C_PIN_SETUP(mhl);
+
+	GPIO_I2C_PIN_SETUP(mhl_d);
+	platform_device_register(&device_i2c_mhl_d);
+
+#ifdef CONFIG_SENSORS_LPS331
+	lps331ap_gpio_init();
+	GPIO_I2C_PIN_SETUP(bsense);
+	i2c_register_board_info(I2C_BSENSE, i2c_devs_bsense,
+				ARRAY_SIZE(i2c_devs_bsense));
+#endif
+
+#ifdef CONFIG_SENSORS_BMA254
+	bma254_gpio_init();
+	i2c_register_board_info(I2C_GSENSE, bma254_i2c_devices,
+			ARRAY_SIZE(bma254_i2c_devices));
+#endif
+
+	ak8975c_gpio_init();
+
+	GPIO_I2C_PIN_SETUP(msense);
+	i2c_register_board_info(I2C_MSENSE, i2c_devs_msense,
+				ARRAY_SIZE(i2c_devs_msense));
+
+#ifdef CONFIG_SENSORS_TAOS
+	optical_gpio_init();
+	GPIO_I2C_PIN_SETUP(psense);
+	i2c_register_board_info(I2C_PSENSE, taos_i2c_board_info,
+				ARRAY_SIZE(taos_i2c_board_info));
+#endif
+#ifdef CONFIG_SENSORS_GP2A
+	optical_gpio_init();
+	GPIO_I2C_PIN_SETUP(psense);
+	i2c_register_board_info(I2C_PSENSE, i2c_devs_psense,
+				ARRAY_SIZE(i2c_devs_psense));
+#endif
+
+#ifdef CONFIG_USB_EHCI_S5P
+	smdk4212_ehci_init();
+#endif
+#ifdef CONFIG_USB_OHCI_S5P
+	smdk4212_ohci_init();
+#endif
+#ifdef CONFIG_USB_GADGET
+	smdk4212_usbgadget_init();
+#endif
+
+	/* home key pullup */
+	s3c_gpio_cfgpin(EXYNOS4_GPX2(0), S3C_GPIO_INPUT);
+	s3c_gpio_setpull(EXYNOS4_GPX2(0), S3C_GPIO_PULL_UP);
+
+	GPIO_I2C_PIN_SETUP(fuel);
+	i2c_register_board_info(I2C_FUEL, i2c_devs_fuel,
+				ARRAY_SIZE(i2c_devs_fuel));
+
+#ifdef CONFIG_EXYNOS4_DEV_DWMCI
+	exynos_dwmci_set_platdata(&exynos_dwmci_pdata, 0);
+#else
+	s3c_mshci_set_platdata(&exynos4_mshc_pdata);
+#endif
+	s3c_sdhci2_set_platdata(&slp_midas_hsmmc2_pdata);
+	s3c_sdhci3_set_platdata(&slp_midas_hsmmc3_pdata);
+#ifdef CONFIG_EXYNOS4_DEV_FIMC_IS
+	exynos4_fimc_is_set_platdata(NULL);
+	exynos4_device_fimc_is.dev.parent = &exynos4_device_pd[PD_ISP].dev;
+#endif
+	/* Init for Naples camera(FIMC) */
+	midas_camera_init();
+#ifdef CONFIG_VIDEO_SLP_DB8131M
+	i2c_register_board_info(I2C_VTCAM, i2c_devs_vtcam,
+				ARRAY_SIZE(i2c_devs_vtcam));
+#endif
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+	/*
+	 * platform device name for fimd driver should be changed
+	 * because we can get source clock with this name.
+	 *
+	 * P.S. refer to sclk_fimd definition of clock-exynos4.c
+	 */
+	s5p_fb_setname(0, "s3cfb");
+	s5p_device_fimd0.dev.parent = &exynos4_device_pd[PD_LCD0].dev;
+#endif
+
+	/* VOL_UP/DOWN keys are not EXTINT. Register them. */
+	s5p_register_gpio_interrupt(GPIO_VOL_UP);
+	s5p_register_gpio_interrupt(GPIO_VOL_DOWN);
+
+	setup_charger_manager(&midas_charger_g_desc);
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+	s5p_tmu_set_platdata(&midas_tmu_data);
+#endif
+
+#ifdef CONFIG_S5P_MIPI_DSI2
+	s5p_device_mipi_dsim0.dev.parent = &exynos4_device_pd[PD_LCD0].dev;
+#endif
+
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+	dev_set_name(&s5p_device_mfc.dev, "s3c-mfc");
+	clk_add_alias("mfc", "s5p-mfc", "mfc", &s5p_device_mfc.dev);
+	s5p_mfc_setname(&s5p_device_mfc, "s5p-mfc");
+#endif
+
+#if defined(CONFIG_VIDEO_MFC5X) || defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+#ifdef CONFIG_EXYNOS_DEV_PD
+	s5p_device_mfc.dev.parent = &exynos4_device_pd[PD_MFC].dev;
+#endif
+	exynos4_mfc_setup_clock(&s5p_device_mfc.dev, 267 * MHZ);
+#endif
+
+	exynos_sysmmu_init();
+
+	/* Disable unused clocks to remove power leakage on idle state */
+	midas_disable_unused_clock();
+
+	platform_add_devices(slp_midas_devices, ARRAY_SIZE(slp_midas_devices));
+
+	/* Extcon */
+	midas_extcon_init();
+
+	midas_fb_init();
+#ifdef CONFIG_MDNIE_SUPPORT
+	exynos4_common_setup_clock("sclk_mdnie", "mout_mpll_user",
+				400 * MHZ, 1);
+#endif
+
+	brcm_wlan_init();
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+	sclk = clk_get(spi1_dev, "dout_spi1");
+	if (IS_ERR(sclk))
+		dev_err(spi1_dev, "failed to get sclk for SPI-1\n");
+	prnt = clk_get(spi1_dev, "mout_mpll_user");
+	if (IS_ERR(prnt))
+		dev_err(spi1_dev, "failed to get prnt\n");
+	if (clk_set_parent(sclk, prnt))
+		pr_err("Unable to set parent %s of clock %s.\n",
+		       prnt->name, sclk->name);
+
+	clk_set_rate(sclk, 800 * 1000 * 1000);
+	clk_put(sclk);
+	clk_put(prnt);
+
+	if (!gpio_request(EXYNOS4_GPB(5), "SPI_CS1")) {
+		gpio_direction_output(EXYNOS4_GPB(5), 1);
+		s3c_gpio_cfgpin(EXYNOS4_GPB(5), S3C_GPIO_SFN(1));
+		s3c_gpio_setpull(EXYNOS4_GPB(5), S3C_GPIO_PULL_UP);
+		exynos_spi_set_info(1, EXYNOS_SPI_SRCCLK_SCLK,
+				     ARRAY_SIZE(spi1_csi));
+	}
+
+	for (gpio = EXYNOS4_GPB(4); gpio < EXYNOS4_GPB(8); gpio++)
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV3);
+
+	spi_register_board_info(spi1_board_info, ARRAY_SIZE(spi1_board_info));
+#endif
+}
+
+MACHINE_START(SLP_PQ, "SLP_NAPLES")
+	.boot_params	= S5P_PA_SDRAM + 0x100,
+	.init_irq	= exynos4_init_irq,
+	.map_io		= midas_map_io,
+	.init_machine	= midas_machine_init,
+	.timer		= &exynos4_timer,
+MACHINE_END
diff -Naur ./arch/arm/mach-exynos/board-slp-pq.c ../../HK_JB/Kernel/arch/arm/mach-exynos/board-slp-pq.c
--- ./arch/arm/mach-exynos/board-slp-pq.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/board-slp-pq.c	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,3187 @@
+/*
+ * linux/arch/arm/mach-exynos/board-slp-pq.c
+ *
+ * Copyright (c) 2011 Samsung Electronics Co., Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/platform_device.h>
+#include <linux/serial_core.h>
+#include <linux/spi/spi.h>
+#include <linux/gpio.h>
+#include <linux/gpio_keys.h>
+#include <linux/i2c.h>
+#include <linux/i2c-gpio.h>
+#include <linux/mmc/host.h>
+#include <linux/regulator/machine.h>
+#include <linux/regulator/fixed.h>
+#include <linux/mfd/wm8994/pdata.h>
+#ifdef CONFIG_LEDS_AAT1290A
+#include <linux/leds-aat1290a.h>
+#endif
+#include <linux/lcd.h>
+#include <linux/lcd-property.h>
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/input.h>
+#include <linux/sensor/sensors_core.h>
+#include <linux/sensor/lsm330dlc_accel.h>
+#include <linux/sensor/lsm330dlc_gyro.h>
+#include <linux/sensor/ak8975.h>
+#include <linux/sensor/gp2a.h>
+#include <linux/sensor/cm36651.h>
+#include <linux/cma.h>
+#include <linux/jack.h>
+#include <linux/uart_select.h>
+#include <linux/utsname.h>
+#include <linux/mfd/max77686.h>
+#include <linux/mfd/max77693.h>
+#include <linux/mfd/max77693-private.h>
+#include <linux/leds-max77693.h>
+#include <linux/battery/max17047_fuelgauge.h>
+#include <linux/power/charger-manager.h>
+#include <linux/sensor/lps331ap.h>
+#include <linux/devfreq/exynos4_bus.h>
+#include <linux/pm_qos_params.h>
+#include <drm/exynos_drm.h>
+#include <linux/printk.h>
+
+#include <asm/mach/arch.h>
+#include <asm/mach-types.h>
+
+#include <plat/regs-serial.h>
+#include <plat/exynos4.h>
+#include <plat/clock.h>
+#include <plat/cpu.h>
+#include <plat/devs.h>
+#include <plat/gpio-cfg.h>
+#include <plat/iic.h>
+#include <plat/pd.h>
+#include <plat/sdhci.h>
+#include <plat/mshci.h>
+#include <plat/ehci.h>
+#include <plat/usbgadget.h>
+#include <plat/s3c64xx-spi.h>
+#include <plat/csis.h>
+#include <plat/udc-hs.h>
+#include <plat/media.h>
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+#include <media/exynos_fimc_is.h>
+#endif
+#include <plat/regs-fb.h>
+#include <plat/fb-core.h>
+#include <plat/mipi_dsim2.h>
+#include <plat/fimd_lite_ext.h>
+#include <plat/hdmi.h>
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC) || defined(CONFIG_VIDEO_MFC5X)
+#include <plat/s5p-mfc.h>
+#endif
+
+#ifdef CONFIG_I2C_SI4705
+#include <linux/si4705_pdata.h>
+#endif
+
+#ifdef CONFIG_VIDEO_JPEG_V2X
+#include <plat/jpeg.h>
+#endif
+
+#include <mach/map.h>
+#include <mach/spi-clocks.h>
+#include <mach/sec_debug.h>
+
+#ifdef CONFIG_SND_SOC_WM8994
+#include <linux/mfd/wm8994/pdata.h>
+#include <linux/mfd/wm8994/gpio.h>
+#endif
+
+#include <mach/midas-power.h>
+#ifdef CONFIG_TOUCHSCREEN_MELFAS_MMS
+#include <linux/melfas_mms_ts.h>
+#endif
+#include <mach/dwmci.h>
+
+#include <mach/bcm47511.h>
+
+#include <mach/regs-pmu.h>
+
+#include <../../../drivers/video/samsung/s3cfb.h>
+#include <mach/dev-sysmmu.h>
+
+#include "board-mobile.h"
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+#include <plat/s5p-tmu.h>
+#include <mach/regs-tmu.h>
+#endif
+
+#ifdef CONFIG_BUSFREQ_OPP
+#include <mach/dev.h>
+#include <mach/ppmu.h>
+#endif
+
+#if defined(CONFIG_BATTERY_SAMSUNG)
+#include <linux/power_supply.h>
+#include <linux/battery/samsung_battery.h>
+#endif
+#include <mach/midas-thermistor.h>
+
+#include <linux/host_notify.h>
+
+#ifdef CONFIG_INPUT_SECBRIDGE
+#include <linux/input/sec-input-bridge.h>
+#endif
+
+enum gpio_i2c {
+	I2C_LAST_HW	= 8, /* I2C0~8 are reserved */
+	I2C_CODEC	= 9, /* I2C9 is reserved for CODEC (hardcoded) */
+	I2C_NFC,
+	I2C_3_TOUCH,
+	I2C_FUEL,
+	I2C_BSENSE,
+	I2C_MSENSE,
+	I2C_MHL		= 15, /* 15 is hardcoded from midas-mhl.c */
+	I2C_MHL_D	= 16, /* 16 is hardcoded from midas-mhl.c */
+	I2C_PSENSE,
+	I2C_IF_PMIC,
+	I2C_FM_RADIO	= 19, /* refer from midas */
+};
+
+enum board_rev {
+	M0_PROXIMA_REV0_0 = 0x3,
+	M0_PROXIMA_REV0_1 = 0x0,
+	M0_REAL_REV0_6 = 0x7,
+	M0_REAL_REV0_6_A = 0x8,
+	SLP_PQ_CMC221_LTE = 0x2,
+	M0_REAL_REV1_0 = 0xb,
+	M0_REAL_REV1_1 = 0xc,
+};
+
+static int hwrevision(int rev)
+{
+	switch (rev) {
+	case 0: return (system_rev == 0x3);
+	case 1: return (system_rev == 0x0);
+	}
+	return 0;
+}
+
+extern int brcm_wlan_init(void);
+/* Following are default values for UCON, ULCON and UFCON UART registers */
+#define SLP_MIDAS_UCON_DEFAULT	(S3C2410_UCON_TXILEVEL |	\
+				 S3C2410_UCON_RXILEVEL |	\
+				 S3C2410_UCON_TXIRQMODE |	\
+				 S3C2410_UCON_RXIRQMODE |	\
+				 S3C2410_UCON_RXFIFO_TOI |	\
+				 S3C2443_UCON_RXERR_IRQEN)
+
+#define SLP_MIDAS_ULCON_DEFAULT	S3C2410_LCON_CS8
+
+#define SLP_MIDAS_UFCON_DEFAULT	(S3C2410_UFCON_FIFOMODE |	\
+				 S5PV210_UFCON_TXTRIG4 |	\
+				 S5PV210_UFCON_RXTRIG4)
+
+static struct s3c2410_uartcfg slp_midas_uartcfgs[] __initdata = {
+	[0] = {
+		.hwport		= 0,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+	[1] = {
+		.hwport		= 1,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+	[2] = {
+		.hwport		= 2,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+	[3] = {
+		.hwport		= 3,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+};
+
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+static struct s3c64xx_spi_csinfo spi1_csi[] = {
+	[0] = {
+		.line = EXYNOS4_GPB(5),
+		.set_level = gpio_set_value,
+		.fb_delay = 0x2,
+	},
+};
+
+static struct spi_board_info spi1_board_info[] __initdata = {
+	{
+		.modalias = "s5c73m3_spi",
+		.platform_data = NULL,
+		.max_speed_hz = 50000000,
+		.bus_num = 1,
+		.chip_select = 0,
+		.mode = SPI_MODE_0,
+		.controller_data = &spi1_csi[0],
+	}
+};
+#endif
+
+#ifdef CONFIG_EXYNOS4_DEV_DWMCI
+#define DIV_FSYS3	(S5P_VA_CMU + 0x0C54C)
+static void exynos_dwmci_cfg_gpio(int width)
+{
+	unsigned int gpio;
+
+	for (gpio = EXYNOS4_GPK0(0); gpio < EXYNOS4_GPK0(2); gpio++) {
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+	}
+
+	width = (1 << width);
+
+	switch (width) {
+	case 8:
+		for (gpio = EXYNOS4_GPK1(3); gpio <= EXYNOS4_GPK1(6); gpio++) {
+			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(4));
+			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+		}
+	case 4:
+		for (gpio = EXYNOS4_GPK0(3); gpio <= EXYNOS4_GPK0(6); gpio++) {
+			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
+			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+		}
+		break;
+	case 1:
+		gpio = EXYNOS4_GPK0(3);
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+
+		/* Workaround
+		 * NOTE : In future, should be modified bootloader
+		 * Set this value when 1-bit buswidth(it's initial time)*/
+		__raw_writel(0x1, DIV_FSYS3);
+	default:
+		break;
+	}
+}
+
+/*
+ * block setting of dwmci
+ * max_segs = PAGE_SIZE / size of IDMAC desc,
+ * max_blk_size = 512,
+ * max_blk_count = 65536,
+ * max_seg_size = PAGE_SIZE,
+ * max_req_size = max_seg_size * max_blk_count
+ **/
+static struct block_settings exynos_dwmci_blk_setting = {
+	.max_segs		= 0x1000,
+	.max_blk_size		= 0x200,
+	.max_blk_count		= 0x10000,
+	.max_seg_size		= 0x1000,
+	.max_req_size		= 0x1000 * 0x10000,
+};
+
+static struct dw_mci_board exynos_dwmci_pdata __initdata = {
+	.num_slots		= 1,
+	.quirks			= DW_MCI_QUIRK_BROKEN_CARD_DETECTION |
+				DW_MCI_QUIRK_HIGHSPEED,
+	.bus_hz			= 100 * 1000 * 1000,
+	.caps			= MMC_CAP_UHS_DDR50 | MMC_CAP_1_8V_DDR |
+				MMC_CAP_8_BIT_DATA | MMC_CAP_CMD23,
+	.caps2			= MMC_CAP2_PACKED_CMD,
+	.detect_delay_ms	= 200,
+	.hclk_name		= "dwmci",
+	.cclk_name		= "sclk_dwmci",
+	.cfg_gpio		= exynos_dwmci_cfg_gpio,
+	.blk_settings		= &exynos_dwmci_blk_setting,
+	.buf_size		= PAGE_SIZE << 4,
+};
+#else
+static struct s3c_mshci_platdata exynos4_mshc_pdata __initdata = {
+	.cd_type                = S3C_MSHCI_CD_PERMANENT,
+	.fifo_depth		= 0x80,
+	.max_width              = 8,
+	.host_caps              = MMC_CAP_8_BIT_DATA | MMC_CAP_1_8V_DDR |
+				  MMC_CAP_UHS_DDR50 | MMC_CAP_CMD23,
+	.host_caps2		= MMC_CAP2_PACKED_CMD,
+};
+#endif
+
+static struct s3c_sdhci_platdata slp_midas_hsmmc2_pdata __initdata = {
+	.cd_type                = S3C_SDHCI_CD_GPIO,
+	.ext_cd_gpio            = EXYNOS4_GPX3(4),
+	.ext_cd_gpio_invert	= true,
+	.clk_type		= S3C_SDHCI_CLK_DIV_EXTERNAL,
+	.max_width		= 4,
+	.host_caps		= MMC_CAP_4_BIT_DATA,
+	.vmmc_name		= "vtf_2.8v",
+};
+
+#ifdef CONFIG_LEDS_AAT1290A
+static int aat1290a_initGpio(void)
+{
+	int err;
+
+	err = gpio_request(GPIO_CAM_SW_EN, "CAM_SW_EN");
+	if (err) {
+		printk(KERN_ERR "failed to request CAM_SW_EN\n");
+		return -EPERM;
+	}
+	gpio_direction_output(GPIO_CAM_SW_EN, 1);
+
+	return 0;
+}
+
+static void aat1290a_switch(int enable)
+{
+	gpio_set_value(GPIO_CAM_SW_EN, enable);
+}
+
+static int aat1290a_setGpio(void)
+{
+	int err;
+
+	err = gpio_request(GPIO_TORCH_EN, "TORCH_EN");
+	if (err) {
+		printk(KERN_ERR "failed to request TORCH_EN\n");
+		return -EPERM;
+	}
+	gpio_direction_output(GPIO_TORCH_EN, 0);
+	err = gpio_request(GPIO_TORCH_SET, "TORCH_SET");
+	if (err) {
+		printk(KERN_ERR "failed to request TORCH_SET\n");
+		gpio_free(GPIO_TORCH_EN);
+		return -EPERM;
+	}
+	gpio_direction_output(GPIO_TORCH_SET, 0);
+
+	return 0;
+}
+
+static int aat1290a_freeGpio(void)
+{
+	gpio_free(GPIO_TORCH_EN);
+	gpio_free(GPIO_TORCH_SET);
+
+	return 0;
+}
+
+static void aat1290a_torch_en(int onoff)
+{
+	gpio_set_value(GPIO_TORCH_EN, onoff);
+}
+
+static void aat1290a_torch_set(int onoff)
+{
+	gpio_set_value(GPIO_TORCH_SET, onoff);
+}
+
+static struct aat1290a_led_platform_data aat1290a_led_data = {
+	.brightness = TORCH_BRIGHTNESS_50,
+	.status	= STATUS_UNAVAILABLE,
+	.switch_sel = aat1290a_switch,
+	.initGpio = aat1290a_initGpio,
+	.setGpio = aat1290a_setGpio,
+	.freeGpio = aat1290a_freeGpio,
+	.torch_en = aat1290a_torch_en,
+	.torch_set = aat1290a_torch_set,
+};
+
+static struct platform_device s3c_device_aat1290a_led = {
+	.name	= "aat1290a-led",
+	.id	= -1,
+	.dev	= {
+		.platform_data	= &aat1290a_led_data,
+	},
+};
+#endif
+
+static DEFINE_MUTEX(notify_lock);
+
+/* FIXME: For coexistence of both slp-pq and redwood board. Need to fix */
+#define DEFINE_MMC_CARD_NOTIFIER(num) \
+void (*hsmmc##num##_notify_func)(struct platform_device *, int state); \
+static int ext_cd_init_hsmmc##num(void (*notify_func)( \
+			struct platform_device *, int state)) \
+{ \
+	mutex_lock(&notify_lock); \
+	WARN_ON(hsmmc##num##_notify_func); \
+	hsmmc##num##_notify_func = notify_func; \
+	mutex_unlock(&notify_lock); \
+	return 0; \
+} \
+static int ext_cd_cleanup_hsmmc##num(void (*notify_func)( \
+			struct platform_device *, int state)) \
+{ \
+	mutex_lock(&notify_lock); \
+	WARN_ON(hsmmc##num##_notify_func != notify_func); \
+	hsmmc##num##_notify_func = NULL; \
+	mutex_unlock(&notify_lock); \
+	return 0; \
+}
+
+DEFINE_MMC_CARD_NOTIFIER(3)
+
+/*
+ * call this when you need sd stack to recognize insertion or removal of card
+ * that can't be told by SDHCI regs
+ */
+
+void mmc_force_presence_change(struct platform_device *pdev)
+{
+	void (*notify_func)(struct platform_device *, int state) = NULL;
+	mutex_lock(&notify_lock);
+	if (pdev == &s3c_device_hsmmc3)
+		notify_func = hsmmc3_notify_func;
+
+	if (notify_func)
+		notify_func(pdev, 1);
+	else
+		pr_warn("%s: called for device with no notifier\n", __func__);
+	mutex_unlock(&notify_lock);
+}
+EXPORT_SYMBOL_GPL(mmc_force_presence_change);
+
+static struct s3c_sdhci_platdata slp_midas_hsmmc3_pdata __initdata = {
+/* new code for brm4334 */
+	.cd_type	= S3C_SDHCI_CD_EXTERNAL,
+	.clk_type	= S3C_SDHCI_CLK_DIV_EXTERNAL,
+	.pm_flags	= S3C_SDHCI_PM_IGNORE_SUSPEND_RESUME,
+	.ext_cd_init	= ext_cd_init_hsmmc3,
+	.ext_cd_cleanup	= ext_cd_cleanup_hsmmc3,
+};
+
+#ifdef CONFIG_DRM_EXYNOS
+static struct resource exynos_drm_resource[] = {
+	[0] = {
+		.start = IRQ_FIMD0_VSYNC,
+		.end   = IRQ_FIMD0_VSYNC,
+		.flags = IORESOURCE_IRQ,
+	},
+};
+
+static struct platform_device exynos_drm_device = {
+	.name	= "exynos-drm",
+	.id	= -1,
+	.num_resources	  = ARRAY_SIZE(exynos_drm_resource),
+	.resource	  = exynos_drm_resource,
+	.dev	= {
+		.dma_mask = &exynos_drm_device.dev.coherent_dma_mask,
+		.coherent_dma_mask = 0xffffffffUL,
+	}
+};
+#endif
+
+enum fixed_regulator_id {
+	FIXED_REG_ID_LCD = 0,
+	FIXED_REG_ID_HDMI = 1,
+};
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+static struct exynos_drm_fimd_pdata drm_fimd_pdata = {
+	.panel = {
+		.timing	= {
+			.xres		= 720,
+			.yres		= 1280,
+			.hsync_len	= 5,
+			.left_margin	= 5,
+			.right_margin	= 5,
+			.vsync_len	= 2,
+			.upper_margin	= 1,
+			.lower_margin	= 13,
+			.refresh	= 60,
+		},
+		.width_mm	= 58,
+		.height_mm	= 103,
+	},
+	.vidcon0		= VIDCON0_VIDOUT_RGB | VIDCON0_PNRMODE_RGB,
+	.vidcon1		= VIDCON1_INV_VCLK,
+	.default_win		= 3,
+	.bpp			= 32,
+	.dynamic_refresh	= 0,
+	.high_freq		= 1,
+};
+
+#ifdef CONFIG_MDNIE_SUPPORT
+static struct resource exynos4_fimd_lite_resource[] = {
+	[0] = {
+		.start	= EXYNOS4_PA_LCD_LITE0,
+		.end	= EXYNOS4_PA_LCD_LITE0 + S5P_SZ_LCD_LITE0 - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= IRQ_LCD_LITE0,
+		.end	= IRQ_LCD_LITE0,
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct resource exynos4_mdnie_resource[] = {
+	[0] = {
+		.start	= EXYNOS4_PA_MDNIE0,
+		.end	= EXYNOS4_PA_MDNIE0 + S5P_SZ_MDNIE0 - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+};
+
+static struct mdnie_platform_data exynos4_mdnie_pdata = {
+	.width			= 720,
+	.height			= 1280,
+};
+
+static struct s5p_fimd_ext_device exynos4_fimd_lite_device = {
+	.name			= "fimd_lite",
+	.id			= -1,
+	.num_resources		= ARRAY_SIZE(exynos4_fimd_lite_resource),
+	.resource		= exynos4_fimd_lite_resource,
+	.dev			= {
+		.platform_data	= &drm_fimd_pdata,
+	},
+};
+
+static struct s5p_fimd_ext_device exynos4_mdnie_device = {
+	.name			= "mdnie",
+	.id			= -1,
+	.num_resources		= ARRAY_SIZE(exynos4_mdnie_resource),
+	.resource		= exynos4_mdnie_resource,
+	.dev			= {
+		.platform_data	= &exynos4_mdnie_pdata,
+	},
+};
+
+/* FIXME:!! why init at this point ? */
+static int exynos4_common_setup_clock(const char *sclk_name,
+	const char *pclk_name, unsigned long rate, unsigned int rate_set)
+{
+	struct clk *sclk = NULL;
+	struct clk *pclk = NULL;
+
+	sclk = clk_get(NULL, sclk_name);
+	if (IS_ERR(sclk)) {
+		printk(KERN_ERR "failed to get %s clock.\n", sclk_name);
+		goto err_clk;
+	}
+
+	pclk = clk_get(NULL, pclk_name);
+	if (IS_ERR(pclk)) {
+		printk(KERN_ERR "failed to get %s clock.\n", pclk_name);
+		goto err_clk;
+	}
+
+	clk_set_parent(sclk, pclk);
+
+	printk(KERN_INFO "set parent clock of %s to %s\n", sclk_name,
+			pclk_name);
+	if (!rate_set)
+		goto set_end;
+
+	if (!rate)
+		rate = 200 * MHZ;
+
+	clk_set_rate(sclk, rate);
+
+set_end:
+	clk_put(sclk);
+	clk_put(pclk);
+
+	return 0;
+
+err_clk:
+	clk_put(sclk);
+	clk_put(pclk);
+
+	return -EINVAL;
+
+}
+#endif
+
+static struct regulator_consumer_supply lcd_supplies[] = {
+	REGULATOR_SUPPLY("VDD3", "s6e8aa0"),
+};
+
+static struct regulator_init_data lcd_fixed_reg_initdata = {
+	.constraints = {
+		.valid_ops_mask = REGULATOR_CHANGE_STATUS,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(lcd_supplies),
+	.consumer_supplies = lcd_supplies,
+};
+
+static struct fixed_voltage_config lcd_config = {
+	.init_data = &lcd_fixed_reg_initdata,
+	.microvolts = 2200000,
+	.supply_name = "VDD3",
+	.gpio = GPIO_LCD_22V_EN_00,
+	.enable_high = 1,
+	.enabled_at_boot = 1,
+};
+
+static struct platform_device lcd_fixed_reg_device = {
+	.name = "reg-fixed-voltage",
+	.id = FIXED_REG_ID_LCD,
+	.dev = {
+		.platform_data = &lcd_config,
+	},
+};
+
+static int reset_lcd(struct lcd_device *ld)
+{
+	static unsigned int first = 1;
+	int reset_gpio = -1;
+
+	reset_gpio = EXYNOS4_GPY4(5);
+
+	if (first) {
+		gpio_request(reset_gpio, "MLCD_RST");
+		first = 0;
+	}
+
+	mdelay(10);
+	gpio_direction_output(reset_gpio, 0);
+	mdelay(10);
+	gpio_direction_output(reset_gpio, 1);
+
+	dev_info(&ld->dev, "reset completed.\n");
+
+	return 0;
+}
+
+static struct lcd_property s6e8aa0_property = {
+	.flip = LCD_PROPERTY_FLIP_NONE,
+	.dynamic_refresh = false,
+};
+
+static struct lcd_platform_data s6e8aa0_pdata = {
+	.reset			= reset_lcd,
+	.reset_delay		= 25,
+	.power_off_delay	= 120,
+	.power_on_delay	= 120,
+	.lcd_enabled		= 1,
+	.pdata	= &s6e8aa0_property,
+};
+
+static void lcd_cfg_gpio(void)
+{
+	int reg;
+
+	if (hwrevision(1)) {
+		/* LCD_EN */
+		s3c_gpio_cfgpin(GPIO_LCD_22V_EN_00, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_LCD_22V_EN_00, S3C_GPIO_PULL_NONE);
+	}
+
+	reg = __raw_readl(S3C_VA_SYS + 0x210);
+	reg |= 1 << 1;
+	__raw_writel(reg, S3C_VA_SYS + 0x210);
+
+	return;
+}
+
+#ifdef CONFIG_S5P_MIPI_DSI2
+static struct mipi_dsim_config dsim_config = {
+	.e_interface		= DSIM_VIDEO,
+	.e_virtual_ch		= DSIM_VIRTUAL_CH_0,
+	.e_pixel_format		= DSIM_24BPP_888,
+	.e_burst_mode		= DSIM_BURST_SYNC_EVENT,
+	.e_no_data_lane		= DSIM_DATA_LANE_4,
+	.e_byte_clk		= DSIM_PLL_OUT_DIV8,
+	.cmd_allow		= 11,
+
+	/*
+	 * ===========================================
+	 * |    P    |    M    |    S    |    MHz    |
+	 * -------------------------------------------
+	 * |    3    |   100   |    3    |    100    |
+	 * |    3    |   100   |    2    |    200    |
+	 * |    3    |    63   |    1    |    252    |
+	 * |    4    |   100   |    1    |    300    |
+	 * |    4    |   110   |    1    |    330    |
+	 * |   12    |   350   |    1    |    350    |
+	 * |    3    |   100   |    1    |    400    |
+	 * |    4    |   150   |    1    |    450    |
+	 * |    3    |   120   |    1    |    480    |
+	 * |   12    |   250   |    0    |    500    |
+	 * |    4    |   100   |    0    |    600    |
+	 * |    3    |    81   |    0    |    648    |
+	 * |    3    |    88   |    0    |    704    |
+	 * |    3    |    90   |    0    |    720    |
+	 * |    3    |   100   |    0    |    800    |
+	 * |   12    |   425   |    0    |    850    |
+	 * |    4    |   150   |    0    |    900    |
+	 * |   12    |   475   |    0    |    950    |
+	 * |    6    |   250   |    0    |   1000    |
+	 * -------------------------------------------
+	 */
+
+	.p			= 3,
+	.m			= 125,
+	.s			= 1,
+
+	/* D-PHY PLL stable time spec :min = 200usec ~ max 400usec */
+	.pll_stable_time	= 500,
+
+	/* escape clk : 10MHz */
+	.esc_clk		= 20 * 1000000,
+
+	/* stop state holding counter after bta change count 0 ~ 0xfff */
+	.stop_holding_cnt	= 0,
+	/* bta timeout 0 ~ 0xff */
+	.bta_timeout		= 0xff,
+	/* lp rx timeout 0 ~ 0xffff */
+	.rx_timeout		= 0xffff,
+};
+
+static struct s5p_platform_mipi_dsim dsim_platform_data = {
+	/* already enabled at boot loader. FIXME!!! */
+	.enabled		= true,
+	.phy_enable		= s5p_dsim_phy_enable,
+	.dsim_config		= &dsim_config,
+};
+
+static struct mipi_dsim_lcd_device mipi_lcd_device = {
+	.name			= "s6e8aa0",
+	.id			= -1,
+	.bus_id			= 0,
+
+	.platform_data		= (void *)&s6e8aa0_pdata,
+};
+#endif
+
+static void __init midas_fb_init(void)
+{
+#ifdef CONFIG_S5P_MIPI_DSI2
+	struct s5p_platform_mipi_dsim *dsim_pdata;
+
+	dsim_pdata = (struct s5p_platform_mipi_dsim *)&dsim_platform_data;
+	strcpy(dsim_pdata->lcd_panel_name, "s6e8aa0");
+	dsim_pdata->lcd_panel_info = (void *)&drm_fimd_pdata.panel.timing;
+
+	s5p_mipi_dsi_register_lcd_device(&mipi_lcd_device);
+	if (hwrevision(1))
+		platform_device_register(&lcd_fixed_reg_device);
+#ifdef CONFIG_MDNIE_SUPPORT
+	s5p_fimd_ext_device_register(&exynos4_mdnie_device);
+	s5p_fimd_ext_device_register(&exynos4_fimd_lite_device);
+	exynos4_common_setup_clock("sclk_mdnie", "mout_mpll_user",
+				400 * MHZ, 1);
+#endif
+	s5p_device_mipi_dsim0.dev.platform_data = (void *)&dsim_platform_data;
+	platform_device_register(&s5p_device_mipi_dsim0);
+#endif
+
+	s5p_device_fimd0.dev.platform_data = &drm_fimd_pdata;
+	lcd_cfg_gpio();
+}
+
+static unsigned long fbmem_start;
+static int __init early_fbmem(char *p)
+{
+	char *endp;
+	unsigned long size;
+
+	if (!p)
+		return -EINVAL;
+
+	size = memparse(p, &endp);
+	if (*endp == '@')
+		fbmem_start = memparse(endp + 1, &endp);
+
+	return endp > p ? 0 : -EINVAL;
+}
+early_param("fbmem", early_fbmem);
+#endif
+
+#ifdef CONFIG_DRM_EXYNOS_HDMI
+/* I2C HDMIPHY */
+static struct s3c2410_platform_i2c hdmiphy_i2c_data __initdata = {
+	.bus_num	= 8,
+	.flags		= 0,
+	.slave_addr	= 0x10,
+	.frequency	= 100*1000,
+	.sda_delay	= 100,
+};
+
+static struct i2c_board_info i2c_hdmiphy_devs[] __initdata = {
+	{
+		/* hdmiphy */
+		I2C_BOARD_INFO("s5p_hdmiphy", (0x70 >> 1)),
+	},
+};
+
+static struct exynos_drm_hdmi_pdata drm_hdmi_pdata = {
+	.cfg_hpd	= s5p_hdmi_cfg_hpd,
+	.get_hpd	= s5p_hdmi_get_hpd,
+};
+
+static struct exynos_drm_common_hdmi_pd drm_common_hdmi_pdata = {
+	.hdmi_dev	= &s5p_device_hdmi.dev,
+	.mixer_dev	= &s5p_device_mixer.dev,
+};
+
+static struct platform_device exynos_drm_hdmi_device = {
+	.name	= "exynos-drm-hdmi",
+	.dev	= {
+		.platform_data = &drm_common_hdmi_pdata,
+	},
+};
+
+static void midas_tv_init(void)
+{
+	/* HDMI PHY */
+	s5p_i2c_hdmiphy_set_platdata(&hdmiphy_i2c_data);
+	i2c_register_board_info(8, i2c_hdmiphy_devs,
+				ARRAY_SIZE(i2c_hdmiphy_devs));
+
+	gpio_request(GPIO_HDMI_HPD, "HDMI_HPD");
+	gpio_direction_input(GPIO_HDMI_HPD);
+	s3c_gpio_cfgpin(GPIO_HDMI_HPD, S3C_GPIO_SFN(0x3));
+	s3c_gpio_setpull(GPIO_HDMI_HPD, S3C_GPIO_PULL_DOWN);
+
+#ifdef CONFIG_EXYNOS_DEV_PD
+	s5p_device_hdmi.dev.parent = &exynos4_device_pd[PD_TV].dev;
+	s5p_device_mixer.dev.parent = &exynos4_device_pd[PD_TV].dev;
+#endif
+	s5p_device_hdmi.dev.platform_data = &drm_hdmi_pdata;
+}
+
+/* FIXME:!! must move to midas-mhl.c */
+#ifndef CONFIG_HDMI_HPD
+/* Dummy function */
+void mhl_hpd_handler(bool onoff)
+{
+	printk(KERN_INFO "hpd(%d)\n", onoff);
+}
+EXPORT_SYMBOL(mhl_hpd_handler);
+#endif
+#endif
+
+static struct platform_device exynos_drm_vidi_device = {
+	.name	= "exynos-drm-vidi",
+};
+
+#ifdef CONFIG_CPU_FREQ_GOV_ONDEMAND_FLEXRATE
+static void flexrate_work(struct work_struct *work)
+{
+	cpufreq_ondemand_flexrate_request(10000, 10);
+}
+static DECLARE_WORK(flex_work, flexrate_work);
+#endif
+
+#include <linux/pm_qos_params.h>
+static struct pm_qos_request_list busfreq_qos;
+static void flexrate_qos_cancel(struct work_struct *work)
+{
+	pm_qos_update_request(&busfreq_qos, 0);
+}
+
+static DECLARE_DELAYED_WORK(busqos_work, flexrate_qos_cancel);
+
+static void tsp_request_qos(void *data)
+{
+#ifdef CONFIG_CPU_FREQ_GOV_ONDEMAND_FLEXRATE
+	if (!work_pending(&flex_work))
+		schedule_work_on(0, &flex_work);
+#endif
+	/* Guarantee that the bus runs at >= 266MHz */
+	if (!pm_qos_request_active(&busfreq_qos))
+		pm_qos_add_request(&busfreq_qos, PM_QOS_BUS_DMA_THROUGHPUT,
+				   266000);
+	else {
+		cancel_delayed_work_sync(&busqos_work);
+		pm_qos_update_request(&busfreq_qos, 266000);
+	}
+
+	/* Cancel the QoS request after 1/10 sec */
+	schedule_delayed_work_on(0, &busqos_work, HZ / 5);
+}
+
+#ifdef CONFIG_TOUCHSCREEN_MELFAS_MMS
+/* MELFAS TSP */
+static bool enabled;
+static int melfas_mms_power(int on)
+{
+	struct regulator *regulator_avdd;
+	struct regulator *regulator_iovdd;
+
+	if (enabled == on)
+		return 0;
+
+	/* Analog-Panel Power: 3.3V */
+	regulator_avdd = regulator_get(NULL, "touch");
+	if (IS_ERR(regulator_avdd))
+		return PTR_ERR(regulator_avdd);
+
+	/* IO Logic Power: 1.8V */
+	regulator_iovdd = regulator_get(NULL, "touch_1.8v");
+	if (IS_ERR(regulator_iovdd)) {
+		regulator_put(regulator_avdd);
+		return PTR_ERR(regulator_iovdd);
+	}
+
+	printk(KERN_DEBUG "[TSP] %s %s\n", __func__, on ? "on" : "off");
+
+	if (on) {
+		regulator_enable(regulator_avdd);
+		regulator_enable(regulator_iovdd);
+	} else {
+		if (regulator_is_enabled(regulator_iovdd))
+			regulator_disable(regulator_iovdd);
+		if (regulator_is_enabled(regulator_avdd))
+			regulator_disable(regulator_avdd);
+	}
+
+	enabled = on;
+	regulator_put(regulator_avdd);
+	regulator_put(regulator_iovdd);
+
+	return 0;
+}
+
+static int is_melfas_mms_vdd_on(void)
+{
+	int ret;
+	/* 3.3V */
+	static struct regulator *regulator;
+
+	if (!regulator) {
+		regulator = regulator_get(NULL, "touch");
+		if (IS_ERR(regulator)) {
+			ret = PTR_ERR(regulator);
+			pr_err("could not get touch, rc = %d\n", ret);
+			return ret;
+		}
+	}
+
+	if (regulator_is_enabled(regulator))
+		return 1;
+	else
+		return 0;
+}
+
+static int melfas_mms_mux_fw_flash(bool to_gpios)
+{
+	pr_info("%s:to_gpios=%d\n", __func__, to_gpios);
+
+	/* TOUCH_EN is always an output */
+	if (to_gpios) {
+		if (gpio_request(GPIO_TSP_SCL_18V, "GPIO_TSP_SCL"))
+			pr_err("failed to request gpio(GPIO_TSP_SCL)\n");
+		if (gpio_request(GPIO_TSP_SDA_18V, "GPIO_TSP_SDA"))
+			pr_err("failed to request gpio(GPIO_TSP_SDA)\n");
+
+		gpio_direction_output(GPIO_TSP_INT, 0);
+		s3c_gpio_cfgpin(GPIO_TSP_INT, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_TSP_INT, S3C_GPIO_PULL_NONE);
+
+		gpio_direction_output(GPIO_TSP_SCL_18V, 0);
+		s3c_gpio_cfgpin(GPIO_TSP_SCL_18V, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_TSP_SCL_18V, S3C_GPIO_PULL_NONE);
+
+		gpio_direction_output(GPIO_TSP_SDA_18V, 0);
+		s3c_gpio_cfgpin(GPIO_TSP_SDA_18V, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_TSP_SDA_18V, S3C_GPIO_PULL_NONE);
+
+	} else {
+		gpio_direction_output(GPIO_TSP_INT, 1);
+		gpio_direction_input(GPIO_TSP_INT);
+		s3c_gpio_cfgpin(GPIO_TSP_INT, S3C_GPIO_SFN(0xf));
+		/*s3c_gpio_cfgpin(GPIO_TSP_INT, S3C_GPIO_INPUT); */
+		s3c_gpio_setpull(GPIO_TSP_INT, S3C_GPIO_PULL_NONE);
+		/*S3C_GPIO_PULL_UP */
+
+		gpio_direction_output(GPIO_TSP_SCL_18V, 1);
+		gpio_direction_input(GPIO_TSP_SCL_18V);
+		s3c_gpio_cfgpin(GPIO_TSP_SCL_18V, S3C_GPIO_SFN(3));
+		s3c_gpio_setpull(GPIO_TSP_SCL_18V, S3C_GPIO_PULL_NONE);
+
+		gpio_direction_output(GPIO_TSP_SDA_18V, 1);
+		gpio_direction_input(GPIO_TSP_SDA_18V);
+		s3c_gpio_cfgpin(GPIO_TSP_SDA_18V, S3C_GPIO_SFN(3));
+		s3c_gpio_setpull(GPIO_TSP_SDA_18V, S3C_GPIO_PULL_NONE);
+
+		gpio_free(GPIO_TSP_SCL_18V);
+		gpio_free(GPIO_TSP_SDA_18V);
+	}
+	return 0;
+}
+
+
+static struct tsp_callbacks *charger_callbacks;
+static struct tsp_callbacks {
+	void (*inform_charger)(struct tsp_callbacks *, bool);
+};
+
+static void tsp_charger_infom(bool en)
+{
+	if (charger_callbacks && charger_callbacks->inform_charger)
+		charger_callbacks->inform_charger(charger_callbacks, en);
+}
+
+static void melfas_register_callback(void *cb)
+{
+	charger_callbacks = cb;
+	pr_debug("[TSP] melfas_register_callback\n");
+}
+
+static struct melfas_mms_platform_data mms_ts_pdata = {
+	.max_x = 720,
+	.max_y = 1280,
+	.invert_x = 0,
+	.invert_y = 0,
+	.gpio_int = GPIO_TSP_INT,
+	.gpio_scl = GPIO_TSP_SCL_18V,
+	.gpio_sda = GPIO_TSP_SDA_18V,
+	.power = melfas_mms_power,
+	.mux_fw_flash = melfas_mms_mux_fw_flash,
+	.is_vdd_on = is_melfas_mms_vdd_on,
+	.input_event = tsp_request_qos,
+	.register_cb = melfas_register_callback,
+};
+
+static struct melfas_mms_platform_data mms_ts_pdata_rotate = {
+	.max_x = 720,
+	.max_y = 1280,
+	.invert_x = 720,
+	.invert_y = 1280,
+	.gpio_int = GPIO_TSP_INT,
+	.gpio_scl = GPIO_TSP_SCL_18V,
+	.gpio_sda = GPIO_TSP_SDA_18V,
+	.power = melfas_mms_power,
+	.mux_fw_flash = melfas_mms_mux_fw_flash,
+	.is_vdd_on = is_melfas_mms_vdd_on,
+	.input_event = tsp_request_qos,
+	.register_cb = melfas_register_callback,
+};
+
+static struct i2c_board_info i2c_devs3[] = {
+	{
+	 I2C_BOARD_INFO(MELFAS_TS_NAME, 0x48),
+	 .platform_data = &mms_ts_pdata},
+};
+
+static void __init midas_tsp_set_platdata(struct melfas_mms_platform_data
+	*pdata)
+{
+	if (!pdata)
+		pdata = &mms_ts_pdata;
+
+	i2c_devs3[0].platform_data = pdata;
+}
+
+static void __init midas_tsp_init(void)
+{
+	int gpio;
+	int ret;
+	printk(KERN_INFO "[TSP] midas_tsp_init() is called\n");
+
+	/* TSP_INT: XEINT_4 */
+	gpio = GPIO_TSP_INT;
+	ret = gpio_request(gpio, "TSP_INT");
+	if (ret)
+		pr_err("failed to request gpio(TSP_INT)\n");
+	s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(0xf));
+	s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+
+	s5p_register_gpio_interrupt(gpio);
+	i2c_devs3[0].irq = gpio_to_irq(gpio);
+
+	printk(KERN_INFO "%s touch : %d\n", __func__, i2c_devs3[0].irq);
+
+	i2c_register_board_info(3, i2c_devs3, ARRAY_SIZE(i2c_devs3));
+}
+#endif
+
+static struct i2c_board_info i2c_devs0[] __initdata = {
+	/*
+	 * GPD1(0, 1) / XI2C0SDA/SCL
+	 * PQ_LTE: 8M_CAM, PQ(proxima): NC
+	 */
+};
+
+static int lsm330dlc_accel_get_position(void)
+{
+	int position = 0;
+
+#if defined(CONFIG_MACH_SLP_PQ)
+	if (system_rev == 3 || system_rev == 0)
+		position = 2; /* top/lower-right */
+	else
+		position = 6; /* bottom/lower-right */
+#elif defined(CONFIG_MACH_SLP_PQ_LTE)
+	position = 3; /* top/lower-left */
+#else /* Common */
+	position = 2; /* top/lower-right */
+#endif
+	return position;
+}
+
+static struct accel_platform_data lsm330dlc_accel_pdata = {
+	.accel_get_position = lsm330dlc_accel_get_position,
+	.axis_adjust = true,
+};
+
+static struct i2c_board_info i2c_devs1[] __initdata = {
+	/* PQ_LTE/PQ both use GSENSE_SCL/SDA */
+	{
+		I2C_BOARD_INFO("lsm330dlc_accel", (0x32 >> 1)),
+		.platform_data = &lsm330dlc_accel_pdata,
+	},
+	{
+		I2C_BOARD_INFO("lsm330dlc_gyro", (0xD6 >> 1)),
+	},
+};
+
+static void lsm331dlc_gpio_init(void)
+{
+	int ret = gpio_request(GPIO_GYRO_INT, "lsm330dlc_gyro_irq");
+
+	printk(KERN_INFO "%s\n", __func__);
+
+	if (ret)
+		printk(KERN_ERR "Failed to request gpio lsm330dlc_gyro_irq\n");
+
+	ret = gpio_request(GPIO_GYRO_DE, "lsm330dlc_gyro_data_enable");
+
+	if (ret)
+		printk(KERN_ERR "Failed to request gpio lsm330dlc_gyro_data_enable\n");
+
+	ret = gpio_request(GPIO_ACC_INT, "lsm330dlc_accel_irq");
+
+	if (ret)
+		printk(KERN_ERR "Failed to request gpio lsm330dlc_accel_irq\n");
+
+	/* Accelerometer sensor interrupt pin initialization */
+	s3c_gpio_cfgpin(GPIO_ACC_INT, S3C_GPIO_INPUT);
+	gpio_set_value(GPIO_ACC_INT, 2);
+	s3c_gpio_setpull(GPIO_ACC_INT, S3C_GPIO_PULL_NONE);
+	s5p_gpio_set_drvstr(GPIO_ACC_INT, S5P_GPIO_DRVSTR_LV1);
+	i2c_devs1[0].irq = gpio_to_irq(GPIO_ACC_INT);
+
+	/* Gyro sensor interrupt pin initialization */
+	s3c_gpio_cfgpin(GPIO_GYRO_INT, S3C_GPIO_INPUT);
+	gpio_set_value(GPIO_GYRO_INT, 2);
+	s3c_gpio_setpull(GPIO_GYRO_INT, S3C_GPIO_PULL_NONE);
+	s5p_gpio_set_drvstr(GPIO_GYRO_INT, S5P_GPIO_DRVSTR_LV1);
+	i2c_devs1[1].irq = gpio_to_irq(GPIO_GYRO_INT);
+
+	/* Gyro sensor data enable pin initialization */
+	s3c_gpio_cfgpin(GPIO_GYRO_DE, S3C_GPIO_OUTPUT);
+	gpio_set_value(GPIO_GYRO_DE, 0);
+	s3c_gpio_setpull(GPIO_GYRO_DE, S3C_GPIO_PULL_DOWN);
+	s5p_gpio_set_drvstr(GPIO_GYRO_DE, S5P_GPIO_DRVSTR_LV1);
+}
+
+#ifdef CONFIG_VIBETONZ
+static struct max77693_haptic_platform_data max77693_haptic_pdata = {
+	.max_timeout = 10000,
+	.duty = 37641,
+	.period = 38022,
+	.reg2 = MOTOR_LRA | EXT_PWM | DIVIDER_128,
+	.init_hw = NULL,
+	.motor_en = NULL,
+	.pwm_id = 0,
+	.regulator_name = "vmotor",
+};
+#endif
+
+#ifdef CONFIG_LEDS_MAX77693
+static struct max77693_led_platform_data max77693_led_pdata = {
+	.num_leds = 4,
+
+	.leds[0].name = "leds-sec1",
+	.leds[0].id = MAX77693_FLASH_LED_1,
+	.leds[0].timer = MAX77693_FLASH_TIME_500MS,
+	.leds[0].timer_mode = MAX77693_TIMER_MODE_MAX_TIMER,
+	.leds[0].cntrl_mode = MAX77693_LED_CTRL_BY_FLASHSTB,
+	.leds[0].brightness = 0x1F,
+
+	.leds[1].name = "leds-sec2",
+	.leds[1].id = MAX77693_FLASH_LED_2,
+	.leds[1].timer = MAX77693_FLASH_TIME_500MS,
+	.leds[1].timer_mode = MAX77693_TIMER_MODE_MAX_TIMER,
+	.leds[1].cntrl_mode = MAX77693_LED_CTRL_BY_FLASHSTB,
+	.leds[1].brightness = 0x1F,
+
+	.leds[2].name = "torch-sec1",
+	.leds[2].id = MAX77693_TORCH_LED_1,
+	.leds[2].cntrl_mode = MAX77693_LED_CTRL_BY_FLASHSTB,
+	.leds[2].brightness = 0x0F,
+
+	.leds[3].name = "torch-sec2",
+	.leds[3].id = MAX77693_TORCH_LED_2,
+	.leds[3].cntrl_mode = MAX77693_LED_CTRL_BY_I2C,
+	.leds[3].brightness = 0x0F,
+
+};
+#endif
+
+static struct max77693_charger_reg_data max77693_charger_regs[] = {
+	{
+		/*
+		 * charger setting unlock
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_06,
+		.data = 0x3 << 2,
+	}, {
+		/*
+		 * fast-charge timer : 10hr
+		 * charger restart threshold : disabled
+		 * low-battery prequalification mode : enabled
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_01,
+		.data = (0x4 << 0) | (0x3 << 4),
+	}, {
+		/*
+		 * CHGIN output current limit in OTG mode : 900mA
+		 * fast-charge current : 466mA
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_02,
+		.data = (1 << 7) | 0xf,
+	}, {
+		/*
+		 * TOP off timer setting : 0min
+		 * TOP off current threshold : 100mA
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_03,
+		.data = 0x0,
+	}, {
+		/*
+		* minimum system regulation voltage : 3.6V
+		* primary charge termination voltage : 4.2V
+		*/
+		.addr = MAX77693_CHG_REG_CHG_CNFG_04,
+		.data = 0xd6,
+	}, {
+		/*
+		 * maximum input current limit : 600mA
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_09,
+		.data = 0x1e,
+	}, {
+		/*
+		 * VBYPSET 5V for USB HOST
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_11,
+		.data = 0x50,
+	},
+};
+
+static struct max77693_charger_platform_data max77693_charger_pdata = {
+	.init_data = max77693_charger_regs,
+	.num_init_data = ARRAY_SIZE(max77693_charger_regs),
+};
+
+static void max77693_change_top_off_vol(void)
+{
+	int i = 0;
+
+	/*
+	* minimum system regulation voltage : 3.6V
+	* primary charge termination voltage : 4.35V
+	*/
+	for (i = 0; i < max77693_charger_pdata.num_init_data; i++) {
+		if (max77693_charger_pdata.init_data[i].addr ==
+				MAX77693_CHG_REG_CHG_CNFG_04)
+			max77693_charger_pdata.init_data[i].data = 0xdd;
+	}
+
+	return ;
+}
+
+static struct max77693_platform_data midas_max77693_info = {
+	.irq_base	= IRQ_BOARD_IFIC_START,
+	.irq_gpio	= GPIO_IF_PMIC_IRQ,
+	.wakeup		= 1,
+	.muic = &max77693_muic,
+	.regulators = &max77693_regulators,
+	.num_regulators = MAX77693_REG_MAX,
+#ifdef CONFIG_VIBETONZ
+	.haptic_data = &max77693_haptic_pdata,
+#endif
+#ifdef CONFIG_LEDS_MAX77693
+	.led_data = &max77693_led_pdata,
+#endif
+	.charger_data = &max77693_charger_pdata,
+};
+
+/* I2C GPIO: PQ/PQ_LTE use GPM2[0,1] for MAX77693 */
+static struct i2c_gpio_platform_data gpio_i2c_if_pmic = {
+	/* PQ/PQLTE use GPF1(4, 5) */
+	.sda_pin = GPIO_IF_PMIC_SDA,
+	.scl_pin = GPIO_IF_PMIC_SCL,
+};
+
+static struct platform_device device_i2c_if_pmic = {
+	.name = "i2c-gpio",
+	.id = I2C_IF_PMIC,
+	.dev.platform_data = &gpio_i2c_if_pmic,
+};
+
+static struct i2c_board_info i2c_devs_if_pmic[] __initdata = {
+	{
+		I2C_BOARD_INFO("max77693", (0xCC >> 1)),
+		.platform_data = &midas_max77693_info,
+	},
+};
+
+/* Both PQ/PQ_LTE use I2C7 (XPWMTOUT_2/3) for MAX77686 */
+static struct i2c_board_info i2c_devs7[] __initdata = {
+	{
+		I2C_BOARD_INFO("max77686", (0x12 >> 1)),
+		.platform_data	= &exynos4_max77686_info,
+	}
+};
+
+#ifdef CONFIG_USB_EHCI_S5P
+static struct s5p_ehci_platdata smdk4212_ehci_pdata;
+
+static void __init smdk4212_ehci_init(void)
+{
+	struct s5p_ehci_platdata *pdata = &smdk4212_ehci_pdata;
+
+	s5p_ehci_set_platdata(pdata);
+}
+#endif
+
+#ifdef CONFIG_USB_OHCI_S5P
+static struct s5p_ohci_platdata smdk4212_ohci_pdata;
+
+static void __init smdk4212_ohci_init(void)
+{
+	struct s5p_ohci_platdata *pdata = &smdk4212_ohci_pdata;
+
+	s5p_ohci_set_platdata(pdata);
+}
+#endif
+
+/* USB GADGET */
+#ifdef CONFIG_USB_GADGET
+static struct s5p_usbgadget_platdata smdk4212_usbgadget_pdata;
+
+static void __init smdk4212_usbgadget_init(void)
+{
+	struct s5p_usbgadget_platdata *pdata = &smdk4212_usbgadget_pdata;
+
+	s5p_usbgadget_set_platdata(pdata);
+}
+#endif
+
+#ifdef CONFIG_USB_G_SLP
+#include <linux/usb/slp_multi.h>
+static struct slp_multi_func_data midas_slp_multi_funcs[] = {
+	{
+		.name = "mtp",
+		.usb_config_id = USB_CONFIGURATION_DUAL,
+	}, {
+		.name = "acm",
+		.usb_config_id = USB_CONFIGURATION_2,
+	}, {
+		.name = "sdb",
+		.usb_config_id = USB_CONFIGURATION_2,
+	}, {
+		.name = "mass_storage",
+		.usb_config_id = USB_CONFIGURATION_1,
+	}, {
+		.name = "rndis",
+		.usb_config_id = USB_CONFIGURATION_1,
+	}, {
+		.name = "accessory",
+		.usb_config_id = USB_CONFIGURATION_1,
+	},
+};
+
+static struct slp_multi_platform_data midas_slp_multi_pdata = {
+	.nluns	= 2,
+	.funcs = midas_slp_multi_funcs,
+	.nfuncs = ARRAY_SIZE(midas_slp_multi_funcs),
+};
+
+static struct platform_device midas_slp_usb_multi = {
+	.name		= "slp_multi",
+	.id			= -1,
+	.dev		= {
+		.platform_data = &midas_slp_multi_pdata,
+	},
+};
+#endif
+
+#ifdef CONFIG_SND_SOC_WM8994
+/* vbatt device (for WM8994) */
+static struct regulator_consumer_supply vbatt_supplies[] = {
+	REGULATOR_SUPPLY("LDO1VDD", NULL),
+	REGULATOR_SUPPLY("SPKVDD1", NULL),
+	REGULATOR_SUPPLY("SPKVDD2", NULL),
+};
+
+static struct regulator_init_data vbatt_initdata = {
+	.constraints = {
+		.always_on = 1,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(vbatt_supplies),
+	.consumer_supplies = vbatt_supplies,
+};
+
+static struct fixed_voltage_config vbatt_config = {
+	.init_data = &vbatt_initdata,
+	.microvolts = 5000000,
+	.supply_name = "VBATT",
+	.gpio = -EINVAL,
+};
+
+static struct platform_device vbatt_device = {
+	.name = "reg-fixed-voltage",
+	.id = -1,
+	.dev = {
+		.platform_data = &vbatt_config,
+	},
+};
+
+/* I2C GPIO: GPF0(0/1) for CODEC_SDA/SCL */
+static struct regulator_consumer_supply wm1811_ldo1_supplies[] = {
+	REGULATOR_SUPPLY("AVDD1", NULL),
+};
+
+static struct regulator_init_data wm1811_ldo1_initdata = {
+	.constraints = {
+		.name = "WM1811 LDO1",
+		.valid_ops_mask = REGULATOR_CHANGE_STATUS,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(wm1811_ldo1_supplies),
+	.consumer_supplies = wm1811_ldo1_supplies,
+};
+
+static struct regulator_consumer_supply wm1811_ldo2_supplies[] = {
+	REGULATOR_SUPPLY("DCVDD", NULL),
+};
+
+static struct regulator_init_data wm1811_ldo2_initdata = {
+	.constraints = {
+		.name = "WM1811 LDO2",
+		.always_on = true, /* Actually status changed by LDO1 */
+	},
+	.num_consumer_supplies = ARRAY_SIZE(wm1811_ldo2_supplies),
+	.consumer_supplies = wm1811_ldo2_supplies,
+};
+
+static struct wm8994_pdata wm1811_pdata = {
+	.gpio_defaults = {
+		[0] = WM8994_GP_FN_IRQ,   /* GPIO1 IRQ output, CMOS mode */
+		[7] = WM8994_GPN_DIR | WM8994_GP_FN_PIN_SPECIFIC, /* DACDAT3 */
+		[8] = WM8994_CONFIGURE_GPIO |
+			  WM8994_GP_FN_PIN_SPECIFIC, /* ADCDAT3 */
+		[9] = WM8994_CONFIGURE_GPIO |\
+			  WM8994_GP_FN_PIN_SPECIFIC, /* LRCLK3 */
+		[10] = WM8994_CONFIGURE_GPIO |\
+			   WM8994_GP_FN_PIN_SPECIFIC, /* BCLK3 */
+	},
+
+	.irq_base = IRQ_BOARD_CODEC_START,
+
+	/* The enable is shared but assign it to LDO1 for software */
+	.ldo = {
+		{
+			.enable = GPIO_WM8994_LDO,
+			.init_data = &wm1811_ldo1_initdata,
+		},
+		{
+			.init_data = &wm1811_ldo2_initdata,
+		},
+	},
+
+	/* Support external capacitors */
+	/* This works on wm1811a only (board REV06 or above) */
+	.jd_ext_cap = 1,
+
+	/* Regulated mode at highest output voltage */
+	/* 2.0V for micbias2 */
+	.micbias = {0x2f, 0x27},
+
+	.micd_lvl_sel = 0xFF,
+
+	.ldo_ena_always_driven = true,
+	.ldo_ena_delay = 30000,
+
+	/* Disable ground loop noise feedback on lineout1 - NC - */
+	.lineout1fb = 0,
+	/* Enable ground loop noise feedback on lineout2 dock audio */
+	.lineout2fb = 1,
+};
+#endif
+
+static struct i2c_gpio_platform_data gpio_i2c_codec = {
+	.sda_pin = EXYNOS4_GPF0(0),
+	.scl_pin = EXYNOS4_GPF0(1),
+};
+
+static struct platform_device device_i2c_codec = {
+	.name = "i2c-gpio",
+	.id = I2C_CODEC,
+	.dev.platform_data = &gpio_i2c_codec,
+};
+
+static struct i2c_board_info i2c_devs_codec[] __initdata = {
+#ifdef CONFIG_SND_SOC_WM8994
+	{
+		I2C_BOARD_INFO("wm1811", (0x34 >> 1)),	/* Audio CODEC */
+		.platform_data = &wm1811_pdata,
+	},
+#endif
+};
+
+/* I2C4's GPIO: PQ_LTE(CMC_CS) / PQ(NC) / PQ Rev01 (codec) */
+static struct i2c_board_info i2c_devs4[] __initdata = {
+#if defined(CONFIG_MACH_SLP_PQ) && \
+	defined(CONFIG_SND_SOC_WM8994)
+	{
+		I2C_BOARD_INFO("wm1811", (0x34 >> 1)),	/* Audio CODEC */
+		.platform_data = &wm1811_pdata,
+		.irq = IRQ_EINT(30),
+	},
+#endif
+};
+
+/* I2C GPIO: NFC */
+static struct i2c_gpio_platform_data gpio_i2c_nfc = {
+#ifdef CONFIG_MACH_SLP_PQ
+	.sda_pin = GPIO_NFC_SDA_18V,
+	.scl_pin = GPIO_NFC_SCL_18V,
+#elif defined(CONFIG_MACH_SLP_PQ_LTE)
+	.sda_pin = EXYNOS4212_GPM4(1),
+	.scl_pin = EXYNOS4212_GPM4(0),
+#endif
+};
+
+static struct platform_device device_i2c_nfc = {
+	.name = "i2c-gpio",
+	.id = I2C_NFC,
+	.dev.platform_data = &gpio_i2c_nfc,
+};
+
+/* Bluetooth */
+static struct platform_device bcm4334_bluetooth_device = {
+	.name = "bcm4334_bluetooth",
+	.id = -1,
+};
+
+#ifdef CONFIG_MACH_SLP_PQ
+/* BCM47511 GPS */
+static struct bcm47511_platform_data midas_bcm47511_data = {
+	.regpu		= GPIO_GPS_PWR_EN,	/* XM0DATA[15] */
+	.nrst		= GPIO_GPS_nRST,	/* XM0DATA[14] */
+	.uart_rxd	= GPIO_GPS_RXD,		/* XURXD[1] */
+	.gps_cntl	= -1,	/* GPS_CNTL - XM0ADDR[6] */
+	.reg32khz	= "lpo_in",
+};
+
+static struct platform_device midas_bcm47511 = {
+	.name	= "bcm47511",
+	.id	= -1,
+	.dev	= {
+		.platform_data	= &midas_bcm47511_data,
+	},
+};
+#endif
+
+/* I2C GPIO: 3_TOUCH */
+#ifdef CONFIG_MACH_SLP_PQ_LTE
+static struct i2c_gpio_platform_data gpio_i2c_3_touch = {
+	.sda_pin = GPIO_3_TOUCH_SDA,
+	.scl_pin = GPIO_3_TOUCH_SCL,
+};
+
+static struct platform_device device_i2c_3_touch = {
+	.name = "i2c-gpio",
+	.id = I2C_3_TOUCH,
+	.dev.platform_data = &gpio_i2c_3_touch,
+};
+
+static struct i2c_board_info i2c_devs_3_touch[] __initdata = {
+	{
+		I2C_BOARD_INFO("melfas-touchkey", 0x20),
+	},
+};
+#endif
+
+#define GPIO_KEYS(_code, _gpio, _active_low, _iswake, _hook)		\
+{					\
+	.code = _code,			\
+	.gpio = _gpio,	\
+	.active_low = _active_low,		\
+	.type = EV_KEY,			\
+	.wakeup = _iswake,		\
+	.debounce_interval = 10,	\
+	.isr_hook = _hook,			\
+	.value = 1 \
+}
+
+static struct gpio_keys_button midas_buttons[] = {
+	GPIO_KEYS(KEY_VOLUMEUP, GPIO_VOL_UP,
+		  1, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_VOLUMEDOWN, GPIO_VOL_DOWN,
+		  1, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_POWER, GPIO_nPOWER,
+		  1, 1, sec_debug_check_crash_key),
+};
+
+static struct gpio_keys_button midas_06_buttons[] = {
+	GPIO_KEYS(KEY_VOLUMEUP, GPIO_VOL_UP_00,
+		  1, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_VOLUMEDOWN, GPIO_VOL_DOWN_00,
+		  1, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_POWER, GPIO_nPOWER,
+		  1, 1, sec_debug_check_crash_key),
+};
+
+static struct gpio_keys_button midas_10_buttons[] = {
+	GPIO_KEYS(KEY_VOLUMEUP, GPIO_VOL_UP_00,
+		  1, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_VOLUMEDOWN, GPIO_VOL_DOWN_00,
+		  1, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_POWER, GPIO_nPOWER,
+		  1, 1, sec_debug_check_crash_key),
+/*
+ * keep this code for future use.
+ */
+	GPIO_KEYS(KEY_MENU, GPIO_OK_KEY_ANDROID,
+		  1, 1, sec_debug_check_crash_key),
+};
+
+static struct gpio_keys_platform_data midas_gpiokeys_platform_data = {
+	.buttons = midas_buttons,
+	.nbuttons = ARRAY_SIZE(midas_buttons),
+};
+
+static struct platform_device midas_keypad = {
+	.name	= "gpio-keys",
+	.dev	= {
+		.platform_data = &midas_gpiokeys_platform_data,
+	},
+};
+
+#ifdef CONFIG_I2C_SI4705
+static void pq_si4705_reset(int enable)
+{
+	pr_info("%s: enable is %d", __func__, enable);
+	if (enable)
+		gpio_set_value(GPIO_FM_RST, 1);
+	else
+		gpio_set_value(GPIO_FM_RST, 0);
+}
+
+static void pq_si4705_init(void)
+{
+	gpio_request(GPIO_FM_RST, "fmradio_reset");
+	s3c_gpio_cfgpin(GPIO_FM_RST, S3C_GPIO_OUTPUT);
+	gpio_set_value(GPIO_FM_RST, 0);
+}
+
+static struct i2c_gpio_platform_data gpio_i2c_fm_radio = {
+	.sda_pin	= EXYNOS4_GPY0(3),
+	.scl_pin	= EXYNOS4_GPY0(2),
+};
+
+static struct platform_device device_i2c_fm_radio = {
+	.name = "i2c-gpio",
+	.id = I2C_FM_RADIO,
+	.dev.platform_data = &gpio_i2c_fm_radio,
+};
+
+static struct si4705_pdata pq_fm_radio_info = {
+	.reset = pq_si4705_reset,
+	.pdata_values = (SI4705_PDATA_BIT_VOL_STEPS |
+			 SI4705_PDATA_BIT_VOL_TABLE |
+			 SI4705_PDATA_BIT_RSSI_THRESHOLD |
+			 SI4705_PDATA_BIT_SNR_THRESHOLD),
+	.rx_vol_steps = 16,
+	.rx_vol_table = {	0x0, 0x13, 0x16, 0x19,
+				0x1C, 0x1F, 0x22, 0x25,
+				0x28, 0x2B, 0x2E, 0x31,
+				0x34, 0x37, 0x3A, 0x3D	},
+	.rx_seek_tune_rssi_threshold = 0x00,
+	.rx_seek_tune_snr_threshold = 0x01,
+};
+
+static struct i2c_board_info i2c_devs_fm_radio[] __initdata = {
+	{
+		I2C_BOARD_INFO("si4705", 0x22>>1),
+		.platform_data = &pq_fm_radio_info,
+		.irq = IRQ_EINT(11),
+	}
+};
+#endif
+
+#if defined(CONFIG_BATTERY_SAMSUNG)
+static struct samsung_battery_platform_data samsung_battery_pdata = {
+	.charger_name	= "max77693-charger",
+	.fuelgauge_name	= "max17047-fuelgauge",
+	.voltage_max = 4200000,
+	.voltage_min = 3400000,
+
+	.in_curr_limit = 1000,
+	.chg_curr_ta = 1000,
+
+	.chg_curr_usb = 475,
+	.chg_curr_cdp = 1000,
+	.chg_curr_wpc = 475,
+	.chg_curr_dock = 1000,
+	.chg_curr_etc = 475,
+
+	.chng_interval = 30,
+	.chng_susp_interval = 60,
+	.norm_interval = 120,
+	.norm_susp_interval = 7200,
+	.emer_lv1_interval = 30,
+	.emer_lv2_interval = 10,
+
+	.recharge_voltage = 4150000,	/* it will be cacaluated in probe */
+
+	.abstimer_charge_duration = 6 * 60 * 60,
+	.abstimer_charge_duration_wpc = 8 * 60 * 60,
+	.abstimer_recharge_duration = 1.5 * 60 * 60,
+
+	.cb_det_src = CABLE_DET_CHARGER,
+	.overheat_stop_temp = 600,
+	.overheat_recovery_temp = 400,
+	.freeze_stop_temp = -50,
+	.freeze_recovery_temp = 0,
+
+	/* CTIA spec */
+	.ctia_spec  = false,
+
+	/* CTIA temperature spec */
+	.event_time = 10 * 60,
+	.event_overheat_stop_temp = 600,
+	.event_overheat_recovery_temp = 400,
+	.event_freeze_stop_temp = -50,
+	.event_freeze_recovery_temp = 0,
+	.lpm_overheat_stop_temp = 480,
+	.lpm_overheat_recovery_temp = 450,
+	.lpm_freeze_stop_temp = -50,
+	.lpm_freeze_recovery_temp = 0,
+
+	.temper_src = TEMPER_AP_ADC,
+	.temper_ch = 2,
+#ifdef CONFIG_S3C_ADC
+	/* s3c adc driver does not convert raw adc data.
+	 * so, register convert function.
+	 */
+	.covert_adc = convert_adc,
+#endif
+
+	.vf_det_src = VF_DET_CHARGER,
+	.vf_det_ch = 0,	/* if src == VF_DET_ADC */
+	.vf_det_th_l = 500,
+	.vf_det_th_h = 1500,
+
+	.suspend_chging = true,
+
+	.led_indicator = false,
+
+	.battery_standever = false,
+};
+
+static struct platform_device samsung_device_battery = {
+	.name	= "samsung-battery",
+	.id	= -1,
+	.dev.platform_data = &samsung_battery_pdata,
+};
+#endif
+
+
+/* I2C GPIO: Fuel Gauge */
+static struct i2c_gpio_platform_data gpio_i2c_fuel = {
+	/* PQ/PQLTE use GPF1(4, 5) */
+	.sda_pin = GPIO_FUEL_SDA,
+	.scl_pin = GPIO_FUEL_SCL,
+};
+
+static struct platform_device device_i2c_fuel = {
+	.name = "i2c-gpio",
+	.id = I2C_FUEL,
+	.dev.platform_data = &gpio_i2c_fuel,
+};
+
+static struct max17047_platform_data max17047_pdata = {
+	.irq_gpio = GPIO_FUEL_ALERT,
+};
+
+static struct i2c_board_info i2c_devs_fuel[] __initdata = {
+	{
+		I2C_BOARD_INFO("max17047-fuelgauge", 0x36),
+		.platform_data = &max17047_pdata,
+	},
+};
+
+/* I2C GPIO: Barometer (BSENSE) */
+static struct i2c_gpio_platform_data gpio_i2c_bsense = {
+	.sda_pin = GPIO_BSENSE_SDA_18V,
+	.scl_pin = GPIO_BENSE_SCL_18V,
+};
+
+static struct platform_device device_i2c_bsense = {
+	.name = "i2c-gpio",
+	.id = I2C_BSENSE,
+	.dev.platform_data = &gpio_i2c_bsense,
+};
+
+static struct lps331ap_platform_data lps331_pdata = {
+	.irq = GPIO_BARO_INT,
+};
+
+static struct i2c_board_info i2c_devs_bsense[] __initdata = {
+	{
+		I2C_BOARD_INFO(LPS331AP_PRS_DEV_NAME, LPS331AP_PRS_I2C_SAD_H),
+		.platform_data = &lps331_pdata,
+	},
+};
+
+static void lps331ap_gpio_init(void)
+{
+	int ret = gpio_request(GPIO_BARO_INT, "lps331_irq");
+
+	printk(KERN_INFO "%s\n", __func__);
+
+	if (ret)
+		printk(KERN_ERR "Failed to request gpio lps331_irq\n");
+
+	s3c_gpio_cfgpin(GPIO_BARO_INT, S3C_GPIO_INPUT);
+	gpio_set_value(GPIO_BARO_INT, 2);
+	s3c_gpio_setpull(GPIO_BARO_INT, S3C_GPIO_PULL_NONE);
+	s5p_gpio_set_drvstr(GPIO_BARO_INT, S5P_GPIO_DRVSTR_LV1);
+};
+
+/* I2C GPIO: Magnetic (MSENSE) */
+static struct i2c_gpio_platform_data gpio_i2c_msense = {
+	.sda_pin = GPIO_MSENSOR_SDA_18V,
+	.scl_pin = GPIO_MSENSOR_SCL_18V,
+	.udelay = 2, /* 250KHz */
+};
+
+static struct platform_device device_i2c_msense = {
+	.name = "i2c-gpio",
+	.id = I2C_MSENSE,
+	.dev.platform_data = &gpio_i2c_msense,
+};
+
+static struct akm8975_platform_data akm8975_pdata = {
+#ifdef CONFIG_MACH_SLP_PQ
+	.gpio_data_ready_int = GPIO_MSENSOR_INT,
+#else
+	/* CONFIG_MACH_SLP_PQ_LTE */
+	.gpio_data_ready_int = EXYNOS4_GPX2(2),
+#endif
+};
+
+#ifdef CONFIG_BUSFREQ_OPP
+static struct device_domain busfreq;
+
+static struct platform_device exynos4_busfreq = {
+	.id = -1,
+	.name = "exynos-busfreq",
+};
+#endif
+
+#ifdef CONFIG_DISPFREQ_OPP
+static struct platform_device exynos4_dispfreq = {
+	.name	= "exynos4-dispfreq",
+	.id		= -1,
+};
+#endif
+
+static struct i2c_board_info i2c_devs_msense[] __initdata = {
+	{
+		I2C_BOARD_INFO("ak8975", 0x0C),
+		.platform_data = &akm8975_pdata,
+	},
+};
+
+#ifdef CONFIG_MACH_SLP_PQ
+static void ak8975c_gpio_init(void)
+{
+	int ret = gpio_request(GPIO_MSENSOR_INT, "gpio_akm_int");
+
+	printk(KERN_INFO "%s\n", __func__);
+
+	if (ret)
+		printk(KERN_ERR "Failed to request gpio akm_int.\n");
+
+	s5p_register_gpio_interrupt(GPIO_MSENSOR_INT);
+	s3c_gpio_setpull(GPIO_MSENSOR_INT, S3C_GPIO_PULL_DOWN);
+	s3c_gpio_cfgpin(GPIO_MSENSOR_INT, S3C_GPIO_SFN(0xF));
+	i2c_devs_msense[0].irq = gpio_to_irq(GPIO_MSENSOR_INT);
+}
+#endif
+
+/* I2C GPIO: MHL */
+static struct i2c_gpio_platform_data gpio_i2c_mhl = {
+	.sda_pin = GPIO_MHL_SDA_1_8V,
+	.scl_pin = GPIO_MHL_SCL_1_8V,
+	.udelay = 3,
+};
+
+static struct platform_device device_i2c_mhl = {
+	.name = "i2c-gpio",
+	.id = I2C_MHL,
+	.dev.platform_data = &gpio_i2c_mhl,
+};
+
+/* I2C GPIO: MHL_D */
+static struct i2c_gpio_platform_data gpio_i2c_mhl_d = {
+	.sda_pin = GPIO_MHL_DSDA_2_8V,
+	.scl_pin = GPIO_MHL_DSCL_2_8V,
+};
+
+static struct platform_device device_i2c_mhl_d = {
+	.name = "i2c-gpio",
+	.id = I2C_MHL_D,
+	.dev.platform_data = &gpio_i2c_mhl_d,
+};
+
+/* I2C GPIO: PS_ALS (PSENSE) */
+static struct i2c_gpio_platform_data gpio_i2c_psense_cm36651 = {
+	.sda_pin = GPIO_RGB_SDA_1_8V,
+	.scl_pin = GPIO_RGB_SCL_1_8V,
+	.udelay = 2, /* 250KHz */
+};
+
+static struct platform_device device_i2c_psense_cm36651 = {
+	.name = "i2c-gpio",
+	.id = I2C_PSENSE,
+	.dev.platform_data = &gpio_i2c_psense_cm36651,
+};
+
+/* I2C GPIO: PS_ALS (PSENSE) */
+static struct i2c_gpio_platform_data gpio_i2c_psense_gp2a = {
+	.sda_pin = GPIO_PS_ALS_SDA_28V,
+	.scl_pin = GPIO_PS_ALS_SCL_28V,
+	.udelay = 2, /* 250KHz */
+};
+
+static struct platform_device device_i2c_psense_gp2a = {
+	.name = "i2c-gpio",
+	.id = I2C_PSENSE,
+	.dev.platform_data = &gpio_i2c_psense_gp2a,
+};
+
+static int proximity_leda_on(bool onoff)
+{
+	printk(KERN_INFO "%s, onoff = %d\n", __func__, onoff);
+
+	gpio_set_value(GPIO_PS_ALS_EN, onoff);
+
+	return 0;
+}
+
+static struct cm36651_platform_data cm36651_pdata = {
+	.cm36651_led_on = proximity_leda_on,
+	.irq = GPIO_PS_ALS_INT,
+};
+
+static struct i2c_board_info i2c_devs_psense_gp2a[] __initdata = {
+	{
+		I2C_BOARD_INFO("gp2a", (0x72 >> 1)),
+	},
+};
+
+static struct i2c_board_info i2c_devs_psense_cm36651[] __initdata = {
+	{
+		I2C_BOARD_INFO("cm36651", (0x30 >> 1)),
+		.platform_data = &cm36651_pdata,
+	},
+};
+
+
+static struct gp2a_platform_data gp2a_pdata = {
+	.gp2a_led_on	= proximity_leda_on,
+	.p_out = GPIO_PS_ALS_INT,
+};
+
+static struct platform_device opt_gp2a = {
+	.name = "gp2a-opt",
+	.id = -1,
+	.dev = {
+		.platform_data = &gp2a_pdata,
+	},
+};
+
+static void optical_gpio_init(void)
+{
+	int ret = gpio_request(GPIO_PS_ALS_EN, "optical_power_supply_on");
+
+	printk(KERN_INFO "%s\n", __func__);
+
+	if (ret)
+		printk(KERN_ERR "Failed to request gpio optical power supply.\n");
+
+	/* configuring for gp2a gpio for LEDA power */
+	s3c_gpio_cfgpin(GPIO_PS_ALS_EN, S3C_GPIO_OUTPUT);
+	gpio_set_value(GPIO_PS_ALS_EN, 0);
+	s3c_gpio_setpull(GPIO_PS_ALS_EN, S3C_GPIO_PULL_NONE);
+
+	s3c_gpio_setpull(GPIO_PS_ALS_INT, S3C_GPIO_PULL_UP);
+}
+
+static struct jack_platform_data midas_jack_data = {
+	.usb_online		= 0,
+	.charger_online	= 0,
+	.hdmi_online	= 0,
+	.earjack_online	= 0,
+	.earkey_online	= 0,
+	.ums_online		= -1,
+	.cdrom_online	= -1,
+	.jig_online		= -1,
+	.host_online	= 0,
+};
+
+static struct platform_device midas_jack = {
+	.name		= "jack",
+	.id			= -1,
+	.dev		= {
+		.platform_data = &midas_jack_data,
+	},
+};
+
+#if defined(CONFIG_ARM_EXYNOS4_BUS_DEVFREQ)
+static struct exynos4_bus_platdata devfreq_bus_pdata = {
+	.threshold = {
+		.upthreshold = 90,
+		.downdifferential = 10,
+	},
+	.polling_ms = 50,
+};
+static struct platform_device devfreq_busfreq = {
+	.name		= "exynos4412-busfreq",
+	.id		= -1,
+	.dev		= {
+		.platform_data = &devfreq_bus_pdata,
+	},
+};
+#endif
+
+#if defined(CONFIG_ARM_EXYNOS4_DISPLAY_DEVFREQ)
+static struct platform_device devfreq_display = {
+	.name		= "exynos4412-display",
+	.id		= -1,
+};
+#endif
+
+/* Uart Select */
+static void midas_set_uart_switch(int path)
+{
+	int gpio;
+
+	gpio = EXYNOS4_GPF2(3);
+	gpio_request(gpio, "UART_SEL");
+
+	/* gpio_high == AP */
+	if (path == UART_SW_PATH_AP)
+		gpio_set_value(gpio, GPIO_LEVEL_HIGH);
+	else if (path == UART_SW_PATH_CP)
+		gpio_set_value(gpio, GPIO_LEVEL_LOW);
+
+	gpio_free(gpio);
+	return;
+}
+
+static int midas_get_uart_switch(void)
+{
+	int val;
+	int gpio;
+
+	gpio = EXYNOS4_GPF2(3);
+	gpio_request(gpio, "UART_SEL");
+	val = gpio_get_value(gpio);
+	gpio_free(gpio);
+
+	/* gpio_high == AP */
+	if (val == GPIO_LEVEL_HIGH)
+		return UART_SW_PATH_AP;
+	else if (val == GPIO_LEVEL_LOW)
+		return UART_SW_PATH_CP;
+	else
+		return UART_SW_PATH_NA;
+}
+
+static struct uart_select_platform_data midas_uart_select_data = {
+	.set_uart_switch	= midas_set_uart_switch,
+	.get_uart_switch	= midas_get_uart_switch,
+};
+
+static struct platform_device midas_uart_select = {
+	.name			= "uart-select",
+	.id			= -1,
+	.dev			= {
+		.platform_data	= &midas_uart_select_data,
+	},
+};
+
+#ifdef CONFIG_INPUT_SECBRIDGE
+/*============================================================
+sec-input-bridge
+/*============================================================*/
+static const struct sec_input_bridge_mkey pq_appslog_mkey_map[] = {
+	{ .type = EV_KEY , .code = KEY_VOLUMEUP			},
+	{ .type = EV_KEY , .code = KEY_VOLUMEDOWN			},
+	{ .type = EV_KEY , .code = KEY_VOLUMEUP			},
+	{ .type = EV_KEY , .code = KEY_VOLUMEDOWN			},
+	{ .type = EV_KEY , .code = KEY_POWER				},
+	{ .type = EV_KEY , .code = KEY_VOLUMEDOWN			},
+	{ .type = EV_KEY , .code = KEY_VOLUMEUP			},
+	{ .type = EV_KEY , .code = KEY_POWER				},
+};
+
+static const struct sec_input_bridge_mmap pq_mmap[] = {
+	{
+		.mkey_map = pq_appslog_mkey_map,
+		.num_mkey = ARRAY_SIZE(pq_appslog_mkey_map),
+		.uevent_env_str = "APPS_LOG",
+		.enable_uevent = 1,
+		.uevent_action = KOBJ_CHANGE,
+		.uevent_env_value = "ON",
+		},
+};
+
+static struct sec_input_bridge_platform_data pq_input_bridge_data = {
+	.mmap = pq_mmap,
+	.num_map = ARRAY_SIZE(pq_mmap),
+	/* .lcd_warning_func = lcd_warning_function,*/
+};
+
+static struct platform_device pq_input_bridge = {
+	.name	= "samsung_input_bridge",
+	.id	= -1,
+	.dev	= {
+		.platform_data = &pq_input_bridge_data,
+			},
+};
+#endif
+
+
+static struct platform_device *slp_midas_devices[] __initdata = {
+	/* Samsung Power Domain */
+	&exynos4_device_pd[PD_MFC],
+	&exynos4_device_pd[PD_G3D],
+	&exynos4_device_pd[PD_LCD0],
+	&exynos4_device_pd[PD_CAM],
+	&exynos4_device_pd[PD_TV],
+	&exynos4_device_pd[PD_GPS],
+	&exynos4_device_pd[PD_GPS_ALIVE],
+	&exynos4_device_pd[PD_ISP],
+
+	&s3c_device_wdt,
+	&s3c_device_rtc,
+	&s3c_device_i2c0,	/* PQ_LTE only: 8M CAM */
+	&s3c_device_i2c1,	/* Gyro/Acc */
+	/* i2c2: used by GPS UART */
+	&s3c_device_i2c3,	/* Meltas TSP */
+	/* i2c4: NC(PQ) / codec: wm1811 (PQ rev01) / Modem(PQ LTE) */
+	&s3c_device_i2c4,
+	/* i2c5: NC(PQ) / Modem(PQ LTE) */
+	&s3c_device_i2c7,	/* MAX77686 PMIC */
+#ifdef CONFIG_MACH_SLP_PQ_LTE
+	&device_i2c_3_touch,	/* PQ_LTE only: Meltas Touchkey */
+#endif
+#ifdef CONFIG_I2C_SI4705
+	&device_i2c_fm_radio,
+#endif
+	&device_i2c_if_pmic,	/* if_pmic: max77693 */
+	&device_i2c_fuel,	/* max17047-fuelgauge */
+	&device_i2c_bsense,	/* barometer lps331ap */
+	&device_i2c_msense, /* magnetic ak8975c */
+	&device_i2c_mhl,
+	/* TODO: SW I2C for 8M CAM of PQ (same gpio with PQ_LTE NFC) */
+	/* TODO: SW I2C for VT_CAM (GPIO_VT_CAM_SCL/SDA) */
+	/* TODO: SW I2C for ADC (GPIO_ADC_SCL/SDA) */
+	/* TODO: SW I2C for LTE of PQ_LTE (F2(4) SDA, F2(5) SCL) */
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+	&s5p_device_fimd0,
+#endif
+#ifdef CONFIG_DRM_EXYNOS_HDMI
+	&s5p_device_i2c_hdmiphy,
+	&s5p_device_hdmi,
+	&s5p_device_mixer,
+	&exynos_drm_hdmi_device,
+#endif
+	&exynos_drm_vidi_device,
+#ifdef CONFIG_DRM_EXYNOS_G2D
+	&s5p_device_fimg2d,
+#endif
+#ifdef CONFIG_DRM_EXYNOS
+	&exynos_drm_device,
+#endif
+#ifdef CONFIG_HAVE_PWM
+	&s3c_device_timer[0],
+	&s3c_device_timer[1],
+	&s3c_device_timer[2],
+	&s3c_device_timer[3],
+#endif
+
+#ifdef CONFIG_SND_SOC_WM8994
+	&vbatt_device,
+#endif
+	&samsung_asoc_dma,
+#ifndef CONFIG_SND_SOC_SAMSUNG_USE_DMA_WRAPPER
+	&samsung_asoc_idma,
+#endif
+
+#ifdef CONFIG_SND_SAMSUNG_AC97
+	&exynos_device_ac97,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_I2S
+	&exynos_device_i2s0,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_PCM
+	&exynos_device_pcm0,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_SPDIF
+	&exynos_device_spdif,
+#endif
+#if defined(CONFIG_SND_SAMSUNG_RP) || defined(CONFIG_SND_SAMSUNG_ALP)
+	&exynos_device_srp,
+#endif
+#if defined CONFIG_USB_EHCI_S5P && !defined CONFIG_LINK_DEVICE_HSIC
+	&s5p_device_ehci,
+#endif
+#if defined CONFIG_USB_OHCI_S5P && !defined CONFIG_LINK_DEVICE_HSIC
+	&s5p_device_ohci,
+#endif
+#ifdef CONFIG_USB_GADGET
+	&s3c_device_usbgadget,
+#endif
+#ifdef CONFIG_USB_G_SLP
+	&midas_slp_usb_multi,
+#endif
+#ifdef CONFIG_EXYNOS4_DEV_DWMCI
+	&exynos_device_dwmci,
+#else
+	&s3c_device_mshci,
+#endif
+	&s3c_device_hsmmc2,
+	&s3c_device_hsmmc3,
+
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+	&exynos4_device_fimc_is,
+#endif
+#ifdef CONFIG_VIDEO_FIMC
+	&s3c_device_fimc0,
+	&s3c_device_fimc1,
+	&s3c_device_fimc2,
+	&s3c_device_fimc3,
+#elif defined(CONFIG_VIDEO_SAMSUNG_S5P_FIMC)
+	&s5p_device_fimc0,
+	&s5p_device_fimc1,
+	&s5p_device_fimc2,
+	&s5p_device_fimc3,
+#endif
+#if defined(CONFIG_VIDEO_FIMC_MIPI)
+	&s3c_device_csis0,
+	&s3c_device_csis1,
+#endif
+#if defined(CONFIG_VIDEO_MFC5X) || defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+	&s5p_device_mfc,
+#endif
+#ifdef CONFIG_S5P_SYSTEM_MMU
+	&SYSMMU_PLATDEV(fimd0),
+	&SYSMMU_PLATDEV(tv),
+	&SYSMMU_PLATDEV(g2d_acp),
+	&SYSMMU_PLATDEV(mfc_l),
+	&SYSMMU_PLATDEV(mfc_r),
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_LITE
+	&exynos_device_flite0,
+	&exynos_device_flite1,
+#endif
+#ifdef CONFIG_CHARGER_MANAGER
+	&midas_charger_manager,
+#endif
+#if defined(CONFIG_BATTERY_SAMSUNG)
+	&samsung_device_battery,
+#endif
+#ifdef CONFIG_SENSORS_NTC_THERMISTOR
+	&midas_ncp15wb473_thermistor,
+#endif
+#ifdef CONFIG_VIDEO_JPEG_V2X
+	&s5p_device_jpeg,
+#endif
+	&midas_keypad,
+	&midas_jack,
+	&midas_uart_select,
+	&bcm4334_bluetooth_device,
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+	&exynos_device_spi1,
+#endif
+#ifdef CONFIG_MACH_SLP_PQ
+	&midas_bcm47511,
+#endif
+#if defined(CONFIG_ARM_EXYNOS4_BUS_DEVFREQ)
+	&devfreq_busfreq,
+#endif
+#if defined(CONFIG_ARM_EXYNOS4_DISPLAY_DEVFREQ)
+	&devfreq_display,
+#endif
+
+#if defined(CONFIG_BUSFREQ_OPP)
+	&exynos4_busfreq,
+#endif
+
+#if defined(CONFIG_DISPFREQ_OPP)
+	&exynos4_dispfreq,
+#endif
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+	&s5p_device_tmu,
+#else
+	&exynos4_device_tmu,
+#endif
+	&host_notifier_device,
+#ifdef CONFIG_INPUT_SECBRIDGE
+	&pq_input_bridge,
+#endif
+
+};
+
+static void check_hw_revision(void)
+{
+	unsigned int hwrev = system_rev & 0xff;
+
+	switch (hwrev) {
+	case M0_PROXIMA_REV0_0:	/* Proxima Rev0.0: M0_PROXIMA_REV0.0_1114 */
+		midas_tsp_set_platdata(&mms_ts_pdata);
+		midas_tsp_init();
+		/* VOL_UP/DOWN keys are not EXTINT. Register them. */
+		s5p_register_gpio_interrupt(GPIO_VOL_UP);
+		s5p_register_gpio_interrupt(GPIO_VOL_DOWN);
+		break;
+	case M0_PROXIMA_REV0_1:	/* Proxima Rev0.1: M0_PROXIMA_REV0.1_1125 */
+		midas_tsp_set_platdata(&mms_ts_pdata);
+		midas_tsp_init();
+		/* VOL_UP/DOWN keys are not EXTINT. Register them. */
+		s5p_register_gpio_interrupt(GPIO_VOL_UP);
+		s5p_register_gpio_interrupt(GPIO_VOL_DOWN);
+		break;
+	case M0_REAL_REV0_6:	/* Proxima Rev0.6: M0_REAL_REV0.6_120119 */
+	#ifdef CONFIG_LEDS_AAT1290A
+		platform_device_register(&s3c_device_aat1290a_led);
+	#endif
+		midas_tsp_set_platdata(&mms_ts_pdata);
+		midas_tsp_init();
+		midas_gpiokeys_platform_data.buttons = midas_06_buttons;
+		midas_gpiokeys_platform_data.nbuttons =
+			ARRAY_SIZE(midas_06_buttons);
+		/* VOL_UP/DOWN keys are not EXTINT. Register them. */
+		s5p_register_gpio_interrupt(GPIO_VOL_UP_00);
+		s5p_register_gpio_interrupt(GPIO_VOL_DOWN_00);
+		break;
+	case M0_REAL_REV0_6_A:	/* Proxima Rev0.6: M0_REAL_REV0.6_A */
+	#ifdef CONFIG_LEDS_AAT1290A
+		platform_device_register(&s3c_device_aat1290a_led);
+	#endif
+		midas_tsp_set_platdata(&mms_ts_pdata);
+		midas_tsp_init();
+		midas_gpiokeys_platform_data.buttons = midas_06_buttons;
+		midas_gpiokeys_platform_data.nbuttons =
+			ARRAY_SIZE(midas_06_buttons);
+		/* VOL_UP/DOWN keys are not EXTINT. Register them. */
+		s5p_register_gpio_interrupt(GPIO_VOL_UP_00);
+		s5p_register_gpio_interrupt(GPIO_VOL_DOWN_00);
+		break;
+	case SLP_PQ_CMC221_LTE:	/* PegasusQ LTE: SLP_PQ_CMC221_VIA_1028 */
+		midas_tsp_set_platdata(&mms_ts_pdata_rotate);
+		midas_tsp_init();
+		/* VOL_UP/DOWN keys are not EXTINT. Register them. */
+		s5p_register_gpio_interrupt(GPIO_VOL_UP);
+		s5p_register_gpio_interrupt(GPIO_VOL_DOWN);
+		break;
+	case M0_REAL_REV1_0:	/* Proxima Rev1.0: M0_REAL_REV1.0_120302 */
+	#ifdef CONFIG_LEDS_AAT1290A
+		platform_device_register(&s3c_device_aat1290a_led);
+	#endif
+		midas_tsp_set_platdata(&mms_ts_pdata);
+		midas_tsp_init();
+		midas_gpiokeys_platform_data.buttons = midas_10_buttons;
+		midas_gpiokeys_platform_data.nbuttons =
+						ARRAY_SIZE(midas_10_buttons);
+		/* VOL_UP/DOWN keys are not EXTINT. Register them. */
+		s5p_register_gpio_interrupt(GPIO_VOL_UP_00);
+		s5p_register_gpio_interrupt(GPIO_VOL_DOWN_00);
+
+		s5p_register_gpio_interrupt(GPIO_OK_KEY_ANDROID);
+		break;
+	case M0_REAL_REV1_1:	/* M0_REAL_REV1.1: M0_REAL_REV1.1_2nd_120413 */
+	#ifdef CONFIG_LEDS_AAT1290A
+		platform_device_register(&s3c_device_aat1290a_led);
+	#endif
+		midas_tsp_set_platdata(&mms_ts_pdata);
+		midas_tsp_init();
+		midas_gpiokeys_platform_data.buttons = midas_10_buttons;
+		midas_gpiokeys_platform_data.nbuttons =
+						ARRAY_SIZE(midas_10_buttons);
+		/* VOL_UP/DOWN keys are not EXTINT. Register them. */
+		s5p_register_gpio_interrupt(GPIO_VOL_UP_00);
+		s5p_register_gpio_interrupt(GPIO_VOL_DOWN_00);
+
+		s5p_register_gpio_interrupt(GPIO_OK_KEY_ANDROID);
+	default:
+		break;
+	}
+}
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+/* below temperature base on the celcius degree */
+static struct s5p_platform_tmu midas_tmu_data __initdata = {
+	.ts = {
+		.stop_1st_throttle  = 78,
+		.start_1st_throttle = 80,
+		.stop_2nd_throttle  = 87,
+		.start_2nd_throttle = 103,
+		/* temp to do tripping */
+		.start_tripping     = 110,
+		/* To protect chip,forcely kernel panic */
+		.start_emergency    = 120,
+		.stop_mem_throttle  = 80,
+		.start_mem_throttle = 85,
+	},
+	.cpufreq = {
+		.limit_1st_throttle  = 800000, /* 800MHz in KHz order */
+		.limit_2nd_throttle  = 200000, /* 200MHz in KHz order */
+	},
+	.temp_compensate = {
+		/* vdd_arm in uV for temperature compensation */
+		.arm_volt = 900000,
+		/* vdd_bus in uV for temperature compensation */
+		.bus_volt = 900000,
+		/* vdd_g3d in uV for temperature compensation */
+		.g3d_volt = 900000,
+	},
+};
+#endif
+
+#ifdef CONFIG_LINK_DEVICE_HSIC
+static int __init s5p_hci_device_initcall(void)
+{
+	/*
+	 * ehcd should be probed first.
+	 * Unless device detected as fullspeed always.
+	 */
+#ifdef CONFIG_USB_EHCI_S5P
+	int ret = platform_device_register(&s5p_device_ehci);
+	if (ret)
+		return ret;
+
+	/*
+	 * Exynos AP-EVT0 can't use both USB host and device(client)
+	 * on running time, because that has critical ASIC problem
+	 * about USB PHY CLOCK. That issue was already announced by
+	 * S.SLI team (djkim@samsung.com) and already fixed it on
+	 * the new EVT1 chip (new target, system_rev != 3).
+	 * But we have many EVT0 targets (system_rev == 3)
+	 * So, to using old target(EVT0) only using by usb device mode
+	 * we added following unregister codes(disable USB Host)
+	 * by yongsul96.oh@samsung.com 20120417-SLP
+	 */
+	if (system_rev == 3) {
+		pr_warn("[USB-EHCI]AP is EVT0 type!!, unregister ehci!!!");
+		platform_device_unregister(&s5p_device_ehci);
+	}
+#endif
+#ifdef CONFIG_USB_OHCI_S5P
+	return platform_device_register(&s5p_device_ohci);
+#endif
+}
+late_initcall(s5p_hci_device_initcall);
+#endif	/* LINK_DEVICE_HSIC */
+
+#if defined(CONFIG_S5P_MEM_CMA)
+static struct cma_region regions[] = {
+	/*
+	 * caution : do not allowed other region definitions above of drm.
+	 * drm only using region 0 for startup screen display.
+	 */
+#ifdef CONFIG_DRM_EXYNOS
+	{
+		.name = "drm",
+		.size = CONFIG_DRM_EXYNOS_MEMSIZE * SZ_1K,
+		.start = 0
+	},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_DMA
+	{
+		.name = "dma",
+		.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_DMA * SZ_1K,
+		.start = 0
+	},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC1
+	{
+		.name = "mfc1",
+		.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC1 * SZ_1K,
+		{
+			.alignment = 1 << 17,
+		},
+		.start = 0,
+	},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC0
+	{
+		.name = "mfc0",
+		.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC0 * SZ_1K,
+		{
+			.alignment = 1 << 17,
+		},
+		.start = 0,
+	},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC
+	{
+		.name = "mfc",
+		.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC * SZ_1K,
+		{
+			.alignment = 1 << 17,
+		},
+		.start = 0
+	},
+#endif
+#if !defined(CONFIG_EXYNOS_CONTENT_PATH_PROTECTION) && \
+	defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+	{
+		.name		= "b2",
+		.size		= 32 << 20,
+		{ .alignment	= 128 << 10 },
+	},
+	{
+		.name		= "b1",
+		.size		= 32 << 20,
+		{ .alignment	= 128 << 10 },
+	},
+	{
+		.name		= "fw",
+		.size		= 1 << 20,
+		{ .alignment	= 128 << 10 },
+		.start		= 0x60500000,	/* FIXME */
+	},
+#endif
+#ifdef CONFIG_AUDIO_SAMSUNG_MEMSIZE_SRP
+	{
+		.name = "srp",
+		.size = CONFIG_AUDIO_SAMSUNG_MEMSIZE_SRP * SZ_1K,
+		.start = 0,
+	},
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+	{
+		.name = "fimc_is",
+		.size = CONFIG_VIDEO_EXYNOS_MEMSIZE_FIMC_IS * SZ_1K,
+		{
+			.alignment = 1 << 26,
+		},
+		.start = 0
+	},
+#endif
+	{
+		.size = 0
+	},
+};
+
+static void __init exynos4_reserve_mem(void)
+{
+	static const char map[] __initconst =
+#ifdef CONFIG_DRM_EXYNOS
+		"exynos-drm=drm;"
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_DMA
+		"s3c-fimc.0=dma;s3c-fimc.1=dma;s3c-fimc.2=dma;s3c-fimc.3=dma;s3c-mem=dma;"
+		"exynos4210-fimc.0=dma;exynos4210-fimc.1=dma;exynos4210-fimc.2=dma;exynos4210-fimc.3=dma;"
+#endif
+#ifdef CONFIG_VIDEO_MFC5X
+		"s3c-mfc/A=mfc0,mfc-secure;"
+		"s3c-mfc/B=mfc1,mfc-normal;"
+		"s3c-mfc/AB=mfc;"
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_S5P_MFC
+		"s5p-mfc/f=fw;"
+		"s5p-mfc/a=b1;"
+		"s5p-mfc/b=b2;"
+#endif
+		"samsung-rp=srp;"
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+		"exynos4-fimc-is=fimc_is;"
+#endif
+		""
+	;
+
+	if (fbmem_start) {
+		int i = 0, drm = 0, dma = 0, mfc1 = 0, mfc0 = 0;
+		regions[drm].start = (dma_addr_t) fbmem_start;
+		for (i = 0; i < ARRAY_SIZE(regions) - 1 /* terminator */; ++i) {
+			if (strncmp(regions[i].name, "dma",
+				strlen(regions[i].name)) == 0) {
+				dma = i;
+				regions[dma].start =
+					(dma_addr_t) regions[drm].start
+					-regions[dma].size;
+			}
+			if (strncmp(regions[i].name, "mfc1",
+				strlen(regions[i].name)) == 0) {
+				mfc1 = i;
+				regions[mfc1].start =
+					(dma_addr_t) regions[dma].start
+					-regions[mfc1].size;
+			}
+			if (strncmp(regions[i].name, "mfc0",
+				strlen(regions[i].name)) == 0) {
+				mfc0 = i;
+				regions[mfc0].start =
+					(dma_addr_t) regions[mfc1].start
+					-regions[mfc0].size;
+			}
+		}
+	}
+
+	s5p_cma_region_reserve(regions, NULL, 0, map);
+}
+
+#ifdef CONFIG_HIBERNATION
+static int __init exynos_set_nosave_regions(void)
+{
+	int i;
+
+	for (i = ARRAY_SIZE(regions) - 2; i >= 0 /* terminator */; i--) {
+		/*
+		 * MFC firmware region SHOULD BE saved.
+		 * If the name of region is fw, don't register to nosave regions
+		 */
+		if (strcmp(regions[i].name, "fw")) {
+			register_nosave_region_late(
+					__phys_to_pfn(regions[i].start),
+					__phys_to_pfn(regions[i].start +
+						regions[i].size));
+		}
+	}
+	return 0;
+}
+late_initcall(exynos_set_nosave_regions);
+#endif /* CONFIG_HIBERNATION */
+#endif /* CONFIG_S5P_MEM_CMA */
+
+static void __init midas_map_io(void)
+{
+	clk_xusbxti.rate = 24000000;
+	s5p_init_io(NULL, 0, S5P_VA_CHIPID);
+	s3c24xx_init_clocks(24000000);
+	s3c24xx_init_uarts(slp_midas_uartcfgs, ARRAY_SIZE(slp_midas_uartcfgs));
+
+#if defined(CONFIG_S5P_MEM_CMA)
+	exynos4_reserve_mem();
+#endif
+
+	/* as soon as INFORM6 is visible, sec_debug is ready to run */
+	sec_debug_init();
+}
+
+static void __init exynos_sysmmu_init(void)
+{
+	ASSIGN_SYSMMU_POWERDOMAIN(mfc_l, &exynos4_device_pd[PD_MFC].dev);
+	ASSIGN_SYSMMU_POWERDOMAIN(mfc_r, &exynos4_device_pd[PD_MFC].dev);
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+	sysmmu_set_owner(&SYSMMU_PLATDEV(fimd0).dev, &s5p_device_fimd0.dev);
+#endif
+#ifdef CONFIG_DRM_EXYNOS_HDMI
+	sysmmu_set_owner(&SYSMMU_PLATDEV(tv).dev, &s5p_device_hdmi.dev);
+#endif
+#ifdef CONFIG_DRM_EXYNOS_G2D
+	sysmmu_set_owner(&SYSMMU_PLATDEV(g2d_acp).dev, &s5p_device_fimg2d.dev);
+#endif
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC) || defined(CONFIG_VIDEO_MFC5X)
+	sysmmu_set_owner(&SYSMMU_PLATDEV(mfc_l).dev, &s5p_device_mfc.dev);
+	sysmmu_set_owner(&SYSMMU_PLATDEV(mfc_r).dev, &s5p_device_mfc.dev);
+#endif
+}
+
+/*
+ * This function disable unused clocks to remove power leakage on idle state.
+ */
+static void midas_disable_unused_clock(void)
+{
+/* Following array include the unused clock list */
+	struct __unused_clock_list {
+		char *dev_id;
+		char *con_id;
+	} clock_list[] =  {
+		{
+			/* UART Ch 4 is only dedicated for communication
+			 * with internal GPS in SoC */
+			.dev_id = "s5pv210-uart.4",
+			.con_id = "uart",
+		}, {
+			.dev_id = "s5p-qe.3",
+			.con_id = "qefimc",
+		}, {
+			.dev_id = "s5p-qe.2",
+			.con_id = "qefimc",
+		}, {
+			.dev_id = "s5p-qe.1",
+			.con_id = "qefimc",
+		},
+	};
+	struct device dev;
+	struct clk *clk;
+	char *con_id;
+	int i;
+
+	for (i = 0 ; i < ARRAY_SIZE(clock_list) ; i++) {
+		dev.init_name = clock_list[i].dev_id;
+		con_id = clock_list[i].con_id;
+
+		clk = clk_get(&dev, con_id);
+		if (IS_ERR(clk)) {
+			printk(KERN_ERR "Failed to get %s for %s\n",
+					con_id, dev.init_name);
+			continue;
+		}
+		clk_enable(clk);
+		clk_disable(clk);
+		clk_put(clk);
+	}
+}
+
+/* Use exynos4-display with DEVFREQ to control LCD refresh rate
+ * dynamically when specific power domain is turning ON/OFF.
+ */
+#if defined(CONFIG_ARM_EXYNOS4_DISPLAY_DEVFREQ) || defined(CONFIG_DISPFREQ_OPP)
+#include <linux/devfreq/exynos4_display.h>
+/* EXYNOS4 series SoC use ten power domains,
+   the last power domain is PD_MAUDIO */
+#define PD_NUMBER	(PD_MAUDIO + 1)
+static struct pm_qos_request_list exynos_display_qos[PD_NUMBER];
+static int __exynos_pd_enable(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+
+	pm_qos_update_request(&exynos_display_qos[pdev->id],
+					EXYNOS4_DISPLAY_LV_HF);
+
+	return exynos_pd_enable(dev);
+}
+
+static int __exynos_pd_disable(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+
+	pm_qos_update_request(&exynos_display_qos[pdev->id],
+					EXYNOS4_DISPLAY_LV_LF);
+
+	return exynos_pd_disable(dev);
+}
+#else
+static int __exynos_pd_enable(struct device *dev)
+{
+	return exynos_pd_enable(dev);
+}
+static int __exynos_pd_disable(struct device *dev)
+{
+	return exynos_pd_disable(dev);
+}
+#endif
+
+static void midas_exynos_display_init(void)
+{
+	unsigned int pd_list[] = { PD_MFC, PD_G3D };
+	struct device *dev;
+	struct samsung_pd_info *pdata;
+	int i, id;
+
+	for (i = 0 ; i < ARRAY_SIZE(pd_list) ; i++) {
+		id = pd_list[i];
+
+		dev = &exynos4_device_pd[id].dev;
+		pdata = dev->platform_data;
+		pdata->enable = __exynos_pd_enable;
+		pdata->disable = __exynos_pd_disable;
+
+#if defined(CONFIG_ARM_EXYNOS4_DISPLAY_DEVFREQ) || defined(CONFIG_DISPFREQ_OPP)
+		pm_qos_add_request(&exynos_display_qos[id],
+			PM_QOS_DISPLAY_FREQUENCY, EXYNOS4_DISPLAY_LV_HF);
+#endif
+	}
+}
+
+static void __init midas_machine_init(void)
+{
+#ifdef CONFIG_BUSFREQ_OPP
+	struct clk *ppmu_clk = NULL;
+#endif
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+	unsigned int gpio;
+	struct clk *sclk = NULL;
+	struct clk *prnt = NULL;
+	struct device *spi1_dev = &exynos_device_spi1.dev;
+#endif
+	strcpy(utsname()->nodename, machine_desc->name);
+
+	/* Workaround: bootloader needs to set GPX*PUD registers */
+	s3c_gpio_setpull(EXYNOS4_GPX2(7), S3C_GPIO_PULL_NONE);
+
+#if defined(CONFIG_EXYNOS_DEV_PD) && defined(CONFIG_PM_RUNTIME)
+	exynos_pd_disable(&exynos4_device_pd[PD_MFC].dev);
+
+	/*
+	 * FIXME: now runtime pm of mali driver isn't worked yet.
+	 * if the runtime pm is worked fine, then remove this call.
+	 */
+	exynos_pd_enable(&exynos4_device_pd[PD_G3D].dev);
+
+	/* PD_LCD0 : The child devie control LCD0 power domain
+	 * because LCD should be always enabled during kernel booting.
+	 * So, LCD power domain can't turn off when machine initialization.*/
+	exynos_pd_disable(&exynos4_device_pd[PD_CAM].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_TV].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_GPS].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_GPS_ALIVE].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_ISP].dev);
+#elif defined(CONFIG_EXYNOS_DEV_PD)
+	/*
+	 * These power domains should be always on
+	 * without runtime pm support.
+	 */
+	exynos_pd_enable(&exynos4_device_pd[PD_MFC].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_G3D].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_LCD0].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_CAM].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_TV].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_GPS].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_GPS_ALIVE].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_ISP].dev);
+#endif
+
+	/* initialise the gpios */
+	midas_config_gpio_table();
+	exynos4_sleep_gpio_table_set = midas_config_sleep_gpio_table;
+
+	s3c_i2c0_set_platdata(NULL);
+	i2c_register_board_info(0, i2c_devs0, ARRAY_SIZE(i2c_devs0));
+
+	/* LSM330DLC (Gyro & Accelerometer Sensor) */
+	s3c_i2c1_set_platdata(NULL);
+	lsm331dlc_gpio_init();
+	i2c_register_board_info(1, i2c_devs1, ARRAY_SIZE(i2c_devs1));
+
+	s3c_i2c3_set_platdata(NULL);
+
+#ifdef CONFIG_MACH_SLP_PQ
+	if (hwrevision(0)) {
+		/* pq_proxima rev00 */
+		GPIO_I2C_PIN_SETUP(codec);
+		i2c_register_board_info(I2C_CODEC, i2c_devs_codec,
+					ARRAY_SIZE(i2c_devs_codec));
+		platform_device_register(&device_i2c_codec);
+	} else {
+		/* pq_proxima r2 and above */
+		s3c_i2c4_set_platdata(NULL);
+		i2c_register_board_info(4, i2c_devs4, ARRAY_SIZE(i2c_devs4));
+	}
+#else
+	/* CONFIG_MACH_SLP_PQ_LTE */
+	GPIO_I2C_PIN_SETUP(codec);
+	i2c_register_board_info(I2C_CODEC, i2c_devs_codec,
+				ARRAY_SIZE(i2c_devs_codec));
+	platform_device_register(&device_i2c_codec);
+#endif
+	s3c_i2c7_set_platdata(NULL);
+	s3c_i2c7_set_platdata(NULL);
+
+	/* Workaround for repeated interrupts from MAX77686 during sleep */
+	if (hwrevision(0))
+		exynos4_max77686_info.wakeup = 0;
+
+	i2c_register_board_info(7, i2c_devs7, ARRAY_SIZE(i2c_devs7));
+
+	GPIO_I2C_PIN_SETUP(if_pmic);
+	midas_power_set_muic_pdata(NULL, EXYNOS4_GPX0(7));
+	i2c_register_board_info(I2C_IF_PMIC, i2c_devs_if_pmic,
+				ARRAY_SIZE(i2c_devs_if_pmic));
+
+	/* NFC */
+#ifdef CONFIG_MACH_SLP_PQ
+	if (hwrevision(1) || system_rev >= 0x7) {
+		s3c_i2c5_set_platdata(NULL);
+		platform_device_register(&s3c_device_i2c5);
+		midas_nfc_init(s3c_device_i2c5.id);
+	} else {
+		GPIO_I2C_PIN_SETUP(nfc);
+		platform_device_register(&device_i2c_nfc);
+		midas_nfc_init(device_i2c_nfc.id);
+	}
+#else
+	/* CONFIG_MACH_SLP_PQ_LTE */
+	GPIO_I2C_PIN_SETUP(nfc);
+	platform_device_register(&device_i2c_nfc);
+	midas_nfc_init(device_i2c_nfc.id);
+#endif
+
+	/* MHL / MHL_D */
+	GPIO_I2C_PIN_SETUP(mhl);
+
+#ifdef CONFIG_MACH_SLP_PQ
+	if (hwrevision(0)) {
+		GPIO_I2C_PIN_SETUP(mhl_d);
+		platform_device_register(&device_i2c_mhl_d);
+	} else {
+		/* nothing */
+	}
+#else
+	GPIO_I2C_PIN_SETUP(mhl_d);
+	platform_device_register(&device_i2c_mhl_d);
+#endif
+
+	lps331ap_gpio_init();
+	GPIO_I2C_PIN_SETUP(bsense);
+	i2c_register_board_info(I2C_BSENSE, i2c_devs_bsense,
+				ARRAY_SIZE(i2c_devs_bsense));
+
+#ifdef CONFIG_MACH_SLP_PQ
+	ak8975c_gpio_init();
+#endif
+	GPIO_I2C_PIN_SETUP(msense);
+	i2c_register_board_info(I2C_MSENSE, i2c_devs_msense,
+				ARRAY_SIZE(i2c_devs_msense));
+
+	optical_gpio_init();
+
+#ifdef CONFIG_MACH_SLP_PQ
+	if (system_rev == 3 || system_rev == 0) {
+		GPIO_I2C_PIN_SETUP(psense_gp2a);
+		i2c_register_board_info(I2C_PSENSE, i2c_devs_psense_gp2a,
+					ARRAY_SIZE(i2c_devs_psense_gp2a));
+
+		platform_device_register(&device_i2c_psense_gp2a);
+		platform_device_register(&opt_gp2a);
+	} else {
+		GPIO_I2C_PIN_SETUP(psense_cm36651);
+		i2c_register_board_info(I2C_PSENSE, i2c_devs_psense_cm36651,
+					ARRAY_SIZE(i2c_devs_psense_cm36651));
+
+		platform_device_register(&device_i2c_psense_cm36651);
+	}
+#else /* CONFIG_MACH_SLP_PQ_LTE */
+	GPIO_I2C_PIN_SETUP(psense_gp2a);
+	i2c_register_board_info(I2C_PSENSE, i2c_devs_psense_gp2a,
+				ARRAY_SIZE(i2c_devs_psense_gp2a));
+
+	platform_device_register(&device_i2c_psense_gp2a);
+	platform_device_register(&opt_gp2a);
+
+#endif
+
+#ifdef CONFIG_USB_EHCI_S5P
+	smdk4212_ehci_init();
+#endif
+#ifdef CONFIG_USB_OHCI_S5P
+	smdk4212_ohci_init();
+#endif
+#ifdef CONFIG_USB_GADGET
+	smdk4212_usbgadget_init();
+#endif
+
+#ifdef CONFIG_MACH_SLP_PQ_LTE
+	GPIO_I2C_PIN_SETUP(3_touch);
+	gpio_request(GPIO_3_TOUCH_INT, "3_TOUCH_INT");
+	s5p_register_gpio_interrupt(GPIO_3_TOUCH_INT);
+	i2c_register_board_info(I2C_3_TOUCH, i2c_devs_3_touch,
+				ARRAY_SIZE(i2c_devs_3_touch));
+#endif
+
+	GPIO_I2C_PIN_SETUP(fuel);
+	i2c_register_board_info(I2C_FUEL, i2c_devs_fuel,
+				ARRAY_SIZE(i2c_devs_fuel));
+
+#ifdef CONFIG_I2C_SI4705
+	GPIO_I2C_PIN_SETUP(fm_radio);
+	pq_si4705_init();
+	i2c_register_board_info(I2C_FM_RADIO, i2c_devs_fm_radio,
+				ARRAY_SIZE(i2c_devs_fm_radio));
+#endif
+#ifdef CONFIG_EXYNOS4_DEV_DWMCI
+	exynos_dwmci_set_platdata(&exynos_dwmci_pdata, 0);
+#else
+	s3c_mshci_set_platdata(&exynos4_mshc_pdata);
+#endif
+	s3c_sdhci2_set_platdata(&slp_midas_hsmmc2_pdata);
+	s3c_sdhci3_set_platdata(&slp_midas_hsmmc3_pdata);
+
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+	exynos4_fimc_is_set_platdata(NULL);
+	exynos4_device_fimc_is.dev.parent = &exynos4_device_pd[PD_ISP].dev;
+#endif
+
+	/* FIMC */
+	midas_camera_init();
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+	/*
+	 * platform device name for fimd driver should be changed
+	 * because we can get source clock with this name.
+	 *
+	 * P.S. refer to sclk_fimd definition of clock-exynos4.c
+	 */
+	s5p_fb_setname(0, "s3cfb");
+	s5p_device_fimd0.dev.parent = &exynos4_device_pd[PD_LCD0].dev;
+#ifdef CONFIG_S5P_MIPI_DSI2
+	s5p_device_mipi_dsim0.dev.parent = &exynos4_device_pd[PD_LCD0].dev;
+#endif
+#endif
+
+	setup_charger_manager(&midas_charger_g_desc);
+
+#ifdef CONFIG_VIDEO_JPEG_V2X
+#ifdef CONFIG_EXYNOS_DEV_PD
+	s5p_device_jpeg.dev.parent = &exynos4_device_pd[PD_CAM].dev;
+	exynos4_jpeg_setup_clock(&s5p_device_jpeg.dev, 160000000);
+#endif
+#endif
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+	s5p_tmu_set_platdata(&midas_tmu_data);
+#endif
+
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+	dev_set_name(&s5p_device_mfc.dev, "s3c-mfc");
+	clk_add_alias("mfc", "s5p-mfc", "mfc", &s5p_device_mfc.dev);
+	s5p_mfc_setname(&s5p_device_mfc, "s5p-mfc");
+#endif
+
+#if defined(CONFIG_VIDEO_MFC5X) || defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+#ifdef CONFIG_EXYNOS_DEV_PD
+	s5p_device_mfc.dev.parent = &exynos4_device_pd[PD_MFC].dev;
+#endif
+	exynos4_mfc_setup_clock(&s5p_device_mfc.dev, 267 * MHZ);
+#endif
+
+	exynos_sysmmu_init();
+
+	/* Disable unused clocks to remove power leakage on idle state */
+	midas_disable_unused_clock();
+
+	/* exynos4-display with DEVFREQ */
+	midas_exynos_display_init();
+
+#ifdef CONFIG_SENSORS_NTC_THERMISTOR
+	/* PQ Rev00 doesn't have ntc on board */
+	if (!hwrevision(0))
+		adc_ntc_init(2); /* Channel 2 */
+#endif
+	/* Battery capacity has changed from 1750mA to 2100mA(rev06) */
+	if (system_rev >= 0x7) {
+		/* setting for top off voltage */
+		max77693_change_top_off_vol();
+#ifdef CONFIG_BATTERY_SAMSUNG
+		/* setting for Battery Capacity */
+		samsung_battery_pdata.voltage_max = 4350000;
+		samsung_battery_pdata.recharge_voltage = 4300000;
+#endif
+#ifdef CONFIG_CHARGER_MANAGER
+		cm_change_fullbatt_uV();
+#endif
+	}
+
+#ifdef CONFIG_S3C_ADC
+	if (system_rev != 3)
+		platform_device_register(&s3c_device_adc);
+#endif
+
+	platform_add_devices(slp_midas_devices, ARRAY_SIZE(slp_midas_devices));
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+	midas_fb_init();
+#endif
+#ifdef CONFIG_DRM_EXYNOS_HDMI
+	midas_tv_init();
+#endif
+
+	brcm_wlan_init();
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+	sclk = clk_get(spi1_dev, "dout_spi1");
+	if (IS_ERR(sclk))
+		dev_err(spi1_dev, "failed to get sclk for SPI-1\n");
+	prnt = clk_get(spi1_dev, "mout_mpll_user");
+	if (IS_ERR(prnt))
+		dev_err(spi1_dev, "failed to get prnt\n");
+	if (clk_set_parent(sclk, prnt))
+		printk(KERN_ERR "Unable to set parent %s of clock %s.\n",
+		       prnt->name, sclk->name);
+
+	clk_set_rate(sclk, 800 * 1000 * 1000);
+	clk_put(sclk);
+	clk_put(prnt);
+
+	if (!gpio_request(EXYNOS4_GPB(5), "SPI_CS1")) {
+		gpio_direction_output(EXYNOS4_GPB(5), 1);
+		s3c_gpio_cfgpin(EXYNOS4_GPB(5), S3C_GPIO_SFN(1));
+		s3c_gpio_setpull(EXYNOS4_GPB(5), S3C_GPIO_PULL_UP);
+		exynos_spi_set_info(1, EXYNOS_SPI_SRCCLK_SCLK,
+				     ARRAY_SIZE(spi1_csi));
+	}
+
+	for (gpio = EXYNOS4_GPB(4); gpio < EXYNOS4_GPB(8); gpio++)
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV3);
+
+	spi_register_board_info(spi1_board_info, ARRAY_SIZE(spi1_board_info));
+#endif
+#ifdef CONFIG_BUSFREQ_OPP
+	dev_add(&busfreq, &exynos4_busfreq.dev);
+
+	/* PPMUs using for cpufreq get clk from clk_list */
+	ppmu_clk = clk_get(NULL, "ppmudmc0");
+	if (IS_ERR(ppmu_clk))
+		printk(KERN_ERR "failed to get ppmu_dmc0\n");
+	clk_enable(ppmu_clk);
+	clk_put(ppmu_clk);
+
+	ppmu_clk = clk_get(NULL, "ppmudmc1");
+	if (IS_ERR(ppmu_clk))
+		printk(KERN_ERR "failed to get ppmu_dmc1\n");
+	clk_enable(ppmu_clk);
+	clk_put(ppmu_clk);
+
+	ppmu_clk = clk_get(NULL, "ppmucpu");
+	if (IS_ERR(ppmu_clk))
+		printk(KERN_ERR "failed to get ppmu_cpu\n");
+	clk_enable(ppmu_clk);
+	clk_put(ppmu_clk);
+
+	ppmu_init(&exynos_ppmu[PPMU_DMC0], &exynos4_busfreq.dev);
+	ppmu_init(&exynos_ppmu[PPMU_DMC1], &exynos4_busfreq.dev);
+	ppmu_init(&exynos_ppmu[PPMU_CPU], &exynos4_busfreq.dev);
+#endif
+
+	check_hw_revision();
+}
+
+MACHINE_START(SLP_PQ, "SLP_PQ")
+	.boot_params	= S5P_PA_SDRAM + 0x100,
+	.init_irq	= exynos4_init_irq,
+	.map_io		= midas_map_io,
+	.init_machine	= midas_machine_init,
+	.timer		= &exynos4_timer,
+MACHINE_END
+MACHINE_START(SLP_PQ_LTE, "SLP_PQ_LTE")
+	.boot_params	= S5P_PA_SDRAM + 0x100,
+	.init_irq	= exynos4_init_irq,
+	.map_io		= midas_map_io,
+	.init_machine	= midas_machine_init,
+	.timer		= &exynos4_timer,
+MACHINE_END
diff -Naur ./arch/arm/mach-exynos/board-slp-t0-lte.c ../../HK_JB/Kernel/arch/arm/mach-exynos/board-slp-t0-lte.c
--- ./arch/arm/mach-exynos/board-slp-t0-lte.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/board-slp-t0-lte.c	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,3028 @@
+/*
+ * linux/arch/arm/mach-exynos/board-tizen-t0-lte.c
+ *
+ * Copyright (c) 2011 Samsung Electronics Co., Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/platform_device.h>
+#include <linux/serial_core.h>
+#include <linux/spi/spi.h>
+#include <linux/gpio.h>
+#include <linux/gpio_keys.h>
+#include <linux/i2c.h>
+#include <linux/i2c-gpio.h>
+#include <linux/mmc/host.h>
+#include <linux/regulator/machine.h>
+#include <linux/regulator/fixed.h>
+#include <linux/mfd/wm8994/pdata.h>
+#ifdef CONFIG_LEDS_AAT1290A
+#include <linux/leds-aat1290a.h>
+#endif
+#include <linux/lcd.h>
+#include <linux/lcd-property.h>
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/input.h>
+#include <linux/sensor/sensors_core.h>
+#include <linux/sensor/lsm330dlc_accel.h>
+#include <linux/sensor/lsm330dlc_gyro.h>
+#include <linux/sensor/ak8975.h>
+#include <linux/sensor/gp2a.h>
+#include <linux/sensor/cm36651.h>
+#include <linux/cma.h>
+#include <linux/jack.h>
+#include <linux/uart_select.h>
+#include <linux/utsname.h>
+#include <linux/mfd/max77686.h>
+#include <linux/mfd/max77693.h>
+#include <linux/mfd/max77693-private.h>
+#include <linux/leds-max77693.h>
+#include <linux/battery/max17047_fuelgauge.h>
+#include <linux/power/charger-manager.h>
+#include <linux/sensor/lps331ap.h>
+#include <linux/devfreq/exynos4_bus.h>
+#include <linux/pm_qos_params.h>
+#include <drm/exynos_drm.h>
+#include <linux/printk.h>
+
+#include <asm/mach/arch.h>
+#include <asm/mach-types.h>
+
+#include <plat/regs-serial.h>
+#include <plat/exynos4.h>
+#include <plat/clock.h>
+#include <plat/cpu.h>
+#include <plat/devs.h>
+#include <plat/gpio-cfg.h>
+#include <plat/iic.h>
+#include <plat/pd.h>
+#include <plat/sdhci.h>
+#include <plat/mshci.h>
+#include <plat/ehci.h>
+#include <plat/usbgadget.h>
+#include <plat/s3c64xx-spi.h>
+#include <plat/csis.h>
+#include <plat/udc-hs.h>
+#include <plat/media.h>
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+#include <media/exynos_fimc_is.h>
+#endif
+#include <plat/regs-fb.h>
+#include <plat/fb-core.h>
+#include <plat/mipi_dsim2.h>
+#include <plat/fimd_lite_ext.h>
+#include <plat/hdmi.h>
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC) || defined(CONFIG_VIDEO_MFC5X)
+#include <plat/s5p-mfc.h>
+#endif
+
+#ifdef CONFIG_I2C_SI4705
+#include <linux/si4705_pdata.h>
+#endif
+
+#ifdef CONFIG_VIDEO_JPEG_V2X
+#include <plat/jpeg.h>
+#endif
+
+#include <mach/map.h>
+#include <mach/spi-clocks.h>
+#include <mach/sec_debug.h>
+
+#ifdef CONFIG_SND_SOC_WM8994
+#include <linux/mfd/wm8994/pdata.h>
+#include <linux/mfd/wm8994/gpio.h>
+#endif
+
+#include <mach/midas-power.h>
+#ifdef CONFIG_TOUCHSCREEN_MELFAS_MMS
+#include <linux/melfas_mms_ts.h>
+#endif
+#include <mach/dwmci.h>
+
+#include <mach/bcm47511.h>
+
+#include <mach/regs-pmu.h>
+
+#include <../../../drivers/video/samsung/s3cfb.h>
+#include <mach/dev-sysmmu.h>
+
+#include "board-mobile.h"
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+#include <plat/s5p-tmu.h>
+#include <mach/regs-tmu.h>
+#endif
+
+#if defined(CONFIG_BATTERY_SAMSUNG)
+#include <linux/power_supply.h>
+#include <linux/battery/samsung_battery.h>
+#endif
+#include <mach/midas-thermistor.h>
+
+#include <linux/host_notify.h>
+
+#ifdef CONFIG_SENSORS_SSP
+#include <linux/ssp_platformdata.h>
+#endif
+
+enum gpio_i2c {
+	I2C_LAST_HW	= 8, /* I2C0~8 are reserved */
+	I2C_CODEC	= 9, /* I2C9 is reserved for CODEC (hardcoded) */
+	I2C_NFC,
+	I2C_3_TOUCH,
+	I2C_FUEL,
+	I2C_BSENSE,
+	I2C_MSENSE,
+	I2C_MHL		= 15, /* 15 is hardcoded from midas-mhl.c */
+	I2C_MHL_D	= 16, /* 16 is hardcoded from midas-mhl.c */
+	I2C_PSENSE,
+	I2C_IF_PMIC,
+	I2C_FM_RADIO	= 19, /* refer from midas */
+};
+
+enum board_rev {
+	T0_JPN_REV0_1 = 0x1,
+};
+
+static int hwrevision(int rev)
+{
+	switch (rev) {
+	case 0: return (system_rev == 0x3);
+	case 1: return (system_rev == 0x0);
+	}
+	return 0;
+}
+
+extern int brcm_wlan_init(void);
+/* Following are default values for UCON, ULCON and UFCON UART registers */
+#define SLP_MIDAS_UCON_DEFAULT	(S3C2410_UCON_TXILEVEL |	\
+				 S3C2410_UCON_RXILEVEL |	\
+				 S3C2410_UCON_TXIRQMODE |	\
+				 S3C2410_UCON_RXIRQMODE |	\
+				 S3C2410_UCON_RXFIFO_TOI |	\
+				 S3C2443_UCON_RXERR_IRQEN)
+
+#define SLP_MIDAS_ULCON_DEFAULT	S3C2410_LCON_CS8
+
+#define SLP_MIDAS_UFCON_DEFAULT	(S3C2410_UFCON_FIFOMODE |	\
+				 S5PV210_UFCON_TXTRIG4 |	\
+				 S5PV210_UFCON_RXTRIG4)
+
+static struct s3c2410_uartcfg slp_midas_uartcfgs[] __initdata = {
+	[0] = {
+		.hwport		= 0,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+	[1] = {
+		.hwport		= 1,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+	[2] = {
+		.hwport		= 2,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+	[3] = {
+		.hwport		= 3,
+		.flags		= 0,
+		.ucon		= SLP_MIDAS_UCON_DEFAULT,
+		.ulcon		= SLP_MIDAS_ULCON_DEFAULT,
+		.ufcon		= SLP_MIDAS_UFCON_DEFAULT,
+	},
+};
+
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+static struct s3c64xx_spi_csinfo spi1_csi[] = {
+	[0] = {
+		.line = EXYNOS4_GPB(5),
+		.set_level = gpio_set_value,
+		.fb_delay = 0x2,
+	},
+};
+
+static struct spi_board_info spi1_board_info[] __initdata = {
+	{
+		.modalias = "s5c73m3_spi",
+		.platform_data = NULL,
+		.max_speed_hz = 50000000,
+		.bus_num = 1,
+		.chip_select = 0,
+		.mode = SPI_MODE_0,
+		.controller_data = &spi1_csi[0],
+	}
+};
+#endif
+
+#ifdef CONFIG_EXYNOS4_DEV_DWMCI
+#define DIV_FSYS3	(S5P_VA_CMU + 0x0C54C)
+static void exynos_dwmci_cfg_gpio(int width)
+{
+	unsigned int gpio;
+
+	for (gpio = EXYNOS4_GPK0(0); gpio < EXYNOS4_GPK0(2); gpio++) {
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+	}
+
+	width = (1 << width);
+
+	switch (width) {
+	case 8:
+		for (gpio = EXYNOS4_GPK1(3); gpio <= EXYNOS4_GPK1(6); gpio++) {
+			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(4));
+			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+		}
+	case 4:
+		for (gpio = EXYNOS4_GPK0(3); gpio <= EXYNOS4_GPK0(6); gpio++) {
+			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
+			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+		}
+		break;
+	case 1:
+		gpio = EXYNOS4_GPK0(3);
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+
+		/* Workaround
+		 * NOTE : In future, should be modified bootloader
+		 * Set this value when 1-bit buswidth(it's initial time)*/
+		__raw_writel(0x1, DIV_FSYS3);
+	default:
+		break;
+	}
+}
+
+/*
+ * block setting of dwmci
+ * max_segs = PAGE_SIZE / size of IDMAC desc,
+ * max_blk_size = 512,
+ * max_blk_count = 65536,
+ * max_seg_size = PAGE_SIZE,
+ * max_req_size = max_seg_size * max_blk_count
+ **/
+static struct block_settings exynos_dwmci_blk_setting = {
+	.max_segs		= 0x1000,
+	.max_blk_size		= 0x200,
+	.max_blk_count		= 0x10000,
+	.max_seg_size		= 0x1000,
+	.max_req_size		= 0x1000 * 0x10000,
+};
+
+static struct dw_mci_board exynos_dwmci_pdata __initdata = {
+	.num_slots		= 1,
+	.quirks			= DW_MCI_QUIRK_BROKEN_CARD_DETECTION |
+				DW_MCI_QUIRK_HIGHSPEED,
+	.bus_hz			= 100 * 1000 * 1000,
+	.caps			= MMC_CAP_UHS_DDR50 | MMC_CAP_1_8V_DDR |
+				MMC_CAP_8_BIT_DATA | MMC_CAP_CMD23,
+	.caps2			= MMC_CAP2_PACKED_CMD,
+	.detect_delay_ms	= 200,
+	.hclk_name		= "dwmci",
+	.cclk_name		= "sclk_dwmci",
+	.cfg_gpio		= exynos_dwmci_cfg_gpio,
+	.blk_settings		= &exynos_dwmci_blk_setting,
+	.buf_size		= PAGE_SIZE << 4,
+};
+#else
+static struct s3c_mshci_platdata exynos4_mshc_pdata __initdata = {
+	.cd_type                = S3C_MSHCI_CD_PERMANENT,
+	.fifo_depth		= 0x80,
+	.max_width              = 8,
+	.host_caps              = MMC_CAP_8_BIT_DATA | MMC_CAP_1_8V_DDR |
+				  MMC_CAP_UHS_DDR50 | MMC_CAP_CMD23,
+	.host_caps2		= MMC_CAP2_PACKED_CMD,
+};
+#endif
+
+static struct s3c_sdhci_platdata slp_midas_hsmmc2_pdata __initdata = {
+	.cd_type                = S3C_SDHCI_CD_GPIO,
+	.ext_cd_gpio            = EXYNOS4_GPX3(4),
+	.ext_cd_gpio_invert	= true,
+	.clk_type		= S3C_SDHCI_CLK_DIV_EXTERNAL,
+	.max_width		= 4,
+	.host_caps		= MMC_CAP_4_BIT_DATA,
+	.vmmc_name		= "vtf_2.8v",
+};
+
+#ifdef CONFIG_LEDS_AAT1290A
+static int aat1290a_initGpio(void)
+{
+	int err;
+
+	err = gpio_request(GPIO_CAM_SW_EN, "CAM_SW_EN");
+	if (err) {
+		printk(KERN_ERR "failed to request CAM_SW_EN\n");
+		return -EPERM;
+	}
+	gpio_direction_output(GPIO_CAM_SW_EN, 1);
+
+	return 0;
+}
+
+static void aat1290a_switch(int enable)
+{
+	gpio_set_value(GPIO_CAM_SW_EN, enable);
+}
+
+static int aat1290a_setGpio(void)
+{
+	int err;
+
+	err = gpio_request(GPIO_TORCH_EN, "TORCH_EN");
+	if (err) {
+		printk(KERN_ERR "failed to request TORCH_EN\n");
+		return -EPERM;
+	}
+	gpio_direction_output(GPIO_TORCH_EN, 0);
+	err = gpio_request(GPIO_TORCH_SET, "TORCH_SET");
+	if (err) {
+		printk(KERN_ERR "failed to request TORCH_SET\n");
+		gpio_free(GPIO_TORCH_EN);
+		return -EPERM;
+	}
+	gpio_direction_output(GPIO_TORCH_SET, 0);
+
+	return 0;
+}
+
+static int aat1290a_freeGpio(void)
+{
+	gpio_free(GPIO_TORCH_EN);
+	gpio_free(GPIO_TORCH_SET);
+
+	return 0;
+}
+
+static void aat1290a_torch_en(int onoff)
+{
+	gpio_set_value(GPIO_TORCH_EN, onoff);
+}
+
+static void aat1290a_torch_set(int onoff)
+{
+	gpio_set_value(GPIO_TORCH_SET, onoff);
+}
+
+static struct aat1290a_led_platform_data aat1290a_led_data = {
+	.brightness = TORCH_BRIGHTNESS_50,
+	.status	= STATUS_UNAVAILABLE,
+	.switch_sel = aat1290a_switch,
+	.initGpio = aat1290a_initGpio,
+	.setGpio = aat1290a_setGpio,
+	.freeGpio = aat1290a_freeGpio,
+	.torch_en = aat1290a_torch_en,
+	.torch_set = aat1290a_torch_set,
+};
+
+static struct platform_device s3c_device_aat1290a_led = {
+	.name	= "aat1290a-led",
+	.id	= -1,
+	.dev	= {
+		.platform_data	= &aat1290a_led_data,
+	},
+};
+#endif
+
+static DEFINE_MUTEX(notify_lock);
+
+/* FIXME: For coexistence of both slp-pq and redwood board. Need to fix */
+#define DEFINE_MMC_CARD_NOTIFIER(num) \
+void (*hsmmc##num##_notify_func)(struct platform_device *, int state); \
+static int ext_cd_init_hsmmc##num(void (*notify_func)( \
+			struct platform_device *, int state)) \
+{ \
+	mutex_lock(&notify_lock); \
+	WARN_ON(hsmmc##num##_notify_func); \
+	hsmmc##num##_notify_func = notify_func; \
+	mutex_unlock(&notify_lock); \
+	return 0; \
+} \
+static int ext_cd_cleanup_hsmmc##num(void (*notify_func)( \
+			struct platform_device *, int state)) \
+{ \
+	mutex_lock(&notify_lock); \
+	WARN_ON(hsmmc##num##_notify_func != notify_func); \
+	hsmmc##num##_notify_func = NULL; \
+	mutex_unlock(&notify_lock); \
+	return 0; \
+}
+
+DEFINE_MMC_CARD_NOTIFIER(3)
+
+/*
+ * call this when you need sd stack to recognize insertion or removal of card
+ * that can't be told by SDHCI regs
+ */
+
+void mmc_force_presence_change(struct platform_device *pdev)
+{
+	void (*notify_func)(struct platform_device *, int state) = NULL;
+	mutex_lock(&notify_lock);
+	if (pdev == &s3c_device_hsmmc3)
+		notify_func = hsmmc3_notify_func;
+
+	if (notify_func)
+		notify_func(pdev, 1);
+	else
+		pr_warn("%s: called for device with no notifier\n", __func__);
+	mutex_unlock(&notify_lock);
+}
+EXPORT_SYMBOL_GPL(mmc_force_presence_change);
+
+static struct s3c_sdhci_platdata slp_midas_hsmmc3_pdata __initdata = {
+/* new code for brm4334 */
+	.cd_type	= S3C_SDHCI_CD_EXTERNAL,
+	.clk_type	= S3C_SDHCI_CLK_DIV_EXTERNAL,
+	.pm_flags	= S3C_SDHCI_PM_IGNORE_SUSPEND_RESUME,
+	.ext_cd_init	= ext_cd_init_hsmmc3,
+	.ext_cd_cleanup	= ext_cd_cleanup_hsmmc3,
+};
+
+#ifdef CONFIG_DRM_EXYNOS
+static struct resource exynos_drm_resource[] = {
+	[0] = {
+		.start = IRQ_FIMD0_VSYNC,
+		.end   = IRQ_FIMD0_VSYNC,
+		.flags = IORESOURCE_IRQ,
+	},
+};
+
+static struct platform_device exynos_drm_device = {
+	.name	= "exynos-drm",
+	.id	= -1,
+	.num_resources	  = ARRAY_SIZE(exynos_drm_resource),
+	.resource	  = exynos_drm_resource,
+	.dev	= {
+		.dma_mask = &exynos_drm_device.dev.coherent_dma_mask,
+		.coherent_dma_mask = 0xffffffffUL,
+	}
+};
+#endif
+
+enum fixed_regulator_id {
+	FIXED_REG_ID_LCD = 0,
+	FIXED_REG_ID_HDMI = 1,
+};
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+static struct exynos_drm_fimd_pdata drm_fimd_pdata = {
+	.panel = {
+		.timing	= {
+			.xres		= 720,
+			.yres		= 1280,
+			.hsync_len	= 4,
+			.left_margin	= 150,
+			.right_margin	= 26,
+			.vsync_len	= 2,
+			.upper_margin	= 1,
+			.lower_margin	= 13,
+			.refresh	= 60,
+		},
+		.width_mm	= 64,
+		.height_mm	= 106,	/* 106.24 mm */
+	},
+	.vidcon0		= VIDCON0_VIDOUT_RGB | VIDCON0_PNRMODE_RGB,
+	.vidcon1		= VIDCON1_INV_VCLK,
+	.default_win		= 3,
+	.bpp			= 32,
+	.dynamic_refresh	= 0,
+	.high_freq		= 1,
+};
+
+#ifdef CONFIG_MDNIE_SUPPORT
+static struct resource exynos4_fimd_lite_resource[] = {
+	[0] = {
+		.start	= EXYNOS4_PA_LCD_LITE0,
+		.end	= EXYNOS4_PA_LCD_LITE0 + S5P_SZ_LCD_LITE0 - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= IRQ_LCD_LITE0,
+		.end	= IRQ_LCD_LITE0,
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct resource exynos4_mdnie_resource[] = {
+	[0] = {
+		.start	= EXYNOS4_PA_MDNIE0,
+		.end	= EXYNOS4_PA_MDNIE0 + S5P_SZ_MDNIE0 - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+};
+
+static struct mdnie_platform_data exynos4_mdnie_pdata = {
+	.width			= 720,
+	.height			= 1280,
+};
+
+static struct s5p_fimd_ext_device exynos4_fimd_lite_device = {
+	.name			= "fimd_lite",
+	.id			= -1,
+	.num_resources		= ARRAY_SIZE(exynos4_fimd_lite_resource),
+	.resource		= exynos4_fimd_lite_resource,
+	.dev			= {
+		.platform_data	= &drm_fimd_pdata,
+	},
+};
+
+static struct s5p_fimd_ext_device exynos4_mdnie_device = {
+	.name			= "mdnie",
+	.id			= -1,
+	.num_resources		= ARRAY_SIZE(exynos4_mdnie_resource),
+	.resource		= exynos4_mdnie_resource,
+	.dev			= {
+		.platform_data	= &exynos4_mdnie_pdata,
+	},
+};
+
+/* FIXME:!! why init at this point ? */
+static int exynos4_common_setup_clock(const char *sclk_name,
+	const char *pclk_name, unsigned long rate, unsigned int rate_set)
+{
+	struct clk *sclk = NULL;
+	struct clk *pclk = NULL;
+
+	sclk = clk_get(NULL, sclk_name);
+	if (IS_ERR(sclk)) {
+		printk(KERN_ERR "failed to get %s clock.\n", sclk_name);
+		goto err_clk;
+	}
+
+	pclk = clk_get(NULL, pclk_name);
+	if (IS_ERR(pclk)) {
+		printk(KERN_ERR "failed to get %s clock.\n", pclk_name);
+		goto err_clk;
+	}
+
+	clk_set_parent(sclk, pclk);
+
+	printk(KERN_INFO "set parent clock of %s to %s\n", sclk_name,
+			pclk_name);
+	if (!rate_set)
+		goto set_end;
+
+	if (!rate)
+		rate = 200 * MHZ;
+
+	clk_set_rate(sclk, rate);
+
+set_end:
+	clk_put(sclk);
+	clk_put(pclk);
+
+	return 0;
+
+err_clk:
+	clk_put(sclk);
+	clk_put(pclk);
+
+	return -EINVAL;
+
+}
+#endif
+
+static struct regulator_consumer_supply lcd_supplies[] = {
+	REGULATOR_SUPPLY("VDD3", "ea8061"),
+};
+
+static struct regulator_init_data lcd_fixed_reg_initdata = {
+	.constraints = {
+		.valid_ops_mask = REGULATOR_CHANGE_STATUS,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(lcd_supplies),
+	.consumer_supplies = lcd_supplies,
+};
+
+static struct fixed_voltage_config lcd_config = {
+	.init_data = &lcd_fixed_reg_initdata,
+	.microvolts = 1800000,
+	.supply_name = "VDD3",
+	.gpio = GPIO_LCD_18V_EN,
+	.enable_high = 1,
+	.enabled_at_boot = 0,
+};
+
+static struct platform_device lcd_fixed_reg_device = {
+	.name = "reg-fixed-voltage",
+	.id = FIXED_REG_ID_LCD,
+	.dev = {
+		.platform_data = &lcd_config,
+	},
+};
+
+static int reset_lcd(struct lcd_device *ld)
+{
+	static unsigned int first = 1;
+	int reset_gpio = -1;
+
+	reset_gpio = EXYNOS4_GPF2(1);
+
+	if (first) {
+		gpio_request(reset_gpio, "MLCD_RST");
+		first = 0;
+	}
+
+	mdelay(10);
+	gpio_direction_output(reset_gpio, 0);
+	mdelay(10);
+	gpio_direction_output(reset_gpio, 1);
+
+	dev_info(&ld->dev, "reset completed.\n");
+
+	return 0;
+}
+
+static struct lcd_property ea8061_property = {
+	.flip = LCD_PROPERTY_FLIP_NONE,
+	.dynamic_refresh = false,
+};
+
+static struct lcd_platform_data ea8061_pdata = {
+	.reset			= reset_lcd,
+	.reset_delay		= 5,
+	.power_off_delay	= 100,
+	.power_on_delay	= 120,
+	.lcd_enabled		= 0,
+	.pdata	= &ea8061_property,
+};
+
+static void lcd_cfg_gpio(void)
+{
+	int reg;
+
+	if (hwrevision(1)) {
+		/* LCD_EN */
+		s3c_gpio_cfgpin(GPIO_LCD_22V_EN_00, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_LCD_22V_EN_00, S3C_GPIO_PULL_NONE);
+	}
+
+	reg = __raw_readl(S3C_VA_SYS + 0x210);
+	reg |= 1 << 1;
+	__raw_writel(reg, S3C_VA_SYS + 0x210);
+
+	return;
+}
+
+#ifdef CONFIG_S5P_MIPI_DSI2
+static struct mipi_dsim_config dsim_config = {
+	.e_interface		= DSIM_VIDEO,
+	.e_virtual_ch		= DSIM_VIRTUAL_CH_0,
+	.e_pixel_format		= DSIM_24BPP_888,
+	.e_burst_mode		= DSIM_BURST_SYNC_EVENT,
+	.e_no_data_lane		= DSIM_DATA_LANE_4,
+	.e_byte_clk		= DSIM_PLL_OUT_DIV8,
+	.cmd_allow		= 0xf,
+
+	/*
+	 * ===========================================
+	 * |    P    |    M    |    S    |    MHz    |
+	 * -------------------------------------------
+	 * |    3    |   100   |    3    |    100    |
+	 * |    3    |   100   |    2    |    200    |
+	 * |    3    |    63   |    1    |    252    |
+	 * |    4    |   100   |    1    |    300    |
+	 * |    4    |   110   |    1    |    330    |
+	 * |   12    |   350   |    1    |    350    |
+	 * |    3    |   100   |    1    |    400    |
+	 * |    4    |   150   |    1    |    450    |
+	 * |    3    |   120   |    1    |    480    |
+	 * |   12    |   250   |    0    |    500    |
+	 * |    4    |   100   |    0    |    600    |
+	 * |    3    |    81   |    0    |    648    |
+	 * |    3    |    88   |    0    |    704    |
+	 * |    3    |    90   |    0    |    720    |
+	 * |    3    |   100   |    0    |    800    |
+	 * |   12    |   425   |    0    |    850    |
+	 * |    4    |   150   |    0    |    900    |
+	 * |   12    |   475   |    0    |    950    |
+	 * |    6    |   250   |    0    |   1000    |
+	 * -------------------------------------------
+	 */
+
+	.p			= 12,
+	.m			= 250,
+	.s			= 0,
+
+	/* D-PHY PLL stable time spec :min = 200usec ~ max 400usec */
+	.pll_stable_time	= 500,
+
+	/* escape clk : 10MHz */
+	.esc_clk		= 10 * 1000000,
+
+	/* stop state holding counter after bta change count 0 ~ 0xfff */
+	.stop_holding_cnt	= 0x7ff,
+	/* bta timeout 0 ~ 0xff */
+	.bta_timeout		= 0xff,
+	/* lp rx timeout 0 ~ 0xffff */
+	.rx_timeout		= 0xffff,
+};
+
+static struct s5p_platform_mipi_dsim dsim_platform_data = {
+	/* already enabled at boot loader. FIXME!!! */
+	.enabled		= false,
+	.phy_enable		= s5p_dsim_phy_enable,
+	.dsim_config		= &dsim_config,
+};
+
+static struct mipi_dsim_lcd_device mipi_lcd_device = {
+	.name			= "ea8061",
+	.id			= -1,
+	.bus_id			= 0,
+
+	.platform_data		= (void *)&ea8061_pdata,
+};
+#endif
+
+static void __init t0_lte_fb_init(void)
+{
+#ifdef CONFIG_S5P_MIPI_DSI2
+	struct s5p_platform_mipi_dsim *dsim_pdata;
+
+	dsim_pdata = (struct s5p_platform_mipi_dsim *)&dsim_platform_data;
+	strcpy(dsim_pdata->lcd_panel_name, "ea8061");
+	dsim_pdata->lcd_panel_info = (void *)&drm_fimd_pdata.panel.timing;
+
+	s5p_mipi_dsi_register_lcd_device(&mipi_lcd_device);
+	platform_device_register(&lcd_fixed_reg_device);
+#ifdef CONFIG_MDNIE_SUPPORT
+	s5p_fimd_ext_device_register(&exynos4_mdnie_device);
+	s5p_fimd_ext_device_register(&exynos4_fimd_lite_device);
+	exynos4_common_setup_clock("sclk_mdnie", "mout_mpll_user",
+				400 * MHZ, 1);
+#endif
+	s5p_device_mipi_dsim0.dev.platform_data = (void *)&dsim_platform_data;
+	platform_device_register(&s5p_device_mipi_dsim0);
+#endif
+
+	s5p_device_fimd0.dev.platform_data = &drm_fimd_pdata;
+	lcd_cfg_gpio();
+}
+
+static unsigned long fbmem_start;
+static int __init early_fbmem(char *p)
+{
+	char *endp;
+	unsigned long size;
+
+	if (!p)
+		return -EINVAL;
+
+	size = memparse(p, &endp);
+	if (*endp == '@')
+		fbmem_start = memparse(endp + 1, &endp);
+
+	return endp > p ? 0 : -EINVAL;
+}
+early_param("fbmem", early_fbmem);
+#endif
+
+#ifdef CONFIG_DRM_EXYNOS_HDMI
+/* I2C HDMIPHY */
+static struct s3c2410_platform_i2c hdmiphy_i2c_data __initdata = {
+	.bus_num	= 8,
+	.flags		= 0,
+	.slave_addr	= 0x10,
+	.frequency	= 100*1000,
+	.sda_delay	= 100,
+};
+
+static struct i2c_board_info i2c_hdmiphy_devs[] __initdata = {
+	{
+		/* hdmiphy */
+		I2C_BOARD_INFO("s5p_hdmiphy", (0x70 >> 1)),
+	},
+};
+
+static struct exynos_drm_hdmi_pdata drm_hdmi_pdata = {
+	.cfg_hpd	= s5p_hdmi_cfg_hpd,
+	.get_hpd	= s5p_hdmi_get_hpd,
+};
+
+static struct exynos_drm_common_hdmi_pd drm_common_hdmi_pdata = {
+	.hdmi_dev	= &s5p_device_hdmi.dev,
+	.mixer_dev	= &s5p_device_mixer.dev,
+};
+
+static struct platform_device exynos_drm_hdmi_device = {
+	.name	= "exynos-drm-hdmi",
+	.dev	= {
+		.platform_data = &drm_common_hdmi_pdata,
+	},
+};
+
+static void t0_lte_tv_init(void)
+{
+	/* HDMI PHY */
+	s5p_i2c_hdmiphy_set_platdata(&hdmiphy_i2c_data);
+	i2c_register_board_info(8, i2c_hdmiphy_devs,
+				ARRAY_SIZE(i2c_hdmiphy_devs));
+
+	gpio_request(GPIO_HDMI_HPD, "HDMI_HPD");
+	gpio_direction_input(GPIO_HDMI_HPD);
+	s3c_gpio_cfgpin(GPIO_HDMI_HPD, S3C_GPIO_SFN(0x3));
+	s3c_gpio_setpull(GPIO_HDMI_HPD, S3C_GPIO_PULL_DOWN);
+
+#ifdef CONFIG_EXYNOS_DEV_PD
+	s5p_device_hdmi.dev.parent = &exynos4_device_pd[PD_TV].dev;
+	s5p_device_mixer.dev.parent = &exynos4_device_pd[PD_TV].dev;
+#endif
+	s5p_device_hdmi.dev.platform_data = &drm_hdmi_pdata;
+}
+
+/* FIXME:!! must move to midas-mhl.c */
+#ifndef CONFIG_HDMI_HPD
+/* Dummy function */
+void mhl_hpd_handler(bool onoff)
+{
+	printk(KERN_INFO "hpd(%d)\n", onoff);
+}
+EXPORT_SYMBOL(mhl_hpd_handler);
+#endif
+#endif
+
+static struct platform_device exynos_drm_vidi_device = {
+	.name	= "exynos-drm-vidi",
+};
+
+#ifdef CONFIG_CPU_FREQ_GOV_ONDEMAND_FLEXRATE
+static void flexrate_work(struct work_struct *work)
+{
+	cpufreq_ondemand_flexrate_request(10000, 10);
+}
+static DECLARE_WORK(flex_work, flexrate_work);
+#endif
+
+#include <linux/pm_qos_params.h>
+static struct pm_qos_request_list busfreq_qos;
+static void flexrate_qos_cancel(struct work_struct *work)
+{
+	pm_qos_update_request(&busfreq_qos, 0);
+}
+
+static DECLARE_DELAYED_WORK(busqos_work, flexrate_qos_cancel);
+
+static void tsp_request_qos(void *data)
+{
+#ifdef CONFIG_CPU_FREQ_GOV_ONDEMAND_FLEXRATE
+	if (!work_pending(&flex_work))
+		schedule_work_on(0, &flex_work);
+#endif
+	/* Guarantee that the bus runs at >= 266MHz */
+	if (!pm_qos_request_active(&busfreq_qos))
+		pm_qos_add_request(&busfreq_qos, PM_QOS_BUS_DMA_THROUGHPUT,
+				   266000);
+	else {
+		cancel_delayed_work_sync(&busqos_work);
+		pm_qos_update_request(&busfreq_qos, 266000);
+	}
+
+	/* Cancel the QoS request after 1/10 sec */
+	schedule_delayed_work_on(0, &busqos_work, HZ / 5);
+}
+
+#ifdef CONFIG_TOUCHSCREEN_MELFAS_MMS
+/* MELFAS TSP */
+static bool enabled;
+static int melfas_mms_power(int on)
+{
+	struct regulator *regulator_avdd;
+	struct regulator *regulator_iovdd;
+
+	if (enabled == on)
+		return 0;
+
+	/* Analog-Panel Power: 3.3V */
+	regulator_avdd = regulator_get(NULL, "touch");
+	if (IS_ERR(regulator_avdd))
+		return PTR_ERR(regulator_avdd);
+
+	/* IO Logic Power: 1.8V */
+	regulator_iovdd = regulator_get(NULL, "touch_1.8v");
+	if (IS_ERR(regulator_iovdd)) {
+		regulator_put(regulator_avdd);
+		return PTR_ERR(regulator_iovdd);
+	}
+
+	printk(KERN_DEBUG "[TSP] %s %s\n", __func__, on ? "on" : "off");
+
+	if (on) {
+		regulator_enable(regulator_avdd);
+		regulator_enable(regulator_iovdd);
+	} else {
+		if (regulator_is_enabled(regulator_iovdd))
+			regulator_disable(regulator_iovdd);
+		if (regulator_is_enabled(regulator_avdd))
+			regulator_disable(regulator_avdd);
+	}
+
+	enabled = on;
+	regulator_put(regulator_avdd);
+	regulator_put(regulator_iovdd);
+
+	return 0;
+}
+
+static int is_melfas_mms_vdd_on(void)
+{
+	int ret;
+	/* 3.3V */
+	static struct regulator *regulator;
+
+	if (!regulator) {
+		regulator = regulator_get(NULL, "touch");
+		if (IS_ERR(regulator)) {
+			ret = PTR_ERR(regulator);
+			pr_err("could not get touch, rc = %d\n", ret);
+			return ret;
+		}
+	}
+
+	if (regulator_is_enabled(regulator))
+		return 1;
+	else
+		return 0;
+}
+
+static int melfas_mms_mux_fw_flash(bool to_gpios)
+{
+	pr_info("%s:to_gpios=%d\n", __func__, to_gpios);
+
+	/* TOUCH_EN is always an output */
+	if (to_gpios) {
+		if (gpio_request(GPIO_TSP_SCL_18V, "GPIO_TSP_SCL"))
+			pr_err("failed to request gpio(GPIO_TSP_SCL)\n");
+		if (gpio_request(GPIO_TSP_SDA_18V, "GPIO_TSP_SDA"))
+			pr_err("failed to request gpio(GPIO_TSP_SDA)\n");
+
+		gpio_direction_output(GPIO_TSP_INT, 0);
+		s3c_gpio_cfgpin(GPIO_TSP_INT, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_TSP_INT, S3C_GPIO_PULL_NONE);
+
+		gpio_direction_output(GPIO_TSP_SCL_18V, 0);
+		s3c_gpio_cfgpin(GPIO_TSP_SCL_18V, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_TSP_SCL_18V, S3C_GPIO_PULL_NONE);
+
+		gpio_direction_output(GPIO_TSP_SDA_18V, 0);
+		s3c_gpio_cfgpin(GPIO_TSP_SDA_18V, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_TSP_SDA_18V, S3C_GPIO_PULL_NONE);
+
+	} else {
+		gpio_direction_output(GPIO_TSP_INT, 1);
+		gpio_direction_input(GPIO_TSP_INT);
+		s3c_gpio_cfgpin(GPIO_TSP_INT, S3C_GPIO_SFN(0xf));
+		/*s3c_gpio_cfgpin(GPIO_TSP_INT, S3C_GPIO_INPUT); */
+		s3c_gpio_setpull(GPIO_TSP_INT, S3C_GPIO_PULL_NONE);
+		/*S3C_GPIO_PULL_UP */
+
+		gpio_direction_output(GPIO_TSP_SCL_18V, 1);
+		gpio_direction_input(GPIO_TSP_SCL_18V);
+		s3c_gpio_cfgpin(GPIO_TSP_SCL_18V, S3C_GPIO_SFN(3));
+		s3c_gpio_setpull(GPIO_TSP_SCL_18V, S3C_GPIO_PULL_NONE);
+
+		gpio_direction_output(GPIO_TSP_SDA_18V, 1);
+		gpio_direction_input(GPIO_TSP_SDA_18V);
+		s3c_gpio_cfgpin(GPIO_TSP_SDA_18V, S3C_GPIO_SFN(3));
+		s3c_gpio_setpull(GPIO_TSP_SDA_18V, S3C_GPIO_PULL_NONE);
+
+		gpio_free(GPIO_TSP_SCL_18V);
+		gpio_free(GPIO_TSP_SDA_18V);
+	}
+	return 0;
+}
+
+static struct tsp_callbacks *charger_callbacks;
+static struct tsp_callbacks {
+	void (*inform_charger)(struct tsp_callbacks *, bool);
+};
+
+static void tsp_charger_infom(bool en)
+{
+	if (charger_callbacks && charger_callbacks->inform_charger)
+		charger_callbacks->inform_charger(charger_callbacks, en);
+}
+
+static void melfas_register_callback(void *cb)
+{
+	charger_callbacks = cb;
+	pr_debug("[TSP] melfas_register_callback\n");
+}
+
+static struct melfas_mms_platform_data mms_ts_pdata = {
+	.max_x = 720,
+	.max_y = 1280,
+	.invert_x = 0,
+	.invert_y = 0,
+	.gpio_int = GPIO_TSP_INT,
+	.gpio_scl = GPIO_TSP_SCL_18V,
+	.gpio_sda = GPIO_TSP_SDA_18V,
+	.power = melfas_mms_power,
+	.mux_fw_flash = melfas_mms_mux_fw_flash,
+	.is_vdd_on = is_melfas_mms_vdd_on,
+	.input_event = tsp_request_qos,
+	.register_cb = melfas_register_callback,
+};
+
+static struct melfas_mms_platform_data mms_ts_pdata_rotate = {
+	.max_x = 720,
+	.max_y = 1280,
+	.invert_x = 720,
+	.invert_y = 1280,
+	.gpio_int = GPIO_TSP_INT,
+	.gpio_scl = GPIO_TSP_SCL_18V,
+	.gpio_sda = GPIO_TSP_SDA_18V,
+	.power = melfas_mms_power,
+	.mux_fw_flash = melfas_mms_mux_fw_flash,
+	.is_vdd_on = is_melfas_mms_vdd_on,
+	.input_event = tsp_request_qos,
+	.register_cb = melfas_register_callback,
+};
+
+static struct i2c_board_info i2c_devs3[] = {
+	{
+	 I2C_BOARD_INFO(MELFAS_TS_NAME, 0x48),
+	 .platform_data = &mms_ts_pdata},
+};
+
+static void __init t0_lte_tsp_set_platdata(struct melfas_mms_platform_data
+	*pdata)
+{
+	if (!pdata)
+		pdata = &mms_ts_pdata;
+
+	i2c_devs3[0].platform_data = pdata;
+}
+
+static void __init t0_lte_tsp_init(void)
+{
+	int gpio;
+	int ret;
+	printk(KERN_INFO "[TSP] midas_tsp_init() is called\n");
+
+	/* TSP_INT: XEINT_4 */
+	gpio = GPIO_TSP_INT;
+	ret = gpio_request(gpio, "TSP_INT");
+	if (ret)
+		pr_err("failed to request gpio(TSP_INT)\n");
+	s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(0xf));
+	s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+
+	s5p_register_gpio_interrupt(gpio);
+	i2c_devs3[0].irq = gpio_to_irq(gpio);
+
+	printk(KERN_INFO "%s touch : %d\n", __func__, i2c_devs3[0].irq);
+
+	i2c_register_board_info(3, i2c_devs3, ARRAY_SIZE(i2c_devs3));
+}
+#endif
+
+static struct i2c_board_info i2c_devs0[] __initdata = {
+	/*
+	 * GPD1(0, 1) / XI2C0SDA/SCL
+	 * PQ_LTE: 8M_CAM, PQ(proxima): NC
+	 */
+};
+
+#ifdef CONFIG_SENSORS_SSP
+static int wakeup_mcu(void);
+static int check_mcu_ready(void);
+static int set_mcu_reset(int on);
+static int check_ap_rev(void);
+
+static struct ssp_platform_data ssp_pdata = {
+	.wakeup_mcu = wakeup_mcu,
+	.check_mcu_ready = check_mcu_ready,
+	.set_mcu_reset = set_mcu_reset,
+	.check_ap_rev = check_ap_rev,
+};
+#endif
+
+static struct i2c_board_info i2c_devs1[] __initdata = {
+#ifdef CONFIG_SENSORS_LSM330DLC
+	/* PQ_LTE/PQ both use GSENSE_SCL/SDA */
+	{
+		I2C_BOARD_INFO("lsm330dlc_accel", (0x32 >> 1)),
+		.platform_data = &lsm330dlc_accel_pdata,
+	},
+	{
+		I2C_BOARD_INFO("lsm330dlc_gyro", (0xD6 >> 1)),
+	},
+#elif defined(CONFIG_SENSORS_SSP)
+	{
+		I2C_BOARD_INFO("ssp", 0x18),
+		.platform_data = &ssp_pdata,
+		.irq = GPIO_MCU_AP_INT,
+	},
+#endif
+};
+
+#ifdef CONFIG_SENSORS_LSM330DLC
+static int lsm330dlc_accel_get_position(void)
+{
+	int position = 0;
+
+#if defined(CONFIG_MACH_SLP_PQ)
+	if (system_rev == 3 || system_rev == 0)
+		position = 2; /* top/lower-right */
+	else
+		position = 6; /* bottom/lower-right */
+#elif defined(CONFIG_MACH_SLP_PQ_LTE)
+	position = 3; /* top/lower-left */
+#else /* Common */
+	position = 2; /* top/lower-right */
+#endif
+	return position;
+}
+
+static struct accel_platform_data lsm330dlc_accel_pdata = {
+	.accel_get_position = lsm330dlc_accel_get_position,
+	.axis_adjust = true,
+};
+
+static void lsm331dlc_gpio_init(void)
+{
+	int ret = gpio_request(GPIO_GYRO_INT, "lsm330dlc_gyro_irq");
+
+	printk(KERN_INFO "%s\n", __func__);
+
+	if (ret)
+		printk(KERN_ERR "Failed to request gpio lsm330dlc_gyro_irq\n");
+
+	ret = gpio_request(GPIO_GYRO_DE, "lsm330dlc_gyro_data_enable");
+
+	if (ret)
+		printk(KERN_ERR "Failed to request gpio lsm330dlc_gyro_data_enable\n");
+
+	ret = gpio_request(GPIO_ACC_INT, "lsm330dlc_accel_irq");
+
+	if (ret)
+		printk(KERN_ERR "Failed to request gpio lsm330dlc_accel_irq\n");
+
+	/* Accelerometer sensor interrupt pin initialization */
+	s3c_gpio_cfgpin(GPIO_ACC_INT, S3C_GPIO_INPUT);
+	gpio_set_value(GPIO_ACC_INT, 2);
+	s3c_gpio_setpull(GPIO_ACC_INT, S3C_GPIO_PULL_NONE);
+	s5p_gpio_set_drvstr(GPIO_ACC_INT, S5P_GPIO_DRVSTR_LV1);
+	i2c_devs1[0].irq = gpio_to_irq(GPIO_ACC_INT);
+
+	/* Gyro sensor interrupt pin initialization */
+	s3c_gpio_cfgpin(GPIO_GYRO_INT, S3C_GPIO_INPUT);
+	gpio_set_value(GPIO_GYRO_INT, 2);
+	s3c_gpio_setpull(GPIO_GYRO_INT, S3C_GPIO_PULL_NONE);
+	s5p_gpio_set_drvstr(GPIO_GYRO_INT, S5P_GPIO_DRVSTR_LV1);
+	i2c_devs1[1].irq = gpio_to_irq(GPIO_GYRO_INT);
+
+	/* Gyro sensor data enable pin initialization */
+	s3c_gpio_cfgpin(GPIO_GYRO_DE, S3C_GPIO_OUTPUT);
+	gpio_set_value(GPIO_GYRO_DE, 0);
+	s3c_gpio_setpull(GPIO_GYRO_DE, S3C_GPIO_PULL_DOWN);
+	s5p_gpio_set_drvstr(GPIO_GYRO_DE, S5P_GPIO_DRVSTR_LV1);
+}
+#endif
+
+#ifdef CONFIG_SENSORS_SSP
+static int initialize_ssp_gpio(void)
+{
+	int err;
+
+	err = gpio_request(GPIO_AP_MCU_INT, "AP_MCU_INT_PIN");
+	if (err)
+		printk(KERN_ERR "failed to request AP_MCU_INT for SSP\n");
+
+	s3c_gpio_cfgpin(GPIO_AP_MCU_INT, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_AP_MCU_INT, S3C_GPIO_PULL_NONE);
+	gpio_direction_output(GPIO_AP_MCU_INT, 0);
+
+	err = gpio_request(GPIO_MCU_AP_INT_2, "AP_MCU_INT_PIN2");
+	if (err)
+		printk(KERN_ERR "failed to request AP_MCU_INT for SSP\n");
+	s3c_gpio_cfgpin(GPIO_MCU_AP_INT_2, S3C_GPIO_INPUT);
+	s3c_gpio_setpull(GPIO_MCU_AP_INT_2, S3C_GPIO_PULL_NONE);
+
+	err = gpio_request(GPIO_MCU_NRST, "AP_MCU_RESET");
+	if (err)
+		printk(KERN_ERR "failed to request AP_MCU_RESET for SSP\n");
+	s3c_gpio_cfgpin(GPIO_MCU_NRST, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_MCU_NRST, S3C_GPIO_PULL_NONE);
+	gpio_direction_output(GPIO_MCU_NRST, 1);
+
+	return 0;
+}
+
+static int wakeup_mcu(void)
+{
+	gpio_set_value(GPIO_AP_MCU_INT, 1);
+	udelay(1);
+	gpio_set_value(GPIO_AP_MCU_INT, 0);
+
+	return 0;
+}
+
+static int set_mcu_reset(int on)
+{
+	if (on == 0)
+		gpio_set_value(GPIO_MCU_NRST, 0);
+	else
+		gpio_set_value(GPIO_MCU_NRST, 1);
+
+	return 0;
+}
+
+static int check_mcu_ready(void)
+{
+	return gpio_get_value(GPIO_MCU_AP_INT_2);
+}
+
+static int check_ap_rev(void)
+{
+	printk(KERN_INFO "[SSP]  %s is called\n", __func__);
+
+	return system_rev;
+}
+#endif
+
+#ifdef CONFIG_VIBETONZ
+static struct max77693_haptic_platform_data max77693_haptic_pdata = {
+	.max_timeout = 10000,
+	.duty = 37641,
+	.period = 38022,
+	.reg2 = MOTOR_LRA | EXT_PWM | DIVIDER_128,
+	.init_hw = NULL,
+	.motor_en = NULL,
+	.pwm_id = 0,
+	.regulator_name = "vmotor",
+};
+#endif
+
+#ifdef CONFIG_LEDS_MAX77693
+static struct max77693_led_platform_data max77693_led_pdata = {
+	.num_leds = 4,
+
+	.leds[0].name = "leds-sec1",
+	.leds[0].id = MAX77693_FLASH_LED_1,
+	.leds[0].timer = MAX77693_FLASH_TIME_500MS,
+	.leds[0].timer_mode = MAX77693_TIMER_MODE_MAX_TIMER,
+	.leds[0].cntrl_mode = MAX77693_LED_CTRL_BY_FLASHSTB,
+	.leds[0].brightness = 0x1F,
+
+	.leds[1].name = "leds-sec2",
+	.leds[1].id = MAX77693_FLASH_LED_2,
+	.leds[1].timer = MAX77693_FLASH_TIME_500MS,
+	.leds[1].timer_mode = MAX77693_TIMER_MODE_MAX_TIMER,
+	.leds[1].cntrl_mode = MAX77693_LED_CTRL_BY_FLASHSTB,
+	.leds[1].brightness = 0x1F,
+
+	.leds[2].name = "torch-sec1",
+	.leds[2].id = MAX77693_TORCH_LED_1,
+	.leds[2].cntrl_mode = MAX77693_LED_CTRL_BY_FLASHSTB,
+	.leds[2].brightness = 0x0F,
+
+	.leds[3].name = "torch-sec2",
+	.leds[3].id = MAX77693_TORCH_LED_2,
+	.leds[3].cntrl_mode = MAX77693_LED_CTRL_BY_I2C,
+	.leds[3].brightness = 0x0F,
+
+};
+#endif
+
+static struct max77693_charger_reg_data max77693_charger_regs[] = {
+	{
+		/*
+		 * charger setting unlock
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_06,
+		.data = 0x3 << 2,
+	}, {
+		/*
+		 * fast-charge timer : 10hr
+		 * charger restart threshold : disabled
+		 * low-battery prequalification mode : enabled
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_01,
+		.data = (0x4 << 0) | (0x3 << 4),
+	}, {
+		/*
+		 * CHGIN output current limit in OTG mode : 900mA
+		 * fast-charge current : 466mA
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_02,
+		.data = (1 << 7) | 0xf,
+	}, {
+		/*
+		 * TOP off timer setting : 0min
+		 * TOP off current threshold : 100mA
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_03,
+		.data = 0x0,
+	}, {
+		/*
+		* minimum system regulation voltage : 3.6V
+		* primary charge termination voltage : 4.2V
+		*/
+		.addr = MAX77693_CHG_REG_CHG_CNFG_04,
+		.data = 0xd6,
+	}, {
+		/*
+		 * maximum input current limit : 600mA
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_09,
+		.data = 0x1e,
+	}, {
+		/*
+		 * VBYPSET 5V for USB HOST
+		 */
+		.addr = MAX77693_CHG_REG_CHG_CNFG_11,
+		.data = 0x50,
+	},
+};
+
+static struct max77693_charger_platform_data max77693_charger_pdata = {
+	.init_data = max77693_charger_regs,
+	.num_init_data = ARRAY_SIZE(max77693_charger_regs),
+};
+
+static void max77693_change_top_off_vol(void)
+{
+	int i = 0;
+
+	/*
+	* minimum system regulation voltage : 3.6V
+	* primary charge termination voltage : 4.35V
+	*/
+	for (i = 0; i < max77693_charger_pdata.num_init_data; i++) {
+		if (max77693_charger_pdata.init_data[i].addr ==
+				MAX77693_CHG_REG_CHG_CNFG_04)
+			max77693_charger_pdata.init_data[i].data = 0xdd;
+	}
+
+	return ;
+}
+
+static struct max77693_platform_data midas_max77693_info = {
+	.irq_base	= IRQ_BOARD_IFIC_START,
+	.irq_gpio	= GPIO_IF_PMIC_IRQ,
+	.wakeup		= 1,
+	.muic = &max77693_muic,
+	.regulators = &max77693_regulators,
+	.num_regulators = MAX77693_REG_MAX,
+#ifdef CONFIG_VIBETONZ
+	.haptic_data = &max77693_haptic_pdata,
+#endif
+#ifdef CONFIG_LEDS_MAX77693
+	.led_data = &max77693_led_pdata,
+#endif
+	.charger_data = &max77693_charger_pdata,
+};
+
+/* I2C GPIO: PQ/PQ_LTE use GPM2[0,1] for MAX77693 */
+static struct i2c_gpio_platform_data gpio_i2c_if_pmic = {
+	/* PQ/PQLTE use GPF1(4, 5) */
+	.sda_pin = GPIO_IF_PMIC_SDA,
+	.scl_pin = GPIO_IF_PMIC_SCL,
+};
+
+static struct platform_device device_i2c_if_pmic = {
+	.name = "i2c-gpio",
+	.id = I2C_IF_PMIC,
+	.dev.platform_data = &gpio_i2c_if_pmic,
+};
+
+static struct i2c_board_info i2c_devs_if_pmic[] __initdata = {
+	{
+		I2C_BOARD_INFO("max77693", (0xCC >> 1)),
+		.platform_data = &midas_max77693_info,
+	},
+};
+
+/* Both PQ/PQ_LTE use I2C7 (XPWMTOUT_2/3) for MAX77686 */
+static struct i2c_board_info i2c_devs7[] __initdata = {
+	{
+		I2C_BOARD_INFO("max77686", (0x12 >> 1)),
+		.platform_data	= &exynos4_max77686_info,
+	}
+};
+
+#ifdef CONFIG_USB_EHCI_S5P
+static struct s5p_ehci_platdata smdk4212_ehci_pdata;
+
+static void __init smdk4212_ehci_init(void)
+{
+	struct s5p_ehci_platdata *pdata = &smdk4212_ehci_pdata;
+
+	s5p_ehci_set_platdata(pdata);
+}
+#endif
+
+#ifdef CONFIG_USB_OHCI_S5P
+static struct s5p_ohci_platdata smdk4212_ohci_pdata;
+
+static void __init smdk4212_ohci_init(void)
+{
+	struct s5p_ohci_platdata *pdata = &smdk4212_ohci_pdata;
+
+	s5p_ohci_set_platdata(pdata);
+}
+#endif
+
+/* USB GADGET */
+#ifdef CONFIG_USB_GADGET
+static struct s5p_usbgadget_platdata smdk4212_usbgadget_pdata;
+
+static void __init smdk4212_usbgadget_init(void)
+{
+	struct s5p_usbgadget_platdata *pdata = &smdk4212_usbgadget_pdata;
+
+	s5p_usbgadget_set_platdata(pdata);
+}
+#endif
+
+#ifdef CONFIG_USB_G_SLP
+#include <linux/usb/slp_multi.h>
+static struct slp_multi_func_data midas_slp_multi_funcs[] = {
+	{
+		.name = "mtp",
+		.usb_config_id = USB_CONFIGURATION_DUAL,
+	}, {
+		.name = "acm",
+		.usb_config_id = USB_CONFIGURATION_2,
+	}, {
+		.name = "sdb",
+		.usb_config_id = USB_CONFIGURATION_2,
+	}, {
+		.name = "mass_storage",
+		.usb_config_id = USB_CONFIGURATION_1,
+	}, {
+		.name = "rndis",
+		.usb_config_id = USB_CONFIGURATION_1,
+	}, {
+		.name = "accessory",
+		.usb_config_id = USB_CONFIGURATION_1,
+	}, {
+		.name = "diag",
+		.usb_config_id = USB_CONFIGURATION_1,
+	},
+};
+
+static struct slp_multi_platform_data midas_slp_multi_pdata = {
+	.nluns	= 2,
+	.funcs = midas_slp_multi_funcs,
+	.nfuncs = ARRAY_SIZE(midas_slp_multi_funcs),
+};
+
+static struct platform_device midas_slp_usb_multi = {
+	.name		= "slp_multi",
+	.id			= -1,
+	.dev		= {
+		.platform_data = &midas_slp_multi_pdata,
+	},
+};
+#endif
+
+#ifdef CONFIG_SND_SOC_WM8994
+/* vbatt device (for WM8994) */
+static struct regulator_consumer_supply vbatt_supplies[] = {
+	REGULATOR_SUPPLY("LDO1VDD", NULL),
+	REGULATOR_SUPPLY("SPKVDD1", NULL),
+	REGULATOR_SUPPLY("SPKVDD2", NULL),
+};
+
+static struct regulator_init_data vbatt_initdata = {
+	.constraints = {
+		.always_on = 1,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(vbatt_supplies),
+	.consumer_supplies = vbatt_supplies,
+};
+
+static struct fixed_voltage_config vbatt_config = {
+	.init_data = &vbatt_initdata,
+	.microvolts = 5000000,
+	.supply_name = "VBATT",
+	.gpio = -EINVAL,
+};
+
+static struct platform_device vbatt_device = {
+	.name = "reg-fixed-voltage",
+	.id = -1,
+	.dev = {
+		.platform_data = &vbatt_config,
+	},
+};
+
+/* I2C GPIO: GPF0(0/1) for CODEC_SDA/SCL */
+static struct regulator_consumer_supply wm1811_ldo1_supplies[] = {
+	REGULATOR_SUPPLY("AVDD1", NULL),
+};
+
+static struct regulator_init_data wm1811_ldo1_initdata = {
+	.constraints = {
+		.name = "WM1811 LDO1",
+		.valid_ops_mask = REGULATOR_CHANGE_STATUS,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(wm1811_ldo1_supplies),
+	.consumer_supplies = wm1811_ldo1_supplies,
+};
+
+static struct regulator_consumer_supply wm1811_ldo2_supplies[] = {
+	REGULATOR_SUPPLY("DCVDD", NULL),
+};
+
+static struct regulator_init_data wm1811_ldo2_initdata = {
+	.constraints = {
+		.name = "WM1811 LDO2",
+		.always_on = true, /* Actually status changed by LDO1 */
+	},
+	.num_consumer_supplies = ARRAY_SIZE(wm1811_ldo2_supplies),
+	.consumer_supplies = wm1811_ldo2_supplies,
+};
+
+static struct wm8994_pdata wm1811_pdata = {
+	.gpio_defaults = {
+		[0] = WM8994_GP_FN_IRQ,   /* GPIO1 IRQ output, CMOS mode */
+		[7] = WM8994_GPN_DIR | WM8994_GP_FN_PIN_SPECIFIC, /* DACDAT3 */
+		[8] = WM8994_CONFIGURE_GPIO |
+			  WM8994_GP_FN_PIN_SPECIFIC, /* ADCDAT3 */
+		[9] = WM8994_CONFIGURE_GPIO |\
+			  WM8994_GP_FN_PIN_SPECIFIC, /* LRCLK3 */
+		[10] = WM8994_CONFIGURE_GPIO |\
+			   WM8994_GP_FN_PIN_SPECIFIC, /* BCLK3 */
+	},
+
+	.irq_base = IRQ_BOARD_CODEC_START,
+
+	/* The enable is shared but assign it to LDO1 for software */
+	.ldo = {
+		{
+			.enable = GPIO_WM8994_LDO,
+			.init_data = &wm1811_ldo1_initdata,
+		},
+		{
+			.init_data = &wm1811_ldo2_initdata,
+		},
+	},
+
+	/* Support external capacitors */
+	/* This works on wm1811a only (board REV06 or above) */
+	.jd_ext_cap = 1,
+
+	/* Regulated mode at highest output voltage */
+	/* 2.0V for micbias2 */
+	.micbias = {0x2f, 0x27},
+
+	.micd_lvl_sel = 0xFF,
+
+	.ldo_ena_always_driven = true,
+	.ldo_ena_delay = 30000,
+
+	/* Disable ground loop noise feedback on lineout1 - NC - */
+	.lineout1fb = 0,
+	/* Enable ground loop noise feedback on lineout2 dock audio */
+	.lineout2fb = 1,
+};
+#endif
+
+/* I2C4's GPIO: SLP_T0_LTE CODEC */
+static struct i2c_board_info i2c_devs4[] __initdata = {
+#if defined(CONFIG_SND_SOC_WM8994)
+	{
+		I2C_BOARD_INFO("wm1811", (0x34 >> 1)),	/* Audio CODEC */
+		.platform_data = &wm1811_pdata,
+		.irq = IRQ_EINT(30),
+	},
+#endif
+};
+
+/* I2C GPIO: NFC */
+static struct i2c_gpio_platform_data gpio_i2c_nfc = {
+#ifdef CONFIG_MACH_SLP_PQ
+	.sda_pin = GPIO_NFC_SDA_18V,
+	.scl_pin = GPIO_NFC_SCL_18V,
+#elif defined(CONFIG_MACH_SLP_PQ_LTE)
+	.sda_pin = EXYNOS4212_GPM4(1),
+	.scl_pin = EXYNOS4212_GPM4(0),
+#endif
+};
+
+static struct platform_device device_i2c_nfc = {
+	.name = "i2c-gpio",
+	.id = I2C_NFC,
+	.dev.platform_data = &gpio_i2c_nfc,
+};
+
+/* Bluetooth */
+static struct platform_device bcm4334_bluetooth_device = {
+	.name = "bcm4334_bluetooth",
+	.id = -1,
+};
+
+#ifdef CONFIG_MACH_SLP_PQ
+/* BCM47511 GPS */
+static struct bcm47511_platform_data midas_bcm47511_data = {
+	.regpu		= GPIO_GPS_PWR_EN,	/* XM0DATA[15] */
+	.nrst		= GPIO_GPS_nRST,	/* XM0DATA[14] */
+	.uart_rxd	= GPIO_GPS_RXD,		/* XURXD[1] */
+	.gps_cntl	= -1,	/* GPS_CNTL - XM0ADDR[6] */
+	.reg32khz	= "lpo_in",
+};
+
+static struct platform_device midas_bcm47511 = {
+	.name	= "bcm47511",
+	.id	= -1,
+	.dev	= {
+		.platform_data	= &midas_bcm47511_data,
+	},
+};
+#endif
+
+/* I2C GPIO: 3_TOUCH */
+#ifdef CONFIG_MACH_SLP_PQ_LTE
+static struct i2c_gpio_platform_data gpio_i2c_3_touch = {
+	.sda_pin = GPIO_3_TOUCH_SDA,
+	.scl_pin = GPIO_3_TOUCH_SCL,
+};
+
+static struct platform_device device_i2c_3_touch = {
+	.name = "i2c-gpio",
+	.id = I2C_3_TOUCH,
+	.dev.platform_data = &gpio_i2c_3_touch,
+};
+
+static struct i2c_board_info i2c_devs_3_touch[] __initdata = {
+	{
+		I2C_BOARD_INFO("melfas-touchkey", 0x20),
+	},
+};
+#endif
+
+#define GPIO_KEYS(_code, _gpio, _active_low, _iswake, _hook)		\
+{					\
+	.code = _code,			\
+	.gpio = _gpio,	\
+	.active_low = _active_low,		\
+	.type = EV_KEY,			\
+	.wakeup = _iswake,		\
+	.debounce_interval = 10,	\
+	.isr_hook = _hook,			\
+	.value = 1 \
+}
+
+static struct gpio_keys_button t0_lte_buttons[] = {
+	GPIO_KEYS(KEY_VOLUMEUP, GPIO_VOL_UP,
+		  1, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_VOLUMEDOWN, GPIO_VOL_DOWN,
+		  1, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_POWER, GPIO_nPOWER,
+		  1, 1, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_MENU, GPIO_OK_KEY,
+			1, 1, sec_debug_check_crash_key),
+};
+
+static struct gpio_keys_platform_data to_lte_gpiokeys_platform_data = {
+	.buttons = t0_lte_buttons,
+	.nbuttons = ARRAY_SIZE(t0_lte_buttons),
+};
+
+static struct platform_device t0_lte_keypad = {
+	.name	= "gpio-keys",
+	.dev	= {
+		.platform_data = &to_lte_gpiokeys_platform_data,
+	},
+};
+
+#ifdef CONFIG_I2C_SI4705
+static void pq_si4705_reset(int enable)
+{
+	pr_info("%s: enable is %d", __func__, enable);
+	if (enable)
+		gpio_set_value(GPIO_FM_RST, 1);
+	else
+		gpio_set_value(GPIO_FM_RST, 0);
+}
+
+static void pq_si4705_init(void)
+{
+	gpio_request(GPIO_FM_RST, "fmradio_reset");
+	s3c_gpio_cfgpin(GPIO_FM_RST, S3C_GPIO_OUTPUT);
+	gpio_set_value(GPIO_FM_RST, 0);
+}
+
+static struct i2c_gpio_platform_data gpio_i2c_fm_radio = {
+	.sda_pin	= EXYNOS4_GPY0(3),
+	.scl_pin	= EXYNOS4_GPY0(2),
+};
+
+static struct platform_device device_i2c_fm_radio = {
+	.name = "i2c-gpio",
+	.id = I2C_FM_RADIO,
+	.dev.platform_data = &gpio_i2c_fm_radio,
+};
+
+static struct si4705_pdata pq_fm_radio_info = {
+	.reset = pq_si4705_reset,
+	.pdata_values = (SI4705_PDATA_BIT_VOL_STEPS |
+			 SI4705_PDATA_BIT_VOL_TABLE |
+			 SI4705_PDATA_BIT_RSSI_THRESHOLD |
+			 SI4705_PDATA_BIT_SNR_THRESHOLD),
+	.rx_vol_steps = 16,
+	.rx_vol_table = {	0x0, 0x13, 0x16, 0x19,
+				0x1C, 0x1F, 0x22, 0x25,
+				0x28, 0x2B, 0x2E, 0x31,
+				0x34, 0x37, 0x3A, 0x3D	},
+	.rx_seek_tune_rssi_threshold = 0x00,
+	.rx_seek_tune_snr_threshold = 0x01,
+};
+
+static struct i2c_board_info i2c_devs_fm_radio[] __initdata = {
+	{
+		I2C_BOARD_INFO("si4705", 0x22>>1),
+		.platform_data = &pq_fm_radio_info,
+		.irq = IRQ_EINT(11),
+	}
+};
+#endif
+
+#if defined(CONFIG_BATTERY_SAMSUNG)
+static struct samsung_battery_platform_data samsung_battery_pdata = {
+	.charger_name	= "max77693-charger",
+	.fuelgauge_name	= "max17047-fuelgauge",
+	.voltage_max = 4200000,
+	.voltage_min = 3400000,
+
+	.in_curr_limit = 1000,
+	.chg_curr_ta = 1000,
+
+	.chg_curr_usb = 475,
+	.chg_curr_cdp = 1000,
+	.chg_curr_wpc = 475,
+	.chg_curr_dock = 1000,
+	.chg_curr_etc = 475,
+
+	.chng_interval = 30,
+	.chng_susp_interval = 60,
+	.norm_interval = 120,
+	.norm_susp_interval = 7200,
+	.emer_lv1_interval = 30,
+	.emer_lv2_interval = 10,
+
+	.recharge_voltage = 4150000,	/* it will be cacaluated in probe */
+
+	.abstimer_charge_duration = 6 * 60 * 60,
+	.abstimer_charge_duration_wpc = 8 * 60 * 60,
+	.abstimer_recharge_duration = 1.5 * 60 * 60,
+
+	.cb_det_src = CABLE_DET_CHARGER,
+	.overheat_stop_temp = 600,
+	.overheat_recovery_temp = 400,
+	.freeze_stop_temp = -50,
+	.freeze_recovery_temp = 0,
+
+	/* CTIA spec */
+	.ctia_spec  = false,
+
+	/* CTIA temperature spec */
+	.event_time = 10 * 60,
+	.event_overheat_stop_temp = 600,
+	.event_overheat_recovery_temp = 400,
+	.event_freeze_stop_temp = -50,
+	.event_freeze_recovery_temp = 0,
+	.lpm_overheat_stop_temp = 480,
+	.lpm_overheat_recovery_temp = 450,
+	.lpm_freeze_stop_temp = -50,
+	.lpm_freeze_recovery_temp = 0,
+
+	.temper_src = TEMPER_AP_ADC,
+	.temper_ch = 2,
+#ifdef CONFIG_S3C_ADC
+	/* s3c adc driver does not convert raw adc data.
+	 * so, register convert function.
+	 */
+	.covert_adc = convert_adc,
+#endif
+
+	.vf_det_src = VF_DET_CHARGER,
+	.vf_det_ch = 0,	/* if src == VF_DET_ADC */
+	.vf_det_th_l = 500,
+	.vf_det_th_h = 1500,
+
+	.suspend_chging = true,
+
+	.led_indicator = false,
+
+	.battery_standever = false,
+};
+
+static struct platform_device samsung_device_battery = {
+	.name	= "samsung-battery",
+	.id	= -1,
+	.dev.platform_data = &samsung_battery_pdata,
+};
+#endif
+
+
+/* I2C GPIO: Fuel Gauge */
+static struct i2c_gpio_platform_data gpio_i2c_fuel = {
+	/* PQ/PQLTE use GPF1(4, 5) */
+	.sda_pin = GPIO_FUEL_SDA,
+	.scl_pin = GPIO_FUEL_SCL,
+};
+
+static struct platform_device device_i2c_fuel = {
+	.name = "i2c-gpio",
+	.id = I2C_FUEL,
+	.dev.platform_data = &gpio_i2c_fuel,
+};
+
+static struct max17047_platform_data max17047_pdata = {
+	.irq_gpio = GPIO_FUEL_ALERT,
+};
+
+static struct i2c_board_info i2c_devs_fuel[] __initdata = {
+	{
+		I2C_BOARD_INFO("max17047-fuelgauge", 0x36),
+		.platform_data = &max17047_pdata,
+	},
+};
+
+#ifdef CONFIG_SENSORS_LPS331
+/* I2C GPIO: Barometer (BSENSE) */
+static struct i2c_gpio_platform_data gpio_i2c_bsense = {
+	.sda_pin = GPIO_BSENSE_SDA_18V,
+	.scl_pin = GPIO_BENSE_SCL_18V,
+};
+
+static struct platform_device device_i2c_bsense = {
+	.name = "i2c-gpio",
+	.id = I2C_BSENSE,
+	.dev.platform_data = &gpio_i2c_bsense,
+};
+
+static struct lps331ap_platform_data lps331_pdata = {
+	.irq = GPIO_BARO_INT,
+};
+
+static struct i2c_board_info i2c_devs_bsense[] __initdata = {
+	{
+		I2C_BOARD_INFO(LPS331AP_PRS_DEV_NAME, LPS331AP_PRS_I2C_SAD_H),
+		.platform_data = &lps331_pdata,
+	},
+};
+
+static void lps331ap_gpio_init(void)
+{
+	int ret = gpio_request(GPIO_BARO_INT, "lps331_irq");
+
+	printk(KERN_INFO "%s\n", __func__);
+
+	if (ret)
+		printk(KERN_ERR "Failed to request gpio lps331_irq\n");
+
+	s3c_gpio_cfgpin(GPIO_BARO_INT, S3C_GPIO_INPUT);
+	gpio_set_value(GPIO_BARO_INT, 2);
+	s3c_gpio_setpull(GPIO_BARO_INT, S3C_GPIO_PULL_NONE);
+	s5p_gpio_set_drvstr(GPIO_BARO_INT, S5P_GPIO_DRVSTR_LV1);
+};
+#endif
+
+#ifdef CONFIG_SENSORS_AK8975C
+/* I2C GPIO: Magnetic (MSENSE) */
+static struct i2c_gpio_platform_data gpio_i2c_msense = {
+	.sda_pin = GPIO_MSENSOR_SDA_18V,
+	.scl_pin = GPIO_MSENSOR_SCL_18V,
+	.udelay = 2, /* 250KHz */
+};
+
+static struct platform_device device_i2c_msense = {
+	.name = "i2c-gpio",
+	.id = I2C_MSENSE,
+	.dev.platform_data = &gpio_i2c_msense,
+};
+
+static struct akm8975_platform_data akm8975_pdata = {
+#ifdef CONFIG_MACH_SLP_PQ
+	.gpio_data_ready_int = GPIO_MSENSOR_INT,
+#else
+	/* CONFIG_MACH_SLP_PQ_LTE */
+	.gpio_data_ready_int = EXYNOS4_GPX2(2),
+#endif
+};
+
+static struct i2c_board_info i2c_devs_msense[] __initdata = {
+	{
+		I2C_BOARD_INFO("ak8975", 0x0C),
+		.platform_data = &akm8975_pdata,
+	},
+};
+
+#ifdef CONFIG_MACH_SLP_PQ
+static void ak8975c_gpio_init(void)
+{
+	int ret = gpio_request(GPIO_MSENSOR_INT, "gpio_akm_int");
+
+	printk(KERN_INFO "%s\n", __func__);
+
+	if (ret)
+		printk(KERN_ERR "Failed to request gpio akm_int.\n");
+
+	s5p_register_gpio_interrupt(GPIO_MSENSOR_INT);
+	s3c_gpio_setpull(GPIO_MSENSOR_INT, S3C_GPIO_PULL_DOWN);
+	s3c_gpio_cfgpin(GPIO_MSENSOR_INT, S3C_GPIO_SFN(0xF));
+	i2c_devs_msense[0].irq = gpio_to_irq(GPIO_MSENSOR_INT);
+}
+#endif
+#endif
+
+/* I2C GPIO: MHL */
+static struct i2c_gpio_platform_data gpio_i2c_mhl = {
+	.sda_pin = GPIO_MHL_SDA_1_8V,
+	.scl_pin = GPIO_MHL_SCL_1_8V,
+	.udelay = 3,
+};
+
+static struct platform_device device_i2c_mhl = {
+	.name = "i2c-gpio",
+	.id = I2C_MHL,
+	.dev.platform_data = &gpio_i2c_mhl,
+};
+
+#if defined(CONFIG_SENSORS_CM36651) || defined(CONFIG_SENSORS_GP2A)
+static int proximity_leda_on(bool onoff)
+{
+	printk(KERN_INFO "%s, onoff = %d\n", __func__, onoff);
+
+	gpio_set_value(GPIO_PS_ALS_EN, onoff);
+
+	return 0;
+}
+
+static void optical_gpio_init(void)
+{
+	int ret = gpio_request(GPIO_PS_ALS_EN, "optical_power_supply_on");
+
+	printk(KERN_INFO "%s\n", __func__);
+
+	if (ret)
+		printk(KERN_ERR "Failed to request gpio optical power supply.\n");
+
+	/* configuring for gp2a gpio for LEDA power */
+	s3c_gpio_cfgpin(GPIO_PS_ALS_EN, S3C_GPIO_OUTPUT);
+	gpio_set_value(GPIO_PS_ALS_EN, 0);
+	s3c_gpio_setpull(GPIO_PS_ALS_EN, S3C_GPIO_PULL_NONE);
+
+	s3c_gpio_setpull(GPIO_PS_ALS_INT, S3C_GPIO_PULL_UP);
+}
+#endif
+
+#ifdef CONFIG_SENSORS_CM36651
+/* I2C GPIO: PS_ALS (PSENSE) */
+static struct i2c_gpio_platform_data gpio_i2c_psense_cm36651 = {
+	.sda_pin = GPIO_RGB_SDA_1_8V,
+	.scl_pin = GPIO_RGB_SCL_1_8V,
+	.udelay = 2, /* 250KHz */
+};
+
+static struct platform_device device_i2c_psense_cm36651 = {
+	.name = "i2c-gpio",
+	.id = I2C_PSENSE,
+	.dev.platform_data = &gpio_i2c_psense_cm36651,
+};
+
+static struct cm36651_platform_data cm36651_pdata = {
+	.cm36651_led_on = proximity_leda_on,
+	.irq = GPIO_PS_ALS_INT,
+};
+
+static struct i2c_board_info i2c_devs_psense_cm36651[] __initdata = {
+	{
+		I2C_BOARD_INFO("cm36651", (0x30 >> 1)),
+		.platform_data = &cm36651_pdata,
+	},
+};
+#endif
+
+#ifdef CONFIG_SENSORS_GP2A
+/* I2C GPIO: PS_ALS (PSENSE) */
+static struct i2c_gpio_platform_data gpio_i2c_psense_gp2a = {
+	.sda_pin = GPIO_PS_ALS_SDA_28V,
+	.scl_pin = GPIO_PS_ALS_SCL_28V,
+	.udelay = 2, /* 250KHz */
+};
+
+static struct platform_device device_i2c_psense_gp2a = {
+	.name = "i2c-gpio",
+	.id = I2C_PSENSE,
+	.dev.platform_data = &gpio_i2c_psense_gp2a,
+};
+
+static struct i2c_board_info i2c_devs_psense_gp2a[] __initdata = {
+	{
+		I2C_BOARD_INFO("gp2a", (0x72 >> 1)),
+	},
+};
+
+static struct gp2a_platform_data gp2a_pdata = {
+	.gp2a_led_on	= proximity_leda_on,
+	.p_out = GPIO_PS_ALS_INT,
+};
+
+static struct platform_device opt_gp2a = {
+	.name = "gp2a-opt",
+	.id = -1,
+	.dev = {
+		.platform_data = &gp2a_pdata,
+	},
+};
+#endif
+
+static struct jack_platform_data midas_jack_data = {
+	.usb_online		= 0,
+	.charger_online	= 0,
+	.hdmi_online	= 0,
+	.earjack_online	= 0,
+	.earkey_online	= 0,
+	.ums_online		= -1,
+	.cdrom_online	= -1,
+	.jig_online		= -1,
+	.host_online	= 0,
+};
+
+static struct platform_device midas_jack = {
+	.name		= "jack",
+	.id			= -1,
+	.dev		= {
+		.platform_data = &midas_jack_data,
+	},
+};
+
+#if defined(CONFIG_ARM_EXYNOS4_BUS_DEVFREQ)
+static struct exynos4_bus_platdata devfreq_bus_pdata = {
+	.threshold = {
+		.upthreshold = 90,
+		.downdifferential = 10,
+	},
+	.polling_ms = 50,
+};
+static struct platform_device devfreq_busfreq = {
+	.name		= "exynos4412-busfreq",
+	.id		= -1,
+	.dev		= {
+		.platform_data = &devfreq_bus_pdata,
+	},
+};
+#endif
+
+#if defined(CONFIG_ARM_EXYNOS4_DISPLAY_DEVFREQ)
+static struct platform_device devfreq_display = {
+	.name		= "exynos4412-display",
+	.id		= -1,
+};
+#endif
+
+/* Uart Select */
+static void midas_set_uart_switch(int path)
+{
+	int gpio;
+
+	gpio = EXYNOS4_GPF2(3);
+	gpio_request(gpio, "UART_SEL");
+
+	/* gpio_high == AP */
+	if (path == UART_SW_PATH_AP)
+		gpio_set_value(gpio, GPIO_LEVEL_HIGH);
+	else if (path == UART_SW_PATH_CP)
+		gpio_set_value(gpio, GPIO_LEVEL_LOW);
+
+	gpio_free(gpio);
+	return;
+}
+
+static int midas_get_uart_switch(void)
+{
+	int val;
+	int gpio;
+
+	gpio = EXYNOS4_GPF2(3);
+	gpio_request(gpio, "UART_SEL");
+	val = gpio_get_value(gpio);
+	gpio_free(gpio);
+
+	/* gpio_high == AP */
+	if (val == GPIO_LEVEL_HIGH)
+		return UART_SW_PATH_AP;
+	else if (val == GPIO_LEVEL_LOW)
+		return UART_SW_PATH_CP;
+	else
+		return UART_SW_PATH_NA;
+}
+
+static struct uart_select_platform_data midas_uart_select_data = {
+	.set_uart_switch	= midas_set_uart_switch,
+	.get_uart_switch	= midas_get_uart_switch,
+};
+
+static struct platform_device midas_uart_select = {
+	.name			= "uart-select",
+	.id			= -1,
+	.dev			= {
+		.platform_data	= &midas_uart_select_data,
+	},
+};
+
+static struct platform_device *slp_midas_devices[] __initdata = {
+	/* Samsung Power Domain */
+	&exynos4_device_pd[PD_MFC],
+	&exynos4_device_pd[PD_G3D],
+	&exynos4_device_pd[PD_LCD0],
+	&exynos4_device_pd[PD_CAM],
+	&exynos4_device_pd[PD_TV],
+	&exynos4_device_pd[PD_GPS],
+	&exynos4_device_pd[PD_GPS_ALIVE],
+	&exynos4_device_pd[PD_ISP],
+
+	&s3c_device_wdt,
+	&s3c_device_rtc,
+	&s3c_device_i2c0,	/* PQ_LTE only: 8M CAM */
+	&s3c_device_i2c1,	/* Gyro/Acc */
+	/* i2c2: used by GPS UART */
+	&s3c_device_i2c3,	/* Meltas TSP */
+	/* i2c4: NC(PQ) / codec: wm1811 (PQ rev01) / Modem(PQ LTE) */
+	&s3c_device_i2c4,
+	/* i2c5: NC(PQ) / Modem(PQ LTE) */
+	&s3c_device_i2c7,	/* MAX77686 PMIC */
+#ifdef CONFIG_MACH_SLP_PQ_LTE
+	&device_i2c_3_touch,	/* PQ_LTE only: Meltas Touchkey */
+#endif
+#ifdef CONFIG_I2C_SI4705
+	&device_i2c_fm_radio,
+#endif
+	&device_i2c_if_pmic,	/* if_pmic: max77693 */
+	&device_i2c_fuel,	/* max17047-fuelgauge */
+#ifdef CONFIG_SENSORS_LPS331
+	&device_i2c_bsense,	/* barometer lps331ap */
+#endif
+#ifdef CONFIG_SENSORS_AK8975C
+	&device_i2c_msense, /* magnetic ak8975c */
+#endif
+	&device_i2c_mhl,
+	/* TODO: SW I2C for 8M CAM of PQ (same gpio with PQ_LTE NFC) */
+	/* TODO: SW I2C for VT_CAM (GPIO_VT_CAM_SCL/SDA) */
+	/* TODO: SW I2C for ADC (GPIO_ADC_SCL/SDA) */
+	/* TODO: SW I2C for LTE of PQ_LTE (F2(4) SDA, F2(5) SCL) */
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+	&s5p_device_fimd0,
+#endif
+#ifdef CONFIG_DRM_EXYNOS_HDMI
+	&s5p_device_i2c_hdmiphy,
+	&s5p_device_hdmi,
+	&s5p_device_mixer,
+	&exynos_drm_hdmi_device,
+#endif
+	&exynos_drm_vidi_device,
+#ifdef CONFIG_DRM_EXYNOS_G2D
+	&s5p_device_fimg2d,
+#endif
+#ifdef CONFIG_DRM_EXYNOS
+	&exynos_drm_device,
+#endif
+#ifdef CONFIG_HAVE_PWM
+	&s3c_device_timer[0],
+	&s3c_device_timer[1],
+	&s3c_device_timer[2],
+	&s3c_device_timer[3],
+#endif
+
+#ifdef CONFIG_SND_SOC_WM8994
+	&vbatt_device,
+#endif
+	&samsung_asoc_dma,
+#ifndef CONFIG_SND_SOC_SAMSUNG_USE_DMA_WRAPPER
+	&samsung_asoc_idma,
+#endif
+
+#ifdef CONFIG_SND_SAMSUNG_AC97
+	&exynos_device_ac97,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_I2S
+	&exynos_device_i2s0,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_PCM
+	&exynos_device_pcm0,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_SPDIF
+	&exynos_device_spdif,
+#endif
+#if defined(CONFIG_SND_SAMSUNG_RP) || defined(CONFIG_SND_SAMSUNG_ALP)
+	&exynos_device_srp,
+#endif
+#if defined CONFIG_USB_EHCI_S5P && !defined CONFIG_LINK_DEVICE_HSIC
+	&s5p_device_ehci,
+#endif
+#if defined CONFIG_USB_OHCI_S5P && !defined CONFIG_LINK_DEVICE_HSIC
+	&s5p_device_ohci,
+#endif
+#ifdef CONFIG_USB_GADGET
+	&s3c_device_usbgadget,
+#endif
+#ifdef CONFIG_USB_G_SLP
+	&midas_slp_usb_multi,
+#endif
+#ifdef CONFIG_EXYNOS4_DEV_DWMCI
+	&exynos_device_dwmci,
+#else
+	&s3c_device_mshci,
+#endif
+	&s3c_device_hsmmc2,
+	&s3c_device_hsmmc3,
+
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+	&exynos4_device_fimc_is,
+#endif
+#ifdef CONFIG_VIDEO_FIMC
+	&s3c_device_fimc0,
+	&s3c_device_fimc1,
+	&s3c_device_fimc2,
+	&s3c_device_fimc3,
+#elif defined(CONFIG_VIDEO_SAMSUNG_S5P_FIMC)
+	&s5p_device_fimc0,
+	&s5p_device_fimc1,
+	&s5p_device_fimc2,
+	&s5p_device_fimc3,
+#endif
+#if defined(CONFIG_VIDEO_FIMC_MIPI)
+	&s3c_device_csis0,
+	&s3c_device_csis1,
+#endif
+#if defined(CONFIG_VIDEO_MFC5X) || defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+	&s5p_device_mfc,
+#endif
+#ifdef CONFIG_S5P_SYSTEM_MMU
+	&SYSMMU_PLATDEV(fimd0),
+	&SYSMMU_PLATDEV(tv),
+	&SYSMMU_PLATDEV(g2d_acp),
+	&SYSMMU_PLATDEV(mfc_l),
+	&SYSMMU_PLATDEV(mfc_r),
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_LITE
+	&exynos_device_flite0,
+	&exynos_device_flite1,
+#endif
+#ifdef CONFIG_CHARGER_MANAGER
+	&midas_charger_manager,
+#endif
+#if defined(CONFIG_BATTERY_SAMSUNG)
+	&samsung_device_battery,
+#endif
+#ifdef CONFIG_SENSORS_NTC_THERMISTOR
+	&midas_ncp15wb473_thermistor,
+#endif
+#ifdef CONFIG_VIDEO_JPEG_V2X
+	&s5p_device_jpeg,
+#endif
+	&t0_lte_keypad,
+	&midas_jack,
+	&midas_uart_select,
+	&bcm4334_bluetooth_device,
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+	&exynos_device_spi1,
+#endif
+#ifdef CONFIG_MACH_SLP_PQ
+	&midas_bcm47511,
+#endif
+#if defined(CONFIG_ARM_EXYNOS4_BUS_DEVFREQ)
+	&devfreq_busfreq,
+#endif
+#if defined(CONFIG_ARM_EXYNOS4_DISPLAY_DEVFREQ)
+	&devfreq_display,
+#endif
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+	&s5p_device_tmu,
+#else
+	&exynos4_device_tmu,
+#endif
+	&host_notifier_device,
+
+};
+
+static void check_hw_revision(void)
+{
+	unsigned int hwrev = system_rev & 0xff;
+
+	switch (hwrev) {
+	case T0_JPN_REV0_1:	/* T0_JPN_REV0.1_0517final */
+		t0_lte_tsp_set_platdata(&mms_ts_pdata);
+		t0_lte_tsp_init();
+
+		/* VOL_UP/DOWN keys are not EXTINT. Register them. */
+		s5p_register_gpio_interrupt(GPIO_VOL_UP);
+		s5p_register_gpio_interrupt(GPIO_VOL_DOWN);
+		s5p_register_gpio_interrupt(GPIO_OK_KEY);
+		break;
+	default:
+		break;
+	}
+}
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+/* below temperature base on the celcius degree */
+static struct s5p_platform_tmu midas_tmu_data __initdata = {
+	.ts = {
+		.stop_1st_throttle  = 78,
+		.start_1st_throttle = 80,
+		.stop_2nd_throttle  = 87,
+		.start_2nd_throttle = 103,
+		/* temp to do tripping */
+		.start_tripping     = 110,
+		/* To protect chip,forcely kernel panic */
+		.start_emergency    = 120,
+		.stop_mem_throttle  = 80,
+		.start_mem_throttle = 85,
+	},
+	.cpufreq = {
+		.limit_1st_throttle  = 800000, /* 800MHz in KHz order */
+		.limit_2nd_throttle  = 200000, /* 200MHz in KHz order */
+	},
+	.temp_compensate = {
+		/* vdd_arm in uV for temperature compensation */
+		.arm_volt = 900000,
+		/* vdd_bus in uV for temperature compensation */
+		.bus_volt = 900000,
+		/* vdd_g3d in uV for temperature compensation */
+		.g3d_volt = 900000,
+	},
+};
+#endif
+
+#ifdef CONFIG_LINK_DEVICE_HSIC
+static int __init s5p_hci_device_initcall(void)
+{
+	/*
+	 * ehcd should be probed first.
+	 * Unless device detected as fullspeed always.
+	 */
+#ifdef CONFIG_USB_EHCI_S5P
+	int ret = platform_device_register(&s5p_device_ehci);
+	if (ret)
+		return ret;
+
+	/*
+	 * Exynos AP-EVT0 can't use both USB host and device(client)
+	 * on running time, because that has critical ASIC problem
+	 * about USB PHY CLOCK. That issue was already announced by
+	 * S.SLI team (djkim@samsung.com) and already fixed it on
+	 * the new EVT1 chip (new target, system_rev != 3).
+	 * But we have many EVT0 targets (system_rev == 3)
+	 * So, to using old target(EVT0) only using by usb device mode
+	 * we added following unregister codes(disable USB Host)
+	 * by yongsul96.oh@samsung.com 20120417-SLP
+	 */
+	if (system_rev == 3) {
+		pr_warn("[USB-EHCI]AP is EVT0 type!!, unregister ehci!!!");
+		platform_device_unregister(&s5p_device_ehci);
+	}
+#endif
+#ifdef CONFIG_USB_OHCI_S5P
+	return platform_device_register(&s5p_device_ohci);
+#endif
+}
+late_initcall(s5p_hci_device_initcall);
+#endif	/* LINK_DEVICE_HSIC */
+
+#if defined(CONFIG_S5P_MEM_CMA)
+static struct cma_region regions[] = {
+	/*
+	 * caution : do not allowed other region definitions above of drm.
+	 * drm only using region 0 for startup screen display.
+	 */
+#ifdef CONFIG_DRM_EXYNOS
+	{
+		.name = "drm",
+		.size = CONFIG_DRM_EXYNOS_MEMSIZE * SZ_1K,
+		.start = 0
+	},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_DMA
+	{
+		.name = "dma",
+		.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_DMA * SZ_1K,
+		.start = 0
+	},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC1
+	{
+		.name = "mfc1",
+		.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC1 * SZ_1K,
+		{
+			.alignment = 1 << 17,
+		},
+		.start = 0,
+	},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC0
+	{
+		.name = "mfc0",
+		.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC0 * SZ_1K,
+		{
+			.alignment = 1 << 17,
+		},
+		.start = 0,
+	},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC
+	{
+		.name = "mfc",
+		.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC * SZ_1K,
+		{
+			.alignment = 1 << 17,
+		},
+		.start = 0
+	},
+#endif
+#if !defined(CONFIG_EXYNOS_CONTENT_PATH_PROTECTION) && \
+	defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+	{
+		.name		= "b2",
+		.size		= 32 << 20,
+		{ .alignment	= 128 << 10 },
+	},
+	{
+		.name		= "b1",
+		.size		= 32 << 20,
+		{ .alignment	= 128 << 10 },
+	},
+	{
+		.name		= "fw",
+		.size		= 1 << 20,
+		{ .alignment	= 128 << 10 },
+		.start		= 0x60500000,	/* FIXME */
+	},
+#endif
+#ifdef CONFIG_AUDIO_SAMSUNG_MEMSIZE_SRP
+	{
+		.name = "srp",
+		.size = CONFIG_AUDIO_SAMSUNG_MEMSIZE_SRP * SZ_1K,
+		.start = 0,
+	},
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+	{
+		.name = "fimc_is",
+		.size = CONFIG_VIDEO_EXYNOS_MEMSIZE_FIMC_IS * SZ_1K,
+		{
+			.alignment = 1 << 26,
+		},
+		.start = 0
+	},
+#endif
+	{
+		.size = 0
+	},
+};
+
+static void __init exynos4_reserve_mem(void)
+{
+	static const char map[] __initconst =
+#ifdef CONFIG_DRM_EXYNOS
+		"exynos-drm=drm;"
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_DMA
+		"s3c-fimc.0=dma;s3c-fimc.1=dma;s3c-fimc.2=dma;s3c-fimc.3=dma;s3c-mem=dma;"
+		"exynos4210-fimc.0=dma;exynos4210-fimc.1=dma;exynos4210-fimc.2=dma;exynos4210-fimc.3=dma;"
+#endif
+#ifdef CONFIG_VIDEO_MFC5X
+		"s3c-mfc/A=mfc0,mfc-secure;"
+		"s3c-mfc/B=mfc1,mfc-normal;"
+		"s3c-mfc/AB=mfc;"
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_S5P_MFC
+		"s5p-mfc/f=fw;"
+		"s5p-mfc/a=b1;"
+		"s5p-mfc/b=b2;"
+#endif
+		"samsung-rp=srp;"
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+		"exynos4-fimc-is=fimc_is;"
+#endif
+		""
+	;
+
+	if (fbmem_start) {
+		int i = 0, drm = 0, dma = 0, mfc1 = 0, mfc0 = 0;
+		regions[drm].start = (dma_addr_t) fbmem_start;
+		for (i = 0; i < ARRAY_SIZE(regions) - 1 /* terminator */; ++i) {
+			if (strncmp(regions[i].name, "dma",
+				strlen(regions[i].name)) == 0) {
+				dma = i;
+				regions[dma].start =
+					(dma_addr_t) regions[drm].start
+					-regions[dma].size;
+			}
+			if (strncmp(regions[i].name, "mfc1",
+				strlen(regions[i].name)) == 0) {
+				mfc1 = i;
+				regions[mfc1].start =
+					(dma_addr_t) regions[dma].start
+					-regions[mfc1].size;
+			}
+			if (strncmp(regions[i].name, "mfc0",
+				strlen(regions[i].name)) == 0) {
+				mfc0 = i;
+				regions[mfc0].start =
+					(dma_addr_t) regions[mfc1].start
+					-regions[mfc0].size;
+			}
+		}
+	}
+
+	s5p_cma_region_reserve(regions, NULL, 0, map);
+}
+
+#ifdef CONFIG_HIBERNATION
+static int __init exynos_set_nosave_regions(void)
+{
+	int i;
+
+	for (i = ARRAY_SIZE(regions) - 2; i >= 0 /* terminator */; i--) {
+		/*
+		 * MFC firmware region SHOULD BE saved.
+		 * If the name of region is fw, don't register to nosave regions
+		 */
+		if (strcmp(regions[i].name, "fw")) {
+			register_nosave_region_late(
+					__phys_to_pfn(regions[i].start),
+					__phys_to_pfn(regions[i].start +
+						regions[i].size));
+		}
+	}
+	return 0;
+}
+late_initcall(exynos_set_nosave_regions);
+#endif /* CONFIG_HIBERNATION */
+#endif /* CONFIG_S5P_MEM_CMA */
+
+static void __init t0_lte_map_io(void)
+{
+	clk_xusbxti.rate = 24000000;
+	s5p_init_io(NULL, 0, S5P_VA_CHIPID);
+	s3c24xx_init_clocks(24000000);
+	s3c24xx_init_uarts(slp_midas_uartcfgs, ARRAY_SIZE(slp_midas_uartcfgs));
+
+#if defined(CONFIG_S5P_MEM_CMA)
+	exynos4_reserve_mem();
+#endif
+
+	/* as soon as INFORM6 is visible, sec_debug is ready to run */
+	sec_debug_init();
+}
+
+static void __init exynos_sysmmu_init(void)
+{
+	ASSIGN_SYSMMU_POWERDOMAIN(mfc_l, &exynos4_device_pd[PD_MFC].dev);
+	ASSIGN_SYSMMU_POWERDOMAIN(mfc_r, &exynos4_device_pd[PD_MFC].dev);
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+	sysmmu_set_owner(&SYSMMU_PLATDEV(fimd0).dev, &s5p_device_fimd0.dev);
+#endif
+#ifdef CONFIG_DRM_EXYNOS_HDMI
+	sysmmu_set_owner(&SYSMMU_PLATDEV(tv).dev, &s5p_device_hdmi.dev);
+#endif
+#ifdef CONFIG_DRM_EXYNOS_G2D
+	sysmmu_set_owner(&SYSMMU_PLATDEV(g2d_acp).dev, &s5p_device_fimg2d.dev);
+#endif
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC) || defined(CONFIG_VIDEO_MFC5X)
+	sysmmu_set_owner(&SYSMMU_PLATDEV(mfc_l).dev, &s5p_device_mfc.dev);
+	sysmmu_set_owner(&SYSMMU_PLATDEV(mfc_r).dev, &s5p_device_mfc.dev);
+#endif
+}
+
+/*
+ * This function disable unused clocks to remove power leakage on idle state.
+ */
+static void midas_disable_unused_clock(void)
+{
+/* Following array include the unused clock list */
+	struct __unused_clock_list {
+		char *dev_id;
+		char *con_id;
+	} clock_list[] =  {
+		{
+			/* UART Ch 4 is only dedicated for communication
+			 * with internal GPS in SoC */
+			.dev_id = "s5pv210-uart.4",
+			.con_id = "uart",
+		}, {
+			.dev_id = "s5p-qe.3",
+			.con_id = "qefimc",
+		}, {
+			.dev_id = "s5p-qe.2",
+			.con_id = "qefimc",
+		}, {
+			.dev_id = "s5p-qe.1",
+			.con_id = "qefimc",
+		},
+	};
+	struct device dev;
+	struct clk *clk;
+	char *con_id;
+	int i;
+
+	for (i = 0 ; i < ARRAY_SIZE(clock_list) ; i++) {
+		dev.init_name = clock_list[i].dev_id;
+		con_id = clock_list[i].con_id;
+
+		clk = clk_get(&dev, con_id);
+		if (IS_ERR(clk)) {
+			printk(KERN_ERR "Failed to get %s for %s\n",
+					con_id, dev.init_name);
+			continue;
+		}
+		clk_enable(clk);
+		clk_disable(clk);
+		clk_put(clk);
+	}
+}
+
+/* Use exynos4-display with DEVFREQ to control LCD refresh rate
+ * dynamically when specific power domain is turning ON/OFF.
+ */
+#ifdef CONFIG_ARM_EXYNOS4_DISPLAY_DEVFREQ
+#include <linux/devfreq/exynos4_display.h>
+/* EXYNOS4 series SoC use ten power domains,
+   the last power domain is PD_MAUDIO */
+#define PD_NUMBER	(PD_MAUDIO + 1)
+static struct pm_qos_request_list exynos_display_qos[PD_NUMBER];
+static int __exynos_pd_enable(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+
+	pm_qos_update_request(&exynos_display_qos[pdev->id],
+					EXYNOS4_DISPLAY_LV_HF);
+
+	return exynos_pd_enable(dev);
+}
+
+static int __exynos_pd_disable(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+
+	pm_qos_update_request(&exynos_display_qos[pdev->id],
+					EXYNOS4_DISPLAY_LV_LF);
+
+	return exynos_pd_disable(dev);
+}
+#else
+static int __exynos_pd_enable(struct device *dev)
+{
+	return exynos_pd_enable(dev);
+}
+static int __exynos_pd_disable(struct device *dev)
+{
+	return exynos_pd_disable(dev);
+}
+#endif
+
+static void midas_exynos_display_init(void)
+{
+	unsigned int pd_list[] = { PD_MFC, PD_G3D };
+	struct device *dev;
+	struct samsung_pd_info *pdata;
+	int i, id;
+
+	for (i = 0 ; i < ARRAY_SIZE(pd_list) ; i++) {
+		id = pd_list[i];
+
+		dev = &exynos4_device_pd[id].dev;
+		pdata = dev->platform_data;
+		pdata->enable = __exynos_pd_enable;
+		pdata->disable = __exynos_pd_disable;
+
+#ifdef CONFIG_ARM_EXYNOS4_DISPLAY_DEVFREQ
+		pm_qos_add_request(&exynos_display_qos[id],
+			PM_QOS_DISPLAY_FREQUENCY, EXYNOS4_DISPLAY_LV_HF);
+#endif
+	}
+}
+
+static void __init t0_lte_machine_init(void)
+{
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+	unsigned int gpio;
+	struct clk *sclk = NULL;
+	struct clk *prnt = NULL;
+	struct device *spi1_dev = &exynos_device_spi1.dev;
+#endif
+	strcpy(utsname()->nodename, machine_desc->name);
+
+	/* Workaround: bootloader needs to set GPX*PUD registers */
+	s3c_gpio_setpull(EXYNOS4_GPX2(7), S3C_GPIO_PULL_NONE);
+
+#if defined(CONFIG_EXYNOS_DEV_PD) && defined(CONFIG_PM_RUNTIME)
+	exynos_pd_disable(&exynos4_device_pd[PD_MFC].dev);
+
+	/*
+	 * FIXME: now runtime pm of mali driver isn't worked yet.
+	 * if the runtime pm is worked fine, then remove this call.
+	 */
+	exynos_pd_enable(&exynos4_device_pd[PD_G3D].dev);
+
+	/* PD_LCD0 : The child devie control LCD0 power domain
+	 * because LCD should be always enabled during kernel booting.
+	 * So, LCD power domain can't turn off when machine initialization.*/
+	exynos_pd_disable(&exynos4_device_pd[PD_CAM].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_TV].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_GPS].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_GPS_ALIVE].dev);
+	exynos_pd_disable(&exynos4_device_pd[PD_ISP].dev);
+#elif defined(CONFIG_EXYNOS_DEV_PD)
+	/*
+	 * These power domains should be always on
+	 * without runtime pm support.
+	 */
+	exynos_pd_enable(&exynos4_device_pd[PD_MFC].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_G3D].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_LCD0].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_CAM].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_TV].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_GPS].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_GPS_ALIVE].dev);
+	exynos_pd_enable(&exynos4_device_pd[PD_ISP].dev);
+#endif
+
+	/* initialise the gpios */
+	midas_config_gpio_table();
+	exynos4_sleep_gpio_table_set = midas_config_sleep_gpio_table;
+
+	s3c_i2c0_set_platdata(NULL);
+	i2c_register_board_info(0, i2c_devs0, ARRAY_SIZE(i2c_devs0));
+
+#ifdef CONFIG_SENSORS_LSM330DLC
+	/* LSM330DLC (Gyro & Accelerometer Sensor) */
+	lsm331dlc_gpio_init();
+#elif defined(CONFIG_SENSORS_SSP)
+	/* Sensor Hub*/
+	initialize_ssp_gpio();
+#endif
+	s3c_i2c1_set_platdata(NULL);
+	i2c_register_board_info(1, i2c_devs1, ARRAY_SIZE(i2c_devs1));
+
+	s3c_i2c3_set_platdata(NULL);
+
+	s3c_i2c4_set_platdata(NULL);
+	i2c_register_board_info(4, i2c_devs4, ARRAY_SIZE(i2c_devs4));
+
+	s3c_i2c7_set_platdata(NULL);
+	s3c_i2c7_set_platdata(NULL);
+
+	/* Workaround for repeated interrupts from MAX77686 during sleep */
+	if (hwrevision(0))
+		exynos4_max77686_info.wakeup = 0;
+
+	i2c_register_board_info(7, i2c_devs7, ARRAY_SIZE(i2c_devs7));
+
+	GPIO_I2C_PIN_SETUP(if_pmic);
+	midas_power_set_muic_pdata(NULL, EXYNOS4_GPX0(7));
+	i2c_register_board_info(I2C_IF_PMIC, i2c_devs_if_pmic,
+				ARRAY_SIZE(i2c_devs_if_pmic));
+
+	/* NFC */
+#ifdef CONFIG_MACH_SLP_PQ
+	if (hwrevision(1) || system_rev >= 0x7) {
+		s3c_i2c5_set_platdata(NULL);
+		platform_device_register(&s3c_device_i2c5);
+		midas_nfc_init(s3c_device_i2c5.id);
+	} else {
+		GPIO_I2C_PIN_SETUP(nfc);
+		platform_device_register(&device_i2c_nfc);
+		midas_nfc_init(device_i2c_nfc.id);
+	}
+#else
+	/* CONFIG_MACH_SLP_PQ_LTE */
+	GPIO_I2C_PIN_SETUP(nfc);
+	platform_device_register(&device_i2c_nfc);
+	midas_nfc_init(device_i2c_nfc.id);
+#endif
+
+	/* MHL / MHL_D */
+	GPIO_I2C_PIN_SETUP(mhl);
+
+#ifdef CONFIG_SENSORS_LPS331
+	lps331ap_gpio_init();
+	GPIO_I2C_PIN_SETUP(bsense);
+	i2c_register_board_info(I2C_BSENSE, i2c_devs_bsense,
+				ARRAY_SIZE(i2c_devs_bsense));
+#endif
+
+#ifdef CONFIG_SENSORS_AK8975C
+	ak8975c_gpio_init();
+	GPIO_I2C_PIN_SETUP(msense);
+	i2c_register_board_info(I2C_MSENSE, i2c_devs_msense,
+				ARRAY_SIZE(i2c_devs_msense));
+#endif
+
+#if defined(CONFIG_SENSORS_GP2A) || defined(CONFIG_SENSORS_CM36651)
+	optical_gpio_init();
+
+#ifdef CONFIG_MACH_SLP_PQ
+	if (system_rev == 3 || system_rev == 0) {
+		GPIO_I2C_PIN_SETUP(psense_gp2a);
+		i2c_register_board_info(I2C_PSENSE, i2c_devs_psense_gp2a,
+					ARRAY_SIZE(i2c_devs_psense_gp2a));
+
+		platform_device_register(&device_i2c_psense_gp2a);
+		platform_device_register(&opt_gp2a);
+	} else {
+		GPIO_I2C_PIN_SETUP(psense_cm36651);
+		i2c_register_board_info(I2C_PSENSE, i2c_devs_psense_cm36651,
+					ARRAY_SIZE(i2c_devs_psense_cm36651));
+
+		platform_device_register(&device_i2c_psense_cm36651);
+	}
+#else /* CONFIG_MACH_SLP_PQ_LTE */
+	GPIO_I2C_PIN_SETUP(psense_gp2a);
+	i2c_register_board_info(I2C_PSENSE, i2c_devs_psense_gp2a,
+				ARRAY_SIZE(i2c_devs_psense_gp2a));
+
+	platform_device_register(&device_i2c_psense_gp2a);
+	platform_device_register(&opt_gp2a);
+
+#endif
+#endif
+
+#ifdef CONFIG_USB_EHCI_S5P
+	smdk4212_ehci_init();
+#endif
+#ifdef CONFIG_USB_OHCI_S5P
+	smdk4212_ohci_init();
+#endif
+#ifdef CONFIG_USB_GADGET
+	smdk4212_usbgadget_init();
+#endif
+
+#ifdef CONFIG_MACH_SLP_PQ_LTE
+	GPIO_I2C_PIN_SETUP(3_touch);
+	gpio_request(GPIO_3_TOUCH_INT, "3_TOUCH_INT");
+	s5p_register_gpio_interrupt(GPIO_3_TOUCH_INT);
+	i2c_register_board_info(I2C_3_TOUCH, i2c_devs_3_touch,
+				ARRAY_SIZE(i2c_devs_3_touch));
+#endif
+
+	GPIO_I2C_PIN_SETUP(fuel);
+	i2c_register_board_info(I2C_FUEL, i2c_devs_fuel,
+				ARRAY_SIZE(i2c_devs_fuel));
+
+#ifdef CONFIG_I2C_SI4705
+	GPIO_I2C_PIN_SETUP(fm_radio);
+	pq_si4705_init();
+	i2c_register_board_info(I2C_FM_RADIO, i2c_devs_fm_radio,
+				ARRAY_SIZE(i2c_devs_fm_radio));
+#endif
+#ifdef CONFIG_EXYNOS4_DEV_DWMCI
+	exynos_dwmci_set_platdata(&exynos_dwmci_pdata, 0);
+#else
+	s3c_mshci_set_platdata(&exynos4_mshc_pdata);
+#endif
+	s3c_sdhci2_set_platdata(&slp_midas_hsmmc2_pdata);
+	s3c_sdhci3_set_platdata(&slp_midas_hsmmc3_pdata);
+
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+	exynos4_fimc_is_set_platdata(NULL);
+	exynos4_device_fimc_is.dev.parent = &exynos4_device_pd[PD_ISP].dev;
+#endif
+
+	/* FIMC */
+	midas_camera_init();
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+	/*
+	 * platform device name for fimd driver should be changed
+	 * because we can get source clock with this name.
+	 *
+	 * P.S. refer to sclk_fimd definition of clock-exynos4.c
+	 */
+	s5p_fb_setname(0, "s3cfb");
+	s5p_device_fimd0.dev.parent = &exynos4_device_pd[PD_LCD0].dev;
+#ifdef CONFIG_S5P_MIPI_DSI2
+	s5p_device_mipi_dsim0.dev.parent = &exynos4_device_pd[PD_LCD0].dev;
+#endif
+#endif
+
+	setup_charger_manager(&midas_charger_g_desc);
+
+#ifdef CONFIG_VIDEO_JPEG_V2X
+#ifdef CONFIG_EXYNOS_DEV_PD
+	s5p_device_jpeg.dev.parent = &exynos4_device_pd[PD_CAM].dev;
+	exynos4_jpeg_setup_clock(&s5p_device_jpeg.dev, 160000000);
+#endif
+#endif
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+	s5p_tmu_set_platdata(&midas_tmu_data);
+#endif
+
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+	dev_set_name(&s5p_device_mfc.dev, "s3c-mfc");
+	clk_add_alias("mfc", "s5p-mfc", "mfc", &s5p_device_mfc.dev);
+	s5p_mfc_setname(&s5p_device_mfc, "s5p-mfc");
+#endif
+
+#if defined(CONFIG_VIDEO_MFC5X) || defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+#ifdef CONFIG_EXYNOS_DEV_PD
+	s5p_device_mfc.dev.parent = &exynos4_device_pd[PD_MFC].dev;
+#endif
+	exynos4_mfc_setup_clock(&s5p_device_mfc.dev, 267 * MHZ);
+#endif
+
+	exynos_sysmmu_init();
+
+	/* Disable unused clocks to remove power leakage on idle state */
+	midas_disable_unused_clock();
+
+	/* exynos4-display with DEVFREQ */
+	midas_exynos_display_init();
+
+#ifdef CONFIG_SENSORS_NTC_THERMISTOR
+	/* PQ Rev00 doesn't have ntc on board */
+	if (!hwrevision(0))
+		adc_ntc_init(2); /* Channel 2 */
+#endif
+	/* Battery capacity has changed from 1750mA to 2100mA(rev06) */
+	if (system_rev >= 0x7) {
+		/* setting for top off voltage */
+		max77693_change_top_off_vol();
+#ifdef CONFIG_BATTERY_SAMSUNG
+		/* setting for Battery Capacity */
+		samsung_battery_pdata.voltage_max = 4350000;
+		samsung_battery_pdata.recharge_voltage = 4300000;
+#endif
+#ifdef CONFIG_CHARGER_MANAGER
+		cm_change_fullbatt_uV();
+#endif
+	}
+
+#ifdef CONFIG_S3C_ADC
+	if (system_rev != 3)
+		platform_device_register(&s3c_device_adc);
+#endif
+
+	platform_add_devices(slp_midas_devices, ARRAY_SIZE(slp_midas_devices));
+
+#ifdef CONFIG_DRM_EXYNOS_FIMD
+	t0_lte_fb_init();
+#endif
+#ifdef CONFIG_DRM_EXYNOS_HDMI
+	t0_lte_tv_init();
+#endif
+
+	brcm_wlan_init();
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+	sclk = clk_get(spi1_dev, "dout_spi1");
+	if (IS_ERR(sclk))
+		dev_err(spi1_dev, "failed to get sclk for SPI-1\n");
+	prnt = clk_get(spi1_dev, "mout_mpll_user");
+	if (IS_ERR(prnt))
+		dev_err(spi1_dev, "failed to get prnt\n");
+	if (clk_set_parent(sclk, prnt))
+		printk(KERN_ERR "Unable to set parent %s of clock %s.\n",
+		       prnt->name, sclk->name);
+
+	clk_set_rate(sclk, 800 * 1000 * 1000);
+	clk_put(sclk);
+	clk_put(prnt);
+
+	if (!gpio_request(EXYNOS4_GPB(5), "SPI_CS1")) {
+		gpio_direction_output(EXYNOS4_GPB(5), 1);
+		s3c_gpio_cfgpin(EXYNOS4_GPB(5), S3C_GPIO_SFN(1));
+		s3c_gpio_setpull(EXYNOS4_GPB(5), S3C_GPIO_PULL_UP);
+		exynos_spi_set_info(1, EXYNOS_SPI_SRCCLK_SCLK,
+				     ARRAY_SIZE(spi1_csi));
+	}
+
+	for (gpio = EXYNOS4_GPB(4); gpio < EXYNOS4_GPB(8); gpio++)
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV3);
+
+	spi_register_board_info(spi1_board_info, ARRAY_SIZE(spi1_board_info));
+#endif
+	check_hw_revision();
+}
+
+MACHINE_START(SLP_T0_LTE, "SLP_T0_LTE")
+	.boot_params	= S5P_PA_SDRAM + 0x100,
+	.init_irq	= exynos4_init_irq,
+	.map_io		= t0_lte_map_io,
+	.init_machine	= t0_lte_machine_init,
+	.timer		= &exynos4_timer,
+MACHINE_END
diff -Naur ./arch/arm/mach-exynos/board-t0cu-duos-modems.c ../../HK_JB/Kernel/arch/arm/mach-exynos/board-t0cu-duos-modems.c
--- ./arch/arm/mach-exynos/board-t0cu-duos-modems.c	2012-12-08 20:40:46.113821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/board-t0cu-duos-modems.c	2012-11-22 09:13:15.000000000 +0100
@@ -318,13 +318,9 @@
 	},
 };
 
-static struct modemlink_dpram_control gsm_edpram_ctrl = {
-	.dp_type = EXT_DPRAM,
+static struct modemlink_dpram_data gsm_edpram = {
+	.type = EXT_DPRAM,
 
-	.dpram_irq        = ESC_DPRAM_INT_IRQ,
-	.dpram_irq_flags  = IRQF_TRIGGER_FALLING,
-
-	.max_ipc_dev = IPC_RFS,
 	.ipc_map = &gsm_ipc_map,
 
 	.boot_size_offset = DP_BOOT_SIZE_OFFSET,
@@ -509,11 +505,17 @@
 	.gpio_cp_off       = 0,
 	.gpio_reset_req_n  = 0,	/* GPIO_CP_MSM_PMU_RST, */
 	.gpio_cp_reset     = GPIO_CP2_MSM_RST,
+
 	.gpio_pda_active   = 0,
+
 	.gpio_phone_active = GPIO_ESC_PHONE_ACTIVE,
+	.irq_phone_active = ESC_PHONE_ACTIVE_IRQ,
+
 	.gpio_flm_uart_sel = GPIO_BOOT_SW_SEL_CP2,
 
-	.gpio_dpram_int = GPIO_ESC_DPRAM_INT,
+	.gpio_ipc_int2ap = GPIO_ESC_DPRAM_INT,
+	.irq_ipc_int2ap = ESC_DPRAM_INT_IRQ,
+	.irqf_ipc_int2ap = IRQF_TRIGGER_FALLING,
 
 	.gpio_cp_dump_int   = 0,
 	.gpio_cp_warm_reset = 0,
@@ -536,34 +538,20 @@
 #endif
 
 	.link_name  = "esc6270_edpram",
-	.dpram_ctl  = &gsm_edpram_ctrl,
+	.dpram = &gsm_edpram,
 
-	.ipc_version	= SIPC_VER_41,
+	.ipc_version = SIPC_VER_41,
+	.max_ipc_dev = (IPC_RAW + 1),
 
 	.num_iodevs = ARRAY_SIZE(gsm_io_devices),
 	.iodevs     = gsm_io_devices,
 };
 
-static struct resource gsm_modem_res[] = {
-	[0] = {
-		.name  = "cp_active_irq",
-		.start = ESC_PHONE_ACTIVE_IRQ,
-		.end   = ESC_PHONE_ACTIVE_IRQ,
-		.flags = IORESOURCE_IRQ,
-	},
-	[1] = {
-		.name = "dpram_irq",
-		.start = ESC_DPRAM_INT_IRQ,
-		.end = ESC_DPRAM_INT_IRQ,
-		.flags = IORESOURCE_IRQ,
-	},
-};
-
 static struct platform_device gsm_modem = {
 	.name = "modem_if",
 	.id = 2,
-	.num_resources = ARRAY_SIZE(gsm_modem_res),
-	.resource = gsm_modem_res,
+	.num_resources = 0,
+	.resource = NULL,
 	.dev = {
 		.platform_data = &gsm_modem_data,
 	},
@@ -701,7 +689,7 @@
 	unsigned gpio_pda_active = gsm_modem_data.gpio_pda_active;
 	unsigned gpio_phone_active = gsm_modem_data.gpio_phone_active;
 	unsigned gpio_flm_uart_sel = gsm_modem_data.gpio_flm_uart_sel;
-	unsigned gpio_dpram_int = gsm_modem_data.gpio_dpram_int;
+	unsigned gpio_ipc_int2ap = gsm_modem_data.gpio_ipc_int2ap;
 
 #if defined(CONFIG_LINK_DEVICE_PLD)
 	unsigned gpio_fpga1_creset = gsm_modem_data.gpio_fpga1_creset;
@@ -798,15 +786,15 @@
 		gpio_set_value(gpio_cp_rst, 0);
 	}
 
-	if (gpio_dpram_int) {
-		err = gpio_request(gpio_dpram_int, "ESC_DPRAM_INT");
+	if (gpio_ipc_int2ap) {
+		err = gpio_request(gpio_ipc_int2ap, "ESC_DPRAM_INT");
 		if (err) {
 			pr_err("fail to request gpio %s, gpio %d, errno %d\n",
-					"ESC_DPRAM_INT", gpio_dpram_int, err);
+					"ESC_DPRAM_INT", gpio_ipc_int2ap, err);
 		} else {
 			/* Configure as a wake-up source */
-			s3c_gpio_cfgpin(gpio_dpram_int, S3C_GPIO_SFN(0xF));
-			s3c_gpio_setpull(gpio_dpram_int, S3C_GPIO_PULL_NONE);
+			s3c_gpio_cfgpin(gpio_ipc_int2ap, S3C_GPIO_SFN(0xF));
+			s3c_gpio_setpull(gpio_ipc_int2ap, S3C_GPIO_PULL_NONE);
 		}
 	}
 
@@ -878,10 +866,10 @@
 
 static u8 *gsm_edpram_remap_mem_region(struct sromc_cfg *cfg)
 {
-	int			      dp_addr = 0;
-	int			      dp_size = 0;
-	u8 __iomem                   *dp_base = NULL;
-	struct msm_edpram_ipc_cfg    *ipc_map = NULL;
+	int dp_addr = 0;
+	int dp_size = 0;
+	u8 __iomem *dp_base = NULL;
+	struct msm_edpram_ipc_cfg *ipc_map = NULL;
 	struct dpram_ipc_device *dev = NULL;
 
 	dp_addr = cfg->addr;
@@ -893,8 +881,8 @@
 	}
 	pr_info("[MDM] <%s> DPRAM VA=0x%08X\n", __func__, (int)dp_base);
 
-	gsm_edpram_ctrl.dp_base = (u8 __iomem *)dp_base;
-	gsm_edpram_ctrl.dp_size = dp_size;
+	gsm_edpram.base = (u8 __iomem *)dp_base;
+	gsm_edpram.size = dp_size;
 
 	/* Map for IPC */
 	ipc_map = (struct msm_edpram_ipc_cfg *)dp_base;
diff -Naur ./arch/arm/mach-exynos/board-u1-lgt-modems.c ../../HK_JB/Kernel/arch/arm/mach-exynos/board-u1-lgt-modems.c
--- ./arch/arm/mach-exynos/board-u1-lgt-modems.c	2012-12-08 20:40:46.117821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/board-u1-lgt-modems.c	2012-11-22 09:13:15.000000000 +0100
@@ -164,22 +164,8 @@
 	u16 mbx_cp2ap;
 };
 
-struct mdm_edpram_boot_map {
-	u8  __iomem *buff;
-	u16  __iomem *frame_size;
-	u16  __iomem *tag;
-	u16  __iomem *count;
-};
-
 static struct dpram_ipc_map mdm_ipc_map;
 
-struct _param_nv {
-	unsigned char *addr;
-	unsigned int size;
-	unsigned int count;
-	unsigned int tag;
-};
-
 /*
 ------------------
 Buffer : 31KByte
@@ -207,58 +193,19 @@
 #define DP_BOOT_FRAME_SIZE_LIMIT     0x7C00 /* 31KB = 31744byte = 0x7C00 */
 
 
-struct _param_check {
-	unsigned int total_size;
-	unsigned int rest_size;
-	unsigned int send_size;
-	unsigned int copy_start;
-	unsigned int copy_complete;
-	unsigned int boot_complete;
-};
-
-static struct _param_nv *data_param;
-static struct _param_check check_param;
-
-static unsigned int boot_start_complete;
-static struct mdm_edpram_boot_map mdm_edpram_bt_map;
-
 static void mdm_vbus_on(void);
 static void mdm_vbus_off(void);
 
-static void mdm_log_disp(struct modemlink_dpram_control *dpctl);
-static int mdm_uload_step1(struct modemlink_dpram_control *dpctl);
-static int mdm_uload_step2(void *arg, struct modemlink_dpram_control *dpctl);
-static int mdm_dload_prep(struct modemlink_dpram_control *dpctl);
-static int mdm_dload(void *arg, struct modemlink_dpram_control *dpctl);
-static int mdm_nv_load(void *arg, struct modemlink_dpram_control *dpctl);
-static int mdm_boot_start(struct modemlink_dpram_control *dpctl);
-static int mdm_boot_start_post_proc(void);
-static void mdm_boot_start_handler(struct modemlink_dpram_control *dpctl);
-static void mdm_dload_handler(struct modemlink_dpram_control *dpctl, u16 cmd);
-static void mdm_bt_map_init(struct modemlink_dpram_control *dpctl);
-static void mdm_load_init(struct modemlink_dpram_control *dpctl);
-
-static struct modemlink_dpram_control mdm_edpram_ctrl = {
-	.log_disp = mdm_log_disp,
-	.cpupload_step1 = mdm_uload_step1,
-	.cpupload_step2 = mdm_uload_step2,
-	.cpimage_load_prepare = mdm_dload_prep,
-	.cpimage_load = mdm_dload,
-	.nvdata_load = mdm_nv_load,
-	.phone_boot_start = mdm_boot_start,
-	.phone_boot_start_post_process = mdm_boot_start_post_proc,
-	.phone_boot_start_handler = mdm_boot_start_handler,
-	.dload_cmd_hdlr = mdm_dload_handler,
-	.bt_map_init = mdm_bt_map_init,
-	.load_init = mdm_load_init,
-
-	.dp_type = EXT_DPRAM,
+static struct modemlink_dpram_data mdm_edpram = {
+	.type = EXT_DPRAM,
+	.disabled = true,
 
-	.dpram_irq = IRQ_EINT(8),
-	.dpram_irq_flags = IRQF_TRIGGER_FALLING,
-
-	.max_ipc_dev = IPC_RFS,
 	.ipc_map = &mdm_ipc_map,
+
+	.boot_size_offset = DP_BOOT_SIZE_OFFSET,
+	.boot_tag_offset = DP_BOOT_TAG_OFFSET,
+	.boot_count_offset = DP_BOOT_COUNT_OFFSET,
+	.max_boot_frame_size = DP_BOOT_FRAME_SIZE_LIMIT,
 };
 
 /*
@@ -420,8 +367,11 @@
 	.gpio_cp_on = GPIO_PHONE_ON,
 	.gpio_cp_reset = GPIO_CP_RST,
 	.gpio_pda_active = GPIO_PDA_ACTIVE,
+
 	.gpio_phone_active = GPIO_PHONE_ACTIVE,
-	.gpio_cp_reset_mdm = GPIO_CP_RST_MSM,
+	.irq_phone_active = IRQ_EINT(14),
+
+	.gpio_cp_reset_msm = GPIO_CP_RST_MSM,
 	.gpio_boot_sw_sel = GPIO_BOOT_SW_SEL,
 	.vbus_on = mdm_vbus_on,
 	.vbus_off = mdm_vbus_off,
@@ -429,32 +379,30 @@
 	.gpio_cp_dump_int   = 0,
 	.gpio_cp_warm_reset = 0,
 
+	.gpio_ipc_int2ap = GPIO_DPRAM_INT_N,
+	.irq_ipc_int2ap = IRQ_EINT(8),
+	.irqf_ipc_int2ap = IRQF_TRIGGER_FALLING,
+
+	.use_handover = false,
+
 	.modem_net = CDMA_NETWORK,
 	.modem_type = QC_MDM6600,
 	.link_types = LINKTYPE(LINKDEV_DPRAM),
 	.link_name  = "mdm6600_edpram",
-	.dpram_ctl  = &mdm_edpram_ctrl,
+	.dpram = &mdm_edpram,
 
 	.ipc_version = SIPC_VER_41,
+	.max_ipc_dev = (IPC_RAW + 1),
 
 	.num_iodevs = ARRAY_SIZE(cdma_io_devices),
 	.iodevs = cdma_io_devices,
 };
 
-static struct resource cdma_modem_res[] = {
-	[0] = {
-		.name  = "cp_active_irq",
-		.start = IRQ_EINT(14),
-		.end   = IRQ_EINT(14),
-		.flags = IORESOURCE_IRQ,
-	},
-};
-
 static struct platform_device cdma_modem = {
 	.name = "modem_if",
 	.id = 2,
-	.num_resources = ARRAY_SIZE(cdma_modem_res),
-	.resource = cdma_modem_res,
+	.num_resources = 0,
+	.resource = NULL,
 	.dev = {
 		.platform_data = &cdma_modem_data,
 	},
@@ -518,452 +466,6 @@
 
 }
 
-static void mdm_log_disp(struct modemlink_dpram_control *dpctl)
-{
-	static unsigned char buf[151];
-	u8 __iomem *tmp_buff = NULL;
-
-	tmp_buff = dpctl->get_rx_buff(IPC_FMT);
-	memcpy(buf, tmp_buff, (sizeof(buf)-1));
-
-	pr_info("[LNK] | PHONE ERR MSG\t| CDMA Crash\n");
-	pr_info("[LNK] | PHONE ERR MSG\t| %s\n", buf);
-}
-
-static int mdm_data_upload(struct _param_nv *param,
-	struct modemlink_dpram_control *dpctl)
-{
-	int retval = 0;
-	u16 in_interrupt = 0;
-	int count = 0;
-
-	while (1) {
-		if (!gpio_get_value(GPIO_DPRAM_INT_N)) {
-			in_interrupt = dpctl->recv_msg();
-			if (in_interrupt == 0xDBAB) {
-				break;
-			} else {
-				pr_err("[LNK][intr]:0x%08x\n", in_interrupt);
-				pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-				return -1;
-			}
-		}
-		msleep_interruptible(1);
-		count++;
-		if (count > 200) {
-			pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-			return -1;
-		}
-	}
-
-	param->size = ioread16(mdm_edpram_bt_map.frame_size);
-	memcpy(param->addr, mdm_edpram_bt_map.buff, param->size);
-	param->tag = ioread16(mdm_edpram_bt_map.tag);
-	param->count = ioread16(mdm_edpram_bt_map.count);
-
-	dpctl->clear_intr();
-	dpctl->send_msg(0xDB12);
-
-	return retval;
-
-}
-
-static int mdm_data_load(struct _param_nv *param,
-	struct modemlink_dpram_control *dpctl)
-{
-	int retval = 0;
-
-	if (param->size <= DP_BOOT_FRAME_SIZE_LIMIT) {
-		memcpy(mdm_edpram_bt_map.buff, param->addr, param->size);
-		iowrite16(param->size, mdm_edpram_bt_map.frame_size);
-		iowrite16(param->tag, mdm_edpram_bt_map.tag);
-		iowrite16(param->count, mdm_edpram_bt_map.count);
-
-		dpctl->clear_intr();
-		dpctl->send_msg(0xDB12);
-
-	} else {
-		pr_err("[LNK/E]<%s> size:0x%x\n", __func__, param->size);
-	}
-
-	return retval;
-}
-
-static int mdm_uload_step1(struct modemlink_dpram_control *dpctl)
-{
-	int retval = 0;
-	int count = 0;
-	u16 in_interrupt = 0, out_interrupt = 0;
-
-	pr_info("[LNK] +---------------------------------------------+\n");
-	pr_info("[LNK] |            UPLOAD PHONE SDRAM               |\n");
-	pr_info("[LNK] +---------------------------------------------+\n");
-
-	while (1) {
-		if (!gpio_get_value(GPIO_DPRAM_INT_N)) {
-			in_interrupt = dpctl->recv_msg();
-			pr_info("[LNK] [in_interrupt] 0x%04x\n", in_interrupt);
-			if (in_interrupt == 0x1234) {
-				break;
-			} else {
-				pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-				return -1;
-			}
-		}
-		msleep_interruptible(1);
-		count++;
-		if (count > 200) {
-			pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-			in_interrupt = dpctl->recv_msg();
-			if (in_interrupt == 0x1234) {
-				pr_info("[LNK] [in_interrupt]: 0x%04x\n",
-							in_interrupt);
-				break;
-			}
-			return -1;
-		}
-	}
-	out_interrupt = 0xDEAD;
-	dpctl->send_msg(out_interrupt);
-
-	return retval;
-}
-
-static int mdm_uload_step2(void *arg,
-					struct modemlink_dpram_control *dpctl)
-{
-	int retval = 0;
-	struct _param_nv param;
-
-	retval = copy_from_user((void *)&param, (void *)arg, sizeof(param));
-	if (retval < 0) {
-		pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-		return -1;
-	}
-
-	retval = mdm_data_upload(&param, dpctl);
-	if (retval < 0) {
-		pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-		return -1;
-	}
-
-	if (!(param.count % 500))
-		pr_info("[LNK] [param->count]:%d\n", param.count);
-
-	if (param.tag == 4) {
-		dpctl->clear_intr();
-		enable_irq(mdm_edpram_ctrl.dpram_irq);
-		pr_info("[LNK] [param->tag]:%d\n", param.tag);
-	}
-
-	retval = copy_to_user((unsigned long *)arg, &param, sizeof(param));
-	if (retval < 0) {
-		pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-		return -1;
-	}
-
-	return retval;
-}
-
-static int mdm_dload_prep(struct modemlink_dpram_control *dpctl)
-{
-	int retval = 0;
-	int count = 0;
-
-	while (1) {
-		if (check_param.copy_start) {
-			check_param.copy_start = 0;
-			break;
-		}
-		msleep_interruptible(10);
-		count++;
-		if (count > 200) {
-			pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-			return -1;
-		}
-	}
-
-	return retval;
-}
-
-static int mdm_dload(void *arg, struct modemlink_dpram_control *dpctl)
-{
-	int retval = 0;
-	int count = 0;
-	unsigned char *img = NULL;
-	struct _param_nv param;
-
-	retval = copy_from_user((void *)&param, (void *)arg, sizeof(param));
-	if (retval < 0) {
-		pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-		return -1;
-	}
-
-	img = vmalloc(param.size);
-	if (img == NULL) {
-		pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-		return -1;
-	}
-	memset(img, 0, param.size);
-	memcpy(img, param.addr, param.size);
-
-	data_param = kzalloc(sizeof(struct _param_nv), GFP_KERNEL);
-	if (data_param == NULL)	{
-		pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-		vfree(img);
-		return -1;
-	}
-
-	check_param.total_size = param.size;
-	check_param.rest_size = param.size;
-	check_param.send_size = 0;
-	check_param.copy_complete = 0;
-
-	data_param->addr = img;
-	data_param->size = DP_BOOT_FRAME_SIZE_LIMIT;
-	data_param->count = param.count;
-	data_param->tag = param.tag;
-
-	if (check_param.rest_size < DP_BOOT_FRAME_SIZE_LIMIT)
-		data_param->size = check_param.rest_size;
-
-	retval = mdm_data_load(data_param, dpctl);
-
-	while (1) {
-		if (check_param.copy_complete) {
-			check_param.copy_complete = 0;
-
-			vfree(img);
-			kfree(data_param);
-
-			break;
-		}
-		msleep_interruptible(10);
-		count++;
-		if (count > 2000) {
-			pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-			vfree(img);
-			kfree(data_param);
-			return -1;
-		}
-	}
-
-	return retval;
-
-}
-
-static int mdm_nv_load(void *arg, struct modemlink_dpram_control *dpctl)
-{
-	int retval = 0;
-	int count = 0;
-	unsigned char *img = NULL;
-	struct _param_nv param;
-
-	retval = copy_from_user((void *)&param, (void *)arg, sizeof(param));
-	if (retval < 0) {
-		pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-		return -1;
-	}
-
-	img = vmalloc(param.size);
-	if (img == NULL) {
-		pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-		return -1;
-	}
-	memset(img, 0, param.size);
-	memcpy(img, param.addr, param.size);
-
-	data_param = kzalloc(sizeof(struct _param_nv), GFP_KERNEL);
-	if (data_param == NULL) {
-		pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-		vfree(img);
-		return -1;
-	}
-
-	check_param.total_size = param.size;
-	check_param.rest_size = param.size;
-	check_param.send_size = 0;
-	check_param.copy_complete = 0;
-
-	data_param->addr = img;
-	data_param->size = DP_BOOT_FRAME_SIZE_LIMIT;
-	data_param->count = param.count;
-	data_param->tag = param.tag;
-
-	if (check_param.rest_size < DP_BOOT_FRAME_SIZE_LIMIT)
-		data_param->size = check_param.rest_size;
-
-	retval = mdm_data_load(data_param, dpctl);
-
-	while (1) {
-		if (check_param.copy_complete) {
-			check_param.copy_complete = 0;
-
-			vfree(img);
-			kfree(data_param);
-
-			break;
-		}
-		msleep_interruptible(10);
-		count++;
-		if (count > 200) {
-			pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-			vfree(img);
-			kfree(data_param);
-			return -1;
-		}
-	}
-
-	return retval;
-
-}
-
-static int mdm_boot_start(struct modemlink_dpram_control *dpctl)
-{
-
-	u16 out_interrupt = 0;
-	int count = 0;
-
-	/* Send interrupt -> '0x4567' */
-	out_interrupt = 0x4567;
-	dpctl->send_msg(out_interrupt);
-
-	while (1) {
-		if (check_param.boot_complete) {
-			check_param.boot_complete = 0;
-			break;
-		}
-		msleep_interruptible(10);
-		count++;
-		if (count > 200) {
-			pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-			return -1;
-		}
-	}
-
-	return 0;
-}
-
-static struct modemlink_dpram_control *tasklet_dpctl;
-
-static void interruptable_load_tasklet_handler(unsigned long data);
-
-static DECLARE_TASKLET(interruptable_load_tasklet,
-	interruptable_load_tasklet_handler, (unsigned long) &tasklet_dpctl);
-
-static void interruptable_load_tasklet_handler(unsigned long data)
-{
-	struct modemlink_dpram_control *dpctl =
-		(struct modemlink_dpram_control *)
-		(*((struct modemlink_dpram_control **) data));
-
-	if (data_param == NULL) {
-		pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-		return;
-	}
-
-	check_param.send_size += data_param->size;
-	check_param.rest_size -= data_param->size;
-	data_param->addr += data_param->size;
-
-	if (check_param.send_size < check_param.total_size) {
-
-		if (check_param.rest_size < DP_BOOT_FRAME_SIZE_LIMIT)
-			data_param->size = check_param.rest_size;
-
-
-		data_param->count += 1;
-
-		mdm_data_load(data_param, dpctl);
-	} else {
-		data_param->tag = 0;
-		check_param.copy_complete = 1;
-	}
-
-}
-
-static int mdm_boot_start_post_proc(void)
-{
-	int count = 0;
-
-	while (1) {
-		if (boot_start_complete) {
-			boot_start_complete = 0;
-			break;
-		}
-		msleep_interruptible(10);
-		count++;
-		if (count > 200) {
-			pr_err("[LNK/E]<%s:%d>\n", __func__, __LINE__);
-			return -1;
-		}
-	}
-
-	return 0;
-}
-
-static void mdm_boot_start_handler(struct modemlink_dpram_control *dpctl)
-{
-	boot_start_complete = 1;
-
-	/* Send INIT_END code to CP */
-	pr_info("[LNK] <%s> Send 0x11C2 (INIT_END)\n", __func__);
-
-	/*
-	 * INT_MASK_VALID|INT_MASK_CMD|INT_MASK_CP_AIRPLANE_BOOT|
-	 * INT_MASK_CP_AP_ANDROID|INT_MASK_CMD_INIT_END
-	 */
-	dpctl->send_intr((0x0080|0x0040|0x1000|0x0100|0x0002));
-}
-
-static void mdm_dload_handler(struct modemlink_dpram_control *dpctl, u16 cmd)
-{
-	switch (cmd) {
-	case 0x1234:
-		check_param.copy_start = 1;
-		break;
-
-	case 0xDBAB:
-		tasklet_schedule(&interruptable_load_tasklet);
-		break;
-
-	case 0xABCD:
-		check_param.boot_complete = 1;
-		break;
-
-	default:
-		pr_err("[LNK/Err] <%s> Unknown command.. %x\n", __func__, cmd);
-	}
-}
-
-static void mdm_bt_map_init(struct modemlink_dpram_control *dpctl)
-{
-	mdm_edpram_bt_map.buff = (u8 *)(dpctl->dp_base);
-	mdm_edpram_bt_map.frame_size  =
-		(u16 *)(dpctl->dp_base + DP_BOOT_SIZE_OFFSET);
-	mdm_edpram_bt_map.tag =
-		(u16 *)(dpctl->dp_base + DP_BOOT_TAG_OFFSET);
-	mdm_edpram_bt_map.count =
-		(u16 *)(dpctl->dp_base + DP_BOOT_COUNT_OFFSET);
-}
-
-
-static void mdm_load_init(struct modemlink_dpram_control *dpctl)
-{
-	tasklet_dpctl = dpctl;
-	if (tasklet_dpctl == NULL)
-		pr_err("[LNK/Err] failed tasklet_dpctl remap\n");
-
-	check_param.total_size = 0;
-	check_param.rest_size = 0;
-	check_param.send_size = 0;
-	check_param.copy_start = 0;
-	check_param.copy_complete = 0;
-	check_param.boot_complete = 0;
-
-	dpctl->clear_intr();
-}
-
 static void config_cdma_modem_gpio(void)
 {
 	int err;
@@ -972,8 +474,9 @@
 	unsigned gpio_cp_rst = cdma_modem_data.gpio_cp_reset;
 	unsigned gpio_pda_active = cdma_modem_data.gpio_pda_active;
 	unsigned gpio_phone_active = cdma_modem_data.gpio_phone_active;
-	unsigned gpio_cp_reset_mdm = cdma_modem_data.gpio_cp_reset_mdm;
+	unsigned gpio_cp_reset_mdm = cdma_modem_data.gpio_cp_reset_msm;
 	unsigned gpio_boot_sw_sel = cdma_modem_data.gpio_boot_sw_sel;
+	unsigned gpio_ipc_int2ap = cdma_modem_data.gpio_ipc_int2ap;
 
 	pr_info("[MDM] <%s>\n", __func__);
 
@@ -1037,16 +540,27 @@
 		s3c_gpio_setpull(gpio_phone_active, S3C_GPIO_PULL_NONE);
 	}
 
+	if (gpio_ipc_int2ap) {
+		err = gpio_request(gpio_ipc_int2ap, "MSM_DPRAM_INT");
+		if (err) {
+			pr_err("fail to request gpio %s\n", "MSM_DPRAM_INT");
+		} else {
+			/* Configure as a wake-up source */
+			s3c_gpio_cfgpin(gpio_ipc_int2ap, S3C_GPIO_SFN(0xF));
+			s3c_gpio_setpull(gpio_ipc_int2ap, S3C_GPIO_PULL_NONE);
+		}
+	}
+
 	printk(KERN_INFO "<%s> done\n", __func__);
 }
 
 
 static u8 *mdm_edpram_remap_mem_region(struct sromc_cfg *cfg)
 {
-	int			      dp_addr = 0;
-	int			      dp_size = 0;
-	u8 __iomem                   *dp_base = NULL;
-	struct mdm_edpram_ipc_cfg    *ipc_map = NULL;
+	int dp_addr = 0;
+	int dp_size = 0;
+	u8 __iomem *dp_base = NULL;
+	struct mdm_edpram_ipc_cfg *ipc_map = NULL;
 	struct dpram_ipc_device *dev = NULL;
 
 	dp_addr = cfg->addr;
@@ -1058,8 +572,8 @@
 	}
 	pr_info("[MDM] <%s> DPRAM VA=0x%08X\n", __func__, (int)dp_base);
 
-	mdm_edpram_ctrl.dp_base = (u8 __iomem *)dp_base;
-	mdm_edpram_ctrl.dp_size = dp_size;
+	mdm_edpram.base = (u8 __iomem *)dp_base;
+	mdm_edpram.size = dp_size;
 
 	/* Map for IPC */
 	ipc_map = (struct mdm_edpram_ipc_cfg *)dp_base;
@@ -1168,6 +682,10 @@
 
 	/* Config LBn, UBn */
 	s3c_gpio_cfgrange_nopull(GPIO_DPRAM_LBN, 2, S3C_GPIO_SFN(2));
+
+	/* Config BUSY */
+	s3c_gpio_cfgpin(GPIO_DPRAM_BUSY, S3C_GPIO_SFN(2));
+
 }
 
 static void init_sromc(void)
@@ -1225,7 +743,6 @@
 	struct sromc_access_cfg *acc_cfg = NULL;
 
 	mdm_edpram_cfg.csn = 0;
-	mdm_edpram_ctrl.dpram_irq = IRQ_EINT(8);
 	mdm_edpram_cfg.addr = SROM_CS0_BASE + (SROM_WIDTH * mdm_edpram_cfg.csn);
 	mdm_edpram_cfg.end  = mdm_edpram_cfg.addr + mdm_edpram_cfg.size - 1;
 
diff -Naur ./arch/arm/mach-exynos/board-u1-spr-modems.c ../../HK_JB/Kernel/arch/arm/mach-exynos/board-u1-spr-modems.c
--- ./arch/arm/mach-exynos/board-u1-spr-modems.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/board-u1-spr-modems.c	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,594 @@
+/* linux/arch/arm/mach-xxxx/board-u1-spr-modem.c
+ * Copyright (C) 2010 Samsung Electronics. All rights reserved.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/irq.h>
+#include <linux/gpio.h>
+#include <linux/regulator/consumer.h>
+#include <linux/err.h>
+#include <linux/io.h>
+#include <linux/delay.h>
+#include <linux/clk.h>
+#include <linux/interrupt.h>
+
+/* inlcude platform specific file */
+#include <linux/platform_data/modem_na_spr.h>
+#include <mach/gpio.h>
+#include <plat/gpio-cfg.h>
+
+static int __init init_modem(void);
+
+
+#define IDPRAM_SIZE	0x4000
+#define IDPRAM_PHY_START	0x13A00000
+#define IDPRAM_PHY_END (IDPRAM_PHY_START + IDPRAM_SIZE)
+
+/*S5PV210 Interanl Dpram Special Function Register*/
+#define IDPRAM_MIFCON_INT2APEN      (1<<2)
+#define IDPRAM_MIFCON_INT2MSMEN     (1<<3)
+#define IDPRAM_MIFCON_DMATXREQEN_0  (1<<16)
+#define IDPRAM_MIFCON_DMATXREQEN_1  (1<<17)
+#define IDPRAM_MIFCON_DMARXREQEN_0  (1<<18)
+#define IDPRAM_MIFCON_DMARXREQEN_1  (1<<19)
+#define IDPRAM_MIFCON_FIXBIT        (1<<20)
+
+#define IDPRAM_MIFPCON_ADM_MODE     (1<<6) /* mux / demux mode  */
+
+#define IDPRAM_DMA_ADR_MASK         0x3FFF
+#define IDPRAM_DMA_TX_ADR_0         /* shift 0 */
+#define IDPRAM_DMA_TX_ADR_1         /* shift 16  */
+#define IDPRAM_DMA_RX_ADR_0         /* shift 0  */
+#define IDPRAM_DMA_RX_ADR_1         /* shift 16  */
+
+#define IDPRAM_SFR_PHYSICAL_ADDR 0x13A08000
+#define IDPRAM_SFR_SIZE 0x1C
+
+/*#define IDPRAM_ADDRESS_DEMUX*/
+
+struct idpram_sfr_reg {
+	unsigned int2ap;
+	unsigned int2msm;
+	unsigned mifcon;
+	unsigned mifpcon;
+	unsigned msmintclr;
+	unsigned dma_tx_adr;
+	unsigned dma_rx_adr;
+};
+
+/*S5PV210 Internal Dpram GPIO table*/
+struct idpram_gpio_data {
+	unsigned num;
+	unsigned cfg;
+	unsigned pud;
+	unsigned val;
+};
+
+static volatile void __iomem *s5pv310_dpram_sfr_va;
+
+static struct idpram_gpio_data idpram_gpio_address[] = {
+#ifdef IDPRAM_ADDRESS_DEMUX
+	{
+		.num = EXYNOS4210_GPE1(0),	/* MSM_ADDR 0 -12 */
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE1(1),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE1(2),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE1(3),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE1(4),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE1(5),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE1(6),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE1(7),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE2(0),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE2(1),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE2(2),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE2(3),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE2(4),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE2(5),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	},
+#endif
+};
+
+static struct idpram_gpio_data idpram_gpio_data[] = {
+	{
+		.num = EXYNOS4210_GPE3(0), /* MSM_DATA 0 - 15 */
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE3(1),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE3(2),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE3(3),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE3(4),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE3(5),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE3(6),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE3(7),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE4(0),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE4(1),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE4(2),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE4(3),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE4(4),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE4(5),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE4(6),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE4(7),
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	},
+};
+
+static struct idpram_gpio_data idpram_gpio_init_control[] = {
+	{
+		.num = EXYNOS4210_GPE0(1), /* MDM_CSn */
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE0(0), /* MDM_WEn */
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE0(2), /* MDM_Rn */
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	}, {
+		.num = EXYNOS4210_GPE0(3), /* MDM_IRQn */
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_UP,
+	},
+#ifndef IDPRAM_ADDRESS_DEMUX
+	{
+		.num = EXYNOS4210_GPE0(4), /* MDM_ADVN */
+		.cfg = S3C_GPIO_SFN(0x2),
+		.pud = S3C_GPIO_PULL_NONE,
+	},
+#endif
+};
+
+static void idpram_gpio_cfg(struct idpram_gpio_data *gpio)
+{
+	pr_info("MIF: idpram set gpio num=%d, cfg=0x%x, pud=%d, val=%d\n",
+		gpio->num, gpio->cfg, gpio->pud, gpio->val);
+
+	s3c_gpio_cfgpin(gpio->num, gpio->cfg);
+	s3c_gpio_setpull(gpio->num, gpio->pud);
+	if (gpio->val)
+		gpio_set_value(gpio->num, gpio->val);
+}
+
+static void idpram_gpio_init(void)
+{
+	int i;
+
+#ifdef IDPRAM_ADDRESS_DEMUX
+	for (i = 0; i < ARRAY_SIZE(idpram_gpio_address); i++)
+		idpram_gpio_cfg(&idpram_gpio_address[i]);
+#endif
+
+	for (i = 0; i < ARRAY_SIZE(idpram_gpio_data); i++)
+		idpram_gpio_cfg(&idpram_gpio_data[i]);
+
+	for (i = 0; i < ARRAY_SIZE(idpram_gpio_init_control); i++)
+		idpram_gpio_cfg(&idpram_gpio_init_control[i]);
+}
+
+static void idpram_sfr_init(void)
+{
+	volatile struct idpram_sfr_reg __iomem *sfr = s5pv310_dpram_sfr_va;
+
+	sfr->mifcon = (IDPRAM_MIFCON_FIXBIT | IDPRAM_MIFCON_INT2APEN |
+		IDPRAM_MIFCON_INT2MSMEN);
+#ifndef IDPRAM_ADDRESS_DEMUX
+	sfr->mifpcon = (IDPRAM_MIFPCON_ADM_MODE);
+#endif
+}
+
+static void idpram_init(void)
+{
+	struct clk *clk;
+
+	/* enable internal dpram clock */
+	clk = clk_get(NULL, "modem");
+	if (!clk)
+		pr_err("MIF: idpram failed to get clock %s\n", __func__);
+
+	clk_enable(clk);
+
+	if (!s5pv310_dpram_sfr_va) {
+		s5pv310_dpram_sfr_va = (struct idpram_sfr_reg __iomem *)
+		ioremap_nocache(IDPRAM_SFR_PHYSICAL_ADDR, IDPRAM_SFR_SIZE);
+		if (!s5pv310_dpram_sfr_va) {
+			pr_err("MIF: idpram_sfr_base io-remap fail\n");
+			/*iounmap(idpram_base);*/
+		}
+	}
+
+	idpram_sfr_init();
+}
+
+static void idpram_clr_intr(void)
+{
+	volatile struct idpram_sfr_reg __iomem *sfr = s5pv310_dpram_sfr_va;
+	sfr->msmintclr = 0xFF;
+}
+
+/*
+	magic_code +
+	access_enable +
+	fmt_tx_head + fmt_tx_tail + fmt_tx_buff +
+	raw_tx_head + raw_tx_tail + raw_tx_buff +
+	fmt_rx_head + fmt_rx_tail + fmt_rx_buff +
+	raw_rx_head + raw_rx_tail + raw_rx_buff +
+	padding +
+	mbx_cp2ap +
+	mbx_ap2cp
+ =	2 +
+	2 +
+	2 + 2 + 2044 +
+	2 + 2 + 6128 +
+	2 + 2 + 2044 +
+	2 + 2 + 6128 +
+	16 +
+	2 +
+	2
+ =	16384
+*/
+
+#define QSC_DP_FMT_TX_BUFF_SZ	1020
+#define QSC_DP_RAW_TX_BUFF_SZ	7160
+#define QSC_DP_FMT_RX_BUFF_SZ	1020
+#define QSC_DP_RAW_RX_BUFF_SZ	7160
+
+/*
+** CDMA target platform data
+*/
+static struct modem_io_t cdma_io_devices[] = {
+	[0] = {
+		.name = "cdma_boot0",
+		.id = 0x1,
+		.format = IPC_BOOT,
+		.io_type = IODEV_MISC,
+		.link = LINKDEV_DPRAM,
+	},
+	[1] = {
+		.name = "cdma_ipc0",
+		.id = 0x1,
+		.format = IPC_FMT,
+		.io_type = IODEV_MISC,
+		.link = LINKDEV_DPRAM,
+	},
+	[2] = {
+		.name = "cdma_rfs0",
+		.id = 0x33,		/* 0x13 (ch.id) | 0x20 (mask) */
+		.format = IPC_RAW,
+		.io_type = IODEV_MISC,
+		.link = LINKDEV_DPRAM,
+	},
+	[3] = {
+		.name = "cdma_multipdp",
+		.id = 0x1,
+		.format = IPC_MULTI_RAW,
+		.io_type = IODEV_DUMMY,
+		.link = LINKDEV_DPRAM,
+	},
+	[4] = {
+		.name = "cdma_rmnet0",
+		.id = 0x2A,
+		.format = IPC_RAW,
+		.io_type = IODEV_NET,
+		.link = LINKDEV_DPRAM,
+	},
+	[5] = {
+		.name = "cdma_rmnet1",
+		.id = 0x2B,
+		.format = IPC_RAW,
+		.io_type = IODEV_NET,
+		.link = LINKDEV_DPRAM,
+	},
+	[6] = {
+		.name = "cdma_rmnet2",
+		.id = 0x2C,
+		.format = IPC_RAW,
+		.io_type = IODEV_NET,
+		.link = LINKDEV_DPRAM,
+	},
+	[7] = {
+		.name = "cdma_rmnet3",
+		.id = 0x2D,
+		.format = IPC_RAW,
+		.io_type = IODEV_NET,
+		.link = LINKDEV_DPRAM,
+	},
+	[8] = {
+		.name = "cdma_rmnet4",
+		.id = 0x27,
+		.format = IPC_RAW,
+		.io_type = IODEV_NET,
+		.link = LINKDEV_DPRAM,
+	},
+	[9] = {
+		.name = "cdma_rmnet5", /* DM Port IO device */
+		.id = 0x3A,
+		.format = IPC_RAW,
+		.io_type = IODEV_MISC,
+		.link = LINKDEV_DPRAM,
+	},
+	[10] = {
+		.name = "cdma_rmnet6", /* AT CMD IO device */
+		.id = 0x31,
+		.format = IPC_RAW,
+		.io_type = IODEV_MISC,
+		.link = LINKDEV_DPRAM,
+	},
+	[11] = {
+		.name = "cdma_ramdump0",
+		.id = 0x1,
+		.format = IPC_RAMDUMP,
+		.io_type = IODEV_MISC,
+		.link = LINKDEV_DPRAM,
+	},
+};
+
+/* To get modem state, register phone active irq using resource */
+static struct modem_data cdma_modem_data = {
+	.name = "qsc6085",
+
+	.gpio_cp_on        = GPIO_QSC_PHONE_ON,
+	.gpio_cp_reset     = GPIO_QSC_PHONE_RST,
+	.gpio_pda_active   = GPIO_PDA_ACTIVE,
+	.gpio_phone_active = GPIO_QSC_PHONE_ACTIVE,
+	.gpio_ap_wakeup    = GPIO_C210_DPRAM_INT_N,
+	.gpio_cp_dump_int  = GPIO_CP_DUMP_INT,
+	.gpio_mbx_intr     = GPIO_DPRAM_INT_CP_N,
+
+	.modem_net  = CDMA_NETWORK,
+	.modem_type = QC_QSC6085,
+	.link_type = LINKDEV_DPRAM,
+
+	.num_iodevs = ARRAY_SIZE(cdma_io_devices),
+	.iodevs     = cdma_io_devices,
+
+	.clear_intr = idpram_clr_intr,
+	.sfr_init = idpram_sfr_init,
+};
+
+static struct resource cdma_modem_res[] = {
+	[0] = {
+		.name = "dpram",
+		.start = IDPRAM_PHY_START,
+		.end = IDPRAM_PHY_END,
+		.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+		.name = "dpram_irq",
+		.start = IRQ_MODEM_IF,
+		.end = IRQ_MODEM_IF,
+		.flags = IORESOURCE_IRQ,
+	},
+};
+
+/* if use more than one modem device, then set id num */
+static struct platform_device cdma_modem = {
+	.name = "modem_if",
+	.id = -1,
+	.num_resources = ARRAY_SIZE(cdma_modem_res),
+	.resource = cdma_modem_res,
+	.dev = {
+		.platform_data = &cdma_modem_data,
+	},
+};
+
+static void config_cdma_modem_gpio(void)
+{
+	int err;
+	unsigned gpio_cp_on = cdma_modem_data.gpio_cp_on;
+	unsigned gpio_cp_rst = cdma_modem_data.gpio_cp_reset;
+	unsigned gpio_pda_active = cdma_modem_data.gpio_pda_active;
+	unsigned gpio_phone_active = cdma_modem_data.gpio_phone_active;
+	unsigned gpio_ap_wakeup = cdma_modem_data.gpio_ap_wakeup;
+	unsigned gpio_cp_dump_int = cdma_modem_data.gpio_cp_dump_int;
+
+	pr_info("MIF: <%s>\n", __func__);
+
+	if (gpio_cp_on) {
+		err = gpio_request(gpio_cp_on, "QSC_ON");
+		if (err) {
+			pr_err("MIF: fail to request gpio %s\n", "QSC_ON");
+		} else {
+			gpio_direction_output(gpio_cp_on, 0);
+			s3c_gpio_setpull(gpio_cp_on, S3C_GPIO_PULL_NONE);
+		}
+	}
+
+	if (gpio_cp_rst) {
+		err = gpio_request(gpio_cp_rst, "QSC_RST");
+		if (err) {
+			pr_err("MIF: fail to request gpio %s\n", "QSC_RST");
+		} else {
+			gpio_direction_output(gpio_cp_rst, 0);
+			s3c_gpio_setpull(gpio_cp_rst, S3C_GPIO_PULL_NONE);
+			s5p_gpio_set_drvstr(gpio_cp_rst, S5P_GPIO_DRVSTR_LV4);
+		}
+	}
+
+	if (gpio_pda_active) {
+		err = gpio_request(gpio_pda_active, "PDA_ACTIVE");
+		if (err) {
+			pr_err("MIF: fail to request gpio %s\n", "PDA_ACTIVE");
+		} else {
+			gpio_direction_output(gpio_pda_active, 1);
+			s3c_gpio_setpull(gpio_pda_active, S3C_GPIO_PULL_NONE);
+		}
+	}
+
+	if (gpio_phone_active) {
+		err = gpio_request(gpio_phone_active, "PHONE_ACTIVE");
+		if (err) {
+			pr_err("MIF: fail to request gpio %s\n",
+				"PHONE_ACTIVE");
+		} else {
+			s3c_gpio_cfgpin(gpio_phone_active, S3C_GPIO_SFN(0xF));
+			s3c_gpio_setpull(gpio_phone_active,
+				S3C_GPIO_PULL_NONE);
+		}
+	}
+
+	if (gpio_ap_wakeup) {
+		err = gpio_request(gpio_ap_wakeup, "HOST_WAKEUP");
+		if (err) {
+			pr_err("MIF: fail to request gpio %s\n",
+				"HOST_WAKEUP");
+		} else {
+			s3c_gpio_cfgpin(gpio_ap_wakeup, S3C_GPIO_SFN(0xF));
+			s3c_gpio_setpull(gpio_ap_wakeup, S3C_GPIO_PULL_NONE);
+		}
+	}
+
+	if (gpio_cp_dump_int) {
+		err = gpio_request(gpio_cp_dump_int, "CP_DUMP_INT");
+		if (err) {
+			pr_err("MIF: fail to request gpio %s\n",
+				"CP_DUMP_INT");
+		} else {
+			s3c_gpio_cfgpin(gpio_cp_dump_int, S3C_GPIO_SFN(0xFF));
+			s3c_gpio_setpull(gpio_cp_dump_int, S3C_GPIO_PULL_DOWN);
+		}
+	}
+}
+
+static int c1_is_bootmode_recovery;
+
+static int __init setup_bootmode(char *str)
+{
+	printk(KERN_INFO "%s : %s\n", __func__, str);
+
+	c1_is_bootmode_recovery = 0;
+
+	if (str)
+		if ((*str == '2') || (*str == '4'))
+			c1_is_bootmode_recovery = 1;
+
+	printk(KERN_INFO "%s. c1_is_bootmode_recovery = %d\n",
+		__func__, c1_is_bootmode_recovery);
+
+	return 0;
+}
+
+__setup("bootmode=", setup_bootmode);
+
+struct platform_device sec_device_dpram_recovery = {
+	.name = "dpram-recovery",
+	.id = -1,
+};
+
+static int __init init_modem(void)
+{
+	pr_info("MIF: <%s+\n", __func__);
+
+	if (c1_is_bootmode_recovery)
+		platform_device_register(&sec_device_dpram_recovery);
+	else {
+		/* internal dpram gpio configure */
+		idpram_gpio_init();
+		idpram_init();
+
+		config_cdma_modem_gpio();
+
+		platform_device_register(&cdma_modem);
+	}
+
+	pr_info("MIF: <%s-\n", __func__);
+
+	return 0;
+}
+
+late_initcall(init_modem);
diff -Naur ./arch/arm/mach-exynos/busfreq.c ../../HK_JB/Kernel/arch/arm/mach-exynos/busfreq.c
--- ./arch/arm/mach-exynos/busfreq.c	2012-12-08 20:40:46.117821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/busfreq.c	2012-11-22 09:13:15.000000000 +0100
@@ -28,7 +28,7 @@
 #include <linux/suspend.h>
 #include <linux/reboot.h>
 #include <linux/clk.h>
-#include <linux/pm_qos.h>
+#include <linux/pm_qos_params.h>
 
 #include <asm/mach-types.h>
 
@@ -101,7 +101,7 @@
 	unsigned int clk_dmcdiv;
 };
 
-struct busfreq_table exynos4_busfreq_table[] = {
+static struct busfreq_table exynos4_busfreq_table[] = {
 	{LV_0, 400000, 1100000, 0, 0},
 	{LV_1, 267000, 1000000, 0, 0},
 #ifdef CONFIG_BUSFREQ_L2_160M
diff -Naur ./arch/arm/mach-exynos/busfreq_opp_4x12.c ../../HK_JB/Kernel/arch/arm/mach-exynos/busfreq_opp_4x12.c
--- ./arch/arm/mach-exynos/busfreq_opp_4x12.c	2012-12-08 20:40:46.117821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/busfreq_opp_4x12.c	2012-11-22 09:13:15.000000000 +0100
@@ -43,6 +43,7 @@
 #include <mach/dev.h>
 #include <mach/asv.h>
 #include <mach/smc.h>
+#include <mach/sec_debug.h>
 
 #include <plat/map-s5p.h>
 #include <plat/gpio-cfg.h>
@@ -81,7 +82,7 @@
 	LV_END
 };
 
-struct busfreq_table *exynos4_busfreq_table;
+static struct busfreq_table *exynos4_busfreq_table;
 
 static struct busfreq_table exynos4_busfreq_table_orig[] = {
 	{LV_0, 400266, 1100000, 0, 0, 0}, /* MIF : 400MHz INT : 200MHz */
@@ -184,7 +185,7 @@
 		{0x06, 0x03, 0x06, 0x0e},
 		{0x03, 0x03, 0x03, 0x0e},
 		{0x03, 0x03, 0x03, 0x0e},
-		{0x02, 0x03, 0x02, 0x0e},
+		{0x02, 0x02, 0x02, 0x06},
 	},
 	{
 		{0x06, 0x0b, 0x06, 0x0f},
@@ -269,42 +270,41 @@
 	{1025000,  975000,  975000, 887500, 887500, 850000, 850000}, /* RESERVED */
 };
 
-
-/* 20120822 DVFS table for pega prime */
+/* 20120927 DVFS table for pega prime */
 /* Because buck1 of pmic can be set to 50mV step size, 50mV table is used */
 static unsigned int exynos4412_mif_volt_rev2[PRIME_ASV_GROUP][LV_END] = {
 	/* 440      440      293      293      176     147     110 */
-	{1100000, 1100000, 1000000, 1000000,  950000, 950000, 950000}, /* RESERVED */
-	{1100000, 1100000, 1000000, 1000000,  950000, 950000, 950000}, /* ASV1 */
-	{1100000, 1100000, 1000000, 1000000,  950000, 950000, 900000}, /* ASV2 */
-	{1100000, 1100000, 1000000, 1000000,  950000, 900000, 900000}, /* ASV3 */
-	{1050000, 1050000,  950000,  950000,  900000, 900000, 900000}, /* ASV4 */
-	{1050000, 1050000,  950000,  950000,  900000, 900000, 900000}, /* ASV5 */
-	{1050000, 1050000,  950000,  950000,  900000, 900000, 900000}, /* ASV6 */
-	{1050000, 1050000,  950000,  950000,  900000, 900000, 850000}, /* ASV7 */
-	{1050000, 1050000,  950000,  950000,  900000, 850000, 850000}, /* ASV8 */
-	{1000000, 1000000,  900000,  900000,  850000, 850000, 850000}, /* ASV9 */
-	{1000000, 1000000,  900000,  900000,  850000, 850000, 850000}, /* ASV10 */
-	{1000000, 1000000,  900000,  900000,  850000, 850000, 850000}, /* ASV11 */
-	{ 950000,  950000,  850000,  850000,  850000, 850000, 850000}, /* ASV12 */
+	{1150000, 1150000, 1050000, 1050000, 1000000, 1000000, 1000000}, /* ASV0 */
+	{1100000, 1100000, 1000000, 1000000,  950000,  950000,  950000}, /* ASV1 */
+	{1100000, 1100000, 1000000, 1000000,  950000,  950000,  900000}, /* ASV2 */
+	{1100000, 1100000, 1000000, 1000000,  950000,  900000,  900000}, /* ASV3 */
+	{1050000, 1050000,  950000,  950000,  900000,  900000,  900000}, /* ASV4 */
+	{1050000, 1050000,  950000,  950000,  900000,  900000,  900000}, /* ASV5 */
+	{1050000, 1050000,  950000,  950000,  900000,  900000,  900000}, /* ASV6 */
+	{1050000, 1050000,  950000,  950000,  900000,  900000,  850000}, /* ASV7 */
+	{1050000, 1050000,  950000,  950000,  900000,  850000,  850000}, /* ASV8 */
+	{1000000, 1000000,  900000,  900000,  850000,  850000,  850000}, /* ASV9 */
+	{1000000, 1000000,  900000,  900000,  850000,  850000,  850000}, /* ASV10 */
+	{1000000, 1000000,  900000,  900000,  850000,  850000,  850000}, /* ASV11 */
+	{ 950000,  950000,  850000,  850000,  850000,  850000,  850000}, /* ASV12 */
 };
 
-/* 20120822 DVFS table for pega prime */
+/* 20120927 DVFS table for pega prime */
 static unsigned int exynos4412_int_volt_rev2[PRIME_ASV_GROUP][LV_END] = {
   /* GDR : 293       220      220     176      176      147     110 */
-	{1087500, 1062500, 1062500, 1000000, 1000000, 962500, 950000}, /* RESERVED */
-	{1075000, 1050000, 1050000,  987500,  987500, 950000, 937500}, /* ASV1 */
-	{1062500, 1037500, 1037500,  975000,  975000, 937500, 912500}, /* ASV2 */
-	{1050000, 1037500, 1037500,  975000,  975000, 937500, 900000}, /* ASV3 */
-	{1037500, 1025000, 1025000,  962500,  962500, 925000, 887500}, /* ASV4 */
-	{1025000, 1012500, 1012500,  950000,  950000, 912500, 887500}, /* ASV5 */
-	{1012500, 1000000, 1000000,  937500,  937500, 900000, 887500}, /* ASV6 */
-	{1000000,  987500,  987500,  925000,  925000, 887500, 875000}, /* ASV7 */
-	{1037500,  975000,  975000,  912500,  912500, 875000, 875000}, /* ASV8 */
-	{1025000,  962500,  962500,  900000,  900000, 875000, 875000}, /* ASV9 */
-	{1012500,  937500,  937500,  875000,  875000, 850000, 850000}, /* ASV10 */
-	{1000000,  925000,  925000,  862500,  862500, 850000, 850000}, /* ASV11 */
-	{1000000,  912500,  912500,  850000,  850000, 850000, 850000}, /* ASV12 */
+	{1125000, 1100000, 1100000, 1037500, 1037500, 1000000, 987500}, /* ASV0 */
+	{1075000, 1050000, 1050000,  987500,  987500,  950000, 937500}, /* ASV1 */
+	{1062500, 1037500, 1037500,  975000,  975000,  937500, 912500}, /* ASV2 */
+	{1050000, 1037500, 1037500,  975000,  975000,  937500, 900000}, /* ASV3 */
+	{1037500, 1025000, 1025000,  962500,  962500,  925000, 887500}, /* ASV4 */
+	{1025000, 1012500, 1012500,  950000,  950000,  912500, 887500}, /* ASV5 */
+	{1012500, 1000000, 1000000,  937500,  937500,  900000, 887500}, /* ASV6 */
+	{1000000,  987500,  987500,  925000,  925000,  887500, 875000}, /* ASV7 */
+	{1037500,  975000,  975000,  912500,  912500,  875000, 875000}, /* ASV8 */
+	{1025000,  962500,  962500,  900000,  900000,  875000, 875000}, /* ASV9 */
+	{1012500,  937500,  937500,  875000,  875000,  850000, 850000}, /* ASV10 */
+	{1000000,  925000,  925000,  862500,  862500,  850000, 850000}, /* ASV11 */
+	{1000000,  912500,  912500,  850000,  850000,  850000, 850000}, /* ASV12 */
 };
 
 static unsigned int exynos4412_1ghz_mif_volt[ASV_GROUP][LV_END] = {
@@ -339,10 +339,17 @@
 	{0, 1000000, 1000000,  912500,  912500, 875000, 875000}, /* RESERVED */
 };
 
+/* To optimize power, AC timing value for SDRAM row of pega chip */
+static unsigned int *exynos4_timingrow_value;
+
 static unsigned int exynos4x12_timingrow[LV_END] = {
 	0x34498691, 0x34498691, 0x24488490, 0x24488490, 0x154882D0, 0x154882D0, 0x0D488210
 };
 
+static unsigned int exynos4x12_timingrow_rev2[LV_END] = {
+	0x3A5A8713, 0x3A5A8713, 0x273764CD, 0x273764CD, 0x17244308, 0x14243287, 0x0F242205
+};
+
 static unsigned int clkdiv_dmc0[LV_END][6] = {
 	/*
 	 * Clock divider value for following
@@ -546,7 +553,12 @@
 
 void exynos4x12_target(int index)
 {
-	unsigned int tmp;
+	unsigned int tmp, val;
+
+	sec_debug_aux_log(SEC_DEBUG_AUXLOG_CPU_BUS_CLOCK_CHANGE,
+			"%s: div_index=%d(%ps)", __func__, index,
+			__builtin_return_address(0));
+
 
 	/* Change Divider - DMC0 */
 	tmp = exynos4_busfreq_table[index].clk_dmc0div;
@@ -699,22 +711,23 @@
 
 #ifdef CONFIG_ARM_TRUSTZONE
 	exynos_smc_readsfr(EXYNOS4_PA_DMC0_4212 + TIMINGROW_OFFSET, &timing0);
-	timing0 |= exynos4x12_timingrow[index];
+	timing0 |= exynos4_timingrow_value[index];
+
 	exynos_smc(SMC_CMD_REG, SMC_REG_ID_SFR_W(EXYNOS4_PA_DMC0_4212 + TIMINGROW_OFFSET),
 			timing0, 0);
 	exynos_smc(SMC_CMD_REG, SMC_REG_ID_SFR_W(EXYNOS4_PA_DMC0_4212 + TIMINGROW_OFFSET),
-			exynos4x12_timingrow[index], 0);
+			exynos4_timingrow_value[index], 0);
 	exynos_smc(SMC_CMD_REG, SMC_REG_ID_SFR_W(EXYNOS4_PA_DMC1_4212 + TIMINGROW_OFFSET),
 			timing0, 0);
 	exynos_smc(SMC_CMD_REG, SMC_REG_ID_SFR_W(EXYNOS4_PA_DMC1_4212 + TIMINGROW_OFFSET),
-			exynos4x12_timingrow[index], 0);
+			exynos4_timingrow_value[index], 0);
 #else
 	timing0 = __raw_readl(S5P_VA_DMC0 + TIMINGROW_OFFSET);
-	timing0 |= exynos4x12_timingrow[index];
+	timing0 |= exynos4_timingrow_value[index];
 	__raw_writel(timing0, S5P_VA_DMC0 + TIMINGROW_OFFSET);
-	__raw_writel(exynos4x12_timingrow[index], S5P_VA_DMC0 + TIMINGROW_OFFSET);
+	__raw_writel(exynos4_timingrow_value[index], S5P_VA_DMC0 + TIMINGROW_OFFSET);
 	__raw_writel(timing0, S5P_VA_DMC1 + TIMINGROW_OFFSET);
-	__raw_writel(exynos4x12_timingrow[index], S5P_VA_DMC1 + TIMINGROW_OFFSET);
+	__raw_writel(exynos4_timingrow_value[index], S5P_VA_DMC1 + TIMINGROW_OFFSET);
 #endif
 }
 
@@ -724,22 +737,22 @@
 
 #ifdef CONFIG_ARM_TRUSTZONE
 	exynos_smc_readsfr(EXYNOS4_PA_DMC0_4212 + TIMINGROW_OFFSET, &timing0);
-	timing0 |= exynos4x12_timingrow[index];
+	timing0 |= exynos4_timingrow_value[index];
 	exynos_smc(SMC_CMD_REG, SMC_REG_ID_SFR_W(EXYNOS4_PA_DMC0_4212 + TIMINGROW_OFFSET),
 			timing0, 0);
 	exynos_smc(SMC_CMD_REG, SMC_REG_ID_SFR_W(EXYNOS4_PA_DMC0_4212 + TIMINGROW_OFFSET),
-			exynos4x12_timingrow[index], 0);
+			exynos4_timingrow_value[index], 0);
 	exynos_smc(SMC_CMD_REG, SMC_REG_ID_SFR_W(EXYNOS4_PA_DMC1_4212 + TIMINGROW_OFFSET),
 			timing0, 0);
 	exynos_smc(SMC_CMD_REG, SMC_REG_ID_SFR_W(EXYNOS4_PA_DMC1_4212 + TIMINGROW_OFFSET),
-			exynos4x12_timingrow[index], 0);
+			exynos4_timingrow_value[index], 0);
 #else
 	timing0 = __raw_readl(S5P_VA_DMC0 + TIMINGROW_OFFSET);
-	timing0 |= exynos4x12_timingrow[index];
+	timing0 |= exynos4_timingrow_value[index];
 	__raw_writel(timing0, S5P_VA_DMC0 + TIMINGROW_OFFSET);
-	__raw_writel(exynos4x12_timingrow[index], S5P_VA_DMC0 + TIMINGROW_OFFSET);
+	__raw_writel(exynos4_timingrow_value[index], S5P_VA_DMC0 + TIMINGROW_OFFSET);
 	__raw_writel(timing0, S5P_VA_DMC1 + TIMINGROW_OFFSET);
-	__raw_writel(exynos4x12_timingrow[index], S5P_VA_DMC1 + TIMINGROW_OFFSET);
+	__raw_writel(exynos4_timingrow_value[index], S5P_VA_DMC1 + TIMINGROW_OFFSET);
 #endif
 }
 
@@ -954,9 +967,11 @@
 
 	if (soc_is_exynos4412() && samsung_rev() >= EXYNOS4412_REV_2_0) {
 		exynos4_busfreq_table = exynos4_busfreq_table_rev2;
+		exynos4_timingrow_value = exynos4x12_timingrow_rev2;
 		exynos4_qos_value = exynos4_qos_value_rev2;
 	} else {
 		exynos4_busfreq_table = exynos4_busfreq_table_orig;
+		exynos4_timingrow_value = exynos4x12_timingrow;
 		exynos4_qos_value = exynos4_qos_value_orig;
 	}
 
diff -Naur ./arch/arm/mach-exynos/busfreq_opp_5250.c ../../HK_JB/Kernel/arch/arm/mach-exynos/busfreq_opp_5250.c
--- ./arch/arm/mach-exynos/busfreq_opp_5250.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/busfreq_opp_5250.c	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,892 @@
+/* linux/arch/arm/mach-exynos/busfreq_opp_5250.c
+ *
+ * Copyright (c) 2011 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com/
+ *
+ * EXYNOS5 - BUS clock frequency scaling support with OPP
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+*/
+
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/types.h>
+#include <linux/err.h>
+#include <linux/io.h>
+#include <linux/regulator/consumer.h>
+#include <linux/sysfs.h>
+#include <linux/platform_device.h>
+#include <linux/device.h>
+#include <linux/module.h>
+#include <linux/cpu.h>
+#include <linux/ktime.h>
+#include <linux/tick.h>
+#include <linux/kernel_stat.h>
+#include <linux/reboot.h>
+#include <linux/slab.h>
+#include <linux/opp.h>
+#include <linux/clk.h>
+#include <mach/busfreq_exynos5.h>
+
+#include <asm/mach-types.h>
+
+#include <mach/ppmu.h>
+#include <mach/map.h>
+#include <mach/regs-clock.h>
+#include <mach/gpio.h>
+#include <mach/regs-mem.h>
+#include <mach/dev.h>
+#include <mach/asv.h>
+#include <mach/regs-pmu-5250.h>
+
+#include <plat/map-s5p.h>
+#include <plat/gpio-cfg.h>
+#include <plat/cpu.h>
+#include <plat/clock.h>
+
+#undef BUSFREQ_PROFILE_DEBUG
+
+#define IDLE_THRESHOLD		4
+#define MIF_R1_THRESHOLD	20
+#define MIF_MAX_THRESHOLD	20
+#define INT_MAX_THRESHOLD	20
+#define INT_RIGHT0_THRESHOLD	25
+#define INT_VIDEOPLAY_LIMIT_FREQ 200000UL
+#define INT_RBB		6	/* +300mV */
+
+static struct device busfreq_for_int;
+
+/* To save/restore DREX2_PAUSE_CTRL register */
+static unsigned int drex2_pause_ctrl;
+
+static struct busfreq_table exynos5_busfreq_table_for800[] = {
+	{LV_0, 800000, 1000000, 0, 0, 0},
+	{LV_1, 400000, 1000000, 0, 0, 0},
+	{LV_2, 160000, 1000000, 0, 0, 0},
+};
+
+static struct busfreq_table exynos5_busfreq_table_for667[] = {
+	{LV_0, 667000, 1000000, 0, 0, 0},
+	{LV_1, 334000, 1000000, 0, 0, 0},
+	{LV_2, 111000, 1000000, 0, 0, 0},
+};
+
+static struct busfreq_table exynos5_busfreq_table_for533[] = {
+	{LV_0, 533000, 1000000, 0, 0, 0},
+	{LV_1, 267000, 1000000, 0, 0, 0},
+	{LV_2, 107000, 1000000, 0, 0, 0},
+};
+
+static struct busfreq_table exynos5_busfreq_table_for400[] = {
+	{LV_0, 400000, 1000000, 0, 0, 0},
+	{LV_1, 267000, 1000000, 0, 0, 0},
+	{LV_2, 100000, 1000000, 0, 0, 0},
+};
+#define ASV_GROUP	10
+static unsigned int asv_group_index;
+
+static unsigned int exynos5_mif_volt_for800[ASV_GROUP+1][LV_MIF_END] = {
+	/* L0        L1      L2 */
+	{      0,       0,      0}, /* ASV0 */
+	{1200000, 1000000, 950000}, /* ASV1 */
+	{1200000, 1000000, 900000}, /* ASV2 */
+	{1200000, 1050000, 950000}, /* ASV3 */
+	{1150000, 1000000, 900000}, /* ASV4 */
+	{1150000, 1050000, 950000}, /* ASV5 */
+	{1150000, 1050000, 950000}, /* ASV6 */
+	{1100000, 1000000, 900000}, /* ASV7 */
+	{1100000, 1000000, 900000}, /* ASV8 */
+	{1100000, 1000000, 900000}, /* ASV9 */
+	{1100000, 1000000, 900000}, /* ASV10 */
+};
+
+static unsigned int exynos5_mif_volt_for667[ASV_GROUP+1][LV_MIF_END] = {
+	/* L0        L1      L2 */
+	{      0,       0,       0}, /* ASV0 */
+	{1100000, 1000000,  950000}, /* ASV1 */
+	{1050000, 1000000,  950000}, /* ASV2 */
+	{1050000, 1050000,  950000}, /* ASV3 */
+	{1050000, 1000000,  950000}, /* ASV4 */
+	{1050000, 1050000, 1000000}, /* ASV5 */
+	{1050000, 1050000,  950000}, /* ASV6 */
+	{1050000, 1000000,  900000}, /* ASV7 */
+	{1050000, 1000000,  900000}, /* ASV8 */
+	{1050000, 1000000,  900000}, /* ASV9 */
+	{1050000, 1000000,  900000}, /* ASV10 */
+};
+
+static unsigned int exynos5_mif_volt_for533[ASV_GROUP+1][LV_MIF_END] = {
+	/* L0        L1      L2 */
+	{      0,       0,       0}, /* ASV0 */
+	{1050000, 1000000,  950000}, /* ASV1 */
+	{1000000,  950000,  950000}, /* ASV2 */
+	{1050000, 1000000,  950000}, /* ASV3 */
+	{1000000,  950000,  950000}, /* ASV4 */
+	{1050000, 1000000, 1000000}, /* ASV5 */
+	{1050000,  950000,  950000}, /* ASV6 */
+	{1000000,  950000,  900000}, /* ASV7 */
+	{1000000,  950000,  900000}, /* ASV8 */
+	{1000000,  950000,  900000}, /* ASV9 */
+	{1000000,  950000,  900000}, /* ASV10 */
+};
+
+static unsigned int exynos5_mif_volt_for400[ASV_GROUP+1][LV_MIF_END] = {
+	/* L0        L1      L2 */
+	{      0,       0,      0}, /* ASV0 */
+	{1000000, 1000000, 950000}, /* ASV1 */
+	{1000000,  950000, 900000}, /* ASV2 */
+	{1050000, 1000000, 950000}, /* ASV3 */
+	{1000000,  950000, 900000}, /* ASV4 */
+	{1050000, 1000000, 950000}, /* ASV5 */
+	{1050000,  950000, 950000}, /* ASV6 */
+	{1000000,  950000, 900000}, /* ASV7 */
+	{1000000,  950000, 900000}, /* ASV8 */
+	{1000000,  950000, 900000}, /* ASV9 */
+	{1000000,  950000, 900000}, /* ASV10 */
+};
+
+static struct busfreq_table *exynos5_busfreq_table_mif;
+
+static unsigned int (*exynos5_mif_volt)[LV_MIF_END];
+
+static struct busfreq_table exynos5_busfreq_table_int[] = {
+	{LV_0, 267000, 1000000, 0, 0, 0},
+	{LV_1, 200000, 1000000, 0, 0, 0},
+	{LV_2, 160000, 1000000, 0, 0, 0},
+	{LV_3, 133000, 1000000, 0, 0, 0},
+};
+
+static unsigned int exynos5_int_volt[ASV_GROUP+1][LV_INT_END] = {
+	/* L0        L1       L2       L3 */
+	{      0,      0,      0,      0}, /* ASV0 */
+	{1025000, 987500, 975000, 950000}, /* ASV1 */
+	{1012500, 975000, 962500, 937500}, /* ASV2 */
+	{1012500, 987500, 975000, 950000}, /* ASV3 */
+	{1000000, 975000, 962500, 937500}, /* ASV4 */
+	{1012500, 987500, 975000, 950000}, /* ASV5 */
+	{1000000, 975000, 962500, 937500}, /* ASV6 */
+	{ 987500, 962500, 950000, 925000}, /* ASV7 */
+	{ 975000, 950000, 937500, 912500}, /* ASV8 */
+	{ 962500, 937500, 925000, 900000}, /* ASV9 */
+	{ 962500, 937500, 925000, 900000}, /* ASV10 */
+};
+
+
+/* For CMU_LEX */
+static unsigned int clkdiv_lex[LV_INT_END][2] = {
+	/*
+	 * Clock divider value for following
+	 * { DIVATCLK_LEX, DIVPCLK_LEX }
+	 */
+
+	/* ATCLK_LEX L0 : 200MHz */
+	{0, 1},
+
+	/* ATCLK_LEX L1 : 166MHz */
+	{0, 1},
+
+	/* ATCLK_LEX L2 : 133MHz */
+	{0, 1},
+
+	/* ATCLK_LEX L3 : 114MHz */
+	{0, 1},
+};
+
+/* For CMU_R0X */
+static unsigned int clkdiv_r0x[LV_INT_END][1] = {
+	/*
+	 * Clock divider value for following
+	 * { DIVPCLK_R0X }
+	 */
+
+	/* ACLK_PR0X L0 : 133MHz */
+	{1},
+
+	/* ACLK_DR0X L1 : 100MHz */
+	{1},
+
+	/* ACLK_PR0X L2 : 80MHz */
+	{1},
+
+	/* ACLK_PR0X L3 : 67MHz */
+	{1},
+};
+
+/* For CMU_R1X */
+static unsigned int clkdiv_r1x[LV_INT_END][1] = {
+	/*
+	 * Clock divider value for following
+	 * { DIVPCLK_R1X }
+	 */
+
+	/* ACLK_PR1X L0 : 133MHz */
+	{1},
+
+	/* ACLK_DR1X L1 : 100MHz */
+	{1},
+
+	/* ACLK_PR1X L2 : 80MHz */
+	{1},
+
+	/* ACLK_PR1X L3 : 67MHz */
+	{1},
+};
+
+/* For CMU_TOP */
+static unsigned int clkdiv_top[LV_INT_END][10] = {
+	/*
+	 * Clock divider value for following
+	 * { DIVACLK400_ISP, DIVACLK400_IOP, DIVACLK266, DIVACLK_200, DIVACLK_66_PRE,
+	 DIVACLK_66, DIVACLK_333, DIVACLK_166, DIVACLK_300_DISP1, DIVACLK300_GSCL }
+	 */
+
+	/* ACLK_400_ISP L0 : 400MHz */
+	{1, 1, 2, 3, 1, 5, 0, 1, 2, 2},
+
+	/* ACLK_400_ISP L1 : 267MHz */
+	{2, 3, 3, 4, 1, 5, 1, 2, 2, 2},
+
+	/* ACLK_400_ISP L2 : 200MHz */
+	{3, 3, 4, 4, 1, 5, 2, 3, 2, 2},
+
+	/* ACLK_400_ISP L3 : 160MHz */
+	{4, 4, 5, 5, 1, 5, 2, 3, 5, 5},
+};
+
+/* For CMU_CDREX */
+static unsigned int clkdiv_cdrex_for800[LV_MIF_END][9] = {
+	/*
+	 * Clock divider value for following
+	 * { DIVMCLK_DPHY, DIVMCLK_CDREX2, DIVACLK_CDREX, DIVMCLK_CDREX,
+		DIVPCLK_CDREX, DIVC2C, DIVC2C_ACLK, DIVMCLK_EFPHY, DIVACLK_EFCON }
+	 */
+
+	/* MCLK_CDREX L0: 800MHz */
+	{0, 0, 1, 0, 5, 1, 1, 4, 1},
+
+	/* MCLK_CDREX L1: 400MHz */
+	{0, 1, 1, 1, 3, 2, 1, 5, 1},
+
+	/* MCLK_CDREX L2: 100MHz */
+	{0, 4, 1, 1, 7, 7, 1, 15, 1},
+};
+
+static unsigned int clkdiv_cdrex_for667[LV_MIF_END][9] = {
+	/*
+	 * Clock divider value for following
+	 * { DIVMCLK_DPHY, DIVMCLK_CDREX2, DIVACLK_CDREX, DIVMCLK_CDREX,
+		DIVPCLK_CDREX, DIVC2C, DIVC2C_ACLK, DIVMCLK_EFPHY, DIVACLK_EFCON }
+	 */
+
+	/* MCLK_CDREX L0: 667MHz */
+	{0, 0, 1, 0, 4, 1, 1, 4, 1},
+
+	/* MCLK_CDREX L1: 334MHz */
+	{0, 1, 1, 1, 4, 2, 1, 5, 1},
+
+	/* MCLK_CDREX L2: 111MHz */
+	{0, 5, 1, 4, 4, 5, 1, 8, 1},
+};
+
+static unsigned int clkdiv_cdrex_for533[LV_MIF_END][9] = {
+	/*
+	 * Clock divider value for following
+	 * { DIVMCLK_DPHY, DIVMCLK_CDREX2, DIVACLK_CDREX, DIVMCLK_CDREX,
+		DIVPCLK_CDREX, DIVC2C, DIVC2C_ACLK, DIVMCLK_EFPHY, DIVACLK_EFCON }
+	 */
+
+	/* MCLK_CDREX L0: 533MHz */
+	{0, 0, 1, 0, 3, 1, 1, 4, 1},
+
+	/* MCLK_CDREX L1: 267MHz */
+	{0, 1, 1, 1, 3, 2, 1, 5, 1},
+
+	/* MCLK_CDREX L2: 107MHz */
+	{0, 4, 1, 4, 3, 5, 1, 8, 1},
+};
+
+static unsigned int __maybe_unused clkdiv_cdrex_for400[LV_MIF_END][9] = {
+	/*
+	 * Clock divider value for following
+	 * { DIVMCLK_DPHY, DIVMCLK_CDREX2, DIVACLK_CDREX, DIVMCLK_CDREX,
+		DIVPCLK_CDREX, DIVC2C, DIVC2C_ACLK, DIVMCLK_EFPHY, DIVACLK_EFCON }
+	 */
+
+	/* MCLK_CDREX L0: 400MHz */
+	{1, 1, 1, 0, 5, 1, 1, 4, 1},
+
+	/* MCLK_CDREX L1: 267MHz */
+	{1, 2, 1, 2, 2, 2, 1, 5, 1},
+
+	/* MCLK_CDREX L2: 100MHz */
+	{1, 7, 1, 2, 7, 7, 1, 15, 1},
+};
+
+static unsigned int (*clkdiv_cdrex)[9];
+
+static void exynos5250_set_bus_volt(void)
+{
+	unsigned int i;
+
+	if (soc_is_exynos5250() && samsung_rev() < EXYNOS5250_REV_1_0)
+		asv_group_index = 0;
+	else
+		asv_group_index = exynos_result_of_asv;
+
+	if (asv_group_index == 0xff)
+		asv_group_index = 0;
+
+	printk(KERN_INFO "DVFS : VDD_INT Voltage table set with %d Group\n", asv_group_index);
+	printk(KERN_INFO "DVFS : VDD_INT Voltage of L0 level is %d \n", exynos5_mif_volt[asv_group_index][0]);
+
+	for (i = LV_0; i < LV_MIF_END; i++)
+		exynos5_busfreq_table_mif[i].volt =
+			exynos5_mif_volt[asv_group_index][i];
+
+	for (i = LV_0; i < LV_INT_END; i++)
+		exynos5_busfreq_table_int[i].volt =
+			exynos5_int_volt[asv_group_index][i];
+	return;
+}
+
+static void exynos5250_target_for_mif(struct busfreq_data *data, int div_index)
+{
+	unsigned int tmp;
+
+	/* Change Divider - CDREX */
+	tmp = data->cdrex_divtable[div_index];
+
+	__raw_writel(tmp, EXYNOS5_CLKDIV_CDREX);
+
+	if (samsung_rev() < EXYNOS5250_REV_1_0) {
+		do {
+			tmp = __raw_readl(EXYNOS5_CLKDIV_STAT_CDREX);
+		} while (tmp & 0x11111111);
+	} else {
+		do {
+			tmp = __raw_readl(EXYNOS5_CLKDIV_STAT_CDREX);
+		} while (tmp & 0x11110011);		\
+	}
+
+	if (samsung_rev() < EXYNOS5250_REV_1_0) {
+		tmp = data->cdrex2_divtable[div_index];
+
+		__raw_writel(tmp, EXYNOS5_CLKDIV_CDREX2);
+
+		do {
+			tmp = __raw_readl(EXYNOS5_CLKDIV_STAT_CDREX2);
+		} while (tmp & 0x1);
+	}
+}
+
+static void exynos5250_target_for_int(struct busfreq_data *data, int div_index)
+{
+	unsigned int tmp;
+	unsigned int tmp2;
+
+	/* Change Divider - TOP */
+	tmp = __raw_readl(EXYNOS5_CLKDIV_TOP0);
+
+	tmp &= ~(EXYNOS5_CLKDIV_TOP0_ACLK266_MASK |
+		EXYNOS5_CLKDIV_TOP0_ACLK200_MASK |
+		EXYNOS5_CLKDIV_TOP0_ACLK66_MASK |
+		EXYNOS5_CLKDIV_TOP0_ACLK333_MASK |
+		EXYNOS5_CLKDIV_TOP0_ACLK166_MASK |
+		EXYNOS5_CLKDIV_TOP0_ACLK300_DISP1_MASK);
+
+	tmp |= ((clkdiv_top[div_index][2] << EXYNOS5_CLKDIV_TOP0_ACLK266_SHIFT) |
+		(clkdiv_top[div_index][3] << EXYNOS5_CLKDIV_TOP0_ACLK200_SHIFT) |
+		(clkdiv_top[div_index][5] << EXYNOS5_CLKDIV_TOP0_ACLK66_SHIFT) |
+		(clkdiv_top[div_index][6] << EXYNOS5_CLKDIV_TOP0_ACLK333_SHIFT) |
+		(clkdiv_top[div_index][7] << EXYNOS5_CLKDIV_TOP0_ACLK166_SHIFT) |
+		(clkdiv_top[div_index][8] << EXYNOS5_CLKDIV_TOP0_ACLK300_DISP1_SHIFT));
+
+	__raw_writel(tmp, EXYNOS5_CLKDIV_TOP0);
+
+	do {
+		tmp = __raw_readl(EXYNOS5_CLKDIV_STAT_TOP0);
+	} while (tmp & 0x151101);
+
+	tmp = __raw_readl(EXYNOS5_CLKDIV_TOP1);
+
+	tmp &= ~(EXYNOS5_CLKDIV_TOP1_ACLK400_ISP_MASK |
+		EXYNOS5_CLKDIV_TOP1_ACLK400_IOP_MASK |
+		EXYNOS5_CLKDIV_TOP1_ACLK66_PRE_MASK |
+		EXYNOS5_CLKDIV_TOP1_ACLK300_GSCL_MASK);
+
+	tmp |= ((clkdiv_top[div_index][0] << EXYNOS5_CLKDIV_TOP1_ACLK400_ISP_SHIFT) |
+		(clkdiv_top[div_index][1] << EXYNOS5_CLKDIV_TOP1_ACLK400_IOP_SHIFT) |
+		(clkdiv_top[div_index][4] << EXYNOS5_CLKDIV_TOP1_ACLK66_PRE_SHIFT) |
+		(clkdiv_top[div_index][9] << EXYNOS5_CLKDIV_TOP1_ACLK300_GSCL_SHIFT));
+
+
+	__raw_writel(tmp, EXYNOS5_CLKDIV_TOP1);
+
+	do {
+		tmp = __raw_readl(EXYNOS5_CLKDIV_STAT_TOP1);
+		tmp2 = __raw_readl(EXYNOS5_CLKDIV_STAT_TOP0);
+	} while ((tmp & 0x1110000) && (tmp2 & 0x80000));
+
+	/* Change Divider - LEX */
+	tmp = data->lex_divtable[div_index];
+
+	__raw_writel(tmp, EXYNOS5_CLKDIV_LEX);
+
+	do {
+		tmp = __raw_readl(EXYNOS5_CLKDIV_STAT_LEX);
+	} while (tmp & 0x110);
+
+	/* Change Divider - R0X */
+	tmp = __raw_readl(EXYNOS5_CLKDIV_R0X);
+
+	tmp &= ~EXYNOS5_CLKDIV_R0X_PCLK_R0X_MASK;
+
+	tmp |= (clkdiv_r0x[div_index][0] << EXYNOS5_CLKDIV_R0X_PCLK_R0X_SHIFT);
+
+	__raw_writel(tmp, EXYNOS5_CLKDIV_R0X);
+
+	do {
+		tmp = __raw_readl(EXYNOS5_CLKDIV_STAT_R0X);
+	} while (tmp & 0x10);
+
+	/* Change Divider - R1X */
+	tmp = data->r1x_divtable[div_index];
+
+	__raw_writel(tmp, EXYNOS5_CLKDIV_R1X);
+
+	do {
+		tmp = __raw_readl(EXYNOS5_CLKDIV_STAT_R1X);
+	} while (tmp & 0x10);
+}
+
+static void exynos5250_target(struct busfreq_data *data, enum ppmu_type type,
+			      int index)
+{
+	if (type == PPMU_MIF)
+		exynos5250_target_for_mif(data, index);
+	else
+		exynos5250_target_for_int(data, index);
+}
+
+static int exynos5250_get_table_index(unsigned long freq, enum ppmu_type type)
+{
+	int index;
+
+	if (type == PPMU_MIF) {
+		for (index = LV_0; index < LV_MIF_END; index++)
+			if (freq == exynos5_busfreq_table_mif[index].mem_clk)
+				return index;
+	} else {
+		for (index = LV_0; index < LV_INT_END; index++)
+			if (freq == exynos5_busfreq_table_int[index].mem_clk)
+				return index;
+	}
+	return -EINVAL;
+}
+
+static void exynos5250_suspend(void)
+{
+	/* Nothing to do */
+}
+
+static void exynos5250_resume(void)
+{
+	__raw_writel(drex2_pause_ctrl, EXYNOS5_DREX2_PAUSE);
+}
+
+static void exynos5250_monitor(struct busfreq_data *data,
+			struct opp **mif_opp, struct opp **int_opp)
+{
+	int i;
+	unsigned int cpu_load_average = 0;
+	unsigned int ddr_c_load_average = 0;
+	unsigned int ddr_l_load_average = 0;
+	unsigned int ddr_r1_load_average = 0;
+	unsigned int right0_load_average = 0;
+	unsigned int ddr_load_average;
+	unsigned long cpufreq = 0;
+	unsigned long freq_int_right0 = 0;
+	unsigned long lockfreq[PPMU_TYPE_END];
+	unsigned long freq[PPMU_TYPE_END];
+	unsigned long cpu_load;
+	unsigned long ddr_load=0;
+	unsigned long ddr_load_int=0;
+	unsigned long ddr_c_load;
+	unsigned long ddr_r1_load;
+	unsigned long ddr_l_load;
+	unsigned long right0_load;
+	struct opp *opp[PPMU_TYPE_END];
+	unsigned long newfreq[PPMU_TYPE_END];
+
+	ppmu_update(data->dev[PPMU_MIF], 3);
+
+	/* Convert from base xxx to base maxfreq */
+	cpu_load = div64_u64(ppmu_load[PPMU_CPU] * data->curr_freq[PPMU_MIF], data->max_freq[PPMU_MIF]);
+	ddr_c_load = div64_u64(ppmu_load[PPMU_DDR_C] * data->curr_freq[PPMU_MIF], data->max_freq[PPMU_MIF]);
+	ddr_r1_load = div64_u64(ppmu_load[PPMU_DDR_R1] * data->curr_freq[PPMU_MIF], data->max_freq[PPMU_MIF]);
+	ddr_l_load = div64_u64(ppmu_load[PPMU_DDR_L] * data->curr_freq[PPMU_MIF], data->max_freq[PPMU_MIF]);
+	right0_load = div64_u64(ppmu_load[PPMU_RIGHT0_BUS] * data->curr_freq[PPMU_INT], data->max_freq[PPMU_INT]);
+
+	data->load_history[PPMU_CPU][data->index] = cpu_load;
+	data->load_history[PPMU_DDR_C][data->index] = ddr_c_load;
+	data->load_history[PPMU_DDR_R1][data->index] = ddr_r1_load;
+	data->load_history[PPMU_DDR_L][data->index] = ddr_l_load;
+	data->load_history[PPMU_RIGHT0_BUS][data->index++] = right0_load;
+
+	if (data->index >= LOAD_HISTORY_SIZE)
+		data->index = 0;
+
+	for (i = 0; i < LOAD_HISTORY_SIZE; i++) {
+		cpu_load_average += data->load_history[PPMU_CPU][i];
+		ddr_c_load_average += data->load_history[PPMU_DDR_C][i];
+		ddr_r1_load_average += data->load_history[PPMU_DDR_R1][i];
+		ddr_l_load_average += data->load_history[PPMU_DDR_L][i];
+		right0_load_average += data->load_history[PPMU_RIGHT0_BUS][i];
+	}
+
+	/* Calculate average Load */
+	cpu_load_average /= LOAD_HISTORY_SIZE;
+	ddr_c_load_average /= LOAD_HISTORY_SIZE;
+	ddr_r1_load_average /= LOAD_HISTORY_SIZE;
+	ddr_l_load_average /= LOAD_HISTORY_SIZE;
+	right0_load_average /= LOAD_HISTORY_SIZE;
+
+	if (ddr_c_load >= ddr_l_load) {
+		ddr_load = ddr_c_load;
+		ddr_load_average = ddr_c_load_average;
+	} else {
+		ddr_load = ddr_l_load;
+		ddr_load_average = ddr_l_load_average;
+	}
+
+	ddr_load_int = ddr_load;
+
+	//Calculate MIF/INT frequency level
+	if (ddr_r1_load >= MIF_R1_THRESHOLD) {
+		freq[PPMU_MIF] = data->max_freq[PPMU_MIF];
+		if (right0_load >= INT_RIGHT0_THRESHOLD) {
+			freq[PPMU_INT] = data->max_freq[PPMU_INT];
+			goto go_max;
+		} else {
+			freq_int_right0 = div64_u64(data->max_freq[PPMU_INT] * right0_load, INT_RIGHT0_THRESHOLD);
+		}
+	} else {
+		// Caculate next MIF frequency
+		if (ddr_load >= MIF_MAX_THRESHOLD) {
+			freq[PPMU_MIF] = data->max_freq[PPMU_MIF];
+		} else if ( ddr_load < IDLE_THRESHOLD) {
+			if (ddr_load_average < IDLE_THRESHOLD)
+				freq[PPMU_MIF] = step_down(data, PPMU_MIF, 1);
+			else
+				freq[PPMU_MIF] = data->curr_freq[PPMU_MIF];
+		} else {
+			if (ddr_load < ddr_load_average) {
+				ddr_load = ddr_load_average;
+				if (ddr_load >= MIF_MAX_THRESHOLD)
+					ddr_load = MIF_MAX_THRESHOLD;
+			}
+			freq[PPMU_MIF] = div64_u64(data->max_freq[PPMU_MIF] * ddr_load, MIF_MAX_THRESHOLD);
+		}
+
+		freq_int_right0 = div64_u64(data->max_freq[PPMU_INT] * right0_load, INT_RIGHT0_THRESHOLD);
+	}
+
+	// Caculate next INT frequency
+	if (ddr_load_int >= INT_MAX_THRESHOLD) {
+		freq[PPMU_INT] = data->max_freq[PPMU_INT];
+	} else if ( ddr_load_int < IDLE_THRESHOLD) {
+		if (ddr_load_average < IDLE_THRESHOLD)
+			freq[PPMU_INT] = step_down(data, PPMU_INT, 1);
+		else
+			freq[PPMU_INT] = data->curr_freq[PPMU_INT];
+	} else {
+		if (ddr_load_int < ddr_load_average) {
+			ddr_load_int = ddr_load_average;
+			if (ddr_load_int >= INT_MAX_THRESHOLD)
+				ddr_load_int = INT_MAX_THRESHOLD;
+		}
+		freq[PPMU_INT] = div64_u64(data->max_freq[PPMU_INT] * ddr_load_int, INT_MAX_THRESHOLD);
+	}
+
+	freq[PPMU_INT] = max(freq[PPMU_INT], freq_int_right0);
+
+	if (freq[PPMU_INT] == data->max_freq[PPMU_INT])
+		freq[PPMU_MIF] = data->max_freq[PPMU_MIF];
+
+go_max:
+#ifdef BUSFREQ_PROFILE_DEBUG
+	printk(KERN_DEBUG "cpu[%ld] l[%ld] c[%ld] r1[%ld] rt[%ld] m_load[%ld] i_load[%ld]\n",
+			cpu_load, ddr_l_load, ddr_c_load, ddr_r1_load, right0_load, ddr_load, ddr_load_int);
+#endif
+	lockfreq[PPMU_MIF] = (dev_max_freq(data->dev[PPMU_MIF])/1000)*1000;
+	lockfreq[PPMU_INT] = (dev_max_freq(data->dev[PPMU_MIF])%1000)*1000;
+#ifdef BUSFREQ_PROFILE_DEBUG
+	printk(KERN_DEBUG "i_cf[%ld] m_cf[%ld] i_nf[%ld] m_nf[%ld] lock_Mfreq[%ld] lock_Ifreq[%ld]\n",
+			data->curr_freq[PPMU_INT],data->curr_freq[PPMU_MIF],freq[PPMU_INT], freq[PPMU_MIF], lockfreq[PPMU_MIF], lockfreq[PPMU_INT]);
+#endif
+	newfreq[PPMU_MIF] = max(lockfreq[PPMU_MIF], freq[PPMU_MIF]);
+	newfreq[PPMU_INT] = max(lockfreq[PPMU_INT], freq[PPMU_INT]);
+	opp[PPMU_MIF] = opp_find_freq_ceil(data->dev[PPMU_MIF], &newfreq[PPMU_MIF]);
+	opp[PPMU_INT] = opp_find_freq_ceil(data->dev[PPMU_INT], &newfreq[PPMU_INT]);
+
+	*mif_opp = opp[PPMU_MIF];
+	*int_opp = opp[PPMU_INT];
+}
+
+static void busfreq_early_suspend(struct early_suspend *h)
+{
+	unsigned long freq;
+	struct busfreq_data *data = container_of(h, struct busfreq_data,
+			busfreq_early_suspend_handler);
+	freq = data->min_freq[PPMU_MIF] + data->min_freq[PPMU_INT] / 1000;
+	//dev_lock(data->dev[PPMU_MIF], data->dev[PPMU_MIF], freq);
+	dev_unlock(data->dev[PPMU_MIF], data->dev[PPMU_MIF]);
+}
+
+static void busfreq_late_resume(struct early_suspend *h)
+{
+	struct busfreq_data *data = container_of(h, struct busfreq_data,
+			busfreq_early_suspend_handler);
+	/* Request min MIF/INT 300MHz */
+	dev_lock(data->dev[PPMU_MIF], data->dev[PPMU_MIF], 300150);
+}
+
+int exynos5250_init(struct device *dev, struct busfreq_data *data)
+{
+	unsigned int i, tmp;
+	unsigned long maxfreq = ULONG_MAX;
+	unsigned long minfreq = 0;
+	unsigned long cdrexfreq;
+	unsigned long lrbusfreq;
+	struct clk *clk;
+	int ret;
+
+	/* Enable pause function for DREX2 DVFS */
+	drex2_pause_ctrl = __raw_readl(EXYNOS5_DREX2_PAUSE);
+	drex2_pause_ctrl |= DMC_PAUSE_ENABLE;
+	__raw_writel(drex2_pause_ctrl, EXYNOS5_DREX2_PAUSE);
+
+	clk = clk_get(NULL, "mclk_cdrex");
+	if (IS_ERR(clk)) {
+		dev_err(dev, "Fail to get mclk_cdrex clock");
+		ret = PTR_ERR(clk);
+		return ret;
+	}
+	cdrexfreq = clk_get_rate(clk) / 1000;
+	clk_put(clk);
+
+	clk = clk_get(NULL, "aclk_266");
+	if (IS_ERR(clk)) {
+		dev_err(dev, "Fail to get aclk_266 clock");
+		ret = PTR_ERR(clk);
+		return ret;
+	}
+	lrbusfreq = clk_get_rate(clk) / 1000;
+	clk_put(clk);
+
+	if (cdrexfreq == 800000) {
+		clkdiv_cdrex = clkdiv_cdrex_for800;
+		exynos5_busfreq_table_mif = exynos5_busfreq_table_for800;
+		exynos5_mif_volt = exynos5_mif_volt_for800;
+	} else if (cdrexfreq == 666857) {
+		clkdiv_cdrex = clkdiv_cdrex_for667;
+		exynos5_busfreq_table_mif = exynos5_busfreq_table_for667;
+		exynos5_mif_volt = exynos5_mif_volt_for667;
+	} else if (cdrexfreq == 533000) {
+		clkdiv_cdrex = clkdiv_cdrex_for533;
+		exynos5_busfreq_table_mif = exynos5_busfreq_table_for533;
+		exynos5_mif_volt = exynos5_mif_volt_for533;
+	} else if (cdrexfreq == 400000) {
+		clkdiv_cdrex = clkdiv_cdrex_for400;
+		exynos5_busfreq_table_mif = exynos5_busfreq_table_for400;
+		exynos5_mif_volt = exynos5_mif_volt_for400;
+	} else {
+		dev_err(dev, "Don't support cdrex table\n");
+		return -EINVAL;
+	}
+
+	tmp = __raw_readl(EXYNOS5_CLKDIV_LEX);
+
+	for (i = LV_0; i < LV_INT_END; i++) {
+		tmp &= ~(EXYNOS5_CLKDIV_LEX_ATCLK_LEX_MASK | EXYNOS5_CLKDIV_LEX_PCLK_LEX_MASK);
+
+		tmp |= ((clkdiv_lex[i][0] << EXYNOS5_CLKDIV_LEX_ATCLK_LEX_SHIFT) |
+			(clkdiv_lex[i][1] << EXYNOS5_CLKDIV_LEX_PCLK_LEX_SHIFT));
+
+		data->lex_divtable[i] = tmp;
+	}
+
+	tmp = __raw_readl(EXYNOS5_CLKDIV_R0X);
+
+	for (i = LV_0; i < LV_INT_END; i++) {
+
+		tmp &= ~EXYNOS5_CLKDIV_R0X_PCLK_R0X_MASK;
+
+		tmp |= (clkdiv_r0x[i][0] << EXYNOS5_CLKDIV_R0X_PCLK_R0X_SHIFT);
+
+		data->r0x_divtable[i] = tmp;
+	}
+
+	tmp = __raw_readl(EXYNOS5_CLKDIV_R1X);
+
+	for (i = LV_0; i < LV_INT_END; i++) {
+		tmp &= ~EXYNOS5_CLKDIV_R1X_PCLK_R1X_MASK;
+
+		tmp |= (clkdiv_r1x[i][0] << EXYNOS5_CLKDIV_R1X_PCLK_R1X_SHIFT);
+
+		data->r1x_divtable[i] = tmp;
+	}
+
+	tmp = __raw_readl(EXYNOS5_CLKDIV_CDREX);
+
+	if (samsung_rev() < EXYNOS5250_REV_1_0) {
+		for (i = LV_0; i < LV_MIF_END; i++) {
+			tmp &= ~(EXYNOS5_CLKDIV_CDREX_MCLK_DPHY_MASK |
+				 EXYNOS5_CLKDIV_CDREX_MCLK_CDREX2_MASK |
+				 EXYNOS5_CLKDIV_CDREX_ACLK_CDREX_MASK |
+				 EXYNOS5_CLKDIV_CDREX_MCLK_CDREX_MASK |
+				 EXYNOS5_CLKDIV_CDREX_PCLK_CDREX_MASK |
+				 EXYNOS5_CLKDIV_CDREX_ACLK_CLK400_MASK |
+				 EXYNOS5_CLKDIV_CDREX_ACLK_C2C200_MASK |
+				 EXYNOS5_CLKDIV_CDREX_ACLK_EFCON_MASK);
+
+			tmp |= ((clkdiv_cdrex[i][0] << EXYNOS5_CLKDIV_CDREX_MCLK_DPHY_SHIFT) |
+				(clkdiv_cdrex[i][1] << EXYNOS5_CLKDIV_CDREX_MCLK_CDREX2_SHIFT) |
+				(clkdiv_cdrex[i][2] << EXYNOS5_CLKDIV_CDREX_ACLK_CDREX_SHIFT) |
+				(clkdiv_cdrex[i][3] << EXYNOS5_CLKDIV_CDREX_MCLK_CDREX_SHIFT) |
+				(clkdiv_cdrex[i][4] << EXYNOS5_CLKDIV_CDREX_PCLK_CDREX_SHIFT) |
+				(clkdiv_cdrex[i][5] << EXYNOS5_CLKDIV_CDREX_ACLK_CLK400_SHIFT) |
+				(clkdiv_cdrex[i][6] << EXYNOS5_CLKDIV_CDREX_ACLK_C2C200_SHIFT) |
+				(clkdiv_cdrex[i][8] << EXYNOS5_CLKDIV_CDREX_ACLK_EFCON_SHIFT));
+
+				data->cdrex_divtable[i] = tmp;
+		}
+	} else {
+		for (i = LV_0; i < LV_MIF_END; i++) {
+			tmp &= ~(EXYNOS5_CLKDIV_CDREX_MCLK_DPHY_MASK |
+				 EXYNOS5_CLKDIV_CDREX_MCLK_CDREX2_MASK |
+				 EXYNOS5_CLKDIV_CDREX_ACLK_CDREX_MASK |
+				 EXYNOS5_CLKDIV_CDREX_MCLK_CDREX_MASK |
+				 EXYNOS5_CLKDIV_CDREX_PCLK_CDREX_MASK |
+				 EXYNOS5_CLKDIV_CDREX_ACLK_EFCON_MASK);
+
+			tmp |= ((clkdiv_cdrex[i][0] << EXYNOS5_CLKDIV_CDREX_MCLK_DPHY_SHIFT) |
+				(clkdiv_cdrex[i][1] << EXYNOS5_CLKDIV_CDREX_MCLK_CDREX2_SHIFT) |
+				(clkdiv_cdrex[i][2] << EXYNOS5_CLKDIV_CDREX_ACLK_CDREX_SHIFT) |
+				(clkdiv_cdrex[i][3] << EXYNOS5_CLKDIV_CDREX_MCLK_CDREX_SHIFT) |
+				(clkdiv_cdrex[i][4] << EXYNOS5_CLKDIV_CDREX_PCLK_CDREX_SHIFT) |
+				(clkdiv_cdrex[i][8] << EXYNOS5_CLKDIV_CDREX_ACLK_EFCON_SHIFT));
+
+				data->cdrex_divtable[i] = tmp;
+		}
+	}
+
+	if (samsung_rev() < EXYNOS5250_REV_1_0) {
+		tmp = __raw_readl(EXYNOS5_CLKDIV_CDREX2);
+
+		for (i = LV_0; i < LV_MIF_END; i++) {
+			tmp &= ~EXYNOS5_CLKDIV_CDREX2_MCLK_EFPHY_MASK;
+
+			tmp |= clkdiv_cdrex[i][7] << EXYNOS5_CLKDIV_CDREX2_MCLK_EFPHY_SHIFT;
+
+			data->cdrex2_divtable[i] = tmp;
+
+		}
+	}
+
+	exynos5250_set_bus_volt();
+
+	data->dev[PPMU_MIF] = dev;
+	data->dev[PPMU_INT] = &busfreq_for_int;
+
+	for (i = LV_0; i < LV_MIF_END; i++) {
+		ret = opp_add(data->dev[PPMU_MIF], exynos5_busfreq_table_mif[i].mem_clk,
+				exynos5_busfreq_table_mif[i].volt);
+		if (ret) {
+			dev_err(dev, "Fail to add opp entries.\n");
+			return ret;
+		}
+	}
+
+#if defined(CONFIG_DP_60HZ_P11) || defined(CONFIG_DP_60HZ_P10)
+	if (cdrexfreq == 666857) {
+		opp_disable(data->dev[PPMU_MIF], 334000);
+		opp_disable(data->dev[PPMU_MIF], 110000);
+	} else if (cdrexfreq == 533000) {
+		opp_disable(data->dev[PPMU_MIF], 267000);
+		opp_disable(data->dev[PPMU_MIF], 107000);
+	} else if (cdrexfreq == 400000) {
+		opp_disable(data->dev[PPMU_MIF], 267000);
+		opp_disable(data->dev[PPMU_MIF], 100000);
+	}
+#endif
+
+	for (i = LV_0; i < LV_INT_END; i++) {
+		ret = opp_add(data->dev[PPMU_INT], exynos5_busfreq_table_int[i].mem_clk,
+				exynos5_busfreq_table_int[i].volt);
+		if (ret) {
+			dev_err(dev, "Fail to add opp entries.\n");
+			return ret;
+		}
+	}
+
+	data->target = exynos5250_target;
+	data->get_table_index = exynos5250_get_table_index;
+	data->monitor = exynos5250_monitor;
+	data->busfreq_suspend = exynos5250_suspend;
+	data->busfreq_resume = exynos5250_resume;
+	data->sampling_rate = usecs_to_jiffies(100000);
+
+	data->table[PPMU_MIF] = exynos5_busfreq_table_mif;
+	data->table[PPMU_INT] = exynos5_busfreq_table_int;
+
+	/* Find max frequency for mif */
+	data->max_freq[PPMU_MIF] =
+			opp_get_freq(opp_find_freq_floor(data->dev[PPMU_MIF], &maxfreq));
+	data->min_freq[PPMU_MIF] =
+			opp_get_freq(opp_find_freq_ceil(data->dev[PPMU_MIF], &minfreq));
+	data->curr_freq[PPMU_MIF] =
+			opp_get_freq(opp_find_freq_ceil(data->dev[PPMU_MIF], &cdrexfreq));
+	/* Find max frequency for int */
+	maxfreq = ULONG_MAX;
+	minfreq = 0;
+	data->max_freq[PPMU_INT] =
+			opp_get_freq(opp_find_freq_floor(data->dev[PPMU_INT], &maxfreq));
+	data->min_freq[PPMU_INT] =
+			opp_get_freq(opp_find_freq_ceil(data->dev[PPMU_INT], &minfreq));
+	data->curr_freq[PPMU_INT] =
+			opp_get_freq(opp_find_freq_ceil(data->dev[PPMU_INT], &lrbusfreq));
+
+	data->vdd_reg[PPMU_INT] = regulator_get(NULL, "vdd_int");
+	if (IS_ERR(data->vdd_reg[PPMU_INT])) {
+		pr_err("failed to get resource %s\n", "vdd_int");
+		return -ENODEV;
+	}
+
+	data->vdd_reg[PPMU_MIF] = regulator_get(NULL, "vdd_mif");
+	if (IS_ERR(data->vdd_reg[PPMU_MIF])) {
+		pr_err("failed to get resource %s\n", "vdd_mif");
+		regulator_put(data->vdd_reg[PPMU_INT]);
+		return -ENODEV;
+	}
+
+        data->busfreq_early_suspend_handler.suspend = &busfreq_early_suspend;
+	data->busfreq_early_suspend_handler.resume = &busfreq_late_resume;
+
+	data->busfreq_early_suspend_handler.suspend = &busfreq_early_suspend;
+	data->busfreq_early_suspend_handler.resume = &busfreq_late_resume;
+
+	/* Request min 300MHz for MIF and 150MHz for  INT*/
+	dev_lock(dev, dev, 300150);
+
+	register_early_suspend(&data->busfreq_early_suspend_handler);
+
+	tmp = __raw_readl(EXYNOS5_ABBG_INT_CONTROL);
+	tmp &= ~(0x1f | (1 << 31) | (1 << 7));
+	tmp |= ((8 + INT_RBB) | (1 << 31) | (1 << 7));
+	__raw_writel(tmp, EXYNOS5_ABBG_INT_CONTROL);
+
+	return 0;
+}
diff -Naur ./arch/arm/mach-exynos/busfreq_opp_exynos4.c ../../HK_JB/Kernel/arch/arm/mach-exynos/busfreq_opp_exynos4.c
--- ./arch/arm/mach-exynos/busfreq_opp_exynos4.c	2012-12-08 20:40:46.117821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/busfreq_opp_exynos4.c	2012-11-22 09:13:15.000000000 +0100
@@ -131,8 +131,8 @@
 		voltage = data->get_int_volt(index);
 		regulator_set_voltage(data->vdd_int, voltage,
 				voltage + 25000);
-		/*if (data->busfreq_prepare)
-			data->busfreq_prepare(index);*/
+		if (data->busfreq_prepare)
+			data->busfreq_prepare(index);
 	}
 	if (data->set_qos)
 		data->set_qos(index);
@@ -140,8 +140,8 @@
 	data->target(index);
 
 	if (newfreq < currfreq) {
-		/*if (data->busfreq_post)
-			data->busfreq_post(index);*/
+		if (data->busfreq_post)
+			data->busfreq_post(index);
 		regulator_set_voltage(data->vdd_mif, voltage,
 				voltage + 25000);
 		voltage = data->get_int_volt(index);
diff -Naur ./arch/arm/mach-exynos/busfreq_opp_exynos5.c ../../HK_JB/Kernel/arch/arm/mach-exynos/busfreq_opp_exynos5.c
--- ./arch/arm/mach-exynos/busfreq_opp_exynos5.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/busfreq_opp_exynos5.c	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,498 @@
+/* linux/arch/arm/mach-exynos/busfreq_opp_exynos5.c
+ *
+ * Copyright (c) 2011 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com/
+ *
+ * EXYNOS4 - BUS clock frequency scaling support with OPP
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+*/
+
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/types.h>
+#include <linux/err.h>
+#include <linux/io.h>
+#include <linux/regulator/consumer.h>
+#include <linux/sysfs.h>
+#include <linux/platform_device.h>
+#include <linux/device.h>
+#include <linux/module.h>
+#include <linux/cpu.h>
+#include <linux/ktime.h>
+#include <linux/tick.h>
+#include <linux/kernel_stat.h>
+#include <linux/suspend.h>
+#include <linux/reboot.h>
+#include <linux/slab.h>
+#include <linux/opp.h>
+#include <linux/clk.h>
+#include <linux/workqueue.h>
+
+#include <asm/mach-types.h>
+
+#include <mach/ppmu.h>
+#include <mach/map.h>
+#include <mach/regs-clock.h>
+#include <mach/gpio.h>
+#include <mach/regs-mem.h>
+#include <mach/cpufreq.h>
+#include <mach/dev.h>
+#include <mach/busfreq_exynos5.h>
+
+#include <plat/map-s5p.h>
+#include <plat/cpu.h>
+#include <plat/clock.h>
+
+#define BUSFREQ_DEBUG	1
+
+static DEFINE_MUTEX(busfreq_lock);
+BLOCKING_NOTIFIER_HEAD(exynos_busfreq_notifier_list);
+
+struct busfreq_control {
+	struct opp *lock[PPMU_TYPE_END];
+	struct device *dev[PPMU_TYPE_END];
+};
+
+static struct busfreq_control bus_ctrl;
+
+void update_busfreq_stat(struct busfreq_data *data,
+		enum ppmu_type type, unsigned int index)
+{
+#ifdef BUSFREQ_DEBUG
+	unsigned long long cur_time = get_jiffies_64();
+	data->time_in_state[type][index] =
+		cputime64_add(data->time_in_state[type][index], cputime_sub(cur_time, data->last_time[type]));
+	data->last_time[type] = cur_time;
+#endif
+}
+
+
+static unsigned long __maybe_unused step_up(struct busfreq_data *data,
+				enum ppmu_type type, int step)
+{
+	int i;
+	struct opp *opp;
+	unsigned long newfreq = data->curr_freq[type];
+
+	if (data->max_freq[type] == data->curr_freq[type])
+		return newfreq;
+
+	for (i = 0; i < step; i++) {
+		newfreq += 1;
+		opp = opp_find_freq_ceil(data->dev[type], &newfreq);
+
+		if (opp_get_freq(opp) == data->max_freq[type])
+			break;
+	}
+
+	return newfreq;
+}
+
+unsigned long step_down(struct busfreq_data *data,
+			enum ppmu_type type, int step)
+{
+	int i;
+	struct opp *opp;
+	unsigned long newfreq = data->curr_freq[type];
+
+	if (data->min_freq[type] == data->curr_freq[type])
+		return newfreq;
+
+	for (i = 0; i < step; i++) {
+		newfreq -= 1;
+		opp = opp_find_freq_floor(data->dev[type], &newfreq);
+
+		if (opp_get_freq(opp) == data->min_freq[type])
+			break;
+	}
+
+	return newfreq;
+}
+
+static void _target(struct busfreq_data *data,
+		enum ppmu_type type, unsigned long newfreq)
+{
+	struct opp *opp;
+	unsigned int voltage;
+	int index;
+
+	opp = opp_find_freq_exact(data->dev[type], newfreq, true);
+
+	if (bus_ctrl.lock[type]) {
+		opp = bus_ctrl.lock[type];
+		newfreq = opp_get_freq(opp);
+	}
+
+	index = data->get_table_index(newfreq, type);
+
+	if (newfreq == 0 || newfreq == data->curr_freq[type] ||
+			data->use == false) {
+		update_busfreq_stat(data, type, index);
+		return;
+	}
+
+	voltage = opp_get_voltage(opp);
+
+	if (newfreq > data->curr_freq[type]) {
+		regulator_set_voltage(data->vdd_reg[type], voltage,
+				voltage + 25000);
+		if (type == PPMU_MIF && data->busfreq_prepare)
+			data->busfreq_prepare(index);
+	}
+
+	data->target(data, type, index);
+
+	if (newfreq < data->curr_freq[type]) {
+		if (type == PPMU_MIF && data->busfreq_post)
+			data->busfreq_post(index);
+		regulator_set_voltage(data->vdd_reg[type], voltage,
+				voltage + 25000);
+	}
+	data->curr_freq[type] = newfreq;
+
+	update_busfreq_stat(data, type, index);
+}
+
+static void exynos_busfreq_timer(struct work_struct *work)
+{
+	struct delayed_work *delayed_work = to_delayed_work(work);
+	struct busfreq_data *data = container_of(delayed_work, struct busfreq_data,
+			worker);
+	int i;
+	struct opp *opp[PPMU_TYPE_END];
+	unsigned long newfreq;
+
+	data->monitor(data, &opp[PPMU_MIF], &opp[PPMU_INT]);
+
+	ppmu_start(data->dev[PPMU_MIF]);
+
+	mutex_lock(&busfreq_lock);
+
+	for (i = PPMU_MIF; i < PPMU_TYPE_END; i++) {
+		newfreq = opp_get_freq(opp[i]);
+		_target(data, i, newfreq);
+	}
+
+	mutex_unlock(&busfreq_lock);
+	queue_delayed_work(system_freezable_wq, &data->worker, data->sampling_rate);
+}
+
+static int exynos_buspm_notifier_event(struct notifier_block *this,
+		unsigned long event, void *ptr)
+{
+	struct busfreq_data *data = container_of(this, struct busfreq_data,
+			exynos_buspm_notifier);
+	int i;
+
+	switch (event) {
+	case PM_SUSPEND_PREPARE:
+		mutex_lock(&busfreq_lock);
+		for (i = PPMU_MIF; i < PPMU_TYPE_END; i++)
+			_target(data, i, data->max_freq[i]);
+		mutex_unlock(&busfreq_lock);
+		data->use = false;
+		return NOTIFY_OK;
+	case PM_POST_RESTORE:
+	case PM_POST_SUSPEND:
+		data->use = true;
+		return NOTIFY_OK;
+	}
+	return NOTIFY_DONE;
+}
+
+static int exynos_busfreq_reboot_event(struct notifier_block *this,
+		unsigned long code, void *unused)
+{
+	struct busfreq_data *data = container_of(this, struct busfreq_data,
+			exynos_reboot_notifier);
+	int i;
+	struct opp *opp;
+	unsigned int voltage[PPMU_TYPE_END];
+	for (i = PPMU_MIF; i < PPMU_TYPE_END; i++) {
+		opp = opp_find_freq_exact(data->dev[i], data->max_freq[i], true);
+		voltage[i] = opp_get_voltage(opp);
+
+		regulator_set_voltage(data->vdd_reg[i], voltage[i], voltage[i] + 25000);
+	}
+	data->use = false;
+
+	printk(KERN_INFO "REBOOT Notifier for BUSFREQ\n");
+	return NOTIFY_DONE;
+}
+
+static int exynos_busfreq_request_event(struct notifier_block *this,
+		unsigned long req_newfreq, void *device)
+{
+	struct busfreq_data *data = container_of(this, struct busfreq_data,
+			exynos_request_notifier);
+	int i;
+	struct opp *opp[PPMU_TYPE_END];
+	unsigned long newfreq[PPMU_TYPE_END];
+	unsigned long freq;
+
+	if (req_newfreq == 0 || data->use == false)
+		return -EINVAL;
+
+	mutex_lock(&busfreq_lock);
+
+	newfreq[PPMU_MIF] = (req_newfreq / 1000) * 1000;
+	newfreq[PPMU_INT] = (req_newfreq % 1000) * 1000;
+
+	for (i = PPMU_MIF; i < PPMU_TYPE_END; i++) {
+		opp[i] = opp_find_freq_ceil(data->dev[i], &newfreq[i]);
+		freq = opp_get_freq(opp[i]);
+		if (freq > data->curr_freq[i])
+			_target(data, i, freq);
+	}
+
+	mutex_unlock(&busfreq_lock);
+	printk(KERN_INFO "REQUEST Notifier for BUSFREQ\n");
+	return NOTIFY_DONE;
+}
+
+int exynos_busfreq_lock(unsigned int nId,
+	enum busfreq_level_request busfreq_level)
+{
+	return 0;
+}
+
+void exynos_busfreq_lock_free(unsigned int nId)
+{
+}
+
+static ssize_t show_level_lock(struct device *device,
+		struct device_attribute *attr, char *buf)
+{
+	struct platform_device *pdev = to_platform_device(bus_ctrl.dev[PPMU_MIF]);
+	struct busfreq_data *data = (struct busfreq_data *)platform_get_drvdata(pdev);
+	int len = 0;
+	unsigned long mif_freq, int_freq;
+
+	mif_freq = bus_ctrl.lock[PPMU_MIF] == NULL ? 0 : opp_get_freq(bus_ctrl.lock[PPMU_MIF]);
+	int_freq = bus_ctrl.lock[PPMU_INT] == NULL ? 0 : opp_get_freq(bus_ctrl.lock[PPMU_INT]);
+
+	len = sprintf(buf, "Current Freq(MIF/INT) : (%lu - %lu)\n",
+			data->curr_freq[PPMU_MIF], data->curr_freq[PPMU_INT]);
+	len += sprintf(buf + len, "Current Lock Freq(MIF/INT) : (%lu - %lu)\n", mif_freq, int_freq);
+
+	return len;
+}
+
+static ssize_t store_level_lock(struct device *device, struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	struct platform_device *pdev = to_platform_device(bus_ctrl.dev[PPMU_MIF]);
+	struct busfreq_data *data = (struct busfreq_data *)platform_get_drvdata(pdev);
+	struct opp *opp[PPMU_TYPE_END];
+	unsigned long freq[PPMU_TYPE_END];
+	int i;
+	int ret;
+
+	ret = sscanf(buf, "%lu %lu", &freq[PPMU_MIF], &freq[PPMU_INT]);
+	if (freq[PPMU_MIF] == 0 || freq[PPMU_INT] == 0 || ret != 2) {
+		pr_info("Release bus level lock.\n");
+		bus_ctrl.lock[PPMU_MIF] = NULL;
+		bus_ctrl.lock[PPMU_INT] = NULL;
+		return count;
+	}
+
+	for (i = PPMU_MIF; i < PPMU_TYPE_END; i++) {
+		if (freq[i] > data->max_freq[i])
+			freq[i] = data->max_freq[i];
+
+		opp[i] = opp_find_freq_ceil(bus_ctrl.dev[i], &freq[i]);
+		bus_ctrl.lock[i] = opp[i];
+	}
+	pr_info("Lock Freq : MIF/INT(%lu - %lu)\n", opp_get_freq(opp[PPMU_MIF]), opp_get_freq(opp[PPMU_INT]));
+	return count;
+}
+
+static ssize_t show_locklist(struct device *device,
+		struct device_attribute *attr, char *buf)
+{
+	return dev_lock_list(bus_ctrl.dev[PPMU_MIF], buf);
+}
+
+static ssize_t show_time_in_state(struct device *device,
+		struct device_attribute *attr, char *buf)
+{
+	struct platform_device *pdev = to_platform_device(bus_ctrl.dev[PPMU_MIF]);
+	struct busfreq_data *data = (struct busfreq_data *)platform_get_drvdata(pdev);
+	struct busfreq_table *table;
+	ssize_t len = 0;
+	int i;
+
+	table = data->table[PPMU_MIF];
+	len += sprintf(buf, "%s\n", "MIF stat");
+	for (i = LV_0; i < LV_MIF_END; i++)
+		len += sprintf(buf + len, "%u %llu\n", table[i].mem_clk,
+				(unsigned long long)cputime64_to_clock_t(data->time_in_state[PPMU_MIF][i]));
+
+	table = data->table[PPMU_INT];
+	len += sprintf(buf + len, "\n%s\n", "INT stat");
+	for (i = LV_0; i < LV_INT_END; i++)
+		len += sprintf(buf + len, "%u %llu\n", table[i].mem_clk,
+				(unsigned long long)cputime64_to_clock_t(data->time_in_state[PPMU_INT][i]));
+	return len;
+}
+
+static DEVICE_ATTR(curr_freq, 0664, show_level_lock, store_level_lock);
+static DEVICE_ATTR(lock_list, 0664, show_locklist, NULL);
+static DEVICE_ATTR(time_in_state, 0664, show_time_in_state, NULL);
+
+static struct attribute *busfreq_attributes[] = {
+	&dev_attr_curr_freq.attr,
+	&dev_attr_lock_list.attr,
+	&dev_attr_time_in_state.attr,
+	NULL
+};
+
+int exynos_request_register(struct notifier_block *n)
+{
+	return blocking_notifier_chain_register(&exynos_busfreq_notifier_list, n);
+}
+
+void exynos_request_apply(unsigned long freq)
+{
+	blocking_notifier_call_chain(&exynos_busfreq_notifier_list, freq, NULL);
+}
+
+static __devinit int exynos_busfreq_probe(struct platform_device *pdev)
+{
+	struct busfreq_data *data;
+
+	data = kzalloc(sizeof(struct busfreq_data), GFP_KERNEL);
+	if (!data) {
+		pr_err("Unable to create busfreq_data struct.\n");
+		return -ENOMEM;
+	}
+
+	data->exynos_buspm_notifier.notifier_call =
+		exynos_buspm_notifier_event;
+	data->exynos_reboot_notifier.notifier_call =
+		exynos_busfreq_reboot_event;
+	data->busfreq_attr_group.attrs = busfreq_attributes;
+	data->exynos_request_notifier.notifier_call =
+		exynos_busfreq_request_event;
+
+	INIT_DELAYED_WORK(&data->worker, exynos_busfreq_timer);
+
+	if (soc_is_exynos5250()) {
+		data->init = exynos5250_init;
+	} else {
+		pr_err("Unsupport device type.\n");
+		goto err_busfreq;
+	}
+
+	if (data->init(&pdev->dev, data)) {
+		pr_err("Failed to init busfreq.\n");
+		goto err_busfreq;
+	}
+
+	bus_ctrl.dev[PPMU_MIF] =  data->dev[PPMU_MIF];
+	bus_ctrl.dev[PPMU_INT] =  data->dev[PPMU_INT];
+
+	data->last_time[PPMU_MIF] = get_jiffies_64();
+	data->last_time[PPMU_INT] = get_jiffies_64();
+
+	data->busfreq_kobject = kobject_create_and_add("busfreq",
+				&cpu_sysdev_class.kset.kobj);
+	if (!data->busfreq_kobject)
+		pr_err("Failed to create busfreq kobject.!\n");
+
+	if (sysfs_create_group(data->busfreq_kobject, &data->busfreq_attr_group))
+		pr_err("Failed to create attributes group.!\n");
+
+	if (register_pm_notifier(&data->exynos_buspm_notifier)) {
+		pr_err("Failed to setup buspm notifier\n");
+		goto err_busfreq;
+	}
+
+	data->use = true;
+
+	if (register_reboot_notifier(&data->exynos_reboot_notifier))
+		pr_err("Failed to setup reboot notifier\n");
+
+	if (exynos_request_register(&data->exynos_request_notifier))
+		pr_err("Failed to setup request notifier\n");
+
+	platform_set_drvdata(pdev, data);
+
+	queue_delayed_work(system_freezable_wq, &data->worker, data->sampling_rate);
+	return 0;
+
+err_busfreq:
+	if (!IS_ERR(data->vdd_reg[PPMU_INT]))
+		regulator_put(data->vdd_reg[PPMU_INT]);
+
+	if (!IS_ERR(data->vdd_reg[PPMU_MIF]))
+		regulator_put(data->vdd_reg[PPMU_MIF]);
+
+	kfree(data);
+	return -ENODEV;
+}
+
+static __devexit int exynos_busfreq_remove(struct platform_device *pdev)
+{
+	struct busfreq_data *data = platform_get_drvdata(pdev);
+
+	unregister_pm_notifier(&data->exynos_buspm_notifier);
+	unregister_reboot_notifier(&data->exynos_reboot_notifier);
+	regulator_put(data->vdd_reg[PPMU_INT]);
+	regulator_put(data->vdd_reg[PPMU_MIF]);
+	sysfs_remove_group(data->busfreq_kobject, &data->busfreq_attr_group);
+	kfree(data);
+
+	return 0;
+}
+
+static int exynos_busfreq_suspend(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct busfreq_data *data = (struct busfreq_data *)platform_get_drvdata(pdev);
+
+	if (data->busfreq_suspend)
+		data->busfreq_suspend();
+	return 0;
+}
+
+static int exynos_busfreq_resume(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct busfreq_data *data = (struct busfreq_data *)platform_get_drvdata(pdev);
+	ppmu_reset(dev);
+
+	if (data->busfreq_resume)
+		data->busfreq_resume();
+	return 0;
+}
+
+static const struct dev_pm_ops exynos_busfreq_pm = {
+	.suspend = exynos_busfreq_suspend,
+	.resume = exynos_busfreq_resume,
+};
+
+static struct platform_driver exynos_busfreq_driver = {
+	.probe  = exynos_busfreq_probe,
+	.remove = __devexit_p(exynos_busfreq_remove),
+	.driver = {
+		.name   = "exynos-busfreq",
+		.owner  = THIS_MODULE,
+		.pm     = &exynos_busfreq_pm,
+	},
+};
+
+static int __init exynos_busfreq_init(void)
+{
+	return platform_driver_register(&exynos_busfreq_driver);
+}
+late_initcall(exynos_busfreq_init);
+
+static void __exit exynos_busfreq_exit(void)
+{
+	platform_driver_unregister(&exynos_busfreq_driver);
+}
+module_exit(exynos_busfreq_exit);
diff -Naur ./arch/arm/mach-exynos/charger-slp.c ../../HK_JB/Kernel/arch/arm/mach-exynos/charger-slp.c
--- ./arch/arm/mach-exynos/charger-slp.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/charger-slp.c	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,271 @@
+/*
+ * linux/arch/arm/mach-exynos/charger-slp.c
+ * COPYRIGHT(C) 2011
+ * MyungJoo Ham <myungjoo.ham@samsung.com>
+ *
+ * Charger Support with Charger-Manager Framework
+ *
+ */
+
+#include <linux/io.h>
+#include <linux/err.h>
+#include <linux/platform_device.h>
+#include <linux/regulator/consumer.h>
+#include <linux/power/charger-manager.h>
+#include <linux/hwmon.h>
+#include <linux/platform_data/ntc_thermistor.h>
+
+#include <plat/adc.h>
+#include <plat/pm.h>
+
+#include <mach/regs-pmu.h>
+#include <mach/irqs.h>
+
+#include "board-mobile.h"
+
+#define S5P_WAKEUP_STAT_WKSRC_MASK	0x000ffe3f
+#define ADC_SAMPLING_CNT 7
+#define SDI_2100MA_BATT	4350000
+
+/* Temperatures in milli-centigrade */
+#define SECBATTSPEC_TEMP_HIGH		(65 * 1000)
+#define SECBATTSPEC_TEMP_HIGH_REC	(43 * 1000)
+#define SECBATTSPEC_TEMP_LOW		(-5 * 1000)
+#define SECBATTSPEC_TEMP_LOW_REC	(0 * 1000)
+
+#ifdef CONFIG_SENSORS_NTC_THERMISTOR
+struct platform_device midas_ncp15wb473_thermistor;
+static int ntc_adc_num = -EINVAL; /* Uninitialized */
+static struct s3c_adc_client *ntc_adc;
+
+int __init adc_ntc_init(int port)
+{
+	int err = 0;
+
+	if (port < 0 || port > 9)
+		return -EINVAL;
+	ntc_adc_num = port;
+
+	ntc_adc = s3c_adc_register(&midas_ncp15wb473_thermistor,
+			NULL, NULL, 0);
+	if (IS_ERR(ntc_adc)) {
+		err = PTR_ERR(ntc_adc);
+		ntc_adc = NULL;
+		return err;
+	}
+
+	return 0;
+}
+
+static int read_thermistor_uV(void)
+{
+	int val, i;
+	int adc_min = 0;
+	int adc_max = 0;
+	int adc_total = 0;
+
+	s64 converted;
+
+	WARN(ntc_adc == NULL || ntc_adc_num < 0,
+	     "NTC-ADC is not initialized for %s.\n", __func__);
+
+	for (i = 0; i < ADC_SAMPLING_CNT; i++) {
+		val = s3c_adc_read(ntc_adc, ntc_adc_num);
+		if (val <  0) {
+			pr_err("%s : read failed.(%d).\n", __func__, val);
+			return -EAGAIN;
+		}
+
+		if (i != 0) {
+			if (val > adc_max)
+				adc_max = val;
+			else if (val < adc_min)
+				adc_min = val;
+		} else {
+			adc_max = val;
+			adc_min = val;
+		}
+
+		adc_total += val;
+	}
+
+	val = (adc_total - (adc_max + adc_min)) / (ADC_SAMPLING_CNT - 2);
+
+	/* Multiplied by maximum input voltage */
+	converted = 1800000LL * (s64) val;
+	/* Divided by resolution */
+	converted >>= 12;
+
+	return converted;
+}
+
+static struct ntc_thermistor_platform_data ncp15wb473_pdata = {
+	.read_uV	= read_thermistor_uV,
+	.pullup_uV	= 1800000, /* VCC_1.8V_AP */
+	.pullup_ohm	= 100000, /* 100K */
+	.pulldown_ohm	= 100000, /* 100K */
+	.connect	= NTC_CONNECTED_GROUND,
+};
+
+static int __read_thermistor_mC(int *mC)
+{
+	int ret;
+	static struct device *hwmon;
+	static struct hwmon_property *entry;
+
+	if (ntc_adc_num == -EINVAL)
+		return -ENODEV;
+
+	if (hwmon == NULL)
+		hwmon = hwmon_find_device(&midas_ncp15wb473_thermistor.dev);
+
+	if (IS_ERR_OR_NULL(hwmon)) {
+		hwmon = NULL;
+		return -ENODEV;
+	}
+
+	if (entry == NULL)
+		entry = hwmon_get_property(hwmon, "temp1_input");
+	if (IS_ERR_OR_NULL(entry)) {
+		entry = NULL;
+		return -ENODEV;
+	}
+
+	ret = hwmon_get_value(hwmon, entry, mC);
+	if (ret < 0) {
+		entry = NULL;
+		return ret;
+	}
+
+	return 0;
+}
+#else
+static int __read_thermistor_mC(int *mC)
+{
+	*mC = 25000;
+	return 0;
+}
+#endif
+
+enum temp_stat { TEMP_OK = 0, TEMP_HOT = 1, TEMP_COLD = -1 };
+
+static int midas_thermistor_ck(int *mC)
+{
+	static enum temp_stat state = TEMP_OK;
+
+	 __read_thermistor_mC(mC);
+
+	switch (state) {
+	case TEMP_OK:
+		if (*mC >= SECBATTSPEC_TEMP_HIGH)
+			state = TEMP_HOT;
+		else if (*mC <= SECBATTSPEC_TEMP_LOW)
+			state = TEMP_COLD;
+		break;
+	case TEMP_HOT:
+		if (*mC <= SECBATTSPEC_TEMP_LOW)
+			state = TEMP_COLD;
+		else if (*mC < SECBATTSPEC_TEMP_HIGH_REC)
+			state = TEMP_OK;
+		break;
+	case TEMP_COLD:
+		if (*mC >= SECBATTSPEC_TEMP_HIGH)
+			state = TEMP_HOT;
+		else if (*mC > SECBATTSPEC_TEMP_LOW_REC)
+			state = TEMP_OK;
+	default:
+		pr_err("%s has invalid state %d\n", __func__, state);
+	}
+
+	return state;
+}
+
+static bool s3c_wksrc_rtc_alarm(void)
+{
+	u32 reg = s3c_suspend_wakeup_stat & S5P_WAKEUP_STAT_WKSRC_MASK;
+
+	if ((reg & S5P_WAKEUP_STAT_RTCALARM) &&
+	    !(reg & ~S5P_WAKEUP_STAT_RTCALARM))
+		return true; /* yes, it is */
+
+	return false;
+}
+
+static char *midas_charger_stats[] = {
+#if defined(CONFIG_BATTERY_MAX77693_CHARGER)
+	"max77693-charger",
+#endif
+	NULL };
+
+struct charger_cable charger_cable_vinchg1[] = {
+	{
+		.extcon_name	= "max77693-muic",
+		.name		= "USB",
+		.min_uA		= 475000,
+		.max_uA		= 475000 + 25000,
+	}, {
+		.extcon_name	= "max77693-muic",
+		.name		= "TA",
+		.min_uA		= 650000,
+		.max_uA		= 650000 + 25000,
+	}, {
+		.extcon_name	= "max77693-muic",
+		.name		= "MHL",
+	},
+};
+
+static struct charger_regulator midas_regulators[] = {
+	{
+		.regulator_name	= "vinchg1",
+		.cables		= charger_cable_vinchg1,
+		.num_cables	= ARRAY_SIZE(charger_cable_vinchg1),
+	},
+};
+
+static struct charger_desc midas_charger_desc = {
+	.psy_name		= "battery",
+	.polling_interval_ms	= 30000,
+	.polling_mode		= CM_POLL_EXTERNAL_POWER_ONLY,
+	.fullbatt_vchkdrop_ms	= 30000,
+	.fullbatt_vchkdrop_uV	= 50000,
+	.fullbatt_uV		= 4200000,
+	.battery_present	= CM_CHARGER_STAT,
+	.psy_charger_stat	= midas_charger_stats,
+	.psy_fuel_gauge		= "max17047-fuelgauge",
+	.is_temperature_error	= midas_thermistor_ck,
+	.measure_ambient_temp	= true,
+	.measure_battery_temp	= false,
+	.soc_margin		= 0,
+
+	.charger_regulators	= midas_regulators,
+	.num_charger_regulators	= ARRAY_SIZE(midas_regulators),
+};
+
+struct charger_global_desc midas_charger_g_desc = {
+	.rtc = "rtc0",
+	.is_rtc_only_wakeup_reason = s3c_wksrc_rtc_alarm,
+	.assume_timer_stops_in_suspend	= false,
+};
+
+struct platform_device midas_charger_manager = {
+	.name			= "charger-manager",
+	.dev			= {
+		.platform_data = &midas_charger_desc,
+	},
+};
+
+#ifdef CONFIG_SENSORS_NTC_THERMISTOR
+struct platform_device midas_ncp15wb473_thermistor = {
+	.name			= "ncp15wb473",
+	.dev			= {
+		.platform_data = &ncp15wb473_pdata,
+	},
+};
+#endif
+
+void cm_change_fullbatt_uV(void)
+{
+	midas_charger_desc.fullbatt_uV =  SDI_2100MA_BATT;
+}
+EXPORT_SYMBOL(cm_change_fullbatt_uV);
+
diff -Naur ./arch/arm/mach-exynos/clock-exynos4210.c ../../HK_JB/Kernel/arch/arm/mach-exynos/clock-exynos4210.c
--- ./arch/arm/mach-exynos/clock-exynos4210.c	2012-12-08 20:40:46.117821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/clock-exynos4210.c	2012-11-22 09:13:15.000000000 +0100
@@ -277,15 +277,9 @@
 
 static struct vpll_div_data vpll_div_4210[] = {
 	{54000000, 3, 53, 3, 1024, 0, 17, 0},
-	{66000000, 3, 63, 3, 1024, 0, 20, 1},
 	{108000000, 3, 53, 2, 1024, 0, 17, 0},
-	{160000000, 2, 53, 2, 1024, 1,  1, 1},
-	{200000000, 2, 63, 2, 1024, 1,  1, 1},
-	{267000000, 3, 63, 1, 1950, 0, 20, 1},
+	{260000000, 3, 63, 1, 1950, 0, 20, 1},
 	{330000000, 2, 53, 1, 2048, 1,  1, 1},
-	{400000000, 2, 63, 1, 2417, 1,  1, 1},
-	{440000000, 3, 53, 0, 2417, 0, 17, 0},
-	{520000000, 3, 63, 0, 2417, 0, 20, 1},
 #ifdef CONFIG_EXYNOS4_MSHC_VPLL_46MHZ
 	{370882812, 3, 44, 0, 2417, 0, 14, 0},
 #endif
diff -Naur ./arch/arm/mach-exynos/clock-exynos4212.c ../../HK_JB/Kernel/arch/arm/mach-exynos/clock-exynos4212.c
--- ./arch/arm/mach-exynos/clock-exynos4212.c	2012-12-08 20:40:46.117821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/clock-exynos4212.c	2012-11-22 09:13:15.000000000 +0100
@@ -976,20 +976,13 @@
 	{54000000, 2, 72, 4, 0, 0, 0, 0},
 	{108000000, 2, 72, 3, 0, 0, 0, 0},
 	{160000000, 3, 160, 3, 0, 0, 0, 0},
-	{200000000, 3, 200, 3, 0, 0, 0, 0},
 	{266000000, 3, 133, 2, 0, 0, 0, 0},
 	{275000000, 2, 92, 2, 43692, 0, 0, 0},
 	{300000000, 2, 100, 2, 0, 0, 0, 0},
 	{333000000, 2, 111, 2, 0, 0, 0, 0},
 	{350000000, 3, 175, 2, 0, 0, 0, 0},
-	{400000000, 3, 100, 1, 0, 0, 0, 0},
 	{440000000, 3, 110, 1, 0, 0, 0, 0},
-	{500000000, 2, 166, 2, 0, 0, 0, 0},
 	{533000000, 3, 133, 1, 16384, 0, 0, 0},
-	{600000000, 2, 100, 1, 16384, 0, 0, 0},
-	{640000000, 3, 160, 1, 16384, 0, 0, 0},
-	{666000000, 2, 111, 1, 16384, 0, 0, 0},
-	{700000000, 3, 175, 1, 16384, 0, 0, 0},
 };
 
 static unsigned long exynos4212_vpll_get_rate(struct clk *clk)
diff -Naur ./arch/arm/mach-exynos/clock-exynos5.c ../../HK_JB/Kernel/arch/arm/mach-exynos/clock-exynos5.c
--- ./arch/arm/mach-exynos/clock-exynos5.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/clock-exynos5.c	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,2921 @@
+/* linux/arch/arm/mach-exynos/clock-exynos5.c
+ *
+ * Copyright (c) 2010-2011 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com
+ *
+ * EXYNOS5 - Clock support
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+*/
+
+#include <linux/kernel.h>
+#include <linux/err.h>
+#include <linux/io.h>
+#include <linux/syscore_ops.h>
+
+#include <plat/cpu-freq.h>
+#include <plat/clock.h>
+#include <plat/cpu.h>
+#include <plat/pll.h>
+#include <plat/s5p-clock.h>
+#include <plat/clock-clksrc.h>
+#include <plat/devs.h>
+#include <plat/pm.h>
+
+#include <mach/map.h>
+#include <mach/regs-clock.h>
+#include <mach/regs-audss.h>
+#include <mach/sysmmu.h>
+#include <mach/exynos-clock.h>
+#include <mach/clock-domain.h>
+
+#ifdef CONFIG_PM
+static struct sleep_save exynos5_clock_save[] = {
+	/* CMU side */
+	SAVE_ITEM(EXYNOS5_CLKSRC_MASK_TOP),
+	SAVE_ITEM(EXYNOS5_CLKSRC_MASK_GSCL),
+	SAVE_ITEM(EXYNOS5_CLKSRC_MASK_DISP1_0),
+	SAVE_ITEM(EXYNOS5_CLKSRC_MASK_FSYS),
+	SAVE_ITEM(EXYNOS5_CLKSRC_MASK_MAUDIO),
+	SAVE_ITEM(EXYNOS5_CLKSRC_MASK_PERIC0),
+	SAVE_ITEM(EXYNOS5_CLKSRC_MASK_PERIC1),
+	SAVE_ITEM(EXYNOS5_CLKSRC_MASK_ISP),
+	SAVE_ITEM(EXYNOS5_CLKGATE_IP_SYSRGT),
+	SAVE_ITEM(EXYNOS5_CLKGATE_IP_ACP),
+	SAVE_ITEM(EXYNOS5_CLKGATE_ISP0),
+	SAVE_ITEM(EXYNOS5_CLKGATE_ISP1),
+	SAVE_ITEM(EXYNOS5_CLKGATE_SCLK_ISP),
+	SAVE_ITEM(EXYNOS5_CLKGATE_IP_GSCL),
+	SAVE_ITEM(EXYNOS5_CLKGATE_IP_DISP1),
+	SAVE_ITEM(EXYNOS5_CLKGATE_IP_MFC),
+	SAVE_ITEM(EXYNOS5_CLKGATE_IP_G3D),
+	SAVE_ITEM(EXYNOS5_CLKGATE_IP_GEN),
+	SAVE_ITEM(EXYNOS5_CLKGATE_IP_FSYS),
+	SAVE_ITEM(EXYNOS5_CLKGATE_IP_PERIC),
+	SAVE_ITEM(EXYNOS5_CLKGATE_IP_PERIS),
+	SAVE_ITEM(EXYNOS5_CLKGATE_IP_CDREX),
+	SAVE_ITEM(EXYNOS5_CLKGATE_BLOCK),
+	SAVE_ITEM(EXYNOS5_CLKDIV_ACP),
+	SAVE_ITEM(EXYNOS5_CLKDIV_ISP0),
+	SAVE_ITEM(EXYNOS5_CLKDIV_ISP1),
+	SAVE_ITEM(EXYNOS5_CLKDIV_ISP2),
+	SAVE_ITEM(EXYNOS5_CLKDIV_TOP0),
+	SAVE_ITEM(EXYNOS5_CLKDIV_TOP1),
+	SAVE_ITEM(EXYNOS5_CLKDIV_GSCL),
+	SAVE_ITEM(EXYNOS5_CLKDIV_DISP1_0),
+	SAVE_ITEM(EXYNOS5_CLKDIV_GEN),
+	SAVE_ITEM(EXYNOS5_CLKDIV_MAUDIO),
+	SAVE_ITEM(EXYNOS5_CLKDIV_FSYS0),
+	SAVE_ITEM(EXYNOS5_CLKDIV_FSYS1),
+	SAVE_ITEM(EXYNOS5_CLKDIV_FSYS2),
+	SAVE_ITEM(EXYNOS5_CLKDIV_FSYS3),
+	SAVE_ITEM(EXYNOS5_CLKDIV_PERIC0),
+	SAVE_ITEM(EXYNOS5_CLKDIV_PERIC1),
+	SAVE_ITEM(EXYNOS5_CLKDIV_PERIC2),
+	SAVE_ITEM(EXYNOS5_CLKDIV_PERIC3),
+	SAVE_ITEM(EXYNOS5_CLKDIV_PERIC4),
+	SAVE_ITEM(EXYNOS5_CLKDIV_PERIC5),
+	SAVE_ITEM(EXYNOS5_SCLK_DIV_ISP),
+	SAVE_ITEM(EXYNOS5_CLKDIV2_RATIO0),
+	SAVE_ITEM(EXYNOS5_CLKDIV2_RATIO1),
+	SAVE_ITEM(EXYNOS5_CLKDIV4_RATIO),
+	SAVE_ITEM(EXYNOS5_CLKSRC_TOP0),
+	SAVE_ITEM(EXYNOS5_CLKSRC_TOP1),
+	SAVE_ITEM(EXYNOS5_CLKSRC_TOP2),
+	SAVE_ITEM(EXYNOS5_CLKSRC_TOP3),
+	SAVE_ITEM(EXYNOS5_CLKSRC_GSCL),
+	SAVE_ITEM(EXYNOS5_CLKSRC_DISP1_0),
+	SAVE_ITEM(EXYNOS5_CLKSRC_MAUDIO),
+	SAVE_ITEM(EXYNOS5_CLKSRC_FSYS),
+	SAVE_ITEM(EXYNOS5_CLKSRC_PERIC0),
+	SAVE_ITEM(EXYNOS5_CLKSRC_PERIC1),
+	SAVE_ITEM(EXYNOS5_SCLK_SRC_ISP),
+#ifdef CONFIG_EXYNOS5_ENABLE_CLOCK_DOWN
+	SAVE_ITEM(EXYNOS5_PWR_CTRL1),
+	SAVE_ITEM(EXYNOS5_PWR_CTRL2),
+#endif
+};
+
+static struct sleep_save exynos5_epll_save[] = {
+	SAVE_ITEM(EXYNOS5_EPLL_LOCK),
+	SAVE_ITEM(EXYNOS5_EPLL_CON0),
+	SAVE_ITEM(EXYNOS5_EPLL_CON1),
+	SAVE_ITEM(EXYNOS5_EPLL_CON2),
+};
+
+static struct sleep_save exynos5_vpll_save[] = {
+	SAVE_ITEM(EXYNOS5_VPLL_LOCK),
+	SAVE_ITEM(EXYNOS5_VPLL_CON0),
+	SAVE_ITEM(EXYNOS5_VPLL_CON1),
+	SAVE_ITEM(EXYNOS5_VPLL_CON2),
+#ifdef CONFIG_EXYNOS5_ENABLE_CLOCK_DOWN
+	SAVE_ITEM(EXYNOS5_PWR_CTRL1),
+	SAVE_ITEM(EXYNOS5_PWR_CTRL2),
+#endif
+};
+
+static struct sleep_save exynos5_gpll_save[] = {
+	SAVE_ITEM(EXYNOS5_GPLL_LOCK),
+	SAVE_ITEM(EXYNOS5_GPLL_CON0),
+	SAVE_ITEM(EXYNOS5_GPLL_CON1),
+};
+
+static struct sleep_save exynos5250_clock_save_rev0[] = {
+	SAVE_ITEM(EXYNOS5_CLKGATE_IP_GPS),
+};
+
+#endif
+
+static struct clk exynos5_clk_sclk_hdmi24m = {
+	.name		= "sclk_hdmi24m",
+	.rate		= 24000000,
+};
+
+static struct clk exynos5_clk_sclk_hdmi27m = {
+	.name		= "sclk_hdmi27m",
+	.rate		= 27000000,
+};
+
+static struct clk exynos5_clk_sclk_hdmiphy = {
+	.name		= "sclk_hdmiphy",
+};
+
+static struct clk exynos5_clk_sclk_dptxphy = {
+	.name		= "sclk_dptx",
+};
+
+static struct clk exynos5_clk_sclk_usbphy = {
+	.name		= "sclk_usbphy",
+	.rate		= 48000000,
+};
+
+struct clksrc_clk exynos5_clk_audiocdclk0 = {
+	.clk	= {
+		.name		= "audiocdclk",
+		.rate		= 16934400,
+	},
+};
+
+static struct clk exynos5_clk_audiocdclk1 = {
+	.name           = "audiocdclk",
+};
+
+static struct clk exynos5_clk_audiocdclk2 = {
+	.name		= "audiocdclk",
+};
+
+static struct clk exynos5_clk_spdifcdclk = {
+	.name		= "spdifcdclk",
+};
+
+static int exynos5_clksrc_mask_top_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKSRC_MASK_TOP, clk, enable);
+}
+
+static int exynos5_clk_ip_core_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKGATE_IP_CORE, clk, enable);
+}
+
+static int exynos5_clk_ip_sysrgt_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKGATE_IP_SYSRGT, clk, enable);
+}
+
+static int exynos5_clk_ip_cpu_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKGATE_IP_CPU, clk, enable);
+}
+
+static int exynos5_clk_ip_gps_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKGATE_IP_GPS, clk, enable);
+}
+
+static int exynos5_clk_ip_peric_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKGATE_IP_PERIC, clk, enable);
+}
+
+static int exynos5_clk_ip_peris_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKGATE_IP_PERIS, clk, enable);
+}
+
+static int exynos5_clksrc_mask_peric0_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKSRC_MASK_PERIC0, clk, enable);
+}
+
+static int exynos5_clksrc_mask_peric1_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKSRC_MASK_PERIC1, clk, enable);
+}
+
+static int exynos5_clksrc_mask_fsys_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKSRC_MASK_FSYS, clk, enable);
+}
+
+static int exynos5_clk_ip_fsys_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKGATE_IP_FSYS, clk, enable);
+}
+
+static int exynos5_clk_ip_disp1_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKGATE_IP_DISP1, clk, enable);
+}
+
+static int exynos5_clk_ip_mfc_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKGATE_IP_MFC, clk, enable);
+}
+
+static int exynos5_clk_ip_g3d_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKGATE_IP_G3D, clk, enable);
+}
+
+static int exynos5_clk_hdmiphy_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(S5P_HDMI_PHY_CONTROL, clk, enable);
+}
+
+static int exynos5_clk_ip_gen_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKGATE_IP_GEN, clk, enable);
+}
+
+static int exynos5_clksrc_mask_disp1_0_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKSRC_MASK_DISP1_0, clk, enable);
+}
+
+static int exynos5_clksrc_mask_maudio_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKSRC_MASK_MAUDIO, clk, enable);
+}
+
+static int exynos5_clk_audss_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(S5P_CLKGATE_AUDSS, clk, enable);
+}
+
+static int exynos5_clk_ip_gscl_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKGATE_IP_GSCL, clk, enable);
+}
+
+static int exynos5_clksrc_mask_gscl_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKSRC_MASK_GSCL, clk, enable);
+}
+
+static int exynos5_clksrc_mask_gen_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKSRC_MASK_GEN, clk, enable);
+}
+
+static int exynos5_clk_gate_block(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKGATE_BLOCK, clk, enable);
+}
+
+static int exynos5_clk_ip_acp_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKGATE_IP_ACP, clk, enable);
+}
+
+static int exynos5_clk_ip_isp0_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKGATE_ISP0, clk, enable);
+}
+
+static int exynos5_clk_ip_isp1_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKGATE_ISP1, clk, enable);
+}
+
+static int exynos5_clk_clkout_cpu_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKOUT_CMU_CPU, clk, enable);
+}
+
+static int exynos5_clk_clkout_core_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKOUT_CMU_CORE, clk, enable);
+}
+
+static int exynos5_clk_clkout_acp_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKOUT_CMU_ACP, clk, enable);
+}
+
+static int exynos5_clk_clkout_isp_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKOUT_CMU_ISP, clk, enable);
+}
+
+static int exynos5_clk_clkout_top_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKOUT_CMU_TOP, clk, enable);
+}
+
+static int exynos5_clk_clkout_lex_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKOUT_CMU_LEX, clk, enable);
+}
+
+static int exynos5_clk_clkout_r0x_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKOUT_CMU_R0X, clk, enable);
+}
+
+static int exynos5_clk_clkout_r1x_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKOUT_CMU_R1X, clk, enable);
+}
+
+static int exynos5_clk_clkout_cdrex_ctrl(struct clk *clk, int enable)
+{
+	return s5p_gatectrl(EXYNOS5_CLKOUT_CMU_CDREX, clk, enable);
+}
+
+/* BPLL clock output
+ * No need .ctrlbit, this is always on
+*/
+static struct clk clk_fout_bpll = {
+	.name		= "fout_bpll",
+	.id		= -1,
+};
+
+/* MOUT_BPLL_FOUT
+ * No need .ctrlbit, this is always on
+*/
+static struct clk clk_fout_bpll_div2 = {
+	.name		= "fout_bpll_div2",
+	.id		= -1,
+};
+
+/* MOUT_MPLL_FOUT
+ * No need .ctrlbit, this is always on
+*/
+static struct clk clk_fout_mpll_div2 = {
+	.name		= "fout_mpll_div2",
+	.id		= -1,
+};
+
+/* Possible clock sources for BPLL Mux */
+static struct clk *clk_src_bpll_list[] = {
+	[0] = &clk_fin_bpll,
+	[1] = &clk_fout_bpll,
+};
+
+static struct clksrc_sources clk_src_bpll = {
+	.sources	= clk_src_bpll_list,
+	.nr_sources	= ARRAY_SIZE(clk_src_bpll_list),
+};
+
+/* Possible clock source for BPLL_FOUT Mux */
+static struct clk *exynos5_clkset_mout_bpll_fout_list[] = {
+	[0] = &clk_fout_bpll_div2,
+	[1] = &clk_fout_bpll,
+};
+
+static struct clksrc_sources exynos5_clkset_mout_bpll_fout = {
+	.sources	= exynos5_clkset_mout_bpll_fout_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_mout_bpll_fout_list),
+};
+
+/* GPLL clock output */
+static struct clk clk_fout_gpll = {
+	.name		= "fout_gpll",
+	.id		= -1,
+};
+
+/* Possible clock sources for GPLL Mux */
+static struct clk *clk_src_gpll_list[] = {
+	[0] = &clk_fin_gpll,
+	[1] = &clk_fout_gpll,
+};
+
+static struct clksrc_sources clk_src_gpll = {
+	.sources	= clk_src_gpll_list,
+	.nr_sources	= ARRAY_SIZE(clk_src_gpll_list),
+};
+
+/* CPLL clock output */
+static struct clk clk_fout_cpll = {
+	.name		= "fout_cpll",
+	.id		= -1,
+};
+
+/* Possible clock sources for CPLL Mux */
+static struct clk *clk_src_cpll_list[] = {
+	[0] = &clk_fin_cpll,
+	[1] = &clk_fout_cpll,
+};
+
+static struct clksrc_sources clk_src_cpll = {
+	.sources	= clk_src_cpll_list,
+	.nr_sources	= ARRAY_SIZE(clk_src_cpll_list),
+};
+
+/* Possible clock source for MPLL_FOUT Mux */
+static struct clk *exynos5_clkset_mout_mpll_fout_list[] = {
+	[0] = &clk_fout_mpll_div2,
+	[1] = &clk_fout_mpll,
+};
+
+static struct clksrc_sources exynos5_clkset_mout_mpll_fout = {
+	.sources	= exynos5_clkset_mout_mpll_fout_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_mout_mpll_fout_list),
+};
+
+static struct clksrc_clk exynos5_clk_mout_mpll_fout = {
+	.clk	= {
+		.name		= "mout_mpll_fout",
+	},
+	.sources = &exynos5_clkset_mout_mpll_fout,
+	.reg_src = { .reg = EXYNOS5_PLL_DIV2_SEL, .shift = 4, .size = 1 },
+};
+
+/* Possible clock source for MPLL Mux */
+static struct clk *exynos5_clkset_mout_mpll_list[] = {
+	[0] = &clk_fin_mpll,
+	[1] = &exynos5_clk_mout_mpll_fout.clk,
+};
+
+static struct clksrc_sources exynos5_clkset_mout_mpll = {
+	.sources	= exynos5_clkset_mout_mpll_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_mout_mpll_list),
+};
+
+static struct clksrc_clk exynos5_clk_mout_bpll_fout = {
+	.clk	= {
+		.name		= "mout_bpll_fout",
+	},
+	.sources = &exynos5_clkset_mout_bpll_fout,
+	.reg_src = { .reg = EXYNOS5_PLL_DIV2_SEL, .shift = 0, .size = 1 },
+};
+
+/* Possible clock source for BPLL Mux */
+static struct clk *exynos5_clkset_mout_bpll_list[] = {
+	[0] = &clk_fin_bpll,
+	[1] = &exynos5_clk_mout_bpll_fout.clk,
+};
+
+static struct clksrc_sources exynos5_clkset_mout_bpll = {
+	.sources	= exynos5_clkset_mout_bpll_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_mout_bpll_list),
+};
+
+/* Core list of CMU_CPU side */
+static struct clksrc_clk exynos5_clk_mout_apll = {
+	.clk	= {
+		.name		= "mout_apll",
+	},
+	.sources = &clk_src_apll,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_CPU, .shift = 0, .size = 1 },
+};
+
+static struct clksrc_clk exynos5_clk_sclk_apll = {
+	.clk	= {
+		.name		= "sclk_apll",
+		.parent		= &exynos5_clk_mout_apll.clk,
+	},
+	.reg_div = { .reg = EXYNOS5_CLKDIV_CPU0, .shift = 24, .size = 3 },
+};
+
+static struct clksrc_clk exynos5_clk_mout_bpll = {
+	.clk	= {
+		.name		= "mout_bpll",
+	},
+	.sources = &clk_src_bpll,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_CDREX, .shift = 0, .size = 1 },
+};
+
+static struct clksrc_clk exynos5_clk_mout_gpll = {
+	.clk	= {
+		.name		= "mout_gpll",
+	},
+	.sources = &clk_src_gpll,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP2, .shift = 24, .size = 1 },
+};
+
+static struct clksrc_clk exynos5_clk_mout_cpll = {
+	.clk	= {
+		.name		= "mout_cpll",
+	},
+	.sources = &clk_src_cpll,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP2, .shift = 8, .size = 1 },
+};
+
+static struct clksrc_clk exynos5_clk_mout_epll = {
+	.clk	= {
+		.name		= "mout_epll",
+	},
+	.sources = &clk_src_epll,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP2, .shift = 12, .size = 1 },
+};
+
+struct clksrc_clk exynos5_clk_mout_mpll = {
+	.clk = {
+		.name		= "mout_mpll",
+	},
+	.sources = &clk_src_mpll,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_CORE1, .shift = 8, .size = 1 },
+};
+
+/* CMU_ACP */
+static struct clksrc_clk exynos5_clk_aclk_acp = {
+	.clk    = {
+		.name		= "aclk_acp",
+		.parent		= &exynos5_clk_mout_mpll.clk,
+	},
+	.reg_div = { .reg = EXYNOS5_CLKDIV_ACP, .shift = 0, .size = 3 },
+};
+
+static struct clksrc_clk exynos5_clk_pclk_acp = {
+	.clk    = {
+		.name		= "pclk_acp",
+		.parent		= &exynos5_clk_aclk_acp.clk,
+	},
+	.reg_div = { .reg = EXYNOS5_CLKDIV_ACP, .shift = 4, .size = 3 },
+};
+
+/* For VPLL */
+static struct clk *exynos5_clkset_mout_vpllsrc_list[] = {
+	[0] = &clk_fin_vpll,
+	[1] = &exynos5_clk_sclk_hdmi27m,
+};
+
+static struct clksrc_sources exynos5_clkset_mout_vpllsrc = {
+	.sources	= exynos5_clkset_mout_vpllsrc_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_mout_vpllsrc_list),
+};
+
+static struct clksrc_clk exynos5_clk_mout_vpllsrc = {
+	.clk	= {
+		.name		= "vpll_src",
+		.enable		= exynos5_clksrc_mask_top_ctrl,
+		.ctrlbit	= (1 << 0),
+	},
+	.sources = &exynos5_clkset_mout_vpllsrc,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP2, .shift = 0, .size = 1 },
+};
+
+static struct clk *exynos5_clkset_sclk_vpll_list[] = {
+	[0] = &exynos5_clk_mout_vpllsrc.clk,
+	[1] = &clk_fout_vpll,
+};
+
+static struct clksrc_sources exynos5_clkset_sclk_vpll = {
+	.sources	= exynos5_clkset_sclk_vpll_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_sclk_vpll_list),
+};
+
+static struct clksrc_clk exynos5_clk_sclk_vpll = {
+	.clk	= {
+		.name		= "sclk_vpll",
+	},
+	.sources = &exynos5_clkset_sclk_vpll,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP2, .shift = 16, .size = 1 },
+};
+
+static struct clksrc_clk exynos5_clk_sclk_pixel = {
+	.clk	= {
+		.name		= "sclk_pixel",
+		.parent		= &exynos5_clk_sclk_vpll.clk,
+	},
+	.reg_div = { .reg = EXYNOS5_CLKDIV_DISP1_0, .shift = 28, .size = 4 },
+};
+
+static struct clk *exynos5_clkset_sclk_hdmi_list[] = {
+	[0] = &exynos5_clk_sclk_pixel.clk,
+	[1] = &exynos5_clk_sclk_hdmiphy,
+};
+
+static struct clksrc_sources exynos5_clkset_sclk_hdmi = {
+	.sources	= exynos5_clkset_sclk_hdmi_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_sclk_hdmi_list),
+};
+
+static struct clksrc_clk exynos5_clk_sclk_hdmi = {
+	.clk	= {
+		.name           = "sclk_hdmi",
+		.enable		= exynos5_clksrc_mask_disp1_0_ctrl,
+		.ctrlbit	= (1 << 20),
+	},
+	.sources = &exynos5_clkset_sclk_hdmi,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_DISP1_0, .shift = 20, .size = 1 },
+};
+
+static struct clk *exynos5_clkset_sclk_cec_list[] = {
+	[0] = &exynos5_clk_sclk_pixel.clk,
+	[1] = &exynos5_clk_sclk_hdmiphy,
+};
+
+static struct clksrc_sources exynos5_clkset_sclk_cec = {
+	.sources	= exynos5_clkset_sclk_cec_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_sclk_cec_list),
+};
+
+static struct clksrc_clk exynos5_clk_sclk_cec = {
+	.clk	= {
+		.name           = "sclk_cec",
+		.enable		= exynos5_clksrc_mask_disp1_0_ctrl,
+		.ctrlbit	= (1 << 20),
+	},
+	.sources = &exynos5_clkset_sclk_cec,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_DISP1_0, .shift = 20, .size = 1 },
+};
+
+static struct clksrc_clk *exynos5_sclk_tv[] = {
+	&exynos5_clk_sclk_pixel,
+	&exynos5_clk_sclk_hdmi,
+	&exynos5_clk_sclk_cec,
+};
+
+/* BPLL USER */
+static struct clk *exynos5_clk_src_bpll_user_list[] = {
+	[0] = &clk_fin_mpll,
+	[1] = &exynos5_clk_mout_bpll.clk,
+};
+
+static struct clksrc_sources exynos5_clk_src_bpll_user = {
+	.sources	= exynos5_clk_src_bpll_user_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clk_src_bpll_user_list),
+};
+
+static struct clksrc_clk exynos5_clk_mout_bpll_user = {
+	.clk	= {
+		.name		= "mout_bpll_user",
+	},
+	.sources = &exynos5_clk_src_bpll_user,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP2, .shift = 24, .size = 1 },
+};
+
+/* MPLL USER */
+static struct clk *exynos5_clk_src_mpll_user_list[] = {
+	[0] = &clk_fin_mpll,
+	[1] = &exynos5_clk_mout_mpll.clk,
+};
+
+static struct clksrc_sources exynos5_clk_src_mpll_user = {
+	.sources	= exynos5_clk_src_mpll_user_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clk_src_mpll_user_list),
+};
+
+static struct clksrc_clk exynos5_clk_mout_mpll_user = {
+	.clk	= {
+		.name		= "mout_mpll_user",
+	},
+	.sources = &exynos5_clk_src_mpll_user,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP2, .shift = 20, .size = 1 },
+};
+
+static struct clk *exynos5_clkset_mout_cpu_list[] = {
+	[0] = &exynos5_clk_mout_apll.clk,
+	[1] = &exynos5_clk_mout_mpll.clk,
+};
+
+static struct clksrc_sources exynos5_clkset_mout_cpu = {
+	.sources	= exynos5_clkset_mout_cpu_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_mout_cpu_list),
+};
+
+static struct clksrc_clk exynos5_clk_mout_cpu = {
+	.clk	= {
+		.name		= "moutcpu",
+	},
+	.sources = &exynos5_clkset_mout_cpu,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_CPU, .shift = 16, .size = 1 },
+};
+
+static struct clksrc_clk exynos5_clk_dout_armclk = {
+	.clk	= {
+		.name		= "dout_arm_clk",
+		.parent		= &exynos5_clk_mout_cpu.clk,
+	},
+	.reg_div = { .reg = EXYNOS5_CLKDIV_CPU0, .shift = 0, .size = 3 },
+};
+
+static struct clksrc_clk exynos5_clk_dout_arm2clk = {
+	.clk	= {
+		.name		= "dout_arm_clk",
+		.parent		= &exynos5_clk_dout_armclk.clk,
+	},
+	.reg_div = { .reg = EXYNOS5_CLKDIV_CPU0, .shift = 28, .size = 3 },
+};
+
+static struct clk exynos5_clk_armclk = {
+	.name		= "armclk",
+	.parent		= &exynos5_clk_dout_arm2clk.clk,
+};
+
+/* Core list of CMU_CDREX side */
+
+static struct clk *exynos5_clkset_cdrex_list[] = {
+	[0] = &exynos5_clk_mout_mpll.clk,
+	[1] = &exynos5_clk_mout_bpll.clk,
+};
+
+static struct clksrc_sources exynos5_clkset_mclk_cdrex = {
+	.sources	= exynos5_clkset_cdrex_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_cdrex_list),
+};
+
+static struct clksrc_clk exynos5_clk_mclk_cdrex = {
+	.clk	= {
+		.name		= "mclk_cdrex",
+	},
+	.sources = &exynos5_clkset_mclk_cdrex,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_CDREX, .shift = 8, .size = 1 },
+	.reg_div = { .reg = EXYNOS5_CLKDIV_CDREX, .shift = 28, .size = 3 },
+};
+
+/* Core list of CMU_TOP side */
+
+struct clk *exynos5_clkset_aclk_top_list[] = {
+	[0] = &exynos5_clk_mout_mpll_user.clk,
+	[1] = &exynos5_clk_mout_bpll_user.clk,
+};
+
+struct clksrc_sources exynos5_clkset_aclk = {
+	.sources	= exynos5_clkset_aclk_top_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_aclk_top_list),
+};
+
+/* For ACLK_400_G3D_MID */
+static struct clksrc_clk exynos5_clk_aclk_400_g3d_mid = {
+	.clk	= {
+		.name		= "aclk_400_g3d_mid",
+	},
+	.sources = &exynos5_clkset_aclk,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP0, .shift = 20, .size = 1 },
+};
+
+/* For ACLK_400_G3D */
+struct clk *exynos5_clkset_aclk_g3d_list[] = {
+	[0] = &exynos5_clk_aclk_400_g3d_mid.clk,
+	[1] = &exynos5_clk_mout_gpll.clk,
+};
+
+struct clksrc_sources exynos5_clkset_aclk_g3d = {
+	.sources	= exynos5_clkset_aclk_g3d_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_aclk_g3d_list),
+};
+
+static struct clksrc_clk exynos5_clk_aclk_400 = {
+	.clk	= {
+		.name		= "aclk_400",
+	},
+	.sources = &exynos5_clkset_aclk,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP1, .shift = 28, .size = 1 },
+	.reg_div = { .reg = EXYNOS5_CLKDIV_TOP0, .shift = 24, .size = 3 },
+};
+
+/* For ACLK_333 */
+struct clk *exynos5_clkset_mout_aclk_333_166_list[] = {
+	[0] = &exynos5_clk_mout_cpll.clk,
+	[1] = &exynos5_clk_mout_mpll_user.clk,
+};
+
+struct clksrc_sources exynos5_clkset_mout_aclk_333_166 = {
+	.sources	= exynos5_clkset_mout_aclk_333_166_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_mout_aclk_333_166_list),
+};
+
+static struct clksrc_clk exynos5_clk_mout_aclk_333 = {
+	.clk	= {
+		.name		= "mout_aclk_333",
+	},
+	.sources = &exynos5_clkset_mout_aclk_333_166,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP0, .shift = 16, .size = 1 },
+};
+
+static struct clksrc_clk exynos5_clk_dout_aclk_333 = {
+	.clk	= {
+		.name		= "dout_aclk_333",
+		.parent		= &exynos5_clk_mout_aclk_333.clk,
+	},
+	.reg_div = { .reg = EXYNOS5_CLKDIV_TOP0, .shift = 20, .size = 3 },
+};
+
+struct clk *exynos5_clkset_aclk_333_sub_list[] = {
+	[0] = &clk_ext_xtal_mux,
+	[1] = &exynos5_clk_dout_aclk_333.clk,
+};
+
+struct clksrc_sources exynos5_clkset_aclk_333_sub = {
+	.sources	= exynos5_clkset_aclk_333_sub_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_aclk_333_sub_list),
+};
+
+static struct clksrc_clk exynos5_clk_aclk_333 = {
+	.clk	= {
+		.name		= "aclk_333",
+	},
+	.sources = &exynos5_clkset_aclk_333_sub,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP3, .shift = 24, .size = 1 },
+};
+
+/* For ACLK_300_disp1_mid */
+static struct clksrc_clk exynos5_clk_mout_aclk_300_disp1_mid = {
+	.clk	= {
+		.name		= "mout_aclk_300_disp1_mid",
+	},
+	.sources = &exynos5_clkset_aclk,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP0, .shift = 14, .size = 1 },
+};
+
+static struct clk *clk_src_mid1_list[] = {
+	[0] = &exynos5_clk_sclk_vpll.clk,
+	[1] = &exynos5_clk_mout_cpll.clk,
+};
+
+static struct clksrc_sources exynos5_clkset_mid1 = {
+	.sources	= clk_src_mid1_list,
+	.nr_sources	= ARRAY_SIZE(clk_src_mid1_list),
+};
+
+/* For ACLK_300_disp1_mid1 */
+static struct clksrc_clk exynos5_clk_mout_aclk_300_disp1_mid1 = {
+	.clk	= {
+		.name		= "mout_aclk_300_disp1_mid1",
+	},
+	.sources = &exynos5_clkset_mid1,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP1, .shift = 8, .size = 1 },
+};
+
+/* For ACLK_300_disp1 */
+struct clk *exynos5_clkset_mout_aclk_300_disp1_list[] = {
+	[0] = &exynos5_clk_mout_aclk_300_disp1_mid.clk,
+	[1] = &exynos5_clk_sclk_vpll.clk,
+};
+
+struct clksrc_sources exynos5_clkset_mout_aclk_300_disp1 = {
+	.sources	= exynos5_clkset_mout_aclk_300_disp1_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_mout_aclk_300_disp1_list),
+};
+
+struct clk *exynos5_clkset_mout_aclk_300_disp1_rev1_list[] = {
+	[0] = &exynos5_clk_mout_aclk_300_disp1_mid.clk,
+	[1] = &exynos5_clk_mout_aclk_300_disp1_mid1.clk,
+};
+
+struct clksrc_sources exynos5_clkset_mout_aclk_300_disp1_rev1 = {
+	.sources	= exynos5_clkset_mout_aclk_300_disp1_rev1_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_mout_aclk_300_disp1_rev1_list),
+};
+
+static struct clksrc_clk exynos5_clk_mout_aclk_300_disp1 = {
+	.clk	= {
+		.name		= "mout_aclk_300_disp1",
+	},
+	.sources = &exynos5_clkset_mout_aclk_300_disp1,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP0, .shift = 15, .size = 1 },
+};
+
+static struct clksrc_clk exynos5_clk_dout_aclk_300_disp1 = {
+	.clk	= {
+		.name		= "dout_aclk_300_disp1",
+		.parent		= &exynos5_clk_mout_aclk_300_disp1.clk,
+	},
+	.reg_div = { .reg = EXYNOS5_CLKDIV_TOP0, .shift = 28, .size = 3 },
+};
+
+static struct clk *clk_src_aclk_300_disp1_list[] = {
+	[0] = &clk_ext_xtal_mux,
+	[1] = &exynos5_clk_dout_aclk_300_disp1.clk,
+};
+
+static struct clksrc_sources exynos5_clkset_aclk_300_disp1 = {
+	.sources	= clk_src_aclk_300_disp1_list,
+	.nr_sources	= ARRAY_SIZE(clk_src_aclk_300_disp1_list),
+};
+
+static struct clksrc_clk exynos5_clk_aclk_300_disp1 = {
+	.clk	= {
+		.name		= "aclk_300_disp1",
+	},
+	.sources = &exynos5_clkset_aclk_300_disp1,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP3, .shift = 6, .size = 1 },
+};
+
+/* For ACLK_300_gscl_mid */
+static struct clksrc_clk exynos5_clk_mout_aclk_300_gscl_mid = {
+	.clk	= {
+		.name		= "mout_aclk_300_gscl_mid",
+	},
+	.sources = &exynos5_clkset_aclk,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP0, .shift = 24, .size = 1 },
+};
+
+/* For ACLK_300_gscl_mid1 */
+static struct clksrc_clk exynos5_clk_mout_aclk_300_gscl_mid1 = {
+	.clk	= {
+		.name		= "mout_aclk_300_gscl_mid1",
+	},
+	.sources = &exynos5_clkset_mid1,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP1, .shift = 12, .size = 1 },
+};
+
+/* For ACLK_300_gscl */
+struct clk *exynos5_clkset_aclk_300_gscl_list[] = {
+	[0] = &exynos5_clk_mout_aclk_300_gscl_mid.clk,
+	[1] = &exynos5_clk_sclk_vpll.clk,
+};
+
+struct clksrc_sources exynos5_clkset_aclk_300_gscl = {
+	.sources	= exynos5_clkset_aclk_300_gscl_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_aclk_300_gscl_list),
+};
+
+struct clk *exynos5_clkset_aclk_300_gscl_rev1_list[] = {
+	[0] = &exynos5_clk_mout_aclk_300_gscl_mid.clk,
+	[1] = &exynos5_clk_mout_aclk_300_gscl_mid1.clk,
+};
+
+struct clksrc_sources exynos5_clkset_aclk_300_gscl_rev1 = {
+	.sources	= exynos5_clkset_aclk_300_gscl_rev1_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_aclk_300_gscl_rev1_list),
+};
+
+static struct clksrc_clk exynos5_clk_mout_aclk_300_gscl = {
+	.clk	= {
+		.name		= "mout_aclk_300_gscl",
+	},
+	.sources = &exynos5_clkset_aclk_300_gscl,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP0, .shift = 25, .size = 1 },
+};
+
+static struct clksrc_clk exynos5_clk_dout_aclk_300_gscl = {
+	.clk	= {
+		.name		= "dout_aclk_300_gscl",
+		.parent		= &exynos5_clk_mout_aclk_300_gscl.clk,
+	},
+	.reg_div = { .reg = EXYNOS5_CLKDIV_TOP1, .shift = 12, .size = 3 },
+};
+
+/* Possible clock sources for aclk_300_gscl_sub Mux */
+static struct clk *clk_src_gscl_300_list[] = {
+	[0] = &clk_ext_xtal_mux,
+	[1] = &exynos5_clk_dout_aclk_300_gscl.clk,
+};
+
+static struct clksrc_sources clk_src_gscl_300 = {
+	.sources	= clk_src_gscl_300_list,
+	.nr_sources	= ARRAY_SIZE(clk_src_gscl_300_list),
+};
+
+static struct clksrc_clk exynos5_clk_aclk_300_gscl = {
+	.clk	= {
+		.name		= "aclk_300_gscl",
+	},
+	.sources = &clk_src_gscl_300,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP3, .shift = 10, .size = 1 },
+};
+
+/* For ACLK_266 */
+static struct clksrc_clk exynos5_clk_aclk_266 = {
+	.clk	= {
+		.name		= "aclk_266",
+		.parent		= &exynos5_clk_mout_mpll_user.clk,
+	},
+	.reg_div = { .reg = EXYNOS5_CLKDIV_TOP0, .shift = 16, .size = 3 },
+};
+
+/* For ACLK_200 */
+static struct clksrc_clk exynos5_clk_aclk_200 = {
+	.clk	= {
+		.name		= "aclk_200",
+	},
+	.sources = &exynos5_clkset_aclk,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP0, .shift = 12, .size = 1 },
+	.reg_div = { .reg = EXYNOS5_CLKDIV_TOP0, .shift = 12, .size = 3 },
+};
+
+/* For ACLK_166 */
+static struct clksrc_clk exynos5_clk_aclk_166 = {
+	.clk	= {
+		.name		= "aclk_166",
+	},
+	.sources = &exynos5_clkset_mout_aclk_333_166,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP0, .shift = 8, .size = 1 },
+	.reg_div = { .reg = EXYNOS5_CLKDIV_TOP0, .shift = 8, .size = 3 },
+};
+
+/* For ACLK_66 */
+static struct clksrc_clk exynos5_clk_dout_aclk_66_pre = {
+	.clk	= {
+		.name		= "aclk_66_pre",
+		.parent		= &exynos5_clk_mout_mpll_user.clk,
+	},
+	.reg_div = { .reg = EXYNOS5_CLKDIV_TOP1, .shift = 24, .size = 3 },
+};
+
+static struct clksrc_clk exynos5_clk_aclk_66 = {
+	.clk	= {
+		.name		= "aclk_66",
+		.parent		= &exynos5_clk_dout_aclk_66_pre.clk,
+	},
+	.reg_div = { .reg = EXYNOS5_CLKDIV_TOP0, .shift = 0, .size = 3 },
+};
+
+static struct clk *clk_src_aclk_200_disp1_list[] = {
+	[0] = &clk_ext_xtal_mux,
+	[1] = &exynos5_clk_aclk_200.clk,
+};
+
+static struct clksrc_sources exynos5_clkset_aclk_200_disp1 = {
+	.sources	= clk_src_aclk_200_disp1_list,
+	.nr_sources	= ARRAY_SIZE(clk_src_aclk_200_disp1_list),
+};
+
+static struct clksrc_clk exynos5_clk_aclk_200_disp1 = {
+	.clk	= {
+		.name		= "aclk_200_disp1",
+	},
+	.sources = &exynos5_clkset_aclk_200_disp1,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP3, .shift = 4, .size = 1 },
+};
+
+static struct clk exynos5_init_clocks[] = {
+	{
+		.name		= "uart",
+		.devname	= "s5pv210-uart.0",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 0),
+	}, {
+		.name		= "uart",
+		.devname	= "s5pv210-uart.1",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 1),
+	}, {
+		.name		= "uart",
+		.devname	= "s5pv210-uart.2",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 2),
+	}, {
+		.name		= "uart",
+		.devname	= "s5pv210-uart.3",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 3),
+	}, {
+		.name		= "uart",
+		.devname	= "s5pv210-uart.4",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 4),
+	}, {
+		.name		= "uart",
+		.devname	= "s5pv210-uart.5",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 5),
+	},
+};
+
+
+/* TN Feature.. these clocks was enabled at booloader */
+
+static struct clk exynos5_init_clock_on[] = {
+	{
+		.name		= "timers",
+		.parent		= &exynos5_clk_aclk_66.clk,
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1<<24),
+	}, {
+		.name		= "lcd",
+		.devname	= "s3cfb.1",
+		.enable		= exynos5_clk_ip_disp1_ctrl,
+		.ctrlbit	= ((0x7 << 10) | (1 << 0)),
+	}, {
+		.name		= "dp",
+		.devname	= "s5p-dp",
+		.enable		= exynos5_clk_ip_disp1_ctrl,
+		.ctrlbit	= (1 << 4),
+	},
+};
+
+static struct clk exynos5_init_clocks_off[] = {
+	 {
+		.name		= "watchdog",
+		.enable		= exynos5_clk_ip_peris_ctrl,
+		.ctrlbit	= (1 << 19),
+	}, {
+		.name		= "hdmicec",
+		.enable		= exynos5_clk_ip_peris_ctrl,
+		.ctrlbit	= (1 << 16),
+	}, {
+		.name		= "rtc",
+		.parent		= &exynos5_clk_aclk_66.clk,
+		.enable		= exynos5_clk_ip_peris_ctrl,
+		.ctrlbit	= (1<<20),
+	}, {
+		.name		= "hsmmc",
+		.devname	= "s3c-sdhci.0",
+		.parent		= &exynos5_clk_aclk_200.clk,
+		.enable		= exynos5_clk_ip_fsys_ctrl,
+		.ctrlbit	= (1 << 12),
+	}, {
+		.name		= "hsmmc",
+		.devname	= "s3c-sdhci.1",
+		.parent		= &exynos5_clk_aclk_200.clk,
+		.enable		= exynos5_clk_ip_fsys_ctrl,
+		.ctrlbit	= (1 << 13),
+	}, {
+		.name		= "hsmmc",
+		.devname	= "s3c-sdhci.2",
+		.parent		= &exynos5_clk_aclk_200.clk,
+		.enable		= exynos5_clk_ip_fsys_ctrl,
+		.ctrlbit	= (1 << 14),
+	}, {
+		.name		= "hsmmc",
+		.devname	= "s3c-sdhci.3",
+		.parent		= &exynos5_clk_aclk_200.clk,
+		.enable		= exynos5_clk_ip_fsys_ctrl,
+		.ctrlbit	= (1 << 15),
+	}, {
+		.name		= "dwmci",
+		.parent		= &exynos5_clk_aclk_200.clk,
+		.enable		= exynos5_clk_ip_fsys_ctrl,
+		.ctrlbit	= (1 << 16),
+	}, {
+		.name		= "sata",
+		.devname	= "ahci",
+		.enable		= exynos5_clk_ip_fsys_ctrl,
+		.ctrlbit	= (1 << 6),
+	}, {
+		.name		= "sata_phy",
+		.enable		= exynos5_clk_ip_fsys_ctrl,
+		.ctrlbit	= (1 << 24),
+	}, {
+		.name		= "sata_phy_i2c",
+		.enable		= exynos5_clk_ip_fsys_ctrl,
+		.ctrlbit	= (1 << 25),
+	}, {
+		.name		= "usbdrd30",
+		.parent		= &exynos5_clk_aclk_200.clk,
+		.enable		= exynos5_clk_ip_fsys_ctrl,
+		.ctrlbit	= (1 << 19),
+	}, {
+		.name		= "mfc",
+		.devname	= "s3c-mfc",
+		.enable		= exynos5_clk_ip_mfc_ctrl,
+		.ctrlbit	= ((1 << 4) | (1 << 3) | (1 << 0)),
+	}, {
+		.name		= "g3d",
+		.enable		= exynos5_clk_ip_g3d_ctrl,
+		.ctrlbit	= ((1 << 1) | (1 << 0)),
+	}, {
+		.name		= "g3d",
+		.enable		= exynos5_clk_ip_g3d_ctrl,
+		.ctrlbit	= ((1 << 1) | (1 << 0)),
+	}, {
+		.name		= "isp0",
+		.devname	= "exynos5-fimc-is",
+		.enable		= exynos5_clk_ip_isp0_ctrl,
+		.ctrlbit	= (0xDFFFC0FF << 0),
+	}, {
+		.name		= "isp1",
+		.devname	= "exynos5-fimc-is",
+		.enable		= exynos5_clk_ip_isp1_ctrl,
+		.ctrlbit	= (0x3F07 << 0),
+	}, {
+		.name		= "hdmi",
+		.devname	= "exynos5-hdmi",
+		.enable		= exynos5_clk_ip_disp1_ctrl,
+		.ctrlbit	= (1 << 6),
+	}, {
+		.name		= "mixer",
+		.devname	= "s5p-mixer",
+		.enable		= exynos5_clk_ip_disp1_ctrl,
+		.ctrlbit	= ((0x3 << 13) | (1 << 5)),
+	}, {
+		.name       = "hdmiphy",
+		.devname	= "exynos5-hdmi",
+		.enable     = exynos5_clk_hdmiphy_ctrl,
+		.ctrlbit    = (1 << 0),
+	}, {
+		.name		= "gscl",
+		.devname	= "exynos-gsc.0",
+		.enable		= exynos5_clk_ip_gscl_ctrl,
+		.ctrlbit	= ((1 << 15) | (1 << 0)),
+	}, {
+		.name		= "gscl",
+		.devname	= "exynos-gsc.1",
+		.enable		= exynos5_clk_ip_gscl_ctrl,
+		.ctrlbit	= ((1 << 16) | (1 << 1)),
+	}, {
+		.name		= "gscl",
+		.devname	= "exynos-gsc.2",
+		.enable		= exynos5_clk_ip_gscl_ctrl,
+		.ctrlbit	= ((1 << 17) | (1 << 2)),
+	}, {
+		.name		= "gscl",
+		.devname	= "exynos-gsc.3",
+		.enable		= exynos5_clk_ip_gscl_ctrl,
+		.ctrlbit	= ((1 << 18) | (1 << 3)),
+	}, {
+		.name		= "camif_top",
+		.enable		= exynos5_clk_ip_gscl_ctrl,
+		.ctrlbit	= (1 << 4),
+	}, {
+		.name		= "gscl_wrap0",
+		.devname	= "s5p-mipi-csis.0",
+		.enable		= exynos5_clk_ip_gscl_ctrl,
+		.ctrlbit	= (1 << 5),
+	}, {
+		.name		= "gscl_wrap1",
+		.devname	= "s5p-mipi-csis.1",
+		.enable		= exynos5_clk_ip_gscl_ctrl,
+		.ctrlbit	= (1 << 6),
+	}, {
+		.name		= "rotator",
+		.devname	= "exynos-rot",
+		.enable		= exynos5_clk_ip_gen_ctrl,
+		.ctrlbit	= ((1 << 11) | (1 << 1)),
+	}, {
+		.name		= "jpeg",
+		.enable		= exynos5_clk_ip_gen_ctrl,
+		.ctrlbit	= ((1 << 12) | (1 << 2)),
+	}, {
+		.name		= "dsim0",
+		.enable		= exynos5_clk_ip_disp1_ctrl,
+		.ctrlbit	= (1 << 3),
+	}, {
+		.name		= "iis",
+		.devname	= "samsung-i2s.1",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 20),
+	}, {
+		.name		= "iis",
+		.devname	= "samsung-i2s.2",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 21),
+	}, {
+		.name		= "pcm",
+		.devname	= "samsung-pcm.1",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 22),
+	}, {
+		.name		= "pcm",
+		.devname	= "samsung-pcm.2",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 23),
+	}, {
+		.name		= "spdif",
+		.devname	= "samsung-spdif",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 26),
+	}, {
+		.name		= "ac97",
+		.devname	= "samsung-ac97",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 27),
+	}, {
+		.name		= SYSMMU_CLOCK_NAME,
+		.devname	= SYSMMU_CLOCK_DEVNAME(mfc_lr, 0),
+		.enable		= &exynos5_clk_ip_mfc_ctrl,
+		.ctrlbit	= (3 << 1),
+	}, {
+		.name		= SYSMMU_CLOCK_NAME,
+		.devname	= SYSMMU_CLOCK_DEVNAME(tv, 2),
+		.enable		= &exynos5_clk_ip_disp1_ctrl,
+		.ctrlbit	= (1 << 9)
+	}, {
+		.name		= SYSMMU_CLOCK_NAME,
+		.devname	= SYSMMU_CLOCK_DEVNAME(jpeg, 3),
+		.enable		= &exynos5_clk_ip_gen_ctrl,
+		.ctrlbit	= (1 << 7),
+	}, {
+		.name		= SYSMMU_CLOCK_NAME,
+		.devname	= SYSMMU_CLOCK_DEVNAME(rot, 4),
+		.enable		= &exynos5_clk_ip_gen_ctrl,
+		.ctrlbit	= (1 << 6)
+	}, {
+		.name		= SYSMMU_CLOCK_NAME,
+		.devname	= SYSMMU_CLOCK_DEVNAME(gsc0, 5),
+		.enable		= &exynos5_clk_ip_gscl_ctrl,
+		.ctrlbit	= (1 << 7),
+	}, {
+		.name		= SYSMMU_CLOCK_NAME,
+		.devname	= SYSMMU_CLOCK_DEVNAME(gsc1, 6),
+		.enable		= &exynos5_clk_ip_gscl_ctrl,
+		.ctrlbit	= (1 << 8),
+	}, {
+		.name		= SYSMMU_CLOCK_NAME,
+		.devname	= SYSMMU_CLOCK_DEVNAME(gsc2, 7),
+		.enable		= &exynos5_clk_ip_gscl_ctrl,
+		.ctrlbit	= (1 << 9),
+	}, {
+		.name		= SYSMMU_CLOCK_NAME,
+		.devname	= SYSMMU_CLOCK_DEVNAME(gsc3, 8),
+		.enable		= &exynos5_clk_ip_gscl_ctrl,
+		.ctrlbit	= (1 << 10),
+	}, {
+		.name		= SYSMMU_CLOCK_NAME,
+		.devname	= SYSMMU_CLOCK_DEVNAME(isp, 9),
+		.enable		= &exynos5_clk_ip_isp0_ctrl,
+		.ctrlbit	= (0x3F << 8),
+	}, {
+		.name		= SYSMMU_CLOCK_NAME2,
+		.devname	= SYSMMU_CLOCK_DEVNAME(isp, 9),
+		.enable		= &exynos5_clk_ip_isp1_ctrl,
+		.ctrlbit	= (0xF << 4),
+	}, {
+		.name		= SYSMMU_CLOCK_NAME,
+		.devname	= SYSMMU_CLOCK_DEVNAME(camif0, 12),
+		.enable		= &exynos5_clk_ip_gscl_ctrl,
+		.ctrlbit	= (1 << 11),
+	}, {
+		.name		= SYSMMU_CLOCK_NAME,
+		.devname	= SYSMMU_CLOCK_DEVNAME(camif1, 13),
+		.enable		= &exynos5_clk_ip_gscl_ctrl,
+		.ctrlbit	= (1 << 12),
+	}, {
+		.name		= SYSMMU_CLOCK_NAME,
+		.devname	= SYSMMU_CLOCK_DEVNAME(camif2, 14),
+		.enable		= &exynos5_clk_ip_gscl_ctrl,
+		.ctrlbit	= (1 << 20),
+	}, {
+		.name		= SYSMMU_CLOCK_NAME,
+		.devname	= SYSMMU_CLOCK_DEVNAME(2d, 15),
+		.enable		= &exynos5_clk_ip_acp_ctrl,
+		.ctrlbit	= (1 << 7)
+	}, {
+		.name		= "usbhost",
+		.enable		= exynos5_clk_ip_fsys_ctrl ,
+		.ctrlbit	= (1 << 18),
+	}, {
+		.name		= "usbotg",
+		.enable		= exynos5_clk_ip_fsys_ctrl,
+		.ctrlbit	= (1 << 7),
+	}, {
+		.name		= "fimg2d",
+		.devname	= "s5p-fimg2d",
+		.enable		= exynos5_clk_ip_acp_ctrl,
+		.ctrlbit	= (1 << 3),
+	}, {
+		.name		= "gps",
+		.enable		= exynos5_clk_ip_gps_ctrl,
+		.ctrlbit	= ((1 << 3) | (1 << 2) | (1 << 1) | (1 << 0)),
+	}, {
+		.name		= "nfcon",
+		.enable		= exynos5_clk_ip_fsys_ctrl,
+		.ctrlbit	= (1 << 22),
+	},
+#ifdef CONFIG_CPU_EXYNOS5250
+	{
+		.name		= "iop",
+		.enable		= exynos5_clk_ip_fsys_ctrl,
+		.ctrlbit	= ((1 << 30) | (1 << 26) | (1 << 23)),
+	}, {
+		.name		= "core_iop",
+		.enable		= exynos5_clk_ip_core_ctrl,
+		.ctrlbit	= ((1 << 21) | (1 << 3)),
+	}, {
+		.name		= "mcu_iop",
+		.enable		= exynos5_clk_ip_fsys_ctrl,
+		.ctrlbit	= (1 << 0),
+	}, {
+		.name		= "adc",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 15),
+	}, {
+		.name		= "spi",
+		.devname	= "s3c64xx-spi.0",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 16),
+	}, {
+		.name		= "spi",
+		.devname	= "s3c64xx-spi.1",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 17),
+	}, {
+		.name		= "spi",
+		.devname	= "s3c64xx-spi.2",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 18),
+	},
+#endif
+	{
+		.name		= "ppmufsys",
+		.enable		= exynos5_clk_ip_fsys_ctrl,
+		.ctrlbit	= ((1 << 29) | (1 << 28)),
+	}, {
+		.name		= "ppmudisp1",
+		.enable		= exynos5_clk_ip_disp1_ctrl,
+		.ctrlbit	= ((1 << 17) | (1 << 18)),
+	}, {
+		.name		= "ppmumfc",
+		.enable		= exynos5_clk_ip_mfc_ctrl,
+		.ctrlbit	= ((1 << 5) | (1 << 6)),
+	}, {
+		.name		= "ppmug3d",
+		.enable		= exynos5_clk_ip_g3d_ctrl,
+		.ctrlbit	= (1 << 2),
+	}, {
+		.name		= "ppmugen",
+		.enable		= exynos5_clk_ip_gen_ctrl,
+		.ctrlbit	= (1 << 15),
+	}, {
+		.name		= "ppmugscl",
+		.enable		= exynos5_clk_ip_gscl_ctrl,
+		.ctrlbit	= (1 << 19),
+	}, {
+		.name		= "acp",
+		.enable		= exynos5_clk_ip_acp_ctrl,
+		.ctrlbit	= (1 << 11),
+	}, {
+		.name		= "rtic",
+		.enable		= exynos5_clk_ip_fsys_ctrl,
+		.ctrlbit	= ((1 << 11) | (1 << 9)),
+	}, {
+		.name		= "disp1",
+		.enable		= exynos5_clk_ip_disp1_ctrl,
+		.ctrlbit	= (1 << 8),
+	}, {
+		.name		= "gscl",
+		.enable		= exynos5_clk_ip_gscl_ctrl,
+		.ctrlbit	= ((0xF << 11) | (1 << 19)),
+	}, {
+		.name		= "secss",
+		.parent		= &exynos5_clk_aclk_acp.clk,
+		.enable		= exynos5_clk_ip_acp_ctrl,
+		.ctrlbit	= (1 << 2),
+	}, {
+		.name		= "sromc",
+		.enable		= exynos5_clk_ip_fsys_ctrl ,
+		.ctrlbit	= (1 << 17),
+	}, {
+		.name		= "mipi-hsi",
+		.enable		= exynos5_clk_ip_fsys_ctrl ,
+		.ctrlbit	= (1 << 8),
+	}, {
+		.name		= "mie",
+		.enable		= exynos5_clk_ip_disp1_ctrl ,
+		.ctrlbit	= (1 << 1),
+	}, {
+		.name		= "clkout_cpu",
+		.enable		= exynos5_clk_clkout_cpu_ctrl,
+		.ctrlbit	= (1 << 16),
+	}, {
+		.name		= "clkout_core",
+		.enable		= exynos5_clk_clkout_core_ctrl,
+		.ctrlbit	= (1 << 16),
+	}, {
+		.name		= "clkout_acp",
+		.enable		= exynos5_clk_clkout_acp_ctrl,
+		.ctrlbit	= (1 << 16),
+	}, {
+		.name		= "clkout_isp",
+		.enable		= exynos5_clk_clkout_isp_ctrl,
+		.ctrlbit	= (1 << 16),
+	}, {
+		.name		= "clkout_top",
+		.enable		= exynos5_clk_clkout_top_ctrl,
+		.ctrlbit	= (1 << 16),
+	}, {
+		.name		= "clkout_lex",
+		.enable		= exynos5_clk_clkout_lex_ctrl,
+		.ctrlbit	= (1 << 16),
+	}, {
+		.name		= "clkout_r0x",
+		.enable		= exynos5_clk_clkout_r0x_ctrl,
+		.ctrlbit	= (1 << 16),
+	}, {
+		.name		= "clkout_r1x",
+		.enable		= exynos5_clk_clkout_r1x_ctrl,
+		.ctrlbit	= (1 << 16),
+	}, {
+		.name		= "clkout_cdrex",
+		.enable		= exynos5_clk_clkout_cdrex_ctrl,
+		.ctrlbit	= (1 << 16),
+	}
+};
+
+static struct clk exynos5_i2cs_clocks[] = {
+	{
+		.name		= "i2c",
+		.devname	= "s3c2440-i2c.0",
+		.parent		= &exynos5_clk_aclk_66.clk,
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 6),
+	}, {
+		.name		= "i2c",
+		.devname	= "s3c2440-i2c.1",
+		.parent		= &exynos5_clk_aclk_66.clk,
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 7),
+	}, {
+		.name		= "i2c",
+		.devname	= "s3c2440-i2c.2",
+		.parent		= &exynos5_clk_aclk_66.clk,
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 8),
+	}, {
+		.name		= "i2c",
+		.devname	= "s3c2440-i2c.3",
+		.parent		= &exynos5_clk_aclk_66.clk,
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 9),
+	}, {
+		.name		= "i2c",
+		.devname	= "s3c2440-i2c.4",
+		.parent		= &exynos5_clk_aclk_66.clk,
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 10),
+	}, {
+		.name		= "i2c",
+		.devname	= "s3c2440-i2c.5",
+		.parent		= &exynos5_clk_aclk_66.clk,
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 11),
+	}, {
+		.name		= "i2c",
+		.devname	= "s3c2440-i2c.6",
+		.parent		= &exynos5_clk_aclk_66.clk,
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 12),
+	}, {
+		.name		= "i2c",
+		.devname	= "s3c2440-i2c.7",
+		.parent		= &exynos5_clk_aclk_66.clk,
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 13),
+	}, {
+		.name		= "i2c",
+		.devname	= "s3c2440-hdmiphy-i2c",
+		.parent		= &exynos5_clk_aclk_66.clk,
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 14),
+	}
+};
+
+struct clk exynos5_uis_clocks[] = {
+	{
+		.name		= "uis",
+		.devname	= "s3c2440-uis.0",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 28),
+	}, {
+		.name		= "uis",
+		.devname	= "exynos-uis.1",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 29),
+	}, {
+		.name		= "uis",
+		.devname	= "exynos-uis.2",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 30),
+	}, {
+		.name		= "uis",
+		.devname	= "exynos-uis.3",
+		.enable		= exynos5_clk_ip_peric_ctrl,
+		.ctrlbit	= (1 << 31),
+	},
+};
+
+struct clk exynos5_init_dmaclocks[] = {
+	{
+		.name		= "pdma",
+		.devname	= "s3c-pl330.0",
+		.enable		= exynos5_clk_ip_gen_ctrl,
+		.ctrlbit	= ((1 << 4) | (1 << 14)),
+	}, {
+		.name		= "pdma",
+		.devname	= "s3c-pl330.1",
+		.enable		= exynos5_clk_ip_fsys_ctrl,
+		.ctrlbit	= (1 << 1),
+	}, {
+		.name		= "pdma",
+		.devname	= "s3c-pl330.2",
+		.enable		= exynos5_clk_ip_fsys_ctrl,
+		.ctrlbit	= (1 << 2),
+	}, {
+		.name		= "pdma",
+		.enable		= exynos5_clk_ip_acp_ctrl,
+		.ctrlbit	= ((1 << 1) | (1 << 8)),
+	},
+};
+
+#ifndef CONFIG_SAMSUNG_C2C
+struct clk exynos5_c2c_clock = {
+	.name		= "c2c",
+	.devname	= "samsung-c2c",
+	.enable		= exynos5_clk_ip_cpu_ctrl,
+	.ctrlbit	= (0x3f << 11),
+};
+#endif
+
+static struct clk *clkset_sclk_audio0_list[] = {
+	[0] = &exynos5_clk_audiocdclk0.clk,
+	[1] = &clk_ext_xtal_mux,
+	[2] = &exynos5_clk_sclk_hdmi27m,
+	[3] = &exynos5_clk_sclk_dptxphy,
+	[4] = &exynos5_clk_sclk_usbphy,
+	[5] = &exynos5_clk_sclk_hdmiphy,
+	[6] = &exynos5_clk_mout_mpll.clk,
+	[7] = &exynos5_clk_mout_epll.clk,
+	[8] = &exynos5_clk_sclk_vpll.clk,
+	[9] = &exynos5_clk_mout_cpll.clk,
+};
+
+static struct clksrc_sources exynos5_clkset_sclk_audio0 = {
+	.sources	= clkset_sclk_audio0_list,
+	.nr_sources	= ARRAY_SIZE(clkset_sclk_audio0_list),
+};
+
+static struct clksrc_clk exynos5_clk_sclk_audio0 = {
+	.clk	= {
+		.name		= "audio-bus",
+		.enable		= exynos5_clksrc_mask_maudio_ctrl,
+		.ctrlbit	= (1 << 0),
+	},
+	.sources = &exynos5_clkset_sclk_audio0,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_MAUDIO, .shift = 0, .size = 4 },
+	.reg_div = { .reg = EXYNOS5_CLKDIV_MAUDIO, .shift = 0, .size = 4 },
+};
+
+static struct clk *exynos5_clkset_mout_audss_list[] = {
+	&clk_ext_xtal_mux,
+	&clk_fout_epll,
+};
+
+static struct clksrc_sources clkset_mout_audss = {
+	.sources	= exynos5_clkset_mout_audss_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_mout_audss_list),
+};
+
+static struct clksrc_clk exynos5_clk_mout_audss = {
+	.clk	= {
+		.name		= "mout_audss",
+	},
+	.sources = &clkset_mout_audss,
+	.reg_src = { .reg = S5P_CLKSRC_AUDSS, .shift = 0, .size = 1 },
+};
+
+static struct clk *exynos5_clkset_sclk_audss_list[] = {
+	&exynos5_clk_mout_audss.clk,
+	&exynos5_clk_audiocdclk0.clk,
+	&exynos5_clk_sclk_audio0.clk,
+};
+
+static struct clksrc_sources exynos5_clkset_sclk_audss = {
+	.sources	= exynos5_clkset_sclk_audss_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_sclk_audss_list),
+};
+
+static struct clksrc_clk exynos5_clk_sclk_audss_i2s = {
+	.clk		= {
+		.name		= "i2sclk",
+		.enable		= exynos5_clk_audss_ctrl,
+		.ctrlbit	= S5P_AUDSS_CLKGATE_I2SSPECIAL,
+	},
+	.sources = &exynos5_clkset_sclk_audss,
+	.reg_src = { .reg = S5P_CLKSRC_AUDSS, .shift = 2, .size = 2 },
+	.reg_div = { .reg = S5P_CLKDIV_AUDSS, .shift = 8, .size = 4 },
+};
+
+static struct clksrc_clk exynos5_clk_dout_audss_srp = {
+	.clk	= {
+		.name		= "dout_srp",
+		.parent		= &exynos5_clk_mout_audss.clk,
+	},
+	.reg_div = { .reg = S5P_CLKDIV_AUDSS, .shift = 0, .size = 4 },
+};
+
+static struct clksrc_clk exynos5_clk_sclk_audss_bus = {
+	.clk	= {
+		.name		= "busclk",
+		.parent		= &exynos5_clk_dout_audss_srp.clk,
+		.enable		= exynos5_clk_audss_ctrl,
+		.ctrlbit	= S5P_AUDSS_CLKGATE_I2SBUS,
+	},
+	.reg_div = { .reg = S5P_CLKDIV_AUDSS, .shift = 4, .size = 4 },
+};
+
+static struct clk exynos5_init_audss_clocks[] = {
+	{
+		.name		= "srpclk",
+		.parent		= &exynos5_clk_dout_audss_srp.clk,
+		.enable		= exynos5_clk_audss_ctrl,
+		.ctrlbit	= S5P_AUDSS_CLKGATE_RP | S5P_AUDSS_CLKGATE_UART
+				| S5P_AUDSS_CLKGATE_TIMER,
+	}, {
+		.name		= "iis",
+		.devname	= "samsung-i2s.0",
+		.enable		= exynos5_clk_audss_ctrl,
+		.ctrlbit	= S5P_AUDSS_CLKGATE_I2SSPECIAL |
+					S5P_AUDSS_CLKGATE_I2SBUS,
+	}, {
+		.name		= "pcm",
+		.devname	= "samsung-pcm.0",
+		.enable		= exynos5_clk_audss_ctrl,
+		.ctrlbit	= S5P_AUDSS_CLKGATE_PCMSPECIAL |
+					S5P_AUDSS_CLKGATE_PCMBUS,
+	},
+};
+
+static struct clk *exynos5_clkset_sclk_audio1_list[] = {
+	[0] = &exynos5_clk_audiocdclk1,
+	[1] = &clk_ext_xtal_mux,
+	[2] = &exynos5_clk_sclk_hdmi27m,
+	[3] = &exynos5_clk_sclk_dptxphy,
+	[4] = &exynos5_clk_sclk_usbphy,
+	[5] = &exynos5_clk_sclk_hdmiphy,
+	[6] = &exynos5_clk_mout_mpll.clk,
+	[7] = &exynos5_clk_mout_epll.clk,
+	[8] = &exynos5_clk_sclk_vpll.clk,
+	[9] = &exynos5_clk_mout_cpll.clk,
+};
+
+static struct clksrc_sources exynos5_clkset_sclk_audio1 = {
+	.sources	= exynos5_clkset_sclk_audio1_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_sclk_audio1_list),
+};
+
+static struct clksrc_clk exynos5_clk_sclk_audio1 = {
+	.clk	= {
+		.name		= "audio-bus1",
+		.enable		= exynos5_clksrc_mask_peric1_ctrl,
+		.ctrlbit	= (1 << 0),
+	},
+	.sources = &exynos5_clkset_sclk_audio1,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_PERIC1, .shift = 0, .size = 4 },
+	.reg_div = { .reg = EXYNOS5_CLKDIV_PERIC4, .shift = 0, .size = 4 },
+};
+
+static struct clk *exynos5_clkset_sclk_audio2_list[] = {
+	[0] = &exynos5_clk_audiocdclk2,
+	[1] = &clk_ext_xtal_mux,
+	[2] = &exynos5_clk_sclk_hdmi27m,
+	[3] = &exynos5_clk_sclk_dptxphy,
+	[4] = &exynos5_clk_sclk_usbphy,
+	[5] = &exynos5_clk_sclk_hdmiphy,
+	[6] = &exynos5_clk_mout_mpll.clk,
+	[7] = &exynos5_clk_mout_epll.clk,
+	[8] = &exynos5_clk_sclk_vpll.clk,
+	[9] = &exynos5_clk_mout_cpll.clk,
+};
+
+static struct clksrc_sources exynos5_clkset_sclk_audio2 = {
+	.sources	= exynos5_clkset_sclk_audio2_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_sclk_audio2_list),
+};
+
+static struct clksrc_clk exynos5_clk_sclk_audio2 = {
+	.clk	= {
+		.name		= "audio-bus2",
+		.enable		= exynos5_clksrc_mask_peric1_ctrl,
+		.ctrlbit	= (1 << 4),
+	},
+	.sources = &exynos5_clkset_sclk_audio2,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_PERIC1, .shift = 4, .size = 4 },
+	.reg_div = { .reg = EXYNOS5_CLKDIV_PERIC4, .shift = 16, .size = 4 },
+};
+
+static struct clk *exynos5_clkset_sclk_spdif_list[] = {
+	[0] = &exynos5_clk_sclk_audio0.clk,
+	[1] = &exynos5_clk_sclk_audio1.clk,
+	[2] = &exynos5_clk_sclk_audio2.clk,
+	[3] = &exynos5_clk_spdifcdclk,
+};
+
+static struct clksrc_sources exynos5_clkset_sclk_spdif = {
+	.sources	= exynos5_clkset_sclk_spdif_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_sclk_spdif_list),
+};
+
+static struct clksrc_clk exynos5_clk_sclk_spdif = {
+	.clk	= {
+		.name		= "sclk_spdif",
+		.enable		= exynos5_clksrc_mask_peric1_ctrl,
+		.ctrlbit	= (1 << 8),
+		.ops		= &s5p_sclk_spdif_ops,
+	},
+	.sources = &exynos5_clkset_sclk_spdif,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_PERIC1, .shift = 8, .size = 2 },
+};
+
+struct clk *exynos5_clkset_usbdrd30_list[] = {
+	[0] = &exynos5_clk_mout_mpll.clk,
+	[1] = &exynos5_clk_mout_cpll.clk,
+};
+
+struct clksrc_sources exynos5_clkset_usbdrd30 = {
+	.sources	= exynos5_clkset_usbdrd30_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_usbdrd30_list),
+};
+
+struct clk *exynos5_clkset_group_list[] = {
+	[0] = &clk_ext_xtal_mux,
+	[1] = NULL,
+	[2] = &exynos5_clk_sclk_hdmi24m,
+	[3] = &exynos5_clk_sclk_dptxphy,
+	[4] = &exynos5_clk_sclk_usbphy,
+	[5] = &exynos5_clk_sclk_hdmiphy,
+	[6] = &exynos5_clk_mout_mpll_user.clk,
+	[7] = &exynos5_clk_mout_epll.clk,
+	[8] = &exynos5_clk_sclk_vpll.clk,
+	[9] = &exynos5_clk_mout_cpll.clk,
+};
+
+struct clksrc_sources exynos5_clkset_group = {
+	.sources	= exynos5_clkset_group_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_group_list),
+};
+
+/* Possible clock sources for aclk_266_gscl_sub Mux */
+static struct clk *clk_src_gscl_266_list[] = {
+	[0] = &clk_ext_xtal_mux,
+	[1] = &exynos5_clk_aclk_266.clk,
+};
+
+static struct clksrc_sources clk_src_gscl_266 = {
+	.sources	= clk_src_gscl_266_list,
+	.nr_sources	= ARRAY_SIZE(clk_src_gscl_266_list),
+};
+
+/* For ACLK_400_ISP */
+static struct clksrc_clk exynos5_clk_mout_aclk_400_isp = {
+	.clk    = {
+		.name	= "mout_aclk_400_isp",
+	},
+	.sources = &exynos5_clkset_aclk,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP1, .shift = 24, .size = 1 },
+};
+
+static struct clksrc_clk exynos5_clk_dout_aclk_400_isp = {
+	.clk	= {
+		.name		= "dout_aclk_400_isp",
+		.parent		= &exynos5_clk_mout_aclk_400_isp.clk,
+	},
+	.reg_div = { .reg = EXYNOS5_CLKDIV_TOP1, .shift = 20, .size = 3 },
+};
+
+static struct clk *exynos5_clkset_aclk_400_isp_list[] = {
+	[0] = &clk_ext_xtal_mux,
+	[1] = &exynos5_clk_dout_aclk_400_isp.clk,
+};
+
+static struct clksrc_sources exynos5_clkset_aclk_400_isp = {
+	.sources	= exynos5_clkset_aclk_400_isp_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_aclk_400_isp_list),
+};
+
+static struct clksrc_clk exynos5_clk_aclk_400_isp = {
+	.clk	= {
+		.name		= "aclk_400_isp",
+	},
+	.sources = &exynos5_clkset_aclk_400_isp,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP3, .shift = 20, .size = 1 },
+};
+
+static struct clksrc_clk exynos5_clk_sclk_uart_isp = {
+	.clk	= {
+		.name		= "sclk_uart_src_isp",
+	},
+	.sources = &exynos5_clkset_group,
+	.reg_src = { .reg = EXYNOS5_SCLK_SRC_ISP, .shift = 8, .size = 4 },
+};
+
+static struct clksrc_clk exynos5_clk_aclk_266_isp = {
+	.clk	= {
+		.name		= "aclk_266_isp",
+
+	},
+	.sources = &clk_src_gscl_266,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_TOP3, .shift = 16, .size = 1 },
+};
+
+static struct clksrc_clk exynos5_clk_sclk_mmc0 = {
+	.clk		= {
+		.name		= "sclk_mmc0",
+	},
+	.sources = &exynos5_clkset_group,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_FSYS, .shift = 0, .size = 4 },
+	.reg_div = { .reg = EXYNOS5_CLKDIV_FSYS1, .shift = 0, .size = 4 },
+};
+
+static struct clksrc_clk exynos5_clk_sclk_mmc1 = {
+	.clk		= {
+		.name		= "sclk_mmc1",
+	},
+	.sources = &exynos5_clkset_group,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_FSYS, .shift = 4, .size = 4 },
+	.reg_div = { .reg = EXYNOS5_CLKDIV_FSYS1, .shift = 16, .size = 4 },
+};
+
+static struct clksrc_clk exynos5_clk_sclk_mmc2 = {
+	.clk		= {
+		.name		= "sclk_mmc2",
+	},
+	.sources = &exynos5_clkset_group,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_FSYS, .shift = 8, .size = 4 },
+	.reg_div = { .reg = EXYNOS5_CLKDIV_FSYS2, .shift = 0, .size = 4 },
+};
+
+static struct clksrc_clk exynos5_clk_sclk_mmc3 = {
+	.clk		= {
+		.name		= "sclk_mmc3",
+	},
+	.sources = &exynos5_clkset_group,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_FSYS, .shift = 12, .size = 4 },
+	.reg_div = { .reg = EXYNOS5_CLKDIV_FSYS2, .shift = 16, .size = 4 },
+};
+
+static struct clksrc_clk exynos5_clk_sclk_mmc4 = {
+	.clk		= {
+		.name		= "sclk_mmc4",
+	},
+	.sources = &exynos5_clkset_group,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_FSYS, .shift = 16, .size = 4 },
+	.reg_div = { .reg = EXYNOS5_CLKDIV_FSYS3, .shift = 0, .size = 4 },
+};
+
+static struct clksrc_clk exynos5_clk_sclk_spi0 = {
+	.clk		= {
+		.name		= "sclk_spi0",
+	},
+	.sources = &exynos5_clkset_group,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_PERIC1, .shift = 16, .size = 4 },
+	.reg_div = { .reg = EXYNOS5_CLKDIV_PERIC1, .shift = 0, .size = 4 },
+};
+
+static struct clksrc_clk exynos5_clk_sclk_spi1 = {
+	.clk		= {
+		.name		= "sclk_spi1",
+	},
+	.sources = &exynos5_clkset_group,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_PERIC1, .shift = 20, .size = 4 },
+	.reg_div = { .reg = EXYNOS5_CLKDIV_PERIC1, .shift = 16, .size = 4 },
+};
+
+static struct clksrc_clk exynos5_clk_sclk_spi2 = {
+	.clk		= {
+		.name		= "sclk_spi2",
+	},
+	.sources = &exynos5_clkset_group,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_PERIC1, .shift = 24, .size = 4 },
+	.reg_div = { .reg = EXYNOS5_CLKDIV_PERIC2, .shift = 0, .size = 4 },
+};
+
+static struct clksrc_clk exynos5_clksrcs[] = {
+	{
+		.clk	= {
+			.name		= "uclk1",
+			.devname	= "s5pv210-uart.0",
+			.enable		= exynos5_clksrc_mask_peric0_ctrl,
+			.ctrlbit	= (1 << 0),
+		},
+		.sources = &exynos5_clkset_group,
+		.reg_src = { .reg = EXYNOS5_CLKSRC_PERIC0,
+				.shift = 0, .size = 4 },
+		.reg_div = { .reg = EXYNOS5_CLKDIV_PERIC0,
+				.shift = 0, .size = 4 },
+	}, {
+		.clk	= {
+			.name		= "uclk1",
+			.devname	= "s5pv210-uart.1",
+			.enable		= exynos5_clksrc_mask_peric0_ctrl,
+			.ctrlbit	= (1 << 4),
+		},
+		.sources = &exynos5_clkset_group,
+		.reg_src = { .reg = EXYNOS5_CLKSRC_PERIC0,
+				.shift = 4, .size = 4 },
+		.reg_div = { .reg = EXYNOS5_CLKDIV_PERIC0,
+				.shift = 4, .size = 4 },
+	}, {
+		.clk	= {
+			.name		= "uclk1",
+			.devname	= "s5pv210-uart.2",
+			.enable		= exynos5_clksrc_mask_peric0_ctrl,
+			.ctrlbit	= (1 << 8),
+		},
+		.sources = &exynos5_clkset_group,
+		.reg_src = { .reg = EXYNOS5_CLKSRC_PERIC0, .shift = 8, .size = 4 },
+		.reg_div = { .reg = EXYNOS5_CLKDIV_PERIC0, .shift = 8, .size = 4 },
+	}, {
+		.clk	= {
+			.name		= "uclk1",
+			.devname	= "s5pv210-uart.3",
+			.enable		= exynos5_clksrc_mask_peric0_ctrl,
+			.ctrlbit	= (1 << 12),
+		},
+		.sources = &exynos5_clkset_group,
+		.reg_src = { .reg = EXYNOS5_CLKSRC_PERIC0, .shift = 12, .size = 4 },
+		.reg_div = { .reg = EXYNOS5_CLKDIV_PERIC0, .shift = 12, .size = 4 },
+	}, {
+		.clk	= {
+			.name		= "sclk_usbdrd30",
+			.enable		= exynos5_clksrc_mask_fsys_ctrl,
+			.ctrlbit	= (1 << 28),
+		},
+		.sources = &exynos5_clkset_usbdrd30,
+		.reg_src = { .reg = EXYNOS5_CLKSRC_FSYS, .shift = 28, .size = 1 },
+		.reg_div = { .reg = EXYNOS5_CLKDIV_FSYS0, .shift = 24, .size = 4 },
+	}, {
+		.clk	= {
+			.name		= "sclk_mmc",
+			.devname	= "s3c-sdhci.0",
+			.parent		= &exynos5_clk_sclk_mmc0.clk,
+			.enable		= exynos5_clksrc_mask_fsys_ctrl,
+			.ctrlbit	= (1 << 0),
+		},
+		.reg_div = { .reg = EXYNOS5_CLKDIV_FSYS1, .shift = 8, .size = 8 },
+	}, {
+		.clk	= {
+			.name		= "sclk_mmc",
+			.devname	= "s3c-sdhci.1",
+			.parent         = &exynos5_clk_sclk_mmc1.clk,
+			.enable		= exynos5_clksrc_mask_fsys_ctrl,
+			.ctrlbit	= (1 << 4),
+		},
+		.reg_div = { .reg = EXYNOS5_CLKDIV_FSYS1, .shift = 24, .size = 8 },
+	}, {
+		.clk	= {
+			.name		= "sclk_mmc",
+			.devname	= "s3c-sdhci.2",
+			.parent         = &exynos5_clk_sclk_mmc2.clk,
+			.enable		= exynos5_clksrc_mask_fsys_ctrl,
+			.ctrlbit	= (1 << 8),
+		},
+		.reg_div = { .reg = EXYNOS5_CLKDIV_FSYS2, .shift = 8, .size = 8 },
+	}, {
+		.clk	= {
+			.name		= "sclk_mmc",
+			.devname	= "s3c-sdhci.3",
+			.parent         = &exynos5_clk_sclk_mmc3.clk,
+			.enable		= exynos5_clksrc_mask_fsys_ctrl,
+			.ctrlbit	= (1 << 12),
+		},
+		.reg_div = { .reg = EXYNOS5_CLKDIV_FSYS2, .shift = 24, .size = 8 },
+	}, {
+		.clk	= {
+			.name		= "sclk_dwmci",
+			.parent         = &exynos5_clk_sclk_mmc4.clk,
+			.enable		= exynos5_clksrc_mask_fsys_ctrl,
+			.ctrlbit	= (1 << 16),
+		},
+		.reg_div = { .reg = EXYNOS5_CLKDIV_FSYS3, .shift = 8, .size = 8 },
+	}, {
+		.clk	= {
+			.name		= "sclk_pcm",
+			.parent		= &exynos5_clk_sclk_audio0.clk,
+		},
+			.reg_div = { .reg = EXYNOS5_CLKDIV_MAUDIO, .shift = 4, .size = 8 },
+	}, {
+		.clk	= {
+			.name		= "sclk_pcm",
+			.parent		= &exynos5_clk_sclk_audio1.clk,
+		},
+			.reg_div = { .reg = EXYNOS5_CLKDIV_PERIC4, .shift = 4, .size = 8 },
+	}, {
+		.clk	= {
+			.name		= "sclk_pcm",
+			.parent		= &exynos5_clk_sclk_audio2.clk,
+		},
+			.reg_div = { .reg = EXYNOS5_CLKDIV_PERIC4, .shift = 20, .size = 8 },
+	}, {
+		.clk	= {
+			.name		= "sclk_i2s",
+			.parent		= &exynos5_clk_sclk_audio1.clk,
+		},
+			.reg_div = { .reg = EXYNOS5_CLKDIV_PERIC5, .shift = 0, .size = 6 },
+	}, {
+		.clk	= {
+			.name		= "sclk_i2s",
+			.parent		= &exynos5_clk_sclk_audio2.clk,
+		},
+			.reg_div = { .reg = EXYNOS5_CLKDIV_PERIC5, .shift = 8, .size = 6 },
+	}, {
+		.clk	= {
+			.name		= "sclk_fimd",
+			.devname	= "s3cfb.1",
+			.enable		= exynos5_clksrc_mask_disp1_0_ctrl,
+			.ctrlbit	= (1 << 0),
+		},
+		.sources = &exynos5_clkset_group,
+		.reg_src = { .reg = EXYNOS5_CLKSRC_DISP1_0, .shift = 0, .size = 4 },
+		.reg_div = { .reg = EXYNOS5_CLKDIV_DISP1_0, .shift = 0, .size = 4 },
+	}, {
+		.clk	= {
+			.name		= "aclk_266_gscl",
+			.parent		= &exynos5_clk_aclk_266.clk,
+		},
+		.sources = &clk_src_gscl_266,
+		.reg_src = { .reg = EXYNOS5_CLKSRC_TOP3, .shift = 8, .size = 1 },
+	}, {
+		.clk	= {
+			.name		= "sclk_g3d",
+			.devname	= "mali-t604.0",
+			.enable		= exynos5_clk_gate_block,
+			.ctrlbit	= (1 << 1),
+		},
+		.sources = &exynos5_clkset_aclk,
+		.reg_src = { .reg = EXYNOS5_CLKSRC_TOP0, .shift = 20, .size = 1 },
+		.reg_div = { .reg = EXYNOS5_CLKDIV_TOP0, .shift = 24, .size = 3 },
+	}, {
+		.clk	= {
+			.name           = "sclk_sata",
+			.devname        = "ahci",
+			.parent         = &exynos5_clk_mout_mpll_user.clk,
+			.enable		= exynos5_clk_ip_fsys_ctrl,
+			.ctrlbit	= (1 << 24),
+		},
+		.sources = &exynos5_clkset_aclk,
+		.reg_src = { .reg = EXYNOS5_CLKSRC_FSYS, .shift = 24, .size = 1 },
+		.reg_div = { .reg = EXYNOS5_CLKDIV_FSYS0, .shift = 20, .size = 4 },
+	}, {
+		.clk	= {
+			.name		= "sclk_gscl_wrap0",
+			.devname	= "s5p-mipi-csis.0",
+			.enable		= exynos5_clksrc_mask_gscl_ctrl,
+			.ctrlbit	= (1 << 24),
+		},
+		.sources = &exynos5_clkset_group,
+		.reg_src = { .reg = EXYNOS5_CLKSRC_GSCL, .shift = 24, .size = 4 },
+		.reg_div = { .reg = EXYNOS5_CLKDIV_GSCL, .shift = 24, .size = 4 },
+	}, {
+		.clk	= {
+			.name		= "sclk_gscl_wrap1",
+			.devname	= "s5p-mipi-csis.1",
+			.enable		= exynos5_clksrc_mask_gscl_ctrl,
+			.ctrlbit	= (1 << 28),
+		},
+		.sources = &exynos5_clkset_group,
+		.reg_src = { .reg = EXYNOS5_CLKSRC_GSCL, .shift = 28, .size = 4 },
+		.reg_div = { .reg = EXYNOS5_CLKDIV_GSCL, .shift = 28, .size = 4 },
+	}, {
+		.clk	= {
+			.name		= "sclk_cam0",
+			.enable		= exynos5_clksrc_mask_gscl_ctrl,
+			.ctrlbit	= (1 << 16),
+		},
+		.sources = &exynos5_clkset_group,
+		.reg_src = { .reg = EXYNOS5_CLKSRC_GSCL, .shift = 16, .size = 4 },
+		.reg_div = { .reg = EXYNOS5_CLKDIV_GSCL, .shift = 16, .size = 4 },
+	}, {
+		.clk	= {
+			.name		= "sclk_cam1",
+			.enable		= exynos5_clksrc_mask_gscl_ctrl,
+			.ctrlbit	= (1 << 20),
+		},
+		.sources = &exynos5_clkset_group,
+		.reg_src = { .reg = EXYNOS5_CLKSRC_GSCL, .shift = 20, .size = 4 },
+		.reg_div = { .reg = EXYNOS5_CLKDIV_GSCL, .shift = 20, .size = 4 },
+	}, {
+		.clk		= {
+			.name		= "aclk_266_isp_div0",
+			.parent     = &exynos5_clk_aclk_266_isp.clk,
+
+		},
+		.reg_div = { .reg = EXYNOS5_CLKDIV_ISP0, .shift = 0, .size = 3 },
+	}, {
+		.clk		= {
+			.name		= "aclk_266_isp_div1",
+			.parent     = &exynos5_clk_aclk_266_isp.clk,
+		},
+		.reg_div = { .reg = EXYNOS5_CLKDIV_ISP0, .shift = 4, .size = 3 },
+	}, {
+		.clk		= {
+			.name		= "aclk_266_isp_divmpwm",
+			.parent     = &exynos5_clk_aclk_266_isp.clk,
+		},
+		.reg_div = { .reg = EXYNOS5_CLKDIV_ISP2, .shift = 0, .size = 3 },
+	}, {
+		.clk		= {
+			.name		= "aclk_400_isp_div0",
+			.parent     = &exynos5_clk_aclk_400_isp.clk,
+		},
+		.reg_div = { .reg = EXYNOS5_CLKDIV_ISP1, .shift = 0, .size = 3 },
+	}, {
+		.clk		= {
+			.name		= "aclk_400_isp_div1",
+			.parent     = &exynos5_clk_aclk_400_isp.clk,
+		},
+		.reg_div = { .reg = EXYNOS5_CLKDIV_ISP1, .shift = 4, .size = 3 },
+	}, {
+		.clk		= {
+			.name		= "sclk_uart_isp",
+			.parent     = &exynos5_clk_sclk_uart_isp.clk,
+		},
+		.reg_div = { .reg = EXYNOS5_SCLK_DIV_ISP, .shift = 24, .size = 4 },
+	}, {
+		.clk	= {
+			.name		= "sclk_spi",
+			.devname	= "s3c64xx-spi.0",
+			.parent		= &exynos5_clk_sclk_spi0.clk,
+			.enable		= exynos5_clksrc_mask_peric1_ctrl,
+			.ctrlbit	= (1 << 16),
+		},
+		.reg_div = { .reg = EXYNOS5_CLKDIV_PERIC1, .shift = 8, .size = 8 },
+	}, {
+		.clk	= {
+			.name		= "sclk_spi",
+			.devname	= "s3c64xx-spi.1",
+			.parent		= &exynos5_clk_sclk_spi1.clk,
+			.enable		= exynos5_clksrc_mask_peric1_ctrl,
+			.ctrlbit	= (1 << 20),
+		},
+		.reg_div = { .reg = EXYNOS5_CLKDIV_PERIC1, .shift = 24, .size = 8 },
+	}, {
+		.clk	= {
+			.name		= "sclk_spi",
+			.devname	= "s3c64xx-spi.2",
+			.parent		= &exynos5_clk_sclk_spi2.clk,
+			.enable		= exynos5_clksrc_mask_peric1_ctrl,
+			.ctrlbit	= (1 << 24),
+		},
+		.reg_div = { .reg = EXYNOS5_CLKDIV_PERIC2, .shift = 8, .size = 8 },
+	},
+};
+
+static struct clksrc_clk exynos5_clk_sclk_jpeg = {
+	.clk	= {
+		.name		= "sclk_jpeg",
+		.enable		= exynos5_clksrc_mask_gen_ctrl,
+		.ctrlbit	= (1 << 0),
+	},
+	.sources = &exynos5_clkset_group,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_GEN, .shift = 0, .size = 4 },
+	.reg_div = { .reg = EXYNOS5_CLKDIV_GEN, .shift = 4, .size = 4 },
+};
+
+static struct clksrc_clk exynos5_clk_sclk_c2c = {
+	.clk	= {
+		.name		= "sclk_c2c",
+		.id		= -1,
+	},
+	.sources = &exynos5_clkset_mout_mpll,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_CORE1, .shift = 8, .size = 1 },
+	.reg_div = { .reg = EXYNOS5_CLKDIV_SYSRGT, .shift = 4, .size = 3 },
+};
+
+static struct clksrc_clk exynos5_clk_aclk_c2c = {
+	.clk	= {
+		.name		= "aclk_c2c",
+		.id		= -1,
+		.parent		= &exynos5_clk_sclk_c2c.clk,
+	},
+	.reg_div = { .reg = EXYNOS5_CLKDIV_SYSRGT, .shift = 8, .size = 3 },
+};
+
+static struct clk *exynos5_clkset_c2c_list[] = {
+	[0] = &exynos5_clk_mout_mpll.clk,
+	[1] = &exynos5_clk_mout_bpll.clk,
+};
+
+static struct clksrc_sources exynos5_clkset_sclk_c2c = {
+	.sources	= exynos5_clkset_c2c_list,
+	.nr_sources	= ARRAY_SIZE(exynos5_clkset_c2c_list),
+};
+
+static struct clksrc_clk exynos5_clk_sclk_c2c_rev0 = {
+	.clk	= {
+		.name		= "sclk_c2c",
+		.id		= -1,
+	},
+	.sources = &exynos5_clkset_sclk_c2c,
+	.reg_src = { .reg = EXYNOS5_CLKSRC_CDREX, .shift = 12, .size = 1 },
+	.reg_div = { .reg = EXYNOS5_CLKDIV_CDREX, .shift = 8, .size = 3 },
+};
+
+static struct clksrc_clk exynos5_clk_aclk_c2c_rev0 = {
+	.clk	= {
+		.name		= "aclk_c2c",
+		.id		= -1,
+		.parent		= &exynos5_clk_sclk_c2c.clk,
+	},
+	.reg_div = { .reg = EXYNOS5_CLKDIV_CDREX, .shift = 12, .size = 3 },
+};
+
+/* Clock initialization code */
+static struct clksrc_clk *exynos5_sysclks[] = {
+	&exynos5_clk_audiocdclk0,
+	&exynos5_clk_mout_apll,
+	&exynos5_clk_sclk_apll,
+	&exynos5_clk_mout_bpll,
+	&exynos5_clk_mout_bpll_user,
+	&exynos5_clk_mout_gpll,
+	&exynos5_clk_mout_cpll,
+	&exynos5_clk_mout_epll,
+	&exynos5_clk_mout_mpll_fout,
+	&exynos5_clk_mout_bpll_fout,
+	&exynos5_clk_mout_mpll,
+	&exynos5_clk_mout_mpll_user,
+	&exynos5_clk_mout_vpllsrc,
+	&exynos5_clk_sclk_vpll,
+	&exynos5_clk_mout_cpu,
+	&exynos5_clk_dout_armclk,
+	&exynos5_clk_dout_arm2clk,
+	&exynos5_clk_mclk_cdrex,
+	&exynos5_clk_aclk_400,
+	&exynos5_clk_aclk_400_g3d_mid,
+	&exynos5_clk_mout_aclk_333,
+	&exynos5_clk_dout_aclk_333,
+	&exynos5_clk_aclk_333,
+	&exynos5_clk_mout_aclk_300_disp1_mid,
+	&exynos5_clk_mout_aclk_300_disp1_mid1,
+	&exynos5_clk_mout_aclk_300_disp1,
+	&exynos5_clk_dout_aclk_300_disp1,
+	&exynos5_clk_aclk_300_disp1,
+	&exynos5_clk_mout_aclk_300_gscl_mid,
+	&exynos5_clk_mout_aclk_300_gscl_mid1,
+	&exynos5_clk_mout_aclk_300_gscl,
+	&exynos5_clk_dout_aclk_300_gscl,
+	&exynos5_clk_aclk_300_gscl,
+	&exynos5_clk_aclk_266,
+	&exynos5_clk_aclk_200,
+	&exynos5_clk_aclk_166,
+	&exynos5_clk_dout_aclk_66_pre,
+	&exynos5_clk_aclk_200_disp1,
+	&exynos5_clk_mout_aclk_400_isp,
+	&exynos5_clk_dout_aclk_400_isp,
+	&exynos5_clk_aclk_400_isp,
+	&exynos5_clk_aclk_66,
+	&exynos5_clk_sclk_mmc0,
+	&exynos5_clk_sclk_mmc1,
+	&exynos5_clk_sclk_mmc2,
+	&exynos5_clk_sclk_mmc3,
+	&exynos5_clk_sclk_mmc4,
+	&exynos5_clk_mout_audss,
+	&exynos5_clk_sclk_audss_bus,
+	&exynos5_clk_sclk_audss_i2s,
+	&exynos5_clk_dout_audss_srp,
+	&exynos5_clk_sclk_audio0,
+	&exynos5_clk_sclk_audio1,
+	&exynos5_clk_sclk_audio2,
+	&exynos5_clk_sclk_spdif,
+	&exynos5_clk_aclk_acp,
+	&exynos5_clk_pclk_acp,
+	&exynos5_clk_aclk_266_isp,
+	&exynos5_clk_sclk_uart_isp,
+	&exynos5_clk_sclk_c2c,
+	&exynos5_clk_aclk_c2c,
+	&exynos5_clk_sclk_spi0,
+	&exynos5_clk_sclk_spi1,
+	&exynos5_clk_sclk_spi2,
+	&exynos5_clk_sclk_jpeg,
+};
+
+static unsigned long exynos5_epll_get_rate(struct clk *clk)
+{
+	return clk->rate;
+}
+
+static struct clk *exynos5_clks[] __initdata = {
+	&exynos5_clk_sclk_hdmi27m,
+	&exynos5_clk_sclk_hdmiphy,
+	&clk_fout_bpll,
+	&clk_fout_cpll,
+	&clk_fout_mpll_div2,
+	&clk_fout_bpll_div2,
+	&clk_fout_gpll,
+	&exynos5_clk_armclk,
+};
+
+static u32 epll_div[][6] = {
+	{ 192000000, 0, 48, 3, 1, 0 },
+	{ 180000000, 0, 45, 3, 1, 0 },
+	{  73728000, 1, 73, 3, 3, 47710 },
+	{  67737600, 1, 90, 4, 3, 20762 },
+	{  49152000, 0, 49, 3, 3, 9961 },
+	{  45158400, 0, 45, 3, 3, 10381 },
+	{ 180633600, 0, 45, 3, 1, 10381 },
+};
+
+static int exynos5_epll_set_rate(struct clk *clk, unsigned long rate)
+{
+	unsigned int epll_con, epll_con_k;
+	unsigned int i;
+	unsigned int tmp;
+	unsigned int epll_rate;
+	unsigned int locktime;
+	unsigned int lockcnt;
+
+	/* Return if nothing changed */
+	if (clk->rate == rate)
+		return 0;
+
+	if (clk->parent)
+		epll_rate = clk_get_rate(clk->parent);
+	else
+		epll_rate = clk_ext_xtal_mux.rate;
+
+	if (epll_rate != 24000000) {
+		pr_err("Invalid Clock : recommended clock is 24MHz.\n");
+		return -EINVAL;
+	}
+
+	epll_con = __raw_readl(EXYNOS5_EPLL_CON0);
+	epll_con &= ~(0x1 << 27 | \
+			PLL46XX_MDIV_MASK << PLL46XX_MDIV_SHIFT |   \
+			PLL46XX_PDIV_MASK << PLL46XX_PDIV_SHIFT | \
+			PLL46XX_SDIV_MASK << PLL46XX_SDIV_SHIFT);
+
+	for (i = 0; i < ARRAY_SIZE(epll_div); i++) {
+		if (epll_div[i][0] == rate) {
+			epll_con_k = epll_div[i][5] << 0;
+			epll_con |= epll_div[i][1] << 27;
+			epll_con |= epll_div[i][2] << PLL46XX_MDIV_SHIFT;
+			epll_con |= epll_div[i][3] << PLL46XX_PDIV_SHIFT;
+			epll_con |= epll_div[i][4] << PLL46XX_SDIV_SHIFT;
+			break;
+		}
+	}
+
+	if (i == ARRAY_SIZE(epll_div)) {
+		printk(KERN_ERR "%s: Invalid Clock EPLL Frequency\n",
+				__func__);
+		return -EINVAL;
+	}
+
+	epll_rate /= 1000000;
+
+	/* 3000 max_cycls : specification data */
+	locktime = 3000 / epll_rate * epll_div[i][3];
+	lockcnt = locktime * 10000 / (10000 / epll_rate);
+
+	__raw_writel(lockcnt, EXYNOS5_EPLL_LOCK);
+
+	__raw_writel(epll_con, EXYNOS5_EPLL_CON0);
+	__raw_writel(epll_con_k, EXYNOS5_EPLL_CON1);
+
+	do {
+		tmp = __raw_readl(EXYNOS5_EPLL_CON0);
+	} while (!(tmp & 0x1 << EXYNOS5_EPLLCON0_LOCKED_SHIFT));
+
+	clk->rate = rate;
+
+	return 0;
+}
+
+static struct clk_ops exynos5_epll_ops = {
+	.get_rate = exynos5_epll_get_rate,
+	.set_rate = exynos5_epll_set_rate,
+};
+
+static int xtal_rate;
+
+static unsigned long exynos5_fout_apll_get_rate(struct clk *clk)
+{
+	return s5p_get_pll35xx(xtal_rate, __raw_readl(EXYNOS5_APLL_CON0));
+}
+
+static struct clk_ops exynos5_fout_apll_ops = {
+	.get_rate = exynos5_fout_apll_get_rate,
+};
+
+static struct vpll_div_data exynos5_vpll_div[] = {
+	{268000000, 6, 268, 2, 41104, 0,  0, 0},
+	{86000000, 6, 344, 4, 2936, 0,  0, 0},
+};
+
+static unsigned long exynos5_vpll_get_rate(struct clk *clk)
+{
+	return clk->rate;
+}
+
+static int exynos5_vpll_set_rate(struct clk *clk, unsigned long rate)
+{
+	unsigned int vpll_con0, vpll_con1;
+	unsigned int tmp;
+
+	/* Return if nothing changed */
+	if (clk->rate == rate)
+		return 0;
+
+	vpll_con0 = __raw_readl(EXYNOS5_VPLL_CON0);
+	vpll_con0 &= ~(PLL36XX_MDIV_MASK << PLL36XX_MDIV_SHIFT |       \
+		       PLL36XX_PDIV_MASK << PLL36XX_PDIV_SHIFT |       \
+		       PLL36XX_SDIV_MASK << PLL36XX_SDIV_SHIFT);
+
+	vpll_con1 = __raw_readl(EXYNOS5_VPLL_CON1);
+	vpll_con1 &= ~(0xffff << 0);
+#if 0
+	for (i = 0; i < ARRAY_SIZE(exynos5_vpll_div); i++) {
+		if (exynos5_vpll_div[i].rate == rate) {
+			vpll_con0 |= exynos5_vpll_div[i].pdiv << PLL36XX_PDIV_SHIFT;
+			vpll_con0 |= exynos5_vpll_div[i].mdiv << PLL36XX_MDIV_SHIFT;
+			vpll_con0 |= exynos5_vpll_div[i].sdiv << PLL36XX_SDIV_SHIFT;
+			vpll_con1 |= exynos5_vpll_div[i].k << 0;
+			break;
+		}
+	}
+
+	if (i == ARRAY_SIZE(exynos5_vpll_div)) {
+		printk(KERN_ERR "%s: Invalid Clock VPLL Frequency\n",
+				__func__);
+		return -EINVAL;
+	}
+
+	/* 3000 max_cycls : specification data */
+	locktime = 3000 * exynos5_vpll_div[i].pdiv + 1;
+
+	__raw_writel(locktime, EXYNOS5_VPLL_LOCK);
+#endif
+#if defined(CONFIG_DP_40HZ_P11) || defined(CONFIG_DP_40HZ_P10)
+			vpll_con0 = 0xA0b30602;
+			vpll_con1 = 0x15b5;
+#elif defined(CONFIG_DP_60HZ_P11) || defined(CONFIG_DP_60HZ_P10)
+			vpll_con0 = 0xA10c0602;
+			vpll_con1 = 0xA090;
+#endif
+
+
+	__raw_writel(vpll_con0, EXYNOS5_VPLL_CON0);
+	__raw_writel(vpll_con1, EXYNOS5_VPLL_CON1);
+
+	do {
+		tmp = __raw_readl(EXYNOS5_VPLL_CON0);
+	} while (!(tmp & (0x1 << EXYNOS5_VPLLCON0_LOCKED_SHIFT)));
+
+	clk->rate = rate;
+
+	return 0;
+}
+
+static struct clk_ops exynos5_vpll_ops = {
+	.get_rate = exynos5_vpll_get_rate,
+	.set_rate = exynos5_vpll_set_rate,
+};
+
+static u32 exynos5_gpll_div[][6] = {
+	/*rate, P, M, S, AFC_DNB, AFC*/
+	{1400000000, 3, 175, 0, 0, 0}, /* for 466MHz */
+	{800000000, 3, 100, 0, 0, 0},  /* for 400MHz, 200MHz */
+	{667000000, 7, 389, 1, 0, 0},  /* for 333MHz, 222MHz, 166MHz */
+	{600000000, 4, 200, 1, 0, 0},  /* for 300MHz, 200MHz, 150MHz */
+	{533000000, 12, 533, 1, 0, 0}, /* for 533MHz, 266MHz, 133MHz */
+	{450000000, 12, 450, 1, 0, 0}, /* for 450 Hz */
+	{400000000, 3, 100, 1, 0, 0},
+	{333000000, 4, 222, 2, 0, 0},
+	{200000000, 3, 100, 2, 0, 0},
+};
+
+static unsigned long exynos5_gpll_get_rate(struct clk *clk)
+{
+	return clk->rate;
+}
+
+static int exynos5_gpll_set_rate(struct clk *clk, unsigned long rate)
+{
+	unsigned int gpll_con0;
+	unsigned int locktime;
+	unsigned int tmp;
+	unsigned int i;
+
+	/* Return if nothing changed */
+	if (clk->rate == rate)
+		return 0;
+
+	gpll_con0 = __raw_readl(EXYNOS5_GPLL_CON0);
+	gpll_con0 &= ~(PLL35XX_MDIV_MASK << PLL35XX_MDIV_SHIFT |       \
+		       PLL35XX_PDIV_MASK << PLL35XX_PDIV_SHIFT |       \
+		       PLL35XX_SDIV_MASK << PLL35XX_SDIV_SHIFT);
+
+	for (i = 0; i < ARRAY_SIZE(exynos5_gpll_div); i++) {
+		if (exynos5_gpll_div[i][0] == rate) {
+			gpll_con0 |= exynos5_gpll_div[i][1] << PLL35XX_PDIV_SHIFT;
+			gpll_con0 |= exynos5_gpll_div[i][2] << PLL35XX_MDIV_SHIFT;
+			gpll_con0 |= exynos5_gpll_div[i][3] << PLL35XX_SDIV_SHIFT;
+			break;
+		}
+	}
+
+	if (i == ARRAY_SIZE(exynos5_gpll_div)) {
+		printk(KERN_ERR "%s: Invalid Clock GPLL Frequency\n",
+				__func__);
+		return -EINVAL;
+	}
+
+	/* 250 max_cycls : specification data */
+	/* 270@p=1, 1cycle=1/24=41.6ns */
+	/* calc >> p=5, 270 * 5 = 1350cycle * 41.6ns = 56.16us */
+
+	locktime = 270 * exynos5_gpll_div[i][1] + 1;
+
+	__raw_writel(locktime, EXYNOS5_GPLL_LOCK);
+
+	__raw_writel(gpll_con0, EXYNOS5_GPLL_CON0);
+
+	do {
+		tmp = __raw_readl(EXYNOS5_GPLL_CON0);
+	} while (!(tmp & (0x1 << EXYNOS5_GPLLCON0_LOCKED_SHIFT)));
+
+	clk->rate = rate;
+
+	return 0;
+}
+
+static struct clk_ops exynos5_gpll_ops = {
+	.get_rate = exynos5_gpll_get_rate,
+	.set_rate = exynos5_gpll_set_rate,
+};
+
+#ifdef CONFIG_PM
+static int exynos5_clock_suspend(void)
+{
+	s3c_pm_do_save(exynos5_clock_save, ARRAY_SIZE(exynos5_clock_save));
+
+	if (samsung_rev() < EXYNOS5250_REV_1_0)
+		s3c_pm_do_save(exynos5250_clock_save_rev0,
+				ARRAY_SIZE(exynos5250_clock_save_rev0));
+
+	s3c_pm_do_save(exynos5_epll_save, ARRAY_SIZE(exynos5_epll_save));
+	s3c_pm_do_save(exynos5_vpll_save, ARRAY_SIZE(exynos5_vpll_save));
+
+	if (samsung_rev() >= EXYNOS5250_REV_1_0)
+		s3c_pm_do_save(exynos5_gpll_save, ARRAY_SIZE(exynos5_gpll_save));
+	return 0;
+}
+
+static void exynos5_clock_resume(void)
+{
+	unsigned int tmp;
+
+	s3c_pm_do_restore_core(exynos5_epll_save, ARRAY_SIZE(exynos5_epll_save));
+	s3c_pm_do_restore_core(exynos5_vpll_save, ARRAY_SIZE(exynos5_vpll_save));
+
+	if (samsung_rev() >= EXYNOS5250_REV_1_0)
+		s3c_pm_do_restore_core(exynos5_gpll_save, ARRAY_SIZE(exynos5_gpll_save));
+
+	/* waiting epll & vpll locking time */
+	do {
+		tmp = __raw_readl(EXYNOS5_EPLL_CON0);
+	} while (!(tmp & 0x1 << EXYNOS5_EPLLCON0_LOCKED_SHIFT));
+
+	do {
+		tmp = __raw_readl(EXYNOS5_VPLL_CON0);
+	} while (!(tmp & 0x1 << EXYNOS5_VPLLCON0_LOCKED_SHIFT));
+
+	if (samsung_rev() >= EXYNOS5250_REV_1_0) {
+		do {
+			tmp = __raw_readl(EXYNOS5_GPLL_CON0);
+		} while (!(tmp & (0x1 << EXYNOS5_GPLLCON0_LOCKED_SHIFT)));
+	}
+
+	if (samsung_rev() < EXYNOS5250_REV_1_0)
+		s3c_pm_do_restore_core(exynos5250_clock_save_rev0,
+					ARRAY_SIZE(exynos5250_clock_save_rev0));
+
+	s3c_pm_do_restore_core(exynos5_clock_save, ARRAY_SIZE(exynos5_clock_save));
+}
+#else
+#define exynos5_clock_suspend NULL
+#define exynos5_clock_resume NULL
+#endif
+
+struct syscore_ops exynos5_clock_syscore_ops = {
+	.suspend        = exynos5_clock_suspend,
+	.resume         = exynos5_clock_resume,
+};
+
+void __init_or_cpufreq exynos5_setup_clocks(void)
+{
+	struct clk *xtal_clk;
+	unsigned long apll;
+	unsigned long bpll;
+	unsigned long cpll;
+	unsigned long mpll;
+	unsigned long epll;
+	unsigned long vpll;
+	unsigned long gpll;
+	unsigned long vpllsrc;
+	unsigned long xtal;
+	unsigned long armclk;
+	unsigned long mclk_cdrex;
+	unsigned long aclk_400;
+	unsigned long aclk_333;
+	unsigned long aclk_266;
+	unsigned long aclk_200;
+	unsigned long aclk_166;
+	unsigned long aclk_66;
+	unsigned int ptr;
+
+	printk(KERN_DEBUG "%s: registering clocks\n", __func__);
+
+	xtal_clk = clk_get(NULL, "xtal");
+	BUG_ON(IS_ERR(xtal_clk));
+
+	xtal = clk_get_rate(xtal_clk);
+
+	xtal_rate = xtal;
+
+	clk_put(xtal_clk);
+
+	printk(KERN_DEBUG "%s: xtal is %ld\n", __func__, xtal);
+
+#if defined(CONFIG_MACH_P10_DP_01)
+	/* setting vpll 268627200 Hz */
+	if (exynos5_vpll_set_rate(&clk_fout_vpll, 268000000))
+		printk(KERN_ERR "Unable to set %s of clock vpll.\n", clk_fout_vpll.name);
+#elif defined(CONFIG_MACH_P10_DP_00)
+	/* setting vpll 86011199 Hz */
+	if (exynos5_vpll_set_rate(&clk_fout_vpll, 86000000))
+		printk(KERN_ERR "Unable to set %s of clock vpll.\n", clk_fout_vpll.name);
+#endif
+
+	/* Set and check PLLs */
+	apll = s5p_get_pll35xx(xtal, __raw_readl(EXYNOS5_APLL_CON0));
+	bpll = s5p_get_pll35xx(xtal, __raw_readl(EXYNOS5_BPLL_CON0));
+	cpll = s5p_get_pll35xx(xtal, __raw_readl(EXYNOS5_CPLL_CON0));
+	mpll = s5p_get_pll35xx(xtal, __raw_readl(EXYNOS5_MPLL_CON0));
+	epll = s5p_get_pll36xx(xtal, __raw_readl(EXYNOS5_EPLL_CON0),
+			__raw_readl(EXYNOS5_EPLL_CON1));
+
+	if ((soc_is_exynos5250() && samsung_rev() >= EXYNOS5250_REV_1_0))
+	    gpll = s5p_get_pll35xx(xtal, __raw_readl(EXYNOS5_GPLL_CON0));
+	else
+	    gpll = 0;
+
+	vpllsrc = clk_get_rate(&exynos5_clk_mout_vpllsrc.clk);
+	vpll = s5p_get_pll36xx(vpllsrc, __raw_readl(EXYNOS5_VPLL_CON0),
+			__raw_readl(EXYNOS5_VPLL_CON1));
+
+	clk_fout_apll.ops = &exynos5_fout_apll_ops;
+	clk_fout_bpll.rate = bpll;
+	clk_fout_bpll_div2.rate = bpll / 2;
+	clk_fout_cpll.rate = cpll;
+	clk_fout_mpll.rate = mpll;
+	clk_fout_mpll_div2.rate = mpll / 2;
+	clk_fout_epll.rate = epll;
+	clk_fout_vpll.rate = vpll;
+
+	if (soc_is_exynos5250() && samsung_rev() >= EXYNOS5250_REV_1_0) {
+		gpll = s5p_get_pll35xx(xtal, __raw_readl(EXYNOS5_GPLL_CON0));
+		clk_fout_gpll.rate = gpll;
+
+		printk(KERN_INFO "EXYNOS5: PLL settings, A=%ld, B=%ld, C=%ld\n"
+			"M=%ld, E=%ld, V=%ld, G=%ld\n",
+			apll, bpll, cpll, mpll, epll, vpll, gpll);
+	} else {
+		printk(KERN_INFO "EXYNOS5: PLL settings, A=%ld, B=%ld, C=%ld\n"
+			"M=%ld, E=%ld, V=%ld\n",
+			apll, bpll, cpll, mpll, epll, vpll);
+	}
+
+	/* Set parent for bus clocks */
+	if ((soc_is_exynos5250() && samsung_rev() >= EXYNOS5250_REV_1_0))
+		clk_set_parent(&exynos5_clk_mout_mpll.clk,
+				&exynos5_clk_mout_mpll_fout.clk);
+
+	armclk = clk_get_rate(&exynos5_clk_armclk);
+	mclk_cdrex = clk_get_rate(&exynos5_clk_mclk_cdrex.clk);
+
+	aclk_400 = clk_get_rate(&exynos5_clk_aclk_400.clk);
+	aclk_333 = clk_get_rate(&exynos5_clk_aclk_333.clk);
+	aclk_266 = clk_get_rate(&exynos5_clk_aclk_266.clk);
+	aclk_200 = clk_get_rate(&exynos5_clk_aclk_200.clk);
+	aclk_166 = clk_get_rate(&exynos5_clk_aclk_166.clk);
+	aclk_66 = clk_get_rate(&exynos5_clk_aclk_66.clk);
+
+	printk(KERN_INFO "EXYNOS5: ARMCLK=%ld, CDREX=%ld, ACLK400=%ld\n"
+			"ACLK333=%ld, ACLK266=%ld, ACLK200=%ld\n"
+			"ACLK166=%ld, ACLK66=%ld\n",
+			armclk, mclk_cdrex, aclk_400,
+			aclk_333, aclk_266, aclk_200,
+			aclk_166, aclk_66);
+
+	clk_fout_epll.ops = &exynos5_epll_ops;
+	clk_fout_vpll.ops = &exynos5_vpll_ops;
+	clk_fout_gpll.ops = &exynos5_gpll_ops;
+
+	if (clk_set_parent(&exynos5_clk_mout_audss.clk, &clk_fout_epll))
+		printk(KERN_ERR "Unable to set parent %s of clock %s.\n",
+				clk_fout_epll.name, exynos5_clk_mout_audss.clk.name);
+#if defined(CONFIG_SND_SAMSUNG_PCM) && !defined(CONFIG_SND_SAMSUNG_PCM_USE_EPLL)
+	if (clk_set_parent(&exynos5_clk_sclk_audio0.clk, &exynos5_clk_audiocdclk0.clk))
+		printk(KERN_ERR "Unable to set parent %s of clock %s.\n",
+				exynos5_clk_audiocdclk0.clk.name, exynos5_clk_sclk_audio0.clk.name);
+#else
+	if (clk_set_parent(&exynos5_clk_sclk_audio0.clk, &exynos5_clk_mout_epll.clk))
+		printk(KERN_ERR "Unable to set parent %s of clock %s.\n",
+				exynos5_clk_mout_epll.clk.name, exynos5_clk_sclk_audio0.clk.name);
+#endif
+	if (clk_set_parent(&exynos5_clk_sclk_audio1.clk, &exynos5_clk_mout_epll.clk))
+		printk(KERN_ERR "Unable to set parent %s of clock %s.\n",
+				exynos5_clk_mout_epll.clk.name, exynos5_clk_sclk_audio1.clk.name);
+	if (clk_set_parent(&exynos5_clk_sclk_audio2.clk, &exynos5_clk_mout_epll.clk))
+		printk(KERN_ERR "Unable to set parent %s of clock %s.\n",
+				exynos5_clk_mout_epll.clk.name, exynos5_clk_sclk_audio2.clk.name);
+	if (clk_set_parent(&exynos5_clk_mout_epll.clk, &clk_fout_epll))
+		printk(KERN_ERR "Unable to set parent %s of clock %s.\n",
+				clk_fout_epll.name, exynos5_clk_mout_epll.clk.name);
+
+	if (clk_set_parent(&exynos5_clk_mout_aclk_400_isp.clk, &exynos5_clk_mout_mpll_user.clk))
+		printk(KERN_ERR "Unable to set parent %s of clock %s.\n",
+			exynos5_clk_mout_mpll_user.clk.name, exynos5_clk_mout_aclk_400_isp.clk.name);
+	if (clk_set_parent(&exynos5_clk_aclk_266_isp.clk, &exynos5_clk_aclk_266.clk))
+		printk(KERN_ERR "Unable to set parent %s of clock %s.\n",
+			exynos5_clk_aclk_266.clk.name, exynos5_clk_aclk_266_isp.clk.name);
+	if (clk_set_parent(&exynos5_clk_aclk_400_isp.clk, &exynos5_clk_dout_aclk_400_isp.clk))
+		printk(KERN_ERR "Unable to set parent %s of clock %s.\n",
+			exynos5_clk_mout_aclk_400_isp.clk.name, exynos5_clk_aclk_400_isp.clk.name);
+	if (clk_set_parent(&exynos5_clk_sclk_uart_isp.clk, &exynos5_clk_mout_mpll_user.clk))
+		printk(KERN_ERR "Unable to set parent %s of clock %s.\n",
+			exynos5_clk_mout_mpll_user.clk.name, exynos5_clk_sclk_uart_isp.clk.name);
+
+	clk_set_rate(&exynos5_clk_sclk_apll.clk, 100000000);
+	clk_set_rate(&exynos5_clk_aclk_266.clk, 300000000);
+
+	clk_set_rate(&exynos5_clk_aclk_acp.clk, 267000000);
+	clk_set_rate(&exynos5_clk_pclk_acp.clk, 134000000);
+
+	for (ptr = 0; ptr < ARRAY_SIZE(exynos5_clksrcs); ptr++)
+		s3c_set_clksrc(&exynos5_clksrcs[ptr], true);
+}
+
+void __init exynos5_register_clocks(void)
+{
+	int ptr;
+
+	if (soc_is_exynos5250() && samsung_rev() >= EXYNOS5250_REV_1_0) {
+		exynos5_clk_mout_mpll.sources = &exynos5_clkset_mout_mpll;
+		exynos5_clk_mout_bpll.sources = &exynos5_clkset_mout_bpll;
+		exynos5_clk_aclk_400.sources = &exynos5_clkset_aclk_g3d;
+		exynos5_clk_mout_aclk_300_gscl.sources = &exynos5_clkset_aclk_300_gscl_rev1;
+		exynos5_clk_mout_aclk_300_disp1.sources = &exynos5_clkset_mout_aclk_300_disp1_rev1;
+	} else if (soc_is_exynos5250() && samsung_rev() < EXYNOS5250_REV_1_0) {
+		exynos5_clk_sclk_jpeg.sources = NULL;
+		exynos5_clk_sclk_jpeg.reg_src.reg = 0;
+		exynos5_clk_sclk_jpeg.clk.parent = &exynos5_clk_mout_cpll.clk;
+		exynos5_clk_sclk_jpeg.clk.enable = NULL;
+		exynos5_clk_sclk_jpeg.clk.ctrlbit = 0;
+	}
+
+	s3c24xx_register_clocks(exynos5_clks, ARRAY_SIZE(exynos5_clks));
+
+	for (ptr = 0; ptr < ARRAY_SIZE(exynos5_sysclks); ptr++)
+		s3c_register_clksrc(exynos5_sysclks[ptr], 1);
+
+	for (ptr = 0; ptr < ARRAY_SIZE(exynos5_sclk_tv); ptr++)
+		s3c_register_clksrc(exynos5_sclk_tv[ptr], 1);
+
+	s3c_register_clksrc(exynos5_clksrcs, ARRAY_SIZE(exynos5_clksrcs));
+	s3c_register_clocks(exynos5_init_clocks, ARRAY_SIZE(exynos5_init_clocks));
+
+	s3c_register_clocks(exynos5_init_clocks_off, ARRAY_SIZE(exynos5_init_clocks_off));
+	s3c_disable_clocks(exynos5_init_clocks_off, ARRAY_SIZE(exynos5_init_clocks_off));
+
+	/* TN Feature.. these clocks was enabled at booloader */
+	s3c_register_clocks(exynos5_init_clock_on, ARRAY_SIZE(exynos5_init_clock_on));
+
+	s3c_register_clocks(exynos5_init_audss_clocks, ARRAY_SIZE(exynos5_init_audss_clocks));
+	s3c_disable_clocks(exynos5_init_audss_clocks, ARRAY_SIZE(exynos5_init_audss_clocks));
+
+	if (soc_is_exynos5250() && (samsung_rev() < EXYNOS5250_REV_1_0))
+		exynos5_init_dmaclocks[2].ctrlbit = exynos5_init_dmaclocks[1].ctrlbit;
+	s3c_register_clocks(exynos5_init_dmaclocks, ARRAY_SIZE(exynos5_init_dmaclocks));
+	s3c_disable_clocks(exynos5_init_dmaclocks, ARRAY_SIZE(exynos5_init_dmaclocks));
+
+	s3c_register_clocks(exynos5_i2cs_clocks, ARRAY_SIZE(exynos5_i2cs_clocks));
+	s3c_disable_clocks(exynos5_i2cs_clocks, ARRAY_SIZE(exynos5_i2cs_clocks));
+
+	if (samsung_rev() >= EXYNOS5250_REV_1_0) {
+		s3c_register_clocks(exynos5_uis_clocks, ARRAY_SIZE(exynos5_uis_clocks));
+		s3c_disable_clocks(exynos5_uis_clocks, ARRAY_SIZE(exynos5_uis_clocks));
+	}
+
+	if (samsung_rev() < EXYNOS5250_REV_1_0) {
+		s3c_register_clksrc(&exynos5_clk_sclk_c2c_rev0, 1);
+		s3c_register_clksrc(&exynos5_clk_aclk_c2c_rev0, 1);
+	}
+
+#ifndef CONFIG_SAMSUNG_C2C
+	if (soc_is_exynos5250() && (samsung_rev() >= EXYNOS5250_REV_1_0)) {
+		exynos5_c2c_clock.enable = exynos5_clk_ip_sysrgt_ctrl;
+		exynos5_c2c_clock.ctrlbit = ((1 << 2) | (1 << 1));
+	}
+
+	s3c24xx_register_clock(&exynos5_c2c_clock);
+	s3c_disable_clocks(&exynos5_c2c_clock, 1);
+#endif
+
+	register_syscore_ops(&exynos5_clock_syscore_ops);
+	s3c_pwmclk_init();
+}
+
+static int __init clock_domain_init(void)
+{
+	int index;
+
+	/* Add dma clock */
+	for (index = 0; index < ARRAY_SIZE(exynos5_init_dmaclocks); index++)
+		clock_add_domain(LPA_DOMAIN, &exynos5_init_dmaclocks[index]);
+
+	/* Add i2c clock */
+	for (index = 0; index < ARRAY_SIZE(exynos5_i2cs_clocks); index++)
+		clock_add_domain(LPA_DOMAIN, &exynos5_i2cs_clocks[index]);
+
+	return 0;
+}
+late_initcall(clock_domain_init);
diff -Naur ./arch/arm/mach-exynos/common.c ../../HK_JB/Kernel/arch/arm/mach-exynos/common.c
--- ./arch/arm/mach-exynos/common.c	2012-12-08 20:40:46.117821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/common.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,714 +0,0 @@
-/*
- * Copyright (c) 2010-2011 Samsung Electronics Co., Ltd.
- *		http://www.samsung.com
- *
- * Common Codes for EXYNOS
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- */
-
-#include <linux/kernel.h>
-#include <linux/interrupt.h>
-#include <linux/irq.h>
-#include <linux/io.h>
-#include <linux/device.h>
-#include <linux/gpio.h>
-#include <linux/sched.h>
-#include <linux/serial_core.h>
-
-#include <asm/proc-fns.h>
-#include <asm/hardware/cache-l2x0.h>
-#include <asm/hardware/gic.h>
-#include <asm/mach/map.h>
-#include <asm/mach/irq.h>
-
-#include <mach/regs-irq.h>
-#include <mach/regs-pmu.h>
-#include <mach/regs-gpio.h>
-
-#include <plat/cpu.h>
-#include <plat/clock.h>
-#include <plat/devs.h>
-#include <plat/pm.h>
-#include <plat/sdhci.h>
-#include <plat/gpio-cfg.h>
-#include <plat/adc-core.h>
-#include <plat/fb-core.h>
-#include <plat/fimc-core.h>
-#include <plat/iic-core.h>
-#include <plat/tv-core.h>
-#include <plat/regs-serial.h>
-
-#include "common.h"
-
-unsigned int gic_bank_offset __read_mostly;
-
-static const char name_exynos4210[] = "EXYNOS4210";
-static const char name_exynos4212[] = "EXYNOS4212";
-static const char name_exynos4412[] = "EXYNOS4412";
-
-static struct cpu_table cpu_ids[] __initdata = {
-	{
-		.idcode		= EXYNOS4210_CPU_ID,
-		.idmask		= EXYNOS4_CPU_MASK,
-		.map_io		= exynos4_map_io,
-		.init_clocks	= exynos4_init_clocks,
-		.init_uarts	= exynos4_init_uarts,
-		.init		= exynos_init,
-		.name		= name_exynos4210,
-	}, {
-		.idcode		= EXYNOS4212_CPU_ID,
-		.idmask		= EXYNOS4_CPU_MASK,
-		.map_io		= exynos4_map_io,
-		.init_clocks	= exynos4_init_clocks,
-		.init_uarts	= exynos4_init_uarts,
-		.init		= exynos_init,
-		.name		= name_exynos4212,
-	}, {
-		.idcode		= EXYNOS4412_CPU_ID,
-		.idmask		= EXYNOS4_CPU_MASK,
-		.map_io		= exynos4_map_io,
-		.init_clocks	= exynos4_init_clocks,
-		.init_uarts	= exynos4_init_uarts,
-		.init		= exynos_init,
-		.name		= name_exynos4412,
-	},
-};
-
-/* Initial IO mappings */
-
-static struct map_desc exynos_iodesc[] __initdata = {
-	{
-		.virtual	= (unsigned long)S5P_VA_CHIPID,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_CHIPID),
-		.length		= SZ_4K,
-		.type		= MT_DEVICE,
-	}, {
-		.virtual	= (unsigned long)S3C_VA_SYS,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_SYSCON),
-		.length		= SZ_64K,
-		.type		= MT_DEVICE,
-	}, {
-		.virtual	= (unsigned long)S3C_VA_TIMER,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_TIMER),
-		.length		= SZ_16K,
-		.type		= MT_DEVICE,
-	}, {
-		.virtual	= (unsigned long)S3C_VA_WATCHDOG,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_WATCHDOG),
-		.length		= SZ_4K,
-		.type		= MT_DEVICE,
-	}, {
-		.virtual	= (unsigned long)S5P_VA_SROMC,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_SROMC),
-		.length		= SZ_4K,
-		.type		= MT_DEVICE,
-	}, {
-		.virtual	= (unsigned long)S5P_VA_SYSTIMER,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_SYSTIMER),
-		.length		= SZ_4K,
-		.type		= MT_DEVICE,
-	}, {
-		.virtual	= (unsigned long)S5P_VA_PMU,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_PMU),
-		.length		= SZ_64K,
-		.type		= MT_DEVICE,
-	}, {
-		.virtual	= (unsigned long)S5P_VA_COMBINER_BASE,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_COMBINER),
-		.length		= SZ_4K,
-		.type		= MT_DEVICE,
-	}, {
-		.virtual	= (unsigned long)S5P_VA_GIC_CPU,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_GIC_CPU),
-		.length		= SZ_64K,
-		.type		= MT_DEVICE,
-	}, {
-		.virtual	= (unsigned long)S5P_VA_GIC_DIST,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_GIC_DIST),
-		.length		= SZ_64K,
-		.type		= MT_DEVICE,
-	}, {
-		.virtual	= (unsigned long)S3C_VA_UART,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_UART),
-		.length		= SZ_512K,
-		.type		= MT_DEVICE,
-	},
-};
-
-static struct map_desc exynos4_iodesc[] __initdata = {
-	{
-		.virtual	= (unsigned long)S5P_VA_CMU,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_CMU),
-		.length		= SZ_128K,
-		.type		= MT_DEVICE,
-	}, {
-		.virtual	= (unsigned long)S5P_VA_COREPERI_BASE,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_COREPERI),
-		.length		= SZ_8K,
-		.type		= MT_DEVICE,
-	}, {
-		.virtual	= (unsigned long)S5P_VA_L2CC,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_L2CC),
-		.length		= SZ_4K,
-		.type		= MT_DEVICE,
-	}, {
-		.virtual	= (unsigned long)S5P_VA_GPIO1,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_GPIO1),
-		.length		= SZ_4K,
-		.type		= MT_DEVICE,
-	}, {
-		.virtual	= (unsigned long)S5P_VA_GPIO2,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_GPIO2),
-		.length		= SZ_4K,
-		.type		= MT_DEVICE,
-	}, {
-		.virtual	= (unsigned long)S5P_VA_GPIO3,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_GPIO3),
-		.length		= SZ_256,
-		.type		= MT_DEVICE,
-	}, {
-		.virtual	= (unsigned long)S5P_VA_DMC0,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_DMC0),
-		.length		= SZ_4K,
-		.type		= MT_DEVICE,
-	}, {
-		.virtual	= (unsigned long)S3C_VA_USB_HSPHY,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_HSPHY),
-		.length		= SZ_4K,
-		.type		= MT_DEVICE,
-	},
-};
-
-static struct map_desc exynos4_iodesc0[] __initdata = {
-	{
-		.virtual	= (unsigned long)S5P_VA_SYSRAM,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_SYSRAM0),
-		.length		= SZ_4K,
-		.type		= MT_DEVICE,
-	},
-};
-
-static struct map_desc exynos4_iodesc1[] __initdata = {
-	{
-		.virtual	= (unsigned long)S5P_VA_SYSRAM,
-		.pfn		= __phys_to_pfn(EXYNOS4_PA_SYSRAM1),
-		.length		= SZ_4K,
-		.type		= MT_DEVICE,
-	},
-};
-
-static void exynos_idle(void)
-{
-	if (!need_resched())
-		cpu_do_idle();
-
-	local_irq_enable();
-}
-
-void exynos4_restart(char mode, const char *cmd)
-{
-	__raw_writel(0x1, S5P_SWRESET);
-}
-
-/*
- * exynos_map_io
- *
- * register the standard cpu IO areas
- */
-
-void __init exynos_init_io(struct map_desc *mach_desc, int size)
-{
-	/* initialize the io descriptors we need for initialization */
-	iotable_init(exynos_iodesc, ARRAY_SIZE(exynos_iodesc));
-	if (mach_desc)
-		iotable_init(mach_desc, size);
-
-	/* detect cpu id and rev. */
-	s5p_init_cpu(S5P_VA_CHIPID);
-
-	s3c_init_cpu(samsung_cpu_id, cpu_ids, ARRAY_SIZE(cpu_ids));
-}
-
-void __init exynos4_map_io(void)
-{
-	iotable_init(exynos4_iodesc, ARRAY_SIZE(exynos4_iodesc));
-
-	if (soc_is_exynos4210() && samsung_rev() == EXYNOS4210_REV_0)
-		iotable_init(exynos4_iodesc0, ARRAY_SIZE(exynos4_iodesc0));
-	else
-		iotable_init(exynos4_iodesc1, ARRAY_SIZE(exynos4_iodesc1));
-
-	/* initialize device information early */
-	exynos4_default_sdhci0();
-	exynos4_default_sdhci1();
-	exynos4_default_sdhci2();
-	exynos4_default_sdhci3();
-
-	s3c_adc_setname("samsung-adc-v3");
-
-	s3c_fimc_setname(0, "exynos4-fimc");
-	s3c_fimc_setname(1, "exynos4-fimc");
-	s3c_fimc_setname(2, "exynos4-fimc");
-	s3c_fimc_setname(3, "exynos4-fimc");
-
-	/* The I2C bus controllers are directly compatible with s3c2440 */
-	s3c_i2c0_setname("s3c2440-i2c");
-	s3c_i2c1_setname("s3c2440-i2c");
-	s3c_i2c2_setname("s3c2440-i2c");
-
-	s5p_fb_setname(0, "exynos4-fb");
-	s5p_hdmi_setname("exynos4-hdmi");
-}
-
-void __init exynos4_init_clocks(int xtal)
-{
-	printk(KERN_DEBUG "%s: initializing clocks\n", __func__);
-
-	s3c24xx_register_baseclocks(xtal);
-	s5p_register_clocks(xtal);
-
-	if (soc_is_exynos4210())
-		exynos4210_register_clocks();
-	else if (soc_is_exynos4212() || soc_is_exynos4412())
-		exynos4212_register_clocks();
-
-	exynos4_register_clocks();
-	exynos4_setup_clocks();
-}
-
-#define COMBINER_ENABLE_SET	0x0
-#define COMBINER_ENABLE_CLEAR	0x4
-#define COMBINER_INT_STATUS	0xC
-
-static DEFINE_SPINLOCK(irq_controller_lock);
-
-struct combiner_chip_data {
-	unsigned int irq_offset;
-	unsigned int irq_mask;
-	void __iomem *base;
-};
-
-static struct combiner_chip_data combiner_data[MAX_COMBINER_NR];
-
-static inline void __iomem *combiner_base(struct irq_data *data)
-{
-	struct combiner_chip_data *combiner_data =
-		irq_data_get_irq_chip_data(data);
-
-	return combiner_data->base;
-}
-
-static void combiner_mask_irq(struct irq_data *data)
-{
-	u32 mask = 1 << (data->irq % 32);
-
-	__raw_writel(mask, combiner_base(data) + COMBINER_ENABLE_CLEAR);
-}
-
-static void combiner_unmask_irq(struct irq_data *data)
-{
-	u32 mask = 1 << (data->irq % 32);
-
-	__raw_writel(mask, combiner_base(data) + COMBINER_ENABLE_SET);
-}
-
-static void combiner_handle_cascade_irq(unsigned int irq, struct irq_desc *desc)
-{
-	struct combiner_chip_data *chip_data = irq_get_handler_data(irq);
-	struct irq_chip *chip = irq_get_chip(irq);
-	unsigned int cascade_irq, combiner_irq;
-	unsigned long status;
-
-	chained_irq_enter(chip, desc);
-
-	spin_lock(&irq_controller_lock);
-	status = __raw_readl(chip_data->base + COMBINER_INT_STATUS);
-	spin_unlock(&irq_controller_lock);
-	status &= chip_data->irq_mask;
-
-	if (status == 0)
-		goto out;
-
-	combiner_irq = __ffs(status);
-
-	cascade_irq = combiner_irq + (chip_data->irq_offset & ~31);
-	if (unlikely(cascade_irq >= NR_IRQS))
-		do_bad_IRQ(cascade_irq, desc);
-	else
-		generic_handle_irq(cascade_irq);
-
- out:
-	chained_irq_exit(chip, desc);
-}
-
-static struct irq_chip combiner_chip = {
-	.name		= "COMBINER",
-	.irq_mask	= combiner_mask_irq,
-	.irq_unmask	= combiner_unmask_irq,
-};
-
-static void __init combiner_cascade_irq(unsigned int combiner_nr, unsigned int irq)
-{
-	if (combiner_nr >= MAX_COMBINER_NR)
-		BUG();
-	if (irq_set_handler_data(irq, &combiner_data[combiner_nr]) != 0)
-		BUG();
-	irq_set_chained_handler(irq, combiner_handle_cascade_irq);
-}
-
-static void __init combiner_init(unsigned int combiner_nr, void __iomem *base,
-			  unsigned int irq_start)
-{
-	unsigned int i;
-
-	if (combiner_nr >= MAX_COMBINER_NR)
-		BUG();
-
-	combiner_data[combiner_nr].base = base;
-	combiner_data[combiner_nr].irq_offset = irq_start;
-	combiner_data[combiner_nr].irq_mask = 0xff << ((combiner_nr % 4) << 3);
-
-	/* Disable all interrupts */
-
-	__raw_writel(combiner_data[combiner_nr].irq_mask,
-		     base + COMBINER_ENABLE_CLEAR);
-
-	/* Setup the Linux IRQ subsystem */
-
-	for (i = irq_start; i < combiner_data[combiner_nr].irq_offset
-				+ MAX_IRQ_IN_COMBINER; i++) {
-		irq_set_chip_and_handler(i, &combiner_chip, handle_level_irq);
-		irq_set_chip_data(i, &combiner_data[combiner_nr]);
-		set_irq_flags(i, IRQF_VALID | IRQF_PROBE);
-	}
-}
-
-static void exynos4_gic_irq_fix_base(struct irq_data *d)
-{
-	struct gic_chip_data *gic_data = irq_data_get_irq_chip_data(d);
-
-	gic_data->cpu_base = S5P_VA_GIC_CPU +
-			    (gic_bank_offset * smp_processor_id());
-
-	gic_data->dist_base = S5P_VA_GIC_DIST +
-			    (gic_bank_offset * smp_processor_id());
-}
-
-void __init exynos4_init_irq(void)
-{
-	int irq;
-
-	gic_bank_offset = soc_is_exynos4412() ? 0x4000 : 0x8000;
-
-	gic_init(0, IRQ_PPI(0), S5P_VA_GIC_DIST, S5P_VA_GIC_CPU);
-	gic_arch_extn.irq_eoi = exynos4_gic_irq_fix_base;
-	gic_arch_extn.irq_unmask = exynos4_gic_irq_fix_base;
-	gic_arch_extn.irq_mask = exynos4_gic_irq_fix_base;
-
-	for (irq = 0; irq < MAX_COMBINER_NR; irq++) {
-
-		combiner_init(irq, (void __iomem *)S5P_VA_COMBINER(irq),
-				COMBINER_IRQ(irq, 0));
-		combiner_cascade_irq(irq, IRQ_SPI(irq));
-	}
-
-	/*
-	 * The parameters of s5p_init_irq() are for VIC init.
-	 * Theses parameters should be NULL and 0 because EXYNOS4
-	 * uses GIC instead of VIC.
-	 */
-	s5p_init_irq(NULL, 0);
-}
-
-struct bus_type exynos4_subsys = {
-	.name		= "exynos4-core",
-	.dev_name	= "exynos4-core",
-};
-
-static struct device exynos4_dev = {
-	.bus	= &exynos4_subsys,
-};
-
-static int __init exynos4_core_init(void)
-{
-	return subsys_system_register(&exynos4_subsys, NULL);
-}
-core_initcall(exynos4_core_init);
-
-#ifdef CONFIG_CACHE_L2X0
-static int __init exynos4_l2x0_cache_init(void)
-{
-	/* TAG, Data Latency Control: 2cycle */
-	__raw_writel(0x110, S5P_VA_L2CC + L2X0_TAG_LATENCY_CTRL);
-
-	if (soc_is_exynos4210())
-		__raw_writel(0x110, S5P_VA_L2CC + L2X0_DATA_LATENCY_CTRL);
-	else if (soc_is_exynos4212() || soc_is_exynos4412())
-		__raw_writel(0x120, S5P_VA_L2CC + L2X0_DATA_LATENCY_CTRL);
-
-	/* L2X0 Prefetch Control */
-	__raw_writel(0x30000007, S5P_VA_L2CC + L2X0_PREFETCH_CTRL);
-
-	/* L2X0 Power Control */
-	__raw_writel(L2X0_DYNAMIC_CLK_GATING_EN | L2X0_STNDBY_MODE_EN,
-		     S5P_VA_L2CC + L2X0_POWER_CTRL);
-
-	l2x0_init(S5P_VA_L2CC, 0x7C470001, 0xC200ffff);
-
-	return 0;
-}
-
-early_initcall(exynos4_l2x0_cache_init);
-#endif
-
-int __init exynos_init(void)
-{
-	printk(KERN_INFO "EXYNOS: Initializing architecture\n");
-
-	/* set idle function */
-	pm_idle = exynos_idle;
-
-	return device_register(&exynos4_dev);
-}
-
-static struct s3c24xx_uart_clksrc exynos4_serial_clocks[] = {
-	[0] = {
-		.name		= "uclk1",
-		.divisor	= 1,
-		.min_baud	= 0,
-		.max_baud	= 0,
-	},
-};
-
-/* uart registration process */
-
-void __init exynos4_init_uarts(struct s3c2410_uartcfg *cfg, int no)
-{
-	struct s3c2410_uartcfg *tcfg = cfg;
-	u32 ucnt;
-
-	for (ucnt = 0; ucnt < no; ucnt++, tcfg++) {
-		if (!tcfg->clocks) {
-			tcfg->has_fracval = 1;
-			tcfg->clocks = exynos4_serial_clocks;
-			tcfg->clocks_size = ARRAY_SIZE(exynos4_serial_clocks);
-		}
-		tcfg->flags |= NO_NEED_CHECK_CLKSRC;
-	}
-
-	s3c24xx_init_uartdevs("s5pv210-uart", s5p_uart_resources, cfg, no);
-}
-
-static DEFINE_SPINLOCK(eint_lock);
-
-static unsigned int eint0_15_data[16];
-
-static unsigned int exynos4_get_irq_nr(unsigned int number)
-{
-	u32 ret = 0;
-
-	switch (number) {
-	case 0 ... 3:
-		ret = (number + IRQ_EINT0);
-		break;
-	case 4 ... 7:
-		ret = (number + (IRQ_EINT4 - 4));
-		break;
-	case 8 ... 15:
-		ret = (number + (IRQ_EINT8 - 8));
-		break;
-	default:
-		printk(KERN_ERR "number available : %d\n", number);
-	}
-
-	return ret;
-}
-
-static inline void exynos4_irq_eint_mask(struct irq_data *data)
-{
-	u32 mask;
-
-	spin_lock(&eint_lock);
-	mask = __raw_readl(S5P_EINT_MASK(EINT_REG_NR(data->irq)));
-	mask |= eint_irq_to_bit(data->irq);
-	__raw_writel(mask, S5P_EINT_MASK(EINT_REG_NR(data->irq)));
-	spin_unlock(&eint_lock);
-}
-
-static void exynos4_irq_eint_unmask(struct irq_data *data)
-{
-	u32 mask;
-
-	spin_lock(&eint_lock);
-	mask = __raw_readl(S5P_EINT_MASK(EINT_REG_NR(data->irq)));
-	mask &= ~(eint_irq_to_bit(data->irq));
-	__raw_writel(mask, S5P_EINT_MASK(EINT_REG_NR(data->irq)));
-	spin_unlock(&eint_lock);
-}
-
-static inline void exynos4_irq_eint_ack(struct irq_data *data)
-{
-	__raw_writel(eint_irq_to_bit(data->irq),
-		     S5P_EINT_PEND(EINT_REG_NR(data->irq)));
-}
-
-static void exynos4_irq_eint_maskack(struct irq_data *data)
-{
-	exynos4_irq_eint_mask(data);
-	exynos4_irq_eint_ack(data);
-}
-
-static int exynos4_irq_eint_set_type(struct irq_data *data, unsigned int type)
-{
-	int offs = EINT_OFFSET(data->irq);
-	int shift;
-	u32 ctrl, mask;
-	u32 newvalue = 0;
-
-	switch (type) {
-	case IRQ_TYPE_EDGE_RISING:
-		newvalue = S5P_IRQ_TYPE_EDGE_RISING;
-		break;
-
-	case IRQ_TYPE_EDGE_FALLING:
-		newvalue = S5P_IRQ_TYPE_EDGE_FALLING;
-		break;
-
-	case IRQ_TYPE_EDGE_BOTH:
-		newvalue = S5P_IRQ_TYPE_EDGE_BOTH;
-		break;
-
-	case IRQ_TYPE_LEVEL_LOW:
-		newvalue = S5P_IRQ_TYPE_LEVEL_LOW;
-		break;
-
-	case IRQ_TYPE_LEVEL_HIGH:
-		newvalue = S5P_IRQ_TYPE_LEVEL_HIGH;
-		break;
-
-	default:
-		printk(KERN_ERR "No such irq type %d", type);
-		return -EINVAL;
-	}
-
-	shift = (offs & 0x7) * 4;
-	mask = 0x7 << shift;
-
-	spin_lock(&eint_lock);
-	ctrl = __raw_readl(S5P_EINT_CON(EINT_REG_NR(data->irq)));
-	ctrl &= ~mask;
-	ctrl |= newvalue << shift;
-	__raw_writel(ctrl, S5P_EINT_CON(EINT_REG_NR(data->irq)));
-	spin_unlock(&eint_lock);
-
-	switch (offs) {
-	case 0 ... 7:
-		s3c_gpio_cfgpin(EINT_GPIO_0(offs & 0x7), EINT_MODE);
-		break;
-	case 8 ... 15:
-		s3c_gpio_cfgpin(EINT_GPIO_1(offs & 0x7), EINT_MODE);
-		break;
-	case 16 ... 23:
-		s3c_gpio_cfgpin(EINT_GPIO_2(offs & 0x7), EINT_MODE);
-		break;
-	case 24 ... 31:
-		s3c_gpio_cfgpin(EINT_GPIO_3(offs & 0x7), EINT_MODE);
-		break;
-	default:
-		printk(KERN_ERR "No such irq number %d", offs);
-	}
-
-	return 0;
-}
-
-static struct irq_chip exynos4_irq_eint = {
-	.name		= "exynos4-eint",
-	.irq_mask	= exynos4_irq_eint_mask,
-	.irq_unmask	= exynos4_irq_eint_unmask,
-	.irq_mask_ack	= exynos4_irq_eint_maskack,
-	.irq_ack	= exynos4_irq_eint_ack,
-	.irq_set_type	= exynos4_irq_eint_set_type,
-#ifdef CONFIG_PM
-	.irq_set_wake	= s3c_irqext_wake,
-#endif
-};
-
-/*
- * exynos4_irq_demux_eint
- *
- * This function demuxes the IRQ from from EINTs 16 to 31.
- * It is designed to be inlined into the specific handler
- * s5p_irq_demux_eintX_Y.
- *
- * Each EINT pend/mask registers handle eight of them.
- */
-static inline void exynos4_irq_demux_eint(unsigned int start)
-{
-	unsigned int irq;
-
-	u32 status = __raw_readl(S5P_EINT_PEND(EINT_REG_NR(start)));
-	u32 mask = __raw_readl(S5P_EINT_MASK(EINT_REG_NR(start)));
-
-	status &= ~mask;
-	status &= 0xff;
-
-	while (status) {
-		irq = fls(status) - 1;
-		generic_handle_irq(irq + start);
-		status &= ~(1 << irq);
-	}
-}
-
-static void exynos4_irq_demux_eint16_31(unsigned int irq, struct irq_desc *desc)
-{
-	struct irq_chip *chip = irq_get_chip(irq);
-	chained_irq_enter(chip, desc);
-	exynos4_irq_demux_eint(IRQ_EINT(16));
-	exynos4_irq_demux_eint(IRQ_EINT(24));
-	chained_irq_exit(chip, desc);
-}
-
-static void exynos4_irq_eint0_15(unsigned int irq, struct irq_desc *desc)
-{
-	u32 *irq_data = irq_get_handler_data(irq);
-	struct irq_chip *chip = irq_get_chip(irq);
-
-	chained_irq_enter(chip, desc);
-	chip->irq_mask(&desc->irq_data);
-
-	if (chip->irq_ack)
-		chip->irq_ack(&desc->irq_data);
-
-	generic_handle_irq(*irq_data);
-
-	chip->irq_unmask(&desc->irq_data);
-	chained_irq_exit(chip, desc);
-}
-
-int __init exynos4_init_irq_eint(void)
-{
-	int irq;
-
-	for (irq = 0 ; irq <= 31 ; irq++) {
-		irq_set_chip_and_handler(IRQ_EINT(irq), &exynos4_irq_eint,
-					 handle_level_irq);
-		set_irq_flags(IRQ_EINT(irq), IRQF_VALID);
-	}
-
-	irq_set_chained_handler(IRQ_EINT16_31, exynos4_irq_demux_eint16_31);
-
-	for (irq = 0 ; irq <= 15 ; irq++) {
-		eint0_15_data[irq] = IRQ_EINT(irq);
-
-		irq_set_handler_data(exynos4_get_irq_nr(irq),
-				     &eint0_15_data[irq]);
-		irq_set_chained_handler(exynos4_get_irq_nr(irq),
-					exynos4_irq_eint0_15);
-	}
-
-	return 0;
-}
-arch_initcall(exynos4_init_irq_eint);
diff -Naur ./arch/arm/mach-exynos/cpu-exynos4.c ../../HK_JB/Kernel/arch/arm/mach-exynos/cpu-exynos4.c
--- ./arch/arm/mach-exynos/cpu-exynos4.c	2012-12-08 20:40:46.117821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/cpu-exynos4.c	2012-11-22 09:13:15.000000000 +0100
@@ -9,7 +9,7 @@
 */
 
 #include <linux/sched.h>
-#include <linux/device.h>
+#include <linux/sysdev.h>
 #include <linux/delay.h>
 
 #include <asm/mach/map.h>
@@ -343,18 +343,17 @@
 	s5p_init_irq(NULL, 0);
 }
 
-struct bus_type exynos4_subsys = {
+struct sysdev_class exynos4_sysclass = {
 	.name	= "exynos4-core",
-	.dev_name	= "exynos4-core",
 };
 
-static struct device exynos4_dev = {
-	.bus	= &exynos4_subsys,
+static struct sys_device exynos4_sysdev = {
+	.cls	= &exynos4_sysclass,
 };
 
 static int __init exynos4_core_init(void)
 {
-	return subsys_system_register(&exynos4_subsys, NULL);
+	return sysdev_class_register(&exynos4_sysclass);
 }
 
 core_initcall(exynos4_core_init);
@@ -463,5 +462,5 @@
 		__raw_writel(value, S5P_MASK_WDT_RESET_REQUEST);
 	}
 
-	return device_register(&exynos4_dev);
+	return sysdev_register(&exynos4_sysdev);
 }
diff -Naur ./arch/arm/mach-exynos/cpu-exynos5.c ../../HK_JB/Kernel/arch/arm/mach-exynos/cpu-exynos5.c
--- ./arch/arm/mach-exynos/cpu-exynos5.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/cpu-exynos5.c	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,381 @@
+/* linux/arch/arm/mach-exynos/cpu-exynos5.c
+ *
+ * Copyright (c) 2011 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+*/
+
+#include <linux/sched.h>
+#include <linux/sysdev.h>
+#include <linux/delay.h>
+
+#include <asm/mach/map.h>
+#include <asm/mach/irq.h>
+
+#include <asm/proc-fns.h>
+
+#include <plat/cpu.h>
+#include <plat/clock.h>
+#include <plat/devs.h>
+#include <plat/fb-core.h>
+#include <plat/exynos5.h>
+#include <plat/sdhci.h>
+#include <plat/pm.h>
+#include <plat/iic-core.h>
+#include <plat/tv-core.h>
+#include <plat/ace-core.h>
+#include <plat/reset.h>
+#include <plat/rtc-core.h>
+#include <plat/adc-core.h>
+
+#include <mach/regs-irq.h>
+#include <mach/regs-pmu.h>
+#include <mach/regs-pmu5.h>
+#include <mach/smc.h>
+
+unsigned int gic_bank_offset __read_mostly;
+
+extern int combiner_init(unsigned int combiner_nr, void __iomem *base,
+			 unsigned int irq_start);
+extern void combiner_cascade_irq(unsigned int combiner_nr, unsigned int irq);
+
+/* Initial IO mappings */
+static struct map_desc exynos5_iodesc[] __initdata = {
+	{
+		.virtual	= (unsigned long)S5P_VA_SYSTIMER,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_SYSTIMER),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual        = (unsigned long)S5P_VA_SYSRAM,
+		.pfn            = __phys_to_pfn(EXYNOS5_PA_SYSRAM),
+		.length         = SZ_4K,
+		.type           = MT_DEVICE,
+	}, {
+		.virtual	= (unsigned long)S5P_VA_CMU,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_CMU),
+		.length		= 144 * SZ_1K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual	= (unsigned long)S5P_VA_PMU,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_PMU),
+		.length		= SZ_64K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual	= (unsigned long)S5P_VA_COMBINER_BASE,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_COMBINER),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual	= (unsigned long)S3C_VA_UART,
+		.pfn		= __phys_to_pfn(S3C_PA_UART),
+		.length		= SZ_512K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual	= (unsigned long)S5P_VA_GPIO1,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_GPIO1),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual	= (unsigned long)S5P_VA_GPIO2,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_GPIO2),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual	= (unsigned long)S5P_VA_GPIO3,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_GPIO3),
+		.length		= SZ_256,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual	= (unsigned long)S5P_VA_GPIO4,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_GPIO4),
+		.length		= SZ_256,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual	= (unsigned long)S5P_VA_AUDSS,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_AUDSS),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual        = (unsigned long)S3C_VA_USB_HSPHY,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_HSPHY),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual        = (unsigned long)S5P_VA_SS_PHY,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_SS_PHY),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+#ifdef CONFIG_ARM_TRUSTZONE
+	}, {
+		.virtual	= (unsigned long)S5P_VA_SYSRAM_NS,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_SYSRAM_NS),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+#endif
+	}, {
+		.virtual        = (unsigned long)S5P_VA_PPMU_CPU,
+		.pfn            = __phys_to_pfn(EXYNOS5_PA_PPMU_CPU),
+		.length         = SZ_8K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual        = (unsigned long)S5P_VA_PPMU_DDR_C,
+		.pfn            = __phys_to_pfn(EXYNOS5_PA_PPMU_DDR_C),
+		.length         = SZ_8K,
+		.type           = MT_DEVICE,
+	}, {
+		.virtual        = (unsigned long)S5P_VA_PPMU_DDR_R1,
+		.pfn            = __phys_to_pfn(EXYNOS5_PA_PPMU_DDR_R1),
+		.length         = SZ_8K,
+		.type           = MT_DEVICE,
+	}, {
+		.virtual        = (unsigned long)S5P_VA_PPMU_DDR_L,
+		.pfn            = __phys_to_pfn(EXYNOS5_PA_PPMU_DDR_L),
+		.length         = SZ_8K,
+		.type           = MT_DEVICE,
+	}, {
+		.virtual	= (unsigned long)S5P_VA_PPMU_RIGHT0_BUS,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_PPMU_RIGHT0_BUS),
+		.length		= SZ_8K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual	= (unsigned long)S5P_VA_FIMCLITE0,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_FIMC_LITE0),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual	= (unsigned long)S5P_VA_FIMCLITE1,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_FIMC_LITE1),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual	= (unsigned long)S5P_VA_FIMCLITE2,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_FIMC_LITE2),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual	= (unsigned long)S5P_VA_MIPICSI0,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_MIPI_CSIS0),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual	= (unsigned long)S5P_VA_MIPICSI1,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_MIPI_CSIS1),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual	= (unsigned long)S5P_VA_DMC0,
+		.pfn		= __phys_to_pfn(EXYNOS5_PA_DMC),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+	},
+};
+
+static struct map_desc exynos5250_rev_0_iodesc[] __initdata = {
+	{
+		.virtual	= (unsigned long)S5P_VA_GIC_CPU,
+		.pfn		= __phys_to_pfn(EXYNOS5250_REV0_PA_GIC_CPU),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual	= (unsigned long)S5P_VA_GIC_DIST,
+		.pfn		= __phys_to_pfn(EXYNOS5250_REV0_PA_GIC_DIST),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+	},
+};
+
+static struct map_desc exynos5250_rev_1_iodesc[] __initdata = {
+	{
+		.virtual	= (unsigned long)S5P_VA_GIC_CPU,
+		.pfn		= __phys_to_pfn(EXYNOS5250_REV1_PA_GIC_CPU),
+		.length		= SZ_8K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual	= (unsigned long)S5P_VA_GIC_DIST,
+		.pfn		= __phys_to_pfn(EXYNOS5250_REV1_PA_GIC_DIST),
+		.length		= SZ_4K,
+		.type		= MT_DEVICE,
+	},
+};
+
+static void exynos5_idle(void)
+{
+	if (!need_resched())
+		cpu_do_idle();
+
+	local_irq_enable();
+}
+
+/*
+ * exynos5_map_io
+ *
+ * register the standard cpu IO areas
+ */
+void __init exynos5_map_io(void)
+{
+	iotable_init(exynos5_iodesc, ARRAY_SIZE(exynos5_iodesc));
+
+	if (soc_is_exynos5250()) {
+		if (samsung_rev() >= EXYNOS5250_REV_1_0)
+			iotable_init(exynos5250_rev_1_iodesc,
+				ARRAY_SIZE(exynos5250_rev_1_iodesc));
+		else
+			iotable_init(exynos5250_rev_0_iodesc,
+				ARRAY_SIZE(exynos5250_rev_0_iodesc));
+	}
+
+#ifdef CONFIG_S3C_DEV_HSMMC
+	exynos5_default_sdhci0();
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC1
+	exynos5_default_sdhci1();
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC2
+	exynos5_default_sdhci2();
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC3
+	exynos5_default_sdhci3();
+#endif
+#ifdef CONFIG_S3C_DEV_RTC
+	s3c_rtc_setname("exynos-rtc");
+#endif
+
+	s5p_fb_setname(1, "exynos5-fb");        /* FIMD1 */
+
+	s3c_adc_setname("samsung-adc-v4");
+
+	s5p_hdmi_setname("exynos5-hdmi");
+
+	/* The I2C bus controllers are directly compatible with s3c2440 */
+	s3c_i2c0_setname("s3c2440-i2c");
+	s3c_i2c1_setname("s3c2440-i2c");
+	s3c_i2c2_setname("s3c2440-i2c");
+
+#ifdef CONFIG_S5P_DEV_ACE
+	s5p_ace_setname("exynos-ace");
+#endif
+}
+
+void __init exynos5_init_clocks(int xtal)
+{
+	printk(KERN_DEBUG "%s: initializing clocks\n", __func__);
+
+	s3c24xx_register_baseclocks(xtal);
+
+	s5p_register_clocks(xtal);
+	exynos5_register_clocks();
+	exynos5_setup_clocks();
+}
+
+void __init exynos5_init_irq(void)
+{
+	int irq;
+
+	gic_init(0, IRQ_PPI(0), S5P_VA_GIC_DIST, S5P_VA_GIC_CPU);
+	gic_arch_extn.irq_set_wake = s3c_irq_wake;
+
+	for (irq = 0; irq < MAX_COMBINER_NR; irq++) {
+		combiner_init(irq, (void __iomem *)S5P_VA_COMBINER(irq),
+				COMBINER_IRQ(irq, 0));
+		combiner_cascade_irq(irq, IRQ_SPI(irq));
+	}
+
+	/* The parameters of s5p_init_irq() are for VIC init.
+	 * Theses parameters should be NULL and 0 because EXYNOS5
+	 * uses GIC instead of VIC.
+	 */
+	s5p_init_irq(NULL, 0);
+}
+
+struct sysdev_class exynos5_sysclass = {
+	.name	= "exynos5-core",
+};
+
+static struct sys_device exynos5_sysdev = {
+	.cls	= &exynos5_sysclass,
+};
+
+static int __init exynos5_core_init(void)
+{
+	return sysdev_class_register(&exynos5_sysclass);
+}
+
+core_initcall(exynos5_core_init);
+
+#define TAG_RAM_SETUP_SHIFT		(9)
+#define DATA_RAM_SETUP_SHIFT		(5)
+#define TAG_RAM_LATENCY_SHIFT		(6)
+#define DATA_RAM_LATENCY_SHIFT		(0)
+
+static int __init exynos5_l2_cache_init(void)
+{
+	unsigned int val;
+
+	if (soc_is_exynos5250()) {
+		asm volatile(
+			"mrc p15, 0, %0, c1, c0, 0\n"
+			"bic %0, %0, #(1 << 2)\n"	/* cache disable */
+			"mcr p15, 0, %0, c1, c0, 0\n"
+			"mrc p15, 1, %0, c9, c0, 2\n"
+			: "=r"(val));
+
+		val |= (1 << TAG_RAM_SETUP_SHIFT) |
+			(1 << DATA_RAM_SETUP_SHIFT) |
+			(2 << TAG_RAM_LATENCY_SHIFT) |
+			(2 << DATA_RAM_LATENCY_SHIFT);
+
+#ifdef CONFIG_ARM_TRUSTZONE
+		exynos_smc(SMC_CMD_REG, SMC_REG_ID_CP15(9, 1, 0, 2), val, 0);
+#else
+		asm volatile("mcr p15, 1, %0, c9, c0, 2\n": : "r"(val));
+#endif
+		asm volatile(
+			"mrc p15, 0, %0, c1, c0, 0\n"
+			"orr %0, %0, #(1 << 2)\n"	/* cache enable */
+			"mcr p15, 0, %0, c1, c0, 0\n"
+			: : "r"(val));
+	}
+
+	return 0;
+}
+
+early_initcall(exynos5_l2_cache_init);
+
+static void exynos5_sw_reset(void)
+{
+	int count = 3;
+
+	while (count--) {
+		__raw_writel(0x1, S5P_SWRESET);
+		mdelay(500);
+	}
+}
+
+int __init exynos5_init(void)
+{
+	unsigned int value;
+	printk(KERN_INFO "EXYNOS5: Initializing architecture\n");
+
+	/* set idle function */
+	pm_idle = exynos5_idle;
+
+	/* set sw_reset function */
+	s5p_reset_hook = exynos5_sw_reset;
+
+	value = __raw_readl(EXYNOS5_AUTOMATIC_WDT_RESET_DISABLE);
+	value &= ~EXYNOS5_SYS_WDTRESET;
+	__raw_writel(value, EXYNOS5_AUTOMATIC_WDT_RESET_DISABLE);
+	value = __raw_readl(EXYNOS5_MASK_WDT_RESET_REQUEST);
+	value &= ~EXYNOS5_SYS_WDTRESET;
+	__raw_writel(value, EXYNOS5_MASK_WDT_RESET_REQUEST);
+
+	if (soc_is_exynos5250() && samsung_rev() >= EXYNOS5250_REV_1_0) {
+		__raw_writel(0x1, EXYNOS5_ADC_PHY_CONTROL);
+	}
+
+	return sysdev_register(&exynos5_sysdev);
+}
diff -Naur ./arch/arm/mach-exynos/cpufreq-4210.c ../../HK_JB/Kernel/arch/arm/mach-exynos/cpufreq-4210.c
--- ./arch/arm/mach-exynos/cpufreq-4210.c	2012-12-08 20:40:46.117821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/cpufreq-4210.c	2012-11-22 09:13:15.000000000 +0100
@@ -24,7 +24,7 @@
 
 #include <plat/clock.h>
 
-#define CPUFREQ_LEVEL_END	L18
+#define CPUFREQ_LEVEL_END	L6
 
 static int max_support_idx;
 static int min_support_idx = (CPUFREQ_LEVEL_END - 1);
@@ -41,46 +41,22 @@
 static unsigned int exynos4210_volt_table[CPUFREQ_LEVEL_END];
 
 static struct cpufreq_frequency_table exynos4210_freq_table[] = {
-	{L0, 1600 * 1000},
-	{L1, 1500 * 1000},
-	{L2, 1400 * 1000},
-	{L3, 1300 * 1000},
-	{L4, 1200 * 1000},
-	{L5, 1100 * 1000},
-	{L6, 1000 * 1000},
-	{L7,  900 * 1000},
-	{L8,  800 * 1000},
-	{L9,  700 * 1000},
-	{L10, 600 * 1000},
-	{L11, 500 * 1000},
-	{L12, 400 * 1000},
-	{L13, 300 * 1000},
-	{L14, 200 * 1000},
-	{L15, 100 * 1000},
-	{L16,  50 * 1000},
-	{L17,  25 * 1000},
+	{L0, 1400*1000},
+	{L1, 1200*1000},
+	{L2, 1000*1000},
+	{L3, 800*1000},
+	{L4, 500*1000},
+	{L5, 200*1000},
 	{0, CPUFREQ_TABLE_END},
 };
 
 static struct cpufreq_clkdiv exynos4210_clkdiv_table[] = {
-	{L0,  0},
-	{L1,  0},
-	{L2,  0},
-	{L3,  0},
-	{L4,  0},
-	{L5,  0},
-	{L6,  0},
-	{L7,  0},
-	{L8,  0},
-	{L9,  0},
-	{L10, 0},
-	{L11, 0},
-	{L12, 0},
-	{L13, 0},
-	{L14, 0},
-	{L15, 0},
-	{L16, 0},
-	{L17, 0},
+	{L0, 0},
+	{L1, 0},
+	{L2, 0},
+	{L3, 0},
+	{L4, 0},
+	{L5, 0},
 };
 
 static unsigned int clkdiv_cpu0[CPUFREQ_LEVEL_END][7] = {
@@ -89,69 +65,66 @@
 	 * { DIVCORE, DIVCOREM0, DIVCOREM1, DIVPERIPH,
 	 *		DIVATB, DIVPCLK_DBG, DIVAPLL }
 	 */
-	{ 0, 3, 7, 3, 4, 1, 7 },  /* ARM L0: 1600MHz */
-	{ 0, 3, 7, 3, 4, 1, 7 },  /* ARM L1: 1500MHz */
-	{ 0, 3, 7, 3, 4, 1, 7 },  /* ARM L2: 1400MHz */
-	{ 0, 3, 7, 3, 4, 1, 7 },  /* ARM L3: 1300MHz */
-	{ 0, 3, 7, 3, 4, 1, 7 },  /* ARM L4: 1200MHz */
-	{ 0, 3, 7, 3, 4, 1, 7 },  /* ARM L5: 1100MHz */
-	{ 0, 3, 7, 3, 4, 1, 7 },  /* ARM L6: 1000MHz */
-	{ 0, 3, 7, 3, 4, 1, 7 },  /* ARM L7:  900MHz */
-	{ 0, 3, 7, 3, 3, 1, 7 },  /* ARM L8:  800MHz */
-	{ 0, 3, 7, 3, 3, 1, 7 },  /* ARM L9:  700MHz */
-	{ 0, 3, 7, 3, 3, 1, 7 },  /* ARM L10: 600MHz */
-	{ 0, 3, 7, 3, 3, 1, 7 },  /* ARM L11: 500MHz */
-	{ 0, 3, 7, 3, 3, 1, 7 },  /* ARM L12: 400MHz */
-	{ 0, 3, 7, 3, 3, 1, 7 },  /* ARM L13: 300MHz */
-	{ 0, 1, 3, 1, 3, 1, 7 },  /* ARM L14: 200MHz */
-	{ 0, 1, 3, 1, 3, 1, 7 },  /* ARM L15: 100MHz */
-	{ 0, 1, 3, 1, 3, 1, 7 },  /* ARM L16: 50MHz */
-	{ 0, 1, 3, 1, 3, 1, 7 },  /* ARM L17: 25MHz */
+	/* ARM L0: 1400MHz */
+	{ 0, 3, 7, 3, 4, 1, 7 },
+
+	/* ARM L1: 1200MHz */
+	{ 0, 3, 7, 3, 4, 1, 7 },
+
+	/* ARM L2: 1000MHz */
+	{ 0, 3, 7, 3, 4, 1, 7 },
+
+	/* ARM L3: 800MHz */
+	{ 0, 3, 7, 3, 3, 1, 7 },
+
+	/* ARM L4: 500MHz */
+	{ 0, 3, 7, 3, 3, 1, 7 },
+
+	/* ARM L5: 200MHz */
+	{ 0, 1, 3, 1, 3, 1, 0 },
 };
 
 static unsigned int clkdiv_cpu1[CPUFREQ_LEVEL_END][2] = {
 	/* Clock divider value for following
 	 * { DIVCOPY, DIVHPM }
 	 */
-	{ 5, 0 },	/* ARM L0: 1600MHz */
-	{ 5, 0 },	/* ARM L1: 1500MHz */
-	{ 5, 0 },	/* ARM L2: 1400MHz */
-	{ 5, 0 },	/* ARM L3: 1300MHz */
-	{ 5, 0 },	/* ARM L4: 1200MHz */
-	{ 5, 0 },	/* ARM L5: 1100MHz */
-	{ 4, 0 },	/* ARM L6: 1000MHz */
-	{ 4, 0 },	/* ARM L7:  900MHz */
-	{ 3, 0 },	/* ARM L8:  800MHz */
-	{ 3, 0 },	/* ARM L9:  700MHz */
-	{ 3, 0 },	/* ARM L10: 600MHz */
-	{ 3, 0 },	/* ARM L11: 500MHz */
-	{ 3, 0 },	/* ARM L12: 400MHz */
-	{ 3, 0 },	/* ARM L13: 300MHz */
-	{ 3, 0 },	/* ARM L14: 200MHz */
-	{ 3, 0 },	/* ARM L15: 100MHz */
-	{ 3, 0 },	/* ARM L16: 50MHz */
-	{ 3, 0 },	/* ARM L17: 25MHz */
+	/* ARM L0: 1400MHz */
+	{ 5, 0 },
+
+	/* ARM L1: 1200MHz */
+	{ 5, 0 },
+
+	/* ARM L2: 1000MHz */
+	{ 4, 0 },
+
+	/* ARM L3: 800MHz */
+	{ 3, 0 },
+
+	/* ARM L4: 500MHz */
+	{ 3, 0 },
+
+	/* ARM L5: 200MHz */
+	{ 3, 0 },
 };
 
 static unsigned int exynos4_apll_pms_table[CPUFREQ_LEVEL_END] = {
-	((200 << 16)|(3 << 8)|(0x1)),	/* APLL FOUT L0: 1600MHz */
-	((375 << 16)|(6 << 8)|(0x1)),	/* APLL FOUT L1: 1500MHz */
-	((350 << 16)|(6 << 8)|(0x1)),	/* APLL FOUT L2: 1400MHz */
-	((325 << 16)|(6 << 8)|(0x1)),	/* APLL FOUT L3: 1300MHz */
-	((150 << 16)|(3 << 8)|(0x1)),	/* APLL FOUT L4: 1200MHz */
-	((275 << 16)|(6 << 8)|(0x1)),	/* APLL FOUT L5: 1100MHz */
-	((250 << 16)|(6 << 8)|(0x1)),	/* APLL FOUT L6: 1000MHz */
-	((225 << 16)|(6 << 8)|(0x1)),	/* APLL FOUT L7:  900MHz */
-	((200 << 16)|(6 << 8)|(0x1)),	/* APLL FOUT L8:  800MHz */
-	((350 << 16)|(6 << 8)|(0x2)),	/* APLL FOUT L9:  700MHz */
-	((300 << 16)|(6 << 8)|(0x2)),	/* APLL FOUT L10: 600MHz */
-	((250 << 16)|(6 << 8)|(0x2)),	/* APLL FOUT L11: 500MHz */
-	((200 << 16)|(6 << 8)|(0x2)),	/* APLL FOUT L12: 400MHz */
-	((300 << 16)|(6 << 8)|(0x3)),	/* APLL FOUT L13: 300MHz */
-	((200 << 16)|(6 << 8)|(0x3)),	/* APLL FOUT L14: 200MHz */
-	((200 << 16)|(6 << 8)|(0x4)),	/* APLL FOUT L15: 100MHz */
-	((100 << 16)|(6 << 8)|(0x4)),	/* APLL FOUT L16: 50MHz */
-	((50 << 16)|(6 << 8)|(0x4)),	/* APLL FOUT L17: 25MHz */
+	/* APLL FOUT L0: 1400MHz */
+	((350<<16)|(6<<8)|(0x1)),
+
+	/* APLL FOUT L1: 1200MHz */
+	((150<<16)|(3<<8)|(0x1)),
+
+	/* APLL FOUT L2: 1000MHz */
+	((250<<16)|(6<<8)|(0x1)),
+
+	/* APLL FOUT L3: 800MHz */
+	((200<<16)|(6<<8)|(0x1)),
+
+	/* APLL FOUT L4: 500MHz */
+	((250<<16)|(6<<8)|(0x2)),
+
+	/* APLL FOUT L5: 200MHz */
+	((200<<16)|(6<<8)|(0x3)),
 };
 
 /*
@@ -168,24 +141,12 @@
 	 * @500  :
 	 * @200  :
 	 */
-	{ 1450000, 1450000, 1450000, 1450000, 1400000, 1350000, 1350000, 1350000 }, //1600MHz
-	{ 1425000, 1425000, 1400000, 1400000, 1375000, 1325000, 1325000, 1325000 }, //1500MHz
-	{ 1400000, 1400000, 1350000, 1375000, 1300000, 1275000, 1250000, 1225000 }, //1400MHz
-	{ 1375000, 1375000, 1325000, 1350000, 1275000, 1250000, 1225000, 1200000 }, //1300MHz
-	{ 1350000, 1350000, 1300000, 1300000, 1250000, 1225000, 1200000, 1175000 }, //1200MHz
-	{ 1325000, 1325000, 1250000, 1250000, 1200000, 1175000, 1150000, 1125000 }, //1100MHz
-	{ 1300000, 1250000, 1200000, 1200000, 1150000, 1125000, 1100000, 1075000 }, //1000MHz
-	{ 1250000, 1200000, 1150000, 1125000, 1100000, 1075000, 1050000, 1025000 }, // 900MHz
-	{ 1200000, 1150000, 1100000, 1075000, 1050000, 1025000, 1000000,  975000 }, // 800MHz
-	{ 1150000, 1100000, 1075000, 1025000, 1025000, 1000000,  975000,  950000 }, // 700MHz
-	{ 1125000, 1075000, 1025000, 1000000, 1000000,  975000,  950000,  950000 }, // 600MHz
-	{ 1100000, 1050000, 1000000,  975000,  975000,  950000,  925000,  925000 }, // 500MHz
-	{ 1075000, 1025000, 1000000,  975000,  975000,  950000,  925000,  925000 }, // 400MHz
-	{ 1075000, 1025000, 1000000,  975000,  975000,  950000,  925000,  925000 }, // 300MHz
-	{ 1050000, 1000000,  975000,  950000,  950000,  925000,  925000,  925000 }, // 200MHz
-	{ 1025000,  975000,  950000,  925000,  925000,  900000,  900000,  900000 }, // 100MHz
-	{ 1000000,  950000,  925000,  900000,  900000,  875000,  875000,  875000 }, //  50MHz
-	{  975000,  925000,  900000,  875000,  875000,  850000,  850000,  850000 }, //  25MHz
+	{ 0, 0, 0, 0, 0, 0, 0, 0 },
+	{ 1350000, 1350000, 1300000, 1275000, 1250000, 1225000, 1200000, 1175000 },
+	{ 1300000, 1250000, 1200000, 1175000, 1150000, 1125000, 1100000, 1075000 },
+	{ 1200000, 1150000, 1100000, 1075000, 1050000, 1025000, 1000000, 975000 },
+	{ 1100000, 1050000, 1000000, 975000, 975000, 950000, 925000, 925000 },
+	{ 1050000, 1000000, 975000, 950000, 950000, 925000, 925000, 925000 },
 
 };
 
@@ -202,9 +163,9 @@
 	{ 1350000, 1350000, 1300000, 1250000, 1225000 },
 	{ 1325000, 1275000, 1225000, 1175000, 1150000 },
 	{ 1225000, 1175000, 1125000, 1075000, 1050000 },
-	{ 1150000, 1100000, 1050000, 1000000,  975000 },
-	{ 1050000, 1000000,  950000,  950000,  950000 },
-	{ 1025000,  975000,  950000,  950000,  950000 },
+	{ 1150000, 1100000, 1050000, 1000000, 975000 },
+	{ 1050000, 1000000, 950000, 950000, 950000 },
+	{ 1025000, 975000, 950000, 950000, 950000 },
 
 };
 
@@ -356,15 +317,15 @@
 		break;
 	case SUPPORT_1200MHZ:
 		for_1200 = true;
-		max_support_idx = L0; //gm L1;
+		max_support_idx = L1;
 		break;
 	case SUPPORT_1000MHZ:
 		for_1000 = true;
-		max_support_idx = L6;
+		max_support_idx = L2;
 		break;
 	default:
 		for_1000 = true;
-		max_support_idx = L6;
+		max_support_idx = L2;
 		break;
 	}
 
@@ -372,23 +333,22 @@
 	 * If ASV group is S, can not support 1.4GHz
 	 * Disabling table entry
 	 */
-//	if ((asv_group == 0) || !for_1400)
-//		exynos4210_freq_table[L0].frequency = CPUFREQ_ENTRY_INVALID;
+	if ((asv_group == 0) || !for_1400)
+		exynos4210_freq_table[L0].frequency = CPUFREQ_ENTRY_INVALID;
 
 	if (for_1000)
-		exynos4210_freq_table[L4].frequency = CPUFREQ_ENTRY_INVALID;
-		exynos4210_freq_table[L16].frequency = CPUFREQ_ENTRY_INVALID;
-		exynos4210_freq_table[L17].frequency = CPUFREQ_ENTRY_INVALID;
-		printk(KERN_INFO "DVFS : VDD_ARM Voltage table set with %d Group\n", asv_group);
+		exynos4210_freq_table[L1].frequency = CPUFREQ_ENTRY_INVALID;
+
+	printk(KERN_INFO "DVFS : VDD_ARM Voltage table set with %d Group\n", asv_group);
 
 	if (for_1400) {
 		for (i = 0 ; i < CPUFREQ_LEVEL_END ; i++) {
-			exynos4210_volt_table[i] =
+				exynos4210_volt_table[i] =
 					asv_voltage_B[i][asv_group];
 		}
 	} else {
 		for (i = 0 ; i < CPUFREQ_LEVEL_END ; i++) {
-			exynos4210_volt_table[i] =
+				exynos4210_volt_table[i] =
 					asv_voltage_A[i][asv_group];
 		}
 	}
@@ -465,8 +425,8 @@
 	}
 
 	info->mpll_freq_khz = rate;
-	info->pm_lock_idx = L8;
-	info->pll_safe_idx = L6;
+	info->pm_lock_idx = L3;
+	info->pll_safe_idx = L2;
 	info->max_support_idx = max_support_idx;
 	info->min_support_idx = min_support_idx;
 	info->cpu_clk = cpu_clk;
diff -Naur ./arch/arm/mach-exynos/cpufreq-4x12.c ../../HK_JB/Kernel/arch/arm/mach-exynos/cpufreq-4x12.c
--- ./arch/arm/mach-exynos/cpufreq-4x12.c	2012-12-08 20:40:46.117821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/cpufreq-4x12.c	2012-11-22 09:13:15.000000000 +0100
@@ -21,11 +21,12 @@
 #include <mach/pmu.h>
 #include <mach/cpufreq.h>
 #include <mach/asv.h>
+#include <mach/sec_debug.h>
 
 #include <plat/clock.h>
 #include <plat/cpu.h>
 
-#define CPUFREQ_LEVEL_END	(L16 + 1)
+#define CPUFREQ_LEVEL_END	(L14 + 1)
 
 #undef PRINT_DIV_VAL
 
@@ -48,23 +49,21 @@
 static unsigned int exynos4x12_volt_table[CPUFREQ_LEVEL_END];
 
 static struct cpufreq_frequency_table exynos4x12_freq_table[] = {
-	{L0, 1800*1000},
-	{L1, 1700*1000},
-	{L2, 1600*1000},
-	{L3, 1500*1000},
-	{L4, 1400*1000},
-	{L5, 1300*1000},
-	{L6, 1200*1000},
-	{L7, 1100*1000},
-	{L8, 1000*1000},
-	{L9, 900*1000},
-	{L10, 800*1000},
-	{L11, 700*1000},
-	{L12, 600*1000},
-	{L13, 500*1000},
-	{L14, 400*1000},
-	{L15, 300*1000},
-	{L16, 200*1000},
+	{L0, 1600*1000},
+	{L1, 1500*1000},
+	{L2, 1400*1000},
+	{L3, 1300*1000},
+	{L4, 1200*1000},
+	{L5, 1100*1000},
+	{L6, 1000*1000},
+	{L7, 900*1000},
+	{L8, 800*1000},
+	{L9, 700*1000},
+	{L10, 600*1000},
+	{L11, 500*1000},
+	{L12, 400*1000},
+	{L13, 300*1000},
+	{L14, 200*1000},
 	{0, CPUFREQ_TABLE_END},
 };
 
@@ -128,15 +127,8 @@
 	 * { DIVCORE, DIVCOREM0, DIVCOREM1, DIVPERIPH,
 	 *		DIVATB, DIVPCLK_DBG, DIVAPLL, DIVCORE2 }
 	 */
-
-	/* ARM L-2: 1800Mhz */
-	{ 0, 4, 7, 0, 7, 1, 7, 0 },
-
-	/* ARM L-1: 1704Mhz */
-	{ 0, 4, 7, 0, 7, 1, 7, 0 },
-
 	/* ARM L0: 1600Mhz */
-	{ 0, 4, 7, 0, 6, 1, 7, 0 },
+	{ 0, 3, 7, 0, 6, 1, 7, 0 },
 
 	/* ARM L1: 1500Mhz */
 	{ 0, 3, 7, 0, 6, 1, 7, 0 },
@@ -235,13 +227,6 @@
 	/* Clock divider value for following
 	 * { DIVCOPY, DIVHPM, DIVCORES }
 	 */
-
-	/* ARM L-2: 1800MHz */
-	{ 7, 0, 7 },
-
-	/* ARM L-1: 1704MHz */
-	{ 7, 0, 7 },
-
 	/* ARM L0: 1600MHz */
 	{ 6, 0, 7 },
 
@@ -289,12 +274,6 @@
 };
 
 static unsigned int exynos4x12_apll_pms_table[CPUFREQ_LEVEL_END] = {
-	/* APLL FOUT L-2: 1800MHz */
-	((300<<16)|(4<<8)|(0x0)),
-
-	/* APLL FOUT L-1: 1704MHz */
-	((213<<16)|(3<<8)|(0x0)),
-
 	/* APLL FOUT L0: 1600MHz */
 	((200<<16)|(3<<8)|(0x0)),
 
@@ -372,13 +351,32 @@
 	1050000, 1025000, 1000000, 1000000, 1000000, 950000, 950000
 };
 
+#if defined(CONFIG_MACH_GC1)
+/* ASV table for 12.5mV step */
+static const unsigned int asv_voltage_step_12_5[CPUFREQ_LEVEL_END][12] = {
+	/*   ASV0,    ASV1,    ASV2,    ASV3,	 ASV4,	  ASV5,	   ASV6,    ASV7,    ASV8,    ASV9,   ASV10,   ASV11 */
+	{	0,       0,	  0,	   0,	    0,	     0,	      0,       0,       0,       0,	  0,       0 },	/* L0 - Not used */
+	{	0,       0,	  0,	   0,	    0,	     0,	      0,       0,       0,       0,	  0,       0 },	/* L1 - Not used */
+	{ 1325000, 1312500, 1300000, 1287500, 1300000, 1287500,	1275000, 1250000, 1250000, 1237500, 1225000, 1212500 },
+	{ 1300000, 1275000, 1237500, 1237500, 1250000, 1250000,	1237500, 1212500, 1200000, 1200000, 1187500, 1175000 },
+	{ 1225000, 1212500, 1200000, 1187500, 1200000, 1187500,	1175000, 1150000, 1137500, 1125000, 1125000, 1112500 },
+	{ 1175000, 1162500, 1150000, 1137500, 1150000, 1137500,	1125000, 1100000, 1100000, 1075000, 1075000, 1062500 },
+	{ 1125000, 1112500, 1100000, 1087500, 1100000, 1087500,	1075000, 1050000, 1037500, 1025000, 1025000, 1012500 },
+	{ 1100000, 1087500, 1075000, 1075000, 1075000, 1062500,	1050000, 1037500, 1025000, 1012500, 1012500, 1000000 }, /* 900 */
+	{ 1062500, 1050000, 1025000, 1025000, 1025000, 1012500,	1000000,  987500,  987500,  987500,  987500,  975000 }, /* 800 */
+	{ 1012500, 1000000,  975000,  975000,  975000,  975000,	 962500,  962500,  950000,  950000,  950000,  937500 },
+	{ 1000000,  987500,  962500,  962500,  962500,  962500,	 950000,  950000,  937500,  937500,  937500,  925000 },
+	{  987500,  975000,  950000,  937500,  950000,  937500,	 937500,  937500,  912500,  912500,  912500,  900000 },
+	{  975000,  962500,  950000,  925000,  950000,  925000,	 925000,  925000,  900000,  900000,  900000,  887500 },
+	{  950000,  937500,  925000,  900000,  925000,  900000,	 900000,  900000,  900000,  887500,  875000,  862500 },
+	{  925000,  912500,  900000,  900000,  900000,  900000,	 900000,  900000,  887500,  875000,  875000,  862500 },
+};
+#else
 /* ASV table for 12.5mV step */
 static const unsigned int asv_voltage_step_12_5[CPUFREQ_LEVEL_END][12] = {
 	/*   ASV0,    ASV1,    ASV2,    ASV3,	 ASV4,	  ASV5,	   ASV6,    ASV7,    ASV8,    ASV9,   ASV10,   ASV11 */
-	{ 1400000, 1400000, 1400000, 1400000, 1400000, 1400000,	1400000, 1400000, 1400000, 1400000, 1400000, 1400000 },
-	{ 1400000, 1400000, 1400000, 1400000, 1400000, 1400000,	1400000, 1400000, 1400000, 1387500, 1375000, 1362500 },
-	{ 1400000, 1400000, 1400000, 1400000, 1387500, 1387500,	1375000, 1362500, 1350000, 1337500, 1325000, 1312500 },
-	{ 1387500, 1375000, 1362500, 1350000, 1337500, 1325000,	1312500, 1300000, 1287500, 1275000, 1262500, 1250000 },
+	{	0,       0,	  0,	   0,	    0,	     0,	      0,       0,       0,       0,	  0,       0 },	/* L0 - Not used */
+	{	0,       0,	  0,	   0,	    0,	     0,	      0,       0,       0,       0,	  0,       0 },	/* L1 - Not used */
 	{ 1325000, 1312500, 1300000, 1287500, 1300000, 1287500,	1275000, 1250000, 1250000, 1237500, 1225000, 1212500 },
 	{ 1300000, 1275000, 1237500, 1237500, 1250000, 1250000,	1237500, 1212500, 1200000, 1200000, 1187500, 1175000 },
 	{ 1225000, 1212500, 1200000, 1187500, 1200000, 1187500,	1175000, 1150000, 1137500, 1125000, 1125000, 1112500 },
@@ -393,25 +391,25 @@
 	{  950000,  937500,  925000,  900000,  925000,  900000,	 900000,  900000,  900000,  887500,  875000,  862500 },
 	{  925000,  912500,  900000,  900000,  900000,  900000,	 900000,  900000,  887500,  875000,  875000,  862500 },
 };
-
-/* 20120725 DVFS table for pega prime */
+#endif
+/* 20120927 DVFS table for pega prime */
 static const unsigned int asv_voltage_step_12_5_rev2[CPUFREQ_LEVEL_END][13] = {
 	/*   ASV0,    ASV1,    ASV2,    ASV3,	 ASV4,	  ASV5,	   ASV6,    ASV7,    ASV8,    ASV9,   ASV10,   ASV11    ASV12 */
 	{ 1312500, 1312500, 1312500, 1312500, 1300000, 1287500, 1275000, 1262500, 1250000, 1237500, 1212500, 1200000, 1187500 },	/* L0 */
-	{ 1275000, 1262500, 1262500, 1262500, 1250000, 1237500,	1225000, 1212500, 1200000, 1187500, 1162500, 1150000, 1137500 },	/* L1 */
-	{ 1237500, 1225000, 1225000, 1225000, 1212500, 1200000, 1187500, 1175000, 1162500, 1150000, 1125000, 1112500, 1100000 },	/* L2 */
-	{ 1187500, 1175000, 1175000, 1175000, 1162500, 1150000, 1137500, 1125000, 1112500, 1100000, 1075000, 1062500, 1050000 },	/* L3 */
-	{ 1150000, 1137500, 1137500, 1137500, 1125000, 1112500, 1100000, 1087500, 1075000, 1062500, 1037500, 1025000, 1012500 },	/* L4 */
-	{ 1112500, 1100000, 1100000, 1100000, 1087500, 1075000, 1062500, 1050000, 1037500, 1025000, 1000000,  987500,  975000 },	/* L5 */
-	{ 1087500, 1075000, 1075000, 1075000, 1062500, 1050000, 1037500, 1025000, 1012500, 1000000,  975000,  962500,  950000 },	/* L6 */
-	{ 1062500, 1050000, 1050000, 1050000, 1037500, 1025000, 1012500, 1000000,  987500,  975000,  950000,  937500,  925000 },	/* L7 */
-	{ 1025000, 1012500, 1012500, 1012500, 1000000,  987500,  975000,  962500,  950000,  937500,  912500,  900000,  887500 },	/* L8 */
-	{ 1000000,  987500,  987500,  987500,  975000,  962500,  950000,  937500,  925000,  912500,  887500,  887500,  887500 },	/* L9 */
-	{  975000,  962500,  962500,  962500,  950000,  937500,  925000,  912500,  900000,  887500,  875000,  875000,  875000 },	/* L10 */
-	{  962500,  950000,  950000,  950000,  937500,  925000,  912500,  900000,  887500,  887500,  875000,  875000,  875000 },	/* L11 */
-	{  950000,  937500,  937500,  937500,  925000,  912500,  900000,  887500,  887500,  887500,  875000,  875000,  875000 },	/* L12 */
-	{  937500,  925000,  925000,  925000,  912500,  900000,  887500,  887500,  887500,  887500,  875000,  875000,  875000 },	/* L13 */
-	{  925000,  912500,  912500,  912500,  900000,  887500,  887500,  887500,  887500,  887500,  875000,  875000,  875000 },	/* L14 */
+	{ 1312500, 1262500, 1262500, 1262500, 1250000, 1237500,	1225000, 1212500, 1200000, 1187500, 1162500, 1150000, 1137500 },	/* L1 */
+	{ 1275000, 1225000, 1225000, 1225000, 1212500, 1200000, 1187500, 1175000, 1162500, 1150000, 1125000, 1112500, 1100000 },	/* L2 */
+	{ 1225000, 1175000, 1175000, 1175000, 1162500, 1150000, 1137500, 1125000, 1112500, 1100000, 1075000, 1062500, 1050000 },	/* L3 */
+	{ 1187500, 1137500, 1137500, 1137500, 1125000, 1112500, 1100000, 1087500, 1075000, 1062500, 1037500, 1025000, 1012500 },	/* L4 */
+	{ 1150000, 1100000, 1100000, 1100000, 1087500, 1075000, 1062500, 1050000, 1037500, 1025000, 1000000,  987500,  975000 },	/* L5 */
+	{ 1125000, 1075000, 1075000, 1075000, 1062500, 1050000, 1037500, 1025000, 1012500, 1000000,  975000,  962500,  950000 },	/* L6 */
+	{ 1100000, 1050000, 1050000, 1050000, 1037500, 1025000, 1012500, 1000000,  987500,  975000,  950000,  937500,  925000 },	/* L7 */
+	{ 1062500, 1012500, 1012500, 1012500, 1000000,  987500,  975000,  962500,  950000,  937500,  912500,  900000,  887500 },	/* L8 */
+	{ 1037500,  987500,  987500,  987500,  975000,  962500,  950000,  937500,  925000,  912500,  887500,  887500,  887500 },	/* L9 */
+	{ 1012500,  962500,  962500,  962500,  950000,  937500,  925000,  912500,  900000,  887500,  875000,  875000,  875000 },	/* L10 */
+	{ 1000000,  950000,  950000,  950000,  937500,  925000,  912500,  900000,  887500,  887500,  875000,  875000,  875000 },	/* L11 */
+	{  987500,  937500,  937500,  937500,  925000,  912500,  900000,  887500,  887500,  887500,  875000,  875000,  875000 },	/* L12 */
+	{  975000,  925000,  925000,  925000,  912500,  900000,  887500,  887500,  887500,  887500,  875000,  875000,  875000 },	/* L13 */
+	{  962500,  912500,  912500,  912500,  900000,  887500,  887500,  887500,  887500,  887500,  875000,  875000,  875000 },	/* L14 */
 };
 
 static const unsigned int asv_voltage_step_1ghz[CPUFREQ_LEVEL_END][12] = {
@@ -530,6 +528,11 @@
 {
 	unsigned int tmp;
 
+	sec_debug_aux_log(SEC_DEBUG_AUXLOG_CPU_BUS_CLOCK_CHANGE,
+			"%s: old_index=%d, new_index=%d(%ps)",
+			__func__, old_index, new_index,
+			__builtin_return_address(0));
+
 	if (old_index > new_index) {
 		if (exynos4x12_volt_table[new_index] >= 950000 &&
 				need_dynamic_ema)
@@ -586,7 +589,7 @@
 	/* ABB value is changed in below case */
 	if (soc_is_exynos4412() && (exynos_result_of_asv > 3)
 		&& (samsung_rev() < EXYNOS4412_REV_2_0)) {
-		if (new_index == L16)
+		if (new_index == L14)
 			exynos4x12_set_abb_member(ABB_ARM, ABB_MODE_100V);
 		else
 			exynos4x12_set_abb_member(ABB_ARM, ABB_MODE_130V);
@@ -609,8 +612,7 @@
 			index = L2;
 	}
 
-//	return index;
-	return 0;
+	return index;
 }
 
 static void __init set_volt_table(void)
@@ -790,7 +792,7 @@
 	info->mpll_freq_khz = rate;
 #ifdef CONFIG_SLP
 	/* S-Boot at 20120406 uses L8 at bootup */
-	info->pm_lock_idx = L10;
+	info->pm_lock_idx = L8;
 
 	/*
 	 * However, the bootup frequency might get changed anytime.
@@ -807,7 +809,7 @@
 	pr_info("Bootup CPU Frequency = [%d] %dMHz\n", info->pm_lock_idx,
 		rate / 1000);
 #else
-	info->pm_lock_idx = L8;
+	info->pm_lock_idx = L6;
 #endif
 	/*
 	 * ARM clock source will be changed APLL to MPLL temporary
@@ -819,7 +821,7 @@
 	if (samsung_rev() >= EXYNOS4412_REV_2_0)
 		info->pll_safe_idx = L7;
 	else
-		info->pll_safe_idx = L10;
+		info->pll_safe_idx = L8;
 
 	info->max_support_idx = max_support_idx;
 	info->min_support_idx = min_support_idx;
diff -Naur ./arch/arm/mach-exynos/cpufreq-5250.c ../../HK_JB/Kernel/arch/arm/mach-exynos/cpufreq-5250.c
--- ./arch/arm/mach-exynos/cpufreq-5250.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/cpufreq-5250.c	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,526 @@
+/* linux/arch/arm/mach-exynos/cpufreq-5250.c
+ *
+ * Copyright (c) 2010-2011 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com
+ *
+ * EXYNOS5250 - CPU frequency scaling support
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+*/
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/err.h>
+#include <linux/clk.h>
+#include <linux/io.h>
+#include <linux/cpufreq.h>
+
+#include <mach/map.h>
+#include <mach/regs-clock.h>
+#include <mach/regs-pmu.h>
+#include <mach/regs-pmu-5250.h>
+#include <mach/cpufreq.h>
+#include <mach/asv.h>
+
+#include <plat/clock.h>
+#include <plat/cpu.h>
+
+#define CPUFREQ_LEVEL_END	(L20 + 1)
+
+#undef PRINT_DIV_VAL
+
+#undef ENABLE_CLKOUT
+
+static int max_support_idx;
+static int min_support_idx = (CPUFREQ_LEVEL_END - 1);
+static struct clk *cpu_clk;
+static struct clk *moutcore;
+static struct clk *mout_mpll;
+static struct clk *mout_apll;
+
+struct cpufreq_clkdiv {
+	unsigned int	index;
+	unsigned int	clkdiv;
+	unsigned int	clkdiv1;
+};
+
+static unsigned int exynos5250_volt_table[CPUFREQ_LEVEL_END];
+
+static struct cpufreq_frequency_table exynos5250_freq_table[] = {
+	{L0, 2200*1000},
+	{L1, 2100*1000},
+	{L2, 2000*1000},
+	{L3, 1900*1000},
+	{L4, 1800*1000},
+	{L5, 1700*1000},
+	{L6, 1600*1000},
+	{L7, 1500*1000},
+	{L8, 1400*1000},
+	{L9, 1300*1000},
+	{L10, 1200*1000},
+	{L11, 1100*1000},
+	{L12, 1000*1000},
+	{L13, 900*1000},
+	{L14, 800*1000},
+	{L15, 700*1000},
+	{L16, 600*1000},
+	{L17, 500*1000},
+	{L18, 400*1000},
+	{L19, 300*1000},
+	{L20, 200*1000},
+	{0, CPUFREQ_TABLE_END},
+};
+
+static struct cpufreq_clkdiv exynos5250_clkdiv_table[CPUFREQ_LEVEL_END];
+
+static unsigned int clkdiv_cpu0_5250[CPUFREQ_LEVEL_END][8] = {
+	/*
+	 * Clock divider value for following
+	 * { ARM, CPUD, ACP, PERIPH, ATB, PCLK_DBG, APLL, ARM2 }
+	 */
+	{ 0, 5, 7, 7, 7, 1, 5, 0 },	/* L0: 2200Mhz */
+	{ 0, 5, 7, 7, 7, 1, 5, 0 },	/* L1: 2100Mhz */
+	{ 0, 5, 7, 7, 7, 1, 5, 0 },	/* L2: 2000Mhz */
+	{ 0, 4, 7, 7, 7, 1, 5, 0 },	/* L3: 1900Mhz */
+	{ 0, 4, 7, 7, 7, 1, 4, 0 },	/* L4: 1800Mhz */
+	{ 0, 3, 7, 7, 7, 3, 5, 0 },	/* L5: 1700Mhz */
+	{ 0, 3, 7, 7, 7, 1, 4, 0 },	/* L6: 1600MHz */
+	{ 0, 2, 7, 7, 7, 1, 4, 0 },	/* L7: 1500Mhz */
+	{ 0, 2, 7, 7, 6, 1, 4, 0 },	/* L8: 1400Mhz */
+	{ 0, 2, 7, 7, 6, 1, 3, 0 },	/* L9: 1300Mhz */
+	{ 0, 2, 7, 7, 5, 1, 3, 0 },	/* L10: 1200Mhz */
+	{ 0, 3, 7, 7, 5, 1, 3, 0 },	/* L11: 1100MHz */
+	{ 0, 1, 7, 7, 4, 1, 2, 0 },	/* L12: 1000MHz */
+	{ 0, 1, 7, 7, 4, 1, 2, 0 },	/* L13: 900MHz */
+	{ 0, 1, 7, 7, 4, 1, 2, 0 },	/* L14: 800MHz */
+	{ 0, 1, 7, 7, 3, 1, 1, 0 },	/* L15: 700MHz */
+	{ 0, 1, 7, 7, 3, 1, 1, 0 },	/* L16: 600MHz */
+	{ 0, 1, 7, 7, 2, 1, 1, 0 },	/* L17: 500MHz */
+	{ 0, 1, 7, 7, 2, 1, 1, 0 },	/* L18: 400MHz */
+	{ 0, 1, 7, 7, 1, 1, 1, 0 },	/* L19: 300MHz */
+	{ 0, 1, 7, 7, 1, 1, 1, 0 },	/* L20: 200MHz */
+};
+
+static unsigned int clkdiv_cpu1_5250[CPUFREQ_LEVEL_END][2] = {
+	/* Clock divider value for following
+	 * { COPY, HPM }
+	 */
+	{ 0, 2 },	/* L0: 2200Mhz */
+	{ 0, 2 },	/* L1: 2100Mhz */
+	{ 0, 2 },	/* L2: 2000Mhz */
+	{ 0, 2 },	/* L3: 1900Mhz */
+	{ 0, 2 },	/* L4: 1800Mhz */
+	{ 0, 2 },	/* L5: 1700Mhz */
+	{ 0, 2 },	/* L6: 1600MHz */
+	{ 0, 2 },	/* L7: 1500Mhz */
+	{ 0, 2 },	/* L8: 1400Mhz */
+	{ 0, 2 },	/* L9: 1300Mhz */
+	{ 0, 2 },	/* L10: 1200Mhz */
+	{ 0, 2 },	/* L11: 1100MHz */
+	{ 0, 2 },	/* L12: 1000MHz */
+	{ 0, 2 },	/* L13: 900MHz */
+	{ 0, 2 },	/* L14: 800MHz */
+	{ 0, 2 },	/* L15: 700MHz */
+	{ 0, 2 },	/* L16: 600MHz */
+	{ 0, 2 },	/* L17: 500MHz */
+	{ 0, 2 },	/* L18: 400MHz */
+	{ 0, 2 },	/* L19: 300MHz */
+	{ 0, 2 },	/* L20: 200MHz */
+};
+
+static unsigned int exynos5_apll_pms_table[CPUFREQ_LEVEL_END] = {
+	((275<<16)|(3<<8)|(0)),	/* L0: 2200Mhz */
+	((350<<16)|(4<<8)|(0)),	/* L1: 2100Mhz */
+	((250<<16)|(3<<8)|(0)),	/* L2: 2000Mhz */
+	((475<<16)|(6<<8)|(0)),	/* L3: 1900Mhz */
+	((225<<16)|(3<<8)|(0)),	/* L4: 1800Mhz */
+	((425<<16)|(6<<8)|(0)),	/* L5: 1700Mhz */
+	((200<<16)|(3<<8)|(0)),	/* L6: 1600MHz */
+	((250<<16)|(4<<8)|(0)),	/* L7: 1500Mhz */
+	((175<<16)|(3<<8)|(0)),	/* L8: 1400Mhz */
+	((325<<16)|(6<<8)|(0)),	/* L9: 1300Mhz */
+	((200<<16)|(4<<8)|(0)),	/* L10: 1200Mhz */
+	((275<<16)|(6<<8)|(0)),	/* L11: 1100MHz */
+	((125<<16)|(3<<8)|(0)),	/* L12: 1000MHz */
+	((150<<16)|(4<<8)|(0)),	/* L13: 900MHz */
+	((100<<16)|(3<<8)|(0)),	/* L14: 800MHz */
+	((175<<16)|(3<<8)|(1)),	/* L15: 700MHz */
+	((200<<16)|(4<<8)|(1)),	/* L16: 600MHz */
+	((125<<16)|(3<<8)|(1)),	/* L17: 500MHz */
+	((100<<16)|(3<<8)|(1)),	/* L18: 400MHz */
+	((200<<16)|(4<<8)|(2)),	/* L19: 300MHz */
+	((100<<16)|(3<<8)|(2)),	/* L20: 200MHz */
+};
+
+/*
+ * ASV group voltage table
+ */
+
+#define NUM_ASV_GROUP	L10
+
+
+static const unsigned int asv_voltage[CPUFREQ_LEVEL_END][NUM_ASV_GROUP+1] = {
+	/* ASV0 is not exist */
+	/* ASV0,  ASV1,    ASV2,     ASV3,    ASV4,    ASV5,    ASV6,    ASV7,    ASV8,    ASV9,   ASV10 */
+	{ 0 },  /* L0 */
+	{ 0 },  /* L1 */
+	{ 0 },  /* L2 */
+	{ 0 },  /* L3 */
+	{ 0 },  /* L4 */
+	{ 0,   1300000, 1275000, 1287500, 1275000, 1275000, 1262500, 1250000, 1237500, 1225000, 1225000 },    /* L5 */
+	{ 0,   1250000, 1237500, 1250000, 1237500, 1250000, 1237500, 1225000, 1212500, 1200000, 1200000 },    /* L6 */
+	{ 0,   1225000, 1200000, 1212500, 1200000, 1212500, 1200000, 1187500, 1175000, 1175000, 1150000 },    /* L7 */
+	{ 0,   1200000, 1175000, 1200000, 1175000, 1187500, 1175000, 1162500, 1150000, 1137500, 1125000 },    /* L8 */
+	{ 0,   1150000, 1125000, 1150000, 1125000, 1137500, 1125000, 1112500, 1100000, 1087500, 1075000 },    /* L9 */
+	{ 0,   1125000, 1112500, 1125000, 1112500, 1125000, 1112500, 1100000, 1087500, 1075000, 1062500 },    /* L10 */
+	{ 0,   1100000, 1075000, 1100000, 1087500, 1100000, 1087500, 1075000, 1062500, 1050000, 1037500 },    /* L11 */
+	{ 0,   1075000, 1050000, 1062500, 1050000, 1062500, 1050000, 1050000, 1037500, 1025000, 1012500 },    /* L12 */
+	{ 0,   1050000, 1025000, 1050000, 1037500, 1050000, 1037500, 1025000, 1012500, 1000000,  987500 },    /* L13 */
+	{ 0,   1025000, 1012500, 1025000, 1012500, 1025000, 1012500, 1000000, 1000000,  987500,  975000 },     /* L14 */
+	{ 0,   1012500, 1000000, 1012500, 1000000, 1012500, 1000000,  987500,  975000,  975000,  962500 },     /* L15 */
+	{ 0,   1000000,  975000, 1000000,  975000, 1000000,  987500,  975000,  962500,  962500,  950000 },     /* L16 */
+	{ 0,    975000,  962500,  975000,  962500,  975000,  962500,  950000,  937500,  925000,  925000 },     /* L17 */
+	{ 0,    950000,  937500,  950000,  937500,  950000,  937500,  925000,  925000,  925000,  912500 },     /* L18 */
+	{ 0,    937500,  925000,  937500,  925000,  937500,  925000,  912500,  912500,  900000,  900000 },     /* L19 */
+	{ 0,    925000,  912500,  925000,  912500,  925000,  912500,  900000,  900000,  887500,  887500  },    /* L20 */
+};
+
+static const unsigned int asv_voltage_rev0[CPUFREQ_LEVEL_END][NUM_ASV_GROUP] = {
+	{ 0 },	/* L0 */
+	{ 0 },	/* L1 */
+	{ 0 },	/* L2 */
+	{ 0 },	/* L3 */
+	{ 0 },	/* L4 */
+	{ 1200000 },	/* L5 */
+	{ 1200000 },	/* L6 */
+	{ 1200000 },	/* L7 */
+	{ 1200000 },	/* L8 */
+	{ 1200000 },	/* L9 */
+	{ 1200000 },	/* L10 */
+	{ 1200000 },	/* L11 */
+	{ 1175000 },	/* L12 */
+	{ 1125000 },	/* L13 */
+	{ 1075000 },	/* L14 */
+	{ 1050000 },	/* L15 */
+	{ 1000000 },	/* L16 */
+	{ 950000 },	/* L17 */
+	{ 925000 },	/* L18 */
+	{ 925000 },	/* L19 */
+	{ 900000 },	/* L20 */
+};
+
+#if defined(CONFIG_EXYNOS5250_ABB_WA)
+#define ARM_RBB		6	/* +300mV */
+unsigned int exynos5250_arm_volt;
+
+#define INT_VOLT	1050000
+#endif
+
+static void set_clkdiv(unsigned int div_index)
+{
+	unsigned int tmp;
+
+	/* Change Divider - CPU0 */
+
+	tmp = exynos5250_clkdiv_table[div_index].clkdiv;
+
+	__raw_writel(tmp, EXYNOS5_CLKDIV_CPU0);
+
+	do {
+		tmp = __raw_readl(EXYNOS5_CLKDIV_STATCPU0);
+	} while (tmp & 0x11111111);
+
+#ifdef PRINT_DIV_VAL
+	tmp = __raw_readl(EXYNOS5_CLKDIV_CPU0);
+	pr_info("DIV_CPU0[0x%x]\n", tmp);
+
+#endif
+
+	/* Change Divider - CPU1 */
+	tmp = exynos5250_clkdiv_table[div_index].clkdiv1;
+
+	__raw_writel(tmp, EXYNOS5_CLKDIV_CPU1);
+
+	do {
+		tmp = __raw_readl(EXYNOS5_CLKDIV_STATCPU1);
+	} while (tmp & 0x11);
+#ifdef PRINT_DIV_VAL
+	tmp = __raw_readl(EXYNOS5_CLKDIV_CPU1);
+	pr_info("DIV_CPU1[0x%x]\n", tmp);
+#endif
+}
+
+static void set_apll(unsigned int new_index,
+			     unsigned int old_index)
+{
+	unsigned int tmp, pdiv;
+
+	/* 1. MUX_CORE_SEL = MPLL,
+	 * ARMCLK uses MPLL for lock time */
+	if (clk_set_parent(moutcore, mout_mpll))
+		pr_err("Unable to set parent %s of clock %s.\n",
+			mout_mpll->name, moutcore->name);
+
+	do {
+		tmp = (__raw_readl(EXYNOS5_CLKMUX_STATCPU) >> 16);
+		tmp &= 0x7;
+	} while (tmp != 0x2);
+
+	/* 2. Set APLL Lock time */
+	pdiv = ((exynos5_apll_pms_table[new_index] >> 8) & 0x3f);
+
+	__raw_writel((pdiv * 250), EXYNOS5_APLL_LOCK);
+
+	/* 3. Change PLL PMS values */
+	tmp = __raw_readl(EXYNOS5_APLL_CON0);
+	tmp &= ~((0x3ff << 16) | (0x3f << 8) | (0x7 << 0));
+	tmp |= exynos5_apll_pms_table[new_index];
+	__raw_writel(tmp, EXYNOS5_APLL_CON0);
+
+	/* 4. wait_lock_time */
+	do {
+		tmp = __raw_readl(EXYNOS5_APLL_CON0);
+	} while (!(tmp & (0x1 << 29)));
+
+	/* 5. MUX_CORE_SEL = APLL */
+	if (clk_set_parent(moutcore, mout_apll))
+		pr_err("Unable to set parent %s of clock %s.\n",
+			mout_apll->name, moutcore->name);
+
+	do {
+		tmp = __raw_readl(EXYNOS5_CLKMUX_STATCPU);
+		tmp &= (0x7 << 16);
+	} while (tmp != (0x1 << 16));
+
+}
+
+bool exynos5250_pms_change(unsigned int old_index, unsigned int new_index)
+{
+	unsigned int old_pm = (exynos5_apll_pms_table[old_index] >> 8);
+	unsigned int new_pm = (exynos5_apll_pms_table[new_index] >> 8);
+
+	return (old_pm == new_pm) ? 0 : 1;
+}
+
+#if defined(CONFIG_EXYNOS5250_ABB_WA)
+static DEFINE_SPINLOCK(abb_lock);
+void exynos5250_set_arm_abbg(unsigned int arm_volt, unsigned int int_volt)
+{
+	unsigned int setbits = 8;
+	unsigned int tmp, diff_volt;
+	unsigned long flag;
+
+	spin_lock_irqsave(&abb_lock, flag);
+	if (arm_volt >= int_volt) {
+		diff_volt = arm_volt - int_volt;
+		setbits += diff_volt / 50000;
+	} else {
+		diff_volt = int_volt - arm_volt;
+		setbits -= diff_volt / 50000;
+	}
+	tmp = __raw_readl(EXYNOS5_ABBG_ARM_CONTROL);
+	tmp &= ~(0x1f | (1 << 31) | (1 << 7));
+	tmp |= ((setbits + ARM_RBB) | (1 << 31) | (1 << 7));
+	__raw_writel(tmp, EXYNOS5_ABBG_ARM_CONTROL);
+	spin_unlock_irqrestore(&abb_lock, flag);
+}
+EXPORT_SYMBOL(exynos5250_set_arm_abbg);
+#endif
+
+static void exynos5250_set_frequency(unsigned int old_index,
+				  unsigned int new_index)
+{
+	unsigned int tmp;
+#if defined(CONFIG_EXYNOS5250_ABB_WA)
+	unsigned int voltage;
+
+	if (samsung_rev() < EXYNOS5250_REV_1_0) {
+		voltage = asv_voltage_rev0[new_index][0];
+		exynos5250_set_arm_abbg(voltage, INT_VOLT);
+	}
+#endif
+	if (old_index > new_index) {
+		if (!exynos5250_pms_change(old_index, new_index)) {
+			/* 1. Change the system clock divider values */
+			set_clkdiv(new_index);
+			/* 2. Change just s value in apll m,p,s value */
+			tmp = __raw_readl(EXYNOS5_APLL_CON0);
+			tmp &= ~(0x7 << 0);
+			tmp |= (exynos5_apll_pms_table[new_index] & 0x7);
+			__raw_writel(tmp, EXYNOS5_APLL_CON0);
+
+		} else {
+			/* Clock Configuration Procedure */
+			/* 1. Change the system clock divider values */
+			set_clkdiv(new_index);
+			/* 2. Change the apll m,p,s value */
+			set_apll(new_index, old_index);
+		}
+	} else if (old_index < new_index) {
+		if (!exynos5250_pms_change(old_index, new_index)) {
+			/* 1. Change just s value in apll m,p,s value */
+			tmp = __raw_readl(EXYNOS5_APLL_CON0);
+			tmp &= ~(0x7 << 0);
+			tmp |= (exynos5_apll_pms_table[new_index] & 0x7);
+			__raw_writel(tmp, EXYNOS5_APLL_CON0);
+			/* 2. Change the system clock divider values */
+			set_clkdiv(new_index);
+		} else {
+			/* Clock Configuration Procedure */
+			/* 1. Change the apll m,p,s value */
+			set_apll(new_index, old_index);
+			/* 2. Change the system clock divider values */
+			set_clkdiv(new_index);
+		}
+	}
+}
+
+static void __init set_volt_table(void)
+{
+	unsigned int asv_group;
+	unsigned int i;
+
+	if (soc_is_exynos5250()) {
+		exynos5250_freq_table[L0].frequency = CPUFREQ_ENTRY_INVALID;
+		exynos5250_freq_table[L1].frequency = CPUFREQ_ENTRY_INVALID;
+		exynos5250_freq_table[L2].frequency = CPUFREQ_ENTRY_INVALID;
+		exynos5250_freq_table[L3].frequency = CPUFREQ_ENTRY_INVALID;
+		exynos5250_freq_table[L4].frequency = CPUFREQ_ENTRY_INVALID;
+
+		switch (samsung_rev() & 0xf0) {
+		case EXYNOS5250_REV_0:
+			exynos5250_freq_table[L5].frequency = CPUFREQ_ENTRY_INVALID;
+			exynos5250_freq_table[L6].frequency = CPUFREQ_ENTRY_INVALID;
+			exynos5250_freq_table[L7].frequency = CPUFREQ_ENTRY_INVALID;
+			exynos5250_freq_table[L8].frequency = CPUFREQ_ENTRY_INVALID;
+			exynos5250_freq_table[L9].frequency = CPUFREQ_ENTRY_INVALID;
+			exynos5250_freq_table[L10].frequency = CPUFREQ_ENTRY_INVALID;
+			exynos5250_freq_table[L11].frequency = CPUFREQ_ENTRY_INVALID;
+
+			max_support_idx = L12;
+			break;
+		case EXYNOS5250_REV_1_0:
+			max_support_idx = L5;
+			break;
+		default:
+			pr_err("%s: Can't find cpu revision(%d) type\n", __func__,
+				samsung_rev());
+			break;
+		}
+	}
+
+	if (soc_is_exynos5250() && samsung_rev() < EXYNOS5250_REV_1_0)
+		asv_group = 0;
+	else
+		asv_group = exynos_result_of_asv;
+
+	pr_info("DVFS : VDD_ARM Voltage table set with %d Group\n", asv_group);
+	pr_info("DVFS : VDD_ARM Voltage of max level is %d\n", asv_voltage[max_support_idx][asv_group]);
+	
+	for (i = 0 ; i < CPUFREQ_LEVEL_END ; i++) {
+		if (samsung_rev() < EXYNOS5250_REV_1_0)
+			exynos5250_volt_table[i] = asv_voltage_rev0[i][asv_group];
+		else
+			exynos5250_volt_table[i] = asv_voltage[i][asv_group];
+	}
+}
+
+int exynos5250_cpufreq_init(struct exynos_dvfs_info *info)
+{
+	int i;
+	unsigned int tmp;
+	unsigned long rate;
+
+	set_volt_table();
+
+	cpu_clk = clk_get(NULL, "armclk");
+	if (IS_ERR(cpu_clk))
+		return PTR_ERR(cpu_clk);
+
+	moutcore = clk_get(NULL, "moutcpu");
+	if (IS_ERR(moutcore))
+		goto err_moutcore;
+
+	mout_mpll = clk_get(NULL, "mout_mpll");
+	if (IS_ERR(mout_mpll))
+		goto err_mout_mpll;
+
+	rate = clk_get_rate(mout_mpll) / 1000;
+
+	mout_apll = clk_get(NULL, "mout_apll");
+	if (IS_ERR(mout_apll))
+		goto err_mout_apll;
+
+	for (i = L0; i <  CPUFREQ_LEVEL_END; i++) {
+
+		exynos5250_clkdiv_table[i].index = i;
+
+		tmp = __raw_readl(EXYNOS5_CLKDIV_CPU0);
+
+		tmp &= ~((0x7 << 0) | (0x7 << 4) | (0x7 << 8) |
+			(0x7 << 12) | (0x7 << 16) | (0x7 << 20) |
+			(0x7 << 24) | (0x7 << 28));
+
+		tmp |= ((clkdiv_cpu0_5250[i][0] << 0) |
+			(clkdiv_cpu0_5250[i][1] << 4) |
+			(clkdiv_cpu0_5250[i][2] << 8) |
+			(clkdiv_cpu0_5250[i][3] << 12) |
+			(clkdiv_cpu0_5250[i][4] << 16) |
+			(clkdiv_cpu0_5250[i][5] << 20) |
+			(clkdiv_cpu0_5250[i][6] << 24) |
+			(clkdiv_cpu0_5250[i][7] << 28));
+
+		exynos5250_clkdiv_table[i].clkdiv = tmp;
+
+		tmp = __raw_readl(EXYNOS5_CLKDIV_CPU1);
+
+		tmp &= ~((0x7 << 0) | (0x7 << 4));
+
+		tmp |= ((clkdiv_cpu1_5250[i][0] << 0) |
+			(clkdiv_cpu1_5250[i][1] << 4));
+
+		exynos5250_clkdiv_table[i].clkdiv1 = tmp;
+	}
+
+	info->mpll_freq_khz = rate;
+	/* 1000Mhz */
+	info->pm_lock_idx = L12;
+	/* 800Mhz */
+	info->pll_safe_idx = L14;
+	info->max_support_idx = max_support_idx;
+	info->min_support_idx = min_support_idx;
+	info->cpu_clk = cpu_clk;
+	info->volt_table = exynos5250_volt_table;
+	info->freq_table = exynos5250_freq_table;
+	info->set_freq = exynos5250_set_frequency;
+	info->need_apll_change = exynos5250_pms_change;
+
+#ifdef ENABLE_CLKOUT
+	tmp = __raw_readl(EXYNOS5_CLKOUT_CMU_CPU);
+	p &= ~0xffff;
+	tmp |= 0x1904;
+	__raw_writel(tmp, EXYNOS5_CLKOUT_CMU_CPU);
+
+	tmp = __raw_readl(S5P_PMU_DEBUG);
+	tmp &= ~0xf00;
+	tmp |= 0x400;
+	__raw_writel(tmp, S5P_PMU_DEBUG);
+
+#endif
+	return 0;
+
+err_mout_apll:
+	if (!IS_ERR(mout_mpll))
+		clk_put(mout_mpll);
+err_mout_mpll:
+	if (!IS_ERR(moutcore))
+		clk_put(moutcore);
+err_moutcore:
+	if (!IS_ERR(cpu_clk))
+		clk_put(cpu_clk);
+
+	pr_err("%s: failed initialization\n", __func__);
+	return -EINVAL;
+}
+EXPORT_SYMBOL(exynos5250_cpufreq_init);
diff -Naur ./arch/arm/mach-exynos/cpufreq.c ../../HK_JB/Kernel/arch/arm/mach-exynos/cpufreq.c
--- ./arch/arm/mach-exynos/cpufreq.c	2012-12-08 20:40:46.117821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/cpufreq.c	2012-11-22 09:13:15.000000000 +0100
@@ -20,7 +20,7 @@
 #include <linux/cpufreq.h>
 #include <linux/suspend.h>
 #include <linux/reboot.h>
-#include <linux/pm_qos.h>
+#include <linux/pm_qos_params.h>
 
 #include <mach/map.h>
 #include <mach/regs-clock.h>
@@ -64,9 +64,7 @@
 
 unsigned int exynos_getspeed(unsigned int cpu)
 {
-	unsigned int ret = clk_get_rate(exynos_info->cpu_clk) / 1000;
-	if(ret == 1704000) ret = 1700000;
-	return ret;
+	return clk_get_rate(exynos_info->cpu_clk) / 1000;
 }
 
 static unsigned int exynos_get_safe_armvolt(unsigned int old_index, unsigned int new_index)
@@ -93,8 +91,6 @@
 	return safe_arm_volt;
 }
 
-unsigned int smooth_level = L4;
-
 static int exynos_target(struct cpufreq_policy *policy,
 			  unsigned int target_freq,
 			  unsigned int relation)
@@ -142,8 +138,8 @@
 
 #if defined(CONFIG_CPU_EXYNOS4210)
 	/* Do NOT step up max arm clock directly to reduce power consumption */
-	if (index <= 4 && old_index > smooth_level && smooth_level >= L4)
-		index = smooth_level;
+	if (index == exynos_info->max_support_idx && old_index > 3)
+		index = 3;
 #endif
 
 	freqs.new = freq_table[index].frequency;
@@ -679,7 +675,6 @@
 
 static struct notifier_block exynos_cpufreq_notifier = {
 	.notifier_call = exynos_cpufreq_notifier_event,
-	.priority = INT_MIN, /* done last - originally by arighi */
 };
 
 static int exynos_cpufreq_policy_notifier_call(struct notifier_block *this,
@@ -714,14 +709,12 @@
 
 static int exynos_cpufreq_cpu_init(struct cpufreq_policy *policy)
 {
-	policy->cur = policy->min = policy->max = 
-		policy->max_suspend = policy->min_suspend = 
-			exynos_getspeed(policy->cpu);
+	policy->cur = policy->min = policy->max = exynos_getspeed(policy->cpu);
 
 	cpufreq_frequency_table_get_attr(exynos_info->freq_table, policy->cpu);
 
 	/* set the transition latency value */
-	policy->cpuinfo.transition_latency = 60 * 1000;
+	policy->cpuinfo.transition_latency = 100000;
 
 	/*
 	 * EXYNOS4 multi-core processors has 2 cores
@@ -736,20 +729,7 @@
 		cpumask_setall(policy->cpus);
 	}
 
-	/* Safe default startup limits */
-	policy->max_suspend = CPU_MAX_SUSPEND_FREQ;
-	policy->min_suspend = CPU_MIN_SUSPEND_FREQ;
-	cpufreq_frequency_table_cpuinfo(policy, exynos_info->freq_table);
-
-	/* Safe default startup limits */
-#ifdef CONFIG_CPU_EXYNOS4210
-	policy->max = 1200000;
-#else
-	policy->max = 1400000;
-#endif
-	policy->min = 200000;
-
-	return 0;
+	return cpufreq_frequency_table_cpuinfo(policy, exynos_info->freq_table);
 }
 
 static int exynos_cpufreq_reboot_notifier_call(struct notifier_block *this,
diff -Naur ./arch/arm/mach-exynos/cpuidle-exynos4.c ../../HK_JB/Kernel/arch/arm/mach-exynos/cpuidle-exynos4.c
--- ./arch/arm/mach-exynos/cpuidle-exynos4.c	2012-12-08 20:40:46.117821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/cpuidle-exynos4.c	2012-11-22 09:13:15.000000000 +0100
@@ -15,7 +15,6 @@
 #include <linux/suspend.h>
 #include <linux/platform_device.h>
 #include <linux/gpio.h>
-#include <asm/cp15.h>
 
 #include <asm/proc-fns.h>
 #include <asm/tlbflush.h>
@@ -342,10 +341,12 @@
 #endif
 }
 
-#ifdef CONFIG_SND_SAMSUNG_RP
-#if defined(CONFIG_MACH_U1_NA_SPR)
+#ifdef CONFIG_MACH_U1_NA_SPR
 #include "../../../sound/soc/samsung/srp-types.h"
+#include "../../../sound/soc/samsung/idma.h"
 #endif
+
+#ifdef CONFIG_SND_SAMSUNG_RP
 extern int srp_get_op_level(void);	/* By srp driver */
 #endif
 
@@ -374,11 +375,43 @@
 #ifdef CONFIG_INTERNAL_MODEM_IF
 static int check_idpram_op(void)
 {
+#ifdef CONFIG_SEC_MODEM_U1_SPR
+	/*
+	If GPIO_CP_DUMP_INT is HIGH, dpram is in use.
+	If there is a cmd in cp's mbx, dpram is in use.
+	*/
+
+	/* block any further write's into dpram from ap*/
+	gpio_set_value(GPIO_PDA_ACTIVE, 0);
+
+	if (gpio_get_value(GPIO_CP_DUMP_INT) ||
+		!gpio_get_value(GPIO_DPRAM_INT_CP_N)) {
+		pr_info("LPA. dpram is in use\n");
+		gpio_set_value(GPIO_PDA_ACTIVE, 1);
+		return 1;
+	}
+
+	/* dpram is not in use, so keep GPIO_PDA_ACTIVE low and return */
+	return 0;
+#else
 	/* This pin is high when CP might be accessing dpram */
 	int cp_int = gpio_get_value(GPIO_CP_AP_DPRAM_INT);
 	if (cp_int != 0)
 		pr_info("%s cp_int is high.\n", __func__);
 	return cp_int;
+#endif
+}
+#endif
+
+#if defined(CONFIG_ISDBT)
+static int check_isdbt_op(void)
+{
+	/* This pin is high when isdbt is working */
+	int isdbt_is_running = gpio_get_value(GPIO_ISDBT_EN);
+
+	if (isdbt_is_running != 0)
+		printk(KERN_INFO "isdbt_is_running is high\n");
+	return isdbt_is_running;
 }
 #endif
 
@@ -411,21 +444,28 @@
 #ifdef CONFIG_SND_SAMSUNG_RP
 	if (srp_get_op_level())
 		return 1;
-#if defined(CONFIG_MACH_U1_NA_SPR)
+#endif
+
+#ifdef CONFIG_MACH_U1_NA_SPR
+#ifdef CONFIG_SND_SAMSUNG_RP
 	if (!srp_get_status(IS_RUNNING))
 		return 1;
+#elif defined(CONFIG_SND_SAMSUNG_ALP)
+	if (!idma_is_running())
+		return 1;
 #endif
 #endif
+
 	if (check_usb_op())
 		return 1;
 
-#if defined(CONFIG_BT)
-	if (check_bt_op())
+#if defined(CONFIG_ISDBT)
+	if (check_isdbt_op())
 		return 1;
 #endif
 
-#ifdef CONFIG_INTERNAL_MODEM_IF
-	if (check_idpram_op())
+#if defined(CONFIG_BT)
+	if (check_bt_op())
 		return 1;
 #endif
 
@@ -440,6 +480,10 @@
 		return 1;
 	}
 
+#ifdef CONFIG_INTERNAL_MODEM_IF
+	if (check_idpram_op())
+		return 1;
+#endif
 	return 0;
 }
 
@@ -509,7 +553,7 @@
 	outer_clean_range(virt_to_phys(cpu_resume),
 			  virt_to_phys(cpu_resume + 0x40));
 	outer_clean_range(phy_ttb_base, phy_ttb_base + 0xffff);
-	flush_cache_louis();
+	flush_cache_all();
 }
 
 static void exynos4_set_wakeupmask(void)
@@ -1021,7 +1065,7 @@
 	l2x0_save[1] = __raw_readl(S5P_VA_L2CC + 0x10C);
 	l2x0_save[2] = __raw_readl(S5P_VA_L2CC + 0xF60);
 
-	flush_cache_louis();
+	flush_cache_all();
 	outer_clean_range(virt_to_phys(l2x0_save), ARRAY_SIZE(l2x0_save));
 	outer_clean_range(virt_to_phys(scu_save), ARRAY_SIZE(scu_save));
 }
@@ -1045,7 +1089,7 @@
 
 	ret = cpuidle_register_driver(&exynos4_idle_driver);
 
-	if(ret < 0){
+	if (ret < 0) {
 		printk(KERN_ERR "exynos4 idle register driver failed\n");
 		return ret;
 	}
@@ -1122,7 +1166,7 @@
 	l2x0_save[1] = __raw_readl(S5P_VA_L2CC + 0x10C);
 	l2x0_save[2] = __raw_readl(S5P_VA_L2CC + 0xF60);
 
-	flush_cache_louis();
+	flush_cache_all();
 	outer_clean_range(virt_to_phys(l2x0_save), ARRAY_SIZE(l2x0_save));
 	outer_clean_range(virt_to_phys(scu_save), ARRAY_SIZE(scu_save));
 
diff -Naur ./arch/arm/mach-exynos/cpuidle-exynos5.c ../../HK_JB/Kernel/arch/arm/mach-exynos/cpuidle-exynos5.c
--- ./arch/arm/mach-exynos/cpuidle-exynos5.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/cpuidle-exynos5.c	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,674 @@
+/* linux/arch/arm/mach-exynos/cpuidle-exynos5.c
+ *
+ * Copyright (c) 2011 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+*/
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/cpuidle.h>
+#include <linux/io.h>
+#include <linux/suspend.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+
+#include <asm/proc-fns.h>
+#include <asm/tlbflush.h>
+#include <asm/cacheflush.h>
+
+#include <plat/pm.h>
+#include <plat/gpio-cfg.h>
+#include <plat/gpio-core.h>
+#include <plat/regs-otg.h>
+#include <plat/devs.h>
+#include <plat/cpu.h>
+
+#include <mach/regs-pmu5.h>
+#include <mach/pm-core.h>
+#include <mach/pmu.h>
+#include <mach/regs-clock.h>
+#include <mach/smc.h>
+#include <mach/clock-domain.h>
+#include <mach/regs-usb-phy.h>
+
+#ifdef CONFIG_ARM_TRUSTZONE
+#define REG_DIRECTGO_ADDR       (S5P_VA_SYSRAM_NS + 0x24)
+#define REG_DIRECTGO_FLAG       (S5P_VA_SYSRAM_NS + 0x20)
+#else
+#define REG_DIRECTGO_ADDR	(S5P_VA_SYSRAM + 0x24)
+#define REG_DIRECTGO_FLAG	(S5P_VA_SYSRAM + 0x20)
+#endif
+
+extern unsigned long sys_pwr_conf_addr;
+
+static int exynos5_enter_idle(struct cpuidle_device *dev,
+			      struct cpuidle_state *state);
+
+static int __maybe_unused exynos5_enter_lowpower(struct cpuidle_device *dev,
+						 struct cpuidle_state *state);
+
+struct check_reg_lpa {
+	void __iomem	*check_reg;
+	unsigned int	check_bit;
+};
+
+/*
+ * List of check power domain list for LPA mode
+ * These register are have to power off to enter LPA mode
+ */
+static struct check_reg_lpa exynos5_power_domain[] = {
+	{.check_reg = EXYNOS5_GSCL_STATUS,	.check_bit = 0x7},
+	{.check_reg = EXYNOS5_G3D_STATUS,	.check_bit = 0x7},
+};
+
+/*
+ * List of check clock gating list for LPA mode
+ * If clock of list is not gated, system can not enter LPA mode.
+ */
+static struct check_reg_lpa exynos5_clock_gating[] = {
+	{.check_reg = EXYNOS5_CLKSRC_MASK_DISP1_0,	.check_bit = 0x00000001},
+	{.check_reg = EXYNOS5_CLKGATE_IP_DISP1,		.check_bit = 0x00000010},
+	{.check_reg = EXYNOS5_CLKGATE_IP_MFC,		.check_bit = 0x00000001},
+	{.check_reg = EXYNOS5_CLKGATE_IP_GEN,		.check_bit = 0x00004016},
+	{.check_reg = EXYNOS5_CLKGATE_IP_FSYS,		.check_bit = 0x00000002},
+	{.check_reg = EXYNOS5_CLKGATE_IP_PERIC,		.check_bit = 0x00377FC0},
+};
+
+enum hc_type {
+	HC_SDHC,
+	HC_MSHC,
+};
+
+struct check_device_op {
+	void __iomem		*base;
+	struct platform_device	*pdev;
+	enum hc_type		type;
+};
+
+static struct check_device_op chk_sdhc_op[] = {
+#if defined(CONFIG_EXYNOS4_DEV_DWMCI)
+	{.base = 0, .pdev = &exynos_device_dwmci, .type = HC_MSHC},
+#endif
+#if defined(CONFIG_S3C_DEV_HSMMC)
+	{.base = 0, .pdev = &s3c_device_hsmmc0, .type = HC_SDHC},
+#endif
+#if defined(CONFIG_S3C_DEV_HSMMC1)
+	{.base = 0, .pdev = &s3c_device_hsmmc1, .type = HC_SDHC},
+#endif
+#if defined(CONFIG_S3C_DEV_HSMMC2)
+	{.base = 0, .pdev = &s3c_device_hsmmc2, .type = HC_SDHC},
+#endif
+#if defined(CONFIG_S3C_DEV_HSMMC3)
+	{.base = 0, .pdev = &s3c_device_hsmmc3, .type = HC_SDHC},
+#endif
+};
+
+static struct check_device_op chk_sdhc_op_exynos5250_rev1[] = {
+#if defined(CONFIG_EXYNOS4_DEV_DWMCI)
+	{.base = 0, .pdev = &exynos_device_dwmci0, .type = HC_MSHC},
+	{.base = 0, .pdev = &exynos_device_dwmci1, .type = HC_MSHC},
+	{.base = 0, .pdev = &exynos_device_dwmci2, .type = HC_MSHC},
+	{.base = 0, .pdev = &exynos_device_dwmci3, .type = HC_MSHC},
+#endif
+};
+
+#define S3C_HSMMC_PRNSTS	(0x24)
+#define S3C_HSMMC_CLKCON	(0x2c)
+#define S3C_HSMMC_CMD_INHIBIT	0x00000001
+#define S3C_HSMMC_DATA_INHIBIT	0x00000002
+#define S3C_HSMMC_CLOCK_CARD_EN	0x0004
+
+#define MSHCI_CLKENA	(0x10)  /* Clock enable */
+#define MSHCI_STATUS	(0x48)  /* Status */
+#define MSHCI_DATA_BUSY	(0x1<<9)
+#define MSHCI_DATA_STAT_BUSY	(0x1<<10)
+#define MSHCI_ENCLK	(0x1)
+
+static int sdmmc_dev_num;
+/* If SD/MMC interface is working: return = 1 or not 0 */
+static int check_sdmmc_op(unsigned int ch)
+{
+	unsigned int reg1, reg2;
+	void __iomem *base_addr;
+
+	if (unlikely(ch >= sdmmc_dev_num)) {
+		printk(KERN_ERR "Invalid ch[%d] for SD/MMC\n", ch);
+		return 0;
+	}
+
+	if (soc_is_exynos5250() && (samsung_rev() >= EXYNOS5250_REV_1_0)) {
+		if (chk_sdhc_op_exynos5250_rev1[ch].type == HC_MSHC) {
+			base_addr = chk_sdhc_op_exynos5250_rev1[ch].base;
+			/* Check STATUS [9] for data busy */
+			reg1 = readl(base_addr + MSHCI_STATUS);
+			return (reg1 & (MSHCI_DATA_BUSY)) ||
+			       (reg1 & (MSHCI_DATA_STAT_BUSY));
+		}
+	} else {
+		if (chk_sdhc_op[ch].type == HC_SDHC) {
+			base_addr = chk_sdhc_op[ch].base;
+			/* Check CLKCON [2]: ENSDCLK */
+			reg2 = readl(base_addr + S3C_HSMMC_CLKCON);
+			return !!(reg2 & (S3C_HSMMC_CLOCK_CARD_EN));
+		} else if (chk_sdhc_op[ch].type == HC_MSHC) {
+			base_addr = chk_sdhc_op[ch].base;
+			/* Check STATUS [9] for data busy */
+			reg1 = readl(base_addr + MSHCI_STATUS);
+			return (reg1 & (MSHCI_DATA_BUSY)) ||
+			       (reg1 & (MSHCI_DATA_STAT_BUSY));
+		}
+	}
+	/* should not be here */
+	return 0;
+}
+
+/* Check all sdmmc controller */
+static int loop_sdmmc_check(void)
+{
+	unsigned int iter;
+
+	for (iter = 0; iter < sdmmc_dev_num; iter++) {
+		if (check_sdmmc_op(iter)) {
+			printk(KERN_DEBUG "SDMMC [%d] working\n", iter);
+			return 1;
+		}
+	}
+	return 0;
+}
+
+static int exynos5_check_reg_status(struct check_reg_lpa *reg_list,
+				    unsigned int list_cnt)
+{
+	unsigned int i;
+	unsigned int tmp;
+
+	for (i = 0; i < list_cnt; i++) {
+		tmp = __raw_readl(reg_list[i].check_reg);
+		if (tmp & reg_list[i].check_bit)
+			return -EBUSY;
+	}
+
+	return 0;
+}
+
+static int exynos5_uart_fifo_check(void)
+{
+	unsigned int ret;
+	unsigned int check_val;
+
+	ret = 0;
+
+	/* Check UART for console is empty */
+	check_val = __raw_readl(S5P_VA_UART(CONFIG_S3C_LOWLEVEL_UART_PORT) +
+				0x18);
+
+	ret = ((check_val >> 16) & 0xff);
+
+	return ret;
+}
+
+static struct cpuidle_state exynos5_cpuidle_set[] = {
+	[0] = {
+		.enter			= exynos5_enter_idle,
+		.exit_latency		= 1,
+		.target_residency	= 10000,
+		.flags			= CPUIDLE_FLAG_TIME_VALID,
+		.name			= "IDLE",
+		.desc			= "ARM clock gating(WFI)",
+	},
+#ifdef CONFIG_EXYNOS5_LOWPWR_IDLE
+	[1] = {
+		.enter			= exynos5_enter_lowpower,
+		.exit_latency		= 300,
+		.target_residency	= 10000,
+		.flags			= CPUIDLE_FLAG_TIME_VALID,
+		.name			= "LOW_POWER",
+		.desc			= "ARM power down",
+	},
+#endif
+};
+
+static DEFINE_PER_CPU(struct cpuidle_device, exynos5_cpuidle_device);
+
+static struct cpuidle_driver exynos5_idle_driver = {
+	.name		= "exynos5_idle",
+	.owner		= THIS_MODULE,
+};
+
+/*
+ * To keep value of gpio on power down mode
+ * set Power down register of gpio
+ */
+static void exynos5_gpio_set_pd_reg(void)
+{
+	struct s3c_gpio_chip *target_chip;
+	unsigned int gpio_nr;
+	unsigned int tmp;
+
+	for (gpio_nr = 0; gpio_nr < EXYNOS5_GPIO_END; gpio_nr++) {
+		target_chip = s3c_gpiolib_getchip(gpio_nr);
+
+		if (!target_chip)
+			continue;
+
+		if (!target_chip->pm)
+			continue;
+
+		/* Keep the previous state in LPA mode */
+		s5p_gpio_set_pd_cfg(gpio_nr, 0x3);
+
+		/* Pull up-down state in LPA mode is same as normal */
+		tmp = s3c_gpio_getpull(gpio_nr);
+		s5p_gpio_set_pd_pull(gpio_nr, tmp);
+	}
+}
+
+static int exynos5_enter_idle(struct cpuidle_device *dev,
+			      struct cpuidle_state *state)
+{
+	struct timeval before, after;
+	int idle_time;
+
+	local_irq_disable();
+	do_gettimeofday(&before);
+
+	cpu_do_idle();
+
+	do_gettimeofday(&after);
+	local_irq_enable();
+	idle_time = (after.tv_sec - before.tv_sec) * USEC_PER_SEC +
+		    (after.tv_usec - before.tv_usec);
+
+	return idle_time;
+}
+
+static void exynos5_set_wakeupmask(void)
+{
+	__raw_writel(0x0000ff3e, EXYNOS5_WAKEUP_MASK);
+}
+
+static inline void vfp_enable(void *unused)
+{
+	u32 access = get_copro_access();
+
+	/*
+	 * Enable full access to VFP (cp10 and cp11)
+	 */
+	set_copro_access(access | CPACC_FULL(10) | CPACC_FULL(11));
+}
+
+static struct sleep_save exynos5_lpa_save[] = {
+	/* CMU side */
+	SAVE_ITEM(EXYNOS5_CLKSRC_MASK_TOP),
+	SAVE_ITEM(EXYNOS5_CLKSRC_MASK_GSCL),
+	SAVE_ITEM(EXYNOS5_CLKSRC_MASK_DISP1_0),
+	SAVE_ITEM(EXYNOS5_CLKSRC_MASK_MAUDIO),
+	SAVE_ITEM(EXYNOS5_CLKSRC_MASK_FSYS),
+	SAVE_ITEM(EXYNOS5_CLKSRC_MASK_PERIC0),
+	SAVE_ITEM(EXYNOS5_CLKSRC_MASK_PERIC1),
+	SAVE_ITEM(EXYNOS5_CLKSRC_TOP3),
+};
+
+static struct sleep_save exynos5_set_clksrc[] = {
+	{ .reg = EXYNOS5_CLKSRC_MASK_TOP		, .val = 0xffffffff, },
+	{ .reg = EXYNOS5_CLKSRC_MASK_GSCL		, .val = 0xffffffff, },
+	{ .reg = EXYNOS5_CLKSRC_MASK_DISP1_0		, .val = 0xffffffff, },
+	{ .reg = EXYNOS5_CLKSRC_MASK_MAUDIO		, .val = 0xffffffff, },
+	{ .reg = EXYNOS5_CLKSRC_MASK_FSYS		, .val = 0xffffffff, },
+	{ .reg = EXYNOS5_CLKSRC_MASK_PERIC0		, .val = 0xffffffff, },
+	{ .reg = EXYNOS5_CLKSRC_MASK_PERIC1		, .val = 0xffffffff, },
+};
+
+static int exynos5_enter_core0_lpa(struct cpuidle_device *dev,
+				   struct cpuidle_state *state)
+{
+	struct timeval before, after;
+	int idle_time;
+
+	unsigned long tmp;
+
+	s3c_pm_do_save(exynos5_lpa_save, ARRAY_SIZE(exynos5_lpa_save));
+	/*
+	 * Before enter central sequence mode, clock src register have to set
+	 */
+	s3c_pm_do_restore_core(exynos5_set_clksrc,
+			       ARRAY_SIZE(exynos5_set_clksrc));
+
+	local_irq_disable();
+
+	do_gettimeofday(&before);
+
+	/*
+	 * Unmasking all wakeup source.
+	 */
+	__raw_writel(0x0, S5P_WAKEUP_MASK);
+
+	/* Configure GPIO Power down control register */
+	exynos5_gpio_set_pd_reg();
+
+	/* ensure at least INFORM0 has the resume address */
+	__raw_writel(virt_to_phys(exynos5_idle_resume), REG_DIRECTGO_ADDR);
+	__raw_writel(0xfcba0d10, REG_DIRECTGO_FLAG);
+
+	__raw_writel(S5P_CHECK_LPA, EXYNOS5_INFORM1);
+
+	exynos5_sys_powerdown_conf(SYS_LPA);
+
+	/* Disable USE_RETENTION of JPEG_MEM_OPTION */
+	tmp = __raw_readl(EXYNOS5_JPEG_MEM_OPTION);
+	tmp |= EXYNOS5_OPTION_USE_RETENTION;
+	__raw_writel(tmp, EXYNOS5_JPEG_MEM_OPTION);
+
+	do {
+		/* Waiting for flushing UART fifo */
+	} while (exynos5_uart_fifo_check());
+
+	/*
+	 * GPS can not turn off.
+	 */
+	if (samsung_rev() < EXYNOS5250_REV_1_0)
+		__raw_writel(0x10000, EXYNOS5_GPS_LPI);
+
+	if (exynos5_enter_lp(0, PLAT_PHYS_OFFSET - PAGE_OFFSET) == 0) {
+		/*
+		 * Clear Central Sequence Register in exiting early wakeup
+		 */
+		tmp = __raw_readl(EXYNOS5_CENTRAL_SEQ_CONFIGURATION);
+		tmp |= (EXYNOS5_CENTRAL_LOWPWR_CFG);
+		__raw_writel(tmp, EXYNOS5_CENTRAL_SEQ_CONFIGURATION);
+
+		goto early_wakeup;
+	}
+
+	flush_tlb_all();
+
+	cpu_init();
+
+	vfp_enable(NULL);
+
+	/* For release retention */
+	__raw_writel((1 << 28), EXYNOS5_PAD_RETENTION_MAU_OPTION);
+	__raw_writel((1 << 28), EXYNOS5_PAD_RETENTION_GPIO_OPTION);
+	__raw_writel((1 << 28), EXYNOS5_PAD_RETENTION_UART_OPTION);
+	__raw_writel((1 << 28), EXYNOS5_PAD_RETENTION_MMCA_OPTION);
+	__raw_writel((1 << 28), EXYNOS5_PAD_RETENTION_MMCB_OPTION);
+	__raw_writel((1 << 28), EXYNOS5_PAD_RETENTION_EBIA_OPTION);
+	__raw_writel((1 << 28), EXYNOS5_PAD_RETENTION_EBIB_OPTION);
+	__raw_writel((1 << 28), EXYNOS5_PAD_RETENTION_SPI_OPTION);
+	__raw_writel((1 << 28), EXYNOS5_PAD_RETENTION_GPIO_SYSMEM_OPTION);
+
+early_wakeup:
+	s3c_pm_do_restore_core(exynos5_lpa_save,
+			       ARRAY_SIZE(exynos5_lpa_save));
+
+	/* Clear wakeup state register */
+	__raw_writel(0x0, EXYNOS5_WAKEUP_STAT);
+
+	__raw_writel(0x0, EXYNOS5_WAKEUP_MASK);
+
+	do_gettimeofday(&after);
+
+	local_irq_enable();
+
+	idle_time = (after.tv_sec - before.tv_sec) * USEC_PER_SEC +
+		    (after.tv_usec - before.tv_usec);
+
+	return idle_time;
+}
+
+static int exynos5_enter_core0_aftr(struct cpuidle_device *dev,
+				    struct cpuidle_state *state)
+{
+	struct timeval before, after;
+	int idle_time;
+	unsigned long tmp;
+
+	local_irq_disable();
+	do_gettimeofday(&before);
+
+	exynos5_set_wakeupmask();
+
+	__raw_writel(virt_to_phys(exynos5_idle_resume), REG_DIRECTGO_ADDR);
+	__raw_writel(0xfcba0d10, REG_DIRECTGO_FLAG);
+
+	/* Set value of power down register for aftr mode */
+	exynos5_sys_powerdown_conf(SYS_AFTR);
+
+	if (exynos5_enter_lp(0, PLAT_PHYS_OFFSET - PAGE_OFFSET) == 0) {
+		/*
+		 * Clear Central Sequence Register in exiting early wakeup
+		 */
+		tmp = __raw_readl(EXYNOS5_CENTRAL_SEQ_CONFIGURATION);
+		tmp |= EXYNOS5_CENTRAL_LOWPWR_CFG;
+		__raw_writel(tmp, EXYNOS5_CENTRAL_SEQ_CONFIGURATION);
+
+		goto early_wakeup;
+	}
+
+	flush_tlb_all();
+
+	cpu_init();
+
+	vfp_enable(NULL);
+
+early_wakeup:
+	/* Clear wakeup state register */
+	__raw_writel(0x0, EXYNOS5_WAKEUP_STAT);
+
+	do_gettimeofday(&after);
+
+	local_irq_enable();
+	idle_time = (after.tv_sec - before.tv_sec) * USEC_PER_SEC +
+		    (after.tv_usec - before.tv_usec);
+
+	return idle_time;
+}
+
+static int __maybe_unused exynos5_check_enter_mode(void)
+{
+	/* Check power domain */
+	if (exynos5_check_reg_status(exynos5_power_domain,
+				    ARRAY_SIZE(exynos5_power_domain)))
+		return S5P_CHECK_DIDLE;
+
+	/* Check clock gating */
+	if (exynos5_check_reg_status(exynos5_clock_gating,
+				    ARRAY_SIZE(exynos5_clock_gating)))
+		return S5P_CHECK_DIDLE;
+
+	if (clock_domain_enabled(LPA_DOMAIN))
+		return S5P_CHECK_DIDLE;
+
+	if (loop_sdmmc_check())
+		return S5P_CHECK_DIDLE;
+
+        if (exynos_check_usb_op())
+                return S5P_CHECK_DIDLE;
+
+	return S5P_CHECK_LPA;
+}
+
+static int __maybe_unused exynos5_enter_lowpower(struct cpuidle_device *dev,
+						 struct cpuidle_state *state)
+{
+	struct cpuidle_state *new_state = state;
+	unsigned int tmp;
+
+	/* This mode only can be entered when only Core0 is online */
+	if (num_online_cpus() != 1) {
+		BUG_ON(!dev->safe_state);
+		new_state = dev->safe_state;
+	}
+	dev->last_state = new_state;
+
+	if (new_state == &dev->states[0])
+		return exynos5_enter_idle(dev, new_state);
+
+	tmp = __raw_readl(EXYNOS5_CENTRAL_SEQ_OPTION);
+	tmp = (EXYNOS5_USE_STANDBYWFI_ARM_CORE0 |
+		EXYNOS5_USE_STANDBYWFE_ARM_CORE0);
+	__raw_writel(tmp, EXYNOS5_CENTRAL_SEQ_OPTION);
+
+	if (exynos5_check_enter_mode() == S5P_CHECK_DIDLE)
+		return exynos5_enter_core0_aftr(dev, new_state);
+	else
+		return exynos5_enter_core0_aftr(dev, new_state);
+		//return exynos5_enter_core0_lpa(dev, new_state);
+}
+
+static int exynos5_cpuidle_notifier_event(struct notifier_block *this,
+					  unsigned long event,
+					  void *ptr)
+{
+	switch (event) {
+	case PM_SUSPEND_PREPARE:
+		disable_hlt();
+		pr_debug("PM_SUSPEND_PREPARE for CPUIDLE\n");
+		return NOTIFY_OK;
+	case PM_POST_RESTORE:
+	case PM_POST_SUSPEND:
+		enable_hlt();
+		pr_debug("PM_POST_SUSPEND for CPUIDLE\n");
+		return NOTIFY_OK;
+	}
+	return NOTIFY_DONE;
+}
+
+static struct notifier_block exynos5_cpuidle_notifier = {
+	.notifier_call = exynos5_cpuidle_notifier_event,
+};
+
+#ifdef CONFIG_EXYNOS5_ENABLE_CLOCK_DOWN
+static void __init exynos5_core_down_clk(void)
+{
+	unsigned int tmp;
+
+	tmp = __raw_readl(EXYNOS5_PWR_CTRL1);
+
+	tmp &= ~(PWR_CTRL1_CORE2_DOWN_MASK | PWR_CTRL1_CORE1_DOWN_MASK);
+
+	/* set arm clock divider value on idle state */
+	tmp |= ((0x7 << PWR_CTRL1_CORE2_DOWN_RATIO) |
+		(0x7 << PWR_CTRL1_CORE1_DOWN_RATIO));
+
+	tmp |= (PWR_CTRL1_DIV2_DOWN_EN |
+		PWR_CTRL1_DIV1_DOWN_EN |
+		PWR_CTRL1_USE_CORE1_WFE |
+		PWR_CTRL1_USE_CORE0_WFE |
+		PWR_CTRL1_USE_CORE1_WFI |
+		PWR_CTRL1_USE_CORE0_WFI);
+
+	__raw_writel(tmp, EXYNOS5_PWR_CTRL1);
+
+	tmp = __raw_readl(EXYNOS5_PWR_CTRL2);
+
+	tmp &= ~(PWR_CTRL2_DUR_STANDBY2_MASK | PWR_CTRL2_DUR_STANDBY1_MASK |
+		PWR_CTRL2_CORE2_UP_MASK | PWR_CTRL2_CORE1_UP_MASK);
+
+	/* set duration value on middle wakeup step */
+	tmp |=  ((0x1 << PWR_CTRL2_DUR_STANDBY2) |
+		 (0x1 << PWR_CTRL2_DUR_STANDBY1));
+
+	/* set arm clock divier value on middle wakeup step */
+	tmp |= ((0x1 << PWR_CTRL2_CORE2_UP_RATIO) |
+		(0x1 << PWR_CTRL2_CORE1_UP_RATIO));
+
+	/* Set PWR_CTRL2 register to use step up for arm clock */
+	tmp |= (PWR_CTRL2_DIV2_UP_EN | PWR_CTRL2_DIV1_UP_EN);
+
+	__raw_writel(tmp, EXYNOS5_PWR_CTRL2);
+	printk(KERN_INFO "Exynos5 : ARM Clock down on idle mode is enabled\n");
+}
+#else
+#define exynos5_core_down_clk()	do { } while (0)
+#endif
+
+static int __init exynos5_init_cpuidle(void)
+{
+	int i, max_cpuidle_state, cpu_id, ret;
+	struct cpuidle_device *device;
+	struct platform_device *pdev;
+	struct resource *res;
+	void __iomem *base;
+
+	if (samsung_rev() >= EXYNOS5250_REV_1_0)
+		exynos4_reset_assert_ctrl(1);
+
+	exynos5_core_down_clk();
+
+	ret = cpuidle_register_driver(&exynos5_idle_driver);
+	
+	if(ret < 0){
+		printk(KERN_ERR "exynos5 idle register driver failed\n");
+		return ret;
+	}
+
+
+	for_each_cpu(cpu_id, cpu_online_mask) {
+		device = &per_cpu(exynos5_cpuidle_device, cpu_id);
+		device->cpu = cpu_id;
+
+		if (cpu_id == 0)
+			device->state_count = ARRAY_SIZE(exynos5_cpuidle_set);
+		else
+			device->state_count = 1;	/* Support IDLE only */
+
+		max_cpuidle_state = device->state_count;
+
+		for (i = 0; i < max_cpuidle_state; i++) {
+			memcpy(&device->states[i], &exynos5_cpuidle_set[i],
+					sizeof(struct cpuidle_state));
+		}
+
+		device->safe_state = &device->states[0];
+
+		if (cpuidle_register_device(device)) {
+			cpuidle_unregister_driver(&exynos5_idle_driver);
+			printk(KERN_ERR "CPUidle register device failed\n,");
+			return -EIO;
+		}
+	}
+
+	if (soc_is_exynos5250() && (samsung_rev() >= EXYNOS5250_REV_1_0))
+		sdmmc_dev_num = ARRAY_SIZE(chk_sdhc_op_exynos5250_rev1);
+	else
+		sdmmc_dev_num = ARRAY_SIZE(chk_sdhc_op);
+
+	for (i = 0; i < sdmmc_dev_num; i++) {
+
+		if (soc_is_exynos5250() && (samsung_rev() >= EXYNOS5250_REV_1_0))
+			pdev = chk_sdhc_op_exynos5250_rev1[i].pdev;
+		else
+			pdev = chk_sdhc_op[i].pdev;
+
+		res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+		if (!res) {
+			printk(KERN_ERR "failed to get iomem region\n");
+			return -EINVAL;
+		}
+
+		if (soc_is_exynos5250() && (samsung_rev() >= EXYNOS5250_REV_1_0)) {
+			chk_sdhc_op_exynos5250_rev1[i].base = ioremap(res->start, resource_size(res));
+			base = chk_sdhc_op_exynos5250_rev1[i].base;
+		} else {
+			chk_sdhc_op[i].base = ioremap(res->start, resource_size(res));
+			base = chk_sdhc_op[i].base;
+		}
+
+
+		if (!base) {
+			printk(KERN_ERR "failed to map io region\n");
+			return -EINVAL;
+		}
+	}
+
+	register_pm_notifier(&exynos5_cpuidle_notifier);
+	sys_pwr_conf_addr = (unsigned long)EXYNOS5_CENTRAL_SEQ_CONFIGURATION;
+
+	return 0;
+}
+device_initcall(exynos5_init_cpuidle);
diff -Naur ./arch/arm/mach-exynos/cyttsp4_img.h ../../HK_JB/Kernel/arch/arm/mach-exynos/cyttsp4_img.h
--- ./arch/arm/mach-exynos/cyttsp4_img.h	2012-12-08 20:40:46.121821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/cyttsp4_img.h	2012-11-22 09:13:15.000000000 +0100
@@ -1,7113 +1,3768 @@
-static u8 cyttsp4_ver[] = {
-	0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x05, 0x82, 0x23
-};
-	
-static u8 cyttsp4_img[] = {
-	0x00, 0x00, 0x24, 0x00, 0x80, 0x00, 0x20, 0x00,
-	0x20, 0x25, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00,
-	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00,
-	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00,
-	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00,
-	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00,
-	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00,
-	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00,
-	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00,
-	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00,
-	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00,
-	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00,
-	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00,
-	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00,
-	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00,
-	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00,
-	0x00, 0xDD, 0x13, 0x00, 0x00,
-	0x00, 0x00, 0x25, 0x00, 0x80, 0x00, 0xF0, 0x02,
-	0xF8, 0x00, 0xF0, 0x40, 0xF8, 0x0C, 0xA0, 0x30,
-	0xC8, 0x08, 0x38, 0x24, 0x18, 0x2D, 0x18, 0xA2,
-	0x46, 0x67, 0x1E, 0xAB, 0x46, 0x54, 0x46, 0x5D,
-	0x46, 0xAC, 0x42, 0x01, 0xD1, 0x00, 0xF0, 0x32,
-	0xF8, 0x7E, 0x46, 0x0F, 0x3E, 0x0F, 0xCC, 0xB6,
-	0x46, 0x01, 0x26, 0x33, 0x42, 0x00, 0xD0, 0xFB,
-	0x1A, 0xA2, 0x46, 0xAB, 0x46, 0x33, 0x43, 0x18,
-	0x47, 0x6C, 0xBD, 0x00, 0x00, 0x9C, 0xBD, 0x00,
-	0x00, 0x10, 0x3A, 0x02, 0xD3, 0x78, 0xC8, 0x78,
-	0xC1, 0xFA, 0xD8, 0x52, 0x07, 0x01, 0xD3, 0x30,
-	0xC8, 0x30, 0xC1, 0x01, 0xD5, 0x04, 0x68, 0x0C,
-	0x60, 0x70, 0x47, 0x00, 0x00, 0x00, 0x23, 0x00,
-	0x24, 0x00, 0x25, 0x00, 0x26, 0x10, 0x3A, 0x01,
-	0xD3, 0x78, 0xC1, 0xFB, 0xD8, 0x52, 0x07, 0x00,
-	0xD3, 0x30, 0xC1, 0x00, 0xD5, 0x0B, 0x60, 0x70,
-	0x47, 0x1F, 0xB5, 0xC0, 0x46,
-	0x00, 0x00, 0x26, 0x00, 0x80, 0xC0, 0x46, 0x1F,
-	0xBD, 0x10, 0xB5, 0x10, 0xBD, 0x03, 0x48, 0x85,
-	0x46, 0xFF, 0xF7, 0xF6, 0xFF, 0x00, 0xF0, 0x7D,
-	0xF8, 0x0B, 0xF0, 0x22, 0xFC, 0x00, 0x20, 0x00,
-	0x20, 0xFF, 0xF7, 0xF2, 0xFF, 0x0B, 0xF0, 0x22,
-	0xFC, 0x01, 0x4B, 0x9D, 0x46, 0x01, 0x48, 0x00,
-	0x47, 0x00, 0x20, 0x00, 0x20, 0x81, 0x12, 0x00,
-	0x00, 0x70, 0xB5, 0x05, 0x46, 0x0C, 0x46, 0x16,
-	0x46, 0x02, 0xE0, 0x0F, 0xCC, 0x0F, 0xC5, 0x10,
-	0x3E, 0x10, 0x2E, 0xFA, 0xD2, 0x08, 0x2E, 0x02,
-	0xD3, 0x03, 0xCC, 0x03, 0xC5, 0x08, 0x3E, 0x04,
-	0x2E, 0x07, 0xD3, 0x01, 0xCC, 0x01, 0xC5, 0x36,
-	0x1F, 0x03, 0xE0, 0x21, 0x78, 0x29, 0x70, 0x64,
-	0x1C, 0x6D, 0x1C, 0x76, 0x1E, 0xF9, 0xD2, 0x70,
-	0xBD, 0x10, 0xB5, 0x19, 0x4C, 0x19, 0x4B, 0x00,
-	0x20, 0x21, 0x5C, 0x00, 0x29, 0x0F, 0xD0, 0x4A,
-	0x07, 0x52, 0x0F, 0x52, 0x1C,
-	0x00, 0x00, 0x27, 0x00, 0x80, 0x09, 0x06, 0xC9,
-	0x0E, 0x05, 0xD1, 0x07, 0x2A, 0x03, 0xD9, 0x20,
-	0x18, 0x00, 0x7A, 0xD8, 0x61, 0x03, 0xE0, 0x80,
-	0x18, 0x40, 0x1C, 0x80, 0x28, 0xEC, 0xD3, 0x0E,
-	0x49, 0x0E, 0x4A, 0x00, 0x20, 0x80, 0x31, 0x20,
-	0x32, 0x84, 0x00, 0x0C, 0x59, 0x94, 0x42, 0x04,
-	0xD1, 0x80, 0x00, 0x40, 0x18, 0x40, 0x68, 0x18,
-	0x62, 0x02, 0xE0, 0x80, 0x1C, 0x10, 0x28, 0xF3,
-	0xD3, 0x03, 0x20, 0x01, 0x21, 0x00, 0x04, 0x89,
-	0x07, 0x48, 0x61, 0x00, 0xF0, 0xA3, 0xFA, 0x00,
-	0xF0, 0xC7, 0xF8, 0x00, 0xF0, 0x62, 0xF9, 0xFE,
-	0xE7, 0x80, 0xF0, 0xFF, 0x0F, 0x00, 0xFF, 0x00,
-	0x40, 0xFE, 0xE7, 0x70, 0xB5, 0x0D, 0x4A, 0x0E,
-	0x4B, 0x00, 0x20, 0x81, 0x00, 0x54, 0x58, 0x40,
-	0x1C, 0x5C, 0x50, 0x20, 0x28, 0xF9, 0xD3, 0x0B,
-	0x49, 0x01, 0x20, 0x08, 0x60, 0x0A, 0x49, 0x80,
-	0x04, 0x08, 0x60, 0x0A, 0x4C,
-	0x00, 0x00, 0x28, 0x00, 0x80, 0xE5, 0x69, 0x26,
-	0x6A, 0x02, 0xF0, 0x70, 0xF8, 0xE5, 0x61, 0x26,
-	0x62, 0x70, 0xBD, 0xFF, 0xF7, 0xE6, 0xFF, 0xFF,
-	0xF7, 0xAB, 0xFF, 0xFE, 0xE7, 0x00, 0x12, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x10,
-	0x40, 0x00, 0x00, 0x01, 0x40, 0x00, 0xFF, 0x00,
-	0x40, 0xF0, 0xB5, 0x2A, 0x4D, 0x84, 0x46, 0x00,
-	0x24, 0xAF, 0x88, 0x9E, 0x46, 0x20, 0x46, 0x28,
-	0x4E, 0x8F, 0x42, 0x04, 0xD8, 0xF7, 0x68, 0xEB,
-	0x88, 0xFF, 0x1A, 0x8F, 0x42, 0x08, 0xD2, 0x29,
-	0x8A, 0x91, 0x42, 0x16, 0xD2, 0x31, 0x69, 0x6B,
-	0x8A, 0xC9, 0x1A, 0x91, 0x42, 0x11, 0xD9, 0x0F,
-	0xE0, 0x2F, 0x89, 0x8F, 0x42, 0x0D, 0xD2, 0xF7,
-	0x68, 0x6B, 0x89, 0xFF, 0x1A, 0x8F, 0x42, 0x08,
-	0xD9, 0xA9, 0x89, 0x91, 0x42, 0x04, 0xD8, 0x31,
-	0x69, 0xEB, 0x89, 0xC9, 0x1A, 0x91, 0x42, 0x00,
-	0xD2, 0x01, 0x24, 0x18, 0x4A,
-	0x00, 0x00, 0x29, 0x00, 0x80, 0x01, 0x27, 0x61,
-	0x46, 0x73, 0x46, 0x16, 0x88, 0x8F, 0x40, 0x01,
-	0x2B, 0x05, 0xD1, 0x01, 0x2C, 0x0A, 0xD1, 0x39,
-	0x46, 0x31, 0x43, 0x11, 0x80, 0x06, 0xE0, 0x00,
-	0x2C, 0x04, 0xD1, 0x69, 0x7D, 0x00, 0x29, 0x01,
-	0xD1, 0xBE, 0x43, 0x16, 0x80, 0x61, 0x46, 0x00,
-	0x29, 0x02, 0xD1, 0x29, 0x7D, 0x01, 0x29, 0x0E,
-	0xD0, 0x01, 0x2C, 0x03, 0xD1, 0x11, 0x88, 0x0F,
-	0x42, 0x09, 0xD0, 0x07, 0xE0, 0x00, 0x2C, 0x06,
-	0xD1, 0x11, 0x88, 0x0F, 0x42, 0x03, 0xD0, 0x69,
-	0x7D, 0x01, 0x29, 0x00, 0xD1, 0x01, 0x20, 0x00,
-	0x21, 0x51, 0x80, 0xF0, 0xBD, 0x60, 0xDC, 0x00,
-	0x00, 0x90, 0xDD, 0x00, 0x00, 0x84, 0x00, 0x00,
-	0x20, 0x01, 0x46, 0x00, 0x20, 0xC9, 0x1E, 0x04,
-	0x29, 0x00, 0xD8, 0x02, 0x20, 0x70, 0x47, 0x00,
-	0xB5, 0x0A, 0x46, 0x00, 0x23, 0xFF, 0xF7, 0xF4,
-	0xFF, 0x00, 0x28, 0x05, 0xD0,
-	0x00, 0x00, 0x2A, 0x00, 0x80, 0x82, 0x42, 0x03,
-	0xD2, 0x0B, 0x49, 0x90, 0x00, 0x43, 0x18, 0x9B,
-	0x1C, 0x18, 0x46, 0x00, 0xBD, 0x01, 0x46, 0x00,
-	0x20, 0x89, 0x1E, 0x05, 0x29, 0x00, 0xD8, 0x06,
-	0x48, 0x70, 0x47, 0x05, 0x49, 0x08, 0x79, 0x09,
-	0x7A, 0x00, 0x07, 0x00, 0x0F, 0x09, 0x07, 0x09,
-	0x0F, 0x88, 0x42, 0x00, 0xD2, 0x08, 0x46, 0x70,
-	0x47, 0xF0, 0xDC, 0x00, 0x00, 0x06, 0x48, 0x00,
-	0x79, 0x06, 0x49, 0xC0, 0x07, 0xC0, 0x0F, 0x08,
-	0x70, 0x70, 0x47, 0x04, 0x49, 0x00, 0x20, 0x08,
-	0x70, 0x70, 0x47, 0x02, 0x48, 0x00, 0x78, 0x70,
-	0x47, 0x40, 0xDE, 0x00, 0x00, 0x88, 0x00, 0x00,
-	0x20, 0xFE, 0xB5, 0x04, 0xF0, 0xA5, 0xFB, 0x04,
-	0xF0, 0xD1, 0xFB, 0xD0, 0x48, 0x04, 0xF0, 0xFE,
-	0xFA, 0x01, 0x20, 0x04, 0xF0, 0xEE, 0xFA, 0x04,
-	0xF0, 0x55, 0xFB, 0xC0, 0x21, 0xCC, 0x48, 0x0A,
-	0x79, 0x02, 0x70, 0x49, 0x79,
-	0x00, 0x00, 0x2B, 0x00, 0x80, 0x41, 0x70, 0xCB,
-	0x48, 0x80, 0x7A, 0xCB, 0x4C, 0xCB, 0x4D, 0x00,
-	0x28, 0x3C, 0xD0, 0xA6, 0x68, 0x07, 0x21, 0xC9,
-	0x03, 0x30, 0x46, 0x88, 0x43, 0xC8, 0x49, 0x08,
-	0x43, 0xA0, 0x60, 0xA7, 0x69, 0x20, 0x21, 0x38,
-	0x46, 0x88, 0x43, 0xA0, 0x61, 0x60, 0x69, 0x0F,
-	0x22, 0x12, 0x05, 0x00, 0x90, 0x90, 0x43, 0x60,
-	0x61, 0x20, 0x68, 0x01, 0x90, 0x88, 0x43, 0x2C,
-	0x21, 0x08, 0x43, 0x20, 0x60, 0x28, 0x68, 0x02,
-	0x90, 0x80, 0x08, 0x80, 0x00, 0x01, 0x21, 0x08,
-	0x43, 0x28, 0x60, 0x7D, 0x20, 0xC0, 0x00, 0x04,
-	0xF0, 0xDB, 0xFB, 0x60, 0x68, 0x81, 0x06, 0xCA,
-	0x0F, 0xB3, 0x49, 0x89, 0x1E, 0x0A, 0x70, 0x02,
-	0x07, 0xD2, 0x0F, 0x52, 0x00, 0x0B, 0x78, 0x40,
-	0x07, 0x1A, 0x43, 0xC0, 0x0F, 0x80, 0x00, 0xD2,
-	0xB2, 0x10, 0x43, 0x08, 0x70, 0xA6, 0x60, 0xA7,
-	0x61, 0x00, 0x98, 0x60, 0x61,
-	0x00, 0x00, 0x2C, 0x00, 0x80, 0x01, 0x98, 0x20,
-	0x60, 0x02, 0x98, 0x28, 0x60, 0xA8, 0x48, 0x08,
-	0xF0, 0x52, 0xF8, 0x08, 0xF0, 0x34, 0xF8, 0xC0,
-	0x26, 0xB0, 0x79, 0xC1, 0x07, 0x05, 0xD1, 0x80,
-	0x07, 0x01, 0xD4, 0x04, 0x20, 0x07, 0xE0, 0x02,
-	0x20, 0x05, 0xE0, 0x01, 0x21, 0x80, 0x07, 0x01,
-	0xD4, 0x05, 0x20, 0x00, 0xE0, 0x03, 0x20, 0x08,
-	0xF0, 0x56, 0xF8, 0x07, 0xF0, 0xBF, 0xFF, 0x28,
-	0x68, 0xB0, 0x43, 0x28, 0x60, 0x9B, 0x48, 0x40,
-	0x30, 0x40, 0x7D, 0x07, 0x21, 0x49, 0x02, 0x01,
-	0x28, 0x0D, 0xD0, 0x02, 0x28, 0x0A, 0xD1, 0x28,
-	0x68, 0x80, 0x22, 0x10, 0x43, 0x28, 0x60, 0x99,
-	0x4A, 0x90, 0x68, 0x88, 0x43, 0xFF, 0x30, 0xFF,
-	0x30, 0x02, 0x30, 0x90, 0x60, 0xFE, 0xBD, 0x28,
-	0x68, 0x30, 0x43, 0x28, 0x60, 0xA0, 0x68, 0x88,
-	0x43, 0xFF, 0x30, 0xFF, 0x30, 0x02, 0x30, 0xA0,
-	0x60, 0xFE, 0xBD, 0x10, 0xB5,
-	0x00, 0x00, 0x2D, 0x00, 0x80, 0x04, 0xF0, 0xF4,
-	0xFB, 0x8F, 0x4C, 0x20, 0x70, 0xC0, 0xB2, 0x04,
-	0xF0, 0xFC, 0xFB, 0x20, 0x78, 0x04, 0xF0, 0x21,
-	0xFC, 0x10, 0xBD, 0xF8, 0xB5, 0x04, 0xF0, 0xC2,
-	0xFA, 0x8A, 0x48, 0x00, 0x24, 0x04, 0x80, 0x04,
-	0xF0, 0x23, 0xF9, 0x89, 0x49, 0x01, 0x25, 0x08,
-	0x80, 0xAD, 0x07, 0xAC, 0x60, 0x01, 0x26, 0xAE,
-	0x61, 0x08, 0x88, 0x86, 0x4F, 0x80, 0x07, 0x7E,
-	0xD5, 0xFF, 0xF7, 0xDF, 0xFF, 0x7B, 0x49, 0x88,
-	0x7E, 0xC0, 0x07, 0x28, 0x68, 0x02, 0xD1, 0x38,
-	0x43, 0x28, 0x60, 0x06, 0xE0, 0xB8, 0x43, 0x28,
-	0x60, 0x88, 0x7E, 0x00, 0x09, 0x40, 0x00, 0x30,
-	0x43, 0xA8, 0x61, 0x7D, 0x48, 0x00, 0x68, 0x00,
-	0x28, 0x13, 0xD0, 0x01, 0x20, 0x04, 0xF0, 0x50,
-	0xFB, 0x02, 0x27, 0x6F, 0x60, 0x04, 0x20, 0x01,
-	0xF0, 0x96, 0xFF, 0xAF, 0x60, 0x77, 0x49, 0x04,
-	0x20, 0x01, 0xF0, 0x68, 0xFF,
-	0x00, 0x00, 0x2E, 0x00, 0x80, 0x00, 0x21, 0x04,
-	0x20, 0x01, 0xF0, 0x6E, 0xFF, 0x04, 0x20, 0x01,
-	0xF0, 0x7B, 0xFF, 0x73, 0x4D, 0x6E, 0x4A, 0x2E,
-	0x70, 0x10, 0x88, 0x08, 0x21, 0x08, 0x43, 0x10,
-	0x80, 0x80, 0xB2, 0x83, 0x07, 0x02, 0xD4, 0x2C,
-	0x70, 0x88, 0x43, 0x10, 0x80, 0x10, 0x88, 0x83,
-	0x05, 0x02, 0xD4, 0x2C, 0x70, 0x88, 0x43, 0x10,
-	0x80, 0x10, 0x88, 0x43, 0x07, 0x9B, 0x0F, 0x03,
-	0x2B, 0x07, 0xD0, 0x5C, 0x4B, 0x20, 0x33, 0x9B,
-	0x7C, 0xDB, 0x07, 0x02, 0xD0, 0x2C, 0x70, 0x88,
-	0x43, 0x10, 0x80, 0x57, 0x4F, 0x00, 0x20, 0xBF,
-	0x1E, 0x62, 0x49, 0x78, 0x70, 0x55, 0x4C, 0x08,
-	0x70, 0xA0, 0x7C, 0x61, 0x4E, 0x00, 0x09, 0x00,
-	0x01, 0x30, 0x70, 0xE0, 0x7C, 0x5F, 0x49, 0x08,
-	0x70, 0x20, 0x7D, 0x5F, 0x49, 0x08, 0x70, 0x60,
-	0x7E, 0x21, 0x7E, 0x00, 0x02, 0x08, 0x43, 0x5D,
-	0x49, 0x08, 0x80, 0xE0, 0x7D,
-	0x00, 0x00, 0x2F, 0x00, 0x80, 0xA1, 0x7D, 0x00,
-	0x02, 0x08, 0x43, 0x5B, 0x49, 0x08, 0x80, 0x60,
-	0x7C, 0x5A, 0x49, 0x08, 0x70, 0x20, 0x46, 0x40,
-	0x30, 0x00, 0x7D, 0x59, 0x49, 0x08, 0x70, 0x03,
-	0xF0, 0xA8, 0xFB, 0x28, 0x78, 0x00, 0x28, 0x06,
-	0xD0, 0x06, 0xF0, 0xBE, 0xFD, 0x08, 0xF0, 0x9C,
-	0xF8, 0x01, 0x20, 0x07, 0xF0, 0x96, 0xFE, 0x53,
-	0x49, 0x30, 0x78, 0x08, 0x70, 0x00, 0xE0, 0x1C,
-	0xE0, 0x01, 0x20, 0x04, 0xF0, 0xDB, 0xF9, 0x20,
-	0x7C, 0x04, 0x21, 0x08, 0x40, 0x4E, 0x4E, 0xC0,
-	0xB2, 0x10, 0x24, 0x20, 0x43, 0x30, 0x70, 0x79,
-	0x78, 0x01, 0x20, 0x07, 0xF0, 0xB2, 0xFF, 0x31,
-	0x78, 0x00, 0x20, 0x07, 0xF0, 0xAE, 0xFF, 0x07,
-	0xF0, 0x6A, 0xFF, 0x48, 0x4D, 0x2C, 0x70, 0x02,
-	0xF0, 0xA3, 0xFE, 0x47, 0x49, 0x00, 0x20, 0x08,
-	0x70, 0x41, 0xE0, 0x28, 0x68, 0xB8, 0x43, 0x67,
-	0xE7, 0x04, 0xF0, 0x10, 0xFA,
-	0x00, 0x00, 0x30, 0x00, 0x80, 0x28, 0x78, 0x00,
-	0x28, 0x3E, 0xD0, 0x10, 0x28, 0x3F, 0xD0, 0x20,
-	0x28, 0x01, 0xD1, 0x02, 0xF0, 0x39, 0xFC, 0x00,
-	0x20, 0x07, 0xF0, 0x97, 0xFF, 0x30, 0x70, 0xC0,
-	0xB2, 0xC0, 0x07, 0x01, 0xD0, 0x01, 0xF0, 0x06,
-	0xFF, 0x30, 0x78, 0x01, 0x07, 0xE8, 0xD5, 0x30,
-	0x21, 0x08, 0x40, 0x28, 0x70, 0x00, 0x2C, 0x2D,
-	0xD0, 0x10, 0x2C, 0x2E, 0xD0, 0x20, 0x2C, 0x01,
-	0xD1, 0x02, 0xF0, 0xF1, 0xFC, 0x01, 0x20, 0x04,
-	0xF0, 0x99, 0xF9, 0x28, 0x78, 0x00, 0x28, 0x27,
-	0xD0, 0x10, 0x28, 0x28, 0xD0, 0x20, 0x28, 0x01,
-	0xD1, 0x01, 0xF0, 0x46, 0xFF, 0x79, 0x78, 0xEF,
-	0x20, 0x01, 0x40, 0x01, 0x20, 0x07, 0xF0, 0x6D,
-	0xFF, 0x30, 0x78, 0xC7, 0x21, 0x2C, 0x78, 0x08,
-	0x40, 0xC0, 0xB2, 0x20, 0x43, 0x30, 0x70, 0xC1,
-	0xB2, 0x00, 0x20, 0x07, 0xF0, 0x62, 0xFF, 0x03,
-	0xF0, 0xAD, 0xFD, 0x03, 0xF0,
-	0x00, 0x00, 0x31, 0x00, 0x80, 0xE3, 0xFD, 0xBB,
-	0xE7, 0x03, 0xF0, 0x68, 0xFC, 0xC3, 0xE7, 0x02,
-	0xF0, 0x27, 0xFF, 0xC0, 0xE7, 0x03, 0xF0, 0x09,
-	0xFD, 0xD4, 0xE7, 0x02, 0xF0, 0x25, 0xFF, 0xD1,
-	0xE7, 0x02, 0xF0, 0xBA, 0xFF, 0xDA, 0xE7, 0x02,
-	0xF0, 0x47, 0xFE, 0xD7, 0xE7, 0x10, 0x27, 0x00,
-	0x00, 0x8B, 0x00, 0x00, 0x20, 0x00, 0xDC, 0x00,
-	0x00, 0x00, 0x00, 0x14, 0x40, 0x00, 0x20, 0x14,
-	0x40, 0x80, 0x04, 0x01, 0x00, 0x00, 0x10, 0x14,
-	0x40, 0x64, 0x01, 0x00, 0x20, 0x2C, 0x01, 0x00,
-	0x20, 0x3C, 0x01, 0x00, 0x20, 0x00, 0x00, 0x80,
-	0x00, 0x44, 0x01, 0x00, 0x20, 0x89, 0x36, 0x00,
-	0x00, 0x2A, 0x01, 0x00, 0x20, 0xDC, 0x00, 0x00,
-	0x20, 0xDD, 0x00, 0x00, 0x20, 0xD6, 0x00, 0x00,
-	0x20, 0xD7, 0x00, 0x00, 0x20, 0xE2, 0x00, 0x00,
-	0x20, 0xE4, 0x00, 0x00, 0x20, 0xD8, 0x00, 0x00,
-	0x20, 0xD9, 0x00, 0x00, 0x20,
-	0x00, 0x00, 0x32, 0x00, 0x80, 0x32, 0x02, 0x00,
-	0x20, 0x40, 0x01, 0x00, 0x20, 0x2B, 0x01, 0x00,
-	0x20, 0x3F, 0x01, 0x00, 0x20, 0x02, 0x48, 0x40,
-	0x68, 0x02, 0x49, 0x08, 0x61, 0x70, 0x47, 0x00,
-	0x00, 0xA0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x01,
-	0x40, 0xFE, 0x49, 0xFF, 0x4A, 0x00, 0x28, 0x05,
-	0xD1, 0x08, 0x46, 0x40, 0x38, 0xC0, 0x79, 0xD0,
-	0x71, 0xC8, 0x7B, 0x06, 0xE0, 0x02, 0x28, 0x05,
-	0xD1, 0xF8, 0x48, 0x20, 0x38, 0xC0, 0x78, 0xD0,
-	0x71, 0x08, 0x7C, 0x50, 0x71, 0xD0, 0x79, 0x10,
-	0x72, 0x70, 0x47, 0xF8, 0xB5, 0xF3, 0x4A, 0x40,
-	0x3A, 0xD0, 0x68, 0x14, 0x46, 0x20, 0x34, 0x0B,
-	0x21, 0x61, 0x56, 0x40, 0x18, 0x0C, 0x21, 0x61,
-	0x56, 0xEF, 0x4E, 0x40, 0x18, 0x00, 0x02, 0x30,
-	0x61, 0x11, 0x69, 0x0D, 0x23, 0xE3, 0x56, 0xC9,
-	0x18, 0x0E, 0x23, 0xE3, 0x56, 0xC9, 0x18, 0x09,
-	0x02, 0x71, 0x61, 0x00, 0x91,
-	0x00, 0x00, 0x33, 0x00, 0x80, 0x51, 0x69, 0xE9,
-	0x4D, 0x01, 0x29, 0x14, 0xD1, 0xA9, 0x69, 0x0B,
-	0xF0, 0x3A, 0xF8, 0x30, 0x61, 0xE9, 0x69, 0x07,
-	0x46, 0x00, 0x98, 0x0B, 0xF0, 0x34, 0xF8, 0x05,
-	0x46, 0x05, 0x21, 0x70, 0x61, 0xC9, 0x01, 0x38,
-	0x46, 0x0B, 0xF0, 0x37, 0xF8, 0x05, 0x21, 0x30,
-	0x62, 0xC9, 0x01, 0x28, 0x46, 0x11, 0xE0, 0xE9,
-	0x69, 0x0B, 0xF0, 0x25, 0xF8, 0x30, 0x61, 0xA9,
-	0x69, 0x07, 0x46, 0x00, 0x98, 0x0B, 0xF0, 0x1F,
-	0xF8, 0x05, 0x25, 0xED, 0x01, 0x29, 0x46, 0x70,
-	0x61, 0x0B, 0xF0, 0x23, 0xF8, 0x30, 0x62, 0x29,
-	0x46, 0x38, 0x46, 0x0B, 0xF0, 0x1E, 0xF8, 0x70,
-	0x62, 0x30, 0x6A, 0x40, 0x10, 0xB0, 0x61, 0x70,
-	0x6A, 0x40, 0x10, 0x00, 0x23, 0xF0, 0x61, 0xB3,
-	0x70, 0x73, 0x72, 0x60, 0x79, 0x30, 0x70, 0x18,
-	0x46, 0xFF, 0xF7, 0x96, 0xFF, 0xB3, 0x71, 0xB3,
-	0x72, 0xF3, 0x72, 0x33, 0x71,
-	0x00, 0x00, 0x34, 0x00, 0x80, 0xF8, 0xBD, 0x10,
-	0xB5, 0xC7, 0x4C, 0x60, 0x78, 0x00, 0x28, 0x03,
-	0xD1, 0xFF, 0xF7, 0x9F, 0xFF, 0x01, 0x20, 0x60,
-	0x70, 0x10, 0xBD, 0x0A, 0x88, 0x02, 0x80, 0xCA,
-	0x7A, 0xC2, 0x72, 0x8A, 0x79, 0x82, 0x71, 0x8A,
-	0x88, 0x82, 0x80, 0x4A, 0x88, 0x42, 0x80, 0xCA,
-	0x79, 0xC2, 0x71, 0x0A, 0x7A, 0x02, 0x72, 0x4A,
-	0x7A, 0x42, 0x72, 0x8A, 0x7A, 0x82, 0x72, 0x09,
-	0x7B, 0x01, 0x73, 0x70, 0x47, 0x30, 0xB5, 0x0C,
-	0x46, 0x43, 0x1C, 0xB9, 0x4D, 0x07, 0xE0, 0x0E,
-	0x20, 0x58, 0x43, 0x41, 0x19, 0x08, 0x46, 0x0E,
-	0x38, 0xFF, 0xF7, 0xDF, 0xFF, 0x5B, 0x1C, 0xA3,
-	0x42, 0xF5, 0xD3, 0x60, 0x1E, 0x30, 0xBD, 0xF0,
-	0xB5, 0xAE, 0x4C, 0x06, 0x46, 0x02, 0x68, 0x00,
-	0x20, 0x20, 0x3C, 0x0B, 0x23, 0xE3, 0x56, 0x0F,
-	0x68, 0xD2, 0x1A, 0x03, 0xD5, 0x00, 0x22, 0x00,
-	0x2B, 0x00, 0xD0, 0x01, 0x20,
-	0x00, 0x00, 0x35, 0x00, 0x80, 0x0D, 0x25, 0x65,
-	0x57, 0x7B, 0x1B, 0x03, 0xD5, 0x00, 0x23, 0x00,
-	0x2D, 0x00, 0xD0, 0x01, 0x20, 0xA3, 0x4F, 0x40,
-	0x3F, 0xFD, 0x68, 0x6D, 0x1E, 0xAA, 0x42, 0x05,
-	0xD9, 0x2A, 0x46, 0x0C, 0x25, 0x65, 0x57, 0x00,
-	0x2D, 0x00, 0xDD, 0x01, 0x20, 0x3D, 0x69, 0x6D,
-	0x1E, 0xAB, 0x42, 0x05, 0xD9, 0x2B, 0x46, 0x0E,
-	0x25, 0x65, 0x57, 0x00, 0x2D, 0x00, 0xDD, 0x01,
-	0x20, 0x32, 0x60, 0x0B, 0x60, 0xF0, 0xBD, 0xFF,
-	0xB5, 0x0E, 0x23, 0x58, 0x43, 0x98, 0x4B, 0x83,
-	0xB0, 0xC0, 0x18, 0x80, 0x79, 0x83, 0x07, 0x9B,
-	0x0F, 0x00, 0x93, 0x00, 0x07, 0x85, 0x0F, 0x95,
-	0x48, 0x00, 0x23, 0x07, 0x78, 0x08, 0x46, 0x78,
-	0x43, 0x80, 0x18, 0x9E, 0x46, 0x9C, 0x46, 0x1E,
-	0x46, 0x1C, 0x46, 0x00, 0x2D, 0x12, 0xD0, 0x8C,
-	0x49, 0x00, 0x2A, 0xCB, 0x69, 0x49, 0x6A, 0x9C,
-	0x46, 0x8E, 0x46, 0x01, 0xD0,
-	0x00, 0x00, 0x36, 0x00, 0x80, 0x43, 0x1E, 0x02,
-	0xE0, 0x43, 0x1C, 0x00, 0x24, 0xE4, 0x43, 0x7F,
-	0x1E, 0xBA, 0x42, 0x01, 0xD2, 0x46, 0x1C, 0x1F,
-	0xE0, 0x46, 0x1E, 0x1C, 0xE0, 0x00, 0x9F, 0x00,
-	0x2F, 0x1A, 0xD0, 0x81, 0x4B, 0x9E, 0x69, 0x1B,
-	0x6A, 0xB4, 0x46, 0x9E, 0x46, 0x81, 0x4B, 0x0E,
-	0x46, 0x1B, 0x78, 0x5E, 0x43, 0xB2, 0x18, 0xD6,
-	0x1A, 0xD7, 0x18, 0x00, 0x29, 0x01, 0xD0, 0x33,
-	0x46, 0x02, 0xE0, 0x00, 0x24, 0x3B, 0x46, 0xE4,
-	0x43, 0x7B, 0x4A, 0x12, 0x78, 0x52, 0x1E, 0x91,
-	0x42, 0x01, 0xD2, 0x3E, 0x46, 0x00, 0xE0, 0x01,
-	0x24, 0x00, 0x99, 0x29, 0x43, 0x02, 0x91, 0x34,
-	0xD0, 0x76, 0x4F, 0x38, 0x56, 0x81, 0x10, 0x40,
-	0x1A, 0x01, 0x90, 0xFA, 0x56, 0xBB, 0x57, 0x00,
-	0x20, 0x9A, 0x42, 0x01, 0xDD, 0x44, 0x1E, 0x03,
-	0xE0, 0x1A, 0x46, 0x00, 0x2C, 0x00, 0xD1, 0x01,
-	0x24, 0x8A, 0x42, 0x0B, 0xDD,
-	0x00, 0x00, 0x37, 0x00, 0x80, 0x52, 0x1A, 0x60,
-	0x46, 0x02, 0x99, 0x50, 0x43, 0x01, 0x29, 0x02,
-	0xD0, 0x10, 0x46, 0x71, 0x46, 0x48, 0x43, 0x01,
-	0x99, 0x0A, 0xF0, 0x3F, 0xFF, 0x44, 0x43, 0x61,
-	0x48, 0x00, 0x21, 0x40, 0x38, 0x40, 0x69, 0x00,
-	0x2D, 0x11, 0xD0, 0x01, 0x28, 0x06, 0xD1, 0x0C,
-	0x98, 0x00, 0x68, 0x00, 0x19, 0x00, 0xD4, 0x01,
-	0x46, 0x0C, 0x98, 0x05, 0xE0, 0x06, 0x98, 0x00,
-	0x68, 0x00, 0x19, 0x00, 0xD4, 0x01, 0x46, 0x06,
-	0x98, 0x01, 0x60, 0x07, 0xB0, 0xF0, 0xBD, 0x01,
-	0x28, 0xF4, 0xD0, 0xEC, 0xE7, 0x30, 0xB5, 0x00,
-	0x22, 0x13, 0x46, 0x14, 0x21, 0x4B, 0x43, 0x19,
-	0x18, 0xC4, 0x58, 0x0D, 0x69, 0xC5, 0x50, 0x0C,
-	0x61, 0xCC, 0x68, 0x4B, 0x68, 0x52, 0x1C, 0x4C,
-	0x60, 0xCB, 0x60, 0x05, 0x2A, 0xF0, 0xDB, 0x30,
-	0xBD, 0x30, 0xB5, 0x00, 0x22, 0x93, 0x00, 0x19,
-	0x18, 0xC4, 0x58, 0x0D, 0x6D,
-	0x00, 0x00, 0x38, 0x00, 0x80, 0xC5, 0x50, 0x0C,
-	0x65, 0xCC, 0x6B, 0x4B, 0x69, 0x52, 0x1C, 0x4C,
-	0x61, 0xCB, 0x63, 0x05, 0x2A, 0xF2, 0xDB, 0x30,
-	0xBD, 0xF8, 0xB5, 0x86, 0x46, 0x08, 0x46, 0x00,
-	0x23, 0x14, 0x21, 0x5A, 0x1C, 0x9C, 0x00, 0x59,
-	0x43, 0x0D, 0x18, 0x0A, 0xE0, 0x97, 0x00, 0x14,
-	0x21, 0xEE, 0x59, 0x51, 0x43, 0x09, 0x18, 0xB4,
-	0x46, 0x0E, 0x59, 0xEE, 0x51, 0x66, 0x46, 0x0E,
-	0x51, 0x52, 0x1C, 0x05, 0x2A, 0xF2, 0xDB, 0x5B,
-	0x1C, 0x04, 0x2B, 0xE9, 0xDB, 0x71, 0x46, 0x01,
-	0x29, 0x02, 0xD1, 0xFF, 0xF7, 0xD1, 0xFF, 0xF8,
-	0xBD, 0xFF, 0xF7, 0xBC, 0xFF, 0xF8, 0xBD, 0xF3,
-	0xB5, 0x0C, 0x46, 0xA0, 0x6A, 0x01, 0x21, 0x83,
-	0xB0, 0x00, 0x28, 0x00, 0xD0, 0x01, 0x46, 0x2D,
-	0x48, 0x40, 0x38, 0x80, 0x7A, 0x23, 0x6A, 0x03,
-	0x9A, 0x02, 0x93, 0xA7, 0x69, 0x00, 0x2A, 0x02,
-	0xD1, 0x3E, 0x46, 0x1A, 0x46,
-	0x00, 0x00, 0x39, 0x00, 0x80, 0x01, 0xE0, 0x26,
-	0x6C, 0xA2, 0x6C, 0x56, 0x43, 0x46, 0x43, 0x03,
-	0x9A, 0xE0, 0x69, 0x01, 0x90, 0x00, 0x2A, 0x00,
-	0xD0, 0x60, 0x6C, 0x00, 0x28, 0x00, 0xD1, 0x01,
-	0x20, 0x40, 0x43, 0x05, 0x01, 0x62, 0x69, 0x69,
-	0x43, 0x10, 0x46, 0x50, 0x43, 0x70, 0x43, 0x00,
-	0x92, 0x0A, 0xF0, 0xB3, 0xFE, 0x20, 0x60, 0x00,
-	0x9A, 0x90, 0x42, 0x00, 0xDD, 0x22, 0x60, 0xE0,
-	0x6A, 0x01, 0x21, 0x00, 0x28, 0x00, 0xD0, 0x01,
-	0x46, 0x38, 0x46, 0x78, 0x43, 0x70, 0x43, 0x69,
-	0x43, 0x0A, 0xF0, 0xA3, 0xFE, 0x60, 0x60, 0xB8,
-	0x42, 0x00, 0xDD, 0x67, 0x60, 0x03, 0x98, 0x21,
-	0x6B, 0x00, 0x28, 0x02, 0xD1, 0x09, 0x01, 0x30,
-	0x46, 0x03, 0xE0, 0x01, 0x98, 0x69, 0x43, 0x40,
-	0x43, 0x70, 0x43, 0x0A, 0xF0, 0x92, 0xFE, 0xA0,
-	0x60, 0x01, 0x99, 0x88, 0x42, 0x00, 0xDD, 0xA1,
-	0x60, 0x01, 0x27, 0x60, 0x6B,
-	0x00, 0x00, 0x3A, 0x00, 0x80, 0x39, 0x46, 0x00,
-	0x28, 0x00, 0xD0, 0x01, 0x46, 0x02, 0x98, 0x69,
-	0x43, 0x40, 0x43, 0x70, 0x43, 0x0A, 0xF0, 0x81,
-	0xFE, 0xE0, 0x60, 0x02, 0x99, 0x88, 0x42, 0x00,
-	0xDD, 0xE1, 0x60, 0x0D, 0xE0, 0xD0, 0xDD, 0x00,
-	0x00, 0x90, 0x00, 0x00, 0x20, 0x88, 0xDF, 0x00,
-	0x00, 0x4C, 0x03, 0x00, 0x20, 0x6E, 0x01, 0x00,
-	0x20, 0x6D, 0x01, 0x00, 0x20, 0x64, 0x08, 0x00,
-	0x20, 0xA1, 0x6B, 0x38, 0x46, 0x00, 0x29, 0x00,
-	0xD0, 0x08, 0x46, 0x67, 0x6A, 0x29, 0x46, 0x3A,
-	0x46, 0x7A, 0x43, 0x72, 0x43, 0x41, 0x43, 0x10,
-	0x46, 0x0A, 0xF0, 0x5F, 0xFE, 0x20, 0x61, 0xB8,
-	0x42, 0x00, 0xDD, 0x27, 0x61, 0x61, 0x68, 0xA0,
-	0x68, 0x81, 0x42, 0x00, 0xDD, 0x60, 0x60, 0xE1,
-	0x68, 0x81, 0x42, 0x00, 0xDD, 0xE0, 0x60, 0x21,
-	0x68, 0x60, 0x68, 0x81, 0x42, 0x00, 0xDD, 0x20,
-	0x60, 0x21, 0x69, 0xE0, 0x68,
-	0x00, 0x00, 0x3B, 0x00, 0x80, 0x81, 0x42, 0x00,
-	0xDD, 0x20, 0x61, 0x05, 0xB0, 0xF0, 0xBD, 0xF0,
-	0xB5, 0x04, 0x46, 0xFD, 0x48, 0x8B, 0xB0, 0xC0,
-	0x7A, 0x00, 0x90, 0x61, 0x6C, 0x01, 0x20, 0x00,
-	0x29, 0x00, 0xD0, 0x08, 0x46, 0x05, 0x90, 0xE0,
-	0x6B, 0x01, 0x22, 0x00, 0x28, 0x00, 0xD0, 0x02,
-	0x46, 0x04, 0x92, 0x21, 0x6C, 0x0A, 0x91, 0xA0,
-	0x6C, 0x09, 0x90, 0x41, 0x43, 0x00, 0x98, 0x41,
-	0x43, 0x03, 0x91, 0x20, 0x6B, 0x08, 0x90, 0x40,
-	0x43, 0x07, 0x90, 0xE5, 0x6A, 0x66, 0x6B, 0x28,
-	0x46, 0x00, 0x99, 0x70, 0x43, 0x48, 0x43, 0x00,
-	0x02, 0x07, 0x99, 0x0A, 0xF0, 0x1E, 0xFE, 0x07,
-	0x46, 0x05, 0x98, 0x03, 0x99, 0x40, 0x43, 0x06,
-	0x90, 0x08, 0x02, 0x06, 0x99, 0x0A, 0xF0, 0x15,
-	0xFE, 0x38, 0x18, 0x02, 0x90, 0x06, 0x98, 0x04,
-	0x9A, 0x01, 0x01, 0x01, 0x91, 0xA7, 0x6A, 0x03,
-	0x99, 0x38, 0x46, 0x78, 0x43,
-	0x00, 0x00, 0x3C, 0x00, 0x80, 0x48, 0x43, 0x01,
-	0x99, 0x51, 0x43, 0x0A, 0xF0, 0x06, 0xFE, 0x60,
-	0x61, 0xB8, 0x42, 0x00, 0xDD, 0x67, 0x61, 0x01,
-	0x27, 0x0A, 0x98, 0x39, 0x46, 0x00, 0x28, 0x00,
-	0xD0, 0x01, 0x46, 0x28, 0x46, 0x02, 0x9A, 0x68,
-	0x43, 0x50, 0x43, 0x49, 0x03, 0x0A, 0xF0, 0xF5,
-	0xFD, 0xA0, 0x61, 0xA8, 0x42, 0x00, 0xDD, 0xA5,
-	0x61, 0x3A, 0x46, 0x00, 0x2D, 0x00, 0xD0, 0x2A,
-	0x46, 0x00, 0x2E, 0x00, 0xD0, 0x72, 0x43, 0xD0,
-	0x49, 0x07, 0x98, 0x20, 0x31, 0xC9, 0x7B, 0x08,
-	0x41, 0x90, 0x42, 0x00, 0xDA, 0x10, 0x46, 0x05,
-	0x99, 0x00, 0x9A, 0x09, 0x01, 0x50, 0x43, 0x0A,
-	0xF0, 0xDC, 0xFD, 0xE0, 0x61, 0x08, 0x99, 0x4A,
-	0x00, 0x89, 0x18, 0xCA, 0x0F, 0x51, 0x18, 0x49,
-	0x10, 0x88, 0x42, 0x00, 0xDD, 0xE1, 0x61, 0x09,
-	0x98, 0x39, 0x46, 0x00, 0x28, 0x00, 0xD0, 0x01,
-	0x46, 0x30, 0x46, 0x02, 0x9A,
-	0x00, 0x00, 0x3D, 0x00, 0x80, 0x70, 0x43, 0x50,
-	0x43, 0x49, 0x03, 0x0A, 0xF0, 0xC6, 0xFD, 0x20,
-	0x62, 0xB0, 0x42, 0x00, 0xDD, 0x26, 0x62, 0xE0,
-	0x6C, 0x00, 0x28, 0x00, 0xD0, 0x07, 0x46, 0xA5,
-	0x6B, 0x03, 0x99, 0x28, 0x46, 0x68, 0x43, 0x48,
-	0x43, 0x01, 0x99, 0x79, 0x43, 0x0A, 0xF0, 0xB5,
-	0xFD, 0x60, 0x62, 0xA8, 0x42, 0x00, 0xDD, 0x65,
-	0x62, 0xA1, 0x69, 0xE0, 0x69, 0x81, 0x42, 0x03,
-	0xDD, 0xC1, 0x0F, 0x09, 0x18, 0x49, 0x10, 0xA1,
-	0x61, 0x21, 0x6A, 0x81, 0x42, 0x03, 0xDD, 0xC1,
-	0x0F, 0x08, 0x18, 0x40, 0x10, 0x20, 0x62, 0x61,
-	0x69, 0xA0, 0x69, 0x81, 0x42, 0x03, 0xDD, 0xC1,
-	0x0F, 0x08, 0x18, 0x40, 0x10, 0x60, 0x61, 0x61,
-	0x6A, 0x20, 0x6A, 0x81, 0x42, 0x03, 0xDD, 0xC1,
-	0x0F, 0x08, 0x18, 0x40, 0x10, 0x60, 0x62, 0x21,
-	0x46, 0x01, 0x20, 0xFF, 0xF7, 0xB0, 0xFE, 0x0B,
-	0xB0, 0xF0, 0xBD, 0xF0, 0xB5,
-	0x00, 0x00, 0x3E, 0x00, 0x80, 0xA0, 0x49, 0xCA,
-	0x7A, 0x89, 0x7A, 0x4B, 0x00, 0xC9, 0x18, 0x8C,
-	0x46, 0x02, 0x23, 0x14, 0x24, 0x02, 0x21, 0x5C,
-	0x43, 0x27, 0x18, 0x8E, 0x00, 0xBD, 0x59, 0x00,
-	0x24, 0x05, 0x2D, 0x00, 0xDD, 0x6C, 0x1F, 0x49,
-	0x1C, 0xBC, 0x51, 0x05, 0x29, 0xF5, 0xD3, 0x5B,
-	0x1C, 0x05, 0x2B, 0xEE, 0xD3, 0x43, 0x6C, 0x01,
-	0x6B, 0xC9, 0x1A, 0x51, 0x43, 0x09, 0x11, 0xC1,
-	0x61, 0x83, 0x6C, 0x41, 0x6B, 0xC9, 0x1A, 0x51,
-	0x43, 0x09, 0x11, 0x01, 0x62, 0x81, 0x6B, 0xC3,
-	0x6C, 0x89, 0x10, 0xC9, 0x1A, 0x51, 0x43, 0x09,
-	0x11, 0x41, 0x62, 0x02, 0x21, 0x8B, 0x00, 0x1C,
-	0x18, 0x64, 0x69, 0x65, 0x46, 0x6C, 0x43, 0x24,
-	0x12, 0x49, 0x1C, 0xC4, 0x50, 0x05, 0x29, 0xF5,
-	0xD3, 0x81, 0x68, 0xC3, 0x68, 0x89, 0x10, 0xC9,
-	0x1A, 0x51, 0x43, 0x09, 0x11, 0x41, 0x60, 0x03,
-	0x6A, 0xC1, 0x69, 0xC9, 0x1A,
-	0x00, 0x00, 0x3F, 0x00, 0x80, 0x51, 0x43, 0x09,
-	0x11, 0x81, 0x61, 0x43, 0x6B, 0x01, 0x6B, 0xC9,
-	0x1A, 0x51, 0x43, 0x09, 0x11, 0xC1, 0x62, 0x83,
-	0x6C, 0x41, 0x6C, 0xC9, 0x1A, 0x51, 0x43, 0x09,
-	0x11, 0x01, 0x64, 0x81, 0x6D, 0xC3, 0x6D, 0x89,
-	0x10, 0xC9, 0x1A, 0x51, 0x43, 0x09, 0x11, 0x41,
-	0x65, 0x00, 0x21, 0x14, 0x22, 0x4A, 0x43, 0x13,
-	0x18, 0x5B, 0x68, 0x64, 0x46, 0x63, 0x43, 0x1B,
-	0x12, 0x49, 0x1C, 0x83, 0x50, 0x05, 0x29, 0xF4,
-	0xD3, 0xF0, 0xBD, 0xFF, 0xB5, 0x85, 0xB0, 0x00,
-	0x25, 0x9D, 0x63, 0xDD, 0x64, 0x1D, 0x66, 0xDD,
-	0x65, 0x9D, 0x65, 0x98, 0x6C, 0x1C, 0x46, 0x05,
-	0x28, 0x00, 0xDD, 0x45, 0x1F, 0x02, 0x20, 0xA5,
-	0x64, 0x02, 0x2D, 0x00, 0xDD, 0x28, 0x46, 0x01,
-	0x90, 0x60, 0x6C, 0x04, 0x90, 0x61, 0x6B, 0x03,
-	0x91, 0x46, 0x18, 0x02, 0x2E, 0x00, 0xDA, 0x02,
-	0x26, 0x61, 0x48, 0x30, 0x21,
-	0x00, 0x00, 0x40, 0x00, 0x80, 0x41, 0x5E, 0x0F,
-	0x02, 0x32, 0x21, 0x41, 0x5E, 0x69, 0x43, 0x08,
-	0x02, 0x31, 0x46, 0x0A, 0xF0, 0x02, 0xFD, 0xC0,
-	0x19, 0x5B, 0x4A, 0x34, 0x21, 0x51, 0x5E, 0x71,
-	0x43, 0x09, 0x02, 0xC9, 0x11, 0x08, 0x18, 0x36,
-	0x21, 0x51, 0x5E, 0x69, 0x43, 0x09, 0x02, 0xC9,
-	0x11, 0x08, 0x18, 0x38, 0x21, 0x51, 0x5E, 0x24,
-	0x6B, 0x69, 0x43, 0x89, 0x02, 0xC9, 0x11, 0x0F,
-	0x18, 0x03, 0x98, 0x21, 0x1A, 0x04, 0x98, 0x08,
-	0x1A, 0x11, 0x46, 0x3A, 0x22, 0x8A, 0x5E, 0x01,
-	0x99, 0x50, 0x43, 0x00, 0x02, 0x09, 0x01, 0x0A,
-	0xF0, 0xE0, 0xFC, 0xC0, 0x19, 0x4A, 0x4A, 0x3C,
-	0x21, 0x51, 0x5E, 0x61, 0x43, 0x09, 0x02, 0xC9,
-	0x11, 0x0F, 0x18, 0x11, 0x46, 0x3E, 0x20, 0x08,
-	0x5E, 0x80, 0x21, 0x09, 0x1B, 0x48, 0x43, 0x00,
-	0x02, 0x21, 0x46, 0x0A, 0xF0, 0xCE, 0xFC, 0xC1,
-	0x19, 0x41, 0x4F, 0x60, 0x1B,
-	0x00, 0x00, 0x41, 0x00, 0x80, 0x40, 0x37, 0x02,
-	0x91, 0x00, 0x21, 0x79, 0x5E, 0x48, 0x43, 0x00,
-	0x02, 0xB1, 0x00, 0x0A, 0xF0, 0xC2, 0xFC, 0x02,
-	0x99, 0x46, 0x18, 0x04, 0x20, 0x38, 0x5E, 0x21,
-	0x46, 0x68, 0x43, 0x00, 0x02, 0x0A, 0xF0, 0xB9,
-	0xFC, 0x80, 0x19, 0x02, 0x90, 0x28, 0x19, 0x01,
-	0x90, 0x06, 0x20, 0x38, 0x5E, 0x04, 0x99, 0x06,
-	0x02, 0x03, 0x98, 0x0D, 0x1A, 0x08, 0x20, 0x38,
-	0x5E, 0x21, 0x46, 0x68, 0x43, 0x00, 0x02, 0x0A,
-	0xF0, 0xA8, 0xFC, 0x84, 0x19, 0x0C, 0x20, 0x38,
-	0x5E, 0x01, 0x99, 0x45, 0x43, 0x28, 0x02, 0x0A,
-	0xF0, 0xA0, 0xFC, 0x01, 0x19, 0x02, 0x98, 0x00,
-	0x12, 0x0C, 0x12, 0x29, 0x49, 0x49, 0x69, 0x29,
-	0x4A, 0x01, 0x29, 0x56, 0x69, 0x15, 0x69, 0x10,
-	0xD1, 0x70, 0x43, 0x07, 0x14, 0x76, 0x43, 0x30,
-	0x12, 0x60, 0x43, 0x29, 0x46, 0x0A, 0xF0, 0x8D,
-	0xFC, 0x6C, 0x43, 0x21, 0x14,
-	0x00, 0x00, 0x42, 0x00, 0x80, 0x7A, 0x18, 0x05,
-	0x99, 0x00, 0x12, 0x0A, 0x60, 0x39, 0x1A, 0x06,
-	0x98, 0x0F, 0xE0, 0x68, 0x43, 0x07, 0x14, 0x6D,
-	0x43, 0x28, 0x12, 0x60, 0x43, 0x31, 0x46, 0x0A,
-	0xF0, 0x7C, 0xFC, 0x74, 0x43, 0x21, 0x14, 0x06,
-	0x9A, 0x79, 0x18, 0x00, 0x12, 0x11, 0x60, 0x39,
-	0x1A, 0x05, 0x98, 0x01, 0x60, 0x09, 0xB0, 0xF0,
-	0xBD, 0xFF, 0xB5, 0x91, 0xB0, 0x1C, 0x46, 0x00,
-	0x20, 0x09, 0xE0, 0x0E, 0x22, 0x12, 0x4B, 0x42,
-	0x43, 0xD2, 0x18, 0xD3, 0x7A, 0x20, 0x2B, 0x01,
-	0xD1, 0x00, 0x23, 0x93, 0x71, 0x40, 0x1C, 0x11,
-	0x9A, 0x90, 0x42, 0xF2, 0xD3, 0x48, 0x00, 0x12,
-	0x90, 0x09, 0x48, 0x05, 0x92, 0x40, 0x30, 0x10,
-	0x90, 0x14, 0xE3, 0x40, 0x1E, 0x0E, 0x21, 0x05,
-	0x90, 0x48, 0x43, 0x07, 0x49, 0x46, 0x18, 0xF0,
-	0x7A, 0x10, 0x28, 0xF5, 0xD0, 0xB5, 0x88, 0x70,
-	0x88, 0x0B, 0x90, 0x00, 0x20,
-	0x00, 0x00, 0x43, 0x00, 0x80, 0x28, 0xE0, 0x00,
-	0x00, 0x90, 0xDD, 0x00, 0x00, 0x90, 0x00, 0x00,
-	0x20, 0x4C, 0x03, 0x00, 0x20, 0x13, 0x99, 0x0B,
-	0x9A, 0x09, 0x5C, 0x52, 0x1A, 0x00, 0xD5, 0x52,
-	0x42, 0x13, 0x99, 0x09, 0x18, 0x49, 0x78, 0x69,
-	0x1A, 0x00, 0xD5, 0x49, 0x42, 0x13, 0x46, 0x0B,
-	0x43, 0x11, 0xD0, 0x03, 0x2A, 0x0F, 0xDC, 0x03,
-	0x29, 0x0D, 0xDC, 0x02, 0x2A, 0x02, 0xDA, 0xB2,
-	0x79, 0x12, 0x1D, 0xB2, 0x71, 0x02, 0x29, 0x02,
-	0xDA, 0xB1, 0x79, 0x49, 0x1C, 0xB1, 0x71, 0xB1,
-	0x79, 0xF0, 0x22, 0x11, 0x43, 0xB1, 0x71, 0x80,
-	0x1C, 0x12, 0x99, 0x88, 0x42, 0xDA, 0xD3, 0x0B,
-	0x98, 0xC0, 0x1E, 0x84, 0x46, 0x00, 0x20, 0x06,
-	0x90, 0x60, 0x46, 0x40, 0x1C, 0x84, 0x46, 0x03,
-	0xD4, 0xFF, 0x49, 0x09, 0x78, 0x8C, 0x45, 0x0B,
-	0xDB, 0x06, 0x9A, 0x00, 0x20, 0x14, 0x23, 0x5A,
-	0x43, 0x01, 0x46, 0x12, 0x19,
-	0x00, 0x00, 0x44, 0x00, 0x80, 0x83, 0x00, 0x40,
-	0x1C, 0xD1, 0x50, 0x05, 0x28, 0xFA, 0xDB, 0x24,
-	0xE0, 0xF8, 0x4A, 0x60, 0x46, 0x12, 0x78, 0xA9,
-	0x1E, 0x50, 0x43, 0x40, 0x18, 0x06, 0x9A, 0x0A,
-	0x90, 0x14, 0x23, 0x00, 0x20, 0x5A, 0x43, 0x17,
-	0x19, 0x00, 0x29, 0x03, 0xDB, 0xF1, 0x4A, 0x12,
-	0x78, 0x91, 0x42, 0x02, 0xDB, 0x00, 0x22, 0x83,
-	0x00, 0x07, 0xE0, 0xEF, 0x4A, 0x0A, 0x9B, 0xD2,
-	0x56, 0x83, 0x00, 0xFA, 0x50, 0x00, 0x2A, 0x01,
-	0xDA, 0x00, 0x22, 0xFA, 0x50, 0x0A, 0x9A, 0x49,
-	0x1C, 0x52, 0x1C, 0x40, 0x1C, 0x0A, 0x92, 0x05,
-	0x28, 0xE6, 0xDB, 0x06, 0x98, 0x40, 0x1C, 0x06,
-	0x90, 0x05, 0x28, 0xC1, 0xDB, 0x20, 0x6B, 0x00,
-	0x28, 0x01, 0xD1, 0x01, 0x20, 0x20, 0x63, 0x00,
-	0x20, 0x04, 0x90, 0x03, 0x90, 0x02, 0x90, 0x0B,
-	0x98, 0x01, 0x28, 0x39, 0xDC, 0x00, 0x28, 0x32,
-	0xD1, 0x00, 0x2D, 0x04, 0xD0,
-	0x00, 0x00, 0x45, 0x00, 0x80, 0xDB, 0x48, 0x00,
-	0x78, 0x40, 0x1E, 0x85, 0x42, 0x25, 0xD1, 0x08,
-	0x20, 0x02, 0x90, 0x00, 0x2D, 0x02, 0xD0, 0x20,
-	0x46, 0xFF, 0xF7, 0x9C, 0xFC, 0x10, 0x98, 0x40,
-	0x7C, 0x01, 0x28, 0x06, 0xD1, 0x23, 0x46, 0x03,
-	0xA9, 0x04, 0xA8, 0x05, 0x9A, 0xFF, 0xF7, 0x8D,
-	0xFE, 0x02, 0xE0, 0x20, 0x46, 0xFF, 0xF7, 0x25,
-	0xFE, 0x00, 0x2D, 0x7E, 0xD0, 0xCF, 0x48, 0x40,
-	0x69, 0x01, 0x28, 0x03, 0xD1, 0x03, 0x98, 0x40,
-	0x42, 0x03, 0x90, 0x02, 0xE0, 0x04, 0x98, 0x40,
-	0x42, 0x04, 0x90, 0x20, 0x46, 0xFF, 0xF7, 0x7E,
-	0xFC, 0x63, 0xE0, 0x01, 0x20, 0x02, 0x90, 0x20,
-	0x46, 0xFF, 0xF7, 0x55, 0xFD, 0x5D, 0xE0, 0x21,
-	0x46, 0x00, 0x20, 0xFF, 0xF7, 0xB8, 0xFC, 0x58,
-	0xE0, 0xBF, 0x4F, 0x02, 0x46, 0x39, 0x78, 0x88,
-	0x1E, 0x82, 0x42, 0x52, 0xDB, 0x01, 0x23, 0x18,
-	0x46, 0x00, 0x2D, 0x05, 0xD0,
-	0x00, 0x00, 0x46, 0x00, 0x80, 0xBB, 0x4A, 0x12,
-	0x78, 0x52, 0x1E, 0x95, 0x42, 0x00, 0xD0, 0x00,
-	0x20, 0x0B, 0x9A, 0x49, 0x1E, 0x8A, 0x42, 0x00,
-	0xD0, 0x00, 0x23, 0x18, 0x42, 0x2C, 0xD0, 0x09,
-	0x20, 0x02, 0x90, 0x20, 0x46, 0xFF, 0xF7, 0x68,
-	0xFC, 0x00, 0x2D, 0x02, 0xD0, 0x20, 0x46, 0xFF,
-	0xF7, 0x51, 0xFC, 0x10, 0x98, 0x40, 0x7C, 0x01,
-	0x28, 0x06, 0xD1, 0x23, 0x46, 0x03, 0xA9, 0x04,
-	0xA8, 0x05, 0x9A, 0xFF, 0xF7, 0x42, 0xFE, 0x02,
-	0xE0, 0x20, 0x46, 0xFF, 0xF7, 0xDA, 0xFD, 0x20,
-	0x46, 0xFF, 0xF7, 0x52, 0xFC, 0x00, 0x2D, 0x0B,
-	0xD1, 0xA8, 0x48, 0x40, 0x69, 0x01, 0x28, 0x03,
-	0xD1, 0x04, 0x98, 0x40, 0x42, 0x04, 0x90, 0x23,
-	0xE0, 0x03, 0x98, 0x40, 0x42, 0x03, 0x90, 0x1F,
-	0xE0, 0x04, 0x98, 0x40, 0x42, 0x04, 0x90, 0xA5,
-	0xE7, 0x20, 0x46, 0xFF, 0xF7, 0x3D, 0xFC, 0x38,
-	0x78, 0x0B, 0x99, 0x40, 0x1E,
-	0x00, 0x00, 0x47, 0x00, 0x80, 0x81, 0x42, 0x05,
-	0xD1, 0x02, 0x20, 0x02, 0x90, 0x20, 0x46, 0xFF,
-	0xF7, 0xFE, 0xFC, 0x03, 0xE0, 0x21, 0x46, 0x00,
-	0x20, 0xFF, 0xF7, 0x61, 0xFC, 0x20, 0x46, 0xFF,
-	0xF7, 0x2B, 0xFC, 0x01, 0x2D, 0x1F, 0xDC, 0x00,
-	0x2D, 0x0A, 0xD1, 0x0B, 0x98, 0x00, 0x28, 0x41,
-	0xD0, 0x8F, 0x48, 0x0B, 0x99, 0x00, 0x78, 0x40,
-	0x1E, 0x00, 0xE0, 0x3B, 0xE0, 0x81, 0x42, 0x39,
-	0xD0, 0x21, 0x46, 0x00, 0x20, 0xFF, 0xF7, 0x28,
-	0xFC, 0x00, 0x2D, 0x05, 0xD1, 0x03, 0x20, 0x02,
-	0x90, 0x20, 0x46, 0xFF, 0xF7, 0xDC, 0xFC, 0x03,
-	0xE0, 0x21, 0x46, 0x00, 0x20, 0xFF, 0xF7, 0x3F,
-	0xFC, 0x21, 0x46, 0x01, 0x20, 0x24, 0xE0, 0x83,
-	0x4F, 0x38, 0x78, 0x81, 0x1E, 0x8D, 0x42, 0x21,
-	0xDB, 0x40, 0x1E, 0x85, 0x42, 0x08, 0xD1, 0x0B,
-	0x98, 0x00, 0x28, 0x1B, 0xD0, 0x01, 0x46, 0x7C,
-	0x48, 0x00, 0x78, 0x40, 0x1E,
-	0x00, 0x00, 0x48, 0x00, 0x80, 0x81, 0x42, 0x15,
-	0xD0, 0x21, 0x46, 0x01, 0x20, 0xFF, 0xF7, 0x04,
-	0xFC, 0x38, 0x78, 0x40, 0x1E, 0x85, 0x42, 0x05,
-	0xD1, 0x04, 0x20, 0x02, 0x90, 0x20, 0x46, 0xFF,
-	0xF7, 0xB6, 0xFC, 0x03, 0xE0, 0x21, 0x46, 0x00,
-	0x20, 0xFF, 0xF7, 0x19, 0xFC, 0x21, 0x46, 0x00,
-	0x20, 0xFF, 0xF7, 0xF2, 0xFB, 0x02, 0x98, 0x00,
-	0x07, 0x13, 0xD4, 0x00, 0x21, 0x14, 0x22, 0x00,
-	0x20, 0x4A, 0x43, 0x17, 0x19, 0x83, 0x00, 0x9C,
-	0x46, 0xFB, 0x58, 0x00, 0x22, 0x05, 0x2B, 0x00,
-	0xDD, 0x5A, 0x1F, 0x63, 0x46, 0x40, 0x1C, 0xFA,
-	0x50, 0x05, 0x28, 0xF3, 0xDB, 0x49, 0x1C, 0x05,
-	0x29, 0xEC, 0xDB, 0x20, 0x6B, 0x00, 0x28, 0x01,
-	0xD1, 0x01, 0x20, 0x20, 0x63, 0xE1, 0x69, 0xA0,
-	0x69, 0xE2, 0x6A, 0x40, 0x18, 0x21, 0x6A, 0x00,
-	0x27, 0x89, 0x18, 0x40, 0x18, 0x21, 0x6B, 0x40,
-	0x18, 0x61, 0x6B, 0x40, 0x18,
-	0x00, 0x00, 0x49, 0x00, 0x80, 0x21, 0x6C, 0x40,
-	0x18, 0x61, 0x6C, 0x40, 0x18, 0xA1, 0x6C, 0x07,
-	0x97, 0x40, 0x18, 0x08, 0x97, 0x09, 0x90, 0xB0,
-	0x79, 0x00, 0x28, 0x7E, 0xD1, 0x82, 0x00, 0x96,
-	0x46, 0xA1, 0x58, 0x13, 0x19, 0x5A, 0x69, 0x9C,
-	0x46, 0x89, 0x18, 0x9A, 0x6A, 0xDB, 0x6B, 0xD2,
-	0x18, 0x89, 0x18, 0x63, 0x46, 0x1A, 0x6D, 0x89,
-	0x18, 0xCF, 0x19, 0x14, 0x22, 0x01, 0x46, 0x51,
-	0x43, 0x0A, 0x19, 0x12, 0x69, 0x61, 0x58, 0x40,
-	0x1C, 0x51, 0x1A, 0x07, 0x9A, 0x89, 0x18, 0x07,
-	0x91, 0x72, 0x46, 0xA2, 0x58, 0x19, 0x6D, 0x89,
-	0x1A, 0x08, 0x9A, 0x89, 0x18, 0x08, 0x91, 0x05,
-	0x28, 0xDC, 0xDB, 0x07, 0x98, 0x40, 0x00, 0x07,
-	0x90, 0x48, 0x00, 0x08, 0x90, 0x00, 0x20, 0x14,
-	0x21, 0x41, 0x43, 0x09, 0x19, 0xCA, 0x68, 0x49,
-	0x68, 0x51, 0x1A, 0x07, 0x9A, 0x89, 0x18, 0x07,
-	0x91, 0x81, 0x00, 0x09, 0x19,
-	0x00, 0x00, 0x4A, 0x00, 0x80, 0xCA, 0x6B, 0x49,
-	0x69, 0x40, 0x1C, 0x51, 0x1A, 0x08, 0x9A, 0x89,
-	0x18, 0x08, 0x91, 0x05, 0x28, 0xEB, 0xDB, 0x02,
-	0x98, 0x39, 0x46, 0x01, 0x28, 0x20, 0xD1, 0x00,
-	0x20, 0x06, 0x90, 0x14, 0x22, 0x50, 0x43, 0x22,
-	0x58, 0x00, 0x19, 0x43, 0x68, 0x96, 0x46, 0xD2,
-	0x18, 0x0F, 0x93, 0x84, 0x46, 0x83, 0x68, 0xC0,
-	0x68, 0x1B, 0x18, 0xD2, 0x18, 0x63, 0x46, 0x1B,
-	0x69, 0xD2, 0x18, 0x89, 0x1A, 0x72, 0x46, 0x9A,
-	0x1A, 0x0F, 0x9B, 0x52, 0x00, 0xC0, 0x1A, 0x10,
-	0x18, 0x07, 0x9A, 0x10, 0x1A, 0x07, 0x90, 0x06,
-	0x98, 0x40, 0x1C, 0x06, 0x90, 0x02, 0x28, 0xE0,
-	0xDB, 0x02, 0x98, 0x02, 0x28, 0x22, 0xD1, 0x03,
-	0x20, 0x06, 0x90, 0x14, 0x22, 0x50, 0x43, 0x22,
-	0x58, 0x00, 0x19, 0x43, 0x68, 0x96, 0x46, 0xD2,
-	0x18, 0x0E, 0x93, 0x84, 0x46, 0x83, 0x68, 0xC0,
-	0x68, 0x1B, 0x18, 0xD2, 0x18,
-	0x00, 0x00, 0x4B, 0x00, 0x80, 0x63, 0x46, 0x1B,
-	0x69, 0xD2, 0x18, 0x89, 0x1A, 0x72, 0x46, 0x9A,
-	0x1A, 0x0E, 0x9B, 0x52, 0x00, 0xC0, 0x1A, 0x10,
-	0x18, 0x00, 0xE0, 0x57, 0xE0, 0x07, 0x9A, 0x10,
-	0x1A, 0x07, 0x90, 0x06, 0x98, 0x40, 0x1C, 0x06,
-	0x90, 0x05, 0x28, 0xDE, 0xDB, 0x02, 0x98, 0x03,
-	0x28, 0x28, 0xD1, 0x00, 0x20, 0x06, 0x90, 0x80,
-	0x00, 0x22, 0x58, 0x00, 0x19, 0x43, 0x69, 0x96,
-	0x46, 0xD2, 0x18, 0x0D, 0x93, 0x84, 0x46, 0x83,
-	0x6A, 0xC0, 0x6B, 0x1B, 0x18, 0xD2, 0x18, 0x63,
-	0x46, 0x1B, 0x6D, 0xD2, 0x18, 0xBF, 0x1A, 0x72,
-	0x46, 0x9A, 0x1A, 0x0D, 0x9B, 0x52, 0x00, 0xC0,
-	0x1A, 0x10, 0x18, 0x08, 0x9A, 0x10, 0x1A, 0x08,
-	0x90, 0x06, 0x98, 0x40, 0x1C, 0x06, 0x90, 0x07,
-	0xE0, 0x6D, 0x01, 0x00, 0x20, 0x6E, 0x01, 0x00,
-	0x20, 0x64, 0x08, 0x00, 0x20, 0x90, 0xDD, 0x00,
-	0x00, 0x02, 0x28, 0xD8, 0xDB,
-	0x00, 0x00, 0x4C, 0x00, 0x80, 0x02, 0x98, 0x04,
-	0x28, 0x5F, 0xD1, 0x03, 0x20, 0x06, 0x90, 0x80,
-	0x00, 0x22, 0x58, 0x00, 0x19, 0x43, 0x69, 0x96,
-	0x46, 0xD2, 0x18, 0x0C, 0x93, 0x84, 0x46, 0x83,
-	0x6A, 0xC0, 0x6B, 0x1B, 0x18, 0xD2, 0x18, 0x63,
-	0x46, 0x1B, 0x6D, 0xD2, 0x18, 0xBF, 0x1A, 0x72,
-	0x46, 0x9A, 0x1A, 0x0C, 0x9B, 0x52, 0x00, 0xC0,
-	0x1A, 0x10, 0x18, 0x08, 0x9A, 0x10, 0x1A, 0x08,
-	0x90, 0x06, 0x98, 0x40, 0x1C, 0x06, 0x90, 0x05,
-	0x28, 0xE1, 0xDB, 0x3E, 0xE0, 0x09, 0x9F, 0x01,
-	0x20, 0x39, 0x46, 0x14, 0x22, 0x42, 0x43, 0x12,
-	0x19, 0xD3, 0x68, 0x52, 0x68, 0x9A, 0x1A, 0x07,
-	0x9B, 0xD2, 0x18, 0x07, 0x92, 0x82, 0x00, 0x12,
-	0x19, 0xD3, 0x6B, 0x52, 0x69, 0x40, 0x1C, 0x9A,
-	0x1A, 0x08, 0x9B, 0xD2, 0x18, 0x08, 0x92, 0x04,
-	0x28, 0xEB, 0xDB, 0x02, 0x98, 0x01, 0x28, 0x04,
-	0xD1, 0xA2, 0x69, 0xE0, 0x69,
-	0x00, 0x00, 0x4D, 0x00, 0x80, 0x13, 0x18, 0x20,
-	0x6A, 0x05, 0xE0, 0x02, 0x28, 0x0A, 0xD1, 0x22,
-	0x6C, 0x60, 0x6C, 0x13, 0x18, 0xA0, 0x6C, 0x1B,
-	0x18, 0x80, 0x1A, 0x07, 0x9A, 0xC9, 0x1A, 0x10,
-	0x1A, 0x07, 0x90, 0x12, 0xE0, 0x03, 0x28, 0x04,
-	0xD1, 0xA2, 0x69, 0xE0, 0x6A, 0x13, 0x18, 0x20,
-	0x6C, 0x05, 0xE0, 0x04, 0x28, 0x09, 0xD1, 0x22,
-	0x6A, 0x60, 0x6B, 0x13, 0x18, 0xA0, 0x6C, 0x1B,
-	0x18, 0x80, 0x1A, 0x08, 0x9A, 0xFF, 0x1A, 0x10,
-	0x1A, 0x08, 0x90, 0x07, 0x98, 0x00, 0x02, 0x0A,
-	0xF0, 0xA4, 0xF9, 0x29, 0x02, 0x40, 0x18, 0x80,
-	0x30, 0x07, 0x90, 0x08, 0x98, 0x39, 0x46, 0x00,
-	0x02, 0x0A, 0xF0, 0x9B, 0xF9, 0x0B, 0x99, 0x09,
-	0x02, 0x40, 0x18, 0x80, 0x30, 0xFF, 0x4F, 0x08,
-	0x90, 0x79, 0x69, 0x01, 0x29, 0x0B, 0xD1, 0xFE,
-	0x49, 0x07, 0x98, 0x4A, 0x69, 0x50, 0x43, 0x00,
-	0x14, 0x07, 0x90, 0x08, 0x98,
-	0x00, 0x00, 0x4E, 0x00, 0x80, 0x09, 0x69, 0x48,
-	0x43, 0x00, 0x14, 0x08, 0x90, 0x0A, 0xE0, 0xF8,
-	0x49, 0x4A, 0x69, 0x09, 0x69, 0x50, 0x43, 0x07,
-	0x9A, 0x00, 0x14, 0x4A, 0x43, 0x11, 0x14, 0x07,
-	0x90, 0x08, 0x91, 0x08, 0x46, 0x04, 0x99, 0x40,
-	0x18, 0x08, 0x90, 0x03, 0x99, 0x07, 0x98, 0x40,
-	0x18, 0x00, 0x21, 0x0A, 0x46, 0x07, 0x90, 0x00,
-	0x28, 0x00, 0xDB, 0x02, 0x46, 0x08, 0x98, 0x07,
-	0x92, 0x00, 0x28, 0x00, 0xDB, 0x01, 0x46, 0x08,
-	0x91, 0xB0, 0x79, 0x00, 0x07, 0x07, 0xD0, 0x07,
-	0xAA, 0x00, 0x92, 0x2A, 0x46, 0x08, 0xAB, 0x0B,
-	0x99, 0x05, 0x98, 0xFF, 0xF7, 0xB4, 0xF9, 0x07,
-	0xA9, 0x08, 0xA8, 0xFF, 0xF7, 0x80, 0xF9, 0x00,
-	0x28, 0x05, 0xD0, 0x11, 0x99, 0x05, 0x98, 0xFF,
-	0xF7, 0x69, 0xF9, 0x11, 0x90, 0x0E, 0xE0, 0x07,
-	0x98, 0xB0, 0x80, 0x08, 0x98, 0x70, 0x80, 0xB9,
-	0x69, 0x09, 0x98, 0x50, 0x22,
-	0x00, 0x00, 0x4F, 0x00, 0x80, 0x50, 0x43, 0x41,
-	0x43, 0xC8, 0x0B, 0xFF, 0x21, 0xFF, 0x28, 0x00,
-	0xD8, 0xC1, 0xB2, 0xB1, 0x71, 0x05, 0x98, 0x00,
-	0x28, 0x00, 0xD0, 0xE6, 0xE4, 0x11, 0x98, 0x15,
-	0xB0, 0xF0, 0xBD, 0xF0, 0xB5, 0xD3, 0x4E, 0x00,
-	0x24, 0x02, 0x22, 0x73, 0x1F, 0xA4, 0x18, 0x35,
-	0x5D, 0x1F, 0x5D, 0x45, 0x43, 0x4F, 0x43, 0xBD,
-	0x42, 0x00, 0xD9, 0xA4, 0x1A, 0x52, 0x08, 0xF5,
-	0xD1, 0x22, 0x01, 0x94, 0x46, 0x1D, 0x5D, 0x32,
-	0x5D, 0x64, 0x1C, 0x1B, 0x5D, 0x4D, 0x43, 0x4B,
-	0x43, 0x31, 0x5D, 0x42, 0x43, 0x5B, 0x1B, 0x41,
-	0x43, 0x8C, 0x1A, 0x2E, 0x01, 0x15, 0x01, 0x08,
-	0x21, 0x00, 0x20, 0x40, 0x18, 0x02, 0x46, 0x07,
-	0x46, 0x62, 0x43, 0x5F, 0x43, 0x52, 0x19, 0xBF,
-	0x19, 0xBA, 0x42, 0x00, 0xD9, 0x40, 0x1A, 0x49,
-	0x08, 0xF3, 0xD1, 0x60, 0x44, 0xF0, 0xBD, 0xFF,
-	0xB5, 0x83, 0xB0, 0x00, 0x25,
-	0x00, 0x00, 0x50, 0x00, 0x80, 0x03, 0x98, 0x0C,
-	0x9C, 0x00, 0x95, 0x00, 0x28, 0x03, 0xD0, 0xB8,
-	0x48, 0x00, 0x78, 0x80, 0x07, 0x03, 0xD1, 0x00,
-	0x20, 0xE0, 0x71, 0x20, 0x72, 0x99, 0xE0, 0x00,
-	0x20, 0x02, 0x90, 0x40, 0x1E, 0x01, 0x90, 0xB1,
-	0x48, 0x40, 0x69, 0x01, 0x28, 0x03, 0xD1, 0x60,
-	0x88, 0x86, 0x46, 0xA0, 0x88, 0x02, 0xE0, 0xA0,
-	0x88, 0x86, 0x46, 0x60, 0x88, 0x00, 0x22, 0x84,
-	0x46, 0x23, 0xE0, 0x08, 0x78, 0x05, 0x9B, 0x06,
-	0x9E, 0x58, 0x43, 0x5B, 0x08, 0xC0, 0x18, 0x03,
-	0x0A, 0x70, 0x46, 0x1B, 0x1A, 0x48, 0x78, 0x70,
-	0x43, 0x76, 0x08, 0x80, 0x19, 0x00, 0x0A, 0x66,
-	0x46, 0x86, 0x1B, 0x18, 0x46, 0x37, 0x46, 0x58,
-	0x43, 0x77, 0x43, 0xC0, 0x19, 0x02, 0x9F, 0xB8,
-	0x42, 0x04, 0xD3, 0x02, 0x90, 0x30, 0xB2, 0x1D,
-	0xB2, 0x00, 0x90, 0x03, 0xE0, 0x01, 0x9B, 0x98,
-	0x42, 0x00, 0xD8, 0x01, 0x90,
-	0x00, 0x00, 0x51, 0x00, 0x80, 0x52, 0x1C, 0xD2,
-	0xB2, 0x89, 0x1C, 0x03, 0x98, 0x82, 0x42, 0xD8,
-	0xD3, 0x02, 0x98, 0x00, 0xF0, 0xC5, 0xFD, 0x46,
-	0x00, 0x01, 0x98, 0x01, 0x01, 0x02, 0x98, 0xC2,
-	0x00, 0x80, 0x18, 0x81, 0x42, 0x01, 0xD9, 0x37,
-	0x46, 0x13, 0xE0, 0x01, 0x98, 0x00, 0xF0, 0xB8,
-	0xFD, 0x47, 0x00, 0x8E, 0x48, 0x40, 0x69, 0x01,
-	0x28, 0x02, 0xD0, 0x00, 0x98, 0x00, 0x95, 0x05,
-	0x46, 0x8B, 0x48, 0x00, 0x78, 0x80, 0x07, 0x04,
-	0xD5, 0x00, 0x98, 0x40, 0x42, 0x02, 0xB2, 0x00,
-	0x2D, 0x01, 0xD1, 0x00, 0x20, 0x18, 0xE0, 0x00,
-	0x2A, 0x03, 0xDA, 0x50, 0x42, 0x02, 0xB2, 0x68,
-	0x42, 0x05, 0xB2, 0x68, 0x42, 0x00, 0x2D, 0x00,
-	0xDB, 0x28, 0x46, 0x82, 0x42, 0x04, 0xD9, 0x01,
-	0x46, 0x10, 0x46, 0xFF, 0xF7, 0x56, 0xFF, 0x04,
-	0xE0, 0x11, 0x46, 0xFF, 0xF7, 0x52, 0xFF, 0x7F,
-	0x21, 0x08, 0x1A, 0x00, 0x2D,
-	0x00, 0x00, 0x52, 0x00, 0x80, 0x00, 0xDA, 0x40,
-	0x42, 0x79, 0x49, 0x09, 0x78, 0xC9, 0x07, 0x02,
-	0xD1, 0x00, 0x22, 0x11, 0x46, 0x1B, 0xE0, 0x75,
-	0x49, 0x20, 0x31, 0x8A, 0x79, 0xB2, 0x42, 0x02,
-	0xD2, 0x8A, 0x79, 0xB2, 0x1A, 0x00, 0xE0, 0x00,
-	0x22, 0xCB, 0x79, 0x53, 0x43, 0x1A, 0x0A, 0xFF,
-	0x2A, 0x00, 0xD9, 0xFF, 0x22, 0x0B, 0x7A, 0xBB,
-	0x42, 0x02, 0xD2, 0x0B, 0x7A, 0xFB, 0x1A, 0x00,
-	0xE0, 0x00, 0x23, 0x49, 0x7A, 0x59, 0x43, 0x09,
-	0x0A, 0xFF, 0x29, 0x00, 0xD9, 0xFF, 0x21, 0xE2,
-	0x71, 0x21, 0x72, 0x60, 0x72, 0x07, 0xB0, 0xF0,
-	0xBD, 0xF7, 0xB5, 0x64, 0x4D, 0xD0, 0xB0, 0x6C,
-	0x69, 0x63, 0x4B, 0x01, 0x2C, 0x1A, 0x69, 0x58,
-	0x69, 0x02, 0xD1, 0x1C, 0x92, 0x1B, 0x90, 0x01,
-	0xE0, 0x1B, 0x92, 0x1C, 0x90, 0x60, 0x48, 0x00,
-	0x78, 0x40, 0x1E, 0x36, 0x90, 0x5F, 0x48, 0x00,
-	0x78, 0x40, 0x1E, 0x35, 0x90,
-	0x00, 0x00, 0x53, 0x00, 0x80, 0x00, 0x20, 0x1F,
-	0x90, 0x58, 0x48, 0x42, 0x79, 0x1E, 0x92, 0x80,
-	0x79, 0x1D, 0x90, 0x56, 0x48, 0x5A, 0x7A, 0x20,
-	0x30, 0x4F, 0x90, 0x00, 0x2A, 0x15, 0xD0, 0x98,
-	0x7A, 0x01, 0x28, 0x0A, 0xD1, 0x4F, 0x98, 0x02,
-	0x78, 0x1E, 0x98, 0x10, 0x18, 0x1E, 0x90, 0x4F,
-	0x98, 0x40, 0x78, 0x1D, 0x9A, 0x10, 0x1A, 0x1D,
-	0x90, 0x07, 0xE0, 0xD8, 0x7A, 0x01, 0x28, 0x04,
-	0xD1, 0x4F, 0x98, 0x00, 0x78, 0x1E, 0x9A, 0x10,
-	0x1A, 0x1E, 0x90, 0x49, 0x48, 0x00, 0x24, 0x84,
-	0x72, 0xC4, 0x72, 0x4B, 0x48, 0x40, 0x6A, 0x42,
-	0x09, 0x52, 0x1C, 0x20, 0x46, 0x04, 0xE0, 0x00,
-	0x23, 0x84, 0x00, 0x22, 0xAD, 0x2B, 0x51, 0x40,
-	0x1C, 0x90, 0x42, 0xF8, 0xD3, 0x48, 0x00, 0x51,
-	0x90, 0x00, 0x20, 0x21, 0xE2, 0x52, 0x99, 0x22,
-	0xAD, 0x0A, 0x5C, 0x08, 0x46, 0x32, 0x99, 0x21,
-	0x92, 0x40, 0x18, 0x41, 0x78,
-	0x00, 0x00, 0x54, 0x00, 0x80, 0x20, 0x91, 0x35,
-	0x99, 0x01, 0x23, 0x49, 0x1C, 0x4A, 0x43, 0x4E,
-	0x91, 0x20, 0x99, 0x00, 0x24, 0x51, 0x18, 0x4A,
-	0x09, 0x92, 0x00, 0x94, 0x46, 0xAA, 0x58, 0xCE,
-	0x06, 0xF6, 0x0E, 0x1D, 0x46, 0xB5, 0x40, 0x16,
-	0x46, 0x20, 0x46, 0x2E, 0x42, 0x6C, 0xD1, 0x6A,
-	0x40, 0x22, 0xAE, 0x65, 0x46, 0x72, 0x51, 0x33,
-	0x4A, 0x52, 0x56, 0x4F, 0x99, 0x09, 0x79, 0x00,
-	0x25, 0x51, 0x43, 0xC9, 0x11, 0x34, 0x91, 0x21,
-	0x99, 0x39, 0x91, 0x20, 0x9E, 0x3C, 0x91, 0x3A,
-	0x91, 0x3B, 0x96, 0x38, 0x96, 0x37, 0x96, 0x05,
-	0x2A, 0x00, 0xDD, 0x55, 0x1F, 0x3C, 0x99, 0x33,
-	0x95, 0x69, 0x43, 0x75, 0x43, 0x00, 0x22, 0x1A,
-	0x92, 0x3B, 0x9F, 0x35, 0x9A, 0x97, 0x42, 0x5A,
-	0xD0, 0x7F, 0x1C, 0x3C, 0x9A, 0x4E, 0x9E, 0x4C,
-	0x92, 0x72, 0x43, 0xD6, 0x19, 0x72, 0x11, 0xB4,
-	0x46, 0x92, 0x00, 0x3B, 0x97,
-	0x00, 0x00, 0x55, 0x00, 0x80, 0x4D, 0x97, 0x22,
-	0xAE, 0x4B, 0x92, 0xB2, 0x58, 0x66, 0x46, 0xF7,
-	0x06, 0xFF, 0x0E, 0x01, 0x26, 0xBE, 0x40, 0x4A,
-	0x92, 0x32, 0x42, 0x41, 0xD1, 0x4A, 0x9A, 0x22,
-	0xAF, 0x72, 0x40, 0x4B, 0x9E, 0xBA, 0x51, 0x17,
-	0x4A, 0x66, 0x46, 0x92, 0x57, 0x34, 0x9E, 0x94,
-	0x46, 0xB2, 0x42, 0x08, 0xDD, 0x50, 0x9A, 0x4C,
-	0x9E, 0x16, 0x54, 0x50, 0x9A, 0x3B, 0x9E, 0x12,
-	0x18, 0x56, 0x70, 0x80, 0x1C, 0x0A, 0xE0, 0x30,
-	0x2C, 0x08, 0xD2, 0x62, 0x00, 0x02, 0xAE, 0x4C,
-	0x9F, 0xB7, 0x54, 0x92, 0x19, 0x4D, 0x9F, 0x64,
-	0x1C, 0x57, 0x70, 0xE4, 0xB2, 0x66, 0x46, 0x76,
-	0x1F, 0x00, 0x2E, 0x1C, 0xDD, 0x33, 0x9A, 0x92,
-	0x19, 0x33, 0x92, 0x0E, 0xE0, 0x90, 0xDD, 0x00,
-	0x00, 0x90, 0x00, 0x00, 0x20, 0xF5, 0xCB, 0x00,
-	0x00, 0x6D, 0x01, 0x00, 0x20, 0x6E, 0x01, 0x00,
-	0x20, 0x88, 0xDF, 0x00, 0x00,
-	0x00, 0x00, 0x56, 0x00, 0x80, 0x64, 0x08, 0x00,
-	0x20, 0x88, 0xE1, 0x3C, 0x9A, 0x72, 0x43, 0x51,
-	0x18, 0x3B, 0x9A, 0x56, 0x43, 0x75, 0x19, 0x37,
-	0x9E, 0x96, 0x42, 0x00, 0xD2, 0x37, 0x92, 0x5B,
-	0x1C, 0x3B, 0x9A, 0x52, 0x1E, 0x3B, 0x92, 0x36,
-	0x9E, 0x3C, 0x9A, 0xB2, 0x42, 0x4B, 0xD0, 0x52,
-	0x1C, 0x49, 0x92, 0x4E, 0x9E, 0x3C, 0x92, 0x72,
-	0x43, 0x3B, 0x9E, 0x48, 0x96, 0x96, 0x19, 0x72,
-	0x11, 0xB4, 0x46, 0x92, 0x00, 0x22, 0xAE, 0x47,
-	0x92, 0xB2, 0x58, 0x66, 0x46, 0xF7, 0x06, 0xFF,
-	0x0E, 0x01, 0x26, 0xBE, 0x40, 0x46, 0x92, 0x32,
-	0x42, 0x32, 0xD1, 0x46, 0x9A, 0x22, 0xAF, 0x72,
-	0x40, 0x47, 0x9E, 0xBA, 0x51, 0xFD, 0x4A, 0x66,
-	0x46, 0x92, 0x57, 0x34, 0x9E, 0x94, 0x46, 0xB2,
-	0x42, 0x08, 0xDD, 0x50, 0x9A, 0x49, 0x9E, 0x16,
-	0x54, 0x50, 0x9A, 0x3B, 0x9E, 0x12, 0x18, 0x56,
-	0x70, 0x80, 0x1C, 0x0A, 0xE0,
-	0x00, 0x00, 0x57, 0x00, 0x80, 0x30, 0x2C, 0x08,
-	0xD2, 0x62, 0x00, 0x02, 0xAE, 0x49, 0x9F, 0xB7,
-	0x54, 0x92, 0x19, 0x48, 0x9F, 0x64, 0x1C, 0x57,
-	0x70, 0xE4, 0xB2, 0x62, 0x46, 0x52, 0x1F, 0x00,
-	0x2A, 0x0D, 0xDD, 0x33, 0x9E, 0x17, 0x46, 0xB6,
-	0x18, 0x33, 0x96, 0x3C, 0x9E, 0x77, 0x43, 0x79,
-	0x18, 0x3B, 0x9F, 0x7A, 0x43, 0x55, 0x19, 0x39,
-	0x9A, 0xB2, 0x42, 0x00, 0xD2, 0x39, 0x96, 0x5B,
-	0x1C, 0x3C, 0x9A, 0x52, 0x1E, 0x3C, 0x92, 0x3B,
-	0x9F, 0x00, 0x2F, 0x49, 0xD0, 0x44, 0x92, 0x7F,
-	0x1E, 0x4E, 0x9E, 0x3B, 0x97, 0x72, 0x43, 0xD6,
-	0x19, 0x72, 0x11, 0xB4, 0x46, 0x92, 0x00, 0x45,
-	0x97, 0x22, 0xAE, 0x43, 0x92, 0xB2, 0x58, 0x66,
-	0x46, 0xF7, 0x06, 0xFF, 0x0E, 0x01, 0x26, 0xBE,
-	0x40, 0x42, 0x92, 0x32, 0x42, 0x31, 0xD1, 0x42,
-	0x9A, 0x22, 0xAF, 0x72, 0x40, 0x43, 0x9E, 0xBA,
-	0x51, 0xD6, 0x4A, 0x66, 0x46,
-	0x00, 0x00, 0x58, 0x00, 0x80, 0x92, 0x57, 0x34,
-	0x9E, 0x94, 0x46, 0xB2, 0x42, 0x08, 0xDD, 0x50,
-	0x9A, 0x44, 0x9E, 0x16, 0x54, 0x50, 0x9A, 0x3B,
-	0x9E, 0x12, 0x18, 0x56, 0x70, 0x80, 0x1C, 0x0A,
-	0xE0, 0x30, 0x2C, 0x08, 0xD2, 0x62, 0x00, 0x02,
-	0xAE, 0x44, 0x9F, 0xB7, 0x54, 0x92, 0x19, 0x45,
-	0x9F, 0x64, 0x1C, 0x57, 0x70, 0xE4, 0xB2, 0x66,
-	0x46, 0x76, 0x1F, 0x00, 0x2E, 0x0C, 0xDD, 0x33,
-	0x9A, 0x92, 0x19, 0x33, 0x92, 0x3C, 0x9A, 0x72,
-	0x43, 0x51, 0x18, 0x3B, 0x9A, 0x56, 0x43, 0x75,
-	0x19, 0x38, 0x9E, 0x96, 0x42, 0x00, 0xD9, 0x38,
-	0x92, 0x5B, 0x1C, 0x3B, 0x9A, 0x52, 0x1C, 0x3B,
-	0x92, 0x3C, 0x9A, 0x00, 0x2A, 0x4B, 0xD0, 0x52,
-	0x1E, 0x3C, 0x92, 0x4E, 0x9E, 0x41, 0x92, 0x72,
-	0x43, 0x3B, 0x9E, 0x40, 0x96, 0x96, 0x19, 0x72,
-	0x11, 0xB4, 0x46, 0x92, 0x00, 0x22, 0xAE, 0x3F,
-	0x92, 0xB2, 0x58, 0x66, 0x46,
-	0x00, 0x00, 0x59, 0x00, 0x80, 0xF7, 0x06, 0xFF,
-	0x0E, 0x01, 0x26, 0xBE, 0x40, 0x3E, 0x92, 0x32,
-	0x42, 0x32, 0xD1, 0x3E, 0x9A, 0x22, 0xAF, 0x72,
-	0x40, 0x3F, 0x9E, 0xBA, 0x51, 0xAF, 0x4A, 0x66,
-	0x46, 0x92, 0x57, 0x34, 0x9E, 0x94, 0x46, 0xB2,
-	0x42, 0x08, 0xDD, 0x50, 0x9A, 0x41, 0x9E, 0x16,
-	0x54, 0x50, 0x9A, 0x3B, 0x9E, 0x12, 0x18, 0x56,
-	0x70, 0x80, 0x1C, 0x0A, 0xE0, 0x30, 0x2C, 0x08,
-	0xD2, 0x62, 0x00, 0x02, 0xAE, 0x41, 0x9F, 0xB7,
-	0x54, 0x92, 0x19, 0x40, 0x9F, 0x64, 0x1C, 0x57,
-	0x70, 0xE4, 0xB2, 0x62, 0x46, 0x52, 0x1F, 0x00,
-	0x2A, 0x0D, 0xDD, 0x33, 0x9E, 0x17, 0x46, 0xB6,
-	0x18, 0x33, 0x96, 0x3C, 0x9E, 0x77, 0x43, 0x79,
-	0x18, 0x3B, 0x9F, 0x7A, 0x43, 0x55, 0x19, 0x3A,
-	0x9A, 0xB2, 0x42, 0x00, 0xD9, 0x3A, 0x96, 0x5B,
-	0x1C, 0x3C, 0x9A, 0x52, 0x1C, 0x3C, 0x92, 0x00,
-	0x28, 0x22, 0xD0, 0x50, 0x9A,
-	0x00, 0x00, 0x5A, 0x00, 0x80, 0x80, 0x1E, 0x12,
-	0x56, 0x3C, 0x92, 0x50, 0x9A, 0x01, 0x27, 0x12,
-	0x18, 0xD7, 0x57, 0x00, 0x22, 0x94, 0x46, 0x3C,
-	0x9A, 0x3B, 0x97, 0x3D, 0x92, 0x10, 0xE0, 0x52,
-	0x9A, 0x66, 0x46, 0x92, 0x5D, 0x3D, 0x9E, 0xB2,
-	0x42, 0x06, 0xD1, 0x52, 0x9A, 0x62, 0x44, 0x52,
-	0x78, 0xBA, 0x42, 0x01, 0xD1, 0x01, 0x22, 0x1A,
-	0x92, 0x62, 0x46, 0x92, 0x1C, 0xD2, 0xB2, 0x94,
-	0x46, 0x51, 0x9E, 0xB4, 0x45, 0xEB, 0xD3, 0x8F,
-	0xE6, 0x1E, 0x98, 0x98, 0x42, 0x67, 0xD3, 0x1F,
-	0x9A, 0x32, 0x98, 0x0E, 0x26, 0x72, 0x43, 0xC0,
-	0x03, 0x81, 0x4E, 0x00, 0x0C, 0xB0, 0x52, 0x00,
-	0x20, 0x96, 0x19, 0xF0, 0x71, 0x30, 0x72, 0x70,
-	0x72, 0x1D, 0x9A, 0x9A, 0x42, 0x0A, 0xD3, 0x1A,
-	0x9A, 0x00, 0x2A, 0x07, 0xD1, 0x21, 0x99, 0x3C,
-	0x91, 0x20, 0x99, 0x3B, 0x91, 0x20, 0x21, 0xF1,
-	0x72, 0x30, 0x73, 0x42, 0xE0,
-	0x00, 0x00, 0x5B, 0x00, 0x80, 0x77, 0x48, 0x40,
-	0x69, 0x00, 0x28, 0x03, 0xD1, 0x08, 0x46, 0x3C,
-	0x91, 0x29, 0x46, 0x05, 0x46, 0x74, 0x48, 0x02,
-	0x69, 0x10, 0x46, 0x48, 0x43, 0x17, 0x46, 0x33,
-	0x99, 0x09, 0xF0, 0x3B, 0xFE, 0x79, 0x10, 0x40,
-	0x18, 0x00, 0x12, 0x3C, 0x90, 0x6E, 0x48, 0x33,
-	0x99, 0x42, 0x69, 0x10, 0x46, 0x17, 0x46, 0x68,
-	0x43, 0x09, 0xF0, 0x2F, 0xFE, 0x79, 0x10, 0x40,
-	0x18, 0x00, 0x12, 0x3B, 0x90, 0x3B, 0xA9, 0x3C,
-	0xA8, 0xFE, 0xF7, 0x4D, 0xFE, 0x01, 0x28, 0x31,
-	0xD0, 0x64, 0x48, 0x80, 0x69, 0x33, 0x99, 0x50,
-	0x22, 0x51, 0x43, 0x48, 0x43, 0xC0, 0x0B, 0xFF,
-	0x21, 0xFF, 0x28, 0x00, 0xD8, 0xC1, 0xB2, 0xB1,
-	0x71, 0x10, 0x20, 0xF0, 0x72, 0x30, 0x73, 0x3C,
-	0x98, 0x70, 0x80, 0x3B, 0x98, 0xB0, 0x80, 0x00,
-	0x96, 0x02, 0xA9, 0x20, 0x46, 0x1B, 0x9B, 0x1C,
-	0x9A, 0xFF, 0xF7, 0xFD, 0xFC,
-	0x00, 0x00, 0x5C, 0x00, 0x80, 0x58, 0x49, 0x01,
-	0x20, 0x88, 0x72, 0x3C, 0x98, 0x70, 0x80, 0x3B,
-	0x98, 0xB0, 0x80, 0x1F, 0x98, 0x40, 0x1C, 0x1F,
-	0x90, 0x0B, 0x28, 0x12, 0xD0, 0x0A, 0xE0, 0x51,
-	0x48, 0x00, 0x79, 0x02, 0x28, 0x03, 0xD1, 0x50,
-	0x49, 0xC8, 0x78, 0x40, 0x1C, 0xC8, 0x70, 0x4E,
-	0x49, 0x01, 0x20, 0xC8, 0x72, 0x32, 0x98, 0x80,
-	0x1C, 0x51, 0x99, 0x32, 0x90, 0x88, 0x42, 0x00,
-	0xD2, 0xD8, 0xE5, 0x1F, 0x98, 0x53, 0xB0, 0xC0,
-	0xB2, 0xF0, 0xBD, 0xF3, 0xB5, 0x8E, 0xB0, 0x40,
-	0x00, 0x00, 0x21, 0x0E, 0x90, 0x44, 0x48, 0x01,
-	0x91, 0x0A, 0x91, 0x00, 0x79, 0x0D, 0x90, 0x43,
-	0x48, 0x0A, 0x46, 0x00, 0x78, 0x8C, 0x46, 0x40,
-	0x1E, 0x0C, 0x90, 0x41, 0x48, 0x00, 0x78, 0x0B,
-	0x90, 0x40, 0x1E, 0x86, 0x46, 0x00, 0x25, 0x96,
-	0xE0, 0x0F, 0x99, 0x60, 0x46, 0x0C, 0x5C, 0x08,
-	0x18, 0x0B, 0x99, 0x40, 0x78,
-	0x00, 0x00, 0x5D, 0x00, 0x80, 0x61, 0x43, 0x09,
-	0x18, 0x01, 0x23, 0x00, 0x2C, 0x07, 0xD0, 0x00,
-	0x28, 0x05, 0xD0, 0x0C, 0x9E, 0xB4, 0x42, 0x02,
-	0xD0, 0x70, 0x45, 0x00, 0xD0, 0x00, 0x23, 0x00,
-	0x93, 0x00, 0x23, 0x9E, 0x00, 0x02, 0xAF, 0x5B,
-	0x1C, 0xBD, 0x51, 0x08, 0x2B, 0xF9, 0xD3, 0x00,
-	0x9B, 0x00, 0x2B, 0x2C, 0x4B, 0x01, 0xD1, 0x5B,
-	0x7F, 0x00, 0xE0, 0x9B, 0x7F, 0x27, 0x4E, 0x76,
-	0x56, 0x73, 0x43, 0xDB, 0x08, 0x9A, 0x18, 0x0D,
-	0x9B, 0x01, 0x2B, 0x03, 0xD1, 0x23, 0x4B, 0x5B,
-	0x56, 0x5B, 0x10, 0x9A, 0x18, 0x0C, 0x9B, 0x9C,
-	0x42, 0x13, 0xD2, 0x0B, 0x9B, 0xCF, 0x18, 0x1F,
-	0x4B, 0x70, 0x45, 0xDB, 0x57, 0x08, 0x93, 0x04,
-	0xD2, 0x1C, 0x4B, 0xFB, 0x18, 0x01, 0x26, 0x9E,
-	0x57, 0x09, 0x96, 0x00, 0x28, 0x05, 0xD0, 0x19,
-	0x4B, 0xFB, 0x18, 0x20, 0x3B, 0x1F, 0x26, 0x9E,
-	0x57, 0x07, 0x96, 0x00, 0x2C,
-	0x00, 0x00, 0x5E, 0x00, 0x80, 0x11, 0xD0, 0x0B,
-	0x9B, 0x14, 0x4F, 0xCB, 0x1A, 0xFC, 0x56, 0x03,
-	0x94, 0x70, 0x45, 0x03, 0xD2, 0xDC, 0x19, 0x01,
-	0x26, 0xA6, 0x57, 0x04, 0x96, 0x00, 0x28, 0x04,
-	0xD0, 0xDB, 0x19, 0x20, 0x3B, 0x1F, 0x24, 0x1C,
-	0x57, 0x02, 0x94, 0x70, 0x45, 0x04, 0xD2, 0x0B,
-	0x4B, 0x5B, 0x18, 0x01, 0x24, 0x1C, 0x57, 0x06,
-	0x94, 0x00, 0x28, 0x05, 0xD0, 0x07, 0x48, 0x40,
-	0x18, 0x20, 0x38, 0x1F, 0x21, 0x41, 0x56, 0x05,
-	0x91, 0x00, 0x99, 0x03, 0x20, 0x00, 0x29, 0x00,
-	0xD0, 0x02, 0x20, 0x00, 0x23, 0x02, 0xAF, 0x00,
-	0x90, 0x1F, 0xE0, 0x00, 0x00, 0x64, 0x08, 0x00,
-	0x20, 0x4C, 0x03, 0x00, 0x20, 0x90, 0xDD, 0x00,
-	0x00, 0x90, 0x00, 0x00, 0x20, 0x6D, 0x01, 0x00,
-	0x20, 0x6E, 0x01, 0x00, 0x20, 0x00, 0x21, 0x01,
-	0x20, 0x84, 0x00, 0x8E, 0x00, 0x3C, 0x59, 0xBE,
-	0x59, 0xB4, 0x42, 0x00, 0xDD,
-	0x00, 0x00, 0x5F, 0x00, 0x80, 0x01, 0x46, 0x40,
-	0x1C, 0x08, 0x28, 0xF5, 0xD3, 0x88, 0x00, 0x39,
-	0x58, 0x0A, 0x9C, 0x09, 0x19, 0x0A, 0x91, 0x3D,
-	0x50, 0x5B, 0x1C, 0x00, 0x98, 0x83, 0x42, 0xE9,
-	0xD3, 0x60, 0x46, 0x80, 0x1C, 0x84, 0x46, 0x0E,
-	0x99, 0x8C, 0x45, 0x00, 0xD2, 0x64, 0xE7, 0x0A,
-	0x98, 0x90, 0x42, 0x01, 0xD2, 0x01, 0x20, 0x01,
-	0x90, 0x0D, 0x98, 0xF9, 0x49, 0x00, 0x28, 0x01,
-	0x98, 0x08, 0x71, 0x02, 0xD1, 0x00, 0x20, 0x10,
-	0xB0, 0xF0, 0xBD, 0x01, 0x20, 0xFB, 0xE7, 0xFE,
-	0xB5, 0x94, 0x46, 0xF3, 0x4A, 0x04, 0x46, 0x50,
-	0x7A, 0x84, 0x42, 0x58, 0xD0, 0xD3, 0x79, 0x00,
-	0x93, 0x00, 0x2C, 0x01, 0xD1, 0x18, 0x46, 0x05,
-	0xE0, 0x00, 0x28, 0x05, 0xD1, 0xED, 0x48, 0xC3,
-	0x7F, 0x00, 0x98, 0xC0, 0x1A, 0x10, 0x72, 0x4A,
-	0xE0, 0x84, 0x42, 0x48, 0xD9, 0x00, 0x20, 0x62,
-	0x06, 0x14, 0x0E, 0x41, 0xE0,
-	0x00, 0x00, 0x60, 0x00, 0x80, 0x00, 0x22, 0x13,
-	0x46, 0x01, 0x92, 0xE5, 0x4A, 0x0E, 0x18, 0x52,
-	0x7A, 0x96, 0x46, 0x10, 0xE0, 0xE4, 0x4A, 0x5D,
-	0x00, 0x0F, 0x5C, 0x52, 0x5D, 0xBA, 0x1A, 0x52,
-	0x1C, 0x02, 0x2A, 0x0D, 0xD8, 0xE0, 0x4A, 0x77,
-	0x78, 0x52, 0x19, 0x52, 0x78, 0xBA, 0x1A, 0x52,
-	0x1C, 0x02, 0x2A, 0x05, 0xD8, 0x5B, 0x1C, 0x73,
-	0x45, 0xEC, 0xD3, 0x01, 0x9A, 0x00, 0x2A, 0x22,
-	0xD0, 0xDA, 0x4B, 0x0A, 0x5C, 0x1B, 0x78, 0x5A,
-	0x43, 0x73, 0x78, 0xD2, 0x18, 0xD8, 0x4B, 0x9B,
-	0x56, 0x00, 0x9A, 0x93, 0x42, 0x17, 0xDA, 0x03,
-	0x46, 0x82, 0x1C, 0x0F, 0xE0, 0x8D, 0x5C, 0xCD,
-	0x54, 0x8D, 0x18, 0x6D, 0x78, 0xCE, 0x18, 0x75,
-	0x70, 0x56, 0x08, 0x76, 0x00, 0x65, 0x46, 0xAD,
-	0x5B, 0x5E, 0x08, 0x76, 0x00, 0x67, 0x46, 0x9B,
-	0x1C, 0xBD, 0x53, 0x92, 0x1C, 0xA2, 0x42, 0xED,
-	0xD3, 0xA4, 0x1E, 0xE4, 0xB2,
-	0x00, 0x00, 0x61, 0x00, 0x80, 0x00, 0xE0, 0x80,
-	0x1C, 0xA0, 0x42, 0xBB, 0xD3, 0x64, 0x08, 0x62,
-	0x00, 0xC5, 0x48, 0x09, 0xF0, 0x47, 0xFC, 0x20,
-	0x46, 0xFE, 0xBD, 0xFF, 0xB5, 0xC0, 0x4A, 0x99,
-	0xB0, 0x00, 0x20, 0xD0, 0x70, 0x16, 0x90, 0x17,
-	0x90, 0xC2, 0x48, 0x0E, 0x46, 0x00, 0x78, 0x40,
-	0x1E, 0x14, 0x90, 0xBE, 0x48, 0x00, 0x78, 0x13,
-	0x90, 0x10, 0x7A, 0x15, 0x90, 0xB2, 0xE0, 0x13,
-	0x98, 0x1C, 0x99, 0x70, 0x43, 0x49, 0x1E, 0x47,
-	0x18, 0x1C, 0x9D, 0xA3, 0xE0, 0xB8, 0x49, 0x7F,
-	0x1C, 0xC8, 0x57, 0x15, 0x9A, 0x90, 0x42, 0x7E,
-	0xDB, 0x13, 0x9A, 0x01, 0x21, 0x52, 0x1E, 0x04,
-	0x46, 0x95, 0x42, 0x00, 0xD3, 0x00, 0x21, 0x14,
-	0x9A, 0x96, 0x42, 0x1D, 0xD2, 0x13, 0x9A, 0xBB,
-	0x18, 0x5B, 0x1C, 0x00, 0x29, 0x06, 0xD0, 0xAE,
-	0x4A, 0xD2, 0x56, 0x90, 0x42, 0xEB, 0xDB, 0x00,
-	0x2A, 0x00, 0xDD, 0x14, 0x19,
-	0x00, 0x00, 0x62, 0x00, 0x80, 0xAA, 0x4A, 0x5B,
-	0x1E, 0xD2, 0x56, 0x90, 0x42, 0x63, 0xDB, 0x00,
-	0x2A, 0x00, 0xDD, 0x14, 0x19, 0x00, 0x2D, 0x07,
-	0xD0, 0xA5, 0x4A, 0x5B, 0x1E, 0xD2, 0x56, 0x90,
-	0x42, 0x77, 0xDB, 0x00, 0x2A, 0x00, 0xDD, 0x14,
-	0x19, 0x00, 0x29, 0x08, 0xD0, 0xA0, 0x4A, 0xD3,
-	0x19, 0x01, 0x22, 0x9A, 0x56, 0x90, 0x42, 0x6C,
-	0xDB, 0x00, 0x2A, 0x00, 0xDD, 0x14, 0x19, 0x00,
-	0x2D, 0x09, 0xD0, 0x9B, 0x4A, 0xD3, 0x19, 0x20,
-	0x3B, 0x1F, 0x22, 0x9A, 0x56, 0x90, 0x42, 0x60,
-	0xDD, 0x00, 0x2A, 0x00, 0xDD, 0x14, 0x19, 0x00,
-	0x2E, 0x1D, 0xD0, 0x13, 0x9A, 0xBB, 0x1A, 0x5B,
-	0x1C, 0x00, 0x29, 0x06, 0xD0, 0x92, 0x4A, 0xD2,
-	0x56, 0x90, 0x42, 0x52, 0xDD, 0x00, 0x2A, 0x00,
-	0xDD, 0x14, 0x19, 0x8F, 0x4A, 0x5B, 0x1E, 0xD2,
-	0x56, 0x90, 0x42, 0x4A, 0xDD, 0x00, 0x2A, 0x00,
-	0xDD, 0x14, 0x19, 0x00, 0x2D,
-	0x00, 0x00, 0x63, 0x00, 0x80, 0x07, 0xD0, 0x8A,
-	0x4A, 0x5B, 0x1E, 0xD2, 0x56, 0x90, 0x42, 0x40,
-	0xDD, 0x00, 0x2A, 0x00, 0xDD, 0x14, 0x19, 0x01,
-	0x20, 0x00, 0x2D, 0x02, 0xD0, 0x00, 0x29, 0x00,
-	0xD0, 0x00, 0x20, 0x00, 0x2E, 0x02, 0xD0, 0x14,
-	0x99, 0x8E, 0x42, 0x00, 0xD1, 0x40, 0x1C, 0x7C,
-	0x4A, 0x15, 0x99, 0x52, 0x79, 0x91, 0x40, 0x01,
-	0x41, 0xA1, 0x42, 0x2A, 0xDC, 0xFE, 0xF7, 0xC9,
-	0xF9, 0x01, 0x28, 0x16, 0xD1, 0x7C, 0x48, 0x00,
-	0x78, 0xC1, 0x07, 0x07, 0xD0, 0x7B, 0x49, 0x75,
-	0x4A, 0x49, 0x57, 0x12, 0x89, 0x00, 0xE0, 0x1C,
-	0xE0, 0x91, 0x42, 0x1A, 0xDB, 0x80, 0x07, 0x08,
-	0xD5, 0x72, 0x48, 0x76, 0x49, 0x00, 0x78, 0x80,
-	0x19, 0x08, 0x56, 0x6E, 0x49, 0x09, 0x89, 0x88,
-	0x42, 0x0F, 0xDB, 0x6F, 0x48, 0x02, 0xAA, 0xC0,
-	0x57, 0x21, 0x1A, 0x16, 0x98, 0x40, 0x00, 0x11,
-	0x52, 0x0B, 0xA9, 0x0E, 0x54,
-	0x00, 0x00, 0x64, 0x00, 0x80, 0x40, 0x18, 0x45,
-	0x70, 0x16, 0x98, 0x40, 0x1C, 0x16, 0x90, 0x10,
-	0x28, 0x0C, 0xD0, 0x6D, 0x1C, 0x22, 0x98, 0x85,
-	0x42, 0x00, 0xD8, 0x57, 0xE7, 0x16, 0x98, 0x10,
-	0x28, 0x04, 0xD0, 0x76, 0x1C, 0x1B, 0x98, 0x86,
-	0x42, 0x00, 0xD8, 0x48, 0xE7, 0x5D, 0x4C, 0xE0,
-	0x7F, 0x00, 0x28, 0x16, 0x98, 0x00, 0xD1, 0x05,
-	0xE0, 0xC0, 0xB2, 0x02, 0xAA, 0x0B, 0xA9, 0xFF,
-	0xF7, 0xC6, 0xFE, 0x16, 0x90, 0x00, 0x28, 0x7E,
-	0xD0, 0x0B, 0xA9, 0xFF, 0xF7, 0xFE, 0xFD, 0x21,
-	0x79, 0x00, 0x29, 0x07, 0xD0, 0x00, 0x28, 0x05,
-	0xD1, 0x0B, 0xAA, 0x16, 0x99, 0x19, 0x98, 0xFF,
-	0xF7, 0x7B, 0xFB, 0x23, 0xE0, 0x4E, 0x49, 0x00,
-	0x20, 0x88, 0x72, 0xC8, 0x72, 0x16, 0x99, 0x0B,
-	0x20, 0x0B, 0x29, 0x00, 0xD8, 0x08, 0x46, 0x00,
-	0x22, 0x16, 0xE0, 0x11, 0x46, 0x0E, 0x26, 0x71,
-	0x43, 0x49, 0x4E, 0x53, 0x00,
-	0x00, 0x00, 0x65, 0x00, 0x80, 0x0B, 0xAD, 0xEC,
-	0x5C, 0x0F, 0x46, 0x9A, 0x3E, 0x89, 0x19, 0x4C,
-	0x80, 0x5B, 0x19, 0x5B, 0x78, 0x8B, 0x80, 0x20,
-	0x23, 0xCB, 0x72, 0x00, 0x23, 0x0B, 0x73, 0xF2,
-	0x53, 0xCB, 0x71, 0x0B, 0x72, 0x4B, 0x72, 0x52,
-	0x1C, 0x82, 0x42, 0xE6, 0xD3, 0x3C, 0x4C, 0x3D,
-	0x49, 0xA3, 0x78, 0x20, 0x31, 0x00, 0x22, 0x18,
-	0x91, 0x00, 0x2B, 0x00, 0xD0, 0x8A, 0x78, 0x00,
-	0x21, 0x06, 0xE0, 0x39, 0x4E, 0x0E, 0x25, 0x4D,
-	0x43, 0x9A, 0x3E, 0xAD, 0x19, 0xAA, 0x72, 0x49,
-	0x1C, 0x81, 0x42, 0xF6, 0xD3, 0xA1, 0x79, 0x00,
-	0x29, 0x7D, 0xD0, 0x83, 0x42, 0x7B, 0xD0, 0x31,
-	0x49, 0x40, 0x31, 0x89, 0x7B, 0x01, 0x91, 0x64,
-	0x29, 0x01, 0xDD, 0x64, 0x21, 0x01, 0x91, 0x00,
-	0x25, 0x6F, 0xE0, 0x2D, 0x4A, 0x0E, 0x21, 0x69,
-	0x43, 0x9A, 0x3A, 0x51, 0x5A, 0x02, 0xAB, 0x49,
-	0x00, 0x5F, 0x5E, 0x0B, 0xAC,
-	0x00, 0x00, 0x66, 0x00, 0x80, 0x09, 0x19, 0x49,
-	0x78, 0x0A, 0x91, 0x2E, 0x46, 0x00, 0x21, 0x18,
-	0xE0, 0xA9, 0x42, 0x15, 0xD0, 0x24, 0x4B, 0x0E,
-	0x22, 0x4A, 0x43, 0x9A, 0x3B, 0x9A, 0x5A, 0x54,
-	0x00, 0x0B, 0xAA, 0xA2, 0x18, 0x53, 0x78, 0x0A,
-	0x9A, 0xD2, 0x1A, 0x00, 0xD5, 0x52, 0x42, 0x04,
-	0x2A, 0x06, 0xDA, 0x02, 0xAA, 0x12, 0x5F, 0xBA,
-	0x42, 0x02, 0xDD, 0x17, 0x46, 0x0E, 0x46, 0x0A,
-	0x93, 0x49, 0x1C, 0x81, 0x42, 0x00, 0xE0, 0x4C,
-	0xE0, 0xE2, 0xD3, 0x00, 0x24, 0x3E, 0xE0, 0xB4,
-	0x42, 0x3B, 0xD0, 0x21, 0x46, 0x0E, 0x22, 0x51,
-	0x43, 0x13, 0x4A, 0x9A, 0x3A, 0x52, 0x5A, 0x53,
-	0x00, 0x0B, 0xAA, 0x9A, 0x18, 0x9C, 0x46, 0x52,
-	0x78, 0x0A, 0x9B, 0x9A, 0x1A, 0x00, 0xD5, 0x52,
-	0x42, 0x04, 0x2A, 0x2A, 0xDA, 0x62, 0x46, 0x02,
-	0xAB, 0x9A, 0x5E, 0x64, 0x23, 0x5A, 0x43, 0x01,
-	0x9B, 0x7B, 0x43, 0x9A, 0x42,
-	0x00, 0x00, 0x67, 0x00, 0x80, 0x1C, 0xDA, 0x01,
-	0x46, 0x20, 0x46, 0xFE, 0xF7, 0x5B, 0xFB, 0xB4,
-	0x42, 0x00, 0xD2, 0x76, 0x1E, 0xAC, 0x42, 0x00,
-	0xD2, 0x6D, 0x1E, 0x64, 0x1E, 0x15, 0xE0, 0x1A,
-	0xE0, 0x90, 0x00, 0x00, 0x20, 0x90, 0xDD, 0x00,
-	0x00, 0xE6, 0x03, 0x00, 0x20, 0x6E, 0x01, 0x00,
-	0x20, 0x64, 0x08, 0x00, 0x20, 0x6D, 0x01, 0x00,
-	0x20, 0xC1, 0x01, 0x00, 0x20, 0x5E, 0x0A, 0x00,
-	0x20, 0x18, 0x9A, 0x92, 0x7A, 0x20, 0x4B, 0xC9,
-	0x18, 0x8A, 0x72, 0x64, 0x1C, 0x84, 0x42, 0xBE,
-	0xD3, 0x6D, 0x1C, 0x85, 0x42, 0x8D, 0xD3, 0x0B,
-	0xAA, 0x19, 0x9B, 0x16, 0x99, 0xFE, 0xF7, 0xAC,
-	0xFE, 0x17, 0x90, 0x1A, 0x49, 0x16, 0x98, 0x48,
-	0x72, 0x17, 0x98, 0x88, 0x70, 0x1D, 0xB0, 0xF0,
-	0xBD, 0x08, 0xB5, 0x17, 0x49, 0x09, 0x78, 0x49,
-	0x1E, 0xCA, 0xB2, 0x16, 0x49, 0x00, 0x92, 0x09,
-	0x78, 0x49, 0x1E, 0xCA, 0xB2,
-	0x00, 0x00, 0x68, 0x00, 0x80, 0x00, 0x21, 0x0B,
-	0x46, 0xFF, 0xF7, 0x47, 0xFE, 0x08, 0xBD, 0x0F,
-	0x49, 0x00, 0x28, 0x03, 0xD0, 0x03, 0x28, 0x02,
-	0xD1, 0x0F, 0x48, 0x00, 0x7F, 0x88, 0x71, 0x70,
-	0x47, 0x02, 0x46, 0x00, 0x20, 0x01, 0x21, 0xC9,
-	0x03, 0x00, 0xE0, 0x49, 0x08, 0x91, 0x42, 0xFC,
-	0xD8, 0x06, 0xE0, 0x40, 0x18, 0x03, 0x46, 0x43,
-	0x43, 0x93, 0x42, 0x00, 0xD9, 0x40, 0x1A, 0x49,
-	0x08, 0x00, 0x29, 0xF6, 0xD1, 0x70, 0x47, 0x00,
-	0x00, 0x4C, 0x03, 0x00, 0x20, 0x90, 0x00, 0x00,
-	0x20, 0x6E, 0x01, 0x00, 0x20, 0x6D, 0x01, 0x00,
-	0x20, 0x90, 0xDD, 0x00, 0x00, 0xF8, 0xB5, 0x47,
-	0x49, 0x0A, 0x78, 0x47, 0x48, 0x20, 0x25, 0x24,
-	0x2A, 0x03, 0xD3, 0x4A, 0x78, 0xC2, 0x61, 0x89,
-	0x78, 0x1C, 0xE0, 0xCA, 0x78, 0x24, 0x2A, 0x03,
-	0xD3, 0x0A, 0x79, 0xC2, 0x61, 0x49, 0x79, 0x15,
-	0xE0, 0x8A, 0x79, 0x24, 0x2A,
-	0x00, 0x00, 0x69, 0x00, 0x80, 0x03, 0xD3, 0xCA,
-	0x79, 0xC2, 0x61, 0x09, 0x7A, 0x0E, 0xE0, 0x4A,
-	0x7A, 0x24, 0x2A, 0x03, 0xD3, 0x8A, 0x7A, 0xC2,
-	0x61, 0xC9, 0x7A, 0x07, 0xE0, 0x0A, 0x7B, 0x00,
-	0x2A, 0x02, 0xD0, 0x0A, 0x7B, 0xC2, 0x61, 0x00,
-	0xE0, 0xC5, 0x61, 0x49, 0x7B, 0x01, 0x62, 0x01,
-	0x26, 0x34, 0x4C, 0xB6, 0x04, 0x26, 0x60, 0x31,
-	0x48, 0x20, 0x30, 0x40, 0x7C, 0x32, 0x4F, 0x78,
-	0x60, 0x05, 0x20, 0x00, 0xF0, 0x75, 0xF8, 0x27,
-	0x20, 0xB8, 0x60, 0x30, 0x48, 0x05, 0x60, 0x10,
-	0x21, 0x81, 0x60, 0xC1, 0x60, 0x00, 0x06, 0xE0,
-	0x60, 0x60, 0x60, 0x26, 0x60, 0x2C, 0x49, 0x40,
-	0x1C, 0x08, 0x60, 0x2B, 0x49, 0x2B, 0x48, 0x40,
-	0x31, 0x08, 0x60, 0xF8, 0xBD, 0xF8, 0xB5, 0x72,
-	0xB6, 0x00, 0x24, 0x29, 0x4E, 0x06, 0x20, 0x60,
-	0x43, 0x85, 0x19, 0x28, 0x46, 0x09, 0xF0, 0x73,
-	0xFA, 0x69, 0x79, 0x2A, 0x79,
-	0x00, 0x00, 0x6A, 0x00, 0x80, 0x09, 0x02, 0x11,
-	0x43, 0x09, 0xF0, 0x69, 0xFA, 0x64, 0x1C, 0xE4,
-	0xB2, 0x02, 0x2C, 0xEF, 0xD3, 0x20, 0x4F, 0x00,
-	0x21, 0x3F, 0x1F, 0x0A, 0x46, 0x3D, 0x1F, 0x90,
-	0x00, 0x3B, 0x58, 0x1E, 0x0A, 0xD8, 0xB2, 0x36,
-	0x02, 0x05, 0xE0, 0x4B, 0x00, 0x5C, 0x19, 0xEB,
-	0x5C, 0x64, 0x78, 0xF4, 0x54, 0x49, 0x1C, 0x03,
-	0x46, 0x40, 0x1E, 0xC0, 0xB2, 0x00, 0x2B, 0xF4,
-	0xD1, 0x52, 0x1C, 0xEC, 0xD0, 0x15, 0x48, 0x02,
-	0x22, 0x02, 0x60, 0x15, 0x48, 0x30, 0x21, 0x01,
-	0x60, 0x51, 0x03, 0x81, 0x60, 0x81, 0x15, 0xC1,
-	0x60, 0x13, 0x48, 0x12, 0x49, 0x01, 0x60, 0x45,
-	0x21, 0x49, 0x04, 0x41, 0x60, 0x11, 0x48, 0x01,
-	0x78, 0x11, 0x43, 0x01, 0x70, 0x01, 0x78, 0x06,
-	0x22, 0x11, 0x43, 0x01, 0x70, 0xFF, 0xF7, 0x72,
-	0xFF, 0xF8, 0xBD, 0x00, 0x00, 0xC0, 0xF1, 0xFF,
-	0x0F, 0x00, 0xFF, 0x00, 0x40,
-	0x00, 0x00, 0x6B, 0x00, 0x80, 0x00, 0x00, 0x01,
-	0x40, 0x00, 0xFF, 0x01, 0x40, 0x80, 0x02, 0x01,
-	0x40, 0x00, 0x01, 0x01, 0x40, 0x32, 0x00, 0x00,
-	0x80, 0x04, 0xCC, 0x00, 0x00, 0x00, 0x20, 0x14,
-	0x40, 0x00, 0x00, 0x14, 0x40, 0x04, 0x00, 0x09,
-	0x00, 0x00, 0x50, 0x13, 0x40, 0x00, 0x70, 0x13,
-	0x40, 0x10, 0xB5, 0x2E, 0x49, 0x09, 0x78, 0x48,
-	0x43, 0x06, 0xF0, 0x08, 0xFA, 0x10, 0xBD, 0x00,
-	0xBE, 0x70, 0x47, 0x01, 0x22, 0x52, 0x07, 0x10,
-	0x28, 0x00, 0xD3, 0x00, 0xBE, 0x83, 0x00, 0xD0,
-	0x58, 0xD1, 0x50, 0x70, 0x47, 0x01, 0x22, 0x52,
-	0x07, 0x10, 0x28, 0x00, 0xD3, 0x00, 0xBE, 0x80,
-	0x00, 0x82, 0x18, 0x10, 0x6C, 0x11, 0x64, 0x70,
-	0x47, 0x03, 0x29, 0x00, 0xD9, 0x00, 0xBE, 0x10,
-	0x28, 0x00, 0xD3, 0x00, 0xBE, 0x82, 0x07, 0xD2,
-	0x0E, 0x92, 0x1D, 0x91, 0x40, 0x80, 0x08, 0x1C,
-	0x4A, 0x80, 0x00, 0x80, 0x18,
-	0x00, 0x00, 0x6C, 0x00, 0x80, 0x01, 0x60, 0x70,
-	0x47, 0x02, 0x07, 0x1A, 0x49, 0x12, 0x0F, 0x01,
-	0x20, 0x90, 0x40, 0x08, 0x60, 0x70, 0x47, 0x17,
-	0x49, 0x02, 0x07, 0x80, 0x31, 0x12, 0x0F, 0x01,
-	0x20, 0x90, 0x40, 0x08, 0x60, 0x70, 0x47, 0x02,
-	0x07, 0x13, 0x49, 0x12, 0x0F, 0x01, 0x20, 0x90,
-	0x40, 0x08, 0x60, 0x70, 0x47, 0x12, 0x49, 0x11,
-	0x48, 0xC8, 0x60, 0x70, 0x47, 0x70, 0xB5, 0x0B,
-	0x4D, 0x00, 0x28, 0x00, 0xD1, 0x0F, 0x48, 0x10,
-	0x49, 0x04, 0x46, 0x68, 0x60, 0x48, 0x1E, 0x20,
-	0x18, 0x09, 0xF0, 0xD9, 0xF9, 0x7D, 0x21, 0x28,
-	0x70, 0xC9, 0x00, 0x48, 0x1E, 0x20, 0x18, 0x09,
-	0xF0, 0xD2, 0xF9, 0xA8, 0x60, 0xC0, 0x03, 0xE8,
-	0x60, 0x70, 0xBD, 0x00, 0x00, 0xB8, 0x00, 0x00,
-	0x20, 0x00, 0xE4, 0x00, 0xE0, 0x00, 0xE1, 0x00,
-	0xE0, 0x80, 0xE2, 0x00, 0xE0, 0x04, 0x00, 0xFA,
-	0x05, 0x00, 0xED, 0x00, 0xE0,
-	0x00, 0x00, 0x6D, 0x00, 0x80, 0x00, 0x51, 0x25,
-	0x02, 0x40, 0x42, 0x0F, 0x00, 0x10, 0xB5, 0xFF,
-	0x20, 0xFF, 0xF7, 0x95, 0xFF, 0x10, 0xBD, 0x70,
-	0xB5, 0x06, 0xF0, 0xA0, 0xF9, 0x0D, 0x4A, 0x11,
-	0x68, 0x03, 0x23, 0x9B, 0x03, 0x01, 0x24, 0x99,
-	0x43, 0xA4, 0x03, 0x0C, 0x43, 0x14, 0x60, 0x01,
-	0x24, 0xE4, 0x03, 0x0C, 0x43, 0x14, 0x60, 0x09,
-	0x4D, 0x07, 0x4C, 0x2C, 0x61, 0x08, 0x4D, 0x04,
-	0x24, 0x2C, 0x60, 0x19, 0x43, 0x11, 0x60, 0x06,
-	0xF0, 0x8D, 0xF9, 0x06, 0x49, 0x01, 0x20, 0x08,
-	0x70, 0x70, 0xBD, 0x00, 0x00, 0x00, 0x00, 0x01,
-	0x40, 0x05, 0x01, 0x01, 0x00, 0x00, 0x04, 0x01,
-	0x40, 0x80, 0xE2, 0x00, 0xE0, 0xCA, 0x00, 0x00,
-	0x20, 0x70, 0xB5, 0x05, 0xF0, 0xF3, 0xFF, 0x01,
-	0x25, 0x6D, 0x02, 0x28, 0x46, 0x06, 0xF0, 0x18,
-	0xF8, 0x05, 0xF0, 0xE1, 0xFF, 0x03, 0x24, 0xA0,
-	0xB2, 0x00, 0x21, 0x06, 0xF0,
-	0x00, 0x00, 0x6E, 0x00, 0x80, 0x1E, 0xF8, 0x64,
-	0x1C, 0xAC, 0x42, 0xF8, 0xD3, 0x40, 0x21, 0x02,
-	0x20, 0x06, 0xF0, 0x17, 0xF8, 0xFF, 0x49, 0x00,
-	0x20, 0x08, 0x70, 0x70, 0xBD, 0xFF, 0xB5, 0x87,
-	0xB0, 0x13, 0xAB, 0x84, 0x46, 0x38, 0xCB, 0x00,
-	0x20, 0x02, 0x46, 0x01, 0x90, 0xFA, 0x48, 0x06,
-	0x90, 0xA0, 0xE0, 0x16, 0x98, 0x09, 0x99, 0x50,
-	0x43, 0x40, 0x18, 0x80, 0xB2, 0x00, 0x90, 0x60,
-	0x46, 0x03, 0x28, 0x02, 0xD1, 0x50, 0x08, 0xC0,
-	0x18, 0x00, 0xE0, 0x98, 0x18, 0x16, 0x21, 0x48,
-	0x43, 0xF2, 0x49, 0x0E, 0x5A, 0x40, 0x18, 0xF6,
-	0xB2, 0x03, 0x96, 0x80, 0x78, 0x02, 0x90, 0x02,
-	0x99, 0x01, 0x98, 0x40, 0x18, 0xC0, 0xB2, 0x01,
-	0x90, 0x60, 0x46, 0x01, 0x28, 0x07, 0xD1, 0x06,
-	0x98, 0x00, 0x6A, 0x03, 0x28, 0x03, 0xD1, 0x01,
-	0x98, 0x40, 0x18, 0xC0, 0xB2, 0x01, 0x90, 0x00,
-	0x21, 0x01, 0x20, 0x03, 0x9E,
-	0x00, 0x00, 0x6F, 0x00, 0x80, 0x88, 0x40, 0x30,
-	0x42, 0x6E, 0xD0, 0x60, 0x46, 0x00, 0x28, 0x0E,
-	0xD1, 0x00, 0x98, 0xC6, 0x00, 0x80, 0x19, 0x40,
-	0x19, 0x40, 0x18, 0x07, 0x7B, 0x16, 0x20, 0x16,
-	0x46, 0x46, 0x43, 0xDE, 0x48, 0x30, 0x18, 0x40,
-	0x18, 0x00, 0x79, 0x27, 0x54, 0x5C, 0xE0, 0x60,
-	0x46, 0x01, 0x28, 0x3E, 0xD1, 0xD8, 0x48, 0x40,
-	0x38, 0x86, 0x69, 0xC0, 0x69, 0x30, 0x18, 0xC0,
-	0xB2, 0x86, 0x46, 0x06, 0x98, 0x00, 0x6A, 0x02,
-	0x28, 0x03, 0xD0, 0x06, 0x98, 0x00, 0x6A, 0x03,
-	0x28, 0x1E, 0xD1, 0x11, 0x98, 0x10, 0x18, 0xC6,
-	0x00, 0x80, 0x19, 0x40, 0x19, 0x40, 0x18, 0x05,
-	0x90, 0x06, 0x7B, 0x98, 0x18, 0x16, 0x27, 0x78,
-	0x43, 0xCC, 0x4F, 0xC0, 0x19, 0x40, 0x18, 0x04,
-	0x90, 0x00, 0x79, 0x77, 0x46, 0xC0, 0x1B, 0x26,
-	0x54, 0x06, 0x98, 0x00, 0x6A, 0x03, 0x28, 0x33,
-	0xD1, 0x05, 0x98, 0x46, 0x7D,
-	0x00, 0x00, 0x70, 0x00, 0x80, 0x04, 0x98, 0x00,
-	0x79, 0xC7, 0x1B, 0x02, 0x98, 0x38, 0x18, 0x2A,
-	0xE0, 0x11, 0x98, 0x10, 0x18, 0xC6, 0x00, 0x80,
-	0x19, 0x40, 0x19, 0x40, 0x18, 0x46, 0x7D, 0x98,
-	0x18, 0x16, 0x27, 0x78, 0x43, 0xBD, 0x4F, 0xC0,
-	0x19, 0x40, 0x18, 0x00, 0x79, 0x77, 0x46, 0xC0,
-	0x1B, 0x19, 0xE0, 0x60, 0x46, 0x02, 0x28, 0x11,
-	0x98, 0x07, 0xD1, 0x10, 0x18, 0xC6, 0x00, 0x80,
-	0x19, 0x40, 0x19, 0x40, 0x18, 0x06, 0x7B, 0x9F,
-	0x18, 0x07, 0xE0, 0x10, 0x18, 0xC6, 0x00, 0x80,
-	0x19, 0x40, 0x19, 0x40, 0x18, 0x06, 0x7B, 0x50,
-	0x08, 0xC7, 0x18, 0x16, 0x20, 0x47, 0x43, 0xAF,
-	0x48, 0x38, 0x18, 0x40, 0x18, 0x00, 0x79, 0x26,
-	0x54, 0x49, 0x1C, 0x89, 0xB2, 0x08, 0x29, 0x87,
-	0xD3, 0x52, 0x1C, 0x92, 0xB2, 0x12, 0x98, 0x82,
-	0x42, 0x00, 0xD2, 0x5A, 0xE7, 0x0A, 0x99, 0x10,
-	0x98, 0x00, 0x25, 0x0E, 0x18,
-	0x00, 0x00, 0x71, 0x00, 0x80, 0x14, 0xE0, 0x08,
-	0x98, 0x0A, 0x99, 0x00, 0x88, 0x88, 0x42, 0x08,
-	0xD3, 0xB0, 0x42, 0x06, 0xD2, 0x0A, 0x9A, 0x61,
-	0x5D, 0x80, 0x1A, 0x08, 0x30, 0x80, 0xB2, 0x05,
-	0xF0, 0x50, 0xFF, 0x08, 0x98, 0x08, 0x99, 0x00,
-	0x88, 0x40, 0x1C, 0x6D, 0x1C, 0x08, 0x80, 0xAD,
-	0xB2, 0x01, 0x98, 0x85, 0x42, 0xE7, 0xD3, 0x0B,
-	0xB0, 0xF0, 0xBD, 0xF1, 0xB5, 0x9E, 0xB0, 0x00,
-	0x20, 0x1D, 0x90, 0x1B, 0x90, 0x03, 0x20, 0x05,
-	0xF0, 0x40, 0xFF, 0x04, 0x02, 0x04, 0x20, 0x05,
-	0xF0, 0x3C, 0xFF, 0x04, 0x43, 0x05, 0x20, 0x05,
-	0xF0, 0x38, 0xFF, 0x06, 0x02, 0x06, 0x20, 0x05,
-	0xF0, 0x34, 0xFF, 0x06, 0x43, 0x1E, 0x98, 0x8E,
-	0x4D, 0x04, 0x28, 0x03, 0xD1, 0x01, 0x21, 0x28,
-	0x46, 0x89, 0x02, 0x04, 0xE0, 0x05, 0x28, 0x03,
-	0xD1, 0x89, 0x48, 0x01, 0x21, 0xC9, 0x02, 0x45,
-	0x18, 0xFF, 0x20, 0xF9, 0x30,
-	0x00, 0x00, 0x72, 0x00, 0x80, 0x86, 0x42, 0x00,
-	0xD8, 0x30, 0x46, 0x83, 0x4F, 0x1A, 0x90, 0xF8,
-	0x69, 0x02, 0x28, 0x84, 0x48, 0x04, 0xD1, 0x00,
-	0x78, 0xC0, 0x1C, 0x86, 0x08, 0xB6, 0x00, 0x00,
-	0xE0, 0x06, 0x78, 0x00, 0x20, 0x1D, 0x90, 0x7C,
-	0x48, 0x1E, 0x9B, 0x40, 0x38, 0x09, 0xF0, 0x55,
-	0xF9, 0x06, 0x04, 0x2D, 0x57, 0x83, 0x04, 0x04,
-	0x8B, 0xC0, 0x6A, 0x80, 0xB2, 0x19, 0x90, 0x00,
-	0x20, 0x18, 0x90, 0x1C, 0x90, 0x00, 0x2C, 0x03,
-	0xD1, 0xA9, 0x78, 0x08, 0x20, 0x05, 0xF0, 0xF9,
-	0xFE, 0x10, 0xAB, 0x98, 0x8E, 0x40, 0x1C, 0x00,
-	0x27, 0x1D, 0x90, 0x11, 0xE0, 0x0E, 0xA8, 0x04,
-	0xA9, 0x61, 0xC1, 0x1C, 0x98, 0x18, 0x9A, 0x19,
-	0x99, 0x01, 0xAB, 0x07, 0xC3, 0x1A, 0x9A, 0x00,
-	0x92, 0x23, 0x46, 0x3A, 0x46, 0x1D, 0xA9, 0x00,
-	0x20, 0xFF, 0xF7, 0xD0, 0xFE, 0x7F, 0x1C, 0xBF,
-	0xB2, 0x68, 0x48, 0x00, 0x78,
-	0x00, 0x00, 0x73, 0x00, 0x80, 0x87, 0x42, 0xE9,
-	0xD3, 0x5F, 0xE0, 0x01, 0x6B, 0x42, 0x6B, 0x89,
-	0x18, 0x89, 0xB2, 0x19, 0x91, 0x00, 0x21, 0x18,
-	0x91, 0xC0, 0x6A, 0x70, 0x43, 0x87, 0xB2, 0x00,
-	0x2C, 0x04, 0xD1, 0xE9, 0x78, 0x08, 0x20, 0x05,
-	0xF0, 0xCC, 0xFE, 0x01, 0xE0, 0x01, 0x2C, 0x03,
-	0xD8, 0x29, 0x79, 0x09, 0x20, 0x05, 0xF0, 0xC5,
-	0xFE, 0x10, 0xAB, 0x98, 0x8E, 0x04, 0xA9, 0x80,
-	0x1C, 0x1D, 0x90, 0x07, 0xA8, 0x61, 0xC1, 0x18,
-	0x9A, 0x19, 0x99, 0x01, 0x97, 0x03, 0x92, 0x1A,
-	0x9A, 0x00, 0x92, 0x02, 0x91, 0x00, 0x22, 0x23,
-	0x46, 0x1D, 0xA9, 0x02, 0x20, 0x28, 0xE0, 0xC1,
-	0x6B, 0x89, 0xB2, 0x19, 0x91, 0x00, 0x21, 0x18,
-	0x91, 0xC1, 0x6A, 0x80, 0x6B, 0x71, 0x43, 0x08,
-	0x18, 0x87, 0xB2, 0x00, 0x2C, 0x04, 0xD1, 0x69,
-	0x79, 0x08, 0x20, 0x05, 0xF0, 0xA2, 0xFE, 0x01,
-	0xE0, 0x01, 0x2C, 0x03, 0xD8,
-	0x00, 0x00, 0x74, 0x00, 0x80, 0xA9, 0x79, 0x09,
-	0x20, 0x05, 0xF0, 0x9B, 0xFE, 0x10, 0xAB, 0x98,
-	0x8E, 0x04, 0xA9, 0x80, 0x1C, 0x1D, 0x90, 0x07,
-	0xA8, 0x61, 0xC1, 0x18, 0x9A, 0x19, 0x99, 0x01,
-	0x97, 0x03, 0x92, 0x1A, 0x9A, 0x02, 0x91, 0x00,
-	0x92, 0x23, 0x46, 0x00, 0x22, 0x1D, 0xA9, 0x03,
-	0x20, 0xFF, 0xF7, 0x74, 0xFE, 0x09, 0xE0, 0x01,
-	0x21, 0x19, 0x91, 0x81, 0x6B, 0xC9, 0xB2, 0x18,
-	0x91, 0x81, 0x6A, 0x00, 0x29, 0x19, 0xD1, 0x01,
-	0x20, 0x1B, 0x90, 0x03, 0x20, 0x1B, 0x99, 0x05,
-	0xF0, 0x78, 0xFE, 0x04, 0x20, 0x1E, 0x99, 0x05,
-	0xF0, 0x74, 0xFE, 0x1A, 0x98, 0x01, 0x0A, 0x05,
-	0x20, 0x05, 0xF0, 0x6F, 0xFE, 0x1A, 0x98, 0xC1,
-	0xB2, 0x06, 0x20, 0x05, 0xF0, 0x6A, 0xFE, 0x09,
-	0x21, 0x07, 0x20, 0x05, 0xF0, 0x66, 0xFE, 0x1F,
-	0xB0, 0xF0, 0xBD, 0xC1, 0x6A, 0x82, 0x6B, 0x71,
-	0x43, 0xC0, 0x6B, 0x89, 0x18,
-	0x00, 0x00, 0x75, 0x00, 0x80, 0x08, 0x18, 0x80,
-	0xB2, 0x1C, 0x90, 0x38, 0x6A, 0x02, 0x28, 0x02,
-	0xD0, 0x38, 0x6A, 0x03, 0x28, 0x09, 0xD1, 0x00,
-	0x2C, 0x03, 0xD1, 0xE9, 0x79, 0x08, 0x20, 0x05,
-	0xF0, 0x50, 0xFE, 0x10, 0xAB, 0x98, 0x8E, 0x40,
-	0x1C, 0x1D, 0x90, 0x38, 0x6A, 0x01, 0x28, 0x02,
-	0xD0, 0x38, 0x6A, 0x03, 0x28, 0x0D, 0xD1, 0x10,
-	0xAB, 0x98, 0x8E, 0xA0, 0x42, 0x05, 0xD3, 0x29,
-	0x7A, 0x00, 0x1B, 0x08, 0x30, 0x80, 0xB2, 0x05,
-	0xF0, 0x3C, 0xFE, 0x10, 0xAB, 0x98, 0x8E, 0x40,
-	0x1C, 0x1D, 0x90, 0x07, 0xA8, 0x04, 0xA9, 0x61,
-	0xC1, 0x1C, 0x98, 0x18, 0x9A, 0x19, 0x99, 0x01,
-	0xAB, 0x07, 0xC3, 0x1A, 0x9A, 0x00, 0x92, 0x00,
-	0x22, 0x23, 0x46, 0x1D, 0xA9, 0x01, 0x20, 0x9F,
-	0xE7, 0xF0, 0xB5, 0x85, 0xB0, 0x03, 0x20, 0x05,
-	0xF0, 0x39, 0xFE, 0x02, 0x90, 0x05, 0x20, 0x05,
-	0xF0, 0x35, 0xFE, 0x01, 0x90,
-	0x00, 0x00, 0x76, 0x00, 0x80, 0x07, 0x20, 0x05,
-	0xF0, 0x20, 0xFE, 0x07, 0x4C, 0x05, 0x46, 0x21,
-	0x46, 0xFF, 0x31, 0x0B, 0xE0, 0x3E, 0x01, 0x00,
-	0x20, 0xC8, 0xDF, 0x00, 0x00, 0x2C, 0xE1, 0x00,
-	0x00, 0x80, 0xE2, 0x00, 0x00, 0x6D, 0x01, 0x00,
-	0x20, 0x48, 0xDE, 0x00, 0x00, 0x81, 0x31, 0xFF,
-	0x34, 0x41, 0x34, 0x04, 0x91, 0x03, 0x28, 0x01,
-	0xD2, 0x67, 0x6A, 0x07, 0xE0, 0x06, 0x2D, 0x01,
-	0xD2, 0x27, 0x6A, 0x03, 0xE0, 0x09, 0x2D, 0x15,
-	0xD2, 0x20, 0x6A, 0x47, 0x00, 0xF9, 0x48, 0xE9,
-	0x00, 0x08, 0x18, 0x00, 0x79, 0x46, 0x07, 0x76,
-	0x0F, 0xFF, 0x20, 0x31, 0x46, 0xF9, 0x30, 0x08,
-	0xF0, 0x52, 0xFF, 0x01, 0x99, 0x81, 0x42, 0x00,
-	0xD9, 0x01, 0x90, 0x02, 0x98, 0xB8, 0x42, 0x0D,
-	0xD2, 0x38, 0x1A, 0x0C, 0xE0, 0x09, 0x2D, 0x07,
-	0xD1, 0xA0, 0x6A, 0x87, 0x00, 0x08, 0x6A, 0x03,
-	0x28, 0x00, 0xD1, 0x7F, 0x00,
-	0x00, 0x00, 0x77, 0x00, 0x80, 0x02, 0x26, 0xE7,
-	0xE7, 0x01, 0x21, 0xA2, 0xE0, 0x00, 0x20, 0x01,
-	0x99, 0x81, 0x42, 0x00, 0xD9, 0x01, 0x90, 0x09,
-	0x2D, 0x65, 0xD1, 0x08, 0x20, 0x00, 0x90, 0x05,
-	0xF0, 0x07, 0xFF, 0x07, 0x46, 0x02, 0x98, 0x02,
-	0x99, 0xC6, 0xB2, 0x01, 0x98, 0x08, 0x18, 0x03,
-	0x90, 0x4D, 0xE0, 0xB0, 0x08, 0x00, 0x21, 0x82,
-	0x00, 0xB2, 0x1A, 0xA3, 0x6A, 0x92, 0xB2, 0x83,
-	0x42, 0x04, 0x9B, 0x1B, 0x6A, 0x25, 0xD9, 0x01,
-	0x2B, 0x0C, 0xD0, 0x00, 0x2A, 0x05, 0xD0, 0x01,
-	0x2A, 0x06, 0xD0, 0x02, 0x2A, 0x0C, 0xD1, 0xD8,
-	0x49, 0x18, 0xE0, 0x40, 0x00, 0xD7, 0x49, 0x10,
-	0xE0, 0xD7, 0x49, 0x13, 0xE0, 0x00, 0x2A, 0x0A,
-	0xD0, 0x01, 0x2A, 0x0C, 0xD0, 0x02, 0x2A, 0x0C,
-	0xD0, 0x03, 0x2A, 0x1E, 0xD1, 0x39, 0x46, 0xC1,
-	0x40, 0xC9, 0x07, 0xC9, 0x0F, 0x19, 0xE0, 0xD1,
-	0x49, 0x40, 0x00, 0x09, 0x5A,
-	0x00, 0x00, 0x78, 0x00, 0x80, 0x15, 0xE0, 0xD0,
-	0x49, 0x00, 0xE0, 0xD0, 0x49, 0x08, 0x56, 0x81,
-	0xB2, 0x0F, 0xE0, 0x03, 0x2B, 0x0D, 0xD1, 0x00,
-	0x2A, 0x1C, 0xD0, 0x01, 0x2A, 0x1D, 0xD0, 0x02,
-	0x2A, 0x1E, 0xD0, 0x03, 0x2A, 0x05, 0xD1, 0xA1,
-	0x6A, 0x41, 0x1A, 0x38, 0x46, 0xC8, 0x40, 0xC1,
-	0x07, 0xC9, 0x0F, 0x08, 0x0A, 0x09, 0x02, 0x08,
-	0x43, 0x81, 0xB2, 0x00, 0x98, 0x05, 0xF0, 0x8B,
-	0xFD, 0x00, 0x98, 0x80, 0x1C, 0x80, 0xB2, 0x00,
-	0x90, 0x76, 0x1C, 0x03, 0x98, 0xF6, 0xB2, 0xB0,
-	0x42, 0xAF, 0xD8, 0x1C, 0xE0, 0xA1, 0x6A, 0x40,
-	0x1A, 0xD1, 0xE7, 0xA1, 0x6A, 0x40, 0x1A, 0xD2,
-	0xE7, 0xA1, 0x6A, 0x40, 0x1A, 0xD1, 0xE7, 0xB3,
-	0x49, 0xE8, 0x00, 0x08, 0x58, 0x02, 0x99, 0x01,
-	0x9F, 0x71, 0x43, 0x0C, 0x18, 0x77, 0x43, 0x00,
-	0x26, 0x07, 0xE0, 0x30, 0x46, 0x08, 0x30, 0x21,
-	0x78, 0x80, 0xB2, 0x05, 0xF0,
-	0x00, 0x00, 0x79, 0x00, 0x80, 0x5E, 0xFD, 0x64,
-	0x1C, 0x76, 0x1C, 0xBE, 0x42, 0xF5, 0xD3, 0xE9,
-	0xB2, 0x04, 0x20, 0x05, 0xF0, 0x56, 0xFD, 0x01,
-	0x98, 0x81, 0xB2, 0x05, 0x20, 0x05, 0xF0, 0x5B,
-	0xFD, 0x09, 0x2D, 0x01, 0xD1, 0x32, 0x21, 0x10,
-	0xE0, 0x03, 0x2D, 0x04, 0xD3, 0xA1, 0x48, 0xE9,
-	0x00, 0x08, 0x18, 0x01, 0x79, 0x09, 0xE0, 0xA6,
-	0x48, 0x40, 0x69, 0x01, 0x28, 0xF6, 0xD1, 0x9D,
-	0x48, 0xE9, 0x00, 0x08, 0x18, 0x01, 0x79, 0x08,
-	0x20, 0x01, 0x43, 0x07, 0x20, 0x05, 0xF0, 0x39,
-	0xFD, 0x00, 0x21, 0x03, 0x20, 0x05, 0xF0, 0x35,
-	0xFD, 0x05, 0xB0, 0xF0, 0xBD, 0xFE, 0xB5, 0x03,
-	0x20, 0x05, 0xF0, 0x33, 0xFD, 0x06, 0x02, 0x04,
-	0x20, 0x05, 0xF0, 0x2F, 0xFD, 0x06, 0x43, 0x05,
-	0x20, 0x05, 0xF0, 0x2B, 0xFD, 0x04, 0x02, 0x06,
-	0x20, 0x05, 0xF0, 0x27, 0xFD, 0x04, 0x43, 0x07,
-	0x20, 0x05, 0xF0, 0x23, 0xFD,
-	0x00, 0x00, 0x7A, 0x00, 0x80, 0x01, 0x90, 0x05,
-	0xF0, 0xF7, 0xFB, 0x07, 0x46, 0x00, 0x20, 0x00,
-	0x90, 0x01, 0x98, 0x0C, 0x37, 0x02, 0x28, 0x03,
-	0xD0, 0x03, 0x28, 0x07, 0xD0, 0x04, 0x28, 0x29,
-	0xD1, 0x1B, 0x2C, 0x00, 0xD9, 0x1B, 0x24, 0x00,
-	0x25, 0x8A, 0x4F, 0x1B, 0xE0, 0xFF, 0x20, 0xF9,
-	0x30, 0x84, 0x42, 0x00, 0xD9, 0x04, 0x46, 0x00,
-	0x25, 0x08, 0xE0, 0x70, 0x19, 0x39, 0x5C, 0x28,
-	0x46, 0x08, 0x30, 0x80, 0xB2, 0x05, 0xF0, 0xFD,
-	0xFC, 0x6D, 0x1C, 0xAD, 0xB2, 0xA5, 0x42, 0xF4,
-	0xD3, 0x12, 0xE0, 0x70, 0x19, 0x39, 0x5C, 0x28,
-	0x46, 0x09, 0x30, 0x80, 0xB2, 0x05, 0xF0, 0xF1,
-	0xFC, 0x6D, 0x1C, 0xAD, 0xB2, 0xAC, 0x42, 0xF4,
-	0xD8, 0x7B, 0x48, 0x41, 0x78, 0x08, 0x20, 0x05,
-	0xF0, 0xE8, 0xFC, 0x01, 0xE0, 0x01, 0x20, 0x00,
-	0x90, 0x03, 0x20, 0x00, 0x99, 0x05, 0xF0, 0xE1,
-	0xFC, 0x04, 0x20, 0x01, 0x99,
-	0x00, 0x00, 0x7B, 0x00, 0x80, 0x05, 0xF0, 0xDD,
-	0xFC, 0x21, 0x0A, 0x05, 0x20, 0x05, 0xF0, 0xD9,
-	0xFC, 0xE1, 0xB2, 0x06, 0x20, 0x05, 0xF0, 0xD5,
-	0xFC, 0xFE, 0xBD, 0xF8, 0xB5, 0x01, 0x24, 0x00,
-	0x25, 0x03, 0x20, 0x05, 0xF0, 0xD2, 0xFC, 0x06,
-	0x46, 0x04, 0x20, 0x05, 0xF0, 0xCE, 0xFC, 0x00,
-	0x90, 0x6A, 0x48, 0x07, 0x88, 0x6A, 0x48, 0x01,
-	0xF0, 0xD9, 0xFE, 0x30, 0x46, 0x66, 0x4E, 0x01,
-	0x28, 0x08, 0xD0, 0x02, 0x28, 0x1E, 0xD0, 0x03,
-	0x28, 0x11, 0xD0, 0x04, 0x28, 0x2A, 0xD1, 0x01,
-	0xF0, 0xEB, 0xFC, 0x20, 0xE0, 0x5F, 0x48, 0x09,
-	0x38, 0x01, 0xF0, 0x0B, 0xFE, 0x70, 0x70, 0xC0,
-	0xB2, 0x00, 0x28, 0x02, 0xD0, 0x01, 0x21, 0x08,
-	0x43, 0x70, 0x70, 0x00, 0x24, 0x1A, 0xE0, 0x59,
-	0x48, 0x00, 0x99, 0x09, 0x38, 0x01, 0xF0, 0xBD,
-	0xFD, 0x70, 0x70, 0xC0, 0xB2, 0x00, 0x28, 0xF4,
-	0xD1, 0x01, 0x25, 0xF2, 0xE7,
-	0x00, 0x00, 0x7C, 0x00, 0x80, 0x30, 0x78, 0x00,
-	0x28, 0x07, 0xD0, 0x01, 0x28, 0x0A, 0xD1, 0x51,
-	0x48, 0x09, 0x38, 0x01, 0xF0, 0x38, 0xFC, 0x70,
-	0x70, 0xF2, 0xE7, 0x4E, 0x48, 0x09, 0x38, 0x01,
-	0xF0, 0x8A, 0xFC, 0xF8, 0xE7, 0x38, 0x46, 0x01,
-	0xF0, 0xA1, 0xFE, 0x21, 0x46, 0x03, 0x20, 0x05,
-	0xF0, 0x88, 0xFC, 0x71, 0x78, 0x04, 0x20, 0x05,
-	0xF0, 0x84, 0xFC, 0x29, 0x46, 0x05, 0x20, 0x05,
-	0xF0, 0x80, 0xFC, 0xF8, 0xBD, 0xF0, 0xB5, 0xA3,
-	0xB0, 0x03, 0x20, 0x05, 0xF0, 0x8F, 0xFC, 0x06,
-	0x46, 0x05, 0x20, 0x05, 0xF0, 0x8B, 0xFC, 0x05,
-	0x46, 0x07, 0x20, 0x05, 0xF0, 0x76, 0xFC, 0x21,
-	0x90, 0x00, 0x28, 0x10, 0xD0, 0x01, 0x28, 0x1A,
-	0xD0, 0x02, 0x28, 0x5D, 0xD1, 0x00, 0x2E, 0x5B,
-	0xD1, 0x80, 0x2D, 0x59, 0xD8, 0x3B, 0x4F, 0x38,
-	0x46, 0x40, 0x02, 0x00, 0x0C, 0x22, 0x90, 0x00,
-	0x20, 0x04, 0x46, 0x00, 0x90,
-	0x00, 0x00, 0x7D, 0x00, 0x80, 0x12, 0xE0, 0x38,
-	0x48, 0x38, 0x49, 0xC0, 0x09, 0xC9, 0x09, 0x40,
-	0x1A, 0xB0, 0x42, 0x49, 0xD9, 0x80, 0x2D, 0x47,
-	0xD8, 0x34, 0x4F, 0x38, 0x46, 0xEC, 0xE7, 0x00,
-	0x2E, 0x42, 0xD1, 0x80, 0x2D, 0x40, 0xD8, 0x30,
-	0x4F, 0x38, 0x46, 0xE5, 0xE7, 0x28, 0x19, 0x08,
-	0x30, 0x80, 0xB2, 0x05, 0xF0, 0x4A, 0xFC, 0x1F,
-	0x49, 0x10, 0x39, 0x09, 0x5D, 0x88, 0x42, 0x01,
-	0xD0, 0x01, 0x20, 0x00, 0x90, 0x64, 0x1C, 0xA4,
-	0xB2, 0x08, 0x2C, 0xEF, 0xD3, 0x00, 0x98, 0x00,
-	0x28, 0x2A, 0xD1, 0x00, 0x24, 0x08, 0xE0, 0x20,
-	0x46, 0x08, 0x30, 0x80, 0xB2, 0x05, 0xF0, 0x35,
-	0xFC, 0x01, 0xA9, 0x08, 0x55, 0x64, 0x1C, 0xA4,
-	0xB2, 0xA5, 0x42, 0xF4, 0xD8, 0xF0, 0x01, 0xC0,
-	0x19, 0x40, 0x19, 0x05, 0xE0, 0x01, 0x78, 0x01,
-	0xAA, 0x11, 0x55, 0x40, 0x1C, 0x64, 0x1C, 0xA4,
-	0xB2, 0x80, 0x2C, 0xF7, 0xD3,
-	0x00, 0x00, 0x7E, 0x00, 0x80, 0x28, 0x46, 0x10,
-	0x30, 0x80, 0xB2, 0x05, 0xF0, 0x1E, 0xFC, 0x04,
-	0x02, 0x28, 0x46, 0x11, 0x30, 0x80, 0xB2, 0x05,
-	0xF0, 0x18, 0xFC, 0x04, 0x43, 0x01, 0xA9, 0x28,
-	0x46, 0x05, 0xF0, 0x64, 0xFD, 0x84, 0x42, 0x23,
-	0xD0, 0x01, 0x21, 0x03, 0x20, 0x05, 0xF0, 0x09,
-	0xFC, 0x23, 0xB0, 0xF0, 0xBD, 0x20, 0xCC, 0x00,
-	0x00, 0x0C, 0x02, 0x00, 0x20, 0x1C, 0x02, 0x00,
-	0x20, 0x14, 0x02, 0x00, 0x20, 0x24, 0x02, 0x00,
-	0x20, 0x18, 0x02, 0x00, 0x20, 0x10, 0x02, 0x00,
-	0x20, 0x90, 0xDD, 0x00, 0x00, 0x0F, 0x04, 0x00,
-	0x20, 0xCB, 0x00, 0x00, 0x20, 0x48, 0x01, 0x00,
-	0x20, 0x10, 0x27, 0x00, 0x00, 0x00, 0xE2, 0x00,
-	0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xDC, 0x00,
-	0x00, 0x00, 0x2E, 0x07, 0xD1, 0x00, 0x20, 0x01,
-	0xA9, 0x3A, 0x5C, 0x0A, 0x54, 0x40, 0x1C, 0x80,
-	0xB2, 0x04, 0x28, 0xF9, 0xD3,
-	0x00, 0x00, 0x7F, 0x00, 0x80, 0x22, 0x98, 0x01,
-	0xA9, 0x80, 0x19, 0x80, 0xB2, 0x05, 0xF0, 0x72,
-	0xFD, 0x00, 0x28, 0x01, 0xD1, 0x00, 0x21, 0x00,
-	0xE0, 0x01, 0x21, 0x03, 0x20, 0x05, 0xF0, 0xD1,
-	0xFB, 0x04, 0x20, 0x21, 0x99, 0x05, 0xF0, 0xCD,
-	0xFB, 0x29, 0x46, 0x05, 0x20, 0x05, 0xF0, 0xD3,
-	0xFB, 0x21, 0x98, 0x00, 0x28, 0xBC, 0xD1, 0xF9,
-	0x49, 0x08, 0x70, 0xF9, 0x48, 0x01, 0x88, 0xC9,
-	0x07, 0xC9, 0x0F, 0x01, 0x80, 0xB4, 0xE7, 0xFE,
-	0xB5, 0x03, 0x20, 0x05, 0xF0, 0xCF, 0xFB, 0x04,
-	0x46, 0x05, 0x20, 0x05, 0xF0, 0xCB, 0xFB, 0x05,
-	0x46, 0x07, 0x20, 0x05, 0xF0, 0xB6, 0xFB, 0x00,
-	0x90, 0x00, 0x28, 0x09, 0xD0, 0x01, 0x28, 0x12,
-	0xD0, 0x02, 0x28, 0x1A, 0xD1, 0x00, 0x2C, 0x18,
-	0xD1, 0x80, 0x2D, 0x16, 0xD8, 0xEB, 0x4E, 0x0F,
-	0xE0, 0xEB, 0x48, 0xEC, 0x49, 0xC0, 0x09, 0xC9,
-	0x09, 0x40, 0x1A, 0xA0, 0x42,
-	0x00, 0x00, 0x80, 0x00, 0x80, 0x0D, 0xD9, 0x80,
-	0x2D, 0x0B, 0xD8, 0xE8, 0x4E, 0x04, 0xE0, 0x00,
-	0x2C, 0x07, 0xD1, 0x80, 0x2D, 0x05, 0xD8, 0xE4,
-	0x4E, 0xE0, 0x01, 0x87, 0x19, 0x00, 0x24, 0x01,
-	0x90, 0x0C, 0xE0, 0x01, 0x21, 0x03, 0x20, 0x05,
-	0xF0, 0x8C, 0xFB, 0xFE, 0xBD, 0x20, 0x46, 0x08,
-	0x30, 0x39, 0x5D, 0x80, 0xB2, 0x05, 0xF0, 0x85,
-	0xFB, 0x64, 0x1C, 0xA4, 0xB2, 0xA5, 0x42, 0xF5,
-	0xD8, 0x39, 0x46, 0x28, 0x46, 0x05, 0xF0, 0xD2,
-	0xFC, 0x04, 0x46, 0x01, 0x0A, 0x28, 0x46, 0x08,
-	0x30, 0x80, 0xB2, 0x05, 0xF0, 0x76, 0xFB, 0x28,
-	0x46, 0x09, 0x30, 0xE1, 0xB2, 0x80, 0xB2, 0x05,
-	0xF0, 0x70, 0xFB, 0x00, 0x21, 0x03, 0x20, 0x05,
-	0xF0, 0x6C, 0xFB, 0x04, 0x20, 0x00, 0x99, 0x05,
-	0xF0, 0x68, 0xFB, 0x00, 0x2D, 0x03, 0xD1, 0x71,
-	0x88, 0x01, 0x98, 0x08, 0x1A, 0x85, 0xB2, 0x29,
-	0x46, 0x05, 0x20, 0x05, 0xF0,
-	0x00, 0x00, 0x81, 0x00, 0x80, 0x68, 0xFB, 0xFE,
-	0xBD, 0xF8, 0xB5, 0x01, 0xF0, 0x9F, 0xFD, 0x02,
-	0x20, 0x05, 0xF0, 0x5B, 0xFB, 0x05, 0x46, 0x40,
-	0x06, 0x7A, 0xD4, 0x01, 0xE0, 0x01, 0xF0, 0xC2,
-	0xFD, 0x05, 0xF0, 0x6D, 0xFB, 0x00, 0x28, 0xF9,
-	0xD1, 0xAB, 0x06, 0x9B, 0x0E, 0xBB, 0x48, 0x0A,
-	0x2B, 0x3D, 0xD0, 0x07, 0xDC, 0x08, 0xF0, 0x91,
-	0xFD, 0x0A, 0xA4, 0xA2, 0x24, 0x29, 0x2C, 0xA2,
-	0x2F, 0x32, 0x35, 0x38, 0xA2, 0x0F, 0x2B, 0x79,
-	0xD0, 0x0A, 0xDC, 0x0B, 0x2B, 0x48, 0xD0, 0x0C,
-	0x2B, 0x5F, 0xD0, 0xB7, 0x4E, 0x0D, 0x2B, 0x5F,
-	0xD0, 0x0E, 0x2B, 0x6C, 0xD1, 0x00, 0x20, 0x67,
-	0xE0, 0x10, 0x2B, 0x71, 0xD0, 0x11, 0x2B, 0x68,
-	0xD0, 0x3F, 0x2B, 0xF6, 0xD1, 0x03, 0x20, 0x05,
-	0xF0, 0x2C, 0xFB, 0xFE, 0x28, 0x7C, 0xD0, 0xFF,
-	0x28, 0x7D, 0xD1, 0x00, 0xF0, 0x95, 0xF8, 0x7B,
-	0xE0, 0x80, 0x21, 0x03, 0x20,
-	0x00, 0x00, 0x82, 0x00, 0x80, 0x05, 0xF0, 0x27,
-	0xFB, 0x7A, 0xE0, 0xFF, 0xF7, 0x5C, 0xFF, 0x77,
-	0xE0, 0xFF, 0xF7, 0x98, 0xFE, 0x74, 0xE0, 0x00,
-	0xF0, 0xAB, 0xF9, 0x71, 0xE0, 0xFF, 0xF7, 0x3D,
-	0xFE, 0x6E, 0xE0, 0xFF, 0xF7, 0xDB, 0xFD, 0x6B,
-	0xE0, 0x00, 0xF0, 0x76, 0xF9, 0x68, 0xE0, 0x00,
-	0x78, 0x00, 0x28, 0x55, 0xD0, 0x03, 0x20, 0x05,
-	0xF0, 0x08, 0xFB, 0x04, 0x46, 0xC0, 0x07, 0x01,
-	0xD0, 0x03, 0xF0, 0x33, 0xFC, 0xA0, 0x07, 0x01,
-	0xD5, 0x03, 0xF0, 0xD0, 0xFB, 0x60, 0x07, 0x01,
-	0xD5, 0x03, 0xF0, 0xFD, 0xFB, 0x20, 0x07, 0x01,
-	0xD5, 0x03, 0xF0, 0xDE, 0xFB, 0x00, 0x21, 0x40,
-	0xE0, 0x00, 0x78, 0x00, 0x28, 0x3C, 0xD0, 0x01,
-	0x20, 0x05, 0xF0, 0xBB, 0xF9, 0x01, 0xF0, 0x92,
-	0xFC, 0x04, 0xF0, 0x3E, 0xF9, 0xC0, 0x07, 0xF9,
-	0xD1, 0x62, 0xB6, 0x8E, 0x48, 0x80, 0x6A, 0x00,
-	0x28, 0x3E, 0xD0, 0x01, 0xF0,
-	0x00, 0x00, 0x83, 0x00, 0x80, 0x87, 0xFC, 0x08,
-	0xF0, 0x64, 0xFA, 0x01, 0x28, 0xF9, 0xD0, 0x37,
-	0xE0, 0x48, 0xE0, 0xFF, 0xF7, 0xAD, 0xFC, 0x33,
-	0xE0, 0x00, 0x24, 0x67, 0x00, 0xF8, 0x1C, 0x80,
-	0xB2, 0x05, 0xF0, 0xE4, 0xFA, 0x84, 0x49, 0x64,
-	0x1C, 0xC8, 0x53, 0x19, 0x2C, 0xF5, 0xD3, 0x01,
-	0x20, 0x30, 0x70, 0x25, 0xE0, 0x02, 0xE0, 0x21,
-	0xE0, 0x06, 0xE0, 0x16, 0xE0, 0x03, 0x20, 0x05,
-	0xF0, 0xC4, 0xFA, 0x7E, 0x49, 0x08, 0x70, 0xC9,
-	0xE7, 0x07, 0x20, 0x05, 0xF0, 0xBE, 0xFA, 0x00,
-	0x07, 0x00, 0x0F, 0x05, 0x28, 0x04, 0xD8, 0xFF,
-	0xF7, 0x70, 0xFB, 0x11, 0xE0, 0x08, 0xE0, 0x0A,
-	0xE0, 0x01, 0x21, 0x03, 0x20, 0x05, 0xF0, 0xAD,
-	0xFA, 0x0A, 0xE0, 0x00, 0xF0, 0xCA, 0xF8, 0x07,
-	0xE0, 0x00, 0xF0, 0x71, 0xF8, 0x00, 0xE0, 0x01,
-	0x20, 0x00, 0x28, 0x01, 0xD0, 0xAD, 0x09, 0xAD,
-	0x01, 0x6F, 0x48, 0x80, 0x22,
-	0x00, 0x00, 0x84, 0x00, 0x80, 0x01, 0x78, 0x51,
-	0x40, 0x01, 0x70, 0xC8, 0xB2, 0xC1, 0x09, 0xC9,
-	0x01, 0x29, 0x43, 0x40, 0x20, 0x01, 0x43, 0x02,
-	0x20, 0x05, 0xF0, 0x93, 0xFA, 0x01, 0xF0, 0xDE,
-	0xF8, 0x01, 0xF0, 0x14, 0xF9, 0xF8, 0xBD, 0x70,
-	0x47, 0xFE, 0xB5, 0x04, 0x20, 0x05, 0xF0, 0x8D,
-	0xFA, 0x04, 0x46, 0x05, 0x20, 0x05, 0xF0, 0x89,
-	0xFA, 0x00, 0x02, 0x24, 0x18, 0x06, 0x20, 0x05,
-	0xF0, 0x84, 0xFA, 0x00, 0x04, 0x24, 0x18, 0x07,
-	0x20, 0x05, 0xF0, 0x7F, 0xFA, 0x00, 0x06, 0x25,
-	0x18, 0x08, 0x20, 0x05, 0xF0, 0x7A, 0xFA, 0x04,
-	0x46, 0x09, 0x20, 0x05, 0xF0, 0x76, 0xFA, 0x00,
-	0x02, 0xFF, 0x26, 0x20, 0x18, 0xEF, 0x36, 0xB0,
-	0x42, 0x00, 0xD8, 0x06, 0x46, 0x00, 0x24, 0x20,
-	0x46, 0x0A, 0x30, 0x07, 0x46, 0x80, 0xB2, 0x05,
-	0xF0, 0x68, 0xFA, 0x69, 0x46, 0x08, 0x55, 0xB8,
-	0xB2, 0x00, 0x21, 0x05, 0xF0,
-	0x00, 0x00, 0x85, 0x00, 0x80, 0x5E, 0xFA, 0x64,
-	0x1C, 0x08, 0x2C, 0xF0, 0xD3, 0x01, 0x21, 0x4D,
-	0x4B, 0x00, 0x20, 0x6A, 0x46, 0x1C, 0x5C, 0x17,
-	0x5C, 0xBC, 0x42, 0x00, 0xD0, 0x00, 0x21, 0x40,
-	0x1C, 0x08, 0x28, 0xF7, 0xD3, 0x01, 0x29, 0x06,
-	0xD1, 0x48, 0x07, 0x85, 0x42, 0x03, 0xD3, 0x46,
-	0x49, 0xA8, 0x19, 0x88, 0x42, 0x01, 0xD9, 0x01,
-	0x20, 0xFE, 0xBD, 0x00, 0x24, 0x07, 0xE0, 0x20,
-	0x46, 0x12, 0x30, 0x80, 0xB2, 0x05, 0xF0, 0x41,
-	0xFA, 0x28, 0x70, 0x6D, 0x1C, 0x64, 0x1C, 0xB4,
-	0x42, 0xF5, 0xD3, 0x00, 0x20, 0xFE, 0xBD, 0xFE,
-	0xB5, 0x04, 0x20, 0x05, 0xF0, 0x36, 0xFA, 0x04,
-	0x46, 0x05, 0x20, 0x05, 0xF0, 0x32, 0xFA, 0x00,
-	0x02, 0x24, 0x18, 0x06, 0x20, 0x05, 0xF0, 0x2D,
-	0xFA, 0x00, 0x04, 0x24, 0x18, 0x07, 0x20, 0x05,
-	0xF0, 0x28, 0xFA, 0x00, 0x06, 0x25, 0x18, 0x08,
-	0x20, 0x05, 0xF0, 0x23, 0xFA,
-	0x00, 0x00, 0x86, 0x00, 0x80, 0x04, 0x46, 0x09,
-	0x20, 0x05, 0xF0, 0x1F, 0xFA, 0x00, 0x02, 0xFF,
-	0x26, 0x20, 0x18, 0xFD, 0x36, 0xB0, 0x42, 0x00,
-	0xD8, 0x06, 0x46, 0x00, 0x24, 0x20, 0x46, 0x0A,
-	0x30, 0x07, 0x46, 0x80, 0xB2, 0x05, 0xF0, 0x11,
-	0xFA, 0x69, 0x46, 0x08, 0x55, 0xB8, 0xB2, 0x00,
-	0x21, 0x05, 0xF0, 0x07, 0xFA, 0x64, 0x1C, 0x08,
-	0x2C, 0xF0, 0xD3, 0x01, 0x21, 0x21, 0x4B, 0x00,
-	0x20, 0x6A, 0x46, 0x1C, 0x5C, 0x17, 0x5C, 0xBC,
-	0x42, 0x00, 0xD0, 0x00, 0x21, 0x40, 0x1C, 0x08,
-	0x28, 0xF7, 0xD3, 0x01, 0x29, 0x06, 0xD1, 0x48,
-	0x07, 0x85, 0x42, 0x03, 0xD3, 0x1A, 0x49, 0xA8,
-	0x19, 0x88, 0x42, 0x01, 0xD9, 0x01, 0x20, 0xFE,
-	0xBD, 0x00, 0x24, 0x06, 0xE0, 0x29, 0x78, 0x20,
-	0x1D, 0x6D, 0x1C, 0x80, 0xB2, 0x05, 0xF0, 0xE5,
-	0xF9, 0x64, 0x1C, 0xB4, 0x42, 0xF6, 0xD3, 0x00,
-	0x20, 0xFE, 0xBD, 0xF8, 0xB5,
-	0x00, 0x00, 0x87, 0x00, 0x80, 0x03, 0x20, 0x05,
-	0xF0, 0xE0, 0xF9, 0x00, 0x26, 0x00, 0x28, 0x1D,
-	0xD0, 0x01, 0x28, 0x1D, 0xD0, 0x02, 0x28, 0x3C,
-	0xD1, 0x02, 0x4C, 0x1A, 0xE0, 0x2A, 0x01, 0x00,
-	0x20, 0x3C, 0x01, 0x00, 0x20, 0x00, 0xE2, 0x00,
-	0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xDC, 0x00,
-	0x00, 0xD4, 0x00, 0x00, 0x20, 0x88, 0xDF, 0x00,
-	0x00, 0xF4, 0x00, 0x00, 0x20, 0x3F, 0x01, 0x00,
-	0x20, 0x3E, 0x01, 0x00, 0x20, 0x18, 0xCC, 0x00,
-	0x00, 0x00, 0x20, 0x00, 0x20, 0x53, 0x4C, 0x00,
-	0xE0, 0x53, 0x4C, 0x20, 0x88, 0x67, 0x88, 0x21,
-	0x46, 0x05, 0xF0, 0x08, 0xFB, 0x05, 0x46, 0xE0,
-	0x19, 0x04, 0x88, 0xA5, 0x42, 0x00, 0xD0, 0x01,
-	0x26, 0x31, 0x46, 0x03, 0x20, 0x05, 0xF0, 0xA9,
-	0xF9, 0x29, 0x0A, 0x04, 0x20, 0x05, 0xF0, 0xA5,
-	0xF9, 0xE9, 0xB2, 0x05, 0x20, 0x05, 0xF0, 0xA1,
-	0xF9, 0x21, 0x0A, 0x06, 0x20,
-	0x00, 0x00, 0x88, 0x00, 0x80, 0x05, 0xF0, 0x9D,
-	0xF9, 0xE1, 0xB2, 0x07, 0x20, 0x05, 0xF0, 0x99,
-	0xF9, 0xF8, 0xBD, 0x01, 0x21, 0x03, 0x20, 0xF9,
-	0xE7, 0x70, 0xB5, 0x42, 0x48, 0x00, 0x78, 0x00,
-	0x28, 0x01, 0xD1, 0x01, 0x21, 0x20, 0xE0, 0x03,
-	0x20, 0x05, 0xF0, 0x8F, 0xF9, 0x04, 0x46, 0x3E,
-	0x48, 0x06, 0x88, 0x3E, 0x48, 0x01, 0xF0, 0x9A,
-	0xFB, 0x00, 0x25, 0x00, 0x2C, 0x09, 0xD0, 0x01,
-	0x2C, 0x09, 0xD0, 0x02, 0x2C, 0x09, 0xD0, 0x03,
-	0x2C, 0x09, 0xD1, 0x84, 0x20, 0x03, 0xF0, 0xC6,
-	0xFE, 0x06, 0xE0, 0x81, 0x20, 0xFA, 0xE7, 0x88,
-	0x20, 0xF8, 0xE7, 0x82, 0x20, 0xF6, 0xE7, 0x01,
-	0x25, 0x30, 0x46, 0x01, 0xF0, 0x83, 0xFB, 0x29,
-	0x46, 0x03, 0x20, 0x05, 0xF0, 0x6A, 0xF9, 0x70,
-	0xBD, 0xF8, 0xB5, 0x03, 0x20, 0x05, 0xF0, 0x69,
-	0xF9, 0x06, 0x02, 0x04, 0x20, 0x05, 0xF0, 0x65,
-	0xF9, 0x06, 0x43, 0x05, 0x20,
-	0x00, 0x00, 0x89, 0x00, 0x80, 0x05, 0xF0, 0x61,
-	0xF9, 0x05, 0x02, 0x06, 0x20, 0x05, 0xF0, 0x5D,
-	0xF9, 0x05, 0x43, 0x07, 0x20, 0x05, 0xF0, 0x59,
-	0xF9, 0x00, 0x27, 0x00, 0x90, 0x01, 0x28, 0x03,
-	0xD0, 0x02, 0x28, 0x12, 0xD0, 0x03, 0x28, 0x26,
-	0xD1, 0x09, 0x2D, 0x00, 0xD9, 0x09, 0x25, 0x00,
-	0x24, 0x08, 0xE0, 0x20, 0x46, 0x08, 0x30, 0x05,
-	0xF0, 0x48, 0xF9, 0x31, 0x19, 0x1C, 0x4A, 0x64,
-	0x1C, 0x50, 0x54, 0xE4, 0xB2, 0xA5, 0x42, 0xF4,
-	0xD8, 0x16, 0xE0, 0x09, 0x2D, 0x00, 0xD9, 0x09,
-	0x25, 0x08, 0x20, 0x05, 0xF0, 0x3A, 0xF9, 0x17,
-	0x49, 0x00, 0x24, 0x08, 0x70, 0x08, 0xE0, 0x20,
-	0x46, 0x09, 0x30, 0x05, 0xF0, 0x32, 0xF9, 0x31,
-	0x19, 0x11, 0x4A, 0x64, 0x1C, 0x50, 0x54, 0xE4,
-	0xB2, 0xA5, 0x42, 0xF4, 0xD8, 0x00, 0xE0, 0x01,
-	0x27, 0x39, 0x46, 0x03, 0x20, 0x05, 0xF0, 0x21,
-	0xF9, 0x04, 0x20, 0x00, 0x99,
-	0x00, 0x00, 0x8A, 0x00, 0x80, 0x05, 0xF0, 0x1D,
-	0xF9, 0x29, 0x0A, 0x05, 0x20, 0x05, 0xF0, 0x19,
-	0xF9, 0xE9, 0xB2, 0x06, 0x20, 0x05, 0xF0, 0x15,
-	0xF9, 0xF8, 0xBD, 0x00, 0x00, 0x00, 0xDC, 0x00,
-	0x00, 0x00, 0xFF, 0x00, 0x00, 0x2A, 0x01, 0x00,
-	0x20, 0x48, 0x01, 0x00, 0x20, 0x10, 0x27, 0x00,
-	0x00, 0x06, 0x04, 0x00, 0x20, 0xCB, 0x00, 0x00,
-	0x20, 0x70, 0xB5, 0x05, 0xF0, 0xCB, 0xF8, 0x01,
-	0x20, 0x05, 0xF0, 0xF2, 0xF8, 0x05, 0xF0, 0xBB,
-	0xF8, 0x01, 0x24, 0x65, 0x02, 0xA0, 0xB2, 0x00,
-	0x21, 0x05, 0xF0, 0xF7, 0xF8, 0x64, 0x1C, 0xAC,
-	0x42, 0xF8, 0xD3, 0x64, 0x4D, 0x00, 0x24, 0x60,
-	0x00, 0x41, 0x19, 0x49, 0x78, 0x28, 0x5C, 0x05,
-	0xF0, 0xEC, 0xF8, 0x64, 0x1C, 0x32, 0x2C, 0xF6,
-	0xD3, 0xFF, 0x24, 0x01, 0x34, 0xA1, 0x78, 0x1C,
-	0x20, 0x05, 0xF0, 0xE3, 0xF8, 0xE1, 0x78, 0x1D,
-	0x20, 0x05, 0xF0, 0xDF, 0xF8,
-	0x00, 0x00, 0x8B, 0x00, 0x80, 0x5A, 0x48, 0x81,
-	0x88, 0x1E, 0x20, 0x05, 0xF0, 0xE4, 0xF8, 0x58,
-	0x4C, 0x23, 0x20, 0x20, 0x34, 0x21, 0x8B, 0x05,
-	0xF0, 0xDE, 0xF8, 0xA1, 0x7E, 0x25, 0x20, 0x05,
-	0xF0, 0xD0, 0xF8, 0xE1, 0x7E, 0x26, 0x20, 0x05,
-	0xF0, 0xCC, 0xF8, 0x21, 0x7F, 0x27, 0x20, 0x05,
-	0xF0, 0xC8, 0xF8, 0x61, 0x7F, 0x28, 0x20, 0x05,
-	0xF0, 0xC4, 0xF8, 0xA1, 0x7F, 0x29, 0x20, 0x05,
-	0xF0, 0xC0, 0xF8, 0xE1, 0x7F, 0x2A, 0x20, 0x05,
-	0xF0, 0xBC, 0xF8, 0x4A, 0x4C, 0x60, 0x7A, 0x22,
-	0x7A, 0x01, 0x02, 0x11, 0x43, 0x2D, 0x20, 0x05,
-	0xF0, 0xBE, 0xF8, 0x47, 0x48, 0x01, 0x88, 0x32,
-	0x20, 0x05, 0xF0, 0xB9, 0xF8, 0x60, 0x7B, 0x22,
-	0x7B, 0x01, 0x02, 0x11, 0x43, 0x36, 0x20, 0x05,
-	0xF0, 0xB2, 0xF8, 0xE0, 0x7B, 0xA2, 0x7B, 0x01,
-	0x02, 0x11, 0x43, 0x38, 0x20, 0x05, 0xF0, 0xAB,
-	0xF8, 0x3E, 0x4D, 0x68, 0x69,
-	0x00, 0x00, 0x8C, 0x00, 0x80, 0x3E, 0x4C, 0x01,
-	0x28, 0x06, 0xD1, 0xA0, 0x69, 0xC1, 0xB2, 0x34,
-	0x20, 0x05, 0xF0, 0x97, 0xF8, 0xE0, 0x69, 0x05,
-	0xE0, 0xE0, 0x69, 0xC1, 0xB2, 0x34, 0x20, 0x05,
-	0xF0, 0x90, 0xF8, 0xA0, 0x69, 0xC1, 0xB2, 0x35,
-	0x20, 0x05, 0xF0, 0x8B, 0xF8, 0xE8, 0x68, 0x81,
-	0xB2, 0x3A, 0x20, 0x05, 0xF0, 0x90, 0xF8, 0x28,
-	0x69, 0x81, 0xB2, 0x3C, 0x20, 0x05, 0xF0, 0x8B,
-	0xF8, 0x30, 0x48, 0x01, 0x78, 0x40, 0x20, 0x05,
-	0xF0, 0x7C, 0xF8, 0x00, 0xF0, 0x67, 0xF8, 0x2E,
-	0x4D, 0x2E, 0x4E, 0x28, 0x78, 0xC1, 0x00, 0x40,
-	0x18, 0x31, 0x88, 0x40, 0x18, 0x08, 0x38, 0x81,
-	0xB2, 0x43, 0x20, 0x05, 0xF0, 0x78, 0xF8, 0xA0,
-	0x6A, 0xC1, 0xB2, 0x45, 0x20, 0x05, 0xF0, 0x69,
-	0xF8, 0x30, 0x88, 0xC1, 0xB2, 0x46, 0x20, 0x05,
-	0xF0, 0x64, 0xF8, 0x1E, 0x48, 0x20, 0x30, 0xC0,
-	0x7C, 0xC2, 0x07, 0x23, 0x48,
-	0x00, 0x00, 0x8D, 0x00, 0x80, 0xD2, 0x0F, 0x00,
-	0x88, 0x41, 0x06, 0xC9, 0x0F, 0x49, 0x00, 0x11,
-	0x43, 0x02, 0x06, 0xD2, 0x0F, 0x92, 0x00, 0x80,
-	0x06, 0x0A, 0x43, 0xC0, 0x0F, 0xC1, 0x00, 0x11,
-	0x43, 0x47, 0x20, 0x05, 0xF0, 0x4E, 0xF8, 0x29,
-	0x78, 0x48, 0x20, 0x05, 0xF0, 0x4A, 0xF8, 0x19,
-	0x4D, 0x00, 0x24, 0x28, 0x19, 0x01, 0x79, 0x20,
-	0x46, 0x61, 0x30, 0x80, 0xB2, 0x05, 0xF0, 0x41,
-	0xF8, 0x64, 0x1C, 0x20, 0x2C, 0xF5, 0xD3, 0x14,
-	0x4D, 0x00, 0x24, 0x28, 0x19, 0x01, 0x79, 0x20,
-	0x46, 0x81, 0x30, 0x80, 0xB2, 0x05, 0xF0, 0x35,
-	0xF8, 0x64, 0x1C, 0x40, 0x2C, 0xF5, 0xD3, 0x70,
-	0xBD, 0x10, 0xB5, 0x01, 0xF0, 0x73, 0xFA, 0x10,
-	0xBD, 0x70, 0x47, 0x00, 0x00, 0x68, 0xCC, 0x00,
-	0x00, 0x40, 0xF1, 0xFF, 0x0F, 0x00, 0xDC, 0x00,
-	0x00, 0x3C, 0x01, 0x00, 0x20, 0x90, 0xDD, 0x00,
-	0x00, 0x88, 0xDF, 0x00, 0x00,
-	0x00, 0x00, 0x8E, 0x00, 0x80, 0x89, 0x00, 0x00,
-	0x20, 0x96, 0x02, 0x00, 0x20, 0xEA, 0x00, 0x00,
-	0x20, 0x98, 0x02, 0x00, 0x20, 0x00, 0xE2, 0x00,
-	0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x48, 0x80,
-	0x6A, 0x00, 0x28, 0x00, 0xD0, 0x01, 0x20, 0xFE,
-	0x49, 0x0B, 0x30, 0x08, 0x83, 0xFD, 0x48, 0xC0,
-	0x7C, 0xC0, 0x07, 0x00, 0xD0, 0x02, 0x20, 0x0A,
-	0x8B, 0x80, 0x18, 0x48, 0x83, 0x70, 0x47, 0xF8,
-	0xB5, 0xF7, 0x4D, 0x00, 0x26, 0xAE, 0x83, 0xFF,
-	0xF7, 0xE9, 0xFF, 0x04, 0xF0, 0xC3, 0xFF, 0x08,
-	0x20, 0x04, 0xF0, 0xEA, 0xFF, 0x04, 0xF0, 0xB3,
-	0xFF, 0x20, 0x21, 0x0A, 0x20, 0x04, 0xF0, 0xF1,
-	0xFF, 0x40, 0x21, 0x02, 0x20, 0x04, 0xF0, 0xED,
-	0xFF, 0x00, 0x21, 0x03, 0x20, 0x04, 0xF0, 0xE9,
-	0xFF, 0x00, 0x21, 0x04, 0x20, 0x04, 0xF0, 0xE5,
-	0xFF, 0x00, 0x21, 0x05, 0x20, 0x04, 0xF0, 0xE1,
-	0xFF, 0x00, 0x21, 0x06, 0x20,
-	0x00, 0x00, 0x8F, 0x00, 0x80, 0x04, 0xF0, 0xDD,
-	0xFF, 0x00, 0x21, 0x07, 0x20, 0x04, 0xF0, 0xD9,
-	0xFF, 0x00, 0x21, 0x08, 0x20, 0x04, 0xF0, 0xD5,
-	0xFF, 0x00, 0x21, 0x09, 0x20, 0x04, 0xF0, 0xD1,
-	0xFF, 0x0B, 0x24, 0x01, 0x27, 0x7F, 0x02, 0xA0,
-	0xB2, 0x00, 0x21, 0x04, 0xF0, 0xCA, 0xFF, 0x64,
-	0x1C, 0xBC, 0x42, 0xF8, 0xD3, 0x01, 0xF0, 0xAA,
-	0xFA, 0x6E, 0x74, 0x00, 0x20, 0xDA, 0x4B, 0xEE,
-	0x73, 0x1F, 0x21, 0x0E, 0x22, 0x42, 0x43, 0xD2,
-	0x18, 0x40, 0x1C, 0xC0, 0xB2, 0xD1, 0x72, 0x0B,
-	0x28, 0xF7, 0xD3, 0xD6, 0x48, 0x00, 0x78, 0x00,
-	0x28, 0x04, 0xD0, 0x03, 0xF0, 0x8A, 0xFC, 0x00,
-	0x20, 0x04, 0xF0, 0x7F, 0xFE, 0xD2, 0x49, 0x68,
-	0x7B, 0x08, 0x70, 0x6E, 0x71, 0x01, 0x20, 0x28,
-	0x70, 0xD0, 0x48, 0xAE, 0x73, 0x06, 0x80, 0xD0,
-	0x48, 0x06, 0x80, 0x00, 0xF0, 0x57, 0xFD, 0x02,
-	0x20, 0xE8, 0x72, 0x01, 0xF0,
-	0x00, 0x00, 0x90, 0x00, 0x80, 0x47, 0xF9, 0x28,
-	0x62, 0xCC, 0x48, 0x40, 0x68, 0xCC, 0x49, 0x08,
-	0x60, 0xE8, 0x8A, 0x01, 0xF0, 0xB3, 0xF9, 0xF8,
-	0xBD, 0xCA, 0x49, 0x00, 0x20, 0x08, 0x70, 0x8E,
-	0xE7, 0x70, 0xB5, 0x01, 0x25, 0x01, 0xF0, 0x36,
-	0xF9, 0x06, 0x46, 0xC7, 0x48, 0x04, 0x78, 0xBB,
-	0x48, 0x80, 0x6A, 0x00, 0x28, 0x06, 0xD0, 0x05,
-	0xF0, 0xBB, 0xF8, 0x00, 0x28, 0x00, 0xD0, 0x01,
-	0x20, 0x00, 0x19, 0xC4, 0xB2, 0xC1, 0x4A, 0xB6,
-	0x49, 0x00, 0x2C, 0x02, 0xD1, 0x10, 0x78, 0x40,
-	0x07, 0x00, 0xD4, 0x0E, 0x62, 0x88, 0x7A, 0x01,
-	0x28, 0x05, 0xD1, 0x88, 0x7B, 0x04, 0x43, 0x21,
-	0xD1, 0x00, 0xF0, 0x24, 0xFD, 0x1E, 0xE0, 0x02,
-	0x28, 0x0E, 0xD1, 0x00, 0x2C, 0x11, 0xD1, 0x10,
-	0x78, 0x40, 0x07, 0x17, 0xD5, 0x08, 0x6A, 0x4A,
-	0x8A, 0x30, 0x1A, 0x90, 0x42, 0x12, 0xD9, 0x03,
-	0x20, 0x88, 0x72, 0x88, 0x8A,
-	0x00, 0x00, 0x91, 0x00, 0x80, 0xC8, 0x82, 0x0D,
-	0xE0, 0x03, 0x28, 0x09, 0xD1, 0x48, 0x78, 0x04,
-	0x43, 0x03, 0xD0, 0x00, 0x25, 0x00, 0xF0, 0x10,
-	0xFD, 0x04, 0xE0, 0x10, 0x78, 0x40, 0x07, 0x01,
-	0xD4, 0x00, 0x25, 0xDD, 0xE7, 0x28, 0x46, 0x70,
-	0xBD, 0xF0, 0xB5, 0x9D, 0x4A, 0x89, 0xB0, 0x11,
-	0x7A, 0xA7, 0x4F, 0x49, 0x43, 0x05, 0x91, 0x51,
-	0x7A, 0x49, 0x43, 0x04, 0x91, 0x39, 0x78, 0x88,
-	0x42, 0x00, 0xD9, 0x08, 0x46, 0x00, 0x25, 0x29,
-	0x46, 0xFF, 0x22, 0x6B, 0x46, 0x5A, 0x54, 0x49,
-	0x1C, 0xC9, 0xB2, 0x0E, 0x29, 0xFA, 0xD9, 0x00,
-	0x21, 0x97, 0x4E, 0x0F, 0xE0, 0x0E, 0x22, 0x9D,
-	0x4B, 0x4A, 0x43, 0xD2, 0x18, 0xD2, 0x7A, 0x01,
-	0x23, 0xD2, 0x06, 0xD2, 0x0E, 0x93, 0x40, 0x34,
-	0x88, 0x1D, 0x43, 0x1C, 0x43, 0x34, 0x80, 0x6C,
-	0x46, 0xA1, 0x54, 0x49, 0x1C, 0x81, 0x42, 0xED,
-	0xD3, 0x8C, 0x49, 0x32, 0x88,
-	0x00, 0x00, 0x92, 0x00, 0x80, 0x08, 0x88, 0x10,
-	0x40, 0x00, 0x24, 0x08, 0x80, 0x26, 0x46, 0x71,
-	0xE0, 0x0E, 0x20, 0x85, 0x49, 0x70, 0x43, 0x41,
-	0x18, 0xC8, 0x7A, 0xC3, 0x43, 0xDB, 0x06, 0x6D,
-	0xD0, 0x42, 0x06, 0x92, 0x0F, 0x03, 0x2A, 0x5C,
-	0xD0, 0xC7, 0x06, 0xFF, 0x0E, 0x01, 0x20, 0xB8,
-	0x40, 0x85, 0x43, 0x08, 0x90, 0x68, 0x46, 0xC0,
-	0x5D, 0xFF, 0x28, 0x15, 0xD1, 0xB4, 0x42, 0x06,
-	0xD0, 0x79, 0x4A, 0x0E, 0x20, 0x60, 0x43, 0x80,
-	0x18, 0x0E, 0x22, 0x07, 0xF0, 0xEB, 0xFF, 0x60,
-	0x20, 0x07, 0x43, 0x0E, 0x20, 0x74, 0x49, 0x60,
-	0x43, 0x40, 0x18, 0xC7, 0x72, 0x75, 0x48, 0x08,
-	0x9A, 0x01, 0x88, 0x91, 0x43, 0x01, 0x80, 0x3A,
-	0xE0, 0x0E, 0x22, 0x50, 0x43, 0x79, 0x4A, 0x83,
-	0x18, 0x58, 0x88, 0x4A, 0x88, 0x9C, 0x46, 0x82,
-	0x1A, 0x98, 0x88, 0x96, 0x46, 0x8A, 0x88, 0x68,
-	0x4B, 0x80, 0x1A, 0x72, 0x46,
-	0x00, 0x00, 0x93, 0x00, 0x80, 0x52, 0x43, 0x40,
-	0x43, 0x10, 0x18, 0x86, 0x46, 0x9B, 0x8B, 0x08,
-	0x9A, 0x04, 0x98, 0x1A, 0x42, 0x00, 0xD1, 0x05,
-	0x98, 0x70, 0x45, 0x12, 0xD8, 0x0E, 0x20, 0x62,
-	0x49, 0x60, 0x43, 0x40, 0x18, 0x0E, 0x22, 0x61,
-	0x46, 0x07, 0x90, 0x07, 0xF0, 0xBB, 0xFF, 0x40,
-	0x20, 0x07, 0x43, 0x07, 0x98, 0x5A, 0x49, 0xC7,
-	0x72, 0x8A, 0x8B, 0x08, 0x98, 0x10, 0x43, 0x88,
-	0x83, 0x0D, 0xE0, 0xB4, 0x42, 0x06, 0xD0, 0x58,
-	0x4A, 0x0E, 0x20, 0x60, 0x43, 0x80, 0x18, 0x0E,
-	0x22, 0x07, 0xF0, 0xA8, 0xFF, 0x0E, 0x20, 0x54,
-	0x49, 0x60, 0x43, 0x40, 0x18, 0xC7, 0x72, 0x64,
-	0x1C, 0x07, 0xE0, 0xC0, 0x06, 0xC0, 0x0E, 0x01,
-	0x22, 0x52, 0x49, 0x82, 0x40, 0x08, 0x88, 0x90,
-	0x43, 0x08, 0x80, 0x76, 0x1C, 0x56, 0x4A, 0x10,
-	0x78, 0x86, 0x42, 0x89, 0xD3, 0x00, 0x26, 0x26,
-	0xE0, 0xE8, 0x07, 0x21, 0xD0,
-	0x00, 0x00, 0x94, 0x00, 0x80, 0x68, 0x46, 0x80,
-	0x5D, 0x0E, 0x21, 0x48, 0x43, 0x51, 0x49, 0x01,
-	0x23, 0x40, 0x18, 0x06, 0x90, 0x82, 0x88, 0x41,
-	0x88, 0x30, 0x46, 0xFC, 0xF7, 0x09, 0xFD, 0x00,
-	0x28, 0x12, 0xD1, 0x0E, 0x20, 0x40, 0x49, 0x60,
-	0x43, 0x47, 0x18, 0x0E, 0x22, 0x38, 0x46, 0x06,
-	0x99, 0x07, 0xF0, 0x78, 0xFF, 0x20, 0x20, 0x30,
-	0x43, 0x39, 0x49, 0xF8, 0x72, 0x01, 0x22, 0x88,
-	0x8B, 0xB2, 0x40, 0x90, 0x43, 0x88, 0x83, 0x64,
-	0x1C, 0x76, 0x1C, 0xF6, 0xB2, 0x6D, 0x08, 0x00,
-	0x2D, 0x03, 0xD0, 0x3F, 0x48, 0x00, 0x78, 0x84,
-	0x42, 0xD2, 0xD3, 0x31, 0x48, 0x3C, 0x49, 0x04,
-	0x74, 0x31, 0x4B, 0x1F, 0x20, 0x0A, 0x78, 0x04,
-	0xE0, 0x0E, 0x21, 0x61, 0x43, 0xC9, 0x18, 0xC8,
-	0x72, 0x64, 0x1C, 0x94, 0x42, 0xF8, 0xD3, 0x09,
-	0xB0, 0xF0, 0xBD, 0xF1, 0xB5, 0x28, 0x4D, 0x82,
-	0xB0, 0x28, 0x78, 0x00, 0x28,
-	0x00, 0x00, 0x95, 0x00, 0x80, 0x02, 0xD0, 0x00,
-	0x20, 0x28, 0x70, 0x01, 0x20, 0x01, 0x90, 0x2E,
-	0x48, 0x04, 0x78, 0x2F, 0x48, 0x00, 0x78, 0x84,
-	0x42, 0x00, 0xD9, 0x04, 0x46, 0x1F, 0x4E, 0xB0,
-	0x6A, 0x2D, 0x4F, 0x00, 0x28, 0x1B, 0xD0, 0x04,
-	0xF0, 0x83, 0xFF, 0xB2, 0x6A, 0x2B, 0x49, 0x91,
-	0x40, 0x88, 0x43, 0xF0, 0x21, 0x01, 0x40, 0x00,
-	0x90, 0x00, 0x07, 0x09, 0x01, 0x00, 0x0F, 0x08,
-	0x18, 0x0C, 0x21, 0x01, 0x40, 0x03, 0x22, 0x10,
-	0x40, 0x89, 0x00, 0x08, 0x18, 0x22, 0x21, 0x01,
-	0x40, 0x11, 0x22, 0x49, 0x00, 0x10, 0x40, 0x08,
-	0x18, 0x39, 0x68, 0xC8, 0x72, 0x01, 0xE0, 0x00,
-	0x20, 0x00, 0x90, 0xE9, 0x78, 0x00, 0x98, 0x81,
-	0x42, 0x01, 0xD0, 0x01, 0x20, 0x01, 0x90, 0x00,
-	0x98, 0x1B, 0x4A, 0xE8, 0x70, 0x10, 0x78, 0x1B,
-	0x49, 0x40, 0x06, 0x40, 0x0F, 0x02, 0x28, 0x03,
-	0xD1, 0x0B, 0x88, 0x9B, 0x06,
-	0x00, 0x00, 0x96, 0x00, 0x80, 0x00, 0xD4, 0x00,
-	0x24, 0x04, 0x28, 0x03, 0xD1, 0x08, 0x88, 0x40,
-	0x06, 0x00, 0xD4, 0x00, 0x24, 0xE0, 0xB2, 0xFF,
-	0xF7, 0xC7, 0xFE, 0x25, 0xE0, 0x88, 0xDF, 0x00,
-	0x00, 0xD0, 0x00, 0x00, 0x20, 0x20, 0xDC, 0x00,
-	0x00, 0x2A, 0x04, 0x00, 0x20, 0x2A, 0x01, 0x00,
-	0x20, 0x32, 0x02, 0x00, 0x20, 0x84, 0x00, 0x00,
-	0x20, 0x86, 0x00, 0x00, 0x20, 0x00, 0x04, 0x01,
-	0x40, 0x4C, 0x01, 0x00, 0x20, 0x3E, 0x01, 0x00,
-	0x20, 0x92, 0x00, 0x00, 0x20, 0x40, 0x01, 0x00,
-	0x20, 0x96, 0x02, 0x00, 0x20, 0x4C, 0x03, 0x00,
-	0x20, 0x80, 0x02, 0x00, 0x20, 0xFF, 0xFF, 0x00,
-	0x00, 0x31, 0x02, 0x00, 0x20, 0x98, 0x02, 0x00,
-	0x20, 0xFE, 0x48, 0x02, 0x78, 0x50, 0x06, 0x40,
-	0x0F, 0x05, 0xD1, 0xFD, 0x48, 0x00, 0x78, 0x00,
-	0x28, 0x02, 0xD0, 0x01, 0x20, 0x00, 0xE0, 0x00,
-	0x20, 0x29, 0x7C, 0x00, 0x28,
-	0x00, 0x00, 0x97, 0x00, 0x80, 0x02, 0xD1, 0x52,
-	0x00, 0x0A, 0x43, 0x09, 0xE0, 0x20, 0x22, 0x0A,
-	0x43, 0xF6, 0x49, 0x49, 0x7F, 0xC9, 0x06, 0x89,
-	0x0F, 0x03, 0x29, 0x01, 0xD1, 0x01, 0x21, 0x01,
-	0x91, 0xA9, 0x78, 0x81, 0x42, 0x07, 0xD0, 0xF1,
-	0x49, 0x49, 0x7F, 0xC9, 0x06, 0x89, 0x0F, 0x01,
-	0xD0, 0x01, 0x21, 0x01, 0x91, 0xA8, 0x70, 0xD1,
-	0xB2, 0x68, 0x8B, 0x00, 0xF0, 0x83, 0xFB, 0x68,
-	0x8B, 0x40, 0x1C, 0x84, 0xB2, 0x28, 0x7C, 0xC1,
-	0x00, 0x40, 0x18, 0xE9, 0x49, 0x00, 0x19, 0x09,
-	0x38, 0x09, 0x68, 0x00, 0x27, 0x48, 0x72, 0x30,
-	0xE0, 0x0E, 0x20, 0xE6, 0x49, 0x78, 0x43, 0x45,
-	0x18, 0x69, 0x88, 0x20, 0x46, 0x00, 0xF0, 0x73,
-	0xFB, 0xA0, 0x1C, 0xA9, 0x88, 0x80, 0xB2, 0x00,
-	0xF0, 0x6E, 0xFB, 0x20, 0x1D, 0xA9, 0x79, 0x80,
-	0xB2, 0x00, 0xF0, 0x64, 0xFB, 0xA0, 0x1D, 0xE9,
-	0x79, 0x80, 0xB2, 0x00, 0xF0,
-	0x00, 0x00, 0x98, 0x00, 0x80, 0x5F, 0xFB, 0xE0,
-	0x1D, 0x29, 0x7A, 0x80, 0xB2, 0x00, 0xF0, 0x5A,
-	0xFB, 0x20, 0x46, 0x08, 0x30, 0x69, 0x7A, 0x80,
-	0xB2, 0x00, 0xF0, 0x54, 0xFB, 0xD4, 0x4A, 0x61,
-	0x1D, 0x12, 0x68, 0x89, 0xB2, 0xE8, 0x7A, 0x51,
-	0x18, 0x08, 0x70, 0x60, 0x21, 0x08, 0x42, 0x01,
-	0xD0, 0x01, 0x20, 0x01, 0x90, 0x09, 0x34, 0xA4,
-	0xB2, 0x7F, 0x1C, 0xCF, 0x48, 0x00, 0x7C, 0x87,
-	0x42, 0xCA, 0xD3, 0xCE, 0x48, 0xCC, 0x4D, 0x00,
-	0x78, 0x68, 0x74, 0x28, 0x7C, 0xE9, 0x7B, 0x88,
-	0x42, 0x01, 0xD0, 0x01, 0x21, 0x01, 0x91, 0xE8,
-	0x73, 0xC4, 0x48, 0x20, 0x30, 0xC0, 0x7C, 0xC0,
-	0x07, 0x23, 0xD0, 0xC7, 0x48, 0x01, 0x78, 0x01,
-	0x20, 0xCA, 0x08, 0x4B, 0x07, 0x5B, 0x0F, 0x98,
-	0x40, 0xBE, 0x4B, 0xC0, 0xB2, 0x9A, 0x18, 0x20,
-	0x32, 0x12, 0x7D, 0x02, 0x42, 0x28, 0x8B, 0x09,
-	0xD1, 0x00, 0xF0, 0x20, 0xFB,
-	0x00, 0x00, 0x99, 0x00, 0x80, 0x28, 0x8B, 0xBF,
-	0x49, 0x40, 0x1C, 0x80, 0xB2, 0x09, 0x78, 0x00,
-	0xF0, 0x19, 0xFB, 0x0A, 0xE0, 0xB6, 0x49, 0x0A,
-	0x68, 0x10, 0x18, 0x00, 0x22, 0x02, 0x70, 0x28,
-	0x8B, 0x09, 0x68, 0x40, 0x1C, 0x80, 0xB2, 0x08,
-	0x18, 0x02, 0x70, 0xB0, 0x6A, 0x00, 0x28, 0x26,
-	0xD0, 0xB5, 0x48, 0x29, 0x7C, 0x00, 0x78, 0x40,
-	0x1A, 0xC1, 0x00, 0x40, 0x18, 0x00, 0x19, 0x00,
-	0x21, 0x80, 0xB2, 0x01, 0x22, 0x18, 0xE0, 0x00,
-	0x9B, 0x13, 0x42, 0x0C, 0xD0, 0xAF, 0x4B, 0x1B,
-	0x6A, 0x01, 0x2B, 0x01, 0xD1, 0xAE, 0x4B, 0x00,
-	0xE0, 0xAE, 0x4B, 0xA5, 0x4C, 0x5B, 0x5C, 0x24,
-	0x68, 0x24, 0x18, 0x23, 0x70, 0x04, 0xE0, 0xA2,
-	0x4B, 0x1B, 0x68, 0x1B, 0x18, 0x00, 0x24, 0x1C,
-	0x70, 0x40, 0x1C, 0x49, 0x1C, 0x80, 0xB2, 0x52,
-	0x00, 0xB3, 0x6A, 0x8B, 0x42, 0xE3, 0xD8, 0x9E,
-	0x48, 0x00, 0x79, 0x00, 0x28,
-	0x00, 0x00, 0x9A, 0x00, 0x80, 0x70, 0xD0, 0x01,
-	0x20, 0x01, 0x90, 0xB1, 0x6A, 0x9A, 0x48, 0x40,
-	0x8B, 0x09, 0x18, 0x9D, 0x48, 0x00, 0x78, 0xC2,
-	0x00, 0x80, 0x18, 0x40, 0x1C, 0x08, 0x18, 0x85,
-	0xB2, 0x00, 0x27, 0x95, 0x49, 0x78, 0x00, 0x24,
-	0x31, 0x08, 0x5A, 0x9B, 0x49, 0x44, 0x05, 0x64,
-	0x0D, 0x8C, 0x42, 0xE7, 0xD0, 0x03, 0x21, 0x89,
-	0x03, 0x08, 0x40, 0x42, 0xD0, 0x01, 0x21, 0x89,
-	0x03, 0x40, 0x1A, 0x52, 0xD0, 0x40, 0x1A, 0x70,
-	0xD0, 0x40, 0x1A, 0x39, 0xD1, 0x30, 0x6A, 0xA0,
-	0x42, 0x36, 0xD9, 0x92, 0x49, 0x60, 0x00, 0x09,
-	0x5A, 0x28, 0x46, 0x00, 0xF0, 0xB8, 0xFA, 0x90,
-	0x48, 0x00, 0x57, 0x81, 0xB2, 0x28, 0x46, 0x32,
-	0x30, 0x80, 0xB2, 0x00, 0xF0, 0xB0, 0xFA, 0x8D,
-	0x48, 0x00, 0x57, 0x81, 0xB2, 0x28, 0x46, 0x64,
-	0x30, 0x80, 0xB2, 0x00, 0xF0, 0xA8, 0xFA, 0xAD,
-	0x1C, 0x7F, 0x1C, 0xAD, 0xB2,
-	0x00, 0x00, 0x9B, 0x00, 0x80, 0x19, 0x2F, 0x74,
-	0xD2, 0xB0, 0x69, 0x84, 0x49, 0x00, 0x19, 0x40,
-	0x00, 0x09, 0x5A, 0x28, 0x46, 0x00, 0xF0, 0x9B,
-	0xFA, 0xB0, 0x69, 0x81, 0x49, 0x09, 0x19, 0x40,
-	0x56, 0x81, 0xB2, 0x28, 0x46, 0x32, 0x30, 0x80,
-	0xB2, 0x00, 0xF0, 0x91, 0xFA, 0xB0, 0x69, 0x7D,
-	0x49, 0x09, 0x19, 0x40, 0x56, 0x81, 0xB2, 0x28,
-	0x46, 0x64, 0x30, 0x80, 0xB2, 0x00, 0xF0, 0x87,
-	0xFA, 0x57, 0xE0, 0x70, 0x6A, 0xA0, 0x42, 0x54,
-	0xD9, 0x77, 0x48, 0x00, 0x57, 0x81, 0xB2, 0x28,
-	0x46, 0x00, 0xF0, 0x7D, 0xFA, 0x75, 0x48, 0x00,
-	0x57, 0x81, 0xB2, 0x28, 0x46, 0x32, 0x30, 0x80,
-	0xB2, 0x00, 0xF0, 0x75, 0xFA, 0x72, 0x48, 0x1E,
-	0xE0, 0x49, 0xE0, 0x20, 0x46, 0x03, 0x21, 0x49,
-	0x02, 0x08, 0x40, 0x24, 0x07, 0xB1, 0x6A, 0x24,
-	0x0F, 0xA1, 0x42, 0x3A, 0xD9, 0x00, 0x28, 0x15,
-	0xD0, 0xFF, 0x38, 0xFF, 0x38,
-	0x00, 0x00, 0x9C, 0x00, 0x80, 0x02, 0x38, 0x34,
-	0xD1, 0x6A, 0x49, 0x60, 0x00, 0x09, 0x5A, 0x28,
-	0x46, 0x00, 0xF0, 0x5D, 0xFA, 0x68, 0x48, 0x00,
-	0x57, 0x81, 0xB2, 0x28, 0x46, 0x32, 0x30, 0x80,
-	0xB2, 0x00, 0xF0, 0x55, 0xFA, 0x5B, 0x48, 0x00,
-	0x57, 0xC4, 0xE7, 0x0F, 0xE0, 0x63, 0x49, 0x60,
-	0x00, 0x09, 0x5A, 0x28, 0x46, 0x00, 0xF0, 0x4B,
-	0xFA, 0x61, 0x48, 0x00, 0x57, 0x81, 0xB2, 0x28,
-	0x46, 0x32, 0x30, 0x80, 0xB2, 0x00, 0xF0, 0x43,
-	0xFA, 0x51, 0x48, 0xEC, 0xE7, 0x30, 0x6A, 0xA0,
-	0x42, 0x0F, 0xD9, 0x5C, 0x49, 0x60, 0x00, 0x09,
-	0x5A, 0x28, 0x46, 0x00, 0xF0, 0x38, 0xFA, 0x5A,
-	0x48, 0x00, 0x57, 0x81, 0xB2, 0x28, 0x46, 0x32,
-	0x30, 0x80, 0xB2, 0x00, 0xF0, 0x30, 0xFA, 0x57,
-	0x48, 0xD9, 0xE7, 0xAD, 0x1C, 0x7F, 0x1C, 0xAD,
-	0xB2, 0x19, 0x2F, 0x00, 0xD2, 0x51, 0xE7, 0x02,
-	0x99, 0x00, 0x20, 0xC9, 0x06,
-	0x00, 0x00, 0x9D, 0x00, 0x80, 0x00, 0xD5, 0x04,
-	0x20, 0x02, 0x99, 0x89, 0x06, 0x00, 0xD5, 0x08,
-	0x20, 0x02, 0x99, 0x49, 0x06, 0x00, 0xD5, 0x0C,
-	0x20, 0x02, 0x99, 0x09, 0x06, 0x00, 0xD5, 0x10,
-	0x20, 0x02, 0x99, 0xC9, 0x05, 0x01, 0xD5, 0x1C,
-	0x20, 0x01, 0xE0, 0x1C, 0x28, 0x05, 0xD1, 0x32,
-	0x49, 0x4A, 0x79, 0x00, 0x2A, 0x09, 0xD1, 0x01,
-	0x22, 0x04, 0xE0, 0x2F, 0x49, 0x4A, 0x79, 0x01,
-	0x2A, 0x03, 0xD1, 0x00, 0x22, 0x4A, 0x71, 0x01,
-	0x21, 0x01, 0x91, 0x2B, 0x49, 0xE3, 0x23, 0x0A,
-	0x7B, 0x1A, 0x40, 0x02, 0x43, 0x0A, 0x73, 0x01,
-	0x98, 0x00, 0x28, 0x02, 0xD0, 0x08, 0x7B, 0x40,
-	0x30, 0x08, 0x73, 0x08, 0x7B, 0xDC, 0x21, 0x08,
-	0x40, 0x21, 0x49, 0x09, 0x68, 0x88, 0x72, 0x01,
-	0x98, 0xFE, 0xBD, 0x10, 0xB5, 0x20, 0x49, 0x70,
-	0x22, 0x48, 0x7B, 0x03, 0x46, 0x13, 0x40, 0x8F,
-	0x22, 0x20, 0x2B, 0x01, 0xD9,
-	0x00, 0x00, 0x9E, 0x00, 0x80, 0x10, 0x40, 0x48,
-	0x73, 0x48, 0x7B, 0x03, 0x06, 0x08, 0xD5, 0x30,
-	0x4B, 0x1B, 0x88, 0x1B, 0x06, 0x5B, 0x0F, 0x03,
-	0xD1, 0x40, 0x06, 0x40, 0x0E, 0x10, 0x40, 0x48,
-	0x73, 0x8A, 0x79, 0xFA, 0x20, 0xFA, 0x2A, 0x00,
-	0xD9, 0x88, 0x71, 0xCA, 0x79, 0xFA, 0x2A, 0x00,
-	0xD9, 0xC8, 0x71, 0x8A, 0x8A, 0x88, 0x79, 0x82,
-	0x42, 0x00, 0xD2, 0x88, 0x82, 0x8A, 0x8A, 0xC8,
-	0x79, 0x82, 0x42, 0x00, 0xD2, 0x88, 0x82, 0x8A,
-	0x8A, 0x7D, 0x20, 0xC0, 0x00, 0x82, 0x42, 0x00,
-	0xD9, 0x88, 0x82, 0x4A, 0x8A, 0x1F, 0x48, 0x82,
-	0x42, 0x00, 0xD9, 0x48, 0x82, 0x00, 0xF0, 0x72,
-	0xFF, 0x10, 0xBD, 0x00, 0x00, 0x31, 0x02, 0x00,
-	0x20, 0x93, 0x00, 0x00, 0x20, 0x00, 0xDC, 0x00,
-	0x00, 0x80, 0x02, 0x00, 0x20, 0x2A, 0x04, 0x00,
-	0x20, 0xD0, 0x00, 0x00, 0x20, 0x92, 0x00, 0x00,
-	0x20, 0x84, 0x02, 0x00, 0x20,
-	0x00, 0x00, 0x9F, 0x00, 0x80, 0xC9, 0x02, 0x00,
-	0x20, 0x96, 0x02, 0x00, 0x20, 0xC8, 0xDF, 0x00,
-	0x00, 0x10, 0x02, 0x00, 0x20, 0x0C, 0x02, 0x00,
-	0x20, 0xFF, 0x07, 0x00, 0x00, 0xC0, 0x0C, 0x00,
-	0x20, 0xCE, 0x0D, 0x00, 0x20, 0x74, 0x0D, 0x00,
-	0x20, 0x74, 0x05, 0x00, 0x20, 0x8B, 0x0A, 0x00,
-	0x20, 0x64, 0x08, 0x00, 0x20, 0x1C, 0x02, 0x00,
-	0x20, 0x14, 0x02, 0x00, 0x20, 0x24, 0x02, 0x00,
-	0x20, 0x18, 0x02, 0x00, 0x20, 0x6E, 0x07, 0x00,
-	0x20, 0x85, 0x0C, 0x00, 0x20, 0x5E, 0x0A, 0x00,
-	0x20, 0x98, 0x02, 0x00, 0x20, 0x60, 0xEA, 0x00,
-	0x00, 0x70, 0xB5, 0x03, 0x20, 0x04, 0xF0, 0xB5,
-	0xFB, 0x05, 0x46, 0x04, 0x20, 0x04, 0xF0, 0xB1,
-	0xFB, 0x02, 0x46, 0x01, 0x24, 0xEA, 0x48, 0x00,
-	0x21, 0xCB, 0x00, 0xC3, 0x5C, 0xAB, 0x42, 0x23,
-	0xD1, 0xC9, 0x00, 0x08, 0x18, 0x45, 0x68, 0x40,
-	0x78, 0x00, 0x24, 0x90, 0x42,
-	0x00, 0x00, 0xA0, 0x00, 0x80, 0x1A, 0xD1, 0x01,
-	0x2A, 0x0E, 0xD0, 0x02, 0x2A, 0x11, 0xD0, 0x04,
-	0x2A, 0x14, 0xD1, 0x07, 0x20, 0x04, 0xF0, 0xAA,
-	0xFB, 0x06, 0x46, 0x05, 0x20, 0x04, 0xF0, 0xA6,
-	0xFB, 0x00, 0x04, 0x30, 0x18, 0x28, 0x60, 0x0F,
-	0xE0, 0x05, 0x20, 0x04, 0xF0, 0x8E, 0xFB, 0x28,
-	0x70, 0x0A, 0xE0, 0x05, 0x20, 0x04, 0xF0, 0x9A,
-	0xFB, 0x28, 0x80, 0x05, 0xE0, 0x01, 0x24, 0x03,
-	0xE0, 0x49, 0x1C, 0xC9, 0xB2, 0x09, 0x29, 0xD3,
-	0xD9, 0xFF, 0xF7, 0x53, 0xFF, 0x00, 0x2C, 0x04,
-	0xD0, 0x00, 0x21, 0x04, 0x20, 0x04, 0xF0, 0x75,
-	0xFB, 0x70, 0xBD, 0xD0, 0x48, 0xD0, 0x49, 0x00,
-	0x68, 0x09, 0x78, 0x00, 0x22, 0x40, 0x18, 0xCF,
-	0x49, 0x20, 0x38, 0x40, 0x7F, 0x8A, 0x5E, 0xCE,
-	0x49, 0x80, 0x18, 0x48, 0x60, 0xCD, 0x4A, 0x91,
-	0x7A, 0xD0, 0x79, 0x01, 0x29, 0x01, 0xD1, 0x90,
-	0x79, 0x02, 0xE0, 0x03, 0x29,
-	0x00, 0x00, 0xA1, 0x00, 0x80, 0x00, 0xD1, 0x90,
-	0x8A, 0xC9, 0x49, 0x09, 0x68, 0x88, 0x42, 0xE3,
-	0xD0, 0x80, 0xB2, 0x00, 0xF0, 0x73, 0xFD, 0x70,
-	0xBD, 0x70, 0xB5, 0x02, 0x20, 0x04, 0xF0, 0x55,
-	0xFB, 0x04, 0x46, 0x40, 0x06, 0x58, 0xD4, 0x01,
-	0xE0, 0x00, 0xF0, 0xBC, 0xFD, 0x04, 0xF0, 0x67,
-	0xFB, 0x00, 0x28, 0xF9, 0xD1, 0xA0, 0x06, 0x80,
-	0x0E, 0x03, 0x28, 0x2A, 0xD0, 0x06, 0xDC, 0x00,
-	0x28, 0x3A, 0xD0, 0x02, 0x28, 0x36, 0xD1, 0x00,
-	0xF0, 0x09, 0xF9, 0x35, 0xE0, 0x05, 0x28, 0x23,
-	0xD0, 0x25, 0x28, 0x2F, 0xD1, 0x02, 0xF0, 0x18,
-	0xF8, 0x01, 0x46, 0x03, 0x20, 0x04, 0xF0, 0x3B,
-	0xFB, 0x02, 0xF0, 0x15, 0xF8, 0x01, 0x46, 0x05,
-	0x20, 0x04, 0xF0, 0x2B, 0xFB, 0x02, 0xF0, 0x13,
-	0xF8, 0x01, 0x46, 0x06, 0x20, 0x04, 0xF0, 0x25,
-	0xFB, 0x02, 0xF0, 0x11, 0xF8, 0x01, 0x46, 0x07,
-	0x20, 0x04, 0xF0, 0x1F, 0xFB,
-	0x00, 0x00, 0xA2, 0x00, 0x80, 0x02, 0xF0, 0x14,
-	0xF8, 0x01, 0x46, 0x08, 0x20, 0x04, 0xF0, 0x19,
-	0xFB, 0x12, 0xE0, 0xFF, 0xF7, 0x61, 0xFF, 0x0F,
-	0xE0, 0xA6, 0x49, 0xA7, 0x48, 0x04, 0xF0, 0x66,
-	0xFC, 0x05, 0x46, 0x00, 0x21, 0x03, 0x20, 0x04,
-	0xF0, 0x0C, 0xFB, 0x29, 0x46, 0x04, 0x20, 0x04,
-	0xF0, 0x12, 0xFB, 0x01, 0xE0, 0xA4, 0x09, 0xA4,
-	0x01, 0xA0, 0x48, 0x80, 0x22, 0x01, 0x78, 0x51,
-	0x40, 0x01, 0x70, 0xC8, 0xB2, 0xC1, 0x09, 0xC9,
-	0x01, 0x21, 0x43, 0x40, 0x20, 0x01, 0x43, 0x02,
-	0x20, 0x04, 0xF0, 0xF7, 0xFA, 0x01, 0x20, 0x70,
-	0xBD, 0x00, 0x20, 0x70, 0xBD, 0x70, 0xB5, 0x98,
-	0x4D, 0x98, 0x4C, 0x28, 0x78, 0x80, 0x07, 0x15,
-	0xD5, 0x20, 0x78, 0x00, 0x28, 0x01, 0xD0, 0x03,
-	0xF0, 0x38, 0xF9, 0x00, 0xF0, 0x6F, 0xFD, 0x28,
-	0x78, 0xFD, 0x21, 0x08, 0x40, 0x28, 0x70, 0xC1,
-	0xB2, 0x00, 0x20, 0x04, 0xF0,
-	0x00, 0x00, 0xA3, 0x00, 0x80, 0xDE, 0xFA, 0x20,
-	0x78, 0x00, 0x28, 0x01, 0xD0, 0x03, 0xF0, 0xCC,
-	0xF8, 0xFF, 0xF7, 0xD5, 0xFA, 0x8C, 0x4D, 0x28,
-	0x78, 0xC0, 0x07, 0x01, 0xD0, 0x04, 0xF0, 0xBC,
-	0xFA, 0x28, 0x78, 0x00, 0x28, 0x03, 0xD1, 0x00,
-	0xF0, 0x51, 0xF9, 0x04, 0xF0, 0x07, 0xFA, 0x20,
-	0x78, 0x7E, 0x4E, 0x00, 0x28, 0x04, 0xD0, 0x30,
-	0x78, 0x00, 0x28, 0x01, 0xD1, 0x00, 0xF0, 0xC2,
-	0xF8, 0xFF, 0xF7, 0x6A, 0xFF, 0x00, 0x28, 0x01,
-	0xD0, 0x01, 0x20, 0xB0, 0x73, 0x28, 0x78, 0x00,
-	0x07, 0x01, 0xD5, 0x04, 0xF0, 0xA1, 0xFA, 0xB0,
-	0x7B, 0x00, 0x28, 0x04, 0xD0, 0x28, 0x78, 0x00,
-	0x28, 0x01, 0xD1, 0x00, 0xF0, 0xFB, 0xF8, 0x04,
-	0xF0, 0xE2, 0xFA, 0x78, 0x49, 0x08, 0x69, 0x04,
-	0x22, 0x90, 0x43, 0x08, 0x61, 0x76, 0x48, 0x81,
-	0x68, 0x89, 0x07, 0xFC, 0xD5, 0x20, 0x78, 0x00,
-	0x28, 0x24, 0xD0, 0x72, 0xB6,
-	0x00, 0x00, 0xA4, 0x00, 0x80, 0x00, 0xF0, 0x46,
-	0xFC, 0x03, 0xF0, 0xF2, 0xF8, 0x84, 0xB2, 0xE0,
-	0x07, 0x05, 0xD1, 0x62, 0xB6, 0x6F, 0x48, 0x80,
-	0x6A, 0x00, 0x28, 0x0F, 0xD0, 0x06, 0xE0, 0xBF,
-	0xF3, 0x50, 0x8F, 0xBF, 0xF3, 0x60, 0x8F, 0x30,
-	0xBF, 0x62, 0xB6, 0xEA, 0xE7, 0x72, 0xB6, 0x00,
-	0xF0, 0x31, 0xFC, 0x07, 0xF0, 0x0E, 0xFA, 0xC0,
-	0x07, 0x30, 0xD1, 0x62, 0xB6, 0x28, 0x78, 0x80,
-	0x07, 0x01, 0xD5, 0x04, 0xF0, 0x69, 0xFA, 0x20,
-	0x46, 0xFF, 0xF7, 0x17, 0xFC, 0xB0, 0x73, 0x04,
-	0xF0, 0xC6, 0xFA, 0x58, 0x48, 0x20, 0x30, 0x00,
-	0x78, 0x7D, 0x21, 0xC9, 0x00, 0x48, 0x43, 0x00,
-	0xF0, 0x88, 0xFD, 0x00, 0x28, 0x04, 0xD0, 0x28,
-	0x78, 0x40, 0x07, 0x01, 0xD5, 0x04, 0xF0, 0x54,
-	0xFA, 0xFF, 0xF7, 0xD6, 0xFA, 0x04, 0x46, 0x28,
-	0x78, 0xC0, 0x09, 0x01, 0xD0, 0x04, 0xF0, 0x4C,
-	0xFA, 0x00, 0x2C, 0x01, 0xD0,
-	0x00, 0x00, 0xA5, 0x00, 0x80, 0x00, 0xF0, 0xA2,
-	0xFC, 0xF0, 0x7A, 0xB1, 0x7A, 0x88, 0x42, 0x04,
-	0xD0, 0xF0, 0x8A, 0x00, 0xF0, 0x73, 0xFC, 0xB0,
-	0x7A, 0xF0, 0x72, 0x70, 0xBD, 0xBF, 0xF3, 0x50,
-	0x8F, 0xBF, 0xF3, 0x60, 0x8F, 0x30, 0xBF, 0x62,
-	0xB6, 0xC0, 0xE7, 0x70, 0x47, 0x3F, 0x48, 0x02,
-	0x21, 0x81, 0x72, 0xC1, 0x79, 0xC1, 0x82, 0x70,
-	0x47, 0x3C, 0x48, 0x01, 0x21, 0x81, 0x72, 0x81,
-	0x79, 0xC1, 0x82, 0x70, 0x47, 0x44, 0x4A, 0x12,
-	0x68, 0x10, 0x18, 0x01, 0x70, 0x70, 0x47, 0x42,
-	0x4A, 0x12, 0x68, 0x10, 0x18, 0x0A, 0x0A, 0x02,
-	0x70, 0x41, 0x70, 0x70, 0x47, 0x70, 0xB5, 0x03,
-	0x20, 0x04, 0xF0, 0x33, 0xFA, 0x01, 0x23, 0x2C,
-	0x4A, 0x00, 0x21, 0xCC, 0x00, 0x14, 0x5D, 0x84,
-	0x42, 0x1D, 0xD1, 0xC8, 0x00, 0x80, 0x18, 0x45,
-	0x78, 0x44, 0x68, 0x29, 0x46, 0x04, 0x20, 0x04,
-	0xF0, 0x20, 0xFA, 0x01, 0x2D,
-	0x00, 0x00, 0xA6, 0x00, 0x80, 0x0D, 0xD0, 0x02,
-	0x2D, 0x0E, 0xD0, 0x04, 0x2D, 0x15, 0xD1, 0x24,
-	0x68, 0x05, 0x20, 0x21, 0x0C, 0x04, 0xF0, 0x1F,
-	0xFA, 0xA1, 0xB2, 0x07, 0x20, 0x04, 0xF0, 0x1B,
-	0xFA, 0x70, 0xBD, 0x21, 0x78, 0x05, 0x20, 0x0A,
-	0xE0, 0x21, 0x88, 0x05, 0x20, 0xF6, 0xE7, 0x49,
-	0x1C, 0xC9, 0xB2, 0x09, 0x29, 0xD9, 0xD9, 0x00,
-	0x2B, 0xF2, 0xD0, 0x00, 0x21, 0x04, 0x20, 0x04,
-	0xF0, 0x00, 0xFA, 0x70, 0xBD, 0x70, 0xB5, 0x24,
-	0x48, 0x62, 0x26, 0x05, 0x68, 0x17, 0x48, 0x01,
-	0x79, 0x00, 0x29, 0x00, 0xD0, 0xF8, 0x26, 0x01,
-	0x7B, 0x20, 0x20, 0x01, 0x43, 0x0A, 0x20, 0x04,
-	0xF0, 0xF0, 0xF9, 0x01, 0xE0, 0x00, 0xF0, 0x5E,
-	0xFC, 0x04, 0xF0, 0x09, 0xFA, 0x00, 0x28, 0xF9,
-	0xD1, 0x0B, 0x24, 0x0B, 0x36, 0x05, 0xE0, 0x29,
-	0x5D, 0x20, 0x46, 0x04, 0xF0, 0xE2, 0xF9, 0x64,
-	0x1C, 0xA4, 0xB2, 0xB4, 0x42,
-	0x00, 0x00, 0xA7, 0x00, 0x80, 0xF7, 0xD3, 0x69,
-	0x7A, 0x09, 0x20, 0x04, 0xF0, 0xDA, 0xF9, 0xA9,
-	0x7A, 0x0A, 0x20, 0x04, 0xF0, 0xD6, 0xF9, 0x70,
-	0xBD, 0xCC, 0xCC, 0x00, 0x00, 0x68, 0x01, 0x00,
-	0x20, 0x64, 0x01, 0x00, 0x20, 0x66, 0x01, 0x00,
-	0x20, 0x00, 0xFF, 0x01, 0x40, 0xD0, 0x00, 0x00,
-	0x20, 0x60, 0x01, 0x00, 0x20, 0x00, 0xDC, 0x00,
-	0x00, 0xFC, 0x05, 0x00, 0x00, 0x3E, 0x01, 0x00,
-	0x20, 0x40, 0x01, 0x00, 0x20, 0x2A, 0x01, 0x00,
-	0x20, 0x3F, 0x01, 0x00, 0x20, 0x00, 0xED, 0x00,
-	0xE0, 0x00, 0x00, 0x12, 0x40, 0x88, 0xDF, 0x00,
-	0x00, 0x80, 0x02, 0x00, 0x20, 0x70, 0xB5, 0x04,
-	0xF0, 0xED, 0xF8, 0x00, 0x20, 0x04, 0xF0, 0xB1,
-	0xF9, 0xC0, 0x09, 0xC0, 0x01, 0xFF, 0x4E, 0x70,
-	0x70, 0x00, 0x20, 0x30, 0x70, 0xFE, 0x4C, 0x60,
-	0x7F, 0x80, 0x07, 0x80, 0x0F, 0x01, 0x28, 0x1A,
-	0xD0, 0x02, 0x28, 0x1D, 0xD1,
-	0x00, 0x00, 0xA8, 0x00, 0x80, 0x04, 0xF0, 0x7F,
-	0xF9, 0x30, 0x24, 0x0B, 0x25, 0x00, 0xF0, 0x0A,
-	0xFC, 0x00, 0x20, 0x04, 0xF0, 0x9A, 0xF9, 0x01,
-	0x46, 0xF2, 0x78, 0x21, 0x40, 0x91, 0x42, 0x07,
-	0xD1, 0x01, 0x46, 0x29, 0x42, 0x04, 0xD1, 0xC0,
-	0x09, 0x71, 0x78, 0xC0, 0x01, 0x88, 0x42, 0xED,
-	0xD0, 0x04, 0xF0, 0xC4, 0xF8, 0x70, 0xBD, 0x01,
-	0x20, 0x30, 0x70, 0x00, 0xF0, 0x2B, 0xFB, 0xF0,
-	0x60, 0x04, 0xF0, 0x61, 0xF9, 0x20, 0x7F, 0x00,
-	0xF0, 0xA3, 0xFC, 0xF1, 0xE7, 0xF8, 0xB5, 0xE7,
-	0x4C, 0x20, 0x78, 0x00, 0x28, 0x20, 0xD0, 0xE6,
-	0x48, 0xC1, 0x7F, 0x80, 0x7F, 0x0D, 0x02, 0x05,
-	0x43, 0x30, 0x26, 0x0B, 0x27, 0x00, 0xF0, 0xDE,
-	0xFB, 0x00, 0x20, 0x04, 0xF0, 0x6E, 0xF9, 0x01,
-	0x46, 0xE2, 0x78, 0x31, 0x40, 0x91, 0x42, 0x0D,
-	0xD1, 0x01, 0x46, 0x39, 0x42, 0x0A, 0xD1, 0xC0,
-	0x09, 0x61, 0x78, 0xC0, 0x01,
-	0x00, 0x00, 0xA9, 0x00, 0x80, 0x88, 0x42, 0x05,
-	0xD1, 0x00, 0xF0, 0x04, 0xFB, 0xE1, 0x68, 0x40,
-	0x1A, 0xA8, 0x42, 0xE7, 0xD9, 0x00, 0x20, 0x20,
-	0x70, 0xF8, 0xBD, 0x10, 0xB5, 0x04, 0xF0, 0x2C,
-	0xF8, 0xD4, 0x4B, 0x00, 0x21, 0xD3, 0x4A, 0x5C,
-	0x33, 0x8C, 0x00, 0x04, 0x59, 0x10, 0xC2, 0x49,
-	0x1C, 0x89, 0xB2, 0x9A, 0x42, 0xF8, 0xD3, 0xCF,
-	0x4A, 0xCE, 0x4B, 0x64, 0x32, 0xE8, 0x33, 0x8C,
-	0x00, 0x04, 0x59, 0x10, 0xC2, 0x49, 0x1C, 0x89,
-	0xB2, 0x9A, 0x42, 0xF8, 0xD9, 0x8A, 0x00, 0xCA,
-	0x4B, 0x82, 0x58, 0xDA, 0x60, 0x49, 0x1C, 0x89,
-	0xB2, 0x8A, 0x00, 0x83, 0x58, 0xC7, 0x4A, 0x53,
-	0x60, 0x49, 0x1C, 0x09, 0x04, 0x89, 0x0B, 0x40,
-	0x58, 0xD0, 0x60, 0x10, 0xBD, 0xF8, 0xB5, 0x82,
-	0x00, 0x0C, 0x46, 0xC3, 0x48, 0x00, 0x27, 0x1C,
-	0x21, 0x15, 0x18, 0x29, 0x60, 0xC0, 0x4A, 0xA0,
-	0x00, 0x86, 0x18, 0xFF, 0x2C,
-	0x00, 0x00, 0xAA, 0x00, 0x80, 0x00, 0xD0, 0x31,
-	0x60, 0x0A, 0x20, 0xFE, 0xF7, 0x51, 0xF8, 0x10,
-	0x20, 0x28, 0x60, 0x23, 0x20, 0xFE, 0xF7, 0x4C,
-	0xF8, 0xB6, 0x48, 0x01, 0x68, 0x02, 0x03, 0x11,
-	0x43, 0x01, 0x60, 0xC1, 0x68, 0x09, 0x06, 0xFC,
-	0xD5, 0x80, 0x21, 0xC1, 0x60, 0x00, 0x20, 0x28,
-	0x60, 0xFF, 0x2C, 0x00, 0xD0, 0x30, 0x60, 0xAF,
-	0x48, 0xC0, 0x30, 0xC0, 0x68, 0xAB, 0x49, 0xFF,
-	0x38, 0x06, 0x22, 0xFF, 0x38, 0x8A, 0x5E, 0x02,
-	0x38, 0x50, 0x43, 0x00, 0x28, 0x00, 0xDA, 0x40,
-	0x42, 0x09, 0x69, 0x88, 0x42, 0x00, 0xD9, 0x01,
-	0x27, 0x38, 0x46, 0xF8, 0xBD, 0x70, 0xB5, 0x03,
-	0xF0, 0xCB, 0xFF, 0xA2, 0x4C, 0xA7, 0x4A, 0x21,
-	0x89, 0x00, 0x20, 0x43, 0x00, 0xD3, 0x5A, 0x8B,
-	0x42, 0x03, 0xD8, 0x40, 0x1C, 0xC0, 0xB2, 0x20,
-	0x28, 0xF7, 0xD3, 0x20, 0x28, 0x01, 0xD1, 0x1F,
-	0x20, 0x01, 0xE0, 0x00, 0x28,
-	0x00, 0x00, 0xAB, 0x00, 0x80, 0x0C, 0xD0, 0x43,
-	0x00, 0x9D, 0x18, 0x20, 0x3D, 0xED, 0x8B, 0xD3,
-	0x5A, 0x4D, 0x1B, 0x59, 0x1A, 0xAD, 0xB2, 0x89,
-	0xB2, 0x8D, 0x42, 0x01, 0xD2, 0x40, 0x1E, 0xC0,
-	0xB2, 0x41, 0x00, 0x51, 0x5A, 0x21, 0x81, 0x53,
-	0x21, 0x93, 0x4A, 0x49, 0x06, 0xD1, 0x60, 0x91,
-	0x4D, 0x95, 0x49, 0x69, 0x61, 0x8F, 0x4A, 0x95,
-	0x49, 0x40, 0x32, 0x51, 0x62, 0x01, 0x04, 0x94,
-	0x48, 0x01, 0x43, 0x8C, 0x48, 0x80, 0x30, 0x81,
-	0x63, 0x92, 0x49, 0xC1, 0x60, 0xC1, 0x6B, 0x89,
-	0x09, 0x89, 0x01, 0xC1, 0x63, 0x87, 0x4E, 0x90,
-	0x48, 0xC0, 0x36, 0x70, 0x60, 0x03, 0x20, 0xB0,
-	0x60, 0x8E, 0x48, 0x30, 0x61, 0x8E, 0x48, 0x30,
-	0x62, 0x00, 0x21, 0xB1, 0x61, 0x29, 0x61, 0x8D,
-	0x48, 0x28, 0x60, 0x28, 0x68, 0x40, 0x00, 0xFC,
-	0xD4, 0x01, 0x22, 0x80, 0x48, 0xD2, 0x07, 0x42,
-	0x60, 0x89, 0x4A, 0xC2, 0x60,
-	0x00, 0x00, 0xAC, 0x00, 0x80, 0x7E, 0x4B, 0x00,
-	0x20, 0x82, 0x00, 0xD2, 0x18, 0x11, 0x60, 0x40,
-	0x1C, 0xC0, 0xB2, 0x41, 0x28, 0xF8, 0xD3, 0x28,
-	0x69, 0x80, 0x21, 0x88, 0x43, 0x28, 0x61, 0x70,
-	0x68, 0x78, 0x49, 0x00, 0x07, 0xC0, 0x0E, 0x40,
-	0x31, 0x08, 0x5E, 0x21, 0x89, 0x07, 0xF0, 0xF5,
-	0xF9, 0xE0, 0x80, 0x70, 0xBD, 0x70, 0xB5, 0x03,
-	0xF0, 0x5F, 0xFF, 0x6E, 0x4B, 0x00, 0x21, 0x6D,
-	0x4A, 0x5C, 0x33, 0x10, 0xCA, 0x8D, 0x00, 0x49,
-	0x1C, 0x44, 0x51, 0x89, 0xB2, 0x9A, 0x42, 0xF8,
-	0xD3, 0x68, 0x4A, 0x68, 0x4B, 0x64, 0x32, 0xE8,
-	0x33, 0x10, 0xCA, 0x8D, 0x00, 0x49, 0x1C, 0x44,
-	0x51, 0x89, 0xB2, 0x9A, 0x42, 0xF8, 0xD9, 0x64,
-	0x4A, 0xD2, 0x68, 0x8B, 0x00, 0xC2, 0x50, 0x63,
-	0x4A, 0x49, 0x1C, 0x53, 0x68, 0x89, 0xB2, 0x8C,
-	0x00, 0x03, 0x51, 0x49, 0x1C, 0xD2, 0x68, 0x09,
-	0x04, 0x89, 0x0B, 0x42, 0x50,
-	0x00, 0x00, 0xAD, 0x00, 0x80, 0x70, 0xBD, 0xF0,
-	0xB5, 0x85, 0xB0, 0x00, 0x20, 0x02, 0x90, 0x58,
-	0x48, 0x20, 0x30, 0xC1, 0x79, 0x83, 0x79, 0x0A,
-	0x02, 0x54, 0x49, 0x1A, 0x43, 0x0A, 0x81, 0x42,
-	0x79, 0x03, 0x79, 0x10, 0x02, 0x18, 0x43, 0x08,
-	0x61, 0xFF, 0xF7, 0xC4, 0xFF, 0xFF, 0xF7, 0x56,
-	0xFF, 0x00, 0x20, 0x01, 0x46, 0x5D, 0x4A, 0x11,
-	0x54, 0x40, 0x1C, 0xC0, 0xB2, 0x09, 0x28, 0xF9,
-	0xD3, 0x00, 0x25, 0x68, 0x1C, 0xC4, 0xB2, 0x03,
-	0x90, 0x28, 0xE0, 0xEE, 0x08, 0xE7, 0x08, 0x6A,
-	0x07, 0x01, 0x21, 0x52, 0x0F, 0x08, 0x46, 0x90,
-	0x40, 0xC2, 0xB2, 0x60, 0x07, 0x40, 0x0F, 0x81,
-	0x40, 0xC8, 0xB2, 0x53, 0x49, 0x01, 0x92, 0x00,
-	0x90, 0x88, 0x5D, 0x10, 0x42, 0x14, 0xD0, 0xC8,
-	0x5D, 0x00, 0x99, 0x08, 0x42, 0x10, 0xD0, 0x21,
-	0x46, 0x28, 0x46, 0xFF, 0xF7, 0xF7, 0xFE, 0x00,
-	0x28, 0x0A, 0xD0, 0x4A, 0x48,
-	0x00, 0x00, 0xAE, 0x00, 0x80, 0x01, 0x9A, 0x81,
-	0x5D, 0x11, 0x43, 0x81, 0x55, 0xC1, 0x5D, 0x00,
-	0x9A, 0x11, 0x43, 0xC1, 0x55, 0x01, 0x20, 0x02,
-	0x90, 0x64, 0x1C, 0xE4, 0xB2, 0x41, 0x2C, 0xD4,
-	0xD3, 0x00, 0xF0, 0x80, 0xFA, 0x03, 0x98, 0xC5,
-	0xB2, 0x41, 0x2D, 0xCA, 0xD3, 0xFF, 0xF7, 0xB5,
-	0xFE, 0x02, 0x98, 0x05, 0xB0, 0xF0, 0xBD, 0xF8,
-	0xB5, 0x2D, 0x48, 0x00, 0x26, 0x20, 0x30, 0x41,
-	0x7A, 0x03, 0x7A, 0x0A, 0x02, 0x29, 0x49, 0x1A,
-	0x43, 0x0A, 0x81, 0x42, 0x79, 0x03, 0x79, 0x10,
-	0x02, 0x18, 0x43, 0x08, 0x61, 0xFF, 0xF7, 0x6E,
-	0xFF, 0xFF, 0xF7, 0x00, 0xFF, 0x00, 0x20, 0x33,
-	0x49, 0x02, 0x46, 0x0A, 0x54, 0x40, 0x1C, 0xC0,
-	0xB2, 0x09, 0x28, 0xFA, 0xD3, 0x00, 0x24, 0xE5,
-	0x08, 0x61, 0x07, 0x49, 0x0F, 0x01, 0x20, 0x88,
-	0x40, 0xC7, 0xB2, 0x2D, 0x48, 0x40, 0x5D, 0x38,
-	0x42, 0x0A, 0xD0, 0xFF, 0x21,
-	0x00, 0x00, 0xAF, 0x00, 0x80, 0x20, 0x46, 0xFF,
-	0xF7, 0xB1, 0xFE, 0x00, 0x28, 0x04, 0xD0, 0x27,
-	0x48, 0x41, 0x5D, 0x39, 0x43, 0x41, 0x55, 0x01,
-	0x26, 0x64, 0x1C, 0xE4, 0xB2, 0x41, 0x2C, 0xE6,
-	0xD3, 0xFF, 0xF7, 0x7B, 0xFE, 0x30, 0x46, 0xF8,
-	0xBD, 0xF8, 0xB5, 0x09, 0x21, 0x20, 0x48, 0x07,
-	0xF0, 0x16, 0xF9, 0x00, 0x20, 0x1E, 0x4C, 0x1F,
-	0x4F, 0x1F, 0x4E, 0x0A, 0xE0, 0x3A, 0x5C, 0xD1,
-	0x08, 0x55, 0x07, 0x6D, 0x0F, 0x63, 0x5C, 0x01,
-	0x22, 0xAA, 0x40, 0x13, 0x43, 0x40, 0x1C, 0x63,
-	0x54, 0xC0, 0xB2, 0x31, 0x6A, 0x81, 0x42, 0xF1,
-	0xD8, 0x15, 0x48, 0xFF, 0xF7, 0xAC, 0xFF, 0x13,
-	0x4D, 0x06, 0x46, 0x00, 0x21, 0x68, 0x5C, 0x6A,
-	0x18, 0x50, 0x72, 0x27, 0xE0, 0x28, 0x01, 0x00,
-	0x20, 0x00, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x11,
-	0x40, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x03,
-	0x40, 0x00, 0x04, 0x11, 0x40,
-	0x00, 0x00, 0xB0, 0x00, 0x80, 0x1C, 0xCD, 0x00,
-	0x00, 0xFF, 0x01, 0x3A, 0xC0, 0x3A, 0xA0, 0x00,
-	0xF0, 0x40, 0x03, 0x00, 0x40, 0x01, 0x00, 0x03,
-	0xC0, 0x72, 0x40, 0x00, 0x80, 0x10, 0x0D, 0xCA,
-	0x98, 0x00, 0x02, 0x00, 0x80, 0x00, 0x03, 0x00,
-	0xC0, 0x51, 0x08, 0x00, 0x00, 0x0F, 0x04, 0x00,
-	0x20, 0x06, 0x04, 0x00, 0x20, 0xC0, 0xE0, 0x00,
-	0x00, 0x88, 0xDF, 0x00, 0x00, 0x49, 0x1C, 0xC9,
-	0xB2, 0x09, 0x29, 0xCF, 0xD3, 0x7B, 0x48, 0xFF,
-	0xF7, 0x1E, 0xFF, 0x30, 0x43, 0x01, 0x46, 0x00,
-	0x20, 0x2A, 0x5C, 0x2B, 0x18, 0x9A, 0x74, 0x22,
-	0x5C, 0x2A, 0x54, 0x40, 0x1C, 0xC0, 0xB2, 0x09,
-	0x28, 0xF6, 0xD3, 0x08, 0x46, 0xF8, 0xBD, 0x10,
-	0xB5, 0x73, 0x48, 0x74, 0x4A, 0x01, 0x88, 0x10,
-	0x46, 0x8B, 0x05, 0x80, 0x30, 0x00, 0x2B, 0x12,
-	0xDB, 0xC3, 0x1D, 0xF9, 0x33, 0x1B, 0x69, 0x00,
-	0x2B, 0x25, 0xD1, 0x53, 0x68,
-	0x00, 0x00, 0xB1, 0x00, 0x80, 0x9B, 0x06, 0x22,
-	0xD1, 0x93, 0x6D, 0x9B, 0x06, 0x1F, 0xD1, 0xC3,
-	0x6A, 0x9B, 0x06, 0x1C, 0xD1, 0x13, 0x46, 0xC0,
-	0x33, 0xDB, 0x6B, 0x9B, 0x06, 0x17, 0xD1, 0xC9,
-	0x05, 0x17, 0xD4, 0xD3, 0x68, 0xF0, 0x21, 0x0B,
-	0x40, 0x40, 0x2B, 0x10, 0xD8, 0x12, 0x6E, 0x0A,
-	0x40, 0x40, 0x2A, 0x0C, 0xD8, 0x40, 0x6B, 0x08,
-	0x40, 0x40, 0x28, 0x08, 0xD8, 0x60, 0x48, 0x40,
-	0x68, 0x08, 0x40, 0x40, 0x28, 0x03, 0xD8, 0xFB,
-	0xF7, 0x2C, 0xFE, 0x04, 0x28, 0x01, 0xD9, 0x01,
-	0x20, 0x10, 0xBD, 0x00, 0x20, 0x10, 0xBD, 0x10,
-	0xB5, 0x5A, 0x49, 0x5B, 0x48, 0x04, 0xF0, 0x86,
-	0xF8, 0x5A, 0x49, 0x09, 0x88, 0x88, 0x42, 0x01,
-	0xD0, 0x01, 0x20, 0x10, 0xBD, 0x00, 0x20, 0x10,
-	0xBD, 0x10, 0xB5, 0x57, 0x48, 0x00, 0x24, 0x01,
-	0x68, 0xEF, 0x22, 0x11, 0x40, 0x01, 0x29, 0x00,
-	0xD1, 0x01, 0x24, 0xFF, 0x21,
-	0x00, 0x00, 0xB2, 0x00, 0x80, 0x01, 0x60, 0x04,
-	0xF0, 0x8F, 0xF8, 0xFF, 0xF7, 0xE4, 0xFF, 0x00,
-	0x28, 0x11, 0xD1, 0x02, 0x20, 0x04, 0x43, 0xFF,
-	0xF7, 0xA6, 0xFF, 0x00, 0x28, 0x0B, 0xD1, 0x01,
-	0x20, 0x40, 0x02, 0x04, 0x43, 0xFF, 0xF7, 0x40,
-	0xFF, 0x00, 0x28, 0x04, 0xD1, 0xFF, 0x21, 0x20,
-	0x46, 0x05, 0x31, 0x08, 0x43, 0x10, 0xBD, 0x20,
-	0x46, 0x10, 0xBD, 0xF0, 0xB5, 0x16, 0x26, 0x0F,
-	0x46, 0x05, 0x46, 0x77, 0x43, 0x00, 0x20, 0xCE,
-	0x00, 0x89, 0x19, 0x04, 0x46, 0x49, 0x19, 0x41,
-	0x4D, 0xED, 0x5B, 0x01, 0x26, 0xA6, 0x40, 0x35,
-	0x42, 0x07, 0xD0, 0x0D, 0x19, 0x2D, 0x7B, 0xAA,
-	0x42, 0x01, 0xD3, 0xAB, 0x42, 0x01, 0xD9, 0x40,
-	0x1C, 0x80, 0xB2, 0x64, 0x1C, 0x08, 0x2C, 0xEE,
-	0xD3, 0xF0, 0xBD, 0xF8, 0xB5, 0x0D, 0x46, 0x00,
-	0x26, 0x03, 0xF0, 0xBE, 0xFD, 0x01, 0x21, 0x89,
-	0x02, 0x00, 0x90, 0x07, 0xF0,
-	0x00, 0x00, 0xB3, 0x00, 0x80, 0x2C, 0xF8, 0x35,
-	0x49, 0x33, 0x48, 0x08, 0x60, 0x00, 0x2D, 0x01,
-	0xD0, 0x01, 0x23, 0x00, 0xE0, 0x00, 0x23, 0x2B,
-	0x4C, 0x20, 0x34, 0x61, 0x7C, 0x20, 0x7C, 0x00,
-	0x9A, 0x06, 0xF0, 0x3A, 0xFC, 0x00, 0x2D, 0x01,
-	0xD0, 0x01, 0x23, 0x00, 0xE0, 0x00, 0x23, 0xE1,
-	0x7B, 0xA0, 0x7B, 0x00, 0x9A, 0x06, 0xF0, 0x02,
-	0xFB, 0x21, 0x4F, 0x00, 0x25, 0x40, 0x37, 0x08,
-	0xE0, 0xA3, 0x7A, 0xE2, 0x7A, 0x29, 0x46, 0x00,
-	0x98, 0xFF, 0xF7, 0xB7, 0xFF, 0x80, 0x19, 0x86,
-	0xB2, 0x6D, 0x1C, 0xF8, 0x6A, 0xA8, 0x42, 0xF3,
-	0xD8, 0xF8, 0x6A, 0xB9, 0x6B, 0x40, 0x18, 0xF9,
-	0x6B, 0x23, 0x7B, 0x41, 0x18, 0x62, 0x7B, 0x00,
-	0x98, 0xFF, 0xF7, 0xA7, 0xFF, 0x80, 0x19, 0xC0,
-	0xB2, 0xF8, 0xBD, 0x70, 0xB5, 0x04, 0x46, 0x13,
-	0x49, 0x13, 0x48, 0x03, 0xF0, 0xF7, 0xFF, 0x01,
-	0x46, 0x05, 0x20, 0x03, 0xF0,
-	0x00, 0x00, 0xB4, 0x00, 0x80, 0xA8, 0xFE, 0x11,
-	0x48, 0x01, 0x88, 0x07, 0x20, 0x03, 0xF0, 0xA3,
-	0xFE, 0x13, 0x4D, 0xA8, 0x78, 0x00, 0x28, 0x09,
-	0xD0, 0x20, 0x46, 0xFF, 0xF7, 0x8C, 0xFE, 0x20,
-	0x46, 0xFF, 0xF7, 0x31, 0xFE, 0x00, 0x21, 0x20,
-	0x46, 0xFF, 0xF7, 0xA3, 0xFF, 0xA8, 0x88, 0xC0,
-	0xB2, 0x70, 0xBD, 0x00, 0x00, 0x06, 0x04, 0x00,
-	0x20, 0x98, 0x02, 0x00, 0x20, 0x48, 0xDE, 0x00,
-	0x00, 0x48, 0xDF, 0x00, 0x00, 0x00, 0xDC, 0x00,
-	0x00, 0xFC, 0x05, 0x00, 0x00, 0xFC, 0xE1, 0x00,
-	0x00, 0x00, 0x00, 0x02, 0x40, 0x2C, 0xE1, 0x00,
-	0x00, 0x80, 0xE2, 0x00, 0x00, 0x3C, 0x03, 0x00,
-	0x20, 0x28, 0x01, 0x00, 0x20, 0x70, 0xB5, 0xDF,
-	0x4C, 0x25, 0x69, 0x61, 0x69, 0x40, 0x1B, 0x00,
-	0x02, 0x0E, 0x46, 0x06, 0xF0, 0xC8, 0xFF, 0xFF,
-	0x28, 0x09, 0xD9, 0x01, 0x0A, 0x0A, 0x46, 0x72,
-	0x43, 0x52, 0x19, 0x22, 0x61,
-	0x00, 0x00, 0xB5, 0x00, 0x80, 0xE2, 0x68, 0x09,
-	0x02, 0x52, 0x18, 0x40, 0x1A, 0xE2, 0x60, 0xE1,
-	0x68, 0x08, 0x18, 0x70, 0xBD, 0xD4, 0x48, 0x40,
-	0x68, 0xE4, 0xE7, 0xF8, 0xB5, 0xD3, 0x4C, 0x21,
-	0x88, 0xD0, 0x4D, 0x28, 0x88, 0x06, 0x46, 0x06,
-	0xF0, 0xAE, 0xFF, 0x21, 0x88, 0x41, 0x43, 0xB1,
-	0x42, 0x00, 0xD2, 0x40, 0x1C, 0x03, 0x28, 0x00,
-	0xD2, 0x03, 0x20, 0x21, 0x88, 0x6A, 0x69, 0x51,
-	0x43, 0x09, 0x0A, 0xCB, 0x4A, 0x49, 0x1E, 0x91,
-	0x42, 0x00, 0xD9, 0x11, 0x46, 0x06, 0x04, 0x0E,
-	0x43, 0x03, 0xF0, 0x84, 0xFF, 0xC7, 0x4B, 0x05,
-	0x46, 0x19, 0x68, 0x03, 0x27, 0xBF, 0x03, 0x01,
-	0x20, 0xB9, 0x43, 0x80, 0x03, 0x08, 0x43, 0x18,
-	0x60, 0x01, 0x20, 0xC0, 0x03, 0x08, 0x43, 0x18,
-	0x60, 0xBD, 0x4C, 0x20, 0x69, 0xFF, 0x22, 0x02,
-	0x32, 0x90, 0x43, 0xBF, 0x4A, 0x10, 0x43, 0x20,
-	0x61, 0xBE, 0x48, 0x22, 0x69,
-	0x00, 0x00, 0xB6, 0x00, 0x80, 0x02, 0x42, 0xFC,
-	0xD1, 0xBD, 0x4A, 0x04, 0x20, 0x10, 0x60, 0xA6,
-	0x60, 0xBC, 0x48, 0xE0, 0x60, 0xBC, 0x48, 0x20,
-	0x61, 0x46, 0x00, 0x20, 0x69, 0x32, 0x46, 0x82,
-	0x43, 0xFB, 0xD1, 0x39, 0x43, 0x19, 0x60, 0xB9,
-	0x49, 0x02, 0x20, 0xFD, 0xF7, 0x53, 0xFD, 0x03,
-	0x21, 0x02, 0x20, 0xFD, 0xF7, 0x59, 0xFD, 0x02,
-	0x20, 0xFD, 0xF7, 0x66, 0xFD, 0xB4, 0x49, 0x20,
-	0x69, 0x08, 0x42, 0xFC, 0xD1, 0xB3, 0x49, 0x00,
-	0x20, 0x08, 0x70, 0xE8, 0xB2, 0x03, 0xF0, 0x4A,
-	0xFF, 0xF8, 0xBD, 0xA6, 0x49, 0x00, 0x28, 0x01,
-	0xD1, 0x01, 0x20, 0x05, 0xE0, 0x4B, 0x22, 0x12,
-	0x01, 0x90, 0x42, 0x01, 0xD9, 0x0A, 0x80, 0x00,
-	0xE0, 0x08, 0x80, 0x96, 0xE7, 0xA0, 0x49, 0x9D,
-	0x4A, 0x88, 0x42, 0x01, 0xD9, 0x11, 0x80, 0x00,
-	0xE0, 0x10, 0x80, 0x8E, 0xE7, 0x10, 0xB5, 0x04,
-	0x46, 0x40, 0x00, 0x20, 0x18,
-	0x00, 0x00, 0xB7, 0x00, 0x80, 0xC8, 0x28, 0x00,
-	0xD2, 0xC8, 0x20, 0xFF, 0xF7, 0xEF, 0xFF, 0x95,
-	0x49, 0x20, 0x46, 0x8C, 0x61, 0xFF, 0xF7, 0xDD,
-	0xFF, 0x10, 0xBD, 0x1C, 0xB5, 0x68, 0x46, 0x03,
-	0xF0, 0xA0, 0xFF, 0x00, 0x28, 0xFA, 0xD1, 0x6B,
-	0x46, 0x19, 0x79, 0x01, 0x20, 0x80, 0x07, 0x21,
-	0x29, 0x02, 0xD3, 0x99, 0x49, 0x49, 0x8A, 0xC1,
-	0x60, 0x01, 0x68, 0x49, 0x00, 0x49, 0x08, 0x01,
-	0x60, 0x96, 0x48, 0x01, 0x69, 0x04, 0x22, 0x11,
-	0x43, 0x01, 0x61, 0x1C, 0xBD, 0x10, 0xB5, 0x03,
-	0xF0, 0xDB, 0xFD, 0x03, 0xF0, 0x89, 0xFC, 0xFF,
-	0xF7, 0xE0, 0xFF, 0x72, 0xB6, 0x90, 0x48, 0x81,
-	0x68, 0x89, 0x07, 0xFC, 0xD5, 0x62, 0xB6, 0x72,
-	0xB6, 0x8A, 0x4C, 0x20, 0x78, 0x00, 0x28, 0x0B,
-	0xD1, 0x06, 0xE0, 0xBF, 0xF3, 0x50, 0x8F, 0xBF,
-	0xF3, 0x60, 0x8F, 0x30, 0xBF, 0x62, 0xB6, 0x72,
-	0xB6, 0x20, 0x78, 0x00, 0x28,
-	0x00, 0x00, 0xB8, 0x00, 0x80, 0xF5, 0xD0, 0x01,
-	0xE0, 0xFF, 0xF7, 0x47, 0xFF, 0x00, 0x20, 0x20,
-	0x70, 0x75, 0x48, 0x40, 0x68, 0x73, 0x49, 0x48,
-	0x60, 0x62, 0xB6, 0x03, 0xF0, 0x69, 0xFC, 0x03,
-	0xF0, 0xC7, 0xFD, 0x10, 0xBD, 0x70, 0xB5, 0x03,
-	0xF0, 0xD9, 0xFE, 0x72, 0x4A, 0x11, 0x68, 0x03,
-	0x23, 0x9B, 0x03, 0x01, 0x24, 0x99, 0x43, 0xA4,
-	0x03, 0x0C, 0x43, 0x14, 0x60, 0x01, 0x24, 0xE4,
-	0x03, 0x0C, 0x43, 0x14, 0x60, 0x68, 0x4D, 0x77,
-	0x4C, 0x2C, 0x61, 0x19, 0x43, 0x11, 0x60, 0x03,
-	0xF0, 0xC9, 0xFE, 0x70, 0xBD, 0x10, 0xB5, 0x72,
-	0xB6, 0x7D, 0x20, 0xC0, 0x00, 0xFF, 0xF7, 0x79,
-	0xFF, 0x00, 0xF0, 0xB1, 0xF8, 0x63, 0x4C, 0x06,
-	0x20, 0x60, 0x60, 0x00, 0xF0, 0xA5, 0xF8, 0x6E,
-	0x48, 0x40, 0x7F, 0x40, 0x06, 0x80, 0x0F, 0x01,
-	0xD1, 0x02, 0x20, 0x04, 0xE0, 0x01, 0x28, 0x01,
-	0xD1, 0x03, 0x20, 0x00, 0xE0,
-	0x00, 0x00, 0xB9, 0x00, 0x80, 0x01, 0x20, 0x03,
-	0xF0, 0xAB, 0xFD, 0xFF, 0xF7, 0x86, 0xFF, 0xBF,
-	0xF3, 0x50, 0x8F, 0xBF, 0xF3, 0x60, 0x8F, 0x30,
-	0xBF, 0x03, 0xF0, 0xE3, 0xFD, 0x00, 0xF0, 0x93,
-	0xF8, 0x62, 0x48, 0x60, 0x60, 0x00, 0xF0, 0x88,
-	0xF8, 0xFF, 0xF7, 0xBC, 0xFF, 0x62, 0xB6, 0x10,
-	0xBD, 0x70, 0xB5, 0x03, 0xF0, 0x93, 0xFE, 0x4F,
-	0x4C, 0x21, 0x68, 0x03, 0x25, 0xAD, 0x03, 0x01,
-	0x22, 0xA9, 0x43, 0x92, 0x03, 0x0A, 0x43, 0x22,
-	0x60, 0x01, 0x22, 0xD2, 0x03, 0x0A, 0x43, 0x22,
-	0x60, 0x56, 0x4A, 0x62, 0x60, 0x44, 0x4A, 0xD3,
-	0x68, 0x55, 0x4E, 0x33, 0x40, 0xD3, 0x60, 0x13,
-	0x69, 0x05, 0x26, 0x36, 0x04, 0x33, 0x43, 0x13,
-	0x61, 0x13, 0x69, 0x9B, 0x03, 0xFC, 0xD5, 0x29,
-	0x43, 0x21, 0x60, 0x3C, 0x4C, 0x00, 0x21, 0xA1,
-	0x60, 0xE1, 0x60, 0x51, 0x68, 0xC0, 0xB2, 0x21,
-	0x61, 0x03, 0xF0, 0x70, 0xFE,
-	0x00, 0x00, 0xBA, 0x00, 0x80, 0x01, 0x20, 0x40,
-	0x03, 0x60, 0x61, 0x70, 0xBD, 0x70, 0xB5, 0x4A,
-	0x4B, 0x48, 0x48, 0x58, 0x61, 0x05, 0x20, 0x18,
-	0x61, 0x72, 0xB6, 0x33, 0x48, 0x41, 0x68, 0x42,
-	0x68, 0x8A, 0x42, 0xFC, 0xD0, 0x00, 0x21, 0x99,
-	0x61, 0x44, 0x68, 0x41, 0x68, 0xA1, 0x42, 0xFC,
-	0xD0, 0x98, 0x69, 0x40, 0x49, 0x89, 0x1C, 0x0D,
-	0x1A, 0x04, 0x20, 0x18, 0x61, 0x62, 0xB6, 0x20,
-	0x46, 0xFF, 0xF7, 0x90, 0xFE, 0x27, 0x4E, 0x00,
-	0x2D, 0xF0, 0x60, 0x34, 0x61, 0xB0, 0x60, 0x0D,
-	0xD0, 0x3A, 0x48, 0x7D, 0x21, 0x00, 0x78, 0xC9,
-	0x02, 0x48, 0x43, 0x29, 0x46, 0x06, 0xF0, 0x53,
-	0xFE, 0x70, 0x61, 0x00, 0x28, 0x01, 0xD1, 0x01,
-	0x20, 0x70, 0x61, 0x70, 0xBD, 0x01, 0x20, 0x40,
-	0x03, 0xFA, 0xE7, 0x10, 0xB5, 0x04, 0x46, 0xFF,
-	0xF7, 0x8D, 0xFE, 0x1A, 0x49, 0x89, 0x68, 0x40,
-	0x1A, 0xA0, 0x42, 0x03, 0xD3,
-	0x00, 0x00, 0xBB, 0x00, 0x80, 0xFF, 0xF7, 0xC2,
-	0xFF, 0x01, 0x20, 0x10, 0xBD, 0x00, 0x20, 0x10,
-	0xBD, 0x00, 0x28, 0x10, 0xD0, 0x2A, 0x49, 0x88,
-	0x42, 0x00, 0xD9, 0x08, 0x46, 0x24, 0x21, 0x48,
-	0x43, 0x25, 0x49, 0x48, 0x61, 0x05, 0x20, 0x08,
-	0x61, 0x00, 0x20, 0x88, 0x61, 0x08, 0x69, 0xC0,
-	0x03, 0xFC, 0xD5, 0x04, 0x20, 0x08, 0x61, 0x70,
-	0x47, 0x0E, 0x49, 0x08, 0x68, 0x03, 0x22, 0x92,
-	0x03, 0x10, 0x43, 0x08, 0x60, 0x70, 0x47, 0x0B,
-	0x49, 0x08, 0x68, 0x03, 0x22, 0x92, 0x03, 0x90,
-	0x43, 0x01, 0x22, 0x92, 0x03, 0x02, 0x43, 0x0A,
-	0x60, 0x01, 0x22, 0xD2, 0x03, 0x10, 0x43, 0x08,
-	0x60, 0x70, 0x47, 0x00, 0x00, 0x48, 0x01, 0x00,
-	0x20, 0x00, 0x04, 0x01, 0x40, 0xC8, 0x00, 0x00,
-	0x20, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,
-	0x40, 0x0C, 0x0C, 0x04, 0x00, 0x0A, 0x0A, 0x00,
-	0x00, 0x80, 0xE2, 0x00, 0xE0,
-	0x00, 0x00, 0xBC, 0x00, 0x80, 0x0D, 0x02, 0x00,
-	0x00, 0x01, 0x01, 0x01, 0x00, 0x93, 0x36, 0x00,
-	0x00, 0x08, 0x08, 0x08, 0x00, 0xCA, 0x00, 0x00,
-	0x20, 0x40, 0xF1, 0xFF, 0x0F, 0x00, 0xED, 0x00,
-	0xE0, 0x00, 0x00, 0x12, 0x40, 0x01, 0x09, 0x01,
-	0x00, 0x00, 0xDC, 0x00, 0x00, 0x06, 0x00, 0x00,
-	0x80, 0xFF, 0xF7, 0xFE, 0x20, 0xFF, 0xFF, 0xFF,
-	0x00, 0x00, 0xE0, 0x00, 0xE0, 0x64, 0x01, 0x00,
-	0x20, 0x50, 0xC3, 0x00, 0x00, 0x10, 0xB5, 0x3A,
-	0x4B, 0x02, 0x24, 0x18, 0x78, 0x59, 0x68, 0xC0,
-	0x1E, 0xC0, 0xB2, 0x0A, 0x5C, 0x1C, 0x5F, 0x52,
-	0x42, 0xA2, 0x42, 0x00, 0xDD, 0x5A, 0x80, 0x09,
-	0x5C, 0xFF, 0x20, 0x40, 0x1A, 0x02, 0x21, 0x59,
-	0x5E, 0x88, 0x42, 0x00, 0xDA, 0x58, 0x80, 0x10,
-	0xBD, 0x30, 0x48, 0xC1, 0x7A, 0x24, 0x29, 0x01,
-	0xD2, 0x24, 0x20, 0x70, 0x47, 0xC1, 0x7A, 0x30,
-	0x29, 0x01, 0xD9, 0x30, 0x20,
-	0x00, 0x00, 0xBD, 0x00, 0x80, 0x70, 0x47, 0xC0,
-	0x7A, 0x70, 0x47, 0xF0, 0xB5, 0x2A, 0x4F, 0x00,
-	0x21, 0x3A, 0x7B, 0x7B, 0x7B, 0x8C, 0x46, 0x0E,
-	0x46, 0x14, 0x46, 0x1D, 0x46, 0x04, 0x21, 0x20,
-	0x2A, 0x00, 0xD0, 0x01, 0x26, 0x20, 0x2B, 0x01,
-	0xD0, 0x01, 0x22, 0x94, 0x46, 0x49, 0x1E, 0x0B,
-	0xD4, 0x4A, 0x00, 0x21, 0x4B, 0x8A, 0x18, 0xD7,
-	0x18, 0x7A, 0x78, 0xBB, 0x78, 0x3F, 0x78, 0x87,
-	0x42, 0xED, 0xD3, 0x14, 0x46, 0x1D, 0x46, 0xEA,
-	0xE7, 0x1C, 0x48, 0x00, 0x2E, 0x00, 0xD0, 0xC4,
-	0x61, 0x61, 0x46, 0x00, 0x29, 0x00, 0xD0, 0x05,
-	0x62, 0xF0, 0xBD, 0xF8, 0xB5, 0x04, 0x46, 0xC0,
-	0x1E, 0xC5, 0xB2, 0x20, 0x46, 0x18, 0x38, 0xC6,
-	0xB2, 0x15, 0x48, 0x11, 0x4F, 0x24, 0x2C, 0x0B,
-	0xD2, 0x14, 0x49, 0x89, 0x5D, 0x06, 0x46, 0x81,
-	0x60, 0x05, 0x20, 0x03, 0xF0, 0x67, 0xFD, 0x78,
-	0x68, 0x40, 0x5D, 0x70, 0x60,
-	0x00, 0x00, 0xBE, 0x00, 0x80, 0xF0, 0x20, 0x0A,
-	0xE0, 0x79, 0x68, 0x49, 0x5D, 0x05, 0x46, 0x41,
-	0x60, 0xF0, 0x20, 0x03, 0xF0, 0x5B, 0xFD, 0x0B,
-	0x48, 0x80, 0x5D, 0xA8, 0x60, 0x05, 0x20, 0x03,
-	0xF0, 0x55, 0xFD, 0x09, 0x49, 0x20, 0x46, 0x48,
-	0x43, 0xFD, 0xF7, 0x88, 0xFB, 0xF8, 0xBD, 0x00,
-	0x00, 0x64, 0x01, 0x00, 0x20, 0x00, 0xDC, 0x00,
-	0x00, 0xC0, 0xF1, 0xFF, 0x0F, 0x00, 0xFF, 0x00,
-	0x40, 0x00, 0xFF, 0x01, 0x40, 0x7C, 0xCD, 0x00,
-	0x00, 0x40, 0x42, 0x0F, 0x00, 0x70, 0x47, 0xFE,
-	0xB5, 0xFF, 0x4C, 0x25, 0x68, 0x03, 0x21, 0x09,
-	0x02, 0x28, 0x46, 0x88, 0x43, 0x20, 0x60, 0xFC,
-	0x48, 0x40, 0x30, 0x80, 0x68, 0x01, 0x90, 0xE0,
-	0x6B, 0x00, 0x90, 0x01, 0x98, 0xF8, 0x4A, 0x06,
-	0x0C, 0x00, 0x98, 0x36, 0x04, 0x07, 0x0C, 0xFF,
-	0x36, 0x02, 0x36, 0x3F, 0x04, 0xFF, 0x37, 0xA0,
-	0x03, 0x31, 0x46, 0x02, 0x37,
-	0x00, 0x00, 0xBF, 0x00, 0x80, 0x41, 0x40, 0x40,
-	0x32, 0x91, 0x60, 0x78, 0x40, 0xE0, 0x63, 0x01,
-	0x20, 0xFD, 0xF7, 0x0E, 0xFB, 0xEE, 0x48, 0x40,
-	0x30, 0x86, 0x60, 0xE7, 0x63, 0x01, 0x20, 0xFD,
-	0xF7, 0x07, 0xFB, 0xEB, 0x49, 0x01, 0x98, 0x40,
-	0x31, 0x88, 0x60, 0x00, 0x98, 0xE0, 0x63, 0x25,
-	0x60, 0xFE, 0xBD, 0x10, 0xB5, 0xE7, 0x49, 0xC8,
-	0x68, 0x4A, 0x02, 0x10, 0x43, 0xC8, 0x60, 0xE6,
-	0x48, 0x81, 0x68, 0x05, 0x20, 0x28, 0x29, 0x03,
-	0xD3, 0x06, 0x20, 0x30, 0x29, 0x00, 0xD3, 0x07,
-	0x20, 0xE2, 0x49, 0x0A, 0x7B, 0x12, 0x09, 0x10,
-	0x18, 0x42, 0x00, 0x08, 0x7B, 0x40, 0x07, 0x40,
-	0x0F, 0x05, 0x28, 0x00, 0xD9, 0x00, 0x20, 0xDE,
-	0x4B, 0x80, 0x00, 0x1B, 0x58, 0xD8, 0x48, 0x13,
-	0x43, 0xC0, 0x30, 0x03, 0x61, 0x89, 0x7B, 0xDB,
-	0x4A, 0x09, 0x07, 0x09, 0x0F, 0x89, 0x18, 0x41,
-	0x60, 0x03, 0x21, 0x81, 0x60,
-	0x00, 0x00, 0xC0, 0x00, 0x80, 0xD2, 0x49, 0x92,
-	0x0C, 0x40, 0x31, 0x8A, 0x62, 0xD3, 0x4A, 0x60,
-	0x3A, 0x52, 0x69, 0xCF, 0x4B, 0x80, 0x33, 0x9A,
-	0x63, 0x01, 0x22, 0x12, 0x03, 0x02, 0x60, 0x09,
-	0x20, 0x00, 0x07, 0x88, 0x61, 0xCA, 0x4C, 0x20,
-	0x68, 0x49, 0x06, 0x08, 0x43, 0x20, 0x60, 0x05,
-	0x20, 0xFD, 0xF7, 0xF9, 0xFA, 0x05, 0x20, 0xFD,
-	0xF7, 0xE7, 0xFA, 0x20, 0x68, 0x00, 0x28, 0x01,
-	0xD0, 0xFF, 0xF7, 0x85, 0xFF, 0x10, 0xBD, 0x70,
-	0xB5, 0xC7, 0x48, 0xC1, 0x7E, 0x00, 0x29, 0x19,
-	0xD0, 0xC6, 0x48, 0x41, 0x43, 0xC4, 0x48, 0x20,
-	0x30, 0x00, 0x78, 0x00, 0x04, 0x06, 0xF0, 0xD3,
-	0xFC, 0xBE, 0x4B, 0x00, 0x21, 0xC2, 0x4C, 0xC3,
-	0x4D, 0x20, 0x3B, 0x9E, 0x69, 0x64, 0x22, 0x00,
-	0x2E, 0x01, 0xD0, 0x0A, 0x19, 0x12, 0x78, 0x4E,
-	0x00, 0x42, 0x43, 0x12, 0x12, 0x49, 0x1C, 0xAA,
-	0x53, 0x08, 0x29, 0xF2, 0xD3,
-	0x00, 0x00, 0xC1, 0x00, 0x80, 0x70, 0xBD, 0xF8,
-	0xB5, 0x00, 0x21, 0x05, 0x20, 0xFD, 0xF7, 0xAC,
-	0xFA, 0xB2, 0x4E, 0x20, 0x3E, 0xF0, 0x69, 0x02,
-	0x28, 0x0E, 0xD1, 0xB7, 0x49, 0x0E, 0x20, 0xFD,
-	0xF7, 0x90, 0xFA, 0xB6, 0x48, 0x02, 0x6A, 0x01,
-	0x6A, 0xFF, 0x23, 0x1B, 0x04, 0x99, 0x43, 0x01,
-	0x23, 0x9B, 0x05, 0x19, 0x43, 0x0A, 0x43, 0x02,
-	0x62, 0xA8, 0x4F, 0x60, 0x3F, 0xB8, 0x69, 0xAA,
-	0x4C, 0x60, 0x70, 0xF8, 0x69, 0xA0, 0x70, 0x60,
-	0x78, 0xC1, 0x1C, 0x89, 0x08, 0xE1, 0x74, 0xC9,
-	0xB2, 0x40, 0x1A, 0x40, 0x1C, 0x03, 0x21, 0x06,
-	0xF0, 0xA0, 0xFC, 0x20, 0x75, 0x00, 0x21, 0x20,
-	0x46, 0x20, 0x30, 0xA7, 0x4D, 0x41, 0x70, 0xE9,
-	0x68, 0xF0, 0x22, 0x11, 0x40, 0xE1, 0x77, 0x29,
-	0x6A, 0xE1, 0x75, 0xA9, 0x68, 0x61, 0x76, 0xA9,
-	0x68, 0x09, 0x0A, 0xE1, 0x76, 0x31, 0x68, 0x01,
-	0x70, 0xFF, 0xF7, 0xA1, 0xFF,
-	0x00, 0x00, 0xC2, 0x00, 0x80, 0x68, 0x6F, 0x20,
-	0x76, 0xE8, 0x6D, 0xA0, 0x76, 0xE8, 0x6D, 0x29,
-	0x46, 0x00, 0x0A, 0x20, 0x77, 0x80, 0x31, 0x09,
-	0x6B, 0xC0, 0xB2, 0x0D, 0x0A, 0x39, 0x46, 0x40,
-	0x39, 0x09, 0x68, 0x09, 0x0A, 0x00, 0x91, 0xF9,
-	0x68, 0x0F, 0x0A, 0x64, 0x21, 0x41, 0x43, 0x70,
-	0x68, 0x80, 0x03, 0x06, 0xF0, 0x68, 0xFC, 0x20,
-	0x85, 0x8C, 0x48, 0x29, 0x46, 0x41, 0x43, 0xB0,
-	0x68, 0x00, 0x04, 0x06, 0xF0, 0x60, 0xFC, 0x05,
-	0x46, 0x00, 0x99, 0x64, 0x20, 0x41, 0x43, 0xF0,
-	0x68, 0x80, 0x03, 0x06, 0xF0, 0x58, 0xFC, 0xA0,
-	0x85, 0x39, 0x46, 0x64, 0x20, 0x41, 0x43, 0xF0,
-	0x68, 0x80, 0x03, 0x06, 0xF0, 0x50, 0xFC, 0xE0,
-	0x85, 0xB1, 0x69, 0x82, 0x48, 0x10, 0x30, 0x00,
-	0x29, 0x0B, 0xD0, 0x7F, 0x4A, 0x00, 0x21, 0x8B,
-	0x18, 0x1B, 0x78, 0x4C, 0x00, 0x6B, 0x43, 0x1B,
-	0x12, 0x49, 0x1C, 0x03, 0x53,
-	0x00, 0x00, 0xC3, 0x00, 0x80, 0x08, 0x29, 0xF6,
-	0xD3, 0x08, 0xE0, 0x19, 0x22, 0x92, 0x02, 0x55,
-	0x43, 0x2A, 0x14, 0x4B, 0x00, 0x49, 0x1C, 0xC2,
-	0x52, 0x08, 0x29, 0xFA, 0xD3, 0x6F, 0x48, 0xC0,
-	0x79, 0xC0, 0x07, 0x02, 0xD0, 0x04, 0xF0, 0x4A,
-	0xFC, 0xF8, 0xBD, 0x04, 0xF0, 0x4B, 0xFC, 0xF8,
-	0xBD, 0x10, 0xB5, 0x6D, 0x4C, 0x20, 0x78, 0x00,
-	0x28, 0x03, 0xD1, 0xFF, 0xF7, 0x64, 0xFF, 0x01,
-	0x20, 0x20, 0x70, 0xFF, 0xF7, 0xF6, 0xFE, 0x10,
-	0xBD, 0x61, 0x49, 0x6E, 0x48, 0x48, 0x61, 0x60,
-	0x49, 0x6D, 0x48, 0x40, 0x31, 0x48, 0x62, 0x01,
-	0x21, 0x5D, 0x48, 0xC9, 0x03, 0xC0, 0x30, 0x01,
-	0x60, 0x41, 0x68, 0x49, 0x00, 0x49, 0x08, 0x41,
-	0x60, 0x81, 0x68, 0x49, 0x08, 0x49, 0x00, 0x81,
-	0x60, 0x01, 0x69, 0x01, 0x22, 0x89, 0x00, 0x89,
-	0x08, 0x92, 0x07, 0x89, 0x18, 0x01, 0x61, 0x70,
-	0x47, 0x10, 0xB5, 0x53, 0x48,
-	0x00, 0x00, 0xC4, 0x00, 0x80, 0x01, 0x68, 0x49,
-	0x00, 0x49, 0x08, 0x01, 0x60, 0x05, 0x20, 0xFD,
-	0xF7, 0x02, 0xFA, 0x05, 0x20, 0xFD, 0xF7, 0x07,
-	0xFA, 0x10, 0xBD, 0x5C, 0x48, 0x00, 0x88, 0xC0,
-	0xB2, 0x70, 0x47, 0x02, 0x46, 0x00, 0x20, 0x01,
-	0x2A, 0x09, 0xD0, 0x02, 0x2A, 0x07, 0xD0, 0x04,
-	0x2A, 0x07, 0xD0, 0x08, 0x2A, 0x02, 0xD1, 0x49,
-	0x48, 0x60, 0x38, 0x80, 0x6B, 0x70, 0x47, 0x08,
-	0x46, 0x70, 0x47, 0x48, 0x08, 0x70, 0x47, 0x42,
-	0x48, 0xC0, 0x30, 0x01, 0x69, 0x8A, 0x00, 0x92,
-	0x08, 0x41, 0x06, 0x52, 0x18, 0x02, 0x61, 0x42,
-	0x68, 0x0A, 0x43, 0x42, 0x60, 0x81, 0x68, 0x01,
-	0x22, 0x11, 0x43, 0x81, 0x60, 0x70, 0x47, 0x70,
-	0xB5, 0xFF, 0xF7, 0xED, 0xFF, 0x01, 0x24, 0x3E,
-	0x4D, 0x00, 0x21, 0x2C, 0x73, 0x20, 0x46, 0xFF,
-	0xF7, 0xD4, 0xFF, 0x28, 0x71, 0x04, 0xF0, 0xE6,
-	0xFB, 0x00, 0x28, 0x01, 0xD0,
-	0x00, 0x00, 0xC5, 0x00, 0x80, 0x42, 0x48, 0x04,
-	0x70, 0x34, 0x4C, 0x20, 0x3C, 0xE0, 0x69, 0x02,
-	0x28, 0x01, 0xD1, 0x40, 0x49, 0x00, 0xE0, 0x40,
-	0x49, 0x05, 0x20, 0xFD, 0xF7, 0x9B, 0xF9, 0x00,
-	0x20, 0x3E, 0x4E, 0x68, 0x71, 0x70, 0x69, 0x3E,
-	0x49, 0x01, 0x22, 0x09, 0x78, 0x12, 0x03, 0x00,
-	0x02, 0x89, 0x18, 0x08, 0x43, 0x26, 0x49, 0xC0,
-	0x31, 0x08, 0x60, 0x00, 0x20, 0x39, 0x4A, 0x0F,
-	0x21, 0x83, 0x00, 0x9B, 0x18, 0x19, 0x60, 0x40,
-	0x1C, 0x41, 0x28, 0xF9, 0xD3, 0x2C, 0x49, 0x4A,
-	0x68, 0x25, 0x48, 0x20, 0x30, 0x40, 0x78, 0x00,
-	0x28, 0x05, 0xD0, 0x05, 0x20, 0x82, 0x43, 0xD0,
-	0x06, 0x01, 0xD4, 0xC0, 0x20, 0x82, 0x43, 0xFF,
-	0xF7, 0x98, 0xFF, 0x03, 0x09, 0x2E, 0x48, 0x03,
-	0xD0, 0x1A, 0x4B, 0x9B, 0x79, 0x01, 0x2B, 0x03,
-	0xD0, 0x23, 0x69, 0x5B, 0x07, 0x00, 0xD0, 0x00,
-	0x20, 0x13, 0x4B, 0x82, 0x43,
-	0x00, 0x00, 0xC6, 0x00, 0x80, 0x1A, 0x60, 0xE8,
-	0x7E, 0x6A, 0x7E, 0x00, 0x02, 0x10, 0x43, 0x98,
-	0x60, 0xC8, 0x68, 0xF0, 0x22, 0x90, 0x43, 0xEA,
-	0x7F, 0x10, 0x43, 0x58, 0x61, 0x08, 0x69, 0x98,
-	0x61, 0x48, 0x69, 0xD8, 0x61, 0x88, 0x69, 0x18,
-	0x62, 0xC8, 0x69, 0x58, 0x62, 0x0A, 0x6A, 0x1F,
-	0x48, 0x02, 0x40, 0xE8, 0x7D, 0x02, 0x43, 0x00,
-	0x04, 0x02, 0x43, 0x9A, 0x62, 0x48, 0x6A, 0xD8,
-	0x62, 0x88, 0x6A, 0x18, 0x63, 0xC8, 0x6A, 0x58,
-	0x63, 0x08, 0x6B, 0x98, 0x63, 0x48, 0x6B, 0x2F,
-	0xE0, 0x00, 0x00, 0x11, 0x40, 0x00, 0x00, 0x01,
-	0x40, 0x00, 0xFF, 0x01, 0x40, 0xE8, 0xDF, 0x00,
-	0x00, 0xD8, 0xCD, 0x00, 0x00, 0x40, 0x40, 0x00,
-	0x80, 0x6C, 0x01, 0x00, 0x20, 0x71, 0x02, 0x00,
-	0x00, 0x60, 0xF1, 0xFF, 0x0F, 0x54, 0x05, 0x00,
-	0x20, 0x41, 0x9B, 0x00, 0x00, 0x00, 0xED, 0x00,
-	0xE0, 0x48, 0xDE, 0x00, 0x00,
-	0x00, 0x00, 0xC7, 0x00, 0x80, 0xFF, 0x00, 0xAF,
-	0x40, 0x0A, 0xA0, 0x00, 0x00, 0x48, 0x02, 0x00,
-	0x20, 0xA8, 0x02, 0x00, 0x20, 0xA5, 0x9E, 0x00,
-	0x00, 0x77, 0x9C, 0x00, 0x00, 0x54, 0xE0, 0x00,
-	0x00, 0x34, 0x03, 0x00, 0x20, 0x00, 0x04, 0x11,
-	0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF, 0x00,
-	0xFF, 0xD8, 0x63, 0x88, 0x6B, 0xFF, 0x4A, 0x10,
-	0x60, 0xC8, 0x6B, 0x50, 0x60, 0x08, 0x6C, 0x90,
-	0x60, 0x48, 0x6C, 0xD0, 0x60, 0x88, 0x6C, 0x10,
-	0x61, 0xC8, 0x6C, 0x50, 0x61, 0x08, 0x6D, 0x50,
-	0x62, 0xF9, 0x48, 0x00, 0x69, 0xF7, 0x49, 0x80,
-	0x09, 0x80, 0x01, 0x40, 0x31, 0xC8, 0x63, 0x0F,
-	0x20, 0x00, 0x07, 0x90, 0x61, 0x70, 0x6B, 0x08,
-	0x61, 0xF4, 0x4D, 0x00, 0x20, 0x86, 0x00, 0xB6,
-	0x18, 0xF5, 0x62, 0x40, 0x1C, 0x09, 0x28, 0xF9,
-	0xD3, 0x20, 0x69, 0x00, 0x28, 0x03, 0xD1, 0xC8,
-	0x68, 0x40, 0x00, 0x40, 0x08,
-	0x00, 0x00, 0xC8, 0x00, 0x80, 0xC8, 0x60, 0xE0,
-	0x69, 0x02, 0x28, 0x04, 0xD1, 0x58, 0x69, 0x01,
-	0x21, 0xC9, 0x02, 0x08, 0x43, 0x58, 0x61, 0x70,
-	0xBD, 0xF8, 0xB5, 0xFF, 0xF7, 0x14, 0xFF, 0x02,
-	0x26, 0xE7, 0x4F, 0x00, 0x21, 0x3E, 0x73, 0x30,
-	0x46, 0xFF, 0xF7, 0xFB, 0xFE, 0x38, 0x71, 0x04,
-	0xF0, 0x0D, 0xFB, 0x00, 0x28, 0x02, 0xD0, 0xE3,
-	0x48, 0x01, 0x21, 0x01, 0x70, 0xDE, 0x4C, 0x40,
-	0x34, 0xE0, 0x69, 0x02, 0x28, 0x78, 0x78, 0x03,
-	0xD1, 0xC0, 0x1C, 0x80, 0x08, 0x80, 0x00, 0xFF,
-	0xE7, 0xD9, 0x4D, 0xE9, 0x6A, 0x41, 0x43, 0x79,
-	0x71, 0xDB, 0x49, 0x05, 0x20, 0xFD, 0xF7, 0xBA,
-	0xF8, 0xDA, 0x4B, 0x98, 0x69, 0x01, 0x21, 0x00,
-	0x02, 0x09, 0x03, 0x08, 0x43, 0xD1, 0x49, 0x80,
-	0x31, 0x08, 0x60, 0xD7, 0x4A, 0x00, 0x20, 0x81,
-	0x00, 0x89, 0x18, 0x0E, 0x60, 0x40, 0x1C, 0x41,
-	0x28, 0xF9, 0xD3, 0xD4, 0x4E,
-	0x00, 0x00, 0xC9, 0x00, 0x80, 0xB1, 0x6D, 0xCE,
-	0x48, 0x20, 0x30, 0x40, 0x78, 0x00, 0x28, 0x05,
-	0xD0, 0x05, 0x20, 0x81, 0x43, 0xC8, 0x06, 0x01,
-	0xD4, 0xC0, 0x20, 0x81, 0x43, 0xFF, 0xF7, 0xBD,
-	0xFE, 0x02, 0x09, 0xCD, 0x48, 0x04, 0xD0, 0xC4,
-	0x4A, 0x60, 0x32, 0x92, 0x79, 0x01, 0x2A, 0x03,
-	0xD0, 0x22, 0x69, 0x52, 0x07, 0x00, 0xD0, 0x00,
-	0x20, 0xBE, 0x4A, 0x81, 0x43, 0x40, 0x3A, 0x11,
-	0x60, 0x38, 0x7F, 0xB9, 0x7E, 0x00, 0x02, 0x08,
-	0x43, 0x90, 0x60, 0x30, 0x6E, 0x50, 0x61, 0x70,
-	0x6E, 0x90, 0x61, 0xB0, 0x6E, 0xD0, 0x61, 0xF0,
-	0x6E, 0x10, 0x62, 0x30, 0x6F, 0x50, 0x62, 0x71,
-	0x6F, 0xBE, 0x48, 0x01, 0x40, 0x38, 0x7E, 0x01,
-	0x43, 0x00, 0x04, 0x01, 0x43, 0x91, 0x62, 0xB0,
-	0x6F, 0xD0, 0x62, 0xF0, 0x6F, 0x10, 0x63, 0xB7,
-	0x48, 0x80, 0x30, 0x01, 0x68, 0x51, 0x63, 0x41,
-	0x68, 0x91, 0x63, 0x81, 0x68,
-	0x00, 0x00, 0xCA, 0x00, 0x80, 0xD1, 0x63, 0xC2,
-	0x68, 0xAA, 0x49, 0x0A, 0x60, 0x02, 0x69, 0x4A,
-	0x60, 0x42, 0x69, 0x8A, 0x60, 0x82, 0x69, 0xCA,
-	0x60, 0xC2, 0x69, 0x0A, 0x61, 0x02, 0x6A, 0x4A,
-	0x61, 0x40, 0x6A, 0x48, 0x62, 0x28, 0x69, 0xA3,
-	0x4A, 0x40, 0x32, 0xD0, 0x63, 0x0D, 0x20, 0x00,
-	0x07, 0x88, 0x61, 0x98, 0x6B, 0x10, 0x61, 0xA1,
-	0x4B, 0x00, 0x20, 0x9B, 0x1C, 0x85, 0x00, 0x6D,
-	0x18, 0xEB, 0x62, 0x40, 0x1C, 0x08, 0x28, 0xF9,
-	0xD3, 0x9C, 0x48, 0xD0, 0x60, 0x20, 0x69, 0x00,
-	0x28, 0x03, 0xD1, 0xD0, 0x68, 0x40, 0x00, 0x40,
-	0x08, 0xD0, 0x60, 0xF8, 0xBD, 0x70, 0x47, 0x10,
-	0xB5, 0xFF, 0xF7, 0x71, 0xFE, 0x00, 0x20, 0x9A,
-	0x49, 0x0F, 0x22, 0x83, 0x00, 0x5B, 0x18, 0x1A,
-	0x60, 0x40, 0x1C, 0x41, 0x28, 0xF9, 0xD3, 0x91,
-	0x49, 0x8E, 0x4A, 0x00, 0x20, 0x83, 0x00, 0x9B,
-	0x18, 0xD9, 0x62, 0x40, 0x1C,
-	0x00, 0x00, 0xCB, 0x00, 0x80, 0x09, 0x28, 0xF9,
-	0xD3, 0x8B, 0x48, 0x40, 0x38, 0x00, 0x68, 0x89,
-	0x49, 0x40, 0x39, 0x88, 0x60, 0x88, 0x48, 0x00,
-	0x69, 0x86, 0x49, 0x80, 0x09, 0x80, 0x01, 0x40,
-	0x31, 0xC8, 0x63, 0x8A, 0x4A, 0x10, 0x6A, 0x8E,
-	0x4B, 0x01, 0x24, 0x1B, 0x78, 0x24, 0x03, 0x00,
-	0x02, 0x1B, 0x19, 0x18, 0x43, 0x7F, 0x4B, 0x80,
-	0x33, 0x18, 0x60, 0x10, 0x6C, 0x08, 0x61, 0x10,
-	0xBD, 0x10, 0xB5, 0xFF, 0xF7, 0x40, 0xFE, 0x00,
-	0x20, 0x81, 0x4A, 0x02, 0x21, 0x83, 0x00, 0x9B,
-	0x18, 0x19, 0x60, 0x40, 0x1C, 0x41, 0x28, 0xF9,
-	0xD3, 0x78, 0x4A, 0x00, 0x20, 0x75, 0x49, 0x92,
-	0x1C, 0x83, 0x00, 0x5B, 0x18, 0xDA, 0x62, 0x40,
-	0x1C, 0x09, 0x28, 0xF9, 0xD3, 0x72, 0x4A, 0xD3,
-	0x68, 0x70, 0x48, 0x40, 0x38, 0x83, 0x60, 0x12,
-	0x69, 0x6E, 0x4B, 0x40, 0x33, 0xDA, 0x63, 0x4A,
-	0x6A, 0x03, 0x24, 0x64, 0x02,
-	0x00, 0x00, 0xCC, 0x00, 0x80, 0x22, 0x43, 0x4A,
-	0x62, 0x81, 0x69, 0x01, 0x22, 0xC9, 0x0D, 0xC9,
-	0x05, 0x92, 0x05, 0x89, 0x18, 0x81, 0x61, 0x41,
-	0x69, 0x42, 0x15, 0x11, 0x43, 0x41, 0x61, 0x6B,
-	0x48, 0x01, 0x6A, 0x70, 0x4A, 0x01, 0x24, 0x12,
-	0x78, 0x24, 0x03, 0x09, 0x02, 0x12, 0x19, 0x11,
-	0x43, 0x60, 0x4A, 0x80, 0x32, 0x11, 0x60, 0x40,
-	0x6C, 0x18, 0x61, 0x10, 0xBD, 0xF8, 0xB5, 0x60,
-	0x4D, 0x08, 0x20, 0x28, 0x73, 0x00, 0x21, 0xFF,
-	0xF7, 0xEC, 0xFD, 0x5B, 0x4C, 0x28, 0x71, 0x40,
-	0x3C, 0xA0, 0x69, 0x65, 0x49, 0xC6, 0xB2, 0x05,
-	0x20, 0xFC, 0xF7, 0xBC, 0xFF, 0x20, 0x46, 0x40,
-	0x38, 0xC1, 0x6B, 0x54, 0x48, 0x40, 0x38, 0x01,
-	0x60, 0x61, 0x68, 0x41, 0x61, 0xA1, 0x68, 0x81,
-	0x61, 0xE1, 0x68, 0xC1, 0x61, 0x21, 0x69, 0x01,
-	0x62, 0x61, 0x69, 0x41, 0x62, 0xA1, 0x69, 0x57,
-	0x4A, 0x11, 0x40, 0x31, 0x43,
-	0x00, 0x00, 0xCD, 0x00, 0x80, 0x32, 0x04, 0x11,
-	0x43, 0x81, 0x62, 0xE1, 0x69, 0xC1, 0x62, 0x21,
-	0x6A, 0x01, 0x63, 0x61, 0x6A, 0x41, 0x63, 0xA1,
-	0x6A, 0x81, 0x63, 0xE1, 0x6A, 0xC1, 0x63, 0x21,
-	0x6B, 0x44, 0x48, 0x01, 0x60, 0x61, 0x6B, 0x41,
-	0x60, 0xA1, 0x6B, 0x81, 0x60, 0xE1, 0x6B, 0xC1,
-	0x60, 0x40, 0x34, 0x21, 0x68, 0x01, 0x61, 0x61,
-	0x68, 0x41, 0x61, 0xA1, 0x68, 0x41, 0x62, 0x0D,
-	0x21, 0x09, 0x07, 0x81, 0x61, 0x27, 0x46, 0x40,
-	0x37, 0xF8, 0x69, 0x02, 0x28, 0x04, 0xD1, 0x68,
-	0x78, 0xC0, 0x1C, 0x86, 0x08, 0xB6, 0x00, 0x00,
-	0xE0, 0x6E, 0x78, 0x38, 0x6A, 0x01, 0x28, 0x02,
-	0xD1, 0xFF, 0xF7, 0x6E, 0xFF, 0x01, 0xE0, 0xFF,
-	0xF7, 0x3A, 0xFF, 0xE0, 0x6A, 0xA1, 0x6B, 0x70,
-	0x43, 0x40, 0x18, 0xE1, 0x6B, 0x40, 0x18, 0x68,
-	0x71, 0x38, 0x69, 0x02, 0x28, 0x05, 0xD0, 0x2D,
-	0x48, 0x40, 0x30, 0xC1, 0x68,
-	0x00, 0x00, 0xCE, 0x00, 0x80, 0x49, 0x00, 0x49,
-	0x08, 0xC1, 0x60, 0xF8, 0xBD, 0x30, 0x4A, 0x00,
-	0x21, 0x8B, 0x00, 0x9B, 0x18, 0x18, 0x60, 0x49,
-	0x1C, 0xC9, 0xB2, 0x41, 0x29, 0xF8, 0xD3, 0x70,
-	0x47, 0xF8, 0xB5, 0xFF, 0xF7, 0xA0, 0xFD, 0x26,
-	0x4F, 0x22, 0x4D, 0xF8, 0x7E, 0x01, 0x24, 0x24,
-	0x03, 0x40, 0x3D, 0x10, 0x28, 0x04, 0xD9, 0x27,
-	0x48, 0x80, 0x68, 0xC0, 0xB2, 0x00, 0x19, 0xA8,
-	0x60, 0x0F, 0x20, 0xFF, 0xF7, 0xE3, 0xFF, 0x00,
-	0x26, 0x1D, 0x48, 0xBE, 0x75, 0x3E, 0x86, 0x20,
-	0x30, 0x46, 0x71, 0x86, 0x71, 0x18, 0x48, 0xFE,
-	0x64, 0x80, 0x6B, 0x38, 0x71, 0x10, 0x20, 0x38,
-	0x73, 0x22, 0x49, 0x05, 0x20, 0xFC, 0xF7, 0x36,
-	0xFF, 0x13, 0x48, 0x40, 0x30, 0x00, 0x69, 0x11,
-	0x49, 0x40, 0x31, 0x02, 0x28, 0x03, 0xD0, 0xC8,
-	0x68, 0x40, 0x00, 0x40, 0x08, 0xC8, 0x60, 0x00,
-	0x20, 0x82, 0x00, 0x52, 0x18,
-	0x00, 0x00, 0xCF, 0x00, 0x80, 0x56, 0x61, 0x40,
-	0x1C, 0x09, 0x28, 0xF9, 0xD3, 0x09, 0x48, 0x80,
-	0x30, 0x04, 0x60, 0xA9, 0x6A, 0x11, 0x4A, 0xD2,
-	0x43, 0x11, 0x40, 0xA9, 0x62, 0x0D, 0x21, 0x05,
-	0x4A, 0x09, 0x07, 0x91, 0x61, 0x04, 0x49, 0x60,
-	0x31, 0x09, 0x7C, 0x00, 0x29, 0x28, 0xD0, 0x01,
-	0x69, 0x0F, 0x4A, 0x1F, 0xE0, 0x40, 0x00, 0x11,
-	0x40, 0x88, 0xDF, 0x00, 0x00, 0x01, 0x00, 0x00,
-	0xC0, 0x6C, 0x01, 0x00, 0x20, 0xA8, 0x02, 0x00,
-	0x20, 0x6B, 0xA2, 0x00, 0x00, 0x54, 0xE0, 0x00,
-	0x00, 0x00, 0x04, 0x11, 0x40, 0x48, 0xDE, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF, 0x00,
-	0xFF, 0x39, 0x03, 0x00, 0x20, 0x3A, 0x03, 0x00,
-	0x20, 0x6F, 0xA3, 0x00, 0x00, 0x45, 0xA4, 0x00,
-	0x00, 0xFF, 0xE0, 0xE3, 0xF1, 0x11, 0x40, 0x01,
-	0x61, 0x01, 0x69, 0xFA, 0x4A, 0x11, 0x43, 0x01,
-	0x61, 0xF8, 0xBD, 0xF0, 0xB5,
-	0x00, 0x00, 0xD0, 0x00, 0x80, 0x04, 0x46, 0x0F,
-	0x20, 0xFF, 0xF7, 0x80, 0xFF, 0x21, 0x46, 0x02,
-	0x20, 0xFF, 0xF7, 0x07, 0xFD, 0x16, 0x21, 0xF4,
-	0x4D, 0x48, 0x43, 0x2A, 0x5A, 0xF3, 0x49, 0x44,
-	0x19, 0x0A, 0x86, 0xA2, 0x78, 0x8A, 0x75, 0xF2,
-	0x4E, 0xF2, 0x4F, 0x00, 0x21, 0x2A, 0x5A, 0x01,
-	0x23, 0x8B, 0x40, 0x1A, 0x42, 0x06, 0xD0, 0x62,
-	0x18, 0x53, 0x7B, 0x12, 0x79, 0xB2, 0x5C, 0x92,
-	0x00, 0xD2, 0x19, 0x13, 0x60, 0x49, 0x1C, 0x08,
-	0x29, 0xF0, 0xD3, 0xF0, 0xBD, 0x10, 0xB5, 0xE7,
-	0x49, 0xEA, 0x4B, 0x49, 0x79, 0x09, 0x18, 0xCA,
-	0x00, 0x89, 0x18, 0xE7, 0x4A, 0x00, 0x20, 0x12,
-	0x68, 0x8A, 0x18, 0x11, 0x18, 0x09, 0x7B, 0x0C,
-	0x02, 0x0C, 0x43, 0x81, 0x00, 0xC9, 0x18, 0x4C,
-	0x61, 0x40, 0x1C, 0x09, 0x28, 0xF5, 0xD3, 0x10,
-	0xBD, 0xF0, 0xB5, 0xE1, 0x4C, 0x62, 0x7C, 0xDB,
-	0x4B, 0x00, 0x2A, 0x01, 0xD1,
-	0x00, 0x00, 0xD1, 0x00, 0x80, 0x01, 0x22, 0x00,
-	0xE0, 0x1A, 0x7D, 0x94, 0x46, 0x62, 0x7C, 0x00,
-	0x2A, 0x01, 0xD1, 0xC2, 0x1C, 0x03, 0xE0, 0x5A,
-	0x78, 0xDC, 0x7C, 0x12, 0x1B, 0x12, 0x18, 0xD2,
-	0xB2, 0x96, 0x46, 0xD8, 0x4D, 0x00, 0x22, 0x0C,
-	0x01, 0x66, 0x19, 0x9C, 0x78, 0x73, 0x46, 0x03,
-	0x2A, 0x02, 0xD2, 0x63, 0x46, 0x53, 0x43, 0x1B,
-	0x18, 0xDB, 0xB2, 0xFF, 0x29, 0x01, 0xD1, 0x0F,
-	0x25, 0x01, 0xE0, 0x95, 0x00, 0x75, 0x59, 0xCA,
-	0x4F, 0xE3, 0x18, 0xFB, 0x5C, 0xC9, 0x4F, 0x9B,
-	0x00, 0xDB, 0x19, 0x1D, 0x60, 0x52, 0x1C, 0xD2,
-	0xB2, 0x04, 0x2A, 0xE7, 0xD3, 0xF0, 0xBD, 0xF0,
-	0xB5, 0xC7, 0x4A, 0xC9, 0x49, 0x60, 0x3A, 0x13,
-	0x6A, 0xC1, 0x4A, 0x52, 0x1E, 0x9A, 0x5C, 0x93,
-	0x00, 0xC0, 0x4A, 0x9A, 0x18, 0x13, 0x68, 0x96,
-	0x46, 0x9C, 0x46, 0x0C, 0x23, 0x13, 0x60, 0xBF,
-	0x4A, 0x80, 0x3A, 0x13, 0x68,
-	0x00, 0x00, 0xD2, 0x00, 0x80, 0x97, 0x68, 0x94,
-	0x6A, 0x15, 0x68, 0x01, 0x26, 0xB6, 0x02, 0xB5,
-	0x43, 0x15, 0x60, 0xFF, 0x25, 0x02, 0x35, 0x95,
-	0x60, 0x00, 0x28, 0x06, 0xD0, 0x95, 0x6A, 0xBB,
-	0x4E, 0x35, 0x40, 0x05, 0x43, 0x00, 0x04, 0x05,
-	0x43, 0x95, 0x62, 0x07, 0x20, 0xD0, 0x60, 0x15,
-	0x68, 0x01, 0x26, 0xB6, 0x07, 0x35, 0x43, 0x15,
-	0x60, 0xD5, 0x68, 0xED, 0x07, 0x01, 0xD1, 0x49,
-	0x1E, 0xFA, 0xD2, 0xD0, 0x60, 0x60, 0x46, 0x71,
-	0x46, 0x08, 0x60, 0x13, 0x60, 0x97, 0x60, 0x94,
-	0x62, 0xF0, 0xBD, 0xF0, 0xB5, 0xD3, 0x00, 0xD2,
-	0x18, 0xAD, 0x4B, 0xA5, 0x4E, 0xD4, 0x18, 0x02,
-	0x25, 0xA4, 0x4F, 0x0D, 0xE0, 0xC2, 0x08, 0xA3,
-	0x5C, 0x42, 0x07, 0x52, 0x0F, 0xD3, 0x40, 0x2A,
-	0x46, 0xDB, 0x07, 0x00, 0xD1, 0x01, 0x22, 0x33,
-	0x5C, 0x9B, 0x00, 0xDB, 0x19, 0x1A, 0x60, 0x40,
-	0x1C, 0x88, 0x42, 0xEF, 0xD3,
-	0x00, 0x00, 0xD3, 0x00, 0x80, 0xF0, 0xBD, 0xF8,
-	0xB5, 0x98, 0x4B, 0x05, 0x46, 0x01, 0x46, 0x18,
-	0x7B, 0xFF, 0xF7, 0x47, 0xFC, 0x04, 0x46, 0x18,
-	0x7B, 0x02, 0x28, 0x00, 0xD0, 0x0F, 0x20, 0xFF,
-	0xF7, 0xB5, 0xFE, 0x16, 0x20, 0x44, 0x43, 0x90,
-	0x48, 0x00, 0x21, 0x91, 0x4F, 0x91, 0x4E, 0x20,
-	0x18, 0x8D, 0x4A, 0x12, 0x5B, 0x01, 0x23, 0x8B,
-	0x40, 0x1A, 0x42, 0x06, 0xD0, 0x42, 0x18, 0x53,
-	0x7B, 0x12, 0x79, 0xBA, 0x5C, 0x92, 0x00, 0x92,
-	0x19, 0x13, 0x60, 0x49, 0x1C, 0x08, 0x29, 0xEF,
-	0xD3, 0x86, 0x49, 0x8B, 0x4C, 0x09, 0x7B, 0x60,
-	0x3C, 0x02, 0x29, 0x01, 0xD1, 0xC0, 0x78, 0x03,
-	0xE0, 0x04, 0x29, 0x18, 0xD1, 0x8B, 0x48, 0x40,
-	0x5D, 0xFF, 0x28, 0x03, 0xD0, 0x0C, 0x22, 0x80,
-	0x00, 0x80, 0x19, 0x02, 0x60, 0x04, 0x29, 0x0E,
-	0xD1, 0x20, 0x6B, 0xEA, 0x07, 0x40, 0x00, 0xD2,
-	0x0F, 0xA8, 0x42, 0x04, 0xD9,
-	0x00, 0x00, 0xD4, 0x00, 0x80, 0xE0, 0x69, 0xA1,
-	0x69, 0x41, 0x18, 0xE0, 0x69, 0x01, 0xE0, 0xE1,
-	0x69, 0x00, 0x20, 0xFF, 0xF7, 0x9E, 0xFF, 0x75,
-	0x48, 0x00, 0x7B, 0x08, 0x28, 0x0E, 0xD1, 0xE0,
-	0x69, 0xA1, 0x69, 0x40, 0x18, 0xA1, 0x6A, 0x40,
-	0x18, 0x75, 0x49, 0x20, 0x39, 0x09, 0x6A, 0x01,
-	0x29, 0x04, 0xD0, 0x38, 0x5C, 0x01, 0x21, 0x80,
-	0x00, 0x80, 0x19, 0x01, 0x60, 0xF8, 0xBD, 0xFE,
-	0xB5, 0x6F, 0x4A, 0x14, 0x25, 0x60, 0x3A, 0xD0,
-	0x6A, 0x01, 0x90, 0x68, 0x48, 0x00, 0x21, 0x44,
-	0x78, 0x86, 0x78, 0x41, 0x73, 0x01, 0x72, 0x81,
-	0x71, 0xC1, 0x71, 0xC1, 0x70, 0xC1, 0x73, 0x41,
-	0x74, 0x63, 0x1E, 0x83, 0x74, 0x41, 0x75, 0xC1,
-	0x72, 0x11, 0x6A, 0x49, 0x1E, 0x81, 0x72, 0x00,
-	0x20, 0xFF, 0xF7, 0x89, 0xFF, 0x00, 0x20, 0xFF,
-	0xF7, 0xE9, 0xFE, 0x03, 0xF0, 0xED, 0xFF, 0x00,
-	0x20, 0x04, 0xF0, 0x14, 0xF8,
-	0x00, 0x00, 0xD5, 0x00, 0x80, 0x04, 0xF0, 0x04,
-	0xF8, 0x5D, 0x4F, 0x20, 0x3F, 0x38, 0x69, 0x00,
-	0x28, 0x08, 0xD0, 0x56, 0x4A, 0x56, 0x49, 0x92,
-	0x7A, 0x0C, 0x20, 0x89, 0x5C, 0x55, 0x4A, 0x89,
-	0x00, 0x89, 0x18, 0x08, 0x60, 0xF8, 0x69, 0x02,
-	0x28, 0x07, 0xD1, 0x00, 0x21, 0x08, 0x46, 0xFF,
-	0xF7, 0xE3, 0xFE, 0xE4, 0x1C, 0xA4, 0x08, 0xA4,
-	0x00, 0x06, 0xE0, 0x4D, 0x49, 0x4D, 0x4A, 0x89,
-	0x5D, 0x01, 0x20, 0x89, 0x00, 0x89, 0x18, 0x08,
-	0x60, 0x01, 0x98, 0x60, 0x43, 0x47, 0x4C, 0xA0,
-	0x73, 0x4B, 0x48, 0xC0, 0x7B, 0xFF, 0xF7, 0x03,
-	0xFF, 0x48, 0x48, 0x4F, 0x49, 0x80, 0x38, 0xC1,
-	0x60, 0x02, 0xF0, 0x7C, 0xFF, 0x00, 0x90, 0x45,
-	0x48, 0x80, 0x38, 0x00, 0x68, 0x03, 0x21, 0x49,
-	0x07, 0x08, 0x43, 0x42, 0x49, 0x80, 0x39, 0x08,
-	0x60, 0x40, 0x48, 0x80, 0x38, 0x00, 0x68, 0x80,
-	0x00, 0x01, 0xD5, 0x6D, 0x1E,
-	0x00, 0x00, 0xD6, 0x00, 0x80, 0xF8, 0xD2, 0xF8,
-	0x69, 0x02, 0x28, 0x05, 0xD1, 0x01, 0x21, 0x00,
-	0x20, 0xFF, 0xF7, 0xB2, 0xFE, 0x00, 0x20, 0x0C,
-	0xE0, 0x35, 0x4A, 0x0F, 0x20, 0x91, 0x5D, 0x8B,
-	0x00, 0x34, 0x49, 0x5B, 0x18, 0x18, 0x60, 0x92,
-	0x19, 0x52, 0x78, 0x01, 0x20, 0x92, 0x00, 0x51,
-	0x18, 0x08, 0x60, 0x60, 0x72, 0x01, 0x20, 0xFF,
-	0xF7, 0x89, 0xFE, 0x30, 0x48, 0x80, 0x38, 0x01,
-	0x68, 0x03, 0x22, 0x52, 0x07, 0x11, 0x43, 0x01,
-	0x60, 0x01, 0x69, 0x02, 0x22, 0x11, 0x43, 0x01,
-	0x61, 0x00, 0x98, 0x02, 0xF0, 0x47, 0xFF, 0xFE,
-	0xBD, 0x10, 0xB5, 0x24, 0x4C, 0x00, 0x21, 0xE1,
-	0x72, 0x61, 0x75, 0x2E, 0x49, 0x89, 0x69, 0x01,
-	0x22, 0x12, 0x03, 0x09, 0x02, 0x80, 0x18, 0x01,
-	0x43, 0x22, 0x48, 0x40, 0x30, 0x01, 0x60, 0x03,
-	0xF0, 0x6F, 0xFF, 0xA0, 0x79, 0xFF, 0xF7, 0x03,
-	0xFF, 0xA0, 0x79, 0xFF, 0xF7,
-	0x00, 0x00, 0xD7, 0x00, 0x80, 0x63, 0xFE, 0xA0,
-	0x79, 0x03, 0xF0, 0x90, 0xFF, 0x03, 0xF0, 0x80,
-	0xFF, 0x1A, 0x4C, 0x80, 0x3C, 0x20, 0x68, 0x00,
-	0x28, 0x02, 0xD0, 0x00, 0x20, 0xFF, 0xF7, 0x9F,
-	0xFE, 0x1D, 0x48, 0xE0, 0x60, 0x02, 0xF0, 0x1A,
-	0xFF, 0x21, 0x69, 0x02, 0x22, 0x11, 0x43, 0x21,
-	0x61, 0x21, 0x68, 0x03, 0x22, 0x52, 0x07, 0x11,
-	0x43, 0x21, 0x60, 0x02, 0xF0, 0x13, 0xFF, 0x10,
-	0xBD, 0x17, 0x49, 0x02, 0x20, 0x08, 0x70, 0x0E,
-	0x48, 0x60, 0x38, 0x41, 0x6B, 0x02, 0x6B, 0x8A,
-	0x18, 0x06, 0x49, 0x8A, 0x73, 0x00, 0x6B, 0x88,
-	0x71, 0xC0, 0xB2, 0x40, 0x1C, 0xC8, 0x71, 0x11,
-	0x48, 0x00, 0x78, 0xB9, 0xE7, 0x00, 0x0F, 0x08,
-	0x08, 0x2C, 0xE1, 0x00, 0x00, 0x6C, 0x01, 0x00,
-	0x20, 0xC0, 0xE0, 0x00, 0x00, 0x00, 0x04, 0x11,
-	0x40, 0x3C, 0x03, 0x00, 0x20, 0x80, 0x00, 0x11,
-	0x40, 0xE8, 0xDF, 0x00, 0x00,
-	0x00, 0x00, 0xD8, 0x00, 0x80, 0x98, 0xCD, 0x00,
-	0x00, 0x88, 0x90, 0x00, 0x00, 0x00, 0xFF, 0x00,
-	0xFF, 0x18, 0xE1, 0x00, 0x00, 0x04, 0xE1, 0x00,
-	0x00, 0xFF, 0x03, 0x00, 0x00, 0x54, 0xE0, 0x00,
-	0x00, 0xAC, 0x02, 0x00, 0x20, 0x36, 0x03, 0x00,
-	0x20, 0xFD, 0x48, 0x01, 0x21, 0x01, 0x70, 0xFD,
-	0x48, 0x02, 0x6B, 0xFD, 0x48, 0x82, 0x73, 0x00,
-	0x22, 0x82, 0x71, 0xC1, 0x71, 0xFB, 0x48, 0x00,
-	0x78, 0x8A, 0xE7, 0xFB, 0x49, 0x08, 0x70, 0xC1,
-	0x07, 0x00, 0xD0, 0xED, 0xE7, 0x80, 0x07, 0x00,
-	0xD5, 0xB6, 0xE7, 0x70, 0x47, 0x70, 0x47, 0xF0,
-	0xB5, 0x00, 0x21, 0x08, 0x20, 0xFF, 0xF7, 0xE1,
-	0xFA, 0xF4, 0x4C, 0x16, 0x22, 0x00, 0x21, 0xF4,
-	0x4D, 0xF4, 0x4F, 0x50, 0x43, 0x06, 0x19, 0x22,
-	0x5A, 0x01, 0x23, 0x8B, 0x40, 0x1A, 0x42, 0x06,
-	0xD0, 0x72, 0x18, 0x53, 0x7B, 0x12, 0x79, 0xAA,
-	0x5C, 0x92, 0x00, 0xD2, 0x19,
-	0x00, 0x00, 0xD9, 0x00, 0x80, 0x13, 0x60, 0x49,
-	0x1C, 0x08, 0x29, 0xF0, 0xD3, 0xE5, 0x48, 0x40,
-	0x30, 0x00, 0x6A, 0x03, 0x28, 0x0A, 0xD1, 0xE3,
-	0x48, 0xC1, 0x69, 0x82, 0x69, 0x80, 0x6A, 0x89,
-	0x18, 0x08, 0x18, 0x28, 0x5C, 0x02, 0x21, 0x80,
-	0x00, 0xC0, 0x19, 0x01, 0x60, 0xF0, 0xBD, 0x10,
-	0xB5, 0xDD, 0x4C, 0x00, 0x20, 0x60, 0x75, 0xFF,
-	0xF7, 0x83, 0xFC, 0xE0, 0x8D, 0x60, 0x85, 0xFF,
-	0xF7, 0xCA, 0xFF, 0x01, 0x20, 0xFF, 0xF7, 0xC2,
-	0xFD, 0xDD, 0x48, 0xA0, 0x63, 0xDE, 0x48, 0xDD,
-	0x49, 0xC1, 0x60, 0x01, 0x68, 0x82, 0x03, 0x11,
-	0x43, 0x01, 0x60, 0x01, 0x69, 0x02, 0x22, 0x11,
-	0x43, 0x01, 0x61, 0x10, 0xBD, 0x10, 0xB5, 0xD0,
-	0x4A, 0x00, 0x20, 0x50, 0x75, 0xCD, 0x49, 0xD0,
-	0x72, 0x40, 0x31, 0x0B, 0x6A, 0x14, 0x46, 0x2C,
-	0x20, 0x20, 0x5E, 0x03, 0x2B, 0x01, 0xD1, 0xD3,
-	0x49, 0x03, 0xE0, 0x0B, 0x6A,
-	0x00, 0x00, 0xDA, 0x00, 0x80, 0xCE, 0x49, 0x02,
-	0x2B, 0x06, 0xD1, 0x91, 0x63, 0x50, 0x85, 0x00,
-	0x20, 0xFF, 0xF7, 0x39, 0xFE, 0x00, 0x20, 0x05,
-	0xE0, 0x91, 0x63, 0xD0, 0x8D, 0x50, 0x85, 0xFF,
-	0xF7, 0x9A, 0xFF, 0x01, 0x20, 0xFF, 0xF7, 0x92,
-	0xFD, 0x00, 0x21, 0x08, 0x20, 0xFF, 0xF7, 0x79,
-	0xFA, 0x16, 0x21, 0x48, 0x43, 0xBF, 0x49, 0x08,
-	0x5A, 0x02, 0x04, 0xC3, 0x48, 0x01, 0x68, 0xFF,
-	0x23, 0x1B, 0x04, 0x99, 0x43, 0x0A, 0x43, 0x02,
-	0x60, 0xBE, 0x49, 0xC1, 0x60, 0x01, 0x68, 0x82,
-	0x03, 0x11, 0x43, 0x01, 0x60, 0x01, 0x69, 0x02,
-	0x22, 0x11, 0x43, 0x01, 0x61, 0x10, 0xBD, 0x70,
-	0xB5, 0x05, 0x46, 0xB0, 0x48, 0x02, 0x6B, 0xB0,
-	0x49, 0x20, 0x31, 0x48, 0x79, 0x82, 0x42, 0x00,
-	0xD8, 0x88, 0x79, 0xFF, 0xF7, 0x46, 0xFD, 0x03,
-	0xF0, 0x6F, 0xFE, 0xAB, 0x4E, 0x30, 0x8E, 0x03,
-	0xF0, 0x87, 0xFE, 0xB1, 0x4C,
-	0x00, 0x00, 0xDB, 0x00, 0x80, 0x20, 0x68, 0x00,
-	0x28, 0x02, 0xD0, 0x00, 0x20, 0xFF, 0xF7, 0xA7,
-	0xFD, 0x03, 0xF0, 0x5C, 0xFE, 0x00, 0x21, 0x00,
-	0x28, 0x03, 0xD0, 0xAD, 0x48, 0x00, 0x78, 0x01,
-	0x28, 0x05, 0xD1, 0x71, 0x77, 0x71, 0x86, 0xB1,
-	0x77, 0xAA, 0x48, 0xF1, 0x63, 0x01, 0x60, 0x00,
-	0x2D, 0x0E, 0xD0, 0x71, 0x75, 0xF1, 0x72, 0xB5,
-	0x73, 0xA2, 0x48, 0xE0, 0x60, 0x20, 0x68, 0x03,
-	0x21, 0x49, 0x07, 0x08, 0x43, 0x20, 0x60, 0x20,
-	0x69, 0x02, 0x21, 0x08, 0x43, 0x20, 0x61, 0x70,
-	0xBD, 0x01, 0x20, 0x70, 0x75, 0x70, 0xBD, 0x10,
-	0xB5, 0x9B, 0x48, 0x41, 0x68, 0x92, 0x4C, 0x09,
-	0x07, 0x09, 0x0F, 0x01, 0x29, 0x04, 0xD0, 0x98,
-	0x49, 0xC0, 0x31, 0x49, 0x68, 0xC9, 0x00, 0x0C,
-	0xD4, 0x01, 0x69, 0x02, 0x22, 0x91, 0x43, 0x01,
-	0x61, 0xD1, 0x1E, 0xC1, 0x60, 0x05, 0x20, 0xFC,
-	0xF7, 0x12, 0xFC, 0x8F, 0x48,
-	0x00, 0x00, 0xDC, 0x00, 0x80, 0x60, 0x63, 0x01,
-	0x20, 0x10, 0xBD, 0x60, 0x7D, 0x10, 0xBD, 0xF3,
-	0xB5, 0x8E, 0x46, 0x85, 0x48, 0x00, 0x21, 0x01,
-	0x74, 0xFF, 0x21, 0xC1, 0x73, 0x81, 0x48, 0x00,
-	0x22, 0x84, 0x46, 0x1E, 0xE0, 0x16, 0x21, 0x16,
-	0x46, 0x4E, 0x43, 0x82, 0x49, 0x00, 0x20, 0x77,
-	0x18, 0xD3, 0xB2, 0x3C, 0x18, 0x25, 0x79, 0x00,
-	0x99, 0x8D, 0x42, 0x0E, 0xD3, 0x7D, 0x4D, 0x24,
-	0x79, 0x74, 0x45, 0x0A, 0xD8, 0xAC, 0x5B, 0x01,
-	0x25, 0x85, 0x40, 0x2C, 0x42, 0x05, 0xD0, 0x76,
-	0x4C, 0xE5, 0x7B, 0xFF, 0x2D, 0x00, 0xD1, 0xE3,
-	0x73, 0x23, 0x74, 0x40, 0x1C, 0x08, 0x28, 0xE8,
-	0xD3, 0x52, 0x1C, 0x60, 0x46, 0xC0, 0x6A, 0x90,
-	0x42, 0xDC, 0xD8, 0xFC, 0xBD, 0xFF, 0xB5, 0x6E,
-	0x4D, 0x04, 0x46, 0xAF, 0x78, 0x87, 0xB0, 0x10,
-	0x46, 0x3A, 0x19, 0x19, 0x46, 0x14, 0x26, 0x02,
-	0x97, 0x01, 0x92, 0xFF, 0xF7,
-	0x00, 0x00, 0xDD, 0x00, 0x80, 0xC4, 0xFF, 0x00,
-	0x21, 0x69, 0x73, 0xE0, 0xB2, 0x06, 0x90, 0x28,
-	0x72, 0xE8, 0x7B, 0xA8, 0x71, 0xE8, 0x71, 0xE9,
-	0x70, 0x06, 0x98, 0x68, 0x74, 0x08, 0x98, 0xA8,
-	0x74, 0x69, 0x75, 0xE9, 0x72, 0xA8, 0x79, 0xFF,
-	0xF7, 0x6E, 0xFD, 0x68, 0x78, 0xE9, 0x7B, 0x48,
-	0x43, 0x00, 0x19, 0x03, 0x90, 0xFF, 0xF7, 0xCA,
-	0xFC, 0x03, 0xF0, 0xCE, 0xFD, 0x59, 0x4F, 0x40,
-	0x37, 0x39, 0x69, 0x38, 0x46, 0x20, 0x30, 0x05,
-	0x90, 0x00, 0x29, 0x1C, 0xD0, 0x68, 0x78, 0x40,
-	0x08, 0xA0, 0x42, 0x0A, 0xD8, 0xF8, 0x69, 0x02,
-	0x28, 0x0B, 0xD1, 0x05, 0x98, 0x40, 0x7C, 0x00,
-	0x28, 0x07, 0xD0, 0xE8, 0x7C, 0x40, 0x08, 0xA0,
-	0x42, 0x03, 0xD9, 0x4E, 0x48, 0x00, 0x6A, 0x40,
-	0x1E, 0x00, 0xE0, 0x02, 0x98, 0xA8, 0x72, 0x50,
-	0x49, 0xAA, 0x7A, 0x0C, 0x20, 0x89, 0x5C, 0x4F,
-	0x4A, 0x89, 0x00, 0x89, 0x18,
-	0x00, 0x00, 0xDE, 0x00, 0x80, 0x08, 0x60, 0xF8,
-	0x69, 0x08, 0x99, 0x09, 0x1B, 0x04, 0x91, 0x02,
-	0x28, 0x0E, 0xD1, 0xE0, 0xB2, 0x00, 0x21, 0xFF,
-	0xF7, 0xAF, 0xFC, 0x04, 0x98, 0x29, 0x7C, 0x00,
-	0x1D, 0xEA, 0x7B, 0x80, 0x08, 0x89, 0x1A, 0x80,
-	0x00, 0x49, 0x1C, 0x41, 0x43, 0xA9, 0x73, 0x0F,
-	0xE0, 0x41, 0x4A, 0x01, 0x98, 0x01, 0x21, 0x10,
-	0x5C, 0x40, 0x4A, 0x80, 0x00, 0x80, 0x18, 0x01,
-	0x60, 0x28, 0x7C, 0xE9, 0x7B, 0x40, 0x1A, 0x04,
-	0x99, 0x40, 0x1C, 0x49, 0x1C, 0x48, 0x43, 0xA8,
-	0x73, 0x05, 0x98, 0xC0, 0x7B, 0xFF, 0xF7, 0xC3,
-	0xFC, 0x3B, 0x49, 0x3A, 0x48, 0xC8, 0x60, 0x02,
-	0xF0, 0x3D, 0xFD, 0x00, 0x90, 0x38, 0x48, 0x00,
-	0x68, 0x03, 0x21, 0x49, 0x07, 0x08, 0x43, 0x36,
-	0x49, 0x08, 0x60, 0x35, 0x48, 0x00, 0x68, 0x80,
-	0x00, 0x01, 0xD5, 0x76, 0x1E, 0xF9, 0xD2, 0x03,
-	0x98, 0x40, 0x1C, 0xFF, 0xF7,
-	0x00, 0x00, 0xDF, 0x00, 0x80, 0x63, 0xFC, 0xF8,
-	0x69, 0x0F, 0x26, 0x02, 0x28, 0x06, 0xD1, 0xE0,
-	0xB2, 0x01, 0x21, 0xFF, 0xF7, 0x71, 0xFC, 0x06,
-	0x98, 0x68, 0x72, 0x0F, 0xE0, 0x26, 0x48, 0x01,
-	0x99, 0x26, 0x4B, 0x41, 0x5C, 0x89, 0x00, 0xC9,
-	0x18, 0x0E, 0x60, 0x01, 0x9A, 0x01, 0x21, 0x80,
-	0x18, 0x40, 0x78, 0x80, 0x00, 0xC0, 0x18, 0x01,
-	0x60, 0x64, 0x1C, 0x6C, 0x72, 0x38, 0x69, 0x00,
-	0x28, 0x1E, 0xD0, 0x68, 0x78, 0x41, 0x08, 0x68,
-	0x7A, 0x81, 0x42, 0x0A, 0xD0, 0xF9, 0x69, 0x02,
-	0x29, 0x16, 0xD1, 0x05, 0x99, 0x49, 0x7C, 0x00,
-	0x29, 0x12, 0xD0, 0xE9, 0x7C, 0x49, 0x08, 0x81,
-	0x42, 0x0E, 0xD9, 0x15, 0x49, 0xA8, 0x7A, 0x15,
-	0x4A, 0x08, 0x5C, 0x80, 0x00, 0x80, 0x18, 0x06,
-	0x60, 0x02, 0x98, 0x0C, 0x23, 0xC0, 0xB2, 0xA8,
-	0x72, 0x08, 0x5C, 0x80, 0x00, 0x80, 0x18, 0x03,
-	0x60, 0x11, 0x48, 0x01, 0x68,
-	0x00, 0x00, 0xE0, 0x00, 0x80, 0x03, 0x22, 0x52,
-	0x07, 0x11, 0x43, 0x01, 0x60, 0x01, 0x69, 0x02,
-	0x22, 0x11, 0x43, 0x01, 0x61, 0x00, 0x98, 0x02,
-	0xF0, 0xE5, 0xFC, 0x0B, 0xB0, 0xF0, 0xBD, 0x00,
-	0x00, 0xAC, 0x02, 0x00, 0x20, 0x88, 0xDF, 0x00,
-	0x00, 0x6C, 0x01, 0x00, 0x20, 0x35, 0x03, 0x00,
-	0x20, 0xAB, 0x02, 0x00, 0x20, 0x2C, 0xE1, 0x00,
-	0x00, 0xC0, 0xE0, 0x00, 0x00, 0x00, 0x04, 0x11,
-	0x40, 0x49, 0x5F, 0x00, 0x00, 0xFF, 0x03, 0x00,
-	0x00, 0x00, 0x00, 0x11, 0x40, 0xAB, 0x6C, 0x00,
-	0x00, 0xA8, 0x02, 0x00, 0x20, 0xB0, 0x02, 0x00,
-	0x20, 0x84, 0x49, 0x00, 0x28, 0x00, 0xD1, 0x84,
-	0x48, 0x48, 0x63, 0x70, 0x47, 0x00, 0x28, 0x01,
-	0xD0, 0x80, 0x49, 0x08, 0x64, 0x70, 0x47, 0x00,
-	0x28, 0x01, 0xD0, 0x7E, 0x49, 0x48, 0x64, 0x70,
-	0x47, 0x00, 0x28, 0x01, 0xD0, 0x7B, 0x49, 0x88,
-	0x64, 0x70, 0x47, 0x7A, 0x49,
-	0x00, 0x00, 0xE1, 0x00, 0x80, 0xC8, 0x75, 0x08,
-	0x76, 0x7A, 0x48, 0x02, 0x6A, 0x7A, 0x48, 0x02,
-	0x40, 0xC8, 0x7D, 0x02, 0x43, 0x00, 0x04, 0x02,
-	0x43, 0x78, 0x48, 0x82, 0x62, 0x70, 0x47, 0x73,
-	0x49, 0x74, 0x4A, 0x48, 0x76, 0xD3, 0x6D, 0xDB,
-	0xB2, 0x83, 0x42, 0x00, 0xD3, 0xD0, 0x6D, 0x88,
-	0x76, 0x72, 0x48, 0x82, 0x68, 0x49, 0x7E, 0x12,
-	0x0A, 0x12, 0x02, 0x0A, 0x43, 0x82, 0x60, 0x70,
-	0x47, 0x10, 0xB5, 0x6A, 0x49, 0x6D, 0x4A, 0xC8,
-	0x76, 0x90, 0x68, 0xFF, 0x23, 0xC9, 0x7E, 0x1B,
-	0x02, 0x98, 0x43, 0x09, 0x02, 0x08, 0x43, 0x90,
-	0x60, 0xFE, 0xF7, 0xB5, 0xFF, 0x10, 0xBD, 0x10,
-	0xB5, 0x62, 0x4C, 0x66, 0x4A, 0x20, 0x77, 0x91,
-	0x68, 0xFF, 0x23, 0x1B, 0x02, 0x99, 0x43, 0xC3,
-	0xB2, 0x1B, 0x02, 0x19, 0x43, 0x91, 0x60, 0x64,
-	0x21, 0x41, 0x43, 0x61, 0x48, 0x40, 0x68, 0x80,
-	0x03, 0x05, 0xF0, 0x81, 0xFC,
-	0x00, 0x00, 0xE2, 0x00, 0x80, 0x20, 0x85, 0x10,
-	0xBD, 0x58, 0x48, 0x40, 0x7F, 0x70, 0x47, 0x57,
-	0x48, 0x20, 0x30, 0x80, 0x78, 0x70, 0x47, 0x55,
-	0x48, 0x20, 0x30, 0xC0, 0x78, 0x70, 0x47, 0x53,
-	0x48, 0x20, 0x30, 0x00, 0x79, 0x70, 0x47, 0x51,
-	0x48, 0x80, 0x7F, 0xC0, 0x07, 0xC0, 0x0F, 0x70,
-	0x47, 0x4E, 0x48, 0x40, 0x8E, 0xC0, 0xB2, 0x70,
-	0x47, 0x4C, 0x48, 0x02, 0x21, 0x80, 0x7F, 0x08,
-	0x40, 0x70, 0x47, 0x10, 0xB5, 0x04, 0x00, 0x04,
-	0xD0, 0x20, 0x78, 0xFF, 0xF7, 0xB9, 0xFF, 0x64,
-	0x78, 0x0F, 0xE0, 0x48, 0x48, 0x80, 0x68, 0x00,
-	0x04, 0x00, 0x0E, 0xFF, 0xF7, 0xB1, 0xFF, 0x48,
-	0x48, 0x20, 0x30, 0xC0, 0x79, 0xC0, 0x07, 0x01,
-	0xD0, 0x04, 0x24, 0x00, 0xE0, 0x00, 0x24, 0x02,
-	0x20, 0x04, 0x43, 0x60, 0x07, 0x02, 0xD5, 0x03,
-	0xF0, 0x61, 0xFC, 0x01, 0xE0, 0x03, 0xF0, 0x62,
-	0xFC, 0x40, 0x48, 0xA1, 0x07,
-	0x00, 0x00, 0xE3, 0x00, 0x80, 0x01, 0xD4, 0x01,
-	0x21, 0x00, 0xE0, 0x00, 0x21, 0x41, 0x70, 0x10,
-	0xBD, 0x70, 0xB5, 0x36, 0x4D, 0x04, 0x00, 0x0B,
-	0xD0, 0x20, 0x78, 0xFF, 0xF7, 0x72, 0xFF, 0xA0,
-	0x78, 0x00, 0x07, 0x00, 0x0E, 0xE8, 0x77, 0xE0,
-	0x78, 0xFF, 0xF7, 0x79, 0xFF, 0x60, 0x78, 0x0F,
-	0xE0, 0x30, 0x4B, 0x18, 0x6A, 0xC0, 0xB2, 0xFF,
-	0xF7, 0x64, 0xFF, 0xD8, 0x68, 0xF0, 0x21, 0x08,
-	0x40, 0xE8, 0x77, 0x98, 0x68, 0xC0, 0xB2, 0xFF,
-	0xF7, 0x6A, 0xFF, 0x2D, 0x48, 0x00, 0x68, 0xC0,
-	0xB2, 0x00, 0xF0, 0x46, 0xF8, 0x70, 0xBD, 0x2A,
-	0x49, 0x10, 0xB5, 0x00, 0x22, 0x40, 0x39, 0xCB,
-	0x6A, 0x83, 0x42, 0x01, 0xD9, 0x02, 0x46, 0x27,
-	0xE0, 0xCB, 0x6A, 0x8C, 0x6B, 0x1B, 0x19, 0x83,
-	0x42, 0x01, 0xD9, 0xC9, 0x6A, 0x1F, 0xE0, 0xCB,
-	0x6A, 0x8C, 0x6B, 0x1B, 0x19, 0xCC, 0x6B, 0x1B,
-	0x19, 0x83, 0x42, 0x05, 0xD9,
-	0x00, 0x00, 0xE4, 0x00, 0x80, 0xCA, 0x6A, 0x89,
-	0x6B, 0x80, 0x1A, 0x40, 0x1A, 0x42, 0x08, 0x13,
-	0xE0, 0xCB, 0x6A, 0x8C, 0x6B, 0x1C, 0x19, 0xCB,
-	0x6B, 0x5B, 0x1C, 0xE3, 0x18, 0x83, 0x42, 0x07,
-	0xD8, 0xCB, 0x6A, 0x8C, 0x6B, 0x1C, 0x19, 0xCB,
-	0x6B, 0x9B, 0x1C, 0xE3, 0x18, 0x83, 0x42, 0x03,
-	0xD9, 0xCA, 0x6A, 0xC9, 0x6B, 0x80, 0x1A, 0x42,
-	0x1A, 0x10, 0x46, 0x10, 0xBD, 0x0B, 0x49, 0x02,
-	0x46, 0x09, 0x7B, 0x00, 0x20, 0x04, 0x29, 0x0A,
-	0xD1, 0x0D, 0x49, 0x40, 0x39, 0xCB, 0x6A, 0xD2,
-	0x1A, 0x8B, 0x6B, 0xD2, 0x1A, 0xD2, 0x07, 0x02,
-	0xD0, 0xC8, 0x69, 0x89, 0x69, 0x40, 0x18, 0x70,
-	0x47, 0x10, 0xB5, 0x08, 0x49, 0x08, 0x70, 0xFE,
-	0xF7, 0xEE, 0xFE, 0x10, 0xBD, 0x6C, 0x01, 0x00,
-	0x20, 0x49, 0x5F, 0x00, 0x00, 0x48, 0xDE, 0x00,
-	0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x11,
-	0x40, 0xC8, 0xDF, 0x00, 0x00,
-	0x00, 0x00, 0xE5, 0x00, 0x80, 0x8C, 0x01, 0x00,
-	0x20, 0xF8, 0x48, 0x00, 0x7B, 0xF8, 0x49, 0x08,
-	0x71, 0x70, 0x47, 0x00, 0xB5, 0xF6, 0x4A, 0x10,
-	0x78, 0x00, 0x28, 0x03, 0xD1, 0xFF, 0xF7, 0xF4,
-	0xFF, 0x01, 0x20, 0x10, 0x70, 0x00, 0xBD, 0xF2,
-	0x49, 0x00, 0x28, 0x02, 0xD1, 0xEF, 0x48, 0x1C,
-	0x38, 0x03, 0xE0, 0x02, 0x28, 0x03, 0xD1, 0xED,
-	0x48, 0x10, 0x38, 0xC8, 0x63, 0x70, 0x47, 0x01,
-	0x28, 0xFC, 0xD1, 0xEA, 0x48, 0x00, 0x1F, 0xF8,
-	0xE7, 0xE8, 0x49, 0xE9, 0x4A, 0x00, 0x28, 0x01,
-	0xD1, 0x08, 0x7B, 0x02, 0xE0, 0x02, 0x28, 0x01,
-	0xD1, 0x48, 0x7C, 0x10, 0x71, 0x70, 0x47, 0xFF,
-	0xB5, 0x8D, 0xB0, 0x00, 0x20, 0x06, 0x90, 0x05,
-	0x90, 0x01, 0x20, 0xE1, 0x4C, 0x03, 0x90, 0xE0,
-	0x6B, 0x06, 0x88, 0x1A, 0x99, 0x01, 0x29, 0x0F,
-	0xD1, 0x03, 0xF0, 0xA8, 0xFB, 0x00, 0x28, 0x01,
-	0xD0, 0x02, 0x20, 0x03, 0x90,
-	0x00, 0x00, 0xE6, 0x00, 0x80, 0xE0, 0x6B, 0x01,
-	0x79, 0x06, 0x91, 0x05, 0x21, 0x41, 0x56, 0x70,
-	0x20, 0x06, 0x40, 0x36, 0x09, 0x05, 0x91, 0x16,
-	0xE0, 0x02, 0x29, 0x09, 0xD1, 0x81, 0x79, 0x06,
-	0x91, 0x07, 0x21, 0x41, 0x56, 0x07, 0x20, 0x00,
-	0x02, 0x06, 0x40, 0x36, 0x0A, 0x05, 0x91, 0x0A,
-	0xE0, 0x03, 0x29, 0x08, 0xD1, 0x01, 0x7A, 0x06,
-	0x91, 0x09, 0x21, 0x41, 0x56, 0x07, 0x20, 0x00,
-	0x03, 0x06, 0x40, 0x36, 0x0B, 0x05, 0x91, 0x00,
-	0x20, 0xF9, 0xE0, 0x00, 0x20, 0x02, 0x90, 0x10,
-	0x98, 0xED, 0xE0, 0xFF, 0xF7, 0x73, 0xFF, 0x01,
-	0x90, 0x09, 0x98, 0xFF, 0xF7, 0x3C, 0xFF, 0x16,
-	0x21, 0x48, 0x43, 0xC4, 0x49, 0x40, 0x18, 0x0A,
-	0x90, 0x00, 0x20, 0x08, 0x90, 0x04, 0x46, 0x05,
-	0x46, 0x07, 0x90, 0x0A, 0x98, 0x07, 0x88, 0x03,
-	0xF0, 0x69, 0xFB, 0x00, 0x28, 0x07, 0xD0, 0x04,
-	0x98, 0x00, 0x28, 0x02, 0xD1,
-	0x00, 0x00, 0xE7, 0x00, 0x80, 0x3F, 0x07, 0x3F,
-	0x0F, 0x01, 0xE0, 0xF0, 0x20, 0x07, 0x40, 0xF8,
-	0xB2, 0x86, 0x46, 0x17, 0x98, 0x00, 0x28, 0x3E,
-	0xD0, 0xF0, 0x07, 0x3C, 0xD0, 0x00, 0x20, 0xF9,
-	0x07, 0x22, 0xD0, 0x0A, 0x99, 0x09, 0x18, 0x09,
-	0x79, 0x01, 0x9A, 0x0E, 0x9B, 0x89, 0x18, 0x4A,
-	0x00, 0x9A, 0x5E, 0x0F, 0x9B, 0x59, 0x56, 0x0D,
-	0x9B, 0x51, 0x1A, 0x02, 0x9A, 0x82, 0x18, 0x52,
-	0x00, 0x9A, 0x5E, 0x51, 0x1A, 0x0A, 0x1E, 0x00,
-	0xDA, 0x4A, 0x42, 0x17, 0x9B, 0x9A, 0x42, 0x01,
-	0xDB, 0xFF, 0x2B, 0x09, 0xD1, 0x08, 0x9A, 0x64,
-	0x18, 0x52, 0x1C, 0x08, 0x92, 0x00, 0x29, 0x03,
-	0xDA, 0x07, 0x9A, 0x52, 0x1C, 0x6D, 0x18, 0x07,
-	0x92, 0x7F, 0x08, 0x40, 0x1C, 0x00, 0x2F, 0xD6,
-	0xD1, 0x08, 0x98, 0x01, 0x28, 0x0F, 0xDD, 0xA0,
-	0x49, 0x80, 0x00, 0x08, 0x58, 0x60, 0x43, 0x04,
-	0x12, 0x07, 0x98, 0x80, 0x00,
-	0x00, 0x00, 0xE8, 0x00, 0x80, 0x08, 0x58, 0x68,
-	0x43, 0x05, 0x12, 0x00, 0x2C, 0x00, 0xDA, 0x64,
-	0x1C, 0x00, 0x2D, 0x00, 0xDA, 0x6D, 0x1C, 0x00,
-	0x20, 0x84, 0x46, 0x70, 0x46, 0xC0, 0x07, 0x76,
-	0xD0, 0x0A, 0x99, 0x60, 0x46, 0x08, 0x18, 0x00,
-	0x79, 0x01, 0x99, 0x43, 0x18, 0x1A, 0x98, 0x03,
-	0x28, 0x04, 0xD1, 0x92, 0x48, 0xC1, 0x69, 0x80,
-	0x69, 0x08, 0x18, 0x1B, 0x1A, 0x02, 0x99, 0x60,
-	0x46, 0x40, 0x18, 0x0D, 0x99, 0x40, 0x00, 0x08,
-	0x5E, 0x59, 0x00, 0x0E, 0x9A, 0x0C, 0x91, 0x51,
-	0x5E, 0x0F, 0x9A, 0xF7, 0x07, 0xD2, 0x56, 0x0B,
-	0x92, 0x15, 0xD0, 0x8A, 0x1A, 0x90, 0x42, 0x02,
-	0xDB, 0x07, 0x1B, 0x97, 0x42, 0x04, 0xDB, 0x90,
-	0x42, 0x04, 0xDC, 0x07, 0x1B, 0x97, 0x42, 0x01,
-	0xDD, 0x10, 0x46, 0x08, 0xE0, 0x67, 0x1B, 0xFF,
-	0x1C, 0x06, 0x2F, 0x03, 0xD9, 0x90, 0x42, 0x01,
-	0xDC, 0x40, 0x1B, 0x00, 0xE0,
-	0x00, 0x00, 0xE9, 0x00, 0x80, 0x00, 0x1B, 0x72,
-	0x07, 0x10, 0xD5, 0x42, 0x1A, 0x88, 0x42, 0x00,
-	0xDC, 0x0A, 0x1A, 0x05, 0x9F, 0xBA, 0x42, 0x09,
-	0xDA, 0x06, 0x9A, 0x00, 0x2A, 0x02, 0xD1, 0x40,
-	0x18, 0x40, 0x10, 0x03, 0xE0, 0x4A, 0x00, 0x8A,
-	0x18, 0x10, 0x18, 0x80, 0x10, 0xB2, 0x07, 0x06,
-	0xD5, 0x88, 0x42, 0x01, 0xDD, 0x40, 0x1E, 0x02,
-	0xE0, 0x88, 0x42, 0x00, 0xDA, 0x40, 0x1C, 0x70,
-	0x4A, 0x90, 0x42, 0x02, 0xDC, 0xD2, 0x43, 0x90,
-	0x42, 0x00, 0xDA, 0x10, 0x46, 0x0B, 0x9A, 0x12,
-	0x18, 0x52, 0x1A, 0x7F, 0x2A, 0x09, 0xDD, 0x0B,
-	0x98, 0x0E, 0x9A, 0x08, 0x1A, 0x0C, 0x99, 0x7F,
-	0x30, 0x50, 0x52, 0x0F, 0x99, 0x7F, 0x20, 0xC8,
-	0x54, 0x11, 0xE0, 0x7F, 0x27, 0xFF, 0x43, 0xBA,
-	0x42, 0x08, 0xDA, 0x0B, 0x98, 0x0E, 0x9A, 0x08,
-	0x1A, 0x0C, 0x99, 0x80, 0x38, 0x50, 0x52, 0x0F,
-	0x98, 0xC7, 0x54, 0x04, 0xE0,
-	0x00, 0x00, 0xEA, 0x00, 0x80, 0x0E, 0x9F, 0x0C,
-	0x99, 0x78, 0x52, 0x0F, 0x98, 0xC2, 0x54, 0x70,
-	0x46, 0x40, 0x08, 0x86, 0x46, 0x60, 0x46, 0x40,
-	0x1C, 0x84, 0x46, 0x70, 0x46, 0x00, 0x28, 0x00,
-	0xD0, 0x7B, 0xE7, 0x02, 0x98, 0x08, 0x30, 0xC0,
-	0xB2, 0x02, 0x90, 0x09, 0x98, 0x40, 0x1C, 0x16,
-	0x99, 0x09, 0x90, 0x88, 0x42, 0x00, 0xD2, 0x0C,
-	0xE7, 0x04, 0x98, 0x40, 0x1C, 0xC0, 0xB2, 0x03,
-	0x99, 0x04, 0x90, 0x88, 0x42, 0x00, 0xD2, 0x00,
-	0xE7, 0x11, 0xB0, 0xF0, 0xBD, 0xF0, 0xB5, 0x0E,
-	0x46, 0x85, 0xB0, 0x4A, 0x49, 0x05, 0x46, 0x94,
-	0x46, 0x0B, 0x9F, 0x0A, 0x98, 0xCA, 0x6A, 0x8C,
-	0x6B, 0xC9, 0x6B, 0x12, 0x19, 0x54, 0x18, 0x03,
-	0x22, 0x61, 0x1C, 0x01, 0x93, 0x04, 0x92, 0x00,
-	0x91, 0x02, 0x90, 0x03, 0x97, 0x23, 0x46, 0x62,
-	0x46, 0x31, 0x46, 0x28, 0x46, 0xFF, 0xF7, 0xAF,
-	0xFE, 0x05, 0xB0, 0xF0, 0xBD,
-	0x00, 0x00, 0xEB, 0x00, 0x80, 0x7C, 0xB5, 0x3D,
-	0x4D, 0x06, 0x46, 0x40, 0x35, 0x28, 0x6A, 0x37,
-	0x4C, 0x01, 0x28, 0x0A, 0xD1, 0x36, 0x4A, 0x58,
-	0x32, 0x11, 0x46, 0x4E, 0x39, 0x01, 0x92, 0x00,
-	0x91, 0xE3, 0x7E, 0x08, 0x3A, 0x5A, 0x31, 0x30,
-	0x46, 0x19, 0xE0, 0x31, 0x4A, 0x54, 0x32, 0x11,
-	0x46, 0x4C, 0x39, 0x01, 0x92, 0x00, 0x91, 0xA3,
-	0x7E, 0x08, 0x3A, 0x54, 0x31, 0x30, 0x46, 0xFF,
-	0xF7, 0xC5, 0xFF, 0x28, 0x6A, 0x03, 0x28, 0x0C,
-	0xD1, 0x29, 0x4A, 0x58, 0x32, 0x11, 0x46, 0x4E,
-	0x39, 0x01, 0x92, 0x00, 0x91, 0xE3, 0x7E, 0x30,
-	0x46, 0x08, 0x3A, 0x5A, 0x31, 0x10, 0x30, 0xFF,
-	0xF7, 0xB5, 0xFF, 0x7C, 0xBD, 0x70, 0x47, 0x70,
-	0xB5, 0x0E, 0x46, 0x24, 0x49, 0x86, 0xB0, 0xCC,
-	0x6A, 0x03, 0x28, 0x02, 0xD1, 0x23, 0x46, 0x88,
-	0x6B, 0x07, 0xE0, 0x01, 0x28, 0x02, 0xD1, 0x23,
-	0x46, 0x08, 0x6B, 0x02, 0xE0,
-	0x00, 0x00, 0xEC, 0x00, 0x80, 0x08, 0x6B, 0x03,
-	0x19, 0x48, 0x6B, 0x1E, 0x49, 0xC5, 0x18, 0x01,
-	0x22, 0x08, 0x46, 0x2D, 0x30, 0x02, 0x90, 0x15,
-	0x48, 0x04, 0x92, 0x03, 0x91, 0x02, 0x7E, 0x18,
-	0x1B, 0x00, 0x01, 0x01, 0x92, 0x80, 0x19, 0x00,
-	0x95, 0x17, 0x4A, 0x18, 0x49, 0xFF, 0xF7, 0x57,
-	0xFE, 0x06, 0xB0, 0x70, 0xBD, 0xFF, 0xB5, 0x8D,
-	0xB0, 0x03, 0xF0, 0x08, 0xFA, 0x00, 0x28, 0x01,
-	0xD0, 0x02, 0x20, 0x00, 0xE0, 0x01, 0x20, 0x01,
-	0x90, 0x09, 0x48, 0xC0, 0x6B, 0x01, 0x88, 0x49,
-	0x07, 0x49, 0x0F, 0x05, 0x91, 0x81, 0x78, 0x04,
-	0x91, 0x03, 0x21, 0x41, 0x56, 0x03, 0x48, 0x03,
-	0x91, 0xC0, 0x7D, 0x07, 0x90, 0x00, 0x20, 0x0A,
-	0xE1, 0x0F, 0x98, 0x00, 0xE1, 0x20, 0xDE, 0x00,
-	0x00, 0xC0, 0x01, 0x00, 0x20, 0x2C, 0xE1, 0x00,
-	0x00, 0xF8, 0xCD, 0x00, 0x00, 0x88, 0xDF, 0x00,
-	0x00, 0xFF, 0x1F, 0x00, 0x00,
-	0x00, 0x00, 0xED, 0x00, 0x80, 0x85, 0x0C, 0x00,
-	0x20, 0x5E, 0x0A, 0x00, 0x20, 0x6E, 0x07, 0x00,
-	0x20, 0xF8, 0x49, 0x0D, 0x98, 0x09, 0x78, 0x48,
-	0x43, 0x08, 0x90, 0xF7, 0x49, 0x0B, 0x98, 0x09,
-	0x78, 0x48, 0x43, 0x0D, 0x99, 0x40, 0x18, 0xC0,
-	0x00, 0x09, 0x90, 0x0B, 0x98, 0xFF, 0xF7, 0x93,
-	0xFD, 0x16, 0x21, 0x48, 0x43, 0xF1, 0x49, 0x40,
-	0x18, 0x0C, 0x90, 0x0D, 0x98, 0xD0, 0xE0, 0x00,
-	0x27, 0x0C, 0x98, 0x06, 0x97, 0x3C, 0x46, 0x3D,
-	0x46, 0x06, 0x88, 0x03, 0xF0, 0xBF, 0xF9, 0x00,
-	0x28, 0x07, 0xD0, 0x02, 0x98, 0x00, 0x28, 0x02,
-	0xD1, 0x36, 0x07, 0x36, 0x0F, 0x01, 0xE0, 0xF0,
-	0x20, 0x06, 0x40, 0xF0, 0xB2, 0x84, 0x46, 0x07,
-	0x98, 0x00, 0x28, 0x38, 0xD0, 0x05, 0x98, 0xC0,
-	0x07, 0x35, 0xD0, 0x00, 0x20, 0xF1, 0x07, 0x1C,
-	0xD0, 0x0C, 0x99, 0x09, 0x18, 0x09, 0x79, 0x08,
-	0x9A, 0xE0, 0x4B, 0x52, 0x18,
-	0x00, 0x00, 0xEE, 0x00, 0x80, 0xDE, 0x49, 0x89,
-	0x56, 0x9A, 0x56, 0x16, 0x9B, 0x89, 0x1A, 0x09,
-	0x9A, 0x12, 0x18, 0x9A, 0x56, 0x51, 0x1A, 0x0A,
-	0x1E, 0x00, 0xDA, 0x4A, 0x42, 0x07, 0x9B, 0x9A,
-	0x42, 0x07, 0xDA, 0x7F, 0x1C, 0x64, 0x18, 0x00,
-	0x29, 0x03, 0xDA, 0x06, 0x9A, 0x52, 0x1C, 0x6D,
-	0x18, 0x06, 0x92, 0x76, 0x08, 0x40, 0x1C, 0x00,
-	0x2E, 0xDC, 0xD1, 0x01, 0x2F, 0x0F, 0xDD, 0xD2,
-	0x49, 0xB8, 0x00, 0x08, 0x58, 0x60, 0x43, 0x04,
-	0x12, 0x06, 0x98, 0x80, 0x00, 0x08, 0x58, 0x68,
-	0x43, 0x05, 0x12, 0x00, 0x2C, 0x00, 0xDA, 0x64,
-	0x1C, 0x00, 0x2D, 0x00, 0xDA, 0x6D, 0x1C, 0x00,
-	0x26, 0x60, 0x46, 0xC0, 0x07, 0x6C, 0xD0, 0x0C,
-	0x98, 0x80, 0x19, 0x01, 0x79, 0x09, 0x98, 0x16,
-	0x9A, 0x80, 0x19, 0x10, 0x56, 0x08, 0x9A, 0x05,
-	0x9B, 0x52, 0x18, 0xC1, 0x49, 0xDB, 0x07, 0x89,
-	0x56, 0x17, 0xD0, 0xC0, 0x4B,
-	0x00, 0x00, 0xEF, 0x00, 0x80, 0x9B, 0x56, 0xCB,
-	0x1A, 0x98, 0x42, 0x02, 0xDB, 0x07, 0x1B, 0x9F,
-	0x42, 0x04, 0xDB, 0x98, 0x42, 0x04, 0xDC, 0x07,
-	0x1B, 0x9F, 0x42, 0x01, 0xDD, 0x18, 0x46, 0x08,
-	0xE0, 0x67, 0x1B, 0xFF, 0x1C, 0x06, 0x2F, 0x03,
-	0xD9, 0x98, 0x42, 0x01, 0xDC, 0x40, 0x1B, 0x00,
-	0xE0, 0x00, 0x1B, 0x05, 0x9B, 0x5B, 0x07, 0x10,
-	0xD5, 0x43, 0x1A, 0x88, 0x42, 0x00, 0xDC, 0x0B,
-	0x1A, 0x03, 0x9F, 0xBB, 0x42, 0x09, 0xD2, 0x04,
-	0x9B, 0x00, 0x2B, 0x02, 0xD1, 0x40, 0x18, 0x40,
-	0x10, 0x03, 0xE0, 0x4B, 0x00, 0xCB, 0x18, 0x18,
-	0x18, 0x80, 0x10, 0x05, 0x9B, 0x9B, 0x07, 0x06,
-	0xD5, 0x88, 0x42, 0x01, 0xDD, 0x40, 0x1E, 0x02,
-	0xE0, 0x88, 0x42, 0x00, 0xDA, 0x40, 0x1C, 0x7F,
-	0x28, 0x01, 0xDD, 0x7F, 0x20, 0x04, 0xE0, 0x7F,
-	0x23, 0xDB, 0x43, 0x98, 0x42, 0x00, 0xDA, 0x18,
-	0x46, 0xA0, 0x4B, 0x9B, 0x56,
-	0x00, 0x00, 0xF0, 0x00, 0x80, 0x9E, 0x46, 0x1F,
-	0x18, 0x7B, 0x1A, 0x7F, 0x2B, 0x07, 0xDD, 0x70,
-	0x46, 0x08, 0x1A, 0x9B, 0x49, 0x7F, 0x30, 0x88,
-	0x54, 0x9A, 0x4B, 0x7F, 0x20, 0x0A, 0xE0, 0x7F,
-	0x27, 0xFF, 0x43, 0xBB, 0x42, 0x08, 0xDA, 0x70,
-	0x46, 0x08, 0x1A, 0x95, 0x49, 0x80, 0x38, 0x95,
-	0x4B, 0x88, 0x54, 0x38, 0x46, 0x98, 0x54, 0x03,
-	0xE0, 0x91, 0x49, 0x88, 0x54, 0x91, 0x48, 0x83,
-	0x54, 0x60, 0x46, 0x40, 0x08, 0x76, 0x1C, 0x84,
-	0x46, 0x00, 0x28, 0x89, 0xD1, 0x09, 0x98, 0x89,
-	0x49, 0x08, 0x30, 0x09, 0x90, 0x09, 0x78, 0x08,
-	0x98, 0x40, 0x18, 0x08, 0x90, 0x0A, 0x98, 0x40,
-	0x1C, 0x0E, 0x99, 0x0A, 0x90, 0x88, 0x42, 0x00,
-	0xD8, 0x29, 0xE7, 0x0B, 0x98, 0x40, 0x1C, 0x0B,
-	0x90, 0x10, 0x99, 0x88, 0x42, 0x00, 0xD8, 0x0B,
-	0xE7, 0x02, 0x98, 0x40, 0x1C, 0xC0, 0xB2, 0x01,
-	0x99, 0x02, 0x90, 0x88, 0x42,
-	0x00, 0x00, 0xF1, 0x00, 0x80, 0x00, 0xD2, 0xEF,
-	0xE6, 0x5E, 0xE6, 0x08, 0xB5, 0x00, 0x90, 0x7F,
-	0x48, 0xC3, 0x6A, 0x79, 0x48, 0x00, 0x22, 0x01,
-	0x78, 0x5B, 0x1E, 0x49, 0x1E, 0x10, 0x46, 0xFF,
-	0xF7, 0xC9, 0xFE, 0x08, 0xBD, 0xF8, 0xB5, 0x04,
-	0x46, 0x0D, 0x46, 0x10, 0x46, 0x19, 0x46, 0x06,
-	0x9E, 0xFF, 0xF7, 0xAD, 0xFA, 0x76, 0x48, 0x00,
-	0x96, 0x03, 0x78, 0x76, 0x48, 0x29, 0x46, 0x02,
-	0x78, 0x20, 0x46, 0xFF, 0xF7, 0xB7, 0xFE, 0xF8,
-	0xBD, 0x30, 0xB5, 0x70, 0x48, 0x80, 0x6A, 0x00,
-	0x28, 0x0B, 0xD0, 0x71, 0x4A, 0x00, 0x21, 0x14,
-	0x46, 0x13, 0x1D, 0x0C, 0x3C, 0x25, 0x1D, 0x40,
-	0x1E, 0x11, 0x54, 0x19, 0x54, 0x21, 0x54, 0x29,
-	0x54, 0xF9, 0xD1, 0x30, 0xBD, 0x70, 0xB5, 0x6A,
-	0x4D, 0x6A, 0x48, 0x4C, 0x3D, 0xEC, 0x6B, 0xE8,
-	0x63, 0xFE, 0xF7, 0xA0, 0xFE, 0xFF, 0xF7, 0xF2,
-	0xF9, 0xFF, 0xF7, 0x69, 0xFA,
-	0x00, 0x00, 0xF2, 0x00, 0x80, 0x00, 0x28, 0xFB,
-	0xD0, 0x65, 0x48, 0x00, 0x68, 0xFF, 0xF7, 0x3A,
-	0xFE, 0xEC, 0x63, 0xFF, 0xF7, 0xD9, 0xFF, 0x70,
-	0xBD, 0x70, 0x47, 0x5C, 0x48, 0x00, 0x6A, 0x61,
-	0x4A, 0x00, 0x21, 0x40, 0x1E, 0x11, 0x54, 0xFC,
-	0xD1, 0x52, 0x48, 0x56, 0x4A, 0x00, 0x78, 0x4E,
-	0x3A, 0x11, 0x54, 0x40, 0x1E, 0xFC, 0xD1, 0x50,
-	0x48, 0x52, 0x4A, 0x00, 0x78, 0x27, 0x3A, 0x11,
-	0x54, 0x40, 0x1E, 0xFC, 0xD1, 0x54, 0x48, 0x4C,
-	0x38, 0x81, 0x70, 0xC1, 0x70, 0x70, 0x47, 0x70,
-	0xB5, 0x51, 0x4D, 0x52, 0x48, 0x4C, 0x3D, 0xEC,
-	0x6B, 0xE8, 0x63, 0xFE, 0xF7, 0x5D, 0xFD, 0x03,
-	0x20, 0xFF, 0xF7, 0x6F, 0xF9, 0xFF, 0xF7, 0x37,
-	0xFA, 0x00, 0x28, 0xFB, 0xD0, 0x4E, 0x48, 0x01,
-	0x68, 0x03, 0x20, 0xFF, 0xF7, 0x38, 0xFE, 0xEC,
-	0x63, 0xFF, 0xF7, 0xCF, 0xFF, 0x70, 0xBD, 0x43,
-	0x48, 0x40, 0x6A, 0x40, 0x4A,
-	0x00, 0x00, 0xF3, 0x00, 0x80, 0x00, 0x21, 0x40,
-	0x1E, 0x11, 0x54, 0xFC, 0xD1, 0x39, 0x48, 0x3D,
-	0x4A, 0x00, 0x78, 0x9C, 0x3A, 0x11, 0x54, 0x40,
-	0x1E, 0xFC, 0xD1, 0x37, 0x48, 0x39, 0x4A, 0x00,
-	0x78, 0x75, 0x3A, 0x11, 0x54, 0x40, 0x1E, 0xFC,
-	0xD1, 0x70, 0x47, 0x70, 0xB5, 0x3A, 0x4D, 0x3B,
-	0x48, 0x4C, 0x3D, 0xEC, 0x6B, 0xE8, 0x63, 0xFE,
-	0xF7, 0x56, 0xFC, 0xFF, 0xF7, 0x40, 0xF8, 0xFF,
-	0xF7, 0x0A, 0xFA, 0x00, 0x28, 0xFB, 0xD0, 0x39,
-	0x48, 0x00, 0x68, 0xFF, 0xF7, 0x5E, 0xFF, 0xEC,
-	0x63, 0xFF, 0xF7, 0xD5, 0xFF, 0x70, 0xBD, 0x70,
-	0x47, 0xF0, 0xB5, 0x2C, 0x48, 0x8B, 0xB0, 0x80,
-	0x6A, 0x0A, 0x90, 0x2E, 0x48, 0x00, 0x1D, 0xC5,
-	0x7A, 0x01, 0x7C, 0x07, 0x91, 0x01, 0x7C, 0x06,
-	0x91, 0x41, 0x7D, 0x4E, 0x07, 0x81, 0x7D, 0x76,
-	0x0F, 0x4F, 0x07, 0x41, 0x7D, 0x7F, 0x0F, 0xC9,
-	0x08, 0x05, 0x91, 0x81, 0x7D,
-	0x00, 0x00, 0xF4, 0x00, 0x80, 0xC9, 0x08, 0x04,
-	0x91, 0x31, 0x46, 0x39, 0x43, 0x0A, 0xD1, 0x41,
-	0x7A, 0x49, 0x00, 0x09, 0x91, 0x40, 0x7A, 0x40,
-	0x00, 0x08, 0x90, 0x00, 0x20, 0x03, 0x90, 0x02,
-	0x90, 0x01, 0x90, 0x15, 0xE0, 0xA8, 0x19, 0x40,
-	0x1C, 0x09, 0x90, 0xE8, 0x19, 0x40, 0x1C, 0x08,
-	0x90, 0x15, 0x48, 0x08, 0x38, 0x81, 0x5D, 0x03,
-	0x91, 0xC0, 0x5D, 0x02, 0x90, 0x12, 0x48, 0xB1,
-	0x00, 0x09, 0x18, 0x49, 0x68, 0xC9, 0xB2, 0x01,
-	0x91, 0xB9, 0x00, 0x08, 0x18, 0x40, 0x68, 0xC0,
-	0xB2, 0x00, 0x90, 0x00, 0x20, 0x09, 0xE0, 0x10,
-	0x4A, 0x0C, 0x3A, 0x11, 0x5C, 0x49, 0x1C, 0x11,
-	0x54, 0x12, 0x1D, 0x11, 0x5C, 0x49, 0x1C, 0x11,
-	0x54, 0x40, 0x1C, 0x0A, 0x99, 0x88, 0x42, 0xF2,
-	0xD3, 0x00, 0x24, 0xB8, 0xE0, 0x6E, 0x01, 0x00,
-	0x20, 0x6D, 0x01, 0x00, 0x20, 0x2C, 0xE1, 0x00,
-	0x00, 0x74, 0x05, 0x00, 0x20,
-	0x00, 0x00, 0xF5, 0x00, 0x80, 0x64, 0x08, 0x00,
-	0x20, 0xF8, 0xCD, 0x00, 0x00, 0x88, 0xDF, 0x00,
-	0x00, 0x7C, 0x01, 0x00, 0x20, 0x7B, 0x01, 0x00,
-	0x20, 0x0C, 0x02, 0x00, 0x20, 0x1C, 0xDE, 0x00,
-	0x00, 0xB4, 0x01, 0x00, 0x20, 0x5E, 0x0A, 0x00,
-	0x20, 0xB0, 0x01, 0x00, 0x20, 0xAC, 0x01, 0x00,
-	0x20, 0xFE, 0x48, 0x07, 0x99, 0x00, 0x57, 0x88,
-	0x42, 0x0A, 0xDD, 0xF9, 0xF7, 0x4A, 0xFD, 0x00,
-	0x28, 0x02, 0xD1, 0xFA, 0x49, 0x0C, 0x39, 0x02,
-	0xE0, 0xF8, 0x49, 0x00, 0x20, 0x08, 0x39, 0x08,
-	0x55, 0xF6, 0x48, 0x06, 0x99, 0x00, 0x1D, 0x00,
-	0x57, 0x88, 0x42, 0x0A, 0xDD, 0xF9, 0xF7, 0x39,
-	0xFD, 0x00, 0x28, 0x02, 0xD1, 0xF1, 0x49, 0x08,
-	0x39, 0x02, 0xE0, 0xF0, 0x49, 0x00, 0x20, 0x0C,
-	0x39, 0x08, 0x55, 0xEE, 0x48, 0x0C, 0x38, 0x00,
-	0x5D, 0xA8, 0x42, 0x35, 0xD3, 0xA8, 0x42, 0x02,
-	0xD1, 0xEA, 0x48, 0x00, 0x5D,
-	0x00, 0x00, 0xF6, 0x00, 0x80, 0x20, 0xE0, 0x09,
-	0x99, 0x88, 0x42, 0x21, 0xD2, 0x00, 0x2E, 0x2B,
-	0xD0, 0xE6, 0x48, 0xE6, 0x49, 0x00, 0x57, 0x08,
-	0x31, 0x0A, 0x57, 0x84, 0x46, 0x80, 0x1A, 0x01,
-	0x1E, 0x00, 0xDA, 0x41, 0x42, 0x05, 0x9B, 0x99,
-	0x42, 0x01, 0xDD, 0x1F, 0x2B, 0x08, 0xD1, 0x03,
-	0x9B, 0xDE, 0x49, 0xC0, 0x18, 0x01, 0x9B, 0x08,
-	0x31, 0x58, 0x43, 0x00, 0x12, 0x10, 0x18, 0x05,
-	0xE0, 0xDA, 0x48, 0x0C, 0x38, 0x05, 0x55, 0x60,
-	0x46, 0xD8, 0x49, 0x08, 0x31, 0x08, 0x55, 0x0B,
-	0xE0, 0xD6, 0x49, 0x0B, 0x46, 0x08, 0x33, 0x08,
-	0x5D, 0x1A, 0x5D, 0x80, 0x1A, 0x08, 0x55, 0x00,
-	0x20, 0x0C, 0x39, 0x08, 0x55, 0x19, 0x46, 0xF1,
-	0xE7, 0xD0, 0x48, 0x08, 0x38, 0x00, 0x5D, 0xA8,
-	0x42, 0x38, 0xD3, 0xA8, 0x42, 0x03, 0xD1, 0xCD,
-	0x48, 0x00, 0x1D, 0x00, 0x5D, 0x22, 0xE0, 0x08,
-	0x99, 0x88, 0x42, 0x23, 0xD2,
-	0x00, 0x00, 0xF7, 0x00, 0x80, 0x00, 0x2F, 0x2D,
-	0xD0, 0xC8, 0x48, 0xC8, 0x49, 0x00, 0x1D, 0x00,
-	0x57, 0x0C, 0x31, 0x0A, 0x57, 0x84, 0x46, 0x80,
-	0x1A, 0x01, 0x1E, 0x00, 0xDA, 0x41, 0x42, 0x04,
-	0x9B, 0x99, 0x42, 0x01, 0xDD, 0x1F, 0x2B, 0x09,
-	0xD1, 0x02, 0x99, 0xC0, 0x4B, 0x40, 0x18, 0x00,
-	0x99, 0x0C, 0x33, 0x48, 0x43, 0x00, 0x12, 0x10,
-	0x18, 0x19, 0x46, 0x05, 0xE0, 0xBB, 0x48, 0x08,
-	0x38, 0x05, 0x55, 0x60, 0x46, 0xB9, 0x49, 0x0C,
-	0x31, 0x08, 0x55, 0x0B, 0xE0, 0xB7, 0x4A, 0x12,
-	0x1D, 0x11, 0x46, 0x08, 0x31, 0x10, 0x5D, 0x0B,
-	0x5D, 0xC0, 0x1A, 0x10, 0x55, 0x00, 0x20, 0x0C,
-	0x3A, 0x10, 0x55, 0xF1, 0xE7, 0x64, 0x1C, 0x0A,
-	0x98, 0x84, 0x42, 0x00, 0xD2, 0x60, 0xE7, 0x0B,
-	0xB0, 0xF0, 0xBD, 0x70, 0x47, 0xF0, 0xB5, 0xAE,
-	0x48, 0x8B, 0xB0, 0x00, 0x78, 0x08, 0x90, 0xAD,
-	0x48, 0x00, 0x78, 0x07, 0x90,
-	0x00, 0x00, 0xF8, 0x00, 0x80, 0xAC, 0x48, 0x46,
-	0x7A, 0xAC, 0x49, 0x09, 0x89, 0x05, 0x91, 0x41,
-	0x7B, 0x04, 0x91, 0xC1, 0x7C, 0x49, 0x07, 0x49,
-	0x0F, 0x03, 0x91, 0xC1, 0x7C, 0xC9, 0x08, 0x02,
-	0x91, 0x03, 0x99, 0x00, 0x29, 0x05, 0xD1, 0x40,
-	0x7A, 0x40, 0x00, 0x06, 0x90, 0x00, 0x20, 0x01,
-	0x90, 0x0B, 0xE0, 0x70, 0x18, 0x40, 0x1C, 0x06,
-	0x90, 0xA1, 0x48, 0x40, 0x5C, 0x01, 0x90, 0xA0,
-	0x48, 0x89, 0x00, 0x08, 0x30, 0x08, 0x18, 0x40,
-	0x68, 0xC0, 0xB2, 0x98, 0x4A, 0x00, 0x90, 0x00,
-	0x20, 0x4C, 0x3A, 0x90, 0x64, 0xD0, 0x70, 0x90,
-	0x70, 0x51, 0x78, 0xC8, 0x07, 0x06, 0xD0, 0x99,
-	0x4C, 0x08, 0x98, 0x23, 0x5C, 0x5B, 0x1C, 0x23,
-	0x54, 0x40, 0x1E, 0xFA, 0xD1, 0x88, 0x07, 0x07,
-	0xD5, 0x94, 0x4C, 0x07, 0x98, 0x27, 0x34, 0x23,
-	0x5C, 0x5B, 0x1C, 0x23, 0x54, 0x40, 0x1E, 0xFA,
-	0xD1, 0xC8, 0x07, 0x60, 0xD0,
-	0x00, 0x00, 0xF9, 0x00, 0x80, 0x05, 0x98, 0x08,
-	0x9C, 0x40, 0x42, 0x0A, 0x90, 0x8E, 0x48, 0x64,
-	0x1E, 0x05, 0x57, 0x0A, 0x98, 0x85, 0x42, 0x03,
-	0xDA, 0x84, 0x49, 0x01, 0x20, 0x4C, 0x39, 0x88,
-	0x70, 0x05, 0x98, 0x85, 0x42, 0x03, 0xDD, 0x81,
-	0x49, 0x01, 0x20, 0x4C, 0x39, 0xC8, 0x70, 0x04,
-	0x98, 0x85, 0x42, 0x16, 0xDD, 0x7D, 0x4F, 0x28,
-	0x1A, 0x4C, 0x3F, 0xB9, 0x6C, 0x40, 0x18, 0xB8,
-	0x64, 0xF9, 0xF7, 0x47, 0xFC, 0x00, 0x28, 0x05,
-	0xD1, 0x79, 0x6A, 0x08, 0x55, 0xB9, 0x6A, 0x08,
-	0x55, 0xF9, 0x6A, 0x05, 0xE0, 0xF9, 0x68, 0x00,
-	0x20, 0x08, 0x55, 0x39, 0x69, 0x08, 0x55, 0x79,
-	0x69, 0x08, 0x55, 0x72, 0x48, 0x4C, 0x38, 0x41,
-	0x6A, 0x08, 0x5D, 0xB0, 0x42, 0x29, 0xD3, 0xB0,
-	0x42, 0x02, 0xD1, 0x76, 0x48, 0x05, 0x55, 0x24,
-	0xE0, 0x06, 0x9A, 0x90, 0x42, 0x19, 0xD2, 0x03,
-	0x98, 0x00, 0x28, 0x1E, 0xD0,
-	0x00, 0x00, 0xFA, 0x00, 0x80, 0x71, 0x4B, 0x18,
-	0x57, 0x84, 0x46, 0x28, 0x1A, 0x02, 0x1E, 0x00,
-	0xDA, 0x42, 0x42, 0x02, 0x9F, 0xBA, 0x42, 0x01,
-	0xDD, 0x1F, 0x2F, 0x07, 0xD1, 0x01, 0x9A, 0x80,
-	0x18, 0x00, 0x9A, 0x50, 0x43, 0x00, 0x12, 0x60,
-	0x44, 0x18, 0x55, 0x0A, 0xE0, 0x0E, 0x55, 0x1D,
-	0x55, 0x07, 0xE0, 0x66, 0x4A, 0x64, 0x4B, 0x10,
-	0x5D, 0x28, 0x1A, 0x18, 0x55, 0x00, 0x20, 0x08,
-	0x55, 0x10, 0x55, 0x00, 0x2C, 0xA2, 0xD1, 0x59,
-	0x48, 0x4C, 0x38, 0x41, 0x78, 0x89, 0x07, 0x66,
-	0xD5, 0x05, 0x99, 0x07, 0x9C, 0x49, 0x42, 0x09,
-	0x91, 0x08, 0x98, 0x64, 0x1E, 0x27, 0x18, 0x5A,
-	0x48, 0xC5, 0x57, 0x09, 0x98, 0x85, 0x42, 0x03,
-	0xDA, 0x50, 0x49, 0x01, 0x20, 0x4C, 0x39, 0x88,
-	0x70, 0x05, 0x98, 0x85, 0x42, 0x03, 0xDD, 0x4D,
-	0x49, 0x01, 0x20, 0x4C, 0x39, 0xC8, 0x70, 0x04,
-	0x98, 0x85, 0x42, 0x1A, 0xDD,
-	0x00, 0x00, 0xFB, 0x00, 0x80, 0x29, 0x1A, 0x49,
-	0x48, 0x4C, 0x38, 0x82, 0x6C, 0x89, 0x18, 0x81,
-	0x64, 0xF9, 0xF7, 0xDF, 0xFB, 0x00, 0x28, 0x07,
-	0xD1, 0x44, 0x49, 0x4C, 0x39, 0x0A, 0x6B, 0x10,
-	0x55, 0x4A, 0x6B, 0x10, 0x55, 0x89, 0x6B, 0x07,
-	0xE0, 0x40, 0x49, 0x00, 0x20, 0x4C, 0x39, 0x8A,
-	0x69, 0x10, 0x55, 0xCA, 0x69, 0x10, 0x55, 0x09,
-	0x6A, 0x08, 0x55, 0x3C, 0x48, 0x4C, 0x38, 0x01,
-	0x6B, 0x08, 0x5D, 0xB0, 0x42, 0x29, 0xD3, 0xB0,
-	0x42, 0x02, 0xD1, 0x40, 0x48, 0xC5, 0x55, 0x24,
-	0xE0, 0x06, 0x9A, 0x90, 0x42, 0x19, 0xD2, 0x03,
-	0x98, 0x00, 0x28, 0x1E, 0xD0, 0x3B, 0x48, 0xC0,
-	0x57, 0x84, 0x46, 0x28, 0x1A, 0x02, 0x1E, 0x00,
-	0xDA, 0x42, 0x42, 0x02, 0x9B, 0x9A, 0x42, 0x01,
-	0xDD, 0x1F, 0x2B, 0x08, 0xD1, 0x01, 0x9B, 0x35,
-	0x4A, 0xC0, 0x18, 0x00, 0x9B, 0x58, 0x43, 0x00,
-	0x12, 0x60, 0x44, 0xD0, 0x55,
-	0x00, 0x00, 0xFC, 0x00, 0x80, 0x09, 0xE0, 0x0E,
-	0x55, 0xDF, 0xE7, 0x30, 0x4A, 0x2E, 0x4B, 0xD0,
-	0x5D, 0x28, 0x1A, 0xD8, 0x55, 0x00, 0x20, 0x08,
-	0x55, 0xF3, 0xE7, 0x00, 0x2C, 0x9C, 0xD1, 0xE6,
-	0xE6, 0xF0, 0xB5, 0x23, 0x48, 0x87, 0xB0, 0x05,
-	0x78, 0x22, 0x48, 0x07, 0x78, 0x22, 0x48, 0x01,
-	0x7A, 0x06, 0x91, 0x81, 0x7C, 0x49, 0x07, 0x49,
-	0x0F, 0x04, 0x91, 0x81, 0x7C, 0xC9, 0x08, 0x03,
-	0x91, 0x04, 0x99, 0x00, 0x29, 0x05, 0xD1, 0x00,
-	0x7A, 0x40, 0x00, 0x05, 0x90, 0x00, 0x20, 0x02,
-	0x90, 0x0D, 0xE0, 0x06, 0x98, 0x40, 0x18, 0x40,
-	0x1C, 0x05, 0x90, 0x19, 0x49, 0x04, 0x98, 0x08,
-	0x5C, 0x02, 0x90, 0x04, 0x98, 0x08, 0x31, 0x80,
-	0x00, 0x40, 0x18, 0x40, 0x68, 0xC0, 0xB2, 0x01,
-	0x90, 0x0E, 0x48, 0x00, 0x21, 0x4C, 0x38, 0xC1,
-	0x80, 0x40, 0x78, 0x02, 0x28, 0x08, 0xD0, 0x11,
-	0x48, 0x2C, 0x46, 0x4E, 0x38,
-	0x00, 0x00, 0xFD, 0x00, 0x80, 0x01, 0x5D, 0x49,
-	0x1C, 0x01, 0x55, 0x64, 0x1E, 0xFA, 0xD1, 0x07,
-	0xE0, 0x0C, 0x48, 0x3C, 0x46, 0x27, 0x38, 0x01,
-	0x5D, 0x49, 0x1C, 0x01, 0x55, 0x64, 0x1E, 0xFA,
-	0xD1, 0x00, 0x26, 0xF9, 0xF7, 0x56, 0xFB, 0x00,
-	0x28, 0x4F, 0xD1, 0x2E, 0xE0, 0x0C, 0x02, 0x00,
-	0x20, 0x6E, 0x01, 0x00, 0x20, 0x6D, 0x01, 0x00,
-	0x20, 0x20, 0xDE, 0x00, 0x00, 0x90, 0xDD, 0x00,
-	0x00, 0xF0, 0xCD, 0x00, 0x00, 0x16, 0x08, 0x00,
-	0x20, 0x5E, 0x0A, 0x00, 0x20, 0x85, 0x0C, 0x00,
-	0x20, 0x00, 0x20, 0x17, 0xE0, 0x79, 0x49, 0x0A,
-	0x57, 0x79, 0x49, 0x64, 0x1C, 0x0B, 0x79, 0x9A,
-	0x42, 0x0F, 0xDD, 0xCA, 0x88, 0x52, 0x1C, 0xCA,
-	0x80, 0xCB, 0x68, 0x00, 0x22, 0x1A, 0x54, 0x0B,
-	0x69, 0x1A, 0x54, 0x4B, 0x69, 0x1A, 0x54, 0x8B,
-	0x69, 0x9A, 0x55, 0xCB, 0x69, 0x9A, 0x55, 0x09,
-	0x6A, 0x8A, 0x55, 0x40, 0x1C,
-	0x00, 0x00, 0xFE, 0x00, 0x80, 0xA8, 0x42, 0xE5,
-	0xD3, 0x76, 0x1C, 0xBE, 0x42, 0xE0, 0xD3, 0x1E,
-	0xE0, 0x00, 0x20, 0x17, 0xE0, 0x69, 0x49, 0x0A,
-	0x57, 0x69, 0x49, 0x64, 0x1C, 0x0B, 0x79, 0x9A,
-	0x42, 0x0F, 0xDD, 0xCA, 0x88, 0x52, 0x1C, 0xCA,
-	0x80, 0x4B, 0x6A, 0x00, 0x22, 0x1A, 0x54, 0x8B,
-	0x6A, 0x1A, 0x54, 0xCB, 0x6A, 0x1A, 0x54, 0x0B,
-	0x6B, 0x9A, 0x55, 0x4B, 0x6B, 0x9A, 0x55, 0x89,
-	0x6B, 0x8A, 0x55, 0x40, 0x1C, 0xA8, 0x42, 0xE5,
-	0xD3, 0x76, 0x1C, 0xBE, 0x42, 0xE0, 0xD3, 0x5C,
-	0x48, 0x40, 0x78, 0x02, 0x28, 0x5A, 0xD1, 0x00,
-	0x20, 0x54, 0xE0, 0x59, 0x49, 0x06, 0x9A, 0x89,
-	0x69, 0x8E, 0x46, 0x09, 0x5C, 0x91, 0x42, 0x4C,
-	0xD3, 0x91, 0x42, 0x0C, 0xD1, 0x01, 0x46, 0x69,
-	0x43, 0x00, 0x22, 0x52, 0x4E, 0x53, 0x4C, 0x03,
-	0xE0, 0x73, 0x5C, 0x63, 0x54, 0x49, 0x1C, 0x52,
-	0x1C, 0xAA, 0x42, 0xF9, 0xD3,
-	0x00, 0x00, 0xFF, 0x00, 0x80, 0x3D, 0xE0, 0x05,
-	0x9A, 0x91, 0x42, 0x26, 0xD2, 0x04, 0x99, 0x00,
-	0x29, 0x37, 0xD0, 0x01, 0x46, 0x69, 0x43, 0x00,
-	0x22, 0x17, 0xE0, 0x4A, 0x4C, 0x47, 0x4B, 0x64,
-	0x56, 0x5B, 0x56, 0xA4, 0x46, 0x1B, 0x1B, 0x1C,
-	0x1E, 0x00, 0xDA, 0x64, 0x42, 0x03, 0x9E, 0xB4,
-	0x42, 0x01, 0xDD, 0x1F, 0x2E, 0x0C, 0xD1, 0x02,
-	0x9E, 0x42, 0x4C, 0x9B, 0x19, 0x01, 0x9E, 0x73,
-	0x43, 0x1B, 0x12, 0x63, 0x44, 0x63, 0x54, 0x49,
-	0x1C, 0x52, 0x1C, 0xAA, 0x42, 0xE5, 0xD3, 0x18,
-	0xE0, 0x72, 0x46, 0x06, 0x99, 0x11, 0x54, 0x40,
-	0x1E, 0x13, 0xE0, 0x01, 0x46, 0x69, 0x43, 0x00,
-	0x22, 0x38, 0x4C, 0x09, 0xE0, 0x35, 0x4B, 0x66,
-	0x5C, 0x5B, 0x5C, 0x9B, 0x1B, 0x33, 0x4E, 0x73,
-	0x54, 0x00, 0x23, 0x63, 0x54, 0x49, 0x1C, 0x52,
-	0x1C, 0xAA, 0x42, 0xF3, 0xD3, 0x00, 0x22, 0x71,
-	0x46, 0x0A, 0x54, 0x40, 0x1C,
-	0x00, 0x01, 0x00, 0x00, 0x80, 0xB8, 0x42, 0xA8,
-	0xD3, 0x07, 0xB0, 0xF0, 0xBD, 0x00, 0x20, 0x51,
-	0xE0, 0x2B, 0x49, 0x06, 0x9A, 0xC9, 0x68, 0x8E,
-	0x46, 0x09, 0x5C, 0x91, 0x42, 0x49, 0xD3, 0x91,
-	0x42, 0x0B, 0xD1, 0x01, 0x46, 0x00, 0x22, 0x25,
-	0x4E, 0x26, 0x4C, 0x03, 0xE0, 0x73, 0x5C, 0x63,
-	0x54, 0x49, 0x19, 0x52, 0x1C, 0xBA, 0x42, 0xF9,
-	0xD3, 0x3B, 0xE0, 0x05, 0x9A, 0x91, 0x42, 0x25,
-	0xD2, 0x04, 0x99, 0x00, 0x29, 0x35, 0xD0, 0x01,
-	0x46, 0x00, 0x22, 0x17, 0xE0, 0x1D, 0x4C, 0x1B,
-	0x4B, 0x64, 0x56, 0x5B, 0x56, 0xA4, 0x46, 0x1B,
-	0x1B, 0x1C, 0x1E, 0x00, 0xDA, 0x64, 0x42, 0x03,
-	0x9E, 0xB4, 0x42, 0x01, 0xDD, 0x1F, 0x2E, 0x0C,
-	0xD1, 0x02, 0x9E, 0x16, 0x4C, 0x9B, 0x19, 0x01,
-	0x9E, 0x73, 0x43, 0x1B, 0x12, 0x63, 0x44, 0x63,
-	0x54, 0x49, 0x19, 0x52, 0x1C, 0xBA, 0x42, 0xE5,
-	0xD3, 0x17, 0xE0, 0x72, 0x46,
-	0x00, 0x01, 0x01, 0x00, 0x80, 0x06, 0x99, 0x11,
-	0x54, 0x40, 0x1E, 0x12, 0xE0, 0x01, 0x46, 0x00,
-	0x22, 0x0C, 0x4C, 0x09, 0xE0, 0x09, 0x4B, 0x66,
-	0x5C, 0x5B, 0x5C, 0x9B, 0x1B, 0x07, 0x4E, 0x73,
-	0x54, 0x00, 0x23, 0x63, 0x54, 0x49, 0x19, 0x52,
-	0x1C, 0xBA, 0x42, 0xF3, 0xD3, 0x00, 0x22, 0x71,
-	0x46, 0x0A, 0x54, 0x40, 0x1C, 0xA8, 0x42, 0xAB,
-	0xD3, 0xA6, 0xE7, 0x00, 0x00, 0x64, 0x08, 0x00,
-	0x20, 0xC0, 0x01, 0x00, 0x20, 0x8B, 0x0A, 0x00,
-	0x20, 0x10, 0xB5, 0xF8, 0x48, 0x40, 0x69, 0xF8,
-	0x49, 0x08, 0x70, 0xF8, 0x49, 0x00, 0x20, 0x88,
-	0x70, 0xF4, 0x48, 0x40, 0x30, 0x40, 0x8B, 0x80,
-	0x07, 0xC0, 0x0F, 0xC8, 0x70, 0xF4, 0x48, 0x80,
-	0x6A, 0x00, 0x28, 0x01, 0xD0, 0x04, 0xF0, 0x4A,
-	0xFA, 0x10, 0xBD, 0xF0, 0x49, 0x01, 0x20, 0x08,
-	0x74, 0x70, 0x47, 0xF7, 0xB5, 0x0F, 0x46, 0x16,
-	0x46, 0xEE, 0x4C, 0x03, 0x20,
-	0x00, 0x01, 0x02, 0x00, 0x80, 0xF9, 0xF7, 0x06,
-	0xFA, 0xFF, 0xF7, 0x1B, 0xF8, 0x00, 0x20, 0xFF,
-	0xF7, 0x3F, 0xF8, 0xEC, 0x4D, 0xEA, 0x48, 0x28,
-	0x60, 0x81, 0x78, 0xEB, 0x4A, 0x11, 0x70, 0xC1,
-	0x78, 0xEA, 0x4A, 0x11, 0x70, 0x00, 0x79, 0xEA,
-	0x49, 0x08, 0x70, 0xFF, 0xF7, 0x3E, 0xFC, 0xFF,
-	0xF7, 0x0E, 0xFC, 0x03, 0x20, 0x00, 0x99, 0xF9,
-	0xF7, 0xDE, 0xF9, 0xFF, 0xF7, 0x29, 0xF8, 0x01,
-	0x21, 0x20, 0x46, 0x2F, 0x60, 0x03, 0xF0, 0x24,
-	0xFF, 0xFE, 0xF7, 0x8D, 0xF8, 0xFE, 0xF7, 0x77,
-	0xFC, 0xFE, 0xF7, 0x41, 0xFE, 0x00, 0x28, 0xFB,
-	0xD0, 0xDE, 0x48, 0x00, 0x68, 0xFF, 0xF7, 0x95,
-	0xFB, 0x01, 0x21, 0x20, 0x46, 0x03, 0xF0, 0x7D,
-	0xFF, 0xFE, 0xF7, 0x56, 0xF9, 0x03, 0x20, 0xFE,
-	0xF7, 0x68, 0xFD, 0xFE, 0xF7, 0x30, 0xFE, 0x00,
-	0x28, 0xFB, 0xD0, 0xD7, 0x48, 0x01, 0x68, 0x03,
-	0x20, 0xFF, 0xF7, 0x31, 0xFA,
-	0x00, 0x01, 0x03, 0x00, 0x80, 0xCC, 0x4D, 0x69,
-	0x6A, 0xD4, 0x48, 0x02, 0xE0, 0x49, 0x1E, 0x42,
-	0x5C, 0x62, 0x54, 0x00, 0x29, 0xFA, 0xDC, 0x28,
-	0x6A, 0xD1, 0x49, 0x05, 0xE0, 0x40, 0x1E, 0x23,
-	0x18, 0xFF, 0x33, 0x0A, 0x5C, 0xE1, 0x33, 0x9A,
-	0x76, 0x00, 0x28, 0xF7, 0xDC, 0x68, 0x6A, 0xF1,
-	0x09, 0x7F, 0x30, 0xC2, 0x09, 0x20, 0x46, 0x01,
-	0xF0, 0xB0, 0xF9, 0x30, 0x46, 0xFF, 0x30, 0xFB,
-	0x30, 0xC1, 0x09, 0x28, 0x6A, 0xC7, 0x4A, 0xB2,
-	0x18, 0x80, 0x18, 0xC0, 0x09, 0x42, 0x1A, 0x20,
-	0x46, 0xFF, 0x30, 0x52, 0x1C, 0x81, 0x30, 0x01,
-	0xF0, 0xA0, 0xF9, 0xFE, 0xBD, 0xF8, 0xB5, 0x05,
-	0x46, 0xB2, 0x48, 0xC1, 0x6B, 0x01, 0x29, 0x04,
-	0xD1, 0x00, 0x6C, 0x00, 0x28, 0x01, 0xD0, 0x01,
-	0x27, 0x00, 0xE0, 0x00, 0x27, 0x28, 0x06, 0x01,
-	0xD5, 0x00, 0x24, 0x06, 0xE0, 0x38, 0x46, 0x03,
-	0xF0, 0x5A, 0xFC, 0x04, 0x07,
-	0x00, 0x01, 0x04, 0x00, 0x80, 0x24, 0x0F, 0x0F,
-	0x20, 0x44, 0x40, 0xAE, 0x49, 0x2C, 0x43, 0xAC,
-	0x48, 0x08, 0x60, 0x00, 0x2F, 0x07, 0xD0, 0x03,
-	0x20, 0xF9, 0xF7, 0x7C, 0xF9, 0xFE, 0xF7, 0x91,
-	0xFF, 0x00, 0x20, 0xFE, 0xF7, 0xB5, 0xFF, 0xA0,
-	0x07, 0x03, 0xD5, 0x01, 0x21, 0xA3, 0x48, 0x03,
-	0xF0, 0x18, 0xFF, 0xE0, 0x07, 0x03, 0xD0, 0x01,
-	0x21, 0xA0, 0x48, 0x03, 0xF0, 0xA9, 0xFE, 0x9E,
-	0x48, 0x00, 0x90, 0x80, 0x6A, 0x00, 0x28, 0x05,
-	0xD0, 0x20, 0x07, 0x03, 0xD5, 0x01, 0x21, 0x9B,
-	0x48, 0x03, 0xF0, 0xC9, 0xFF, 0x01, 0x21, 0x9A,
-	0x48, 0xC9, 0x02, 0x45, 0x18, 0x49, 0x10, 0x46,
-	0x18, 0x00, 0x2F, 0x31, 0xD0, 0x00, 0x98, 0x80,
-	0x6A, 0x00, 0x28, 0x0D, 0xD0, 0x20, 0x07, 0x0B,
-	0xD5, 0x94, 0x48, 0x01, 0x21, 0x06, 0x60, 0x91,
-	0x48, 0x03, 0xF0, 0xB5, 0xFF, 0x91, 0x48, 0x01,
-	0x21, 0x05, 0x60, 0x8E, 0x48,
-	0x00, 0x01, 0x05, 0x00, 0x80, 0x03, 0xF0, 0xAF,
-	0xFF, 0xA0, 0x07, 0x1D, 0xD0, 0x89, 0x4C, 0x40,
-	0x21, 0x20, 0x8B, 0x08, 0x43, 0x20, 0x83, 0x01,
-	0x20, 0xFF, 0xF7, 0x05, 0xF8, 0x00, 0x20, 0xFF,
-	0xF7, 0x13, 0xF8, 0x91, 0x4A, 0x31, 0x46, 0x00,
-	0x20, 0xFF, 0xF7, 0x27, 0xFF, 0x8F, 0x4A, 0x29,
-	0x46, 0x01, 0x20, 0xFF, 0xF7, 0x22, 0xFF, 0x00,
-	0x20, 0xFE, 0xF7, 0xF5, 0xFF, 0x20, 0x8B, 0x40,
-	0x21, 0x88, 0x43, 0x20, 0x83, 0xFD, 0xF7, 0x80,
-	0xFF, 0x7D, 0x48, 0x82, 0x78, 0x79, 0x49, 0x1C,
-	0x31, 0x0A, 0x70, 0xB2, 0x78, 0x4A, 0x70, 0xAA,
-	0x78, 0x8A, 0x70, 0xC3, 0x78, 0xCA, 0x1C, 0x13,
-	0x70, 0xF3, 0x78, 0x53, 0x70, 0xEB, 0x78, 0x93,
-	0x70, 0x04, 0x79, 0x8B, 0x1D, 0x1C, 0x70, 0x34,
-	0x79, 0x5C, 0x70, 0x2C, 0x79, 0x9C, 0x70, 0x74,
-	0x4C, 0x09, 0x78, 0x21, 0x70, 0x11, 0x78, 0x73,
-	0x4A, 0x00, 0x2F, 0x11, 0x70,
-	0x00, 0x01, 0x06, 0x00, 0x80, 0x72, 0x4A, 0x19,
-	0x78, 0x11, 0x70, 0x6E, 0x49, 0x08, 0x60, 0x05,
-	0xD0, 0x00, 0x20, 0xFE, 0xF7, 0x3D, 0xFF, 0x00,
-	0x20, 0xFE, 0xF7, 0x13, 0xFF, 0xFF, 0xF7, 0x45,
-	0xFB, 0xFF, 0xF7, 0x15, 0xFB, 0xF8, 0xBD, 0x70,
-	0x47, 0x70, 0xB5, 0x62, 0x4C, 0x01, 0x26, 0x20,
-	0x78, 0x00, 0x28, 0x02, 0xD1, 0x26, 0x70, 0xFF,
-	0xF7, 0xC7, 0xFE, 0x6D, 0x48, 0xFE, 0xF7, 0x8C,
-	0xFE, 0x00, 0x25, 0x65, 0x63, 0xA5, 0x63, 0xE5,
-	0x63, 0x03, 0xF0, 0x9B, 0xFB, 0xFD, 0xF7, 0x30,
-	0xFF, 0xFE, 0xF7, 0x9F, 0xFF, 0xF9, 0xF7, 0x57,
-	0xFB, 0x03, 0xF0, 0x04, 0xFA, 0x02, 0xF0, 0xCE,
-	0xFB, 0x02, 0xF0, 0x08, 0xFF, 0x03, 0xF0, 0xF2,
-	0xF9, 0xF9, 0xF7, 0xE8, 0xF8, 0x53, 0x48, 0x53,
-	0x49, 0xA1, 0x64, 0xE0, 0x38, 0x60, 0x64, 0x70,
-	0x39, 0xE1, 0x64, 0x5E, 0x49, 0x21, 0x65, 0xFE,
-	0xF7, 0x76, 0xFE, 0xA0, 0x6C,
-	0x00, 0x01, 0x07, 0x00, 0x80, 0xFE, 0xF7, 0x6E,
-	0xFE, 0x60, 0x6C, 0xFE, 0xF7, 0x75, 0xFE, 0x00,
-	0x20, 0xFF, 0xF7, 0x24, 0xFF, 0x45, 0x48, 0xA5,
-	0x73, 0xC0, 0x6B, 0x01, 0x28, 0x11, 0xD1, 0x43,
-	0x48, 0x40, 0x30, 0x40, 0x8B, 0xE1, 0x78, 0x88,
-	0x43, 0xC0, 0x07, 0x0A, 0xD1, 0x01, 0xF0, 0xA6,
-	0xF8, 0xFE, 0xF7, 0xB9, 0xFE, 0x00, 0x28, 0x03,
-	0xD1, 0xFE, 0xF7, 0xBA, 0xFE, 0x00, 0x28, 0x00,
-	0xD0, 0xA6, 0x73, 0x25, 0x64, 0xA5, 0x71, 0xE5,
-	0x71, 0x65, 0x74, 0x65, 0x75, 0x25, 0x83, 0x65,
-	0x83, 0x39, 0x48, 0x25, 0x71, 0x80, 0x6A, 0x00,
-	0x28, 0x01, 0xD0, 0x04, 0xF0, 0xD4, 0xF8, 0x26,
-	0x74, 0x70, 0xBD, 0x10, 0xB5, 0xFD, 0xF7, 0x0C,
-	0xFF, 0x32, 0x49, 0x00, 0x20, 0x08, 0x71, 0x10,
-	0xBD, 0xF8, 0xB5, 0x30, 0x4D, 0x00, 0x24, 0x06,
-	0x46, 0x6C, 0x70, 0x01, 0xF0, 0xEF, 0xFA, 0x07,
-	0x46, 0x62, 0xB6, 0x28, 0x79,
-	0x00, 0x01, 0x08, 0x00, 0x80, 0x17, 0x28, 0x06,
-	0xD2, 0x3B, 0x49, 0x80, 0x00, 0x09, 0x58, 0x30,
-	0x46, 0x88, 0x47, 0x04, 0x46, 0x04, 0xE0, 0xFD,
-	0xF7, 0xF3, 0xFE, 0x00, 0x20, 0x28, 0x71, 0x08,
-	0x24, 0x72, 0xB6, 0xE0, 0x07, 0x05, 0xD0, 0xFE,
-	0xF7, 0xD6, 0xFC, 0x01, 0x28, 0x01, 0xD1, 0xC0,
-	0x07, 0x04, 0x43, 0x00, 0x2C, 0xE4, 0xDB, 0xF8,
-	0xB2, 0x01, 0xF0, 0xD4, 0xFA, 0x1B, 0x48, 0x40,
-	0x30, 0x00, 0x8B, 0x00, 0x28, 0x02, 0xD1, 0xF9,
-	0xF7, 0x79, 0xF8, 0x10, 0xE0, 0xFE, 0xF7, 0x6B,
-	0xFE, 0x00, 0x28, 0x03, 0xD0, 0xEE, 0x62, 0xF9,
-	0xF7, 0x78, 0xF8, 0x08, 0xE0, 0x13, 0x4A, 0xE9,
-	0x6A, 0x52, 0x6D, 0x28, 0x46, 0x71, 0x1A, 0x91,
-	0x42, 0x01, 0xD9, 0xC6, 0x62, 0xEB, 0xE7, 0x69,
-	0x8B, 0x20, 0x46, 0x08, 0x43, 0xF8, 0xBD, 0xF8,
-	0xB5, 0x1B, 0x4B, 0x20, 0x4E, 0x20, 0x4C, 0x1B,
-	0x4D, 0x0D, 0x4A, 0x00, 0x29,
-	0x00, 0x01, 0x09, 0x00, 0x80, 0x77, 0xD0, 0x01,
-	0x29, 0x03, 0xD0, 0x02, 0x29, 0x74, 0xD1, 0x00,
-	0x20, 0x6C, 0xE0, 0x00, 0x28, 0x43, 0xD1, 0x04,
-	0xE0, 0x31, 0x5C, 0x1D, 0x5C, 0x49, 0x19, 0x31,
-	0x54, 0x40, 0x1C, 0x51, 0x6A, 0x81, 0x42, 0xF7,
-	0xD8, 0x00, 0x20, 0x34, 0xE0, 0x78, 0xDC, 0x00,
-	0x00, 0xC1, 0x01, 0x00, 0x20, 0x30, 0x02, 0x00,
-	0x20, 0x88, 0xDF, 0x00, 0x00, 0x08, 0x0F, 0x00,
-	0x20, 0x80, 0xE2, 0x00, 0x00, 0x3C, 0x03, 0x00,
-	0x20, 0x34, 0x03, 0x00, 0x20, 0x35, 0x03, 0x00,
-	0x20, 0x36, 0x03, 0x00, 0x20, 0xAC, 0x01, 0x00,
-	0x20, 0xB0, 0x01, 0x00, 0x20, 0x64, 0x08, 0x00,
-	0x20, 0x5E, 0x0A, 0x00, 0x20, 0x79, 0x02, 0x00,
-	0x00, 0x00, 0xF6, 0x00, 0x00, 0x80, 0xFA, 0x00,
-	0x00, 0x23, 0x83, 0x00, 0x00, 0xA8, 0x11, 0x00,
-	0x20, 0x1C, 0xCE, 0x00, 0x00, 0x74, 0x05, 0x00,
-	0x20, 0x6E, 0x07, 0x00, 0x20,
-	0x00, 0x01, 0x0A, 0x00, 0x80, 0xFF, 0x27, 0x41,
-	0x00, 0x1E, 0x18, 0xFB, 0x37, 0x65, 0x5A, 0xF7,
-	0x57, 0xED, 0x19, 0x65, 0x52, 0x40, 0x1C, 0x11,
-	0x6A, 0x81, 0x42, 0xF3, 0xD8, 0xF8, 0xBD, 0x00,
-	0x20, 0x06, 0xE0, 0x19, 0x5C, 0x2F, 0x5C, 0xC9,
-	0x1B, 0x37, 0x5C, 0xC9, 0x19, 0x31, 0x54, 0x40,
-	0x1C, 0x51, 0x6A, 0x81, 0x42, 0xF5, 0xD8, 0x00,
-	0x20, 0x0D, 0xE0, 0xFF, 0x21, 0x1E, 0x18, 0xFB,
-	0x31, 0x71, 0x56, 0xFF, 0x27, 0x2E, 0x18, 0xFB,
-	0x37, 0xF7, 0x57, 0xCE, 0x1B, 0x41, 0x00, 0x67,
-	0x5A, 0xF6, 0x19, 0x66, 0x52, 0x40, 0x1C, 0x11,
-	0x6A, 0x81, 0x42, 0xEE, 0xD8, 0xF8, 0xBD, 0x29,
-	0x5C, 0x1F, 0x5C, 0xC9, 0x1B, 0x37, 0x5C, 0xC9,
-	0x19, 0x31, 0x54, 0x40, 0x1C, 0x51, 0x6A, 0x81,
-	0x42, 0xF5, 0xD8, 0x00, 0x20, 0x0F, 0xE0, 0x12,
-	0xE0, 0x45, 0xE0, 0xFF, 0x21, 0x2E, 0x18, 0xFB,
-	0x31, 0x71, 0x56, 0xFF, 0x27,
-	0x00, 0x01, 0x0B, 0x00, 0x80, 0x1E, 0x18, 0xFB,
-	0x37, 0xF7, 0x57, 0xCE, 0x1B, 0x41, 0x00, 0x67,
-	0x5A, 0xF6, 0x19, 0x66, 0x52, 0x40, 0x1C, 0x11,
-	0x6A, 0x81, 0x42, 0xEE, 0xD8, 0xF8, 0xBD, 0x01,
-	0x28, 0x18, 0xD1, 0x00, 0x20, 0x04, 0xE0, 0x31,
-	0x5C, 0x1D, 0x5C, 0x49, 0x1B, 0x31, 0x54, 0x40,
-	0x1C, 0x51, 0x6A, 0x81, 0x42, 0xF7, 0xD8, 0x00,
-	0x20, 0x08, 0xE0, 0xFF, 0x27, 0x41, 0x00, 0x1E,
-	0x18, 0xFB, 0x37, 0x65, 0x5A, 0xF7, 0x57, 0xED,
-	0x1B, 0x65, 0x52, 0x40, 0x1C, 0x11, 0x6A, 0x81,
-	0x42, 0xF3, 0xD8, 0xF8, 0xBD, 0x00, 0x20, 0x04,
-	0xE0, 0x31, 0x5C, 0x2B, 0x5C, 0xC9, 0x1A, 0x31,
-	0x54, 0x40, 0x1C, 0x51, 0x6A, 0x81, 0x42, 0xF7,
-	0xD8, 0x00, 0x20, 0x08, 0xE0, 0xFF, 0x27, 0x41,
-	0x00, 0x2E, 0x18, 0xFB, 0x37, 0x63, 0x5A, 0xF7,
-	0x57, 0xDB, 0x1B, 0x63, 0x52, 0x40, 0x1C, 0x11,
-	0x6A, 0x81, 0x42, 0xF3, 0xD8,
-	0x00, 0x01, 0x0C, 0x00, 0x80, 0xF8, 0xBD, 0xFE,
-	0x4C, 0x00, 0x20, 0x60, 0x74, 0xFE, 0xF7, 0xC0,
-	0xFD, 0x21, 0x46, 0x60, 0x7C, 0x1C, 0x31, 0xFB,
-	0x4A, 0x09, 0x5C, 0x11, 0x70, 0x21, 0x46, 0x1F,
-	0x31, 0xF9, 0x4A, 0x09, 0x5C, 0x11, 0x70, 0x21,
-	0x46, 0x22, 0x31, 0xF8, 0x4A, 0x09, 0x5C, 0x11,
-	0x70, 0xF7, 0x49, 0x80, 0x02, 0x40, 0x18, 0xF7,
-	0x49, 0x08, 0x60, 0xFF, 0xF7, 0xB6, 0xF9, 0xFF,
-	0xF7, 0x86, 0xF9, 0xF8, 0xBD, 0x70, 0xB5, 0xEE,
-	0x4C, 0xF3, 0x4D, 0x21, 0x8B, 0x8A, 0x06, 0x03,
-	0xD4, 0xCA, 0x06, 0x01, 0xD4, 0xC9, 0x05, 0x46,
-	0xD5, 0xF0, 0x49, 0x09, 0x78, 0x00, 0x29, 0x42,
-	0xD1, 0xA1, 0x6A, 0x88, 0x42, 0x3E, 0xD9, 0x69,
-	0x6D, 0x08, 0x18, 0xA0, 0x62, 0x00, 0x20, 0xFE,
-	0xF7, 0x68, 0xFD, 0x68, 0x6E, 0xC0, 0xB2, 0xFE,
-	0xF7, 0x32, 0xFD, 0x00, 0x25, 0x65, 0x75, 0x60,
-	0x7C, 0x00, 0x28, 0x1B, 0xD0,
-	0x00, 0x01, 0x0D, 0x00, 0x80, 0x00, 0x20, 0xFE,
-	0xF7, 0x83, 0xFD, 0x60, 0x7C, 0xA0, 0x74, 0xDC,
-	0x48, 0x65, 0x74, 0x1C, 0x30, 0xDB, 0x4A, 0x00,
-	0x78, 0x10, 0x70, 0xD9, 0x48, 0xDA, 0x4A, 0x1F,
-	0x30, 0x00, 0x78, 0x10, 0x70, 0xD6, 0x48, 0xD9,
-	0x4A, 0x22, 0x30, 0x00, 0x78, 0x10, 0x70, 0xD9,
-	0x4A, 0xD7, 0x48, 0x10, 0x60, 0x29, 0x46, 0xA0,
-	0x7C, 0xFF, 0xF7, 0xDD, 0xFE, 0x00, 0x20, 0xFE,
-	0xF7, 0xF2, 0xFD, 0x00, 0x20, 0xFE, 0xF7, 0x00,
-	0xFE, 0x00, 0x20, 0x02, 0xF0, 0x57, 0xFD, 0x00,
-	0x20, 0xF9, 0xF7, 0x2A, 0xF9, 0x00, 0x20, 0xFA,
-	0xF7, 0x9A, 0xFE, 0x20, 0x8B, 0xFF, 0x21, 0xF1,
-	0x31, 0x88, 0x43, 0x20, 0x83, 0x70, 0xBD, 0x69,
-	0x6D, 0x08, 0x18, 0xA0, 0x62, 0x70, 0xBD, 0x10,
-	0xB5, 0xFF, 0xF7, 0xA8, 0xFF, 0xC2, 0x49, 0x08,
-	0x8B, 0x48, 0x83, 0xC7, 0x48, 0x80, 0x69, 0x01,
-	0x23, 0x01, 0x28, 0x0A, 0xD0,
-	0x00, 0x01, 0x0E, 0x00, 0x80, 0x88, 0x78, 0xC6,
-	0x4A, 0x40, 0x06, 0x40, 0x0F, 0x01, 0x28, 0x01,
-	0xD0, 0x02, 0x28, 0x0C, 0xD1, 0x10, 0x79, 0x01,
-	0x28, 0x01, 0xD1, 0x0B, 0x71, 0x10, 0xE0, 0x88,
-	0x79, 0x00, 0x28, 0x01, 0xD0, 0x03, 0x20, 0x00,
-	0xE0, 0x04, 0x20, 0x08, 0x71, 0x08, 0xE0, 0x10,
-	0x79, 0x01, 0x28, 0x01, 0xD1, 0x0E, 0x20, 0x00,
-	0xE0, 0x09, 0x20, 0x08, 0x71, 0x00, 0x20, 0x08,
-	0x73, 0x01, 0x20, 0xC0, 0x07, 0x10, 0xBD, 0x70,
-	0xB5, 0x05, 0x46, 0xFD, 0xF7, 0x65, 0xFE, 0xAC,
-	0x4C, 0xB4, 0x48, 0x60, 0x64, 0xE0, 0x64, 0xFE,
-	0xF7, 0x8A, 0xFC, 0xAF, 0x48, 0x41, 0x69, 0x03,
-	0x29, 0x04, 0xD1, 0x03, 0x20, 0xFE, 0xF7, 0x6D,
-	0xFA, 0x04, 0x20, 0x0A, 0xE0, 0x40, 0x69, 0x01,
-	0x28, 0x03, 0xD1, 0xFE, 0xF7, 0x66, 0xFA, 0x01,
-	0x20, 0x03, 0xE0, 0x02, 0x20, 0xFE, 0xF7, 0x61,
-	0xFA, 0x02, 0x20, 0xE0, 0x73,
-	0x00, 0x01, 0x0F, 0x00, 0x80, 0x05, 0x20, 0x65,
-	0x63, 0x20, 0x71, 0x01, 0x20, 0x70, 0xBD, 0xF8,
-	0xB5, 0x05, 0x46, 0x01, 0x24, 0xFE, 0xF7, 0x1F,
-	0xFB, 0x01, 0x28, 0x3F, 0xD1, 0xFD, 0xF7, 0x14,
-	0xFD, 0x97, 0x4E, 0xF0, 0x7B, 0x04, 0x28, 0x02,
-	0xD1, 0x03, 0x20, 0xF1, 0x6C, 0x05, 0xE0, 0xF1,
-	0x6C, 0xC0, 0x07, 0x01, 0xD0, 0x01, 0x20, 0x00,
-	0xE0, 0x02, 0x20, 0xFE, 0xF7, 0x14, 0xFF, 0xFF,
-	0xF7, 0x19, 0xFA, 0x99, 0x48, 0x04, 0x23, 0x01,
-	0x68, 0x31, 0x63, 0xB0, 0x78, 0x42, 0x06, 0x57,
-	0x0F, 0x03, 0x22, 0xD4, 0x07, 0x00, 0x2F, 0x22,
-	0xD1, 0x8F, 0x48, 0x81, 0x69, 0x01, 0x29, 0x2A,
-	0xD1, 0x92, 0x49, 0x09, 0x78, 0x01, 0x29, 0x32,
-	0xD0, 0xB1, 0x79, 0x00, 0x29, 0x2F, 0xD1, 0x71,
-	0x79, 0x01, 0x29, 0x2C, 0xD0, 0x8E, 0x49, 0x09,
-	0x78, 0x01, 0x29, 0x1C, 0xD0, 0xB1, 0x6B, 0x80,
-	0x68, 0x69, 0x1A, 0x81, 0x42,
-	0x00, 0x01, 0x10, 0x00, 0x80, 0x17, 0xD8, 0x00,
-	0x21, 0x31, 0x71, 0xF2, 0x79, 0x70, 0x78, 0x08,
-	0x24, 0x82, 0x42, 0x01, 0xD0, 0xF0, 0x71, 0x0C,
-	0x24, 0x80, 0x48, 0x01, 0x70, 0x43, 0xE0, 0x77,
-	0x79, 0x01, 0x2F, 0x06, 0xD0, 0x7C, 0x4F, 0xBF,
-	0x69, 0x00, 0x2F, 0x06, 0xD1, 0xB0, 0x79, 0x00,
-	0x28, 0x01, 0xD1, 0x33, 0x71, 0x37, 0xE0, 0x32,
-	0x71, 0x35, 0xE0, 0xC6, 0x09, 0x0C, 0xD0, 0x7B,
-	0x4E, 0x36, 0x78, 0x01, 0x2E, 0x03, 0xD0, 0x6E,
-	0x4E, 0xB6, 0x79, 0x00, 0x2E, 0x04, 0xD0, 0x28,
-	0x46, 0x00, 0xF0, 0x75, 0xFE, 0x04, 0x46, 0x26,
-	0xE0, 0x6F, 0x4E, 0x37, 0x69, 0x8F, 0x42, 0x05,
-	0xD3, 0x67, 0x49, 0xF7, 0x68, 0xC9, 0x6B, 0x69,
-	0x1A, 0xB9, 0x42, 0x02, 0xD9, 0x64, 0x48, 0x03,
-	0x71, 0x19, 0xE0, 0x63, 0x49, 0xC0, 0x09, 0x0A,
-	0xD0, 0x6D, 0x48, 0x00, 0x78, 0x01, 0x28, 0x04,
-	0xD0, 0x88, 0x6B, 0xB3, 0x68,
-	0x00, 0x01, 0x11, 0x00, 0x80, 0x28, 0x1A, 0x98,
-	0x42, 0x01, 0xD9, 0x0A, 0x71, 0x0B, 0xE0, 0x00,
-	0x22, 0x0A, 0x71, 0xCB, 0x79, 0x48, 0x78, 0x08,
-	0x24, 0x83, 0x42, 0x01, 0xD0, 0xC8, 0x71, 0x0C,
-	0x24, 0x5E, 0x48, 0x02, 0x70, 0x8A, 0x71, 0x20,
-	0x46, 0xF8, 0xBD, 0x10, 0xB5, 0x61, 0x48, 0x42,
-	0x78, 0x01, 0x78, 0x07, 0x20, 0x00, 0xF0, 0x48,
-	0xFE, 0xFD, 0xF7, 0xD5, 0xFC, 0x59, 0x48, 0x50,
-	0x4C, 0xE0, 0x30, 0xA0, 0x64, 0x20, 0x65, 0xFE,
-	0xF7, 0xCD, 0xFB, 0xE3, 0x7A, 0xA2, 0x7A, 0x61,
-	0x7A, 0x20, 0x7A, 0xFE, 0xF7, 0xCB, 0xFA, 0x06,
-	0x20, 0x20, 0x71, 0x01, 0x20, 0x10, 0xBD, 0x70,
-	0xB5, 0x05, 0x46, 0xFD, 0xF7, 0xC0, 0xFC, 0x4F,
-	0x48, 0x45, 0x4C, 0xE0, 0x30, 0xA0, 0x64, 0x20,
-	0x65, 0xFE, 0xF7, 0xB8, 0xFB, 0xFE, 0xF7, 0xA3,
-	0xF8, 0x07, 0x20, 0xA5, 0x63, 0x20, 0x71, 0x01,
-	0x20, 0x70, 0xBD, 0x10, 0xB5,
-	0x00, 0x01, 0x12, 0x00, 0x80, 0x04, 0x46, 0xFD,
-	0xF7, 0x29, 0xFE, 0x46, 0x48, 0xE0, 0x30, 0xFE,
-	0xF7, 0xA9, 0xFB, 0xFE, 0xF7, 0x9F, 0xF9, 0x3A,
-	0x48, 0x08, 0x21, 0xC4, 0x63, 0x01, 0x71, 0x01,
-	0x20, 0x10, 0xBD, 0xF8, 0xB5, 0x00, 0x26, 0x00,
-	0xF0, 0xE9, 0xFD, 0xFE, 0xF7, 0x01, 0xFC, 0x34,
-	0x4D, 0x04, 0x46, 0xA8, 0x7B, 0x01, 0x28, 0x0C,
-	0xD1, 0xFE, 0xF7, 0xFE, 0xFB, 0x00, 0x28, 0x08,
-	0xD1, 0x00, 0x2C, 0x06, 0xD1, 0xA8, 0x73, 0xFF,
-	0xF7, 0x02, 0xF8, 0xFF, 0xF7, 0x2E, 0xF8, 0xFE,
-	0xF7, 0xE3, 0xFF, 0x28, 0x8B, 0x38, 0x49, 0x30,
-	0x4F, 0xC2, 0x05, 0x06, 0xD5, 0xFA, 0x6C, 0x3B,
-	0x6D, 0xD2, 0x1A, 0xA2, 0x42, 0x0E, 0xD9, 0x88,
-	0x43, 0x28, 0x83, 0x68, 0x7D, 0x01, 0x28, 0x16,
-	0xD1, 0x38, 0x6C, 0x00, 0x28, 0x13, 0xD1, 0xF8,
-	0x6C, 0xA0, 0x42, 0x05, 0xD2, 0x28, 0x8B, 0x08,
-	0x43, 0x28, 0x83, 0x1F, 0xE0,
-	0x00, 0x01, 0x13, 0x00, 0x80, 0x01, 0x20, 0xF8,
-	0xBD, 0xFE, 0xF7, 0xD6, 0xFB, 0x80, 0x21, 0x00,
-	0x28, 0x28, 0x8B, 0x01, 0xD0, 0x08, 0x43, 0x00,
-	0xE0, 0x88, 0x43, 0x28, 0x83, 0x13, 0xE0, 0xFE,
-	0xF7, 0xCB, 0xFB, 0x00, 0x28, 0x09, 0xD1, 0xF8,
-	0x6C, 0xA0, 0x42, 0x06, 0xD3, 0xFE, 0xF7, 0xBB,
-	0xFB, 0x00, 0x28, 0x08, 0xD0, 0x28, 0x8B, 0xC0,
-	0x06, 0x05, 0xD4, 0x00, 0x20, 0xE8, 0x74, 0x28,
-	0x75, 0x01, 0x20, 0xA8, 0x75, 0x01, 0x26, 0x30,
-	0x46, 0xF8, 0xBD, 0xFE, 0xB5, 0x01, 0x26, 0xFE,
-	0xF7, 0x02, 0xFA, 0x01, 0x28, 0x72, 0xD1, 0xFD,
-	0xF7, 0xF7, 0xFB, 0x0F, 0x48, 0xC0, 0x6B, 0xF6,
-	0x07, 0x07, 0x4C, 0x01, 0x28, 0x2A, 0xD1, 0x0C,
-	0x48, 0x40, 0x30, 0x40, 0x8B, 0xE1, 0x78, 0x88,
-	0x43, 0xC0, 0x07, 0x23, 0xD1, 0xFF, 0xF7, 0x95,
-	0xFF, 0x01, 0x28, 0x1F, 0xD1, 0x15, 0x20, 0x3E,
-	0xE0, 0x30, 0x02, 0x00, 0x20,
-	0x00, 0x01, 0x14, 0x00, 0x80, 0x34, 0x03, 0x00,
-	0x20, 0x35, 0x03, 0x00, 0x20, 0x36, 0x03, 0x00,
-	0x20, 0x80, 0xE2, 0x00, 0x00, 0x3C, 0x03, 0x00,
-	0x20, 0x78, 0xDC, 0x00, 0x00, 0x92, 0x00, 0x00,
-	0x20, 0x40, 0xDE, 0x00, 0x00, 0x28, 0x0E, 0x00,
-	0x20, 0x08, 0x02, 0x00, 0x20, 0xC3, 0x01, 0x00,
-	0x20, 0xC2, 0x01, 0x00, 0x20, 0x9C, 0x00, 0x00,
-	0x20, 0x00, 0x01, 0x00, 0x00, 0x20, 0x8B, 0x60,
-	0x83, 0x22, 0x6D, 0x00, 0x92, 0xE3, 0x7A, 0xA2,
-	0x7A, 0x61, 0x7A, 0x20, 0x7A, 0xFE, 0xF7, 0x2A,
-	0xFF, 0xFF, 0xF7, 0xE6, 0xF9, 0xE2, 0x7A, 0x00,
-	0x92, 0xA3, 0x7A, 0x62, 0x7A, 0x21, 0x7A, 0xFD,
-	0x48, 0x01, 0x90, 0xFA, 0xF7, 0x1A, 0xFB, 0xFC,
-	0x4F, 0x38, 0x78, 0x01, 0x28, 0x06, 0xD8, 0x00,
-	0x25, 0x01, 0x28, 0x06, 0xD1, 0xF9, 0x48, 0xC0,
-	0x7A, 0xC0, 0x06, 0x04, 0xD5, 0x03, 0x20, 0x20,
-	0x71, 0x1C, 0xE0, 0x00, 0x28,
-	0x00, 0x01, 0x15, 0x00, 0x80, 0x00, 0xD0, 0x65,
-	0x70, 0x01, 0x98, 0x02, 0xF0, 0x27, 0xFA, 0x02,
-	0xF0, 0x97, 0xFB, 0x38, 0x78, 0x00, 0x28, 0x0B,
-	0xD1, 0xA0, 0x79, 0x00, 0x28, 0x08, 0xD0, 0xA0,
-	0x78, 0x40, 0x06, 0x40, 0x0F, 0x01, 0x28, 0x01,
-	0xD0, 0x02, 0x28, 0x01, 0xD1, 0xFE, 0xF7, 0x93,
-	0xFF, 0x60, 0x78, 0xE0, 0x71, 0x38, 0x78, 0xA0,
-	0x71, 0x0C, 0x26, 0x25, 0x71, 0x30, 0x46, 0xFE,
-	0xBD, 0xF8, 0xB5, 0xE7, 0x4D, 0x00, 0x21, 0x2A,
-	0x7C, 0xE6, 0x4E, 0x0C, 0x46, 0x01, 0x2A, 0x08,
-	0xD0, 0x2A, 0x6C, 0x33, 0x6A, 0x82, 0x1A, 0x9A,
-	0x42, 0x70, 0xD9, 0xE3, 0x4A, 0x12, 0x78, 0x00,
-	0x2A, 0x6C, 0xD1, 0x28, 0x64, 0x00, 0x20, 0x28,
-	0x74, 0xE0, 0x4B, 0x09, 0xE0, 0xE0, 0x4A, 0xB7,
-	0x6A, 0x12, 0x56, 0xBA, 0x42, 0x02, 0xDC, 0xF7,
-	0x6A, 0xBA, 0x42, 0x00, 0xDA, 0x49, 0x1C, 0x40,
-	0x1C, 0x5A, 0x6A, 0x82, 0x42,
-	0x00, 0x01, 0x16, 0x00, 0x80, 0xF2, 0xD8, 0x00,
-	0x20, 0x0A, 0xE0, 0xDA, 0x4A, 0x47, 0x00, 0xD2,
-	0x5F, 0x77, 0x6B, 0xBA, 0x42, 0x02, 0xDC, 0xB7,
-	0x6B, 0xBA, 0x42, 0x00, 0xDA, 0x64, 0x1C, 0x40,
-	0x1C, 0x1A, 0x6A, 0x82, 0x42, 0xF1, 0xD8, 0xCF,
-	0x48, 0x40, 0x6A, 0xCD, 0x4E, 0x1F, 0x36, 0x88,
-	0x42, 0x5D, 0xD2, 0xFD, 0xF7, 0x98, 0xFB, 0xCB,
-	0x49, 0xC8, 0x6B, 0x01, 0x28, 0x3F, 0xD1, 0x08,
-	0x46, 0x40, 0x30, 0x40, 0x8B, 0xEA, 0x78, 0x90,
-	0x43, 0xC0, 0x07, 0x38, 0xD1, 0x08, 0x6C, 0x00,
-	0x28, 0x35, 0xD0, 0x03, 0x20, 0xF8, 0xF7, 0xDE,
-	0xFC, 0xFE, 0xF7, 0xF3, 0xFA, 0x00, 0x27, 0x79,
-	0x1E, 0x03, 0x20, 0xF8, 0xF7, 0xC8, 0xFC, 0xFE,
-	0xF7, 0x13, 0xFB, 0x03, 0xF0, 0xE0, 0xFB, 0xBC,
-	0x49, 0x1C, 0x31, 0xC8, 0x55, 0x03, 0xF0, 0xFB,
-	0xFB, 0xF0, 0x55, 0x03, 0xF0, 0x14, 0xFC, 0xB8,
-	0x49, 0x22, 0x31, 0xC8, 0x55,
-	0x00, 0x01, 0x17, 0x00, 0x80, 0x7F, 0x1C, 0x03,
-	0x2F, 0xE9, 0xD3, 0x28, 0x8B, 0x40, 0x06, 0x07,
-	0xD5, 0x69, 0x7C, 0x03, 0x20, 0x49, 0x1E, 0xF8,
-	0xF7, 0xAE, 0xFC, 0xFE, 0xF7, 0xF9, 0xFA, 0x1E,
-	0xE0, 0x00, 0x20, 0xFE, 0xF7, 0xF5, 0xFA, 0x28,
-	0x8B, 0x80, 0x06, 0x03, 0xD5, 0x02, 0x20, 0xF8,
-	0xF7, 0xB1, 0xFC, 0x00, 0xE0, 0x00, 0x20, 0xFE,
-	0xF7, 0xC4, 0xFA, 0x10, 0xE0, 0x66, 0xE0, 0x03,
-	0xF0, 0xB6, 0xFB, 0xA7, 0x49, 0x6A, 0x7C, 0x1C,
-	0x31, 0x88, 0x54, 0x03, 0xF0, 0xD0, 0xFB, 0x69,
-	0x7C, 0x70, 0x54, 0x03, 0xF0, 0xE8, 0xFB, 0xA2,
-	0x49, 0x6A, 0x7C, 0x22, 0x31, 0x88, 0x54, 0xA0,
-	0x48, 0x69, 0x7C, 0x1C, 0x30, 0x40, 0x5C, 0xA4,
-	0x49, 0x08, 0x70, 0xFE, 0xF7, 0xDE, 0xFE, 0x9D,
-	0x48, 0x01, 0x6B, 0xA1, 0x42, 0x4A, 0xD2, 0xC1,
-	0x6B, 0x00, 0x29, 0x32, 0xD0, 0x00, 0x6C, 0x00,
-	0x28, 0x2F, 0xD0, 0x03, 0x20,
-	0x00, 0x01, 0x18, 0x00, 0x80, 0xF8, 0xF7, 0x86,
-	0xFC, 0xFE, 0xF7, 0x9B, 0xFA, 0x94, 0x4F, 0x00,
-	0x24, 0x22, 0x37, 0x61, 0x1E, 0x03, 0x20, 0xF8,
-	0xF7, 0x6E, 0xFC, 0xFE, 0xF7, 0xB9, 0xFA, 0x03,
-	0xF0, 0xA6, 0xFB, 0x30, 0x55, 0x03, 0xF0, 0xBF,
-	0xFB, 0x38, 0x55, 0x64, 0x1C, 0x03, 0x2C, 0xF0,
-	0xD3, 0x28, 0x8B, 0x40, 0x06, 0x07, 0xD5, 0x69,
-	0x7C, 0x03, 0x20, 0x49, 0x1E, 0xF8, 0xF7, 0x5B,
-	0xFC, 0xFE, 0xF7, 0xA6, 0xFA, 0x17, 0xE0, 0x00,
-	0x20, 0xFE, 0xF7, 0xA2, 0xFA, 0x28, 0x8B, 0x80,
-	0x06, 0x03, 0xD5, 0x02, 0x20, 0xF8, 0xF7, 0x5E,
-	0xFC, 0x00, 0xE0, 0x00, 0x20, 0xFE, 0xF7, 0x71,
-	0xFA, 0x09, 0xE0, 0x03, 0xF0, 0x84, 0xFB, 0x69,
-	0x7C, 0x70, 0x54, 0x03, 0xF0, 0x9C, 0xFB, 0x7C,
-	0x49, 0x6A, 0x7C, 0x22, 0x31, 0x88, 0x54, 0x68,
-	0x7C, 0x80, 0x4A, 0x31, 0x5C, 0x11, 0x70, 0x78,
-	0x49, 0x22, 0x31, 0x08, 0x5C,
-	0x00, 0x01, 0x19, 0x00, 0x80, 0x7E, 0x49, 0x08,
-	0x70, 0xFE, 0xF7, 0x61, 0xFE, 0xF8, 0xBD, 0xF1,
-	0xB5, 0x82, 0xB0, 0x01, 0x25, 0xFE, 0xF7, 0x9F,
-	0xF8, 0x01, 0x28, 0x5C, 0xD1, 0xFD, 0xF7, 0x94,
-	0xFA, 0x70, 0x4E, 0xF0, 0x6B, 0xED, 0x07, 0x6E,
-	0x4C, 0x01, 0x28, 0x0D, 0xD1, 0x30, 0x46, 0x40,
-	0x30, 0x40, 0x8B, 0xE1, 0x78, 0x88, 0x43, 0xC0,
-	0x07, 0x06, 0xD1, 0xFF, 0xF7, 0x32, 0xFE, 0x01,
-	0x28, 0x02, 0xD1, 0x15, 0x20, 0x20, 0x71, 0x46,
-	0xE0, 0x20, 0x8B, 0x60, 0x83, 0x20, 0x6D, 0xFE,
-	0xF7, 0xDC, 0xFD, 0xFF, 0xF7, 0xA5, 0xF8, 0x5F,
-	0x48, 0x01, 0x90, 0xFA, 0xF7, 0x89, 0xFB, 0x5E,
-	0x4F, 0x00, 0x25, 0x38, 0x78, 0x00, 0x28, 0x00,
-	0xD0, 0x65, 0x70, 0x5F, 0x48, 0x00, 0x78, 0x00,
-	0x28, 0x03, 0xD0, 0x60, 0x78, 0x80, 0x21, 0x08,
-	0x43, 0x60, 0x70, 0x01, 0x98, 0x02, 0xF0, 0xEE,
-	0xF8, 0x02, 0xF0, 0x5E, 0xFA,
-	0x00, 0x01, 0x1A, 0x00, 0x80, 0x60, 0x78, 0xE0,
-	0x71, 0x38, 0x78, 0x00, 0x28, 0x0E, 0xD1, 0x25,
-	0x71, 0xA0, 0x79, 0x0C, 0x25, 0x00, 0x28, 0x14,
-	0xD0, 0xA0, 0x78, 0x40, 0x06, 0x40, 0x0F, 0x01,
-	0x28, 0x01, 0xD0, 0x02, 0x28, 0x0D, 0xD1, 0xFE,
-	0xF7, 0x56, 0xFE, 0x0A, 0xE0, 0x55, 0x48, 0x00,
-	0x79, 0x01, 0x28, 0x01, 0xD1, 0x0E, 0x20, 0x00,
-	0xE0, 0x09, 0x20, 0x20, 0x71, 0x52, 0x4D, 0x01,
-	0x20, 0x20, 0x73, 0x38, 0x78, 0xA0, 0x71, 0xF0,
-	0x69, 0x01, 0x28, 0x04, 0xD1, 0x4F, 0x48, 0x20,
-	0x65, 0x02, 0x98, 0xFF, 0xF7, 0xB5, 0xFE, 0x28,
-	0x46, 0xFE, 0xBD, 0xF8, 0xB5, 0x07, 0x46, 0x01,
-	0x26, 0xFE, 0xF7, 0x39, 0xF8, 0x01, 0x28, 0x51,
-	0xD1, 0xFD, 0xF7, 0x2E, 0xFA, 0x47, 0x48, 0xFE,
-	0xF7, 0x39, 0xFC, 0x44, 0x48, 0x00, 0x79, 0x3B,
-	0x4E, 0x00, 0x25, 0x39, 0x4C, 0x01, 0x28, 0x05,
-	0xD1, 0x30, 0x69, 0x21, 0x6B,
-	0x00, 0x01, 0x1B, 0x00, 0x80, 0x88, 0x42, 0x01,
-	0xD2, 0x41, 0x48, 0x05, 0x70, 0xFE, 0xF7, 0x31,
-	0xFF, 0xA0, 0x78, 0x40, 0x06, 0x40, 0x0F, 0x01,
-	0x28, 0x01, 0xD1, 0x20, 0x20, 0x00, 0xE0, 0x30,
-	0x20, 0x02, 0xF0, 0xE1, 0xFC, 0x03, 0x21, 0x21,
-	0x28, 0x01, 0xD0, 0x31, 0x28, 0x12, 0xD1, 0x01,
-	0x22, 0x2A, 0x4B, 0x21, 0x28, 0xDA, 0x72, 0x01,
-	0xD1, 0x20, 0x20, 0x00, 0xE0, 0x40, 0x20, 0x60,
-	0x70, 0xE0, 0x71, 0xA0, 0x78, 0x0C, 0x26, 0xC0,
-	0x09, 0x1F, 0xD0, 0x60, 0x79, 0x01, 0x28, 0x1C,
-	0xD1, 0x21, 0x71, 0x1B, 0xE0, 0xA2, 0x78, 0xD2,
-	0x09, 0x10, 0xD0, 0x01, 0x28, 0x0B, 0xD0, 0x60,
-	0x79, 0x01, 0x28, 0x08, 0xD0, 0x2B, 0x48, 0x00,
-	0x78, 0x01, 0x28, 0x04, 0xD0, 0xA0, 0x6B, 0xB2,
-	0x68, 0x38, 0x1A, 0x90, 0x42, 0x02, 0xD9, 0x01,
-	0x26, 0xF6, 0x07, 0xE9, 0xE7, 0xE1, 0x79, 0x60,
-	0x78, 0x08, 0x26, 0x81, 0x42,
-	0x00, 0x01, 0x1C, 0x00, 0x80, 0x01, 0xD0, 0x0C,
-	0x26, 0xE0, 0x71, 0x25, 0x71, 0x30, 0x46, 0xF8,
-	0xBD, 0x70, 0xB5, 0x05, 0x46, 0x13, 0x48, 0x80,
-	0x69, 0x11, 0x4C, 0x01, 0x28, 0x05, 0xD1, 0x1B,
-	0x48, 0xE0, 0x38, 0x60, 0x64, 0xE0, 0x64, 0xFE,
-	0xF7, 0x22, 0xF9, 0x18, 0x48, 0xA0, 0x64, 0x09,
-	0x48, 0x20, 0x65, 0xFD, 0xF7, 0x18, 0xFA, 0xA0,
-	0x6C, 0xFE, 0xF7, 0x14, 0xF9, 0xFD, 0xF7, 0xFF,
-	0xFD, 0x0A, 0x20, 0xA5, 0x63, 0x20, 0x71, 0x21,
-	0x7B, 0x05, 0x20, 0x00, 0x29, 0x00, 0xD1, 0x01,
-	0x20, 0x70, 0xBD, 0x00, 0x00, 0xA8, 0x11, 0x00,
-	0x20, 0x92, 0x00, 0x00, 0x20, 0x4C, 0x03, 0x00,
-	0x20, 0x30, 0x02, 0x00, 0x20, 0x78, 0xDC, 0x00,
-	0x00, 0x93, 0x00, 0x00, 0x20, 0x88, 0xDF, 0x00,
-	0x00, 0x74, 0x05, 0x00, 0x20, 0x6E, 0x07, 0x00,
-	0x20, 0x34, 0x03, 0x00, 0x20, 0x35, 0x03, 0x00,
-	0x20, 0x36, 0x03, 0x00, 0x20,
-	0x00, 0x01, 0x1D, 0x00, 0x80, 0x40, 0xDE, 0x00,
-	0x00, 0x01, 0x00, 0x00, 0x80, 0x08, 0x0F, 0x00,
-	0x20, 0x2C, 0x02, 0x00, 0x20, 0xC2, 0x01, 0x00,
-	0x20, 0x10, 0xB5, 0xFD, 0xF7, 0x9C, 0xFF, 0x01,
-	0x28, 0x19, 0xD1, 0xFD, 0xF7, 0x91, 0xF9, 0xF8,
-	0x48, 0xC0, 0x6B, 0xF8, 0x4C, 0x01, 0x28, 0x0E,
-	0xD1, 0xF5, 0x48, 0x40, 0x30, 0x40, 0x8B, 0xE1,
-	0x78, 0x88, 0x43, 0xC0, 0x07, 0x07, 0xD1, 0xFF,
-	0xF7, 0x30, 0xFD, 0x01, 0x28, 0x03, 0xD1, 0x15,
-	0x20, 0x20, 0x71, 0xC0, 0x07, 0x10, 0xBD, 0x0B,
-	0x20, 0x20, 0x71, 0x00, 0x20, 0x10, 0xBD, 0x01,
-	0x20, 0x10, 0xBD, 0x10, 0xB5, 0xFD, 0xF7, 0xC3,
-	0xF9, 0xEA, 0x48, 0x80, 0x6C, 0xFE, 0xF7, 0xBE,
-	0xF8, 0xFD, 0xF7, 0xA9, 0xFD, 0x10, 0xBD, 0x70,
-	0xB5, 0xE6, 0x4D, 0x04, 0x46, 0xA9, 0x6C, 0x28,
-	0x6D, 0x29, 0x65, 0xA8, 0x64, 0xFE, 0xF7, 0xB2,
-	0xF8, 0xE1, 0x4E, 0xB0, 0x69,
-	0x00, 0x01, 0x1E, 0x00, 0x80, 0x01, 0x28, 0x0F,
-	0xD1, 0x68, 0x6B, 0x71, 0x68, 0x20, 0x1A, 0x88,
-	0x42, 0x0A, 0xD9, 0xDF, 0x48, 0xFE, 0xF7, 0xA0,
-	0xF8, 0xFD, 0xF7, 0x7E, 0xFA, 0x70, 0x69, 0xFD,
-	0xF7, 0x90, 0xFE, 0x16, 0x20, 0x6C, 0x63, 0x05,
-	0xE0, 0xFD, 0xF7, 0x9D, 0xF9, 0xFD, 0xF7, 0x87,
-	0xFD, 0x0C, 0x20, 0xAC, 0x63, 0x28, 0x71, 0x01,
-	0x20, 0xC0, 0x07, 0x89, 0xE7, 0xF1, 0xB5, 0xD3,
-	0x4C, 0x20, 0x6D, 0xFE, 0xF7, 0xA2, 0xFC, 0xFE,
-	0xF7, 0x6B, 0xFF, 0x20, 0x6D, 0xFA, 0xF7, 0x50,
-	0xFA, 0xD0, 0x4D, 0xD1, 0x49, 0x28, 0x78, 0x08,
-	0x70, 0xD0, 0x49, 0x00, 0x27, 0x09, 0x78, 0x03,
-	0x29, 0x01, 0xD1, 0x2F, 0x70, 0x02, 0xE0, 0x00,
-	0x28, 0x00, 0xD0, 0x67, 0x70, 0xCC, 0x48, 0x00,
-	0x78, 0x00, 0x28, 0x03, 0xD0, 0x60, 0x78, 0x80,
-	0x21, 0x08, 0x43, 0x60, 0x70, 0x20, 0x6D, 0x01,
-	0xF0, 0xAD, 0xFF, 0x02, 0xF0,
-	0x00, 0x01, 0x1F, 0x00, 0x80, 0x1D, 0xF9, 0x60,
-	0x78, 0xE0, 0x71, 0xBF, 0x48, 0x04, 0x26, 0x80,
-	0x69, 0x0B, 0x21, 0x01, 0x28, 0x28, 0x78, 0x03,
-	0xD1, 0x00, 0x28, 0x0E, 0xD1, 0x27, 0x71, 0x0D,
-	0xE0, 0x00, 0x28, 0x0A, 0xD1, 0xA0, 0x78, 0x40,
-	0x06, 0x40, 0x0F, 0x01, 0x28, 0x01, 0xD0, 0x02,
-	0x28, 0x03, 0xD1, 0x27, 0x71, 0xFE, 0xF7, 0x0F,
-	0xFD, 0x00, 0xE0, 0x21, 0x71, 0x28, 0x78, 0xA0,
-	0x71, 0x20, 0x8B, 0x60, 0x83, 0xFD, 0xF7, 0x07,
-	0xFF, 0x01, 0x25, 0x01, 0x28, 0x1F, 0xD1, 0xFD,
-	0xF7, 0xFB, 0xF8, 0xAD, 0x4F, 0xF8, 0x6B, 0x01,
-	0x28, 0x0F, 0xD1, 0x38, 0x46, 0x40, 0x30, 0x40,
-	0x8B, 0xE1, 0x78, 0x88, 0x43, 0xC0, 0x07, 0x08,
-	0xD1, 0xFF, 0xF7, 0x9B, 0xFC, 0x01, 0x28, 0x04,
-	0xD1, 0x15, 0x20, 0x25, 0x73, 0x20, 0x71, 0xC6,
-	0x07, 0x11, 0xE0, 0x00, 0x98, 0xFF, 0xF7, 0x22,
-	0xFB, 0xF8, 0x69, 0x01, 0x28,
-	0x00, 0x01, 0x20, 0x00, 0x80, 0x0B, 0xD1, 0x00,
-	0x98, 0xFF, 0xF7, 0x5A, 0xFD, 0x07, 0xE0, 0x20,
-	0x79, 0x05, 0x26, 0x00, 0x28, 0x00, 0xD0, 0x00,
-	0x25, 0x65, 0x73, 0x0D, 0x20, 0x20, 0x71, 0x30,
-	0x46, 0xF8, 0xBD, 0x70, 0xB5, 0x06, 0x46, 0xFD,
-	0xF7, 0xD6, 0xFE, 0x01, 0x28, 0x29, 0xD1, 0xFD,
-	0xF7, 0xCB, 0xF8, 0x95, 0x4D, 0xE8, 0x6B, 0x95,
-	0x4C, 0x01, 0x28, 0x0E, 0xD1, 0x28, 0x46, 0x40,
-	0x30, 0x40, 0x8B, 0xE1, 0x78, 0x88, 0x43, 0xC0,
-	0x07, 0x07, 0xD1, 0xFF, 0xF7, 0x6A, 0xFC, 0x01,
-	0x28, 0x03, 0xD1, 0x15, 0x20, 0x20, 0x71, 0xC0,
-	0x07, 0xFA, 0xE6, 0x30, 0x46, 0xFF, 0xF7, 0xF2,
-	0xFA, 0xE8, 0x69, 0x01, 0x28, 0x02, 0xD1, 0x30,
-	0x46, 0xFF, 0xF7, 0x2A, 0xFD, 0x60, 0x7B, 0x01,
-	0x28, 0x03, 0xD1, 0x00, 0x20, 0x20, 0x71, 0x08,
-	0x20, 0xEA, 0xE6, 0x0B, 0x20, 0x20, 0x71, 0x00,
-	0x20, 0xE6, 0xE6, 0x01, 0x20,
-	0x00, 0x01, 0x21, 0x00, 0x80, 0xE4, 0xE6, 0x70,
-	0xB5, 0x05, 0x46, 0x80, 0x4C, 0x85, 0x48, 0x60,
-	0x64, 0x70, 0x30, 0xE0, 0x64, 0x70, 0x30, 0xA0,
-	0x64, 0x83, 0x48, 0x20, 0x65, 0x7C, 0x48, 0xFD,
-	0xF7, 0xDB, 0xFF, 0xFD, 0xF7, 0xB9, 0xF9, 0x60,
-	0x6C, 0xFD, 0xF7, 0xE1, 0xFF, 0x76, 0x48, 0x41,
-	0x69, 0x03, 0x29, 0x04, 0xD1, 0x03, 0x20, 0xFD,
-	0xF7, 0xC4, 0xFD, 0x04, 0x20, 0x0A, 0xE0, 0x40,
-	0x69, 0x01, 0x28, 0x03, 0xD1, 0xFD, 0xF7, 0xBD,
-	0xFD, 0x01, 0x20, 0x03, 0xE0, 0x02, 0x20, 0xFD,
-	0xF7, 0xB8, 0xFD, 0x02, 0x20, 0xE0, 0x73, 0x0F,
-	0x20, 0x65, 0x63, 0x20, 0x71, 0x21, 0x7B, 0x05,
-	0x20, 0x00, 0x29, 0x00, 0xD1, 0x01, 0x20, 0xB3,
-	0xE6, 0x10, 0xB5, 0xFD, 0xF7, 0x74, 0xFE, 0x01,
-	0x28, 0x1C, 0xD1, 0xFD, 0xF7, 0x69, 0xF8, 0x64,
-	0x48, 0xC0, 0x6B, 0x64, 0x4C, 0x01, 0x28, 0x11,
-	0xD1, 0x61, 0x48, 0x40, 0x30,
-	0x00, 0x01, 0x22, 0x00, 0x80, 0x40, 0x8B, 0xE1,
-	0x78, 0x88, 0x43, 0xC0, 0x07, 0x0A, 0xD1, 0xFF,
-	0xF7, 0x08, 0xFC, 0x01, 0x28, 0x06, 0xD1, 0x65,
-	0x48, 0xFD, 0xF7, 0x9E, 0xFF, 0x15, 0x20, 0x20,
-	0x71, 0xC0, 0x07, 0x10, 0xBD, 0x10, 0x20, 0x20,
-	0x71, 0x00, 0x20, 0x10, 0xBD, 0x01, 0x20, 0x10,
-	0xBD, 0x70, 0xB5, 0x56, 0x4C, 0x05, 0x46, 0x61,
-	0x6C, 0xE0, 0x6C, 0xE1, 0x64, 0x60, 0x64, 0xA1,
-	0x6C, 0x20, 0x6D, 0x21, 0x65, 0xA0, 0x64, 0xFD,
-	0xF7, 0x67, 0xF9, 0x60, 0x6C, 0xFD, 0xF7, 0x8F,
-	0xFF, 0x4D, 0x48, 0x41, 0x69, 0x03, 0x29, 0x04,
-	0xD1, 0x03, 0x20, 0xFD, 0xF7, 0x72, 0xFD, 0x04,
-	0x20, 0x0A, 0xE0, 0x40, 0x69, 0x01, 0x28, 0x03,
-	0xD1, 0xFD, 0xF7, 0x6B, 0xFD, 0x01, 0x20, 0x03,
-	0xE0, 0x02, 0x20, 0xFD, 0xF7, 0x66, 0xFD, 0x02,
-	0x20, 0xE0, 0x73, 0x11, 0x20, 0x65, 0x63, 0x20,
-	0x71, 0xC0, 0x07, 0x65, 0xE6,
-	0x00, 0x01, 0x23, 0x00, 0x80, 0xF1, 0xB5, 0x41,
-	0x4C, 0xE0, 0x7B, 0x21, 0x46, 0xC9, 0x6C, 0x04,
-	0x28, 0x01, 0xD1, 0x03, 0x20, 0x04, 0xE0, 0xC0,
-	0x07, 0x01, 0xD0, 0x01, 0x20, 0x00, 0xE0, 0x02,
-	0x20, 0xFE, 0xF7, 0x21, 0xFA, 0xFE, 0xF7, 0x26,
-	0xFD, 0x20, 0x6D, 0xFE, 0xF7, 0x6E, 0xFB, 0xFE,
-	0xF7, 0x37, 0xFE, 0x20, 0x6D, 0xFA, 0xF7, 0x1C,
-	0xF9, 0x36, 0x4D, 0x37, 0x49, 0x28, 0x78, 0x08,
-	0x70, 0x36, 0x49, 0x00, 0x27, 0x09, 0x78, 0x03,
-	0x29, 0x01, 0xD1, 0x2F, 0x70, 0x02, 0xE0, 0x00,
-	0x28, 0x00, 0xD0, 0x67, 0x70, 0x32, 0x48, 0x00,
-	0x78, 0x00, 0x28, 0x03, 0xD0, 0x60, 0x78, 0x80,
-	0x21, 0x08, 0x43, 0x60, 0x70, 0x20, 0x6D, 0x01,
-	0xF0, 0x79, 0xFE, 0x01, 0xF0, 0xE9, 0xFF, 0x60,
-	0x78, 0xE0, 0x71, 0x25, 0x48, 0x04, 0x26, 0x80,
-	0x69, 0x10, 0x21, 0x01, 0x28, 0x28, 0x78, 0x03,
-	0xD1, 0x00, 0x28, 0x0E, 0xD1,
-	0x00, 0x01, 0x24, 0x00, 0x80, 0x27, 0x71, 0x0D,
-	0xE0, 0x00, 0x28, 0x0A, 0xD1, 0xA0, 0x78, 0x40,
-	0x06, 0x40, 0x0F, 0x01, 0x28, 0x01, 0xD0, 0x02,
-	0x28, 0x03, 0xD1, 0x27, 0x71, 0xFE, 0xF7, 0xDB,
-	0xFB, 0x00, 0xE0, 0x21, 0x71, 0x28, 0x78, 0xA0,
-	0x71, 0x20, 0x8B, 0x60, 0x83, 0xFD, 0xF7, 0xD3,
-	0xFD, 0x01, 0x25, 0x01, 0x28, 0x3C, 0xD1, 0xFC,
-	0xF7, 0xC7, 0xFF, 0x13, 0x4F, 0xF8, 0x6B, 0x01,
-	0x28, 0x12, 0xD1, 0x38, 0x46, 0x40, 0x30, 0x40,
-	0x8B, 0xE1, 0x78, 0x88, 0x43, 0xC0, 0x07, 0x0B,
-	0xD1, 0xFF, 0xF7, 0x67, 0xFB, 0x01, 0x28, 0x07,
-	0xD1, 0x14, 0x48, 0xFD, 0xF7, 0xFD, 0xFE, 0x15,
-	0x20, 0x25, 0x73, 0x20, 0x71, 0xC6, 0x07, 0x2B,
-	0xE0, 0x00, 0x98, 0xFF, 0xF7, 0xEB, 0xF9, 0x20,
-	0x79, 0x00, 0x28, 0x02, 0xD1, 0x0D, 0x48, 0xFD,
-	0xF7, 0xEF, 0xFE, 0xF8, 0x69, 0x01, 0x28, 0x1F,
-	0xD1, 0x00, 0x98, 0xFF, 0xF7,
-	0x00, 0x01, 0x25, 0x00, 0x80, 0x1D, 0xFC, 0x1B,
-	0xE0, 0x78, 0xDC, 0x00, 0x00, 0x30, 0x02, 0x00,
-	0x20, 0xD7, 0x8E, 0x00, 0x00, 0x92, 0x00, 0x00,
-	0x20, 0xD1, 0x00, 0x00, 0x20, 0xDA, 0x00, 0x00,
-	0x20, 0x93, 0x00, 0x00, 0x20, 0x28, 0x0E, 0x00,
-	0x20, 0xA8, 0x11, 0x00, 0x20, 0x23, 0x83, 0x00,
-	0x00, 0x20, 0x79, 0x05, 0x26, 0x00, 0x28, 0x00,
-	0xD0, 0x00, 0x25, 0x65, 0x73, 0x12, 0x20, 0x20,
-	0x71, 0x30, 0x46, 0xF8, 0xBD, 0x70, 0xB5, 0x06,
-	0x46, 0xFD, 0xF7, 0x85, 0xFD, 0x01, 0x28, 0x2F,
-	0xD1, 0xFC, 0xF7, 0x7A, 0xFF, 0xAF, 0x4D, 0xE8,
-	0x6B, 0xAF, 0x4C, 0x01, 0x28, 0x11, 0xD1, 0x28,
-	0x46, 0x40, 0x30, 0x40, 0x8B, 0xE1, 0x78, 0x88,
-	0x43, 0xC0, 0x07, 0x0A, 0xD1, 0xFF, 0xF7, 0x19,
-	0xFB, 0x01, 0x28, 0x06, 0xD1, 0xA9, 0x48, 0xFD,
-	0xF7, 0xAF, 0xFE, 0x15, 0x20, 0x20, 0x71, 0xC0,
-	0x07, 0xA6, 0xE5, 0x30, 0x46,
-	0x00, 0x01, 0x26, 0x00, 0x80, 0xFF, 0xF7, 0x9E,
-	0xF9, 0xE8, 0x69, 0x01, 0x28, 0x02, 0xD1, 0x30,
-	0x46, 0xFF, 0xF7, 0xD6, 0xFB, 0x60, 0x7B, 0x01,
-	0x28, 0x06, 0xD1, 0x00, 0x20, 0x20, 0x71, 0x08,
-	0x24, 0x9E, 0x48, 0xFD, 0xF7, 0x99, 0xFE, 0x04,
-	0xE0, 0x10, 0x20, 0x20, 0x71, 0x00, 0x24, 0x00,
-	0xE0, 0x01, 0x24, 0x20, 0x46, 0x8C, 0xE5, 0x10,
-	0xB5, 0xFD, 0xF7, 0xF2, 0xF9, 0x95, 0x48, 0x40,
-	0x6C, 0xC0, 0xB2, 0xFD, 0xF7, 0x0C, 0xFD, 0x94,
-	0x48, 0x14, 0x21, 0x01, 0x71, 0x01, 0x7B, 0x01,
-	0x29, 0x03, 0xD1, 0x00, 0x21, 0x01, 0x73, 0x05,
-	0x20, 0x10, 0xBD, 0x01, 0x20, 0x10, 0xBD, 0x70,
-	0xB5, 0xFD, 0xF7, 0x39, 0xFD, 0x01, 0x28, 0x3B,
-	0xD1, 0xFC, 0xF7, 0x2E, 0xFF, 0xFD, 0xF7, 0xE0,
-	0xFE, 0x06, 0x46, 0xFD, 0xF7, 0xE1, 0xFE, 0x87,
-	0x4A, 0x87, 0x4D, 0x00, 0x24, 0x00, 0x28, 0x02,
-	0xD1, 0xD0, 0x6C, 0xB0, 0x42,
-	0x00, 0x01, 0x27, 0x00, 0x80, 0x1B, 0xD2, 0x29,
-	0x8B, 0x15, 0x23, 0x8E, 0x06, 0xD8, 0x07, 0x00,
-	0x2E, 0x0C, 0xDA, 0x16, 0x6C, 0x01, 0x2E, 0x10,
-	0xD1, 0xEE, 0x7C, 0x02, 0x2E, 0x06, 0xD3, 0x96,
-	0x6C, 0x2A, 0x7D, 0x96, 0x42, 0x04, 0xD9, 0xEC,
-	0x74, 0x52, 0x1C, 0x2A, 0x75, 0x2B, 0x71, 0x4F,
-	0xE5, 0xFF, 0x20, 0x01, 0x30, 0x01, 0x43, 0x29,
-	0x83, 0x0F, 0xE0, 0x80, 0x20, 0xFA, 0xE7, 0xFD,
-	0xF7, 0xB7, 0xFE, 0xA9, 0x7B, 0x01, 0x29, 0x08,
-	0xD1, 0x00, 0x28, 0x06, 0xD1, 0xAC, 0x73, 0xFE,
-	0xF7, 0xBE, 0xFA, 0xFE, 0xF7, 0xEA, 0xFA, 0xFE,
-	0xF7, 0x9F, 0xFA, 0x2C, 0x71, 0x08, 0x20, 0x37,
-	0xE5, 0x01, 0x20, 0x35, 0xE5, 0x70, 0xB5, 0x6C,
-	0x4C, 0x00, 0x25, 0x20, 0x8B, 0xC1, 0x05, 0x00,
-	0x29, 0x02, 0xDA, 0x25, 0x71, 0x08, 0x20, 0x2B,
-	0xE5, 0xC0, 0x06, 0x0E, 0xD4, 0x02, 0x20, 0xFD,
-	0xF7, 0x52, 0xFF, 0x02, 0x20,
-	0x00, 0x01, 0x28, 0x00, 0x80, 0xFD, 0xF7, 0x60,
-	0xFF, 0x02, 0x20, 0xF8, 0xF7, 0x8D, 0xFA, 0x01,
-	0x20, 0x01, 0xF0, 0xB4, 0xFE, 0x20, 0x8B, 0x10,
-	0x21, 0x4C, 0xE0, 0x60, 0x7D, 0x00, 0x28, 0x0F,
-	0xD1, 0x02, 0x20, 0xF8, 0xF7, 0x77, 0xF8, 0xFD,
-	0xF7, 0x8C, 0xFE, 0x5A, 0x48, 0x80, 0x6E, 0xC0,
-	0xB2, 0xFD, 0xF7, 0x55, 0xFE, 0x01, 0x20, 0x60,
-	0x75, 0x03, 0x20, 0xF9, 0xF7, 0xE8, 0xFF, 0x37,
-	0xE0, 0x03, 0x20, 0xF8, 0xF7, 0x67, 0xF8, 0xFD,
-	0xF7, 0x7C, 0xFE, 0x60, 0x7C, 0xA0, 0x74, 0x40,
-	0x1C, 0xC0, 0xB2, 0x60, 0x74, 0x03, 0x28, 0x04,
-	0xD3, 0xA0, 0x7D, 0x00, 0x28, 0x00, 0xD0, 0x01,
-	0x20, 0x60, 0x74, 0x61, 0x7C, 0x03, 0x20, 0x49,
-	0x1E, 0xF8, 0xF7, 0x45, 0xF8, 0xFD, 0xF7, 0x90,
-	0xFE, 0x49, 0x48, 0x61, 0x7C, 0x1C, 0x30, 0x4A,
-	0x4A, 0x40, 0x5C, 0x10, 0x70, 0x46, 0x48, 0x49,
-	0x4A, 0x1F, 0x30, 0x40, 0x5C,
-	0x00, 0x01, 0x29, 0x00, 0x80, 0x10, 0x70, 0x44,
-	0x48, 0x47, 0x4A, 0x22, 0x30, 0x40, 0x5C, 0x10,
-	0x70, 0x46, 0x4A, 0x88, 0x02, 0x80, 0x18, 0x46,
-	0x4A, 0x10, 0x60, 0xA0, 0x7C, 0xFE, 0xF7, 0xEB,
-	0xFF, 0xA5, 0x75, 0xE0, 0x7C, 0x40, 0x21, 0x40,
-	0x1C, 0xE0, 0x74, 0x20, 0x8B, 0x08, 0x43, 0x20,
-	0x83, 0x20, 0x8B, 0x20, 0x21, 0x08, 0x43, 0x20,
-	0x83, 0x13, 0x20, 0x20, 0x71, 0xC0, 0x07, 0xC7,
-	0xE4, 0x10, 0xB5, 0xFF, 0xF7, 0x3B, 0xFD, 0x04,
-	0x46, 0x32, 0x48, 0x40, 0x69, 0x32, 0x49, 0xC9,
-	0x6C, 0xFE, 0xF7, 0x89, 0xF8, 0xFE, 0xF7, 0x8E,
-	0xFB, 0x30, 0x48, 0xFD, 0xF7, 0xBD, 0xFD, 0x20,
-	0x46, 0x10, 0xBD, 0x2D, 0x49, 0x48, 0x71, 0x70,
-	0x47, 0x10, 0xB5, 0xFC, 0xF7, 0x89, 0xFE, 0x10,
-	0xBD, 0x10, 0xB5, 0xFC, 0xF7, 0x5D, 0xFE, 0x10,
-	0xBD, 0x2E, 0x48, 0x70, 0x47, 0x10, 0xB5, 0xFD,
-	0xF7, 0x0F, 0xF9, 0x24, 0x48,
-	0x00, 0x01, 0x2A, 0x00, 0x80, 0x40, 0x6C, 0xC0,
-	0xB2, 0xFD, 0xF7, 0x29, 0xFC, 0xFD, 0xF7, 0x63,
-	0xFC, 0x01, 0x28, 0xFB, 0xD1, 0xFC, 0xF7, 0x58,
-	0xFE, 0x10, 0xBD, 0x70, 0xB5, 0x05, 0x46, 0x0C,
-	0x46, 0x56, 0x18, 0x09, 0xE0, 0xA0, 0xB2, 0x29,
-	0x46, 0x00, 0xF0, 0xA4, 0xFA, 0x00, 0x28, 0x01,
-	0xD0, 0x72, 0xB6, 0xFE, 0xE7, 0x80, 0x35, 0x64,
-	0x1C, 0xA6, 0x42, 0xF3, 0xD8, 0x88, 0xE4, 0x16,
-	0x49, 0x03, 0x20, 0x08, 0x71, 0xC0, 0x07, 0x70,
-	0x47, 0x70, 0xB5, 0x40, 0x08, 0x00, 0x25, 0x12,
-	0x4B, 0x90, 0x42, 0x01, 0xD3, 0x1D, 0x72, 0x01,
-	0xE0, 0x14, 0x1A, 0x1C, 0x72, 0x16, 0x4C, 0xA6,
-	0x69, 0x36, 0x1A, 0x76, 0x1E, 0x96, 0x42, 0x02,
-	0xD8, 0xA2, 0x69, 0x52, 0x1E, 0x00, 0xE0, 0x82,
-	0x18, 0x5A, 0x72, 0x88, 0x42, 0x01, 0xD3, 0x9D,
-	0x72, 0x01, 0xE0, 0x0A, 0x1A, 0x9A, 0x72, 0xE2,
-	0x69, 0x12, 0x1A, 0x52, 0x1E,
-	0x00, 0x01, 0x2B, 0x00, 0x80, 0x8A, 0x42, 0x02,
-	0xD8, 0xE0, 0x69, 0x40, 0x1E, 0x00, 0xE0, 0x40,
-	0x18, 0xD8, 0x72, 0x5D, 0xE4, 0x78, 0xDC, 0x00,
-	0x00, 0x30, 0x02, 0x00, 0x20, 0x23, 0x83, 0x00,
-	0x00, 0x34, 0x03, 0x00, 0x20, 0x35, 0x03, 0x00,
-	0x20, 0x36, 0x03, 0x00, 0x20, 0x80, 0xE2, 0x00,
-	0x00, 0x3C, 0x03, 0x00, 0x20, 0x08, 0x0F, 0x00,
-	0x20, 0x88, 0xDF, 0x00, 0x00, 0x10, 0xB5, 0xC2,
-	0x48, 0x40, 0x7A, 0x00, 0x28, 0x01, 0xD1, 0x01,
-	0x20, 0x00, 0xE0, 0x00, 0x20, 0x03, 0xF0, 0x1A,
-	0xF9, 0x10, 0xBD, 0x10, 0xB5, 0x00, 0x20, 0x03,
-	0xF0, 0x97, 0xF8, 0x03, 0xF0, 0x2A, 0xF9, 0x00,
-	0x20, 0x03, 0xF0, 0x9B, 0xF8, 0x00, 0x20, 0x03,
-	0xF0, 0xA1, 0xF8, 0xB8, 0x48, 0x00, 0x78, 0x01,
-	0x07, 0xB5, 0x48, 0x0E, 0xD4, 0x40, 0x7A, 0x00,
-	0x28, 0x04, 0xD1, 0x01, 0x20, 0x03, 0xF0, 0x0B,
-	0xF9, 0x01, 0x20, 0x03, 0xE0,
-	0x00, 0x01, 0x2C, 0x00, 0x80, 0x01, 0x20, 0x03,
-	0xF0, 0x06, 0xF9, 0x00, 0x20, 0x03, 0xF0, 0xFA,
-	0xF8, 0x10, 0xBD, 0x00, 0x7A, 0x03, 0xF0, 0xFF,
-	0xF8, 0xFF, 0xF7, 0xD0, 0xFF, 0x10, 0xBD, 0xD8,
-	0xE7, 0x30, 0xB5, 0x01, 0x23, 0xA8, 0x49, 0x24,
-	0x20, 0x8B, 0x71, 0xC8, 0x71, 0xA7, 0x48, 0x02,
-	0x78, 0x9A, 0x43, 0x02, 0x70, 0x02, 0x78, 0xFD,
-	0x24, 0x22, 0x40, 0x02, 0x70, 0x5A, 0x02, 0x0A,
-	0x80, 0x00, 0x22, 0x4A, 0x80, 0x8A, 0x80, 0x04,
-	0x78, 0xF7, 0x25, 0x2C, 0x40, 0x04, 0x70, 0x02,
-	0x24, 0x0C, 0x72, 0x4A, 0x72, 0x01, 0x78, 0xFB,
-	0x22, 0x11, 0x40, 0x01, 0x70, 0x43, 0x70, 0x30,
-	0xBD, 0x99, 0x49, 0x9B, 0x48, 0x4A, 0x88, 0x82,
-	0x62, 0x89, 0x88, 0xC1, 0x62, 0x97, 0x49, 0x09,
-	0x78, 0xC9, 0x07, 0x03, 0xD0, 0x41, 0x69, 0x08,
-	0x22, 0x11, 0x43, 0x41, 0x61, 0x70, 0x47, 0x10,
-	0xB5, 0x92, 0x48, 0x40, 0x78,
-	0x00, 0x01, 0x2D, 0x00, 0x80, 0x00, 0x28, 0x0B,
-	0xD1, 0x03, 0xF0, 0x92, 0xF8, 0xFF, 0xF7, 0xC8,
-	0xFF, 0x03, 0x21, 0x00, 0x20, 0xF9, 0xF7, 0xA8,
-	0xFF, 0x8E, 0x49, 0x00, 0x20, 0xF9, 0xF7, 0x9A,
-	0xFF, 0x8B, 0x48, 0x40, 0x69, 0xC0, 0x07, 0x01,
-	0xD0, 0x00, 0xF0, 0x05, 0xF9, 0xFF, 0xF7, 0xD8,
-	0xFF, 0xFF, 0xF7, 0x8F, 0xFF, 0x10, 0xBD, 0x10,
-	0xB5, 0x03, 0xF0, 0x42, 0xF8, 0x10, 0xBD, 0x84,
-	0x48, 0x41, 0x69, 0x01, 0x22, 0x11, 0x43, 0x41,
-	0x61, 0x80, 0x48, 0x01, 0x78, 0x04, 0x22, 0x11,
-	0x43, 0x01, 0x70, 0x70, 0x47, 0x10, 0xB5, 0x00,
-	0xF0, 0xEE, 0xF8, 0x7C, 0x48, 0x01, 0x78, 0xFB,
-	0x22, 0x11, 0x40, 0x01, 0x70, 0x10, 0xBD, 0x30,
-	0xB4, 0x78, 0x4A, 0x01, 0x28, 0x13, 0x78, 0x02,
-	0xD1, 0xF7, 0x24, 0x23, 0x40, 0x01, 0xE0, 0x08,
-	0x24, 0x23, 0x43, 0x13, 0x70, 0x72, 0x4A, 0x10,
-	0x72, 0x51, 0x72, 0x30, 0xBC,
-	0x00, 0x01, 0x2E, 0x00, 0x80, 0x65, 0xE7, 0x10,
-	0xB5, 0x6F, 0x48, 0x40, 0x7A, 0x00, 0x28, 0x00,
-	0xD0, 0x01, 0x20, 0x03, 0xF0, 0x77, 0xF8, 0x10,
-	0xBD, 0x10, 0xB5, 0x03, 0xF0, 0x85, 0xF8, 0x01,
-	0x21, 0x48, 0x40, 0x03, 0xF0, 0x6F, 0xF8, 0x10,
-	0xBD, 0x68, 0x49, 0x0A, 0x78, 0x01, 0x23, 0x1A,
-	0x43, 0x0A, 0x70, 0x69, 0x49, 0x64, 0x4A, 0x88,
-	0x42, 0x01, 0xD9, 0x91, 0x80, 0x00, 0xE0, 0x90,
-	0x80, 0x8E, 0xE7, 0x10, 0xB5, 0x03, 0xF0, 0x50,
-	0xF8, 0x10, 0xBD, 0x64, 0x49, 0x80, 0x00, 0x40,
-	0x18, 0x00, 0x68, 0xC0, 0xB2, 0x70, 0x47, 0x70,
-	0xB5, 0x0C, 0x46, 0x05, 0x46, 0x09, 0x0A, 0x03,
-	0xF0, 0x43, 0xF8, 0xE1, 0xB2, 0x68, 0x1C, 0x03,
-	0xF0, 0x3F, 0xF8, 0x70, 0xBD, 0x81, 0x00, 0x5B,
-	0x48, 0x08, 0x18, 0x01, 0x68, 0x40, 0x68, 0x09,
-	0x02, 0x01, 0x43, 0x88, 0xB2, 0x70, 0x47, 0x54,
-	0x48, 0x80, 0x69, 0x08, 0x21,
-	0x00, 0x01, 0x2F, 0x00, 0x80, 0x08, 0x40, 0x70,
-	0x47, 0x10, 0xB5, 0x51, 0x4C, 0x00, 0xF0, 0x26,
-	0xF9, 0xA1, 0x69, 0x09, 0x07, 0x07, 0xD4, 0xA1,
-	0x68, 0x01, 0x22, 0x11, 0x43, 0xA1, 0x60, 0xC0,
-	0xB2, 0x00, 0xF0, 0x20, 0xF9, 0x10, 0xBD, 0xC0,
-	0xB2, 0x00, 0xF0, 0x1C, 0xF9, 0xEE, 0xE7, 0xEB,
-	0xE7, 0x10, 0xB5, 0x47, 0x4C, 0x00, 0xF0, 0x12,
-	0xF9, 0xA1, 0x69, 0x09, 0x07, 0x07, 0xD4, 0xA1,
-	0x68, 0x49, 0x08, 0x49, 0x00, 0xA1, 0x60, 0xC0,
-	0xB2, 0x00, 0xF0, 0x0C, 0xF9, 0x03, 0xE0, 0xC0,
-	0xB2, 0x00, 0xF0, 0x08, 0xF9, 0xEE, 0xE7, 0xA0,
-	0x68, 0x80, 0x07, 0xFC, 0xD4, 0x10, 0xBD, 0xE7,
-	0xE7, 0x70, 0xB5, 0x04, 0x46, 0x80, 0x07, 0x01,
-	0xD1, 0x01, 0x20, 0x04, 0x43, 0x37, 0x4E, 0x3C,
-	0x4D, 0xB4, 0x70, 0xE0, 0x07, 0x12, 0xD0, 0xFF,
-	0xF7, 0xC7, 0xFF, 0x35, 0x49, 0x48, 0x69, 0x80,
-	0x07, 0x01, 0xD5, 0x09, 0x20,
-	0x00, 0x01, 0x30, 0x00, 0x80, 0x00, 0xE0, 0x03,
-	0x20, 0x08, 0x61, 0xFF, 0x20, 0xC8, 0x60, 0x03,
-	0x20, 0xF9, 0xF7, 0x09, 0xFF, 0x03, 0x20, 0xF9,
-	0xF7, 0xF7, 0xFE, 0x0E, 0xE0, 0x00, 0xF0, 0x4B,
-	0xF8, 0xA8, 0x68, 0xFF, 0x21, 0xC8, 0x31, 0xB0,
-	0x60, 0x88, 0x43, 0x40, 0x1C, 0xA8, 0x60, 0x2D,
-	0x49, 0x08, 0x68, 0x70, 0x60, 0x80, 0x08, 0x80,
-	0x00, 0x08, 0x60, 0xA0, 0x07, 0x10, 0xD5, 0x03,
-	0x20, 0x02, 0xF0, 0x62, 0xFF, 0x00, 0x20, 0x02,
-	0xF0, 0x68, 0xFF, 0x00, 0x20, 0x02, 0xF0, 0x6E,
-	0xFF, 0x10, 0x20, 0x28, 0x61, 0x00, 0x20, 0xF9,
-	0xF7, 0xE6, 0xFE, 0x00, 0x20, 0xF9, 0xF7, 0xD4,
-	0xFE, 0x70, 0xBD, 0x70, 0xB5, 0x19, 0x4C, 0x00,
-	0x20, 0xA5, 0x78, 0xF9, 0xF7, 0xD4, 0xFE, 0x00,
-	0x20, 0x02, 0xF0, 0x4A, 0xFF, 0x1A, 0x4E, 0x10,
-	0x20, 0x30, 0x61, 0x00, 0x20, 0xF9, 0xF7, 0xD3,
-	0xFE, 0xE8, 0x07, 0x0B, 0xD0,
-	0x00, 0x01, 0x31, 0x00, 0x80, 0x12, 0x48, 0x00,
-	0x21, 0x01, 0x61, 0xFF, 0x21, 0xC1, 0x60, 0x03,
-	0x20, 0xF9, 0xF7, 0xC1, 0xFE, 0x03, 0x20, 0xF9,
-	0xF7, 0xC6, 0xFE, 0x09, 0xE0, 0x11, 0x49, 0x60,
-	0x68, 0x08, 0x60, 0xA0, 0x68, 0xB0, 0x60, 0x20,
-	0x78, 0x40, 0x07, 0x01, 0xD5, 0xFF, 0xF7, 0x07,
-	0xFF, 0xFF, 0xF7, 0x7E, 0xFF, 0x70, 0xBD, 0x06,
-	0x48, 0x81, 0x69, 0x09, 0x07, 0xFC, 0xD4, 0x41,
-	0x69, 0x49, 0x08, 0x49, 0x00, 0x41, 0x61, 0x70,
-	0x47, 0x48, 0x14, 0x00, 0x20, 0x88, 0x02, 0x00,
-	0x20, 0x00, 0x00, 0x12, 0x40, 0x1B, 0x96, 0x00,
-	0x00, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x10, 0x12,
-	0x40, 0x00, 0x00, 0x14, 0x40, 0x00, 0x20, 0x14,
-	0x40, 0x33, 0x49, 0x00, 0x20, 0x08, 0x70, 0x70,
-	0x47, 0xF0, 0xB5, 0x32, 0x48, 0x85, 0xB0, 0x80,
-	0x6A, 0x00, 0x24, 0x01, 0x27, 0x04, 0x90, 0x52,
-	0xE0, 0x2F, 0x49, 0x60, 0x00,
-	0x00, 0x01, 0x32, 0x00, 0x80, 0x40, 0x18, 0x82,
-	0x88, 0x0B, 0x7B, 0xD2, 0x18, 0x03, 0x92, 0x82,
-	0x88, 0x0B, 0x7B, 0xD2, 0x1A, 0x02, 0x92, 0x02,
-	0x8A, 0x0B, 0x7E, 0xD2, 0x18, 0x01, 0x92, 0x00,
-	0x8A, 0x09, 0x7E, 0x40, 0x1A, 0x00, 0x90, 0x27,
-	0x48, 0x05, 0x57, 0x27, 0x48, 0x06, 0x57, 0x23,
-	0x48, 0x40, 0x30, 0x00, 0x6A, 0x01, 0x28, 0x0B,
-	0xD1, 0x96, 0x42, 0x10, 0xDC, 0x00, 0x98, 0x86,
-	0x42, 0x30, 0xDC, 0x1D, 0x49, 0x38, 0x46, 0x0A,
-	0x78, 0xA0, 0x40, 0x82, 0x43, 0x0A, 0x70, 0x29,
-	0xE0, 0xF7, 0xF7, 0xFF, 0xFD, 0x00, 0x28, 0x03,
-	0x98, 0x0C, 0xD1, 0x85, 0x42, 0x06, 0xDD, 0x16,
-	0x49, 0x38, 0x46, 0x0A, 0x78, 0xA0, 0x40, 0x10,
-	0x43, 0x08, 0x70, 0x1B, 0xE0, 0x02, 0x98, 0x85,
-	0x42, 0x18, 0xDC, 0x11, 0xE0, 0x85, 0x42, 0x09,
-	0xDD, 0x01, 0x98, 0x86, 0x42, 0x06, 0xDD, 0x0E,
-	0x48, 0x39, 0x46, 0x02, 0x78,
-	0x00, 0x01, 0x33, 0x00, 0x80, 0xA1, 0x40, 0x11,
-	0x43, 0x01, 0x70, 0x0B, 0xE0, 0x02, 0x98, 0x85,
-	0x42, 0x08, 0xDC, 0x00, 0x98, 0x86, 0x42, 0x05,
-	0xDC, 0x07, 0x4A, 0x38, 0x46, 0x11, 0x78, 0xA0,
-	0x40, 0x81, 0x43, 0x11, 0x70, 0x64, 0x1C, 0x04,
-	0x98, 0x84, 0x42, 0xA9, 0xD3, 0x05, 0xB0, 0xF0,
-	0xBD, 0x01, 0x48, 0x00, 0x78, 0x70, 0x47, 0x00,
-	0x00, 0x94, 0x02, 0x00, 0x20, 0x88, 0xDF, 0x00,
-	0x00, 0xE4, 0xDD, 0x00, 0x00, 0x0C, 0x02, 0x00,
-	0x20, 0x10, 0x02, 0x00, 0x20, 0x80, 0x1C, 0x80,
-	0x08, 0x03, 0xD0, 0x00, 0xBF, 0x40, 0x1E, 0x00,
-	0x46, 0xFC, 0xD1, 0x70, 0x47, 0xEF, 0xF3, 0x10,
-	0x80, 0x72, 0xB6, 0x70, 0x47, 0x80, 0xF3, 0x10,
-	0x88, 0x70, 0x47, 0x00, 0x00, 0x70, 0xB5, 0x05,
-	0x46, 0x0B, 0x48, 0x00, 0x23, 0x0B, 0x4C, 0x10,
-	0xE0, 0xCA, 0x5C, 0x12, 0x02, 0x50, 0x40, 0x08,
-	0x22, 0x06, 0x04, 0x02, 0xD5,
-	0x00, 0x01, 0x34, 0x00, 0x80, 0x40, 0x00, 0x60,
-	0x40, 0x00, 0xE0, 0x40, 0x00, 0x52, 0x1E, 0x12,
-	0x06, 0x80, 0xB2, 0x12, 0x0E, 0xF4, 0xD1, 0x5B,
-	0x1C, 0x9B, 0xB2, 0xAB, 0x42, 0xEC, 0xD3, 0x70,
-	0xBD, 0xFF, 0xFF, 0x00, 0x00, 0x21, 0x10, 0x00,
-	0x00, 0x1C, 0xB5, 0x68, 0x46, 0x00, 0xF0, 0x59,
-	0xF8, 0x00, 0x22, 0x0E, 0x49, 0x00, 0x28, 0x08,
-	0xD1, 0x6B, 0x46, 0x58, 0x88, 0x90, 0x28, 0x04,
-	0xD1, 0x18, 0x88, 0xC3, 0x1F, 0xF9, 0x3B, 0x5F,
-	0x2B, 0x02, 0xD3, 0x0A, 0x70, 0x4A, 0x80, 0x1C,
-	0xBD, 0x07, 0x4A, 0x40, 0x00, 0x80, 0x18, 0xFF,
-	0x38, 0xFF, 0x38, 0x02, 0x38, 0x00, 0x88, 0x48,
-	0x80, 0x80, 0xB2, 0xC0, 0x06, 0xC0, 0x0E, 0x08,
-	0x70, 0x1C, 0xBD, 0x00, 0x00, 0x96, 0x02, 0x00,
-	0x20, 0x78, 0xCE, 0x00, 0x00, 0x70, 0xB5, 0x01,
-	0x23, 0x00, 0x22, 0x5B, 0x02, 0x98, 0x42, 0x1C,
-	0xD2, 0x2B, 0x4B, 0x2A, 0x4C,
-	0x00, 0x01, 0x35, 0x00, 0x80, 0x9C, 0x60, 0x00,
-	0x25, 0xFF, 0x28, 0x00, 0xD9, 0x1D, 0x01, 0x29,
-	0x4E, 0x35, 0x43, 0x25, 0x60, 0x7F, 0x25, 0x65,
-	0x60, 0x8D, 0x5C, 0xA6, 0x18, 0x35, 0x72, 0x52,
-	0x1C, 0xD2, 0xB2, 0x80, 0x2A, 0xF8, 0xD3, 0x24,
-	0x49, 0x59, 0x60, 0x59, 0x68, 0x00, 0x29, 0xFC,
-	0xDB, 0x9A, 0x68, 0x05, 0x21, 0x49, 0x07, 0x8A,
-	0x42, 0x01, 0xD0, 0x09, 0x20, 0x70, 0xBD, 0x9C,
-	0x60, 0x1E, 0x4A, 0x00, 0x04, 0x80, 0x18, 0x20,
-	0x60, 0x1B, 0x48, 0x40, 0x1C, 0x58, 0x60, 0x58,
-	0x68, 0x00, 0x28, 0xFC, 0xDB, 0x98, 0x68, 0x88,
-	0x42, 0x01, 0xD1, 0x00, 0x20, 0x70, 0xBD, 0x98,
-	0x68, 0x70, 0xBD, 0x70, 0xB5, 0x05, 0x46, 0x12,
-	0x4E, 0x15, 0x48, 0xB0, 0x60, 0xFF, 0xF7, 0x76,
-	0xFF, 0xF1, 0x02, 0x71, 0x60, 0x71, 0x68, 0x00,
-	0x29, 0xFC, 0xDB, 0xB4, 0x68, 0x71, 0x68, 0xC0,
-	0xB2, 0x0E, 0x05, 0x36, 0x0D,
-	0x00, 0x01, 0x36, 0x00, 0x80, 0xFF, 0xF7, 0x6E,
-	0xFF, 0x20, 0x0F, 0x0A, 0x28, 0x01, 0xD0, 0x01,
-	0x20, 0x70, 0xBD, 0x2C, 0x80, 0x20, 0x0C, 0x28,
-	0x71, 0x20, 0x02, 0x00, 0x0F, 0x68, 0x71, 0x20,
-	0x03, 0x00, 0x0F, 0xA8, 0x71, 0x6E, 0x80, 0x00,
-	0x20, 0x70, 0xBD, 0x00, 0x00, 0x54, 0x14, 0x00,
-	0x20, 0x00, 0x00, 0x10, 0x40, 0xB6, 0xD7, 0x00,
-	0x00, 0x04, 0x00, 0x00, 0x80, 0xB6, 0xD8, 0x00,
-	0x00, 0xB6, 0xD3, 0x00, 0x00, 0xF8, 0xB5, 0xFF,
-	0x4C, 0xFF, 0x49, 0xA0, 0x78, 0x09, 0x78, 0xFF,
-	0x4A, 0x48, 0x43, 0x12, 0x68, 0xC0, 0x00, 0x85,
-	0x18, 0xFD, 0x48, 0x42, 0x7C, 0x00, 0x2A, 0x01,
-	0xD1, 0x01, 0x22, 0x01, 0xE0, 0xFB, 0x4A, 0x12,
-	0x78, 0x40, 0x7C, 0x53, 0xB2, 0x62, 0x78, 0x00,
-	0x28, 0x01, 0xD1, 0xD0, 0x1C, 0x03, 0xE0, 0xF8,
-	0x48, 0x00, 0x78, 0x08, 0x1A, 0x80, 0x18, 0xC4,
-	0xB2, 0x00, 0x20, 0x6E, 0x46,
-	0x00, 0x01, 0x37, 0x00, 0x80, 0x21, 0x46, 0x03,
-	0x28, 0x02, 0xD2, 0x01, 0x46, 0x59, 0x43, 0x89,
-	0x18, 0x31, 0x54, 0x40, 0x1C, 0x04, 0x28, 0xF5,
-	0xD3, 0xF0, 0x48, 0x00, 0x78, 0x58, 0xE0, 0xF0,
-	0x49, 0x12, 0x22, 0x09, 0x78, 0x12, 0x27, 0x51,
-	0x43, 0xEE, 0x4A, 0x36, 0x24, 0x89, 0x18, 0x42,
-	0x00, 0x8E, 0x5E, 0x89, 0x18, 0xCF, 0x5F, 0x24,
-	0x22, 0x8A, 0x5E, 0x0C, 0x5F, 0xF1, 0x19, 0x8C,
-	0x46, 0x89, 0x18, 0x09, 0x1B, 0x7F, 0x23, 0x89,
-	0x10, 0xDB, 0x43, 0x99, 0x42, 0x01, 0xDA, 0x19,
-	0x46, 0x02, 0xE0, 0x7F, 0x29, 0x00, 0xDD, 0x7F,
-	0x21, 0x6B, 0x46, 0x1B, 0x78, 0xDB, 0x00, 0x1B,
-	0x18, 0xE9, 0x54, 0x61, 0x46, 0x09, 0x19, 0x89,
-	0x1A, 0x7F, 0x23, 0x89, 0x10, 0xDB, 0x43, 0x99,
-	0x42, 0x01, 0xDA, 0x19, 0x46, 0x02, 0xE0, 0x7F,
-	0x29, 0x00, 0xDD, 0x7F, 0x21, 0x6B, 0x46, 0x5B,
-	0x78, 0xDB, 0x00, 0x1B, 0x18,
-	0x00, 0x01, 0x38, 0x00, 0x80, 0xE9, 0x54, 0xB1,
-	0x18, 0x09, 0x19, 0xC9, 0x1B, 0x7F, 0x23, 0x89,
-	0x10, 0xDB, 0x43, 0x99, 0x42, 0x01, 0xDA, 0x19,
-	0x46, 0x02, 0xE0, 0x7F, 0x29, 0x00, 0xDD, 0x7F,
-	0x21, 0x6B, 0x46, 0x9B, 0x78, 0xDB, 0x00, 0x1B,
-	0x18, 0xE9, 0x54, 0xB9, 0x18, 0x09, 0x19, 0x89,
-	0x1B, 0x7F, 0x22, 0x89, 0x10, 0xD2, 0x43, 0x91,
-	0x42, 0x01, 0xDA, 0x11, 0x46, 0x02, 0xE0, 0x7F,
-	0x29, 0x00, 0xDD, 0x7F, 0x21, 0x6B, 0x46, 0xDA,
-	0x78, 0xD2, 0x00, 0x12, 0x18, 0xA9, 0x54, 0x40,
-	0x1C, 0xC5, 0x49, 0x09, 0x78, 0x88, 0x42, 0xA2,
-	0xD3, 0xC4, 0x48, 0xC5, 0x49, 0x00, 0x78, 0x09,
-	0x78, 0x88, 0x42, 0x09, 0xD1, 0xC3, 0x49, 0x08,
-	0x78, 0x00, 0x28, 0x05, 0xD0, 0x02, 0x28, 0x03,
-	0xD2, 0x40, 0x1C, 0x08, 0x70, 0xFC, 0xF7, 0xE3,
-	0xFE, 0xF8, 0xBD, 0xF8, 0xB5, 0x14, 0x26, 0xBE,
-	0x49, 0x02, 0x20, 0xC8, 0x60,
-	0x00, 0x01, 0x39, 0x00, 0x80, 0xB9, 0x49, 0xB2,
-	0x4C, 0x08, 0x78, 0x40, 0x1C, 0x08, 0x70, 0xBB,
-	0x48, 0xAD, 0x49, 0x00, 0x78, 0x09, 0x78, 0x48,
-	0x43, 0xB9, 0x49, 0x09, 0x78, 0x40, 0x18, 0xAB,
-	0x49, 0xC0, 0x00, 0x09, 0x68, 0x45, 0x18, 0x20,
-	0x3C, 0x21, 0x69, 0xB6, 0x4F, 0xA8, 0x48, 0x00,
-	0x90, 0x01, 0x29, 0x13, 0xD1, 0xFC, 0xF7, 0xB1,
-	0xFA, 0x00, 0x09, 0x03, 0xD0, 0x00, 0x98, 0x80,
-	0x79, 0x00, 0x28, 0x0B, 0xD1, 0x38, 0x6A, 0xB0,
-	0x49, 0x00, 0xB2, 0x0A, 0x68, 0x12, 0x18, 0x0A,
-	0x60, 0x61, 0x69, 0xAE, 0x4A, 0x50, 0x43, 0x41,
-	0x43, 0x0A, 0x14, 0x00, 0xE0, 0x00, 0x22, 0x9F,
-	0x48, 0xAB, 0x4F, 0x00, 0x78, 0x15, 0xE0, 0xA7,
-	0x4B, 0x81, 0x00, 0xC9, 0x18, 0x09, 0x68, 0x0B,
-	0xB2, 0x41, 0x00, 0x79, 0x5E, 0x9B, 0x1A, 0x4B,
-	0x43, 0x99, 0x12, 0x7F, 0x23, 0x09, 0xB2, 0xDB,
-	0x43, 0x99, 0x42, 0x01, 0xDA,
-	0x00, 0x01, 0x3A, 0x00, 0x80, 0x2B, 0x54, 0x03,
-	0xE0, 0x7F, 0x29, 0x00, 0xDD, 0x7F, 0x21, 0x29,
-	0x54, 0x40, 0x1C, 0x95, 0x49, 0x09, 0x78, 0x88,
-	0x42, 0xE5, 0xD3, 0x9E, 0x4D, 0x98, 0x48, 0x29,
-	0x78, 0x01, 0x70, 0x9D, 0x48, 0x95, 0x49, 0x00,
-	0x78, 0x08, 0x70, 0x86, 0x49, 0x09, 0x78, 0x01,
-	0x29, 0x1A, 0xD1, 0x84, 0x49, 0x00, 0x22, 0x0A,
-	0x70, 0x8F, 0x4F, 0x51, 0x1E, 0xF9, 0x60, 0x00,
-	0xF0, 0xB5, 0xFE, 0x00, 0xF0, 0xA5, 0xFE, 0x00,
-	0x98, 0xC0, 0x7B, 0xFC, 0xF7, 0xC8, 0xFD, 0x05,
-	0x20, 0xF9, 0xF7, 0x69, 0xFC, 0x38, 0x68, 0x03,
-	0x21, 0x49, 0x07, 0x08, 0x43, 0x38, 0x60, 0x38,
-	0x68, 0x80, 0x00, 0x01, 0xD5, 0x76, 0x1E, 0xFA,
-	0xD2, 0x80, 0x48, 0x81, 0x49, 0x00, 0x78, 0x09,
-	0x78, 0x40, 0x1C, 0x0F, 0x26, 0x89, 0x4F, 0x88,
-	0x42, 0x64, 0xD2, 0x89, 0x48, 0x89, 0x4A, 0x01,
-	0x78, 0x28, 0x78, 0x09, 0x18,
-	0x00, 0x01, 0x3B, 0x00, 0x80, 0x51, 0x5C, 0x88,
-	0x4A, 0x89, 0x00, 0x89, 0x18, 0x0E, 0x60, 0x40,
-	0x1C, 0xC0, 0xB2, 0x86, 0x49, 0x28, 0x70, 0x09,
-	0x78, 0x88, 0x42, 0x0C, 0xD9, 0x84, 0x48, 0x7E,
-	0x49, 0x00, 0x78, 0x28, 0x70, 0x08, 0x78, 0x40,
-	0x1C, 0xC0, 0xB2, 0x08, 0x70, 0xFC, 0xF7, 0xEB,
-	0xFD, 0x64, 0x49, 0x01, 0x20, 0x08, 0x70, 0x20,
-	0x69, 0x00, 0x28, 0x26, 0xD0, 0x79, 0x4A, 0x38,
-	0x78, 0x79, 0x4B, 0x10, 0x5C, 0x80, 0x00, 0xC0,
-	0x18, 0x06, 0x60, 0x5F, 0x48, 0x00, 0x78, 0x41,
-	0x08, 0x28, 0x78, 0x81, 0x42, 0x0B, 0xD8, 0xE1,
-	0x69, 0x02, 0x29, 0x0D, 0xD1, 0x00, 0x99, 0x49,
-	0x7C, 0x00, 0x29, 0x09, 0xD0, 0x5C, 0x49, 0x09,
-	0x78, 0x49, 0x08, 0x81, 0x42, 0x04, 0xD9, 0x58,
-	0x48, 0x60, 0x38, 0x00, 0x6A, 0x40, 0x1E, 0x01,
-	0xE0, 0x69, 0x48, 0x00, 0x78, 0x38, 0x70, 0x39,
-	0x78, 0x0C, 0x20, 0x51, 0x5C,
-	0x00, 0x01, 0x3C, 0x00, 0x80, 0x8A, 0x00, 0xD1,
-	0x18, 0x08, 0x60, 0x65, 0x48, 0x65, 0x4B, 0x02,
-	0x78, 0x28, 0x78, 0x01, 0x21, 0x12, 0x18, 0x9A,
-	0x5C, 0x63, 0x4B, 0x92, 0x00, 0xD2, 0x18, 0x11,
-	0x60, 0x49, 0x49, 0x5D, 0x4A, 0x09, 0x78, 0x12,
-	0x78, 0x51, 0x43, 0x08, 0x18, 0xFC, 0xF7, 0x0E,
-	0xFD, 0x44, 0x48, 0x00, 0x78, 0x01, 0x28, 0x2C,
-	0xD0, 0x4F, 0x48, 0x01, 0x68, 0x03, 0x22, 0x52,
-	0x07, 0x11, 0x43, 0x01, 0x60, 0x49, 0x48, 0x4A,
-	0x49, 0x00, 0x78, 0x09, 0x78, 0x88, 0x42, 0x25,
-	0xD1, 0x53, 0x48, 0x29, 0x78, 0x00, 0x78, 0x53,
-	0x4C, 0x40, 0x18, 0x20, 0x5C, 0x52, 0x4D, 0x80,
-	0x00, 0x40, 0x19, 0x06, 0x60, 0x44, 0x49, 0x08,
-	0x69, 0x02, 0x22, 0x90, 0x43, 0x08, 0x61, 0x05,
-	0x20, 0xF9, 0xF7, 0xD9, 0xFB, 0x38, 0x78, 0x20,
-	0x5C, 0x80, 0x00, 0x40, 0x19, 0x06, 0x60, 0x3D,
-	0x49, 0x08, 0x78, 0x00, 0x28,
-	0x00, 0x01, 0x3D, 0x00, 0x80, 0x06, 0xD0, 0x02,
-	0x28, 0x04, 0xD2, 0x40, 0x1C, 0x08, 0x70, 0xFC,
-	0xF7, 0xD6, 0xFD, 0xF8, 0xBD, 0x47, 0x49, 0x01,
-	0x20, 0x08, 0x70, 0xF8, 0xBD, 0x36, 0x49, 0x08,
-	0x68, 0x8A, 0x03, 0x10, 0x43, 0x08, 0x60, 0xF8,
-	0xBD, 0xFE, 0xB5, 0x3A, 0x4D, 0x14, 0x26, 0x28,
-	0x78, 0x01, 0x90, 0x31, 0x48, 0x02, 0x21, 0xC1,
-	0x60, 0x2C, 0x48, 0x01, 0x78, 0x49, 0x1C, 0x01,
-	0x70, 0x3D, 0x48, 0x12, 0x21, 0x00, 0x78, 0x48,
-	0x43, 0x26, 0x49, 0x40, 0x18, 0x00, 0x90, 0x20,
-	0x48, 0x20, 0x38, 0x02, 0x90, 0x00, 0x69, 0x2B,
-	0x4F, 0x1D, 0x4C, 0x01, 0x28, 0x13, 0xD1, 0xFC,
-	0xF7, 0x9C, 0xF9, 0x00, 0x09, 0x02, 0xD0, 0xA0,
-	0x79, 0x00, 0x28, 0x0C, 0xD1, 0x38, 0x6A, 0x26,
-	0x49, 0x00, 0xB2, 0x0A, 0x68, 0x12, 0x18, 0x0A,
-	0x60, 0x02, 0x99, 0x49, 0x69, 0x23, 0x4A, 0x50,
-	0x43, 0x41, 0x43, 0x09, 0x14,
-	0x00, 0x01, 0x3E, 0x00, 0x80, 0x00, 0xE0, 0x00,
-	0x21, 0x14, 0x48, 0x00, 0x78, 0x0D, 0xE0, 0x1D,
-	0x4B, 0x82, 0x00, 0xD2, 0x18, 0x12, 0x68, 0x47,
-	0x00, 0x13, 0xB2, 0x1D, 0x4A, 0x5B, 0x1A, 0xD2,
-	0x5F, 0x53, 0x43, 0x9A, 0x12, 0x00, 0x9B, 0x40,
-	0x1C, 0xDA, 0x53, 0x0F, 0x4A, 0x12, 0x78, 0x90,
-	0x42, 0xED, 0xD3, 0x04, 0x4F, 0x38, 0x78, 0x01,
-	0x28, 0x59, 0xD1, 0x00, 0x20, 0x38, 0x70, 0x40,
-	0x1E, 0x0D, 0x49, 0x3B, 0xE0, 0x9C, 0x02, 0x00,
-	0x20, 0x6D, 0x01, 0x00, 0x20, 0xAC, 0x01, 0x00,
-	0x20, 0xE8, 0xDF, 0x00, 0x00, 0x80, 0x01, 0x00,
-	0x20, 0x7F, 0x01, 0x00, 0x20, 0xA9, 0x02, 0x00,
-	0x20, 0x6F, 0x01, 0x00, 0x20, 0xC4, 0x04, 0x00,
-	0x20, 0xAA, 0x02, 0x00, 0x20, 0x77, 0x01, 0x00,
-	0x20, 0x7A, 0x01, 0x00, 0x20, 0xA8, 0x02, 0x00,
-	0x20, 0x00, 0x00, 0x11, 0x40, 0x72, 0x01, 0x00,
-	0x20, 0x74, 0x01, 0x00, 0x20,
-	0x00, 0x01, 0x3F, 0x00, 0x80, 0x00, 0x02, 0x11,
-	0x40, 0xA8, 0x01, 0x00, 0x20, 0x3C, 0x0A, 0x00,
-	0x00, 0x54, 0x05, 0x00, 0x20, 0x75, 0x01, 0x00,
-	0x20, 0x73, 0x01, 0x00, 0x20, 0x76, 0x01, 0x00,
-	0x20, 0x6E, 0x01, 0x00, 0x20, 0xC0, 0xE0, 0x00,
-	0x00, 0x00, 0x04, 0x11, 0x40, 0x7E, 0x01, 0x00,
-	0x20, 0x7D, 0x01, 0x00, 0x20, 0x81, 0x01, 0x00,
-	0x20, 0x79, 0x01, 0x00, 0x20, 0xC8, 0x60, 0xFF,
-	0x48, 0x00, 0x78, 0x00, 0xF0, 0x73, 0xFD, 0x00,
-	0xF0, 0x63, 0xFD, 0xE0, 0x7B, 0xFC, 0xF7, 0x87,
-	0xFC, 0x05, 0x20, 0xF9, 0xF7, 0x28, 0xFB, 0xFA,
-	0x48, 0x00, 0x68, 0x03, 0x21, 0x49, 0x07, 0x08,
-	0x43, 0xF7, 0x49, 0x08, 0x60, 0x08, 0x68, 0x80,
-	0x00, 0x01, 0xD5, 0x76, 0x1E, 0xFA, 0xD2, 0x60,
-	0x7C, 0x00, 0x28, 0xF4, 0x48, 0x00, 0x78, 0x08,
-	0xD0, 0xF0, 0x49, 0xC0, 0x1C, 0x80, 0x08, 0x09,
-	0x78, 0x80, 0x00, 0x48, 0x43,
-	0x00, 0x01, 0x40, 0x00, 0x80, 0x29, 0x78, 0x89,
-	0x00, 0x09, 0xE0, 0xEC, 0x49, 0xC0, 0x1C, 0x80,
-	0x08, 0x09, 0x78, 0x80, 0x00, 0x48, 0x43, 0x29,
-	0x78, 0xC9, 0x1C, 0x89, 0x08, 0x89, 0x00, 0x40,
-	0x18, 0xF8, 0x70, 0xE9, 0x48, 0xE9, 0x4E, 0x03,
-	0x78, 0x02, 0xF0, 0xD7, 0xFD, 0x08, 0x05, 0x0C,
-	0x15, 0xA2, 0x05, 0x0C, 0x15, 0xC5, 0xEA, 0x02,
-	0x21, 0x28, 0x78, 0xFC, 0xF7, 0x1D, 0xFC, 0xF8,
-	0x78, 0x80, 0x1C, 0x05, 0xE0, 0x03, 0x21, 0x28,
-	0x78, 0xFC, 0xF7, 0x16, 0xFC, 0xF8, 0x78, 0xC0,
-	0x1C, 0xFC, 0xF7, 0xFC, 0xFB, 0x87, 0xE0, 0xDE,
-	0x48, 0xDE, 0x49, 0x00, 0x78, 0x09, 0x78, 0x40,
-	0x1C, 0x88, 0x42, 0xF7, 0xD2, 0x60, 0x7C, 0x00,
-	0x28, 0x01, 0xD0, 0x01, 0x20, 0x00, 0xE0, 0x04,
-	0x20, 0x31, 0x78, 0x40, 0x18, 0x28, 0x70, 0x60,
-	0x7C, 0xD7, 0x4E, 0x00, 0x28, 0x03, 0xD0, 0x28,
-	0x78, 0x31, 0x78, 0x88, 0x42,
-	0x00, 0x01, 0x41, 0x00, 0x80, 0x07, 0xD2, 0x61,
-	0x7C, 0xD4, 0x48, 0x00, 0x29, 0x10, 0xD1, 0x29,
-	0x78, 0x02, 0x78, 0x91, 0x42, 0x0C, 0xD9, 0xD2,
-	0x48, 0xC8, 0x49, 0x00, 0x78, 0x28, 0x70, 0x08,
-	0x78, 0x40, 0x1C, 0xC0, 0xB2, 0x08, 0x70, 0xFC,
-	0xF7, 0x6E, 0xFC, 0x01, 0x20, 0x38, 0x70, 0x09,
-	0xE0, 0x61, 0x7C, 0x00, 0x29, 0x06, 0xD1, 0x29,
-	0x78, 0x00, 0x78, 0xC9, 0x1C, 0x81, 0x42, 0x01,
-	0xD9, 0xC0, 0x1E, 0x28, 0x70, 0xFF, 0x21, 0x01,
-	0x98, 0xFC, 0xF7, 0xD6, 0xFB, 0x02, 0x98, 0x00,
-	0x69, 0x00, 0x28, 0x27, 0xD0, 0xC4, 0x49, 0xC3,
-	0x48, 0x0B, 0x78, 0x0F, 0x22, 0xC0, 0x5C, 0xC3,
-	0x4B, 0x80, 0x00, 0xC0, 0x18, 0x02, 0x60, 0xB7,
-	0x48, 0x00, 0x78, 0x42, 0x08, 0x28, 0x78, 0x82,
-	0x42, 0x0A, 0xD8, 0x02, 0x9A, 0xD2, 0x69, 0x02,
-	0x2A, 0x0A, 0xD1, 0x62, 0x7C, 0x00, 0x2A, 0x07,
-	0xD0, 0x32, 0x78, 0x52, 0x08,
-	0x00, 0x01, 0x42, 0x00, 0x80, 0x82, 0x42, 0x03,
-	0xD9, 0xB9, 0x48, 0x00, 0x6A, 0x40, 0x1E, 0x01,
-	0xE0, 0xB8, 0x48, 0x00, 0x78, 0x08, 0x70, 0xB3,
-	0x4A, 0x09, 0x78, 0x0C, 0x20, 0x51, 0x5C, 0x89,
-	0x00, 0xC9, 0x18, 0x08, 0x60, 0x00, 0x21, 0x28,
-	0x78, 0xFC, 0xF7, 0xA6, 0xFB, 0x60, 0x7C, 0x00,
-	0x28, 0xA4, 0x48, 0x00, 0x78, 0x09, 0xD0, 0xA1,
-	0x49, 0xC0, 0x1C, 0x80, 0x08, 0x09, 0x78, 0x80,
-	0x00, 0x48, 0x43, 0x29, 0x78, 0x89, 0x00, 0x40,
-	0x18, 0x0A, 0xE0, 0xC0, 0x1C, 0x81, 0x08, 0x9B,
-	0x48, 0x89, 0x00, 0x00, 0x78, 0x41, 0x43, 0x28,
-	0x78, 0xC0, 0x1C, 0x80, 0x08, 0x80, 0x00, 0x08,
-	0x18, 0xF8, 0x70, 0xC0, 0xB2, 0x74, 0xE7, 0x98,
-	0x49, 0x08, 0x78, 0x40, 0x1C, 0x08, 0x70, 0x47,
-	0xE0, 0x97, 0x48, 0x98, 0x49, 0x00, 0x78, 0x09,
-	0x78, 0x40, 0x1C, 0x88, 0x42, 0x07, 0xD2, 0x01,
-	0x21, 0x28, 0x78, 0xFC, 0xF7,
-	0x00, 0x01, 0x43, 0x00, 0x80, 0x79, 0xFB, 0xF8,
-	0x78, 0x40, 0x1C, 0xFC, 0xF7, 0x5F, 0xFB, 0x9A,
-	0x49, 0x00, 0x20, 0x08, 0x70, 0x30, 0x78, 0x78,
-	0x70, 0x98, 0x48, 0x01, 0x78, 0xB9, 0x70, 0x87,
-	0x49, 0x09, 0x78, 0x01, 0x70, 0x28, 0x78, 0x96,
-	0x49, 0x30, 0x70, 0x48, 0x68, 0x01, 0x22, 0x12,
-	0x07, 0x10, 0x43, 0x48, 0x60, 0xD7, 0xE7, 0x86,
-	0x48, 0x86, 0x49, 0x00, 0x78, 0x09, 0x78, 0x40,
-	0x1C, 0x88, 0x42, 0x07, 0xD2, 0x01, 0x21, 0x28,
-	0x78, 0xFC, 0xF7, 0x56, 0xFB, 0xF8, 0x78, 0x40,
-	0x1C, 0xFC, 0xF7, 0x3C, 0xFB, 0x7C, 0x48, 0x00,
-	0x21, 0x01, 0x70, 0x87, 0x49, 0x04, 0x20, 0x08,
-	0x70, 0x30, 0x78, 0x78, 0x70, 0x85, 0x48, 0x01,
-	0x78, 0xB9, 0x70, 0x74, 0x49, 0x09, 0x78, 0x01,
-	0x70, 0x28, 0x78, 0x30, 0x70, 0x82, 0x48, 0x41,
-	0x68, 0x01, 0x22, 0x12, 0x07, 0x11, 0x43, 0x41,
-	0x60, 0x73, 0x48, 0x74, 0x49,
-	0x00, 0x01, 0x44, 0x00, 0x80, 0x00, 0x78, 0x09,
-	0x78, 0x42, 0x1C, 0x8A, 0x42, 0x08, 0xD2, 0x3A,
-	0x78, 0x01, 0x2A, 0x25, 0xD0, 0x6A, 0x4B, 0x1A,
-	0x68, 0x03, 0x24, 0x64, 0x07, 0x22, 0x43, 0x1A,
-	0x60, 0x88, 0x42, 0x1E, 0xD1, 0xFF, 0x21, 0x01,
-	0x98, 0xFC, 0xF7, 0x26, 0xFB, 0x6E, 0x49, 0x6D,
-	0x4A, 0x09, 0x78, 0x0F, 0x20, 0x51, 0x5C, 0x6D,
-	0x4A, 0x89, 0x00, 0x89, 0x18, 0x08, 0x60, 0x60,
-	0x48, 0x01, 0x69, 0x02, 0x22, 0x91, 0x43, 0x01,
-	0x61, 0x05, 0x20, 0xF9, 0xF7, 0xEC, 0xF9, 0x6D,
-	0x48, 0x00, 0x78, 0x00, 0x28, 0x01, 0xD0, 0x02,
-	0x28, 0x02, 0xD3, 0x6B, 0x49, 0x01, 0x20, 0x08,
-	0x70, 0xFE, 0xBD, 0x57, 0x49, 0x08, 0x68, 0x8A,
-	0x03, 0x10, 0x43, 0x08, 0x60, 0xFE, 0xBD, 0xF8,
-	0xB5, 0x57, 0x49, 0x62, 0x4D, 0x08, 0x78, 0x5E,
-	0x4F, 0x40, 0x1C, 0x08, 0x70, 0x63, 0x49, 0x28,
-	0x78, 0x09, 0x68, 0x00, 0x01,
-	0x00, 0x01, 0x45, 0x00, 0x80, 0x44, 0x18, 0x40,
-	0x37, 0x38, 0x69, 0x61, 0x4E, 0x01, 0x28, 0x14,
-	0xD1, 0xFB, 0xF7, 0xC3, 0xFF, 0x00, 0x09, 0x04,
-	0xD0, 0x38, 0x46, 0x20, 0x30, 0x80, 0x79, 0x00,
-	0x28, 0x0B, 0xD1, 0x30, 0x6A, 0x5B, 0x49, 0x00,
-	0xB2, 0x0A, 0x68, 0x12, 0x18, 0x0A, 0x60, 0x79,
-	0x69, 0x59, 0x4A, 0x50, 0x43, 0x41, 0x43, 0x09,
-	0x14, 0x00, 0xE0, 0x00, 0x21, 0x57, 0x48, 0x58,
-	0x4B, 0x00, 0x78, 0x0B, 0xE0, 0x82, 0x00, 0x92,
-	0x19, 0x12, 0x68, 0x00, 0x27, 0x12, 0xB2, 0xDF,
-	0x5F, 0x52, 0x1A, 0x7A, 0x43, 0x12, 0x13, 0x47,
-	0x00, 0xE2, 0x53, 0x40, 0x1C, 0x51, 0x4A, 0x12,
-	0x78, 0x90, 0x42, 0xEF, 0xD3, 0x28, 0x78, 0x00,
-	0x21, 0x40, 0x1C, 0xC0, 0xB2, 0x34, 0x4C, 0x28,
-	0x70, 0xC9, 0x43, 0xE1, 0x60, 0x37, 0x49, 0x09,
-	0x78, 0x88, 0x42, 0x0F, 0xD2, 0x00, 0xF0, 0xD6,
-	0xFB, 0x00, 0xF0, 0xC6, 0xFB,
-	0x00, 0x01, 0x46, 0x00, 0x80, 0x28, 0x78, 0xFC,
-	0xF7, 0x3E, 0xFB, 0x28, 0x78, 0xFC, 0xF7, 0x9E,
-	0xFA, 0x20, 0x68, 0x03, 0x21, 0x49, 0x07, 0x08,
-	0x43, 0x20, 0x60, 0xF8, 0xBD, 0x20, 0x69, 0x02,
-	0x21, 0x88, 0x43, 0x20, 0x61, 0x05, 0x20, 0xF9,
-	0xF7, 0x7E, 0xF9, 0x36, 0x49, 0x3E, 0x4B, 0x08,
-	0x78, 0x00, 0x28, 0x0C, 0xD0, 0x02, 0x28, 0x0A,
-	0xD2, 0x40, 0x1C, 0x08, 0x70, 0x18, 0x78, 0x01,
-	0x28, 0x02, 0xD1, 0xFC, 0xF7, 0x71, 0xFC, 0xF8,
-	0xBD, 0xFC, 0xF7, 0x3A, 0xFC, 0xF8, 0xBD, 0x37,
-	0x4A, 0x14, 0x78, 0x01, 0x22, 0x03, 0x2C, 0x06,
-	0xD1, 0x1B, 0x78, 0x01, 0x2B, 0x03, 0xD1, 0x00,
-	0x28, 0xF2, 0xD0, 0x0A, 0x70, 0xF0, 0xE7, 0x28,
-	0x48, 0x02, 0x70, 0x31, 0x48, 0x00, 0x68, 0x80,
-	0x47, 0xF8, 0xBD, 0xF8, 0xB5, 0x12, 0x4C, 0x02,
-	0x23, 0xE3, 0x60, 0x15, 0x49, 0x2D, 0x4D, 0x08,
-	0x78, 0x2D, 0x68, 0x02, 0x01,
-	0x00, 0x01, 0x47, 0x00, 0x80, 0x52, 0x19, 0x40,
-	0x1C, 0x08, 0x70, 0x21, 0x4D, 0x2A, 0x4E, 0x00,
-	0x20, 0x81, 0x00, 0x49, 0x19, 0x09, 0x68, 0x00,
-	0x27, 0xF7, 0x5F, 0x09, 0xB2, 0x79, 0x43, 0x47,
-	0x00, 0x09, 0x13, 0x40, 0x1C, 0xD1, 0x53, 0x08,
-	0x28, 0xF2, 0xD3, 0x17, 0x49, 0x01, 0x20, 0x08,
-	0x70, 0x20, 0x69, 0x98, 0x43, 0x20, 0x61, 0x05,
-	0x20, 0x40, 0xE0, 0x00, 0x00, 0x73, 0x01, 0x00,
-	0x20, 0x00, 0x00, 0x11, 0x40, 0x6D, 0x01, 0x00,
-	0x20, 0x79, 0x01, 0x00, 0x20, 0x74, 0x01, 0x00,
-	0x20, 0x77, 0x01, 0x00, 0x20, 0x7A, 0x01, 0x00,
-	0x20, 0x7F, 0x01, 0x00, 0x20, 0x7E, 0x01, 0x00,
-	0x20, 0x7D, 0x01, 0x00, 0x20, 0xC0, 0xE0, 0x00,
-	0x00, 0x76, 0x01, 0x00, 0x20, 0x00, 0x04, 0x11,
-	0x40, 0x88, 0xDF, 0x00, 0x00, 0x6E, 0x01, 0x00,
-	0x20, 0x6F, 0x01, 0x00, 0x20, 0x72, 0x01, 0x00,
-	0x20, 0x00, 0xED, 0x00, 0xE0,
-	0x00, 0x01, 0x48, 0x00, 0x80, 0xA8, 0x02, 0x00,
-	0x20, 0x81, 0x01, 0x00, 0x20, 0xB0, 0x01, 0x00,
-	0x20, 0x00, 0x02, 0x11, 0x40, 0xA8, 0x01, 0x00,
-	0x20, 0x3C, 0x0A, 0x00, 0x00, 0xA9, 0x02, 0x00,
-	0x20, 0x94, 0x01, 0x00, 0x20, 0xAA, 0x02, 0x00,
-	0x20, 0xAC, 0x02, 0x00, 0x20, 0xAB, 0x02, 0x00,
-	0x20, 0xA0, 0x01, 0x00, 0x20, 0xB4, 0x01, 0x00,
-	0x20, 0x96, 0x01, 0x00, 0x20, 0xF9, 0xF7, 0xF3,
-	0xF8, 0xFF, 0x48, 0x00, 0x68, 0x80, 0x47, 0xF8,
-	0xBD, 0xF0, 0xB5, 0xFE, 0x4A, 0x97, 0xB0, 0x02,
-	0x20, 0xD0, 0x60, 0xFD, 0x49, 0x08, 0x78, 0x40,
-	0x1C, 0xC0, 0xB2, 0x08, 0x70, 0x16, 0x90, 0xF9,
-	0x48, 0x40, 0x30, 0x80, 0x69, 0x00, 0x01, 0x01,
-	0xD5, 0xF8, 0x48, 0x00, 0xE0, 0xF8, 0x48, 0x0C,
-	0x90, 0xF4, 0x48, 0x80, 0x68, 0xF9, 0x49, 0x00,
-	0x0A, 0x0B, 0x90, 0xF6, 0x48, 0x05, 0x88, 0x00,
-	0x20, 0x01, 0x90, 0xF5, 0x48,
-	0x00, 0x01, 0x49, 0x00, 0x80, 0x00, 0x78, 0x15,
-	0x90, 0x0F, 0x78, 0x01, 0x21, 0xB9, 0x40, 0x14,
-	0x91, 0xF3, 0x49, 0x00, 0x28, 0x0E, 0x78, 0x0C,
-	0xD0, 0x00, 0x24, 0x38, 0x46, 0x14, 0x99, 0x05,
-	0xE0, 0x2A, 0x46, 0x0A, 0x42, 0x01, 0xD0, 0x64,
-	0x1C, 0x49, 0x00, 0x40, 0x1C, 0xB0, 0x42, 0xF7,
-	0xD3, 0x01, 0xE0, 0xEC, 0x48, 0x04, 0x78, 0xEC,
-	0x48, 0x16, 0x99, 0x00, 0x78, 0x13, 0x90, 0xEB,
-	0x48, 0x12, 0x90, 0x01, 0x29, 0x79, 0xD1, 0x00,
-	0x20, 0x08, 0x90, 0x14, 0x98, 0x09, 0x90, 0x00,
-	0x20, 0xBC, 0x46, 0x0E, 0x90, 0x25, 0xE0, 0x09,
-	0x98, 0x05, 0x42, 0x1C, 0xD0, 0x00, 0x21, 0x08,
-	0x46, 0x0C, 0xE0, 0x02, 0x46, 0x0E, 0x9B, 0x62,
-	0x43, 0xD2, 0x18, 0x0C, 0x9B, 0x92, 0x00, 0x9A,
-	0x58, 0x12, 0xB2, 0x00, 0x2A, 0x00, 0xDC, 0x52,
-	0x42, 0x51, 0x18, 0x40, 0x1C, 0x0B, 0x9A, 0x90,
-	0x42, 0xEF, 0xD3, 0x08, 0x98,
-	0x00, 0x01, 0x4A, 0x00, 0x80, 0x88, 0x42, 0x03,
-	0xDA, 0x08, 0x91, 0xD9, 0x49, 0x60, 0x46, 0x08,
-	0x70, 0x0E, 0x98, 0x40, 0x1C, 0x0E, 0x90, 0x09,
-	0x98, 0x40, 0x00, 0x09, 0x90, 0x60, 0x46, 0x40,
-	0x1C, 0x84, 0x46, 0xB4, 0x45, 0xD7, 0xD3, 0x0B,
-	0x99, 0x08, 0x98, 0x02, 0xF0, 0x6C, 0xFA, 0xD1,
-	0x49, 0xC0, 0xB2, 0x08, 0x70, 0xD0, 0x49, 0x0A,
-	0x68, 0xD0, 0x49, 0x09, 0x78, 0x8C, 0x46, 0xCB,
-	0x49, 0x60, 0x39, 0x90, 0x42, 0x07, 0xDD, 0x0A,
-	0x6B, 0x62, 0x45, 0x04, 0xD9, 0xCA, 0x4A, 0xCC,
-	0x4B, 0x10, 0x60, 0x62, 0x46, 0x1A, 0x70, 0x62,
-	0x46, 0xC8, 0x4B, 0x52, 0x1C, 0xD2, 0xB2, 0x1A,
-	0x70, 0x0B, 0x6B, 0x93, 0x42, 0x05, 0xD9, 0xB7,
-	0x48, 0x01, 0x69, 0x02, 0x22, 0x91, 0x43, 0x01,
-	0x61, 0x0D, 0xE0, 0x0B, 0x6B, 0x93, 0x42, 0x10,
-	0xD1, 0x09, 0x6B, 0xC1, 0x4A, 0x49, 0x1E, 0x12,
-	0x78, 0x91, 0x42, 0x0A, 0xD0,
-	0x00, 0x01, 0x4B, 0x00, 0x80, 0xAF, 0x49, 0x08,
-	0x69, 0x02, 0x22, 0x90, 0x43, 0x08, 0x61, 0x05,
-	0x20, 0xF9, 0xF7, 0x49, 0xF8, 0xB4, 0x48, 0x00,
-	0x78, 0xA7, 0xE0, 0x12, 0x99, 0x8A, 0x88, 0xB9,
-	0x4B, 0x82, 0x42, 0x19, 0x68, 0x7E, 0xD2, 0x88,
-	0x42, 0x7C, 0xDD, 0x18, 0x60, 0xB6, 0x49, 0x01,
-	0x20, 0x08, 0x70, 0x00, 0x20, 0x06, 0x90, 0x00,
-	0x90, 0x72, 0xE0, 0xAF, 0xE0, 0x14, 0x98, 0x39,
-	0x46, 0x84, 0x46, 0x00, 0x20, 0x07, 0x90, 0x0E,
-	0x90, 0x0D, 0x98, 0x02, 0xAB, 0x60, 0x43, 0x11,
-	0x90, 0x1A, 0xE0, 0x60, 0x46, 0x05, 0x42, 0x13,
-	0xD0, 0x0E, 0x9A, 0x11, 0x98, 0x80, 0x18, 0x0C,
-	0x9A, 0x80, 0x00, 0x10, 0x58, 0x4A, 0x00, 0x80,
-	0x00, 0x00, 0xB2, 0x98, 0x52, 0x42, 0x42, 0x00,
-	0x28, 0x00, 0xDB, 0x02, 0x46, 0x07, 0x98, 0x10,
-	0x18, 0x07, 0x90, 0x0E, 0x98, 0x40, 0x1C, 0x0E,
-	0x90, 0x60, 0x46, 0x40, 0x00,
-	0x00, 0x01, 0x4C, 0x00, 0x80, 0x84, 0x46, 0x49,
-	0x1C, 0xB1, 0x42, 0xE2, 0xD3, 0x9F, 0x49, 0xA0,
-	0x00, 0x08, 0x58, 0x07, 0x99, 0x48, 0x43, 0x00,
-	0x12, 0x07, 0x90, 0x00, 0x20, 0x07, 0x9A, 0x0A,
-	0x90, 0x08, 0x90, 0x52, 0x42, 0x38, 0x46, 0x94,
-	0x46, 0x14, 0x99, 0x13, 0xE0, 0x2A, 0x46, 0x0A,
-	0x42, 0x0E, 0xD0, 0x42, 0x00, 0x02, 0xAB, 0x9A,
-	0x5E, 0x62, 0x45, 0x09, 0xDB, 0x07, 0x9B, 0x9A,
-	0x42, 0x06, 0xDC, 0x0A, 0x9B, 0xD2, 0x18, 0x12,
-	0xB2, 0x0A, 0x92, 0x08, 0x9A, 0x52, 0x1C, 0x08,
-	0x92, 0x49, 0x00, 0x40, 0x1C, 0xB0, 0x42, 0xE9,
-	0xD3, 0x08, 0x98, 0x8C, 0x49, 0x80, 0x00, 0x08,
-	0x58, 0x0A, 0x99, 0x02, 0xAA, 0x48, 0x43, 0x82,
-	0x49, 0x00, 0x12, 0x09, 0x78, 0x49, 0x00, 0x51,
-	0x5A, 0x08, 0x1A, 0x01, 0xB2, 0x48, 0x42, 0x00,
-	0x29, 0x00, 0xDB, 0x08, 0x46, 0xFF, 0x22, 0x00,
-	0xB2, 0xFD, 0x32, 0x90, 0x42,
-	0x00, 0x01, 0x4D, 0x00, 0x80, 0x00, 0xD9, 0x10,
-	0x46, 0x01, 0x9A, 0x82, 0x42, 0x00, 0xDA, 0x01,
-	0x90, 0x00, 0x9A, 0x10, 0x18, 0x00, 0x90, 0x06,
-	0x98, 0x40, 0x18, 0x06, 0x90, 0x0D, 0x98, 0x40,
-	0x1C, 0x0D, 0x90, 0x00, 0xE0, 0x0E, 0xE0, 0x0B,
-	0x99, 0x88, 0x42, 0x87, 0xD3, 0x78, 0x48, 0x01,
-	0x99, 0x41, 0x60, 0x00, 0x99, 0x81, 0x60, 0x06,
-	0x98, 0x00, 0x28, 0x00, 0xDA, 0x40, 0x42, 0x75,
-	0x49, 0x08, 0x60, 0xFD, 0xE0, 0x5F, 0x4A, 0x10,
-	0x69, 0x02, 0x23, 0x98, 0x43, 0x10, 0x61, 0x15,
-	0x98, 0x61, 0x4A, 0x00, 0x28, 0x0C, 0xD0, 0x02,
-	0x28, 0x0A, 0xD2, 0x40, 0x1C, 0x10, 0x70, 0x67,
-	0x49, 0x00, 0x20, 0x08, 0x70, 0x64, 0x49, 0x08,
-	0x60, 0x13, 0x98, 0xFC, 0xF7, 0x38, 0xFB, 0x6A,
-	0xE1, 0x00, 0x29, 0x0F, 0xD1, 0x68, 0x49, 0x00,
-	0x20, 0x08, 0x70, 0x68, 0x49, 0x64, 0x22, 0x08,
-	0x70, 0x67, 0x49, 0x08, 0x70,
-	0x00, 0x01, 0x4E, 0x00, 0x80, 0x0B, 0x99, 0x61,
-	0x43, 0x66, 0x4C, 0x20, 0x88, 0x50, 0x43, 0x02,
-	0xF0, 0x7A, 0xF9, 0x20, 0x80, 0x64, 0x49, 0x01,
-	0x20, 0x08, 0x70, 0x54, 0xE1, 0x00, 0x20, 0x06,
-	0x90, 0x00, 0x90, 0x79, 0xE0, 0x14, 0x98, 0x39,
-	0x46, 0x84, 0x46, 0x00, 0x20, 0x07, 0x90, 0x0E,
-	0x90, 0x26, 0xE0, 0x60, 0x46, 0x05, 0x42, 0x1F,
-	0xD0, 0x0D, 0x98, 0x0E, 0x9A, 0x60, 0x43, 0x80,
-	0x18, 0x0C, 0x9A, 0x80, 0x00, 0x10, 0x58, 0x59,
-	0x4B, 0x80, 0x00, 0x00, 0xB2, 0x02, 0x46, 0xFF,
-	0x32, 0x91, 0x32, 0x9A, 0x42, 0x03, 0xD3, 0x53,
-	0x4B, 0x1A, 0x88, 0x52, 0x1C, 0x1A, 0x80, 0x4A,
-	0x00, 0x02, 0xAB, 0x98, 0x52, 0x42, 0x42, 0x00,
-	0x28, 0x00, 0xDB, 0x02, 0x46, 0x07, 0x98, 0x10,
-	0x18, 0x07, 0x90, 0x0E, 0x98, 0x40, 0x1C, 0x0E,
-	0x90, 0x60, 0x46, 0x40, 0x00, 0x84, 0x46, 0x49,
-	0x1C, 0xB1, 0x42, 0xD6, 0xD3,
-	0x00, 0x01, 0x4F, 0x00, 0x80, 0x41, 0x49, 0xA0,
-	0x00, 0x08, 0x58, 0x07, 0x99, 0x48, 0x43, 0x00,
-	0x12, 0x07, 0x90, 0x00, 0x20, 0x07, 0x9A, 0x0A,
-	0x90, 0x08, 0x90, 0x52, 0x42, 0x38, 0x46, 0x94,
-	0x46, 0x14, 0x99, 0x13, 0xE0, 0x2A, 0x46, 0x0A,
-	0x42, 0x0E, 0xD0, 0x42, 0x00, 0x02, 0xAB, 0x9A,
-	0x5E, 0x62, 0x45, 0x09, 0xDB, 0x07, 0x9B, 0x9A,
-	0x42, 0x06, 0xDC, 0x0A, 0x9B, 0xD2, 0x18, 0x12,
-	0xB2, 0x0A, 0x92, 0x08, 0x9A, 0x52, 0x1C, 0x08,
-	0x92, 0x49, 0x00, 0x40, 0x1C, 0xB0, 0x42, 0xE9,
-	0xD3, 0x08, 0x98, 0x2E, 0x49, 0x80, 0x00, 0x08,
-	0x58, 0x0A, 0x99, 0x02, 0xAA, 0x48, 0x43, 0x24,
-	0x49, 0x00, 0x12, 0x09, 0x78, 0x49, 0x00, 0x51,
-	0x5A, 0x08, 0x1A, 0x01, 0xB2, 0x48, 0x42, 0x00,
-	0x29, 0x00, 0xDB, 0x08, 0x46, 0xFF, 0x22, 0x00,
-	0xB2, 0xFD, 0x32, 0x90, 0x42, 0x00, 0xD9, 0x10,
-	0x46, 0x01, 0x9A, 0x82, 0x42,
-	0x00, 0x01, 0x50, 0x00, 0x80, 0x00, 0xDA, 0x01,
-	0x90, 0x06, 0x9A, 0x51, 0x18, 0x06, 0x91, 0x00,
-	0x99, 0x08, 0x18, 0x00, 0x90, 0x0D, 0x98, 0x40,
-	0x1C, 0x0B, 0x99, 0x0D, 0x90, 0x88, 0x42, 0x81,
-	0xD3, 0x1B, 0x49, 0x01, 0x9A, 0x48, 0x68, 0x80,
-	0x18, 0x48, 0x60, 0x10, 0x90, 0x88, 0x68, 0x00,
-	0x9A, 0x86, 0x18, 0x8E, 0x60, 0x06, 0x98, 0x00,
-	0x28, 0x00, 0xDA, 0x40, 0x42, 0x15, 0x49, 0x37,
-	0xE0, 0xA4, 0x01, 0x00, 0x20, 0x00, 0x00, 0x11,
-	0x40, 0x77, 0x01, 0x00, 0x20, 0x00, 0x12, 0x11,
-	0x40, 0x00, 0x10, 0x11, 0x40, 0x9C, 0x01, 0x00,
-	0x20, 0xA8, 0x02, 0x00, 0x20, 0xA9, 0x02, 0x00,
-	0x20, 0xAA, 0x02, 0x00, 0x20, 0x82, 0x01, 0x00,
-	0x20, 0x7A, 0x01, 0x00, 0x20, 0xE8, 0xDF, 0x00,
-	0x00, 0xBC, 0x01, 0x00, 0x20, 0x89, 0x01, 0x00,
-	0x20, 0xB8, 0x01, 0x00, 0x20, 0x91, 0x01, 0x00,
-	0x20, 0x92, 0x01, 0x00, 0x20,
-	0x00, 0x01, 0x51, 0x00, 0x80, 0xB0, 0x02, 0x00,
-	0x20, 0x8A, 0x01, 0x00, 0x20, 0x38, 0xCF, 0x00,
-	0x00, 0x9C, 0x02, 0x00, 0x20, 0xA8, 0x01, 0x00,
-	0x20, 0x8E, 0x01, 0x00, 0x20, 0x8F, 0x01, 0x00,
-	0x20, 0x90, 0x01, 0x00, 0x20, 0x9E, 0x01, 0x00,
-	0x20, 0x81, 0x01, 0x00, 0x20, 0x21, 0x03, 0x00,
-	0x00, 0x0A, 0x68, 0x87, 0x18, 0x0F, 0x60, 0x16,
-	0x98, 0x13, 0x99, 0x40, 0x1C, 0x88, 0x42, 0x04,
-	0xD2, 0x51, 0x49, 0x08, 0x68, 0x03, 0x22, 0x52,
-	0x07, 0x7B, 0xE0, 0x16, 0x98, 0x88, 0x42, 0x75,
-	0xD1, 0x01, 0x46, 0x10, 0x98, 0x02, 0xF0, 0xA1,
-	0xF8, 0x80, 0x05, 0x05, 0x0E, 0x4B, 0x48, 0x05,
-	0x70, 0x64, 0x20, 0x78, 0x43, 0x0F, 0x95, 0x0B,
-	0x99, 0x02, 0xF0, 0x8D, 0xF8, 0x10, 0x99, 0x02,
-	0xF0, 0x8A, 0xF8, 0xC0, 0xB2, 0x46, 0x49, 0x07,
-	0x46, 0x08, 0x70, 0x30, 0x46, 0x64, 0x21, 0x48,
-	0x43, 0x0B, 0x99, 0x02, 0xF0,
-	0x00, 0x01, 0x52, 0x00, 0x80, 0x80, 0xF8, 0x10,
-	0x99, 0x02, 0xF0, 0x7D, 0xF8, 0x41, 0x49, 0x2B,
-	0x02, 0x08, 0x70, 0x05, 0x22, 0x40, 0x4D, 0x00,
-	0x20, 0x12, 0x99, 0x09, 0x7A, 0x86, 0x00, 0xAE,
-	0x59, 0x71, 0x43, 0x99, 0x42, 0x01, 0xD2, 0x02,
-	0xB2, 0x02, 0xE0, 0x40, 0x1C, 0x05, 0x28, 0xF3,
-	0xD3, 0x12, 0x98, 0x40, 0x7A, 0x91, 0x00, 0x38,
-	0x4A, 0x38, 0x4E, 0x14, 0x32, 0x51, 0x58, 0x48,
-	0x43, 0x00, 0x0A, 0x01, 0x25, 0x35, 0x70, 0x12,
-	0x99, 0xC9, 0x7A, 0xCA, 0x07, 0x03, 0x21, 0x00,
-	0x2A, 0x02, 0xD0, 0x87, 0x42, 0x0A, 0xD9, 0x08,
-	0xE0, 0x12, 0x98, 0x40, 0x7A, 0xB8, 0x42, 0x05,
-	0xD2, 0x12, 0x98, 0x00, 0x7A, 0x0F, 0x9A, 0x90,
-	0x42, 0x00, 0xD2, 0x31, 0x70, 0x16, 0x99, 0x0B,
-	0x98, 0x64, 0x22, 0x41, 0x43, 0x61, 0x43, 0x2A,
-	0x4C, 0x20, 0x88, 0x50, 0x43, 0x02, 0xF0, 0x43,
-	0xF8, 0x21, 0x4A, 0x20, 0x80,
-	0x00, 0x01, 0x53, 0x00, 0x80, 0x11, 0x69, 0x02,
-	0x20, 0x81, 0x43, 0x11, 0x61, 0x05, 0x20, 0xF8,
-	0xF7, 0x4A, 0xFE, 0x30, 0x78, 0x80, 0x07, 0x0E,
-	0xD4, 0x22, 0x49, 0x08, 0x78, 0x00, 0x28, 0x0A,
-	0xD0, 0x02, 0x28, 0x08, 0xD2, 0x40, 0x1C, 0x08,
-	0x70, 0x1F, 0x49, 0x00, 0x20, 0x08, 0x70, 0x1F,
-	0x49, 0x08, 0x60, 0xEF, 0xE5, 0x02, 0xE0, 0x1E,
-	0x48, 0x05, 0x70, 0x04, 0xE0, 0x12, 0x49, 0x08,
-	0x68, 0x8A, 0x03, 0x10, 0x43, 0x08, 0x60, 0x1A,
-	0x48, 0x00, 0x78, 0x01, 0x28, 0x19, 0xD1, 0x12,
-	0x98, 0x00, 0x7C, 0x00, 0x28, 0x15, 0xD0, 0x12,
-	0x98, 0x00, 0x7B, 0x40, 0x07, 0x40, 0x0F, 0x05,
-	0x28, 0x00, 0xD9, 0x00, 0x20, 0x08, 0x49, 0xC0,
-	0x31, 0x0A, 0x69, 0x12, 0x4B, 0x1A, 0x40, 0x0A,
-	0x61, 0x0A, 0x69, 0x11, 0x4B, 0x80, 0x00, 0x18,
-	0x58, 0x0E, 0x4B, 0xDB, 0x43, 0x18, 0x40, 0x02,
-	0x43, 0x0A, 0x61, 0x17, 0xB0,
-	0x00, 0x01, 0x54, 0x00, 0x80, 0xF0, 0xBD, 0x00,
-	0x00, 0x00, 0x00, 0x11, 0x40, 0x8E, 0x01, 0x00,
-	0x20, 0x8F, 0x01, 0x00, 0x20, 0x90, 0x01, 0x00,
-	0x20, 0x5C, 0xCF, 0x00, 0x00, 0x8A, 0x01, 0x00,
-	0x20, 0x9E, 0x01, 0x00, 0x20, 0xA8, 0x02, 0x00,
-	0x20, 0x91, 0x01, 0x00, 0x20, 0xB8, 0x01, 0x00,
-	0x20, 0x81, 0x01, 0x00, 0x20, 0xFF, 0xE0, 0xE3,
-	0xF1, 0xD8, 0xCD, 0x00, 0x00, 0x27, 0x49, 0x01,
-	0x20, 0x08, 0x70, 0x70, 0x47, 0x25, 0x49, 0x00,
-	0x20, 0x08, 0x70, 0x70, 0x47, 0x23, 0x48, 0x00,
-	0x78, 0x00, 0x28, 0x00, 0xD0, 0x01, 0x20, 0x70,
-	0x47, 0x10, 0xB5, 0x20, 0x49, 0x00, 0x23, 0x08,
-	0x78, 0x08, 0x22, 0x00, 0x28, 0x07, 0xD0, 0x04,
-	0x24, 0x01, 0x28, 0x02, 0xD1, 0x4B, 0x70, 0x8C,
-	0x70, 0x03, 0xE0, 0x4C, 0x70, 0x00, 0xE0, 0x4B,
-	0x70, 0x8A, 0x70, 0x00, 0xF0, 0x23, 0xF8, 0x02,
-	0x04, 0x17, 0x48, 0x01, 0x68,
-	0x00, 0x01, 0x55, 0x00, 0x80, 0xFF, 0x23, 0x1B,
-	0x04, 0x99, 0x43, 0x0A, 0x43, 0x02, 0x60, 0x10,
-	0xBD, 0x10, 0xB5, 0x04, 0x46, 0x00, 0xF0, 0x16,
-	0xF8, 0x20, 0x40, 0x02, 0x04, 0x10, 0x48, 0x01,
-	0x68, 0xFF, 0x23, 0x1B, 0x04, 0x99, 0x43, 0x0A,
-	0x43, 0x02, 0x60, 0x10, 0xBD, 0x10, 0xB5, 0x0D,
-	0x49, 0x09, 0x78, 0x08, 0x18, 0x16, 0x21, 0x48,
-	0x43, 0x0B, 0x49, 0x0C, 0x5A, 0x00, 0xF0, 0x02,
-	0xF8, 0x20, 0x40, 0x10, 0xBD, 0x05, 0x48, 0x00,
-	0x78, 0x00, 0x28, 0x05, 0xD0, 0x01, 0x28, 0x01,
-	0xD1, 0x0F, 0x20, 0x70, 0x47, 0xF0, 0x20, 0x70,
-	0x47, 0xFF, 0x20, 0x70, 0x47, 0xA8, 0x02, 0x00,
-	0x20, 0x00, 0x00, 0x11, 0x40, 0x70, 0x01, 0x00,
-	0x20, 0x2C, 0xE1, 0x00, 0x00, 0xF9, 0x49, 0x00,
-	0x20, 0x88, 0x80, 0x08, 0x81, 0xC8, 0x80, 0x48,
-	0x81, 0x88, 0x70, 0x70, 0x47, 0xF6, 0xE7, 0x10,
-	0xB5, 0xF4, 0x4B, 0xD9, 0x88,
-	0x00, 0x01, 0x56, 0x00, 0x80, 0x9A, 0x88, 0x11,
-	0x43, 0x00, 0x20, 0xCC, 0x07, 0x05, 0xD1, 0x01,
-	0x21, 0x81, 0x40, 0x11, 0x43, 0x99, 0x80, 0xC0,
-	0xB2, 0x10, 0xBD, 0x40, 0x1C, 0x49, 0x08, 0x0E,
-	0x28, 0xF3, 0xD9, 0x1E, 0x20, 0x10, 0xBD, 0xFF,
-	0xB5, 0x87, 0xB0, 0x10, 0x9C, 0x22, 0x46, 0x79,
-	0x32, 0x01, 0x92, 0x0B, 0x32, 0x94, 0x46, 0x01,
-	0x28, 0x06, 0xD1, 0x01, 0x29, 0x04, 0xD1, 0x09,
-	0x99, 0x00, 0x20, 0x08, 0x70, 0x0B, 0xB0, 0xF0,
-	0xBD, 0x00, 0x22, 0x22, 0xE0, 0x04, 0x9B, 0x00,
-	0x22, 0xE1, 0x4F, 0x9B, 0x00, 0x0A, 0xE0, 0x2C,
-	0x26, 0x15, 0x46, 0x75, 0x43, 0x0A, 0x9E, 0xAD,
-	0x19, 0xED, 0x58, 0xBD, 0x42, 0x00, 0xDA, 0x2F,
-	0x46, 0x52, 0x1C, 0xD2, 0xB2, 0x82, 0x42, 0xF2,
-	0xD3, 0x00, 0x22, 0x09, 0xE0, 0x2C, 0x26, 0x15,
-	0x46, 0x75, 0x43, 0x0A, 0x9E, 0xAE, 0x19, 0xF5,
-	0x58, 0xED, 0x1B, 0x52, 0x1C,
-	0x00, 0x01, 0x57, 0x00, 0x80, 0xF5, 0x50, 0xD2,
-	0xB2, 0x82, 0x42, 0xF3, 0xD3, 0x04, 0x9A, 0x52,
-	0x1C, 0xD2, 0xB2, 0x04, 0x92, 0x8A, 0x42, 0xD9,
-	0xD3, 0x00, 0x22, 0x34, 0xE0, 0x09, 0x9D, 0xFF,
-	0x23, 0xAB, 0x54, 0x00, 0x23, 0x2B, 0xE0, 0x2C,
-	0x25, 0x0A, 0x9E, 0x5D, 0x43, 0xAD, 0x19, 0x96,
-	0x00, 0xAD, 0x59, 0x00, 0x2D, 0x1C, 0xD1, 0x0B,
-	0x25, 0x5D, 0x43, 0x2D, 0x19, 0x00, 0x26, 0x06,
-	0x95, 0xAE, 0x54, 0x35, 0x46, 0x01, 0x27, 0x06,
-	0xE0, 0x09, 0x9E, 0x76, 0x57, 0x9E, 0x42, 0x00,
-	0xD1, 0x00, 0x27, 0x6D, 0x1C, 0xED, 0xB2, 0x95,
-	0x42, 0x02, 0xD2, 0x01, 0x2F, 0xF4, 0xD0, 0x0C,
-	0xE0, 0x01, 0x2F, 0x0A, 0xD1, 0x09, 0x9D, 0xAB,
-	0x54, 0x06, 0x9E, 0x01, 0x25, 0xB5, 0x54, 0x04,
-	0xE0, 0x0B, 0x26, 0xFF, 0x25, 0x5E, 0x43, 0x36,
-	0x19, 0xF8, 0xE7, 0x5B, 0x1C, 0xDB, 0xB2, 0x83,
-	0x42, 0xD1, 0xD3, 0x52, 0x1C,
-	0x00, 0x01, 0x58, 0x00, 0x80, 0xD2, 0xB2, 0x8A,
-	0x42, 0xC8, 0xD3, 0x2D, 0xE1, 0x00, 0x22, 0x04,
-	0xE0, 0x01, 0x9B, 0x00, 0x25, 0x9D, 0x54, 0x52,
-	0x1C, 0xD2, 0xB2, 0x82, 0x42, 0xF8, 0xD3, 0x00,
-	0x22, 0x08, 0xE0, 0x09, 0x9B, 0x9B, 0x56, 0x5B,
-	0x1C, 0x00, 0xD0, 0x01, 0x23, 0x65, 0x46, 0xAB,
-	0x54, 0x52, 0x1C, 0xD2, 0xB2, 0x8A, 0x42, 0xF4,
-	0xD3, 0x00, 0x22, 0xA6, 0x4B, 0xD2, 0x43, 0x1A,
-	0x70, 0xC9, 0xE0, 0x00, 0x22, 0x13, 0x46, 0xA3,
-	0x4F, 0x00, 0x92, 0x1F, 0xE0, 0x01, 0x9A, 0xD2,
-	0x5C, 0x01, 0x2A, 0x19, 0xD0, 0x0B, 0x26, 0x1D,
-	0x46, 0x75, 0x43, 0x00, 0x22, 0x2D, 0x19, 0x5E,
-	0xB2, 0x05, 0x95, 0x0F, 0xE0, 0x65, 0x46, 0xAD,
-	0x5C, 0x01, 0x2D, 0x09, 0xD0, 0x05, 0x9D, 0xAD,
-	0x5C, 0x00, 0x2D, 0x05, 0xD1, 0x01, 0x25, 0x00,
-	0x95, 0x96, 0x4D, 0x3E, 0x70, 0x6D, 0x1C, 0x2A,
-	0x70, 0x52, 0x1C, 0xD2, 0xB2,
-	0x00, 0x01, 0x59, 0x00, 0x80, 0x8A, 0x42, 0xED,
-	0xD3, 0x5B, 0x1C, 0xDB, 0xB2, 0x83, 0x42, 0xDD,
-	0xD3, 0x00, 0x9A, 0x52, 0xB2, 0x02, 0x92, 0x00,
-	0x2A, 0x62, 0xD1, 0x8F, 0x4A, 0x03, 0x92, 0x00,
-	0x22, 0x1A, 0xE0, 0x01, 0x9A, 0xD2, 0x5D, 0x01,
-	0x2A, 0x14, 0xD0, 0x3B, 0x46, 0x2C, 0x25, 0x6B,
-	0x43, 0x0A, 0x9D, 0x00, 0x22, 0x5E, 0x19, 0x0B,
-	0xE0, 0x63, 0x46, 0x9B, 0x5C, 0x01, 0x2B, 0x05,
-	0xD0, 0x93, 0x00, 0xF3, 0x58, 0x03, 0x9D, 0xAB,
-	0x42, 0x00, 0xDA, 0x03, 0x93, 0x52, 0x1C, 0xD2,
-	0xB2, 0x8A, 0x42, 0xF1, 0xD3, 0x7A, 0x1C, 0xD2,
-	0xB2, 0x17, 0x46, 0x82, 0x42, 0xE1, 0xD3, 0x00,
-	0x23, 0x3B, 0xE0, 0x00, 0x22, 0x35, 0xE0, 0x65,
-	0x46, 0xAD, 0x5C, 0x01, 0x2D, 0x15, 0xD1, 0x01,
-	0x9D, 0xED, 0x5C, 0x01, 0x2D, 0x11, 0xD1, 0x2C,
-	0x25, 0x0A, 0x9E, 0x5D, 0x43, 0xAE, 0x19, 0x95,
-	0x00, 0xAE, 0x46, 0x37, 0x46,
-	0x00, 0x01, 0x5A, 0x00, 0x80, 0x75, 0x59, 0x03,
-	0x9E, 0xAD, 0x19, 0x3E, 0x46, 0x77, 0x46, 0xF5,
-	0x51, 0x0B, 0x26, 0xFF, 0x25, 0x5E, 0x43, 0x36,
-	0x19, 0xB5, 0x54, 0x65, 0x46, 0xAD, 0x5C, 0x00,
-	0x2D, 0x15, 0xD1, 0x01, 0x9D, 0xED, 0x5C, 0x00,
-	0x2D, 0x11, 0xD1, 0x2C, 0x25, 0x0A, 0x9E, 0x5D,
-	0x43, 0xAE, 0x19, 0x95, 0x00, 0xAE, 0x46, 0x37,
-	0x46, 0x75, 0x59, 0x03, 0x9E, 0xAD, 0x1B, 0x3E,
-	0x46, 0x77, 0x46, 0xF5, 0x51, 0x03, 0xD1, 0x0B,
-	0x26, 0x5E, 0x43, 0x36, 0x19, 0xB5, 0x54, 0x52,
-	0x1C, 0xD2, 0xB2, 0x8A, 0x42, 0xC7, 0xD3, 0x5B,
-	0x1C, 0xDB, 0xB2, 0x83, 0x42, 0xC1, 0xD3, 0x70,
-	0xE7, 0x00, 0x22, 0x5C, 0x4E, 0x53, 0x1E, 0xB5,
-	0x56, 0x0B, 0x26, 0x75, 0x43, 0x59, 0x4E, 0x2F,
-	0x19, 0x76, 0x1C, 0xB5, 0x56, 0x0B, 0xE0, 0x66,
-	0x46, 0xB6, 0x5C, 0x00, 0x2E, 0x05, 0xD0, 0xAA,
-	0x42, 0x03, 0xD0, 0xBE, 0x5C,
-	0x00, 0x01, 0x5B, 0x00, 0x80, 0x01, 0x2E, 0x00,
-	0xD1, 0x53, 0xB2, 0x52, 0x1C, 0xD2, 0xB2, 0x8A,
-	0x42, 0x02, 0xD2, 0x5E, 0x1C, 0xEF, 0xD0, 0x10,
-	0xE0, 0x5A, 0x1C, 0x0E, 0xD1, 0x02, 0x9A, 0x01,
-	0x2A, 0xDD, 0xD1, 0x4C, 0x4E, 0x00, 0x23, 0xF3,
-	0x56, 0x0B, 0x25, 0x6B, 0x43, 0x02, 0x22, 0x1B,
-	0x19, 0x01, 0x25, 0x75, 0x57, 0x5A, 0x55, 0x35,
-	0x46, 0x0F, 0xE0, 0x02, 0x22, 0x7A, 0x55, 0x00,
-	0x25, 0x62, 0x46, 0xD5, 0x54, 0x43, 0x4D, 0x00,
-	0x26, 0xAE, 0x57, 0x01, 0x9A, 0x01, 0x23, 0x93,
-	0x55, 0x9A, 0x1E, 0x2B, 0x46, 0x1A, 0x70, 0x5A,
-	0x70, 0x33, 0xE7, 0x00, 0x22, 0xAA, 0x56, 0x0B,
-	0x23, 0x5A, 0x43, 0x01, 0x23, 0xEB, 0x56, 0x12,
-	0x19, 0xD6, 0x56, 0x02, 0x2E, 0x23, 0xD1, 0x00,
-	0x27, 0x0E, 0xE0, 0x0B, 0x26, 0x7E, 0x43, 0x36,
-	0x19, 0xF6, 0x5C, 0x01, 0x2E, 0x06, 0xD1, 0xD6,
-	0x54, 0xAE, 0x57, 0x09, 0x9B,
-	0x00, 0x01, 0x5C, 0x00, 0x80, 0x2A, 0x78, 0x9A,
-	0x55, 0x2F, 0x70, 0x03, 0xE0, 0x7F, 0x1C, 0xFF,
-	0xB2, 0x87, 0x42, 0xEE, 0xD3, 0x87, 0x42, 0xE0,
-	0xD1, 0x2A, 0x46, 0x00, 0x25, 0x55, 0x57, 0x0B,
-	0x26, 0x01, 0x23, 0x75, 0x43, 0xD6, 0x56, 0x2D,
-	0x19, 0xAB, 0x55, 0x01, 0x26, 0x96, 0x57, 0x09,
-	0x9D, 0x13, 0x78, 0xAB, 0x55, 0x18, 0xE0, 0x01,
-	0x2E, 0xCF, 0xD1, 0x00, 0x26, 0x07, 0xE0, 0x97,
-	0x5D, 0x02, 0x2F, 0x02, 0xD1, 0xD7, 0x54, 0x6E,
-	0x70, 0x03, 0xE0, 0x76, 0x1C, 0xF6, 0xB2, 0x8E,
-	0x42, 0xF5, 0xD3, 0x8E, 0x42, 0xC1, 0xD1, 0x00,
-	0x22, 0xAA, 0x56, 0x0B, 0x26, 0x72, 0x43, 0x02,
-	0x23, 0x12, 0x19, 0x01, 0x26, 0xAE, 0x57, 0x93,
-	0x55, 0x00, 0x23, 0x1A, 0x46, 0x06, 0xE0, 0x09,
-	0x9D, 0xAD, 0x56, 0x6D, 0x1C, 0x00, 0xD0, 0x5B,
-	0x1C, 0x52, 0x1C, 0xD2, 0xB2, 0x8A, 0x42, 0xF6,
-	0xD3, 0x8B, 0x42, 0x00, 0xD2,
-	0x00, 0x01, 0x5D, 0x00, 0x80, 0xC2, 0xE6, 0x5D,
-	0xE6, 0xFF, 0xB5, 0x8C, 0x46, 0x9E, 0x46, 0x00,
-	0x25, 0x1C, 0xE0, 0x29, 0x46, 0x2C, 0x23, 0x59,
-	0x43, 0x09, 0x9B, 0x00, 0x20, 0x74, 0x46, 0xCB,
-	0x18, 0x0F, 0xE0, 0x51, 0x88, 0x66, 0x88, 0x97,
-	0x88, 0x89, 0x1B, 0x0E, 0xB2, 0xA1, 0x88, 0x76,
-	0x43, 0x79, 0x1A, 0x09, 0xB2, 0x49, 0x43, 0x71,
-	0x18, 0x86, 0x00, 0x40, 0x1C, 0x99, 0x51, 0xC0,
-	0xB2, 0x0E, 0x34, 0x84, 0x45, 0xED, 0xD8, 0x6D,
-	0x1C, 0xED, 0xB2, 0x0E, 0x32, 0x00, 0x98, 0xA8,
-	0x42, 0xDF, 0xD8, 0xFF, 0xBD, 0xB4, 0x02, 0x00,
-	0x20, 0xFF, 0xFF, 0xFF, 0x7F, 0xF0, 0xB5, 0x05,
-	0x46, 0x9F, 0x48, 0x89, 0xB0, 0x80, 0x68, 0x9F,
-	0x4A, 0x02, 0x90, 0x9F, 0x4B, 0x11, 0x78, 0x98,
-	0x78, 0x0C, 0x46, 0x04, 0x43, 0x7E, 0xD0, 0x2C,
-	0x46, 0xFF, 0x34, 0xE5, 0x34, 0x26, 0x46, 0x0B,
-	0x36, 0x05, 0x96, 0x0B, 0x36,
-	0x00, 0x01, 0x5E, 0x00, 0x80, 0x03, 0x96, 0x00,
-	0x26, 0x9E, 0x80, 0x1E, 0x81, 0x06, 0x91, 0x31,
-	0x46, 0x0B, 0x27, 0x0E, 0x26, 0x0A, 0x46, 0x72,
-	0x43, 0x94, 0x4E, 0x1E, 0x23, 0x92, 0x19, 0xD3,
-	0x72, 0x05, 0x9A, 0x57, 0x54, 0x49, 0x1C, 0xC9,
-	0xB2, 0x0B, 0x29, 0xF2, 0xD3, 0x01, 0x28, 0x06,
-	0xD1, 0x06, 0x99, 0x01, 0x29, 0x05, 0xD1, 0x05,
-	0x99, 0x00, 0x20, 0x08, 0x70, 0x37, 0xE0, 0x00,
-	0x28, 0x35, 0xD0, 0x06, 0x99, 0x00, 0x29, 0x32,
-	0xD0, 0x87, 0x4E, 0x81, 0x42, 0x00, 0x95, 0x18,
-	0xD9, 0x01, 0x46, 0x86, 0x4A, 0x86, 0x4B, 0x06,
-	0x98, 0xFF, 0xF7, 0x96, 0xFF, 0x03, 0x9A, 0x00,
-	0x92, 0x2B, 0x46, 0x22, 0x46, 0xB1, 0x78, 0x06,
-	0x98, 0xFF, 0xF7, 0xDD, 0xFD, 0x00, 0x20, 0xB1,
-	0x78, 0x04, 0xE0, 0x05, 0x9B, 0x22, 0x5C, 0x1A,
-	0x54, 0x40, 0x1C, 0xC0, 0xB2, 0x88, 0x42, 0xF8,
-	0xD3, 0x15, 0xE0, 0x7B, 0x4A,
-	0x00, 0x01, 0x5F, 0x00, 0x80, 0x79, 0x4B, 0xFF,
-	0xF7, 0x7F, 0xFF, 0x03, 0x9A, 0x00, 0x92, 0x2B,
-	0x46, 0x22, 0x46, 0xB0, 0x78, 0x06, 0x99, 0xFF,
-	0xF7, 0xC6, 0xFD, 0x00, 0x20, 0x04, 0xE0, 0x22,
-	0x56, 0x05, 0x99, 0x88, 0x54, 0x40, 0x1C, 0xC0,
-	0xB2, 0x06, 0x99, 0x88, 0x42, 0xF7, 0xD3, 0x00,
-	0x27, 0x6F, 0x4E, 0x38, 0x46, 0x34, 0x46, 0x07,
-	0x97, 0x5A, 0xE0, 0x05, 0x9A, 0xE0, 0x7A, 0x51,
-	0x5C, 0x0B, 0x29, 0x37, 0xD0, 0x0E, 0x22, 0x51,
-	0x43, 0x68, 0x4A, 0xA3, 0x88, 0x8D, 0x18, 0x69,
-	0x88, 0x62, 0x88, 0x89, 0x1A, 0xAA, 0x88, 0x49,
-	0x43, 0xD2, 0x1A, 0x52, 0x43, 0x89, 0x18, 0x02,
-	0x9A, 0x91, 0x42, 0x27, 0xD8, 0x0E, 0x28, 0x0B,
-	0xD8, 0x5F, 0x4A, 0x01, 0x21, 0x93, 0x88, 0x81,
-	0x40, 0x19, 0x43, 0x00, 0xE0, 0xB2, 0xE0, 0x91,
-	0x80, 0x21, 0x88, 0x49, 0x1C, 0x29, 0x80, 0x07,
-	0xE0, 0xA1, 0x7A, 0x00, 0x29,
-	0x00, 0x01, 0x60, 0x00, 0x80, 0x0A, 0xD1, 0xFF,
-	0xF7, 0x7A, 0xFD, 0x00, 0x21, 0x29, 0x80, 0xE0,
-	0x72, 0xE8, 0x72, 0x53, 0x48, 0x00, 0x7B, 0xA8,
-	0x72, 0x29, 0x46, 0x1E, 0xE0, 0x42, 0x06, 0x52,
-	0x0E, 0x01, 0x21, 0x91, 0x40, 0x50, 0x4A, 0x13,
-	0x89, 0x19, 0x43, 0x11, 0x81, 0xE8, 0x72, 0xA0,
-	0x7A, 0xA8, 0x72, 0x18, 0xE0, 0x0E, 0x28, 0x16,
-	0xD8, 0xA1, 0x7A, 0x00, 0x29, 0x13, 0xD0, 0x01,
-	0x22, 0x82, 0x40, 0x49, 0x48, 0x49, 0x1E, 0x83,
-	0x88, 0x1A, 0x43, 0x82, 0x80, 0x20, 0x88, 0x40,
-	0x1C, 0x20, 0x80, 0xA1, 0x72, 0xB4, 0x42, 0x03,
-	0xD0, 0x21, 0x46, 0x30, 0x46, 0xF6, 0xF7, 0xDD,
-	0xFC, 0x7F, 0x1C, 0xFF, 0xB2, 0x0E, 0x36, 0x07,
-	0x98, 0x40, 0x1C, 0xC0, 0xB2, 0x0E, 0x34, 0x07,
-	0x90, 0x01, 0x46, 0x3D, 0x48, 0x80, 0x78, 0x81,
-	0x42, 0x9F, 0xD3, 0x00, 0x20, 0x3D, 0x46, 0x3B,
-	0x4C, 0x04, 0x96, 0x08, 0x90,
-	0x00, 0x01, 0x61, 0x00, 0x80, 0x55, 0xE0, 0xE0,
-	0x7A, 0x1E, 0x28, 0x3D, 0xD1, 0xA0, 0x7A, 0x84,
-	0x46, 0x00, 0x28, 0x1C, 0xD1, 0x0B, 0x2D, 0x0A,
-	0xD2, 0x04, 0x98, 0x86, 0x42, 0x02, 0xD0, 0x31,
-	0x46, 0xF6, 0xF7, 0xBB, 0xFC, 0x04, 0x98, 0x6D,
-	0x1C, 0x0E, 0x30, 0xED, 0xB2, 0x04, 0x90, 0xFF,
-	0xF7, 0x26, 0xFD, 0xE0, 0x72, 0x00, 0x20, 0x20,
-	0x80, 0x29, 0x48, 0x00, 0x7B, 0xA0, 0x72, 0x21,
-	0x46, 0x30, 0x46, 0xF6, 0xF7, 0xAA, 0xFC, 0x7F,
-	0x1C, 0xFF, 0xB2, 0x0E, 0x36, 0x2C, 0xE0, 0x0B,
-	0x2D, 0x2A, 0xD2, 0x25, 0x48, 0x41, 0x89, 0x03,
-	0x89, 0x19, 0x43, 0x00, 0x20, 0xCA, 0x07, 0x0B,
-	0xD1, 0x80, 0x22, 0x01, 0x46, 0x91, 0x43, 0x01,
-	0x22, 0x8A, 0x40, 0x1F, 0x49, 0x1A, 0x43, 0x0A,
-	0x81, 0x80, 0x21, 0x08, 0x43, 0xC0, 0xB2, 0x04,
-	0xE0, 0x40, 0x1C, 0x49, 0x08, 0x0E, 0x28, 0xED,
-	0xD9, 0x1E, 0x20, 0xE0, 0x72,
-	0x00, 0x01, 0x62, 0x00, 0x80, 0x60, 0x46, 0x04,
-	0xE0, 0x00, 0x06, 0x0D, 0xD5, 0x0B, 0x2D, 0x0B,
-	0xD2, 0xA0, 0x7A, 0x21, 0x46, 0x40, 0x1E, 0xA0,
-	0x72, 0x04, 0x98, 0xF6, 0xF7, 0x7E, 0xFC, 0x6D,
-	0x1C, 0x04, 0x98, 0xED, 0xB2, 0x0E, 0x30, 0x04,
-	0x90, 0x08, 0x98, 0x40, 0x1C, 0xC0, 0xB2, 0x0E,
-	0x34, 0x08, 0x90, 0x01, 0x46, 0x06, 0x98, 0x81,
-	0x42, 0x01, 0xD2, 0x0B, 0x2F, 0xA3, 0xD3, 0x09,
-	0x48, 0x09, 0x4C, 0x07, 0x70, 0xA5, 0x70, 0x02,
-	0x78, 0x0E, 0x20, 0x42, 0x43, 0x08, 0x49, 0x07,
-	0x48, 0x01, 0xF0, 0xE8, 0xFB, 0xA0, 0x88, 0xE0,
-	0x80, 0x20, 0x89, 0x60, 0x81, 0x09, 0xB0, 0xF0,
-	0xBD, 0x5C, 0xDD, 0x00, 0x00, 0x92, 0x00, 0x00,
-	0x20, 0xB4, 0x02, 0x00, 0x20, 0x4C, 0x03, 0x00,
-	0x20, 0xDC, 0x14, 0x00, 0x20, 0xF8, 0x49, 0x00,
-	0x20, 0x08, 0x70, 0x70, 0x47, 0xF6, 0x49, 0x00,
-	0x28, 0x01, 0xD1, 0xF6, 0x48,
-	0x00, 0x01, 0x63, 0x00, 0x80, 0x03, 0xE0, 0x01,
-	0x28, 0x02, 0xD1, 0xF4, 0x48, 0x10, 0x30, 0x48,
-	0x60, 0x70, 0x47, 0x02, 0x46, 0x08, 0x46, 0x11,
-	0x02, 0xF0, 0x4A, 0x10, 0xB5, 0x1C, 0x32, 0x94,
-	0x79, 0x03, 0x46, 0xA3, 0x40, 0x1B, 0x1A, 0x59,
-	0x18, 0x93, 0x79, 0xD9, 0x40, 0x0B, 0x1A, 0x81,
-	0x42, 0x00, 0xD8, 0x43, 0x1A, 0xD2, 0x79, 0x1B,
-	0x0A, 0x93, 0x42, 0x00, 0xD9, 0x08, 0x46, 0x10,
-	0xBD, 0xF0, 0xB5, 0x9D, 0xB0, 0x00, 0x20, 0xE4,
-	0x4A, 0x11, 0x90, 0x10, 0x90, 0x50, 0x68, 0x01,
-	0x68, 0x0F, 0x91, 0x00, 0x21, 0x0D, 0x46, 0x0E,
-	0x91, 0xE1, 0x49, 0x09, 0x68, 0x09, 0x02, 0x09,
-	0x0C, 0x04, 0x91, 0xE0, 0x49, 0x09, 0x68, 0x09,
-	0x02, 0x09, 0x0C, 0x03, 0x91, 0x01, 0x7B, 0x09,
-	0x91, 0x41, 0x7B, 0x08, 0x91, 0x84, 0x7B, 0x20,
-	0x23, 0x19, 0x46, 0xE1, 0x40, 0x07, 0x91, 0x40,
-	0x68, 0x0F, 0x99, 0xC3, 0x40,
-	0x00, 0x01, 0x64, 0x00, 0x80, 0xD8, 0x48, 0x06,
-	0x93, 0x1C, 0x90, 0x00, 0x29, 0x02, 0xD1, 0x40,
-	0x79, 0x80, 0x07, 0x7E, 0xD0, 0xD4, 0x48, 0x20,
-	0x38, 0xC1, 0x68, 0x40, 0x39, 0x0D, 0x91, 0x01,
-	0x69, 0x40, 0x39, 0x0C, 0x91, 0xC1, 0x68, 0x10,
-	0x39, 0x0B, 0x91, 0x00, 0x69, 0x10, 0x38, 0x0A,
-	0x90, 0xCA, 0x48, 0x1C, 0x30, 0x1B, 0x90, 0x0E,
-	0x98, 0x13, 0xE0, 0x28, 0x46, 0x0E, 0x21, 0x48,
-	0x43, 0xCA, 0x49, 0x02, 0x46, 0x44, 0x18, 0x0E,
-	0x98, 0x0C, 0x26, 0x70, 0x43, 0xE3, 0x7A, 0xC8,
-	0x4E, 0x1A, 0x90, 0x80, 0x19, 0x19, 0x90, 0xC0,
-	0x7A, 0x83, 0x42, 0x0D, 0xD0, 0x0E, 0x98, 0x40,
-	0x1C, 0x0E, 0x90, 0xBD, 0x49, 0x09, 0x78, 0x88,
-	0x42, 0x03, 0xD2, 0xC2, 0x48, 0x00, 0x78, 0x85,
-	0x42, 0xE3, 0xD3, 0xC0, 0x48, 0x02, 0x78, 0x3A,
-	0xE2, 0x67, 0x88, 0xA0, 0x88, 0x17, 0x90, 0xA0,
-	0x79, 0x16, 0x90, 0x1B, 0x98,
-	0x00, 0x01, 0x65, 0x00, 0x80, 0x80, 0x7A, 0x01,
-	0x28, 0x7E, 0xD1, 0x00, 0x26, 0x0E, 0x98, 0x00,
-	0x96, 0x85, 0x42, 0x02, 0xD1, 0x88, 0x5A, 0x02,
-	0x28, 0x08, 0xD2, 0xB5, 0x4A, 0x0C, 0x20, 0x00,
-	0x21, 0x68, 0x43, 0x84, 0x32, 0x80, 0x18, 0x01,
-	0x72, 0x41, 0x72, 0x81, 0x72, 0x04, 0x98, 0x40,
-	0x00, 0xB8, 0x42, 0x05, 0xD8, 0xAC, 0x49, 0x20,
-	0x39, 0xC9, 0x68, 0x08, 0x1A, 0xB8, 0x42, 0x22,
-	0xD2, 0x20, 0x7B, 0x10, 0x28, 0x00, 0xD1, 0x01,
-	0x26, 0x04, 0x98, 0x87, 0x42, 0x06, 0xD3, 0xA6,
-	0x48, 0x20, 0x38, 0xC0, 0x68, 0x04, 0x99, 0x40,
-	0x1A, 0xB8, 0x42, 0x14, 0xD2, 0xA2, 0x48, 0x01,
-	0x26, 0x20, 0x38, 0x01, 0x69, 0x17, 0x9A, 0x49,
-	0x08, 0x0A, 0x39, 0x91, 0x42, 0x0B, 0xD2, 0x00,
-	0x69, 0x40, 0x08, 0x0A, 0x30, 0x90, 0x42, 0x06,
-	0xD9, 0x9D, 0x4A, 0x0C, 0x20, 0x01, 0x21, 0x68,
-	0x43, 0x84, 0x32, 0x80, 0x18,
-	0x00, 0x01, 0x66, 0x00, 0x80, 0x41, 0x72, 0x03,
-	0x98, 0x17, 0x99, 0x40, 0x00, 0x88, 0x42, 0x08,
-	0xD8, 0x00, 0xE0, 0xF0, 0xE1, 0x94, 0x49, 0x20,
-	0x39, 0x09, 0x69, 0x08, 0x1A, 0x17, 0x99, 0x88,
-	0x42, 0x23, 0xD2, 0x20, 0x7B, 0x10, 0x28, 0x01,
-	0xD1, 0x02, 0x20, 0x06, 0x43, 0x08, 0x46, 0x03,
-	0x99, 0x88, 0x42, 0x06, 0xD3, 0x8C, 0x48, 0x20,
-	0x38, 0x00, 0x69, 0x40, 0x1A, 0x17, 0x99, 0x88,
-	0x42, 0x13, 0xD2, 0x02, 0x21, 0x88, 0x4A, 0x0E,
-	0x43, 0x20, 0x3A, 0xD0, 0x68, 0x40, 0x08, 0x0A,
-	0x38, 0xB8, 0x42, 0x0A, 0xD2, 0xD0, 0x68, 0x40,
-	0x08, 0x0A, 0x30, 0xB8, 0x42, 0x05, 0xD9, 0x84,
-	0x4A, 0x0C, 0x20, 0x68, 0x43, 0x84, 0x32, 0x80,
-	0x18, 0x41, 0x72, 0x00, 0x2E, 0x12, 0xD0, 0x80,
-	0x49, 0x0C, 0x20, 0x68, 0x43, 0x84, 0x31, 0x40,
-	0x18, 0x18, 0x90, 0x40, 0x7A, 0x01, 0x46, 0x71,
-	0x40, 0x03, 0x29, 0x07, 0xD0,
-	0x00, 0x01, 0x67, 0x00, 0x80, 0x18, 0x99, 0x00,
-	0xE0, 0x72, 0xE0, 0x89, 0x7A, 0x0A, 0x46, 0x72,
-	0x40, 0x03, 0x2A, 0x09, 0xD1, 0x76, 0x4A, 0x0C,
-	0x20, 0x00, 0x21, 0x68, 0x43, 0x84, 0x32, 0x80,
-	0x18, 0x01, 0x72, 0x41, 0x72, 0x86, 0x72, 0x63,
-	0xE0, 0x01, 0x22, 0x03, 0x29, 0x00, 0xD0, 0x00,
-	0x22, 0x18, 0x99, 0x03, 0x2E, 0x8E, 0x72, 0x02,
-	0xD1, 0x06, 0x46, 0x03, 0x20, 0x00, 0x90, 0x01,
-	0x2E, 0x09, 0xD1, 0xB8, 0xB2, 0x02, 0x90, 0x6A,
-	0x49, 0x1A, 0x98, 0x08, 0x5A, 0x41, 0x09, 0x17,
-	0x98, 0x05, 0x90, 0x03, 0x98, 0x07, 0xE0, 0x17,
-	0x98, 0x80, 0xB2, 0x02, 0x90, 0x19, 0x98, 0x40,
-	0x88, 0x05, 0x97, 0x41, 0x09, 0x04, 0x98, 0x01,
-	0x90, 0x01, 0x2A, 0x0A, 0xD1, 0x00, 0x20, 0x43,
-	0x00, 0x18, 0x9A, 0x40, 0x1C, 0xC0, 0xB2, 0xD1,
-	0x52, 0x04, 0x28, 0xF8, 0xD3, 0x18, 0x99, 0x0F,
-	0x20, 0x08, 0x72, 0x01, 0x99,
-	0x00, 0x01, 0x68, 0x00, 0x80, 0x05, 0x98, 0x01,
-	0xF0, 0xFE, 0xFA, 0x01, 0x99, 0x48, 0x43, 0x05,
-	0x99, 0x08, 0x1A, 0x80, 0x00, 0x01, 0x99, 0x01,
-	0xF0, 0xF6, 0xFA, 0x00, 0x99, 0xC0, 0xB2, 0x00,
-	0x29, 0x0A, 0xD1, 0x18, 0x9A, 0x43, 0x00, 0x02,
-	0x99, 0xD1, 0x52, 0x18, 0x99, 0x01, 0x22, 0x09,
-	0x7A, 0x82, 0x40, 0x18, 0x98, 0x11, 0x43, 0x01,
-	0x72, 0x18, 0x99, 0x00, 0x23, 0x09, 0x7A, 0x18,
-	0x46, 0x8C, 0x46, 0x01, 0x22, 0x61, 0x46, 0x82,
-	0x40, 0x11, 0x42, 0x04, 0xD0, 0x18, 0x99, 0x42,
-	0x00, 0x89, 0x5A, 0xCB, 0x18, 0x01, 0xE0, 0x02,
-	0x99, 0x5B, 0x18, 0x40, 0x1C, 0xC0, 0xB2, 0x04,
-	0x28, 0xEF, 0xD3, 0x98, 0x03, 0x00, 0x0C, 0x01,
-	0x2E, 0x01, 0xD1, 0x07, 0x46, 0x00, 0xE0, 0x17,
-	0x90, 0x3F, 0x48, 0x1A, 0x99, 0x40, 0x5A, 0x15,
-	0x90, 0x19, 0x98, 0x41, 0x88, 0x14, 0x91, 0x80,
-	0x88, 0x12, 0x90, 0x49, 0x09,
-	0x00, 0x01, 0x69, 0x00, 0x80, 0x15, 0x98, 0x13,
-	0x91, 0x0F, 0x99, 0x40, 0x09, 0x09, 0x06, 0x77,
-	0xD5, 0xC1, 0x1B, 0xB8, 0x42, 0x00, 0xD8, 0x39,
-	0x1A, 0x08, 0x98, 0x81, 0x42, 0x01, 0xD8, 0x06,
-	0x98, 0x11, 0xE0, 0x09, 0x98, 0x81, 0x42, 0x01,
-	0xD9, 0x07, 0x98, 0x0C, 0xE0, 0x08, 0x98, 0x06,
-	0x9A, 0x08, 0x1A, 0x07, 0x99, 0x89, 0x1A, 0x48,
-	0x43, 0x08, 0x9A, 0x09, 0x99, 0x89, 0x1A, 0x01,
-	0xF0, 0xA2, 0xFA, 0x06, 0x99, 0x40, 0x18, 0x1B,
-	0x99, 0x09, 0x79, 0x01, 0x29, 0x08, 0xD1, 0x2A,
-	0x49, 0xC9, 0x6B, 0x01, 0x29, 0x04, 0xD1, 0x29,
-	0x49, 0x09, 0x88, 0x89, 0x06, 0x00, 0xD5, 0x80,
-	0x08, 0x15, 0x99, 0x15, 0x9A, 0x41, 0x43, 0x49,
-	0x09, 0x47, 0x43, 0x51, 0x1A, 0xCE, 0x19, 0x13,
-	0x99, 0x17, 0x98, 0x17, 0x9A, 0x08, 0x1A, 0x91,
-	0x42, 0x00, 0xD8, 0x50, 0x1A, 0x08, 0x99, 0x88,
-	0x42, 0x01, 0xD2, 0x06, 0x98,
-	0x00, 0x01, 0x6A, 0x00, 0x80, 0x11, 0xE0, 0x09,
-	0x99, 0x88, 0x42, 0x01, 0xD3, 0x07, 0x98, 0x0C,
-	0xE0, 0x08, 0x99, 0x06, 0x9A, 0x40, 0x1A, 0x07,
-	0x99, 0x89, 0x1A, 0x48, 0x43, 0x08, 0x9A, 0x09,
-	0x99, 0x89, 0x1A, 0x01, 0xF0, 0x70, 0xFA, 0x06,
-	0x99, 0x40, 0x18, 0x1B, 0x99, 0x09, 0x79, 0x01,
-	0x29, 0x08, 0xD1, 0x11, 0x49, 0xC9, 0x6B, 0x01,
-	0x29, 0x04, 0xD1, 0x10, 0x49, 0x09, 0x88, 0x89,
-	0x06, 0x00, 0xD5, 0x80, 0x08, 0x14, 0x99, 0x14,
-	0x9A, 0x41, 0x43, 0x49, 0x09, 0x52, 0x1A, 0x17,
-	0x99, 0x41, 0x43, 0x57, 0x18, 0x17, 0xE0, 0x13,
-	0xE0, 0xC0, 0x02, 0x00, 0x20, 0x2C, 0xDD, 0x00,
-	0x00, 0xA0, 0x00, 0x00, 0x20, 0xA4, 0x00, 0x00,
-	0x20, 0xB0, 0xDD, 0x00, 0x00, 0x4C, 0x03, 0x00,
-	0x20, 0x76, 0x15, 0x00, 0x20, 0x92, 0x00, 0x00,
-	0x20, 0x78, 0xDC, 0x00, 0x00, 0x48, 0x02, 0x00,
-	0x20, 0x17, 0x98, 0x7E, 0x01,
-	0x00, 0x01, 0x6B, 0x00, 0x80, 0x47, 0x01, 0x0F,
-	0x98, 0x80, 0x06, 0x10, 0xD5, 0x5B, 0x48, 0x40,
-	0x68, 0x80, 0x68, 0x01, 0x28, 0x04, 0xD1, 0x12,
-	0x99, 0x16, 0x98, 0x40, 0x18, 0x40, 0x08, 0x05,
-	0xE0, 0x12, 0x98, 0x41, 0x00, 0x41, 0x18, 0x16,
-	0x98, 0x08, 0x18, 0x80, 0x08, 0x16, 0x90, 0x0F,
-	0x98, 0x40, 0x06, 0x25, 0xD5, 0x15, 0x98, 0x86,
-	0x42, 0x06, 0xD9, 0x0D, 0x98, 0x86, 0x42, 0x03,
-	0xD8, 0x10, 0x2E, 0x01, 0xD9, 0x10, 0x3E, 0x08,
-	0xE0, 0x15, 0x98, 0x86, 0x42, 0x05, 0xD2, 0x40,
-	0x2E, 0x03, 0xD3, 0x0B, 0x98, 0x86, 0x42, 0x00,
-	0xD2, 0x10, 0x36, 0x14, 0x98, 0x87, 0x42, 0x06,
-	0xD9, 0x0C, 0x98, 0x87, 0x42, 0x03, 0xD8, 0x10,
-	0x2F, 0x01, 0xD9, 0x10, 0x3F, 0x08, 0xE0, 0x14,
-	0x98, 0x87, 0x42, 0x05, 0xD2, 0x40, 0x2F, 0x03,
-	0xD3, 0x0A, 0x98, 0x86, 0x42, 0x00, 0xD2, 0x10,
-	0x37, 0x0F, 0x98, 0xC0, 0x06,
-	0x00, 0x01, 0x6C, 0x00, 0x80, 0x09, 0xD5, 0x12,
-	0x99, 0x16, 0x98, 0x88, 0x42, 0x01, 0xD9, 0x40,
-	0x1E, 0x02, 0xE0, 0x88, 0x42, 0x01, 0xD2, 0x40,
-	0x1C, 0x16, 0x90, 0x1C, 0x98, 0x40, 0x79, 0xC0,
-	0x07, 0x0B, 0xD0, 0x19, 0x98, 0xC1, 0x88, 0xE0,
-	0x79, 0xFF, 0xF7, 0xB3, 0xFD, 0x11, 0x90, 0x19,
-	0x98, 0x01, 0x89, 0x20, 0x7A, 0xFF, 0xF7, 0xAD,
-	0xFD, 0x10, 0x90, 0x1C, 0x98, 0x40, 0x79, 0x80,
-	0x07, 0x17, 0xD5, 0x19, 0x99, 0x0A, 0x20, 0x08,
-	0x56, 0x1B, 0x99, 0x03, 0x46, 0x0A, 0x7A, 0x01,
-	0x46, 0x91, 0x40, 0x09, 0x22, 0xA2, 0x56, 0x09,
-	0x1A, 0x8A, 0x18, 0x1B, 0x99, 0x09, 0x7A, 0x0A,
-	0x41, 0x62, 0x72, 0x10, 0x1A, 0x00, 0xD5, 0x40,
-	0x42, 0x1B, 0x99, 0x49, 0x7A, 0x81, 0x42, 0x00,
-	0xDD, 0x63, 0x72, 0x28, 0x46, 0x0C, 0x22, 0x50,
-	0x43, 0x21, 0x4A, 0x03, 0x46, 0xE1, 0x7A, 0x80,
-	0x18, 0xC1, 0x72, 0xF1, 0x02,
-	0x00, 0x01, 0x6D, 0x00, 0x80, 0xD6, 0x52, 0x09,
-	0x0C, 0x61, 0x80, 0xF9, 0x02, 0x47, 0x80, 0x09,
-	0x0C, 0xA1, 0x80, 0x16, 0x99, 0x81, 0x80, 0x16,
-	0x99, 0xA1, 0x71, 0x11, 0x99, 0xC1, 0x80, 0x11,
-	0x99, 0x09, 0x0A, 0xE1, 0x71, 0x10, 0x99, 0x01,
-	0x81, 0x10, 0x99, 0x09, 0x0A, 0x21, 0x72, 0x61,
-	0x7A, 0x81, 0x72, 0x6D, 0x1C, 0xD2, 0xE5, 0x0E,
-	0x20, 0x12, 0x49, 0x68, 0x43, 0x40, 0x18, 0x41,
-	0x88, 0x0C, 0x24, 0x4B, 0x01, 0x29, 0x46, 0x61,
-	0x43, 0x0D, 0x4C, 0x63, 0x52, 0x83, 0x88, 0x09,
-	0x19, 0x5B, 0x01, 0x4B, 0x80, 0x83, 0x79, 0x8B,
-	0x80, 0xC3, 0x7A, 0xCB, 0x72, 0xC3, 0x79, 0x1B,
-	0x02, 0xCB, 0x80, 0x03, 0x7A, 0x1B, 0x02, 0x0B,
-	0x81, 0x40, 0x7A, 0x88, 0x72, 0x6D, 0x1C, 0x95,
-	0x42, 0xE1, 0xD3, 0x02, 0x48, 0x02, 0x70, 0x1D,
-	0xB0, 0xF0, 0xBD, 0x00, 0x00, 0xC0, 0x02, 0x00,
-	0x20, 0x76, 0x15, 0x00, 0x20,
-	0x00, 0x01, 0x6E, 0x00, 0x80, 0x4C, 0x03, 0x00,
-	0x20, 0x10, 0xB5, 0x00, 0x23, 0x14, 0x48, 0x14,
-	0x4A, 0x83, 0x75, 0xFF, 0x21, 0xC3, 0x75, 0x5C,
-	0x32, 0x01, 0x76, 0x14, 0x46, 0x18, 0x46, 0x08,
-	0x34, 0x11, 0x54, 0x23, 0x54, 0x40, 0x1C, 0x08,
-	0x28, 0xFA, 0xD3, 0x10, 0xBD, 0x0C, 0x49, 0x00,
-	0x20, 0xC8, 0x64, 0xC8, 0x71, 0x08, 0x72, 0x08,
-	0x65, 0x48, 0x72, 0x48, 0x65, 0x88, 0x72, 0xC8,
-	0x72, 0xC8, 0x77, 0x88, 0x65, 0x08, 0x75, 0x48,
-	0x75, 0x88, 0x71, 0xDD, 0xE7, 0x10, 0xB5, 0x04,
-	0x4C, 0x20, 0x78, 0x00, 0x28, 0x03, 0xD1, 0xFF,
-	0xF7, 0xE9, 0xFF, 0x01, 0x20, 0x20, 0x70, 0x10,
-	0xBD, 0xC8, 0x02, 0x00, 0x20, 0x70, 0x47, 0xF0,
-	0xB5, 0x00, 0x21, 0xB2, 0x4A, 0x99, 0xB0, 0x11,
-	0x70, 0x20, 0x28, 0x47, 0xD1, 0xB0, 0x4E, 0x34,
-	0x6A, 0xB0, 0x4D, 0x20, 0x46, 0x01, 0xAA, 0x40,
-	0x1E, 0x2B, 0x56, 0x00, 0x2B,
-	0x00, 0x01, 0x6F, 0x00, 0x80, 0x00, 0xDA, 0x5B,
-	0x42, 0x01, 0x19, 0x69, 0x56, 0x00, 0x29, 0x00,
-	0xDA, 0x49, 0x42, 0x8B, 0x42, 0x00, 0xDC, 0x0B,
-	0x46, 0x41, 0x00, 0x53, 0x52, 0x00, 0x28, 0xEE,
-	0xD1, 0xA7, 0x48, 0x00, 0x78, 0x18, 0x90, 0x40,
-	0x1E, 0x41, 0x00, 0x51, 0x5E, 0x04, 0x46, 0x40,
-	0x1E, 0x43, 0x00, 0xD3, 0x5E, 0x8B, 0x42, 0x01,
-	0xDD, 0x19, 0x46, 0x04, 0x46, 0x00, 0x28, 0xF6,
-	0xD1, 0xA0, 0x4B, 0xD8, 0x68, 0x88, 0x42, 0x17,
-	0xDD, 0x58, 0x68, 0x88, 0x42, 0x1A, 0xDC, 0x30,
-	0x6A, 0x40, 0x1E, 0x41, 0x00, 0x51, 0x5E, 0x05,
-	0x46, 0x40, 0x1E, 0x42, 0x00, 0x01, 0xAF, 0xBA,
-	0x5E, 0x8A, 0x42, 0x01, 0xDD, 0x11, 0x46, 0x05,
-	0x46, 0xF2, 0x69, 0x82, 0x42, 0xF4, 0xD3, 0xF0,
-	0x69, 0x2D, 0x1A, 0xD8, 0x68, 0x88, 0x42, 0x02,
-	0xDC, 0x01, 0x20, 0x19, 0xB0, 0xF0, 0xBD, 0x58,
-	0x68, 0x88, 0x42, 0x01, 0xDD,
-	0x00, 0x01, 0x70, 0x00, 0x80, 0x00, 0x20, 0xF8,
-	0xE7, 0xF0, 0x69, 0x40, 0x1E, 0x00, 0x2C, 0x2F,
-	0xD0, 0x84, 0x42, 0x40, 0xD2, 0x01, 0x2C, 0x03,
-	0xD1, 0x6B, 0x46, 0x0A, 0x20, 0x18, 0x5E, 0x15,
-	0xE0, 0x41, 0x1E, 0x8C, 0x42, 0x06, 0xD1, 0x41,
-	0x00, 0x01, 0xA8, 0x09, 0x18, 0x20, 0x39, 0x1A,
-	0x20, 0x08, 0x5E, 0x0B, 0xE0, 0x61, 0x00, 0x01,
-	0xA8, 0x09, 0x18, 0x0A, 0x46, 0x20, 0x3A, 0x1C,
-	0x20, 0x10, 0x5E, 0x04, 0x22, 0x8A, 0x5E, 0x90,
-	0x42, 0x00, 0xDC, 0x10, 0x46, 0x63, 0x00, 0x01,
-	0xA9, 0x59, 0x18, 0x0F, 0x46, 0x20, 0x3F, 0x1E,
-	0x23, 0xFB, 0x5E, 0x00, 0x22, 0x83, 0x42, 0x00,
-	0xD9, 0x1A, 0x1A, 0x02, 0x27, 0xCF, 0x5F, 0x00,
-	0x23, 0x87, 0x42, 0x28, 0xD9, 0x3B, 0x1A, 0x26,
-	0xE0, 0x6B, 0x46, 0x04, 0x22, 0x06, 0x21, 0x08,
-	0x20, 0x9A, 0x5E, 0x59, 0x5E, 0x18, 0x5E, 0x53,
-	0x18, 0x00, 0x27, 0x3A, 0x46,
-	0x00, 0x01, 0x71, 0x00, 0x80, 0x50, 0x2B, 0x01,
-	0xD2, 0x50, 0x22, 0xD2, 0x1A, 0x3B, 0x46, 0x81,
-	0x42, 0x15, 0xD9, 0x0B, 0x1A, 0x13, 0xE0, 0x42,
-	0x00, 0x01, 0xAB, 0xD1, 0x18, 0x9A, 0x5E, 0x20,
-	0x39, 0x1E, 0x23, 0x1C, 0x20, 0xCB, 0x5E, 0x08,
-	0x5E, 0xD1, 0x18, 0x00, 0x27, 0x3A, 0x46, 0x83,
-	0x42, 0x00, 0xD9, 0x1A, 0x1A, 0x3B, 0x46, 0x50,
-	0x29, 0x01, 0xD2, 0x50, 0x23, 0x5B, 0x1A, 0x61,
-	0x00, 0x01, 0xAF, 0x79, 0x5E, 0x08, 0x1A, 0x10,
-	0x18, 0xC1, 0x18, 0x98, 0x1A, 0x00, 0x02, 0x01,
-	0xF0, 0xA4, 0xF8, 0x00, 0x28, 0x06, 0xDB, 0x81,
-	0x08, 0x5B, 0x4A, 0x89, 0x00, 0x51, 0x58, 0x80,
-	0x30, 0x08, 0x18, 0x06, 0xE0, 0x41, 0x42, 0x89,
-	0x08, 0x57, 0x4A, 0x89, 0x00, 0x51, 0x58, 0x40,
-	0x1A, 0x80, 0x30, 0x00, 0x90, 0xB0, 0x69, 0x52,
-	0x49, 0x01, 0xAA, 0x09, 0x78, 0x40, 0x1E, 0x49,
-	0x00, 0x8A, 0x18, 0x00, 0x2D,
-	0x00, 0x01, 0x72, 0x00, 0x80, 0x2E, 0xD0, 0x18,
-	0x99, 0x85, 0x42, 0x3B, 0xD2, 0x69, 0x18, 0x01,
-	0x2D, 0x02, 0xD1, 0x06, 0x20, 0x10, 0x5E, 0x14,
-	0xE0, 0x40, 0x1E, 0x85, 0x42, 0x06, 0xD1, 0x30,
-	0x6A, 0x40, 0x00, 0xC2, 0x19, 0x20, 0x3A, 0x18,
-	0x20, 0x10, 0x5E, 0x0A, 0xE0, 0x48, 0x00, 0xC3,
-	0x19, 0x1A, 0x46, 0x20, 0x3A, 0x1C, 0x20, 0x10,
-	0x5E, 0x04, 0x22, 0x9A, 0x5E, 0x90, 0x42, 0x00,
-	0xDC, 0x10, 0x46, 0x49, 0x00, 0xC9, 0x19, 0x0E,
-	0x46, 0x20, 0x3E, 0x1E, 0x23, 0xF3, 0x5E, 0x00,
-	0x22, 0x83, 0x42, 0x00, 0xD9, 0x1A, 0x1A, 0x02,
-	0x23, 0xCB, 0x5E, 0x00, 0x26, 0x83, 0x42, 0x27,
-	0xD9, 0x1E, 0x1A, 0x25, 0xE0, 0x7B, 0x5E, 0x02,
-	0x21, 0x04, 0x20, 0x51, 0x5E, 0x00, 0x26, 0x10,
-	0x5E, 0x5B, 0x18, 0x32, 0x46, 0x50, 0x2B, 0x01,
-	0xD2, 0x50, 0x22, 0xD2, 0x1A, 0x81, 0x42, 0x17,
-	0xD9, 0x0E, 0x1A, 0x15, 0xE0,
-	0x00, 0x01, 0x73, 0x00, 0x80, 0x31, 0x48, 0x1C,
-	0x23, 0x00, 0x78, 0x00, 0x26, 0x08, 0x18, 0x40,
-	0x00, 0xC2, 0x19, 0x20, 0x3A, 0x1E, 0x21, 0x1A,
-	0x20, 0x51, 0x5E, 0xD3, 0x5E, 0x10, 0x5E, 0xC9,
-	0x18, 0x32, 0x46, 0x83, 0x42, 0x00, 0xD9, 0x1A,
-	0x1A, 0x50, 0x29, 0x01, 0xD2, 0x50, 0x23, 0x5E,
-	0x1A, 0x18, 0x99, 0x69, 0x18, 0x49, 0x00, 0x79,
-	0x5E, 0x08, 0x1A, 0x10, 0x18, 0x81, 0x19, 0xB0,
-	0x1A, 0x00, 0x02, 0x01, 0xF0, 0x2A, 0xF8, 0x00,
-	0x28, 0x06, 0xDB, 0x81, 0x08, 0x1E, 0x4A, 0x89,
-	0x00, 0x51, 0x58, 0x80, 0x30, 0x0A, 0x18, 0x06,
-	0xE0, 0x41, 0x42, 0x89, 0x08, 0x1A, 0x4A, 0x89,
-	0x00, 0x51, 0x58, 0x42, 0x1A, 0x80, 0x32, 0x1A,
-	0x48, 0x46, 0x69, 0x1A, 0x48, 0x1A, 0x49, 0x00,
-	0x68, 0x09, 0x68, 0x1A, 0x4B, 0x01, 0x2E, 0x09,
-	0xD1, 0x00, 0x9E, 0x24, 0x02, 0xA4, 0x19, 0x44,
-	0x43, 0x20, 0x0C, 0x2C, 0x02,
-	0x00, 0x01, 0x74, 0x00, 0x80, 0xA2, 0x18, 0x4A,
-	0x43, 0x11, 0x0C, 0x08, 0xE0, 0x26, 0x02, 0x00,
-	0x9C, 0x34, 0x19, 0x4C, 0x43, 0x21, 0x0C, 0x2C,
-	0x02, 0xA2, 0x18, 0x42, 0x43, 0x10, 0x0C, 0x98,
-	0x80, 0x59, 0x80, 0x32, 0x20, 0x98, 0x71, 0x01,
-	0x20, 0x02, 0x49, 0xD8, 0x72, 0x08, 0x70, 0x21,
-	0x20, 0xE3, 0xE6, 0x00, 0x00, 0x92, 0x00, 0x00,
-	0x20, 0x88, 0xDF, 0x00, 0x00, 0x74, 0x0D, 0x00,
-	0x20, 0x6E, 0x01, 0x00, 0x20, 0x70, 0xDD, 0x00,
-	0x00, 0x88, 0xCF, 0x00, 0x00, 0x6D, 0x01, 0x00,
-	0x20, 0x90, 0xDD, 0x00, 0x00, 0xA4, 0x00, 0x00,
-	0x20, 0xA0, 0x00, 0x00, 0x20, 0x4C, 0x03, 0x00,
-	0x20, 0xFA, 0x49, 0x8A, 0x78, 0xFA, 0x48, 0x02,
-	0x70, 0xCA, 0x78, 0x42, 0x70, 0x0A, 0x79, 0x82,
-	0x70, 0x4A, 0x79, 0xC2, 0x70, 0x8A, 0x79, 0x02,
-	0x71, 0xCA, 0x79, 0x42, 0x71, 0x09, 0x7A, 0x81,
-	0x71, 0x70, 0x47, 0xED, 0xE7,
-	0x00, 0x01, 0x75, 0x00, 0x80, 0xF0, 0xB5, 0x00,
-	0x29, 0x0B, 0xD0, 0x00, 0x24, 0xEF, 0x4E, 0x0E,
-	0xE0, 0x05, 0x19, 0xEF, 0x00, 0x00, 0x23, 0xED,
-	0x19, 0xAD, 0x19, 0xEF, 0x18, 0x3F, 0x7B, 0x00,
-	0x2F, 0x01, 0xD0, 0x10, 0x46, 0xF0, 0xBD, 0x5B,
-	0x1C, 0x09, 0x2B, 0xF6, 0xD3, 0x64, 0x1C, 0x8C,
-	0x42, 0xEE, 0xD3, 0x00, 0x20, 0xF0, 0xBD, 0xF8,
-	0xB5, 0xE4, 0x4D, 0xE6, 0x4F, 0x06, 0x46, 0x00,
-	0x24, 0xA9, 0x1C, 0x38, 0x46, 0xFD, 0xF7, 0x92,
-	0xFF, 0x29, 0x88, 0x88, 0x42, 0x39, 0xD1, 0x00,
-	0x2E, 0x11, 0xD0, 0xE1, 0x49, 0x38, 0x46, 0xFD,
-	0xF7, 0x89, 0xFF, 0xDF, 0x49, 0x89, 0x1E, 0x09,
-	0x88, 0x88, 0x42, 0x2E, 0xD1, 0xDD, 0x49, 0x38,
-	0x46, 0xFD, 0xF7, 0x80, 0xFF, 0xDB, 0x49, 0x89,
-	0x1E, 0x09, 0x88, 0x88, 0x42, 0x25, 0xD1, 0x00,
-	0x25, 0x00, 0xF0, 0x94, 0xFC, 0xD8, 0x4C, 0xE1,
-	0x6A, 0x06, 0x46, 0x4E, 0x43,
-	0x00, 0x01, 0x76, 0x00, 0x80, 0x01, 0x22, 0x31,
-	0x46, 0x28, 0x46, 0xFF, 0xF7, 0xBB, 0xFF, 0xA7,
-	0x6B, 0x05, 0x46, 0x02, 0x22, 0x39, 0x46, 0x30,
-	0x46, 0xFF, 0xF7, 0xB4, 0xFF, 0x05, 0x43, 0xF6,
-	0x19, 0xE7, 0x6B, 0x04, 0x22, 0x39, 0x46, 0x30,
-	0x46, 0xFF, 0xF7, 0xAC, 0xFF, 0x05, 0x43, 0xA1,
-	0x6A, 0xF0, 0x19, 0x00, 0x29, 0x00, 0xD0, 0x01,
-	0x21, 0x08, 0x22, 0xFF, 0xF7, 0xA3, 0xFF, 0x28,
-	0x43, 0x04, 0x46, 0x20, 0x46, 0xF8, 0xBD, 0xF1,
-	0xB5, 0xC7, 0x48, 0xC6, 0x4C, 0x01, 0x69, 0x82,
-	0xB0, 0x07, 0x22, 0x52, 0x06, 0x00, 0x91, 0x91,
-	0x43, 0x01, 0x22, 0x52, 0x06, 0x89, 0x18, 0x01,
-	0x61, 0x00, 0x26, 0x35, 0x46, 0xFE, 0xF7, 0x72,
-	0xFF, 0x00, 0x28, 0x01, 0xD0, 0x01, 0x26, 0x02,
-	0x25, 0xF0, 0xB2, 0xBE, 0x49, 0x01, 0x90, 0x30,
-	0xE0, 0xFE, 0xF7, 0x6E, 0xFF, 0x02, 0x98, 0xFE,
-	0xF7, 0x87, 0xFF, 0xB7, 0x48,
-	0x00, 0x01, 0x77, 0x00, 0x80, 0x60, 0x30, 0xC0,
-	0x7B, 0xFA, 0xF7, 0xA9, 0xFE, 0xB6, 0x49, 0x07,
-	0x22, 0xC0, 0x39, 0xCA, 0x60, 0x08, 0x68, 0x8B,
-	0x03, 0x18, 0x43, 0x08, 0x60, 0xC8, 0x68, 0xC0,
-	0x07, 0x01, 0xD1, 0x64, 0x1E, 0xFA, 0xD2, 0xCA,
-	0x60, 0xB1, 0x48, 0x02, 0x99, 0x00, 0x78, 0xB2,
-	0x4A, 0xC1, 0x40, 0xB0, 0x4B, 0x12, 0x78, 0x0B,
-	0xE0, 0xCE, 0x07, 0x07, 0xD0, 0xAF, 0x4F, 0x86,
-	0x00, 0xF6, 0x19, 0x36, 0x68, 0x36, 0x04, 0x76,
-	0x14, 0x47, 0x00, 0xDE, 0x53, 0x49, 0x08, 0x40,
-	0x1C, 0x90, 0x42, 0xF1, 0xD3, 0xA5, 0x49, 0x08,
-	0x78, 0x40, 0x1C, 0x08, 0x70, 0xA3, 0x48, 0x00,
-	0x78, 0xA8, 0x42, 0xC9, 0xD9, 0xA1, 0x49, 0x01,
-	0x98, 0x08, 0x70, 0x9F, 0x49, 0x00, 0x98, 0x08,
-	0x61, 0xFE, 0xBD, 0x70, 0xB5, 0x05, 0x46, 0x00,
-	0x23, 0x9E, 0x4E, 0x18, 0x46, 0xD4, 0x07, 0x09,
-	0xD0, 0x5C, 0x00, 0x34, 0x5F,
-	0x00, 0x01, 0x78, 0x00, 0x80, 0x00, 0x29, 0x02,
-	0xD0, 0xAC, 0x42, 0x03, 0xDD, 0x01, 0xE0, 0xAC,
-	0x42, 0x00, 0xDA, 0x01, 0x20, 0x5B, 0x1C, 0x52,
-	0x08, 0xF0, 0xD1, 0x70, 0xBD, 0xFF, 0xB5, 0x81,
-	0xB0, 0xD0, 0xB2, 0x03, 0x90, 0x8E, 0x48, 0x1F,
-	0x46, 0x60, 0x30, 0xC0, 0x7B, 0xFA, 0xF7, 0x57,
-	0xFE, 0x00, 0x25, 0x80, 0x24, 0xFE, 0x26, 0x8C,
-	0x49, 0x25, 0x43, 0x08, 0x68, 0xB0, 0x43, 0x28,
-	0x43, 0x08, 0x60, 0x03, 0x98, 0xFF, 0xF7, 0x7F,
-	0xFF, 0x01, 0xA8, 0x07, 0xC8, 0xB8, 0x47, 0x00,
-	0x28, 0x00, 0xD0, 0xA5, 0x43, 0x64, 0x08, 0x34,
-	0x40, 0xED, 0xD1, 0x28, 0x46, 0x05, 0xB0, 0xF0,
-	0xBD, 0x70, 0xB5, 0x05, 0x46, 0x00, 0x23, 0x83,
-	0x4E, 0x01, 0x20, 0xD4, 0x07, 0x09, 0xD0, 0x5C,
-	0x00, 0x34, 0x5F, 0x00, 0x29, 0x02, 0xD0, 0xAC,
-	0x42, 0x03, 0xDC, 0x01, 0xE0, 0xAC, 0x42, 0x00,
-	0xDB, 0x00, 0x20, 0x5B, 0x1C,
-	0x00, 0x01, 0x79, 0x00, 0x80, 0x52, 0x08, 0xF0,
-	0xD1, 0x70, 0xBD, 0xFF, 0xB5, 0x81, 0xB0, 0x70,
-	0x48, 0x0A, 0x9F, 0x01, 0x22, 0x81, 0x68, 0x92,
-	0x02, 0x38, 0x46, 0x00, 0xF0, 0x43, 0xFE, 0x00,
-	0x26, 0x4A, 0xE0, 0x28, 0x20, 0x0D, 0x99, 0x70,
-	0x43, 0x44, 0x18, 0xA0, 0x68, 0x80, 0x47, 0x6E,
-	0x48, 0xC0, 0x38, 0x81, 0x68, 0x01, 0x22, 0xC9,
-	0xB2, 0xD2, 0x02, 0x89, 0x18, 0x81, 0x60, 0x03,
-	0x98, 0x00, 0x28, 0x09, 0xD0, 0x68, 0x49, 0x80,
-	0x39, 0x48, 0x6A, 0x03, 0x22, 0x12, 0x07, 0x90,
-	0x43, 0x04, 0x9A, 0x12, 0x07, 0x10, 0x43, 0x48,
-	0x62, 0x01, 0x98, 0x00, 0x28, 0x07, 0xD0, 0x62,
-	0x48, 0x01, 0x68, 0x02, 0x9A, 0x09, 0x0A, 0x09,
-	0x02, 0x11, 0x43, 0x01, 0x60, 0x02, 0xE0, 0x20,
-	0x46, 0x00, 0xF0, 0xE1, 0xFB, 0x00, 0x25, 0x15,
-	0xE0, 0xF9, 0xF7, 0x94, 0xFF, 0x21, 0x69, 0x28,
-	0x46, 0x88, 0x47, 0xE1, 0x68,
-	0x00, 0x01, 0x7A, 0x00, 0x80, 0x28, 0x46, 0x88,
-	0x47, 0x02, 0x46, 0xE9, 0x00, 0x20, 0x6A, 0x69,
-	0x18, 0x43, 0x18, 0x24, 0x20, 0x01, 0x57, 0x20,
-	0x68, 0x00, 0xF0, 0x8F, 0xFB, 0x61, 0x69, 0x28,
-	0x46, 0x88, 0x47, 0x6D, 0x1C, 0x60, 0x68, 0xA8,
-	0x42, 0xE6, 0xD8, 0xA0, 0x69, 0x00, 0x28, 0x02,
-	0xD0, 0xE1, 0x69, 0x09, 0x78, 0x01, 0x70, 0x76,
-	0x1C, 0x0C, 0x98, 0x86, 0x42, 0xB1, 0xD3, 0x00,
-	0x20, 0x4F, 0x4A, 0x0F, 0x21, 0x83, 0x00, 0x9B,
-	0x18, 0x19, 0x60, 0x40, 0x1C, 0x41, 0x28, 0xF9,
-	0xD3, 0x0B, 0x98, 0x00, 0x28, 0x82, 0xD0, 0xB9,
-	0x1C, 0x3E, 0x48, 0xFD, 0xF7, 0x47, 0xFE, 0x38,
-	0x80, 0x3B, 0x48, 0x80, 0x68, 0xC4, 0x09, 0x25,
-	0x46, 0x08, 0x35, 0x05, 0xE0, 0xA0, 0xB2, 0x39,
-	0x46, 0xFD, 0xF7, 0x80, 0xFE, 0x80, 0x37, 0x64,
-	0x1C, 0xAC, 0x42, 0xF7, 0xD3, 0x6E, 0xE7, 0x70,
-	0xB5, 0x05, 0x46, 0x0C, 0x46,
-	0x00, 0x01, 0x7B, 0x00, 0x80, 0x00, 0xF0, 0x4E,
-	0xFB, 0x06, 0x46, 0x01, 0x46, 0x28, 0x46, 0x00,
-	0xF0, 0x3A, 0xFE, 0x20, 0x60, 0x70, 0x43, 0x28,
-	0x1A, 0x81, 0x07, 0x89, 0x0F, 0x21, 0x61, 0x30,
-	0x49, 0x60, 0x60, 0x40, 0x31, 0xC9, 0x69, 0x37,
-	0x4A, 0x02, 0x29, 0x08, 0xD1, 0x11, 0x78, 0x8B,
-	0x08, 0x9B, 0x00, 0x83, 0x42, 0x02, 0xD9, 0x80,
-	0x08, 0x80, 0x00, 0x00, 0xE0, 0x08, 0x1F, 0x32,
-	0x49, 0x09, 0x78, 0x43, 0x18, 0xA3, 0x60, 0x12,
-	0x78, 0x52, 0x08, 0x82, 0x42, 0x04, 0xD9, 0x24,
-	0x48, 0x00, 0x6A, 0x40, 0x1E, 0xE0, 0x60, 0x70,
-	0xBD, 0xE1, 0x60, 0x70, 0xBD, 0x70, 0xB5, 0x86,
-	0xB0, 0x01, 0xA9, 0xFF, 0xF7, 0xCC, 0xFF, 0x29,
-	0x4E, 0x03, 0x98, 0x1D, 0x49, 0x80, 0x19, 0x40,
-	0x31, 0xC9, 0x69, 0x0F, 0x24, 0x22, 0x4D, 0x02,
-	0x29, 0x4C, 0xD1, 0x19, 0x49, 0x60, 0x31, 0x49,
-	0x7C, 0x00, 0x29, 0x0A, 0xD0,
-	0x00, 0x01, 0x7C, 0x00, 0x80, 0x20, 0x49, 0x03,
-	0x98, 0x09, 0x78, 0x40, 0x1A, 0xC0, 0x1C, 0x80,
-	0x05, 0x00, 0x0E, 0xFF, 0x21, 0xFA, 0xF7, 0x30,
-	0xFD, 0x0F, 0xE0, 0x01, 0x78, 0x89, 0x00, 0x49,
-	0x19, 0x0C, 0x60, 0x41, 0x78, 0x89, 0x00, 0x49,
-	0x19, 0x0C, 0x60, 0x81, 0x78, 0x89, 0x00, 0x49,
-	0x19, 0x0C, 0x60, 0xC0, 0x78, 0x80, 0x00, 0x40,
-	0x19, 0x04, 0x60, 0x15, 0x48, 0x00, 0x78, 0x30,
-	0x5C, 0x80, 0x00, 0x40, 0x19, 0x04, 0x60, 0x06,
-	0xB0, 0x70, 0xBD, 0x00, 0x00, 0x80, 0xE2, 0x00,
-	0x00, 0x34, 0x03, 0x00, 0x20, 0xCE, 0x03, 0x00,
-	0x00, 0x82, 0xE6, 0x00, 0x00, 0x82, 0xEA, 0x00,
-	0x00, 0x88, 0xDF, 0x00, 0x00, 0x88, 0x90, 0x00,
-	0x00, 0xC0, 0x00, 0x11, 0x40, 0xA8, 0x02, 0x00,
-	0x20, 0xA9, 0x02, 0x00, 0x20, 0xC4, 0x04, 0x00,
-	0x20, 0xAA, 0x02, 0x00, 0x20, 0x00, 0x02, 0x11,
-	0x40, 0x00, 0x04, 0x11, 0x40,
-	0x00, 0x01, 0x7D, 0x00, 0x80, 0x6D, 0x01, 0x00,
-	0x20, 0x6E, 0x01, 0x00, 0x20, 0xC0, 0xE0, 0x00,
-	0x00, 0x76, 0x01, 0x00, 0x20, 0x00, 0x78, 0xCD,
-	0xE7, 0x70, 0xB5, 0xFC, 0x4B, 0xFA, 0x4A, 0xDC,
-	0x69, 0x12, 0x18, 0xFB, 0x4B, 0x02, 0x2C, 0x26,
-	0xD1, 0xF8, 0x4C, 0x20, 0x34, 0x64, 0x7C, 0x00,
-	0x2C, 0x09, 0xD0, 0xF8, 0x4A, 0xC9, 0xB2, 0x12,
-	0x78, 0x80, 0x1A, 0xC0, 0x1C, 0x00, 0x06, 0x80,
-	0x0E, 0xFA, 0xF7, 0xDA, 0xFC, 0xC0, 0xE7, 0x08,
-	0x01, 0x15, 0x78, 0xF3, 0x49, 0xAD, 0x00, 0x0C,
-	0x58, 0xED, 0x18, 0x2C, 0x60, 0x54, 0x78, 0x40,
-	0x18, 0xA4, 0x00, 0xE4, 0x18, 0x41, 0x68, 0x21,
-	0x60, 0x94, 0x78, 0x81, 0x68, 0xA4, 0x00, 0xE4,
-	0x18, 0x21, 0x60, 0xC0, 0x68, 0xD1, 0x78, 0x89,
-	0x00, 0xC9, 0x18, 0x08, 0x60, 0xA8, 0xE7, 0x01,
-	0x20, 0x11, 0x78, 0xF8, 0xE7, 0x00, 0xB5, 0x85,
-	0xB0, 0x69, 0x46, 0xFF, 0xF7,
-	0x00, 0x01, 0x7E, 0x00, 0x80, 0x3C, 0xFF, 0x01,
-	0x98, 0x00, 0x28, 0x02, 0xD1, 0x00, 0x98, 0xFA,
-	0xF7, 0x3A, 0xFD, 0x03, 0x98, 0xE1, 0x49, 0xC0,
-	0xB2, 0x08, 0x70, 0xDC, 0x49, 0x09, 0x69, 0x00,
-	0x29, 0x06, 0xD0, 0xD9, 0x4A, 0x0C, 0x21, 0x10,
-	0x5C, 0xD9, 0x4A, 0x80, 0x00, 0x80, 0x18, 0x01,
-	0x60, 0x04, 0x99, 0x02, 0x98, 0xFF, 0xF7, 0xB0,
-	0xFF, 0x05, 0xB0, 0x00, 0xBD, 0x00, 0xB5, 0x85,
-	0xB0, 0x69, 0x46, 0xFF, 0xF7, 0x1C, 0xFF, 0x00,
-	0x98, 0x16, 0x21, 0x48, 0x43, 0xD4, 0x49, 0x08,
-	0x5A, 0xF2, 0xE7, 0x70, 0xB5, 0x04, 0x46, 0xD3,
-	0x48, 0x0D, 0x46, 0x40, 0x6A, 0x20, 0x60, 0x00,
-	0xF0, 0x61, 0xFA, 0xCA, 0x49, 0x40, 0x39, 0xC9,
-	0x6A, 0x48, 0x43, 0x60, 0x60, 0xCE, 0x48, 0xA0,
-	0x60, 0xCE, 0x48, 0xE0, 0x60, 0xCE, 0x48, 0x20,
-	0x61, 0xCE, 0x48, 0x60, 0x61, 0xCE, 0x48, 0xA0,
-	0x61, 0xA8, 0x1C, 0x0C, 0x35,
-	0x00, 0x01, 0x7F, 0x00, 0x80, 0x25, 0x62, 0xE0,
-	0x61, 0x01, 0x20, 0x20, 0x34, 0x20, 0x71, 0x5B,
-	0xE7, 0x30, 0xB5, 0x0D, 0x46, 0x8F, 0xB0, 0x04,
-	0x46, 0x01, 0x46, 0x05, 0xA8, 0xFF, 0xF7, 0xD9,
-	0xFF, 0x05, 0xAA, 0x03, 0x92, 0x00, 0x22, 0x01,
-	0x21, 0x02, 0x91, 0x01, 0x95, 0x00, 0x94, 0x11,
-	0x46, 0x10, 0x46, 0x13, 0x46, 0xFF, 0xF7, 0x69,
-	0xFE, 0x0F, 0xB0, 0x30, 0xBD, 0xF0, 0xB5, 0x8F,
-	0xB0, 0x06, 0x46, 0x0C, 0x46, 0x15, 0x46, 0x1F,
-	0x46, 0x11, 0x46, 0x05, 0xA8, 0xFF, 0xF7, 0xC1,
-	0xFF, 0x05, 0xAA, 0x01, 0x21, 0x03, 0x92, 0x02,
-	0x91, 0x0A, 0x46, 0x23, 0x46, 0x01, 0x97, 0x00,
-	0x95, 0x31, 0x46, 0x01, 0x20, 0xFF, 0xF7, 0x51,
-	0xFE, 0x0F, 0xB0, 0xF0, 0xBD, 0x30, 0xB5, 0xA9,
-	0x48, 0xB2, 0x49, 0x00, 0x78, 0x09, 0x78, 0xA4,
-	0x4A, 0x43, 0x18, 0x00, 0x20, 0x02, 0x21, 0xA4,
-	0x4C, 0x04, 0xE0, 0x15, 0x5C,
-	0x00, 0x01, 0x80, 0x00, 0x80, 0xAD, 0x00, 0x2D,
-	0x19, 0x29, 0x60, 0x40, 0x1C, 0x83, 0x42, 0xF8,
-	0xD8, 0x30, 0xBD, 0x9E, 0x49, 0x10, 0xB5, 0x40,
-	0x39, 0x09, 0x6B, 0x08, 0x18, 0xFA, 0xF7, 0xB3,
-	0xFC, 0x10, 0xBD, 0x10, 0xB5, 0x04, 0x46, 0x00,
-	0x21, 0x02, 0x20, 0xFA, 0xF7, 0xFA, 0xF8, 0x01,
-	0x19, 0x96, 0x48, 0x40, 0x38, 0x00, 0x6B, 0x08,
-	0x18, 0x16, 0x21, 0x48, 0x43, 0x98, 0x49, 0x08,
-	0x5A, 0x10, 0xBD, 0x10, 0xB5, 0xFA, 0xF7, 0x9F,
-	0xFC, 0x10, 0xBD, 0x10, 0xB5, 0x04, 0x46, 0x00,
-	0x21, 0x01, 0x20, 0xFA, 0xF7, 0xE6, 0xF8, 0x00,
-	0x19, 0x16, 0x21, 0x48, 0x43, 0x90, 0x49, 0x08,
-	0x5A, 0x10, 0xBD, 0xF3, 0xB5, 0x99, 0xB0, 0x04,
-	0x46, 0x00, 0xF0, 0xDC, 0xF9, 0x87, 0x49, 0x40,
-	0x39, 0xCA, 0x6A, 0x8C, 0x4D, 0x50, 0x43, 0xAA,
-	0x6A, 0x05, 0x92, 0x0A, 0x6B, 0x06, 0x92, 0x91,
-	0x4A, 0x08, 0x92, 0x91, 0x4A,
-	0x00, 0x01, 0x81, 0x00, 0x80, 0x09, 0x92, 0x8C,
-	0x4A, 0x8D, 0x4E, 0x52, 0x1C, 0x0B, 0x92, 0x07,
-	0x96, 0xE2, 0x1C, 0x0C, 0x92, 0xC2, 0x00, 0x82,
-	0x18, 0x12, 0x19, 0x0C, 0x32, 0x8B, 0x4F, 0x0D,
-	0x92, 0x0A, 0x97, 0x00, 0x22, 0x08, 0xAB, 0x1A,
-	0x76, 0xAB, 0x6A, 0x0F, 0x93, 0x4B, 0x6B, 0x10,
-	0x93, 0x87, 0x4B, 0x12, 0x93, 0x87, 0x4B, 0x13,
-	0x93, 0x7F, 0x4B, 0x11, 0x96, 0x9B, 0x1C, 0x15,
-	0x93, 0x23, 0x1D, 0x14, 0x97, 0x16, 0x93, 0x09,
-	0x6B, 0x18, 0xAB, 0x08, 0x18, 0xC1, 0x00, 0x40,
-	0x18, 0x00, 0x19, 0x0C, 0x30, 0x17, 0x90, 0x1A,
-	0x70, 0x1A, 0x98, 0x00, 0x94, 0x05, 0xAA, 0x02,
-	0x21, 0x01, 0xAC, 0x07, 0xC4, 0x00, 0x22, 0x11,
-	0x46, 0x10, 0x46, 0x13, 0x46, 0xFF, 0xF7, 0xCD,
-	0xFD, 0x1B, 0xB0, 0xF0, 0xBD, 0x70, 0x47, 0x70,
-	0x47, 0x10, 0xB5, 0x00, 0x21, 0x08, 0x20, 0xFA,
-	0xF7, 0x90, 0xF8, 0x16, 0x21,
-	0x00, 0x01, 0x82, 0x00, 0x80, 0x48, 0x43, 0x66,
-	0x49, 0x08, 0x5A, 0x10, 0xBD, 0x10, 0xB5, 0xFA,
-	0xF7, 0x95, 0xFA, 0xFA, 0xF7, 0x55, 0xFA, 0xFA,
-	0xF7, 0x9E, 0xFD, 0x10, 0xBD, 0x10, 0xB5, 0xFA,
-	0xF7, 0x8D, 0xFA, 0x00, 0x20, 0xFA, 0xF7, 0x2F,
-	0xFC, 0x10, 0xBD, 0xF7, 0xB5, 0x57, 0x48, 0x0C,
-	0x46, 0x05, 0x6A, 0x00, 0x26, 0x07, 0x46, 0x40,
-	0x3F, 0xB8, 0x6A, 0x00, 0x28, 0x01, 0xD1, 0x01,
-	0x20, 0xFE, 0xBD, 0x03, 0x2D, 0x04, 0xD0, 0x01,
-	0x2D, 0x01, 0xD1, 0x02, 0x25, 0x00, 0xE0, 0x01,
-	0x25, 0x00, 0xF0, 0x68, 0xF9, 0xF9, 0x6A, 0x48,
-	0x43, 0xB9, 0x6B, 0x40, 0x18, 0xF9, 0x6B, 0x01,
-	0x23, 0x41, 0x18, 0xE8, 0x07, 0x4F, 0x4F, 0x5C,
-	0x4A, 0x00, 0x28, 0x18, 0xD0, 0x38, 0x6B, 0x63,
-	0x60, 0x20, 0x60, 0x5A, 0x48, 0xE2, 0x60, 0xA0,
-	0x60, 0x59, 0x48, 0x20, 0x61, 0x59, 0x48, 0x60,
-	0x61, 0x4D, 0x48, 0x40, 0x1D,
-	0x00, 0x01, 0x83, 0x00, 0x80, 0xA0, 0x61, 0x02,
-	0x98, 0xC0, 0x1D, 0xE0, 0x61, 0xC8, 0x00, 0x02,
-	0x9E, 0x08, 0x18, 0x80, 0x19, 0x0C, 0x30, 0x20,
-	0x62, 0x24, 0x20, 0x03, 0x55, 0x01, 0x26, 0xA8,
-	0x07, 0x1D, 0xD5, 0x3D, 0x6B, 0x30, 0x46, 0x28,
-	0x27, 0x78, 0x43, 0x25, 0x50, 0x00, 0x19, 0x43,
-	0x60, 0x4D, 0x4B, 0x83, 0x60, 0xC2, 0x60, 0x4A,
-	0x4A, 0x02, 0x61, 0x4A, 0x4A, 0x42, 0x61, 0x3E,
-	0x4A, 0x92, 0x1D, 0x82, 0x61, 0x02, 0x9A, 0x08,
-	0x32, 0xC2, 0x61, 0xCA, 0x00, 0x8A, 0x18, 0x02,
-	0x99, 0x51, 0x18, 0x15, 0x31, 0x01, 0x62, 0x00,
-	0x21, 0x20, 0x30, 0x01, 0x71, 0x76, 0x1C, 0x00,
-	0x98, 0x06, 0x60, 0x00, 0x20, 0xFE, 0xBD, 0x30,
-	0xB5, 0x99, 0xB0, 0x04, 0x46, 0x0D, 0x46, 0x02,
-	0x46, 0x05, 0xA9, 0x04, 0xA8, 0xFF, 0xF7, 0x99,
-	0xFF, 0x00, 0x28, 0x0B, 0xD1, 0x05, 0xAA, 0x03,
-	0x92, 0x00, 0x22, 0x04, 0x99,
-	0x00, 0x01, 0x84, 0x00, 0x80, 0x02, 0x91, 0x01,
-	0x95, 0x00, 0x94, 0x11, 0x46, 0x10, 0x46, 0x13,
-	0x46, 0xFF, 0xF7, 0x3B, 0xFD, 0x19, 0xB0, 0x30,
-	0xBD, 0xF0, 0xB5, 0x99, 0xB0, 0x05, 0x46, 0x0C,
-	0x46, 0x16, 0x46, 0x1F, 0x46, 0x05, 0xA9, 0x04,
-	0xA8, 0xFF, 0xF7, 0x7F, 0xFF, 0x00, 0x28, 0x0B,
-	0xD1, 0x05, 0xAA, 0x04, 0x99, 0x03, 0x92, 0x02,
-	0x91, 0x01, 0x22, 0x23, 0x46, 0x01, 0x97, 0x00,
-	0x96, 0x29, 0x46, 0x10, 0x46, 0xFF, 0xF7, 0x21,
-	0xFD, 0x19, 0xB0, 0xF0, 0xBD, 0xF0, 0xB5, 0x00,
-	0x23, 0x8C, 0x46, 0x06, 0x46, 0x25, 0x49, 0x18,
-	0x46, 0x1D, 0x46, 0x1C, 0x46, 0xD7, 0x07, 0x03,
-	0xD0, 0x5F, 0x00, 0xCF, 0x5F, 0x7D, 0x19, 0x64,
-	0x1C, 0x5B, 0x1C, 0x52, 0x08, 0xF6, 0xD1, 0x20,
-	0x4A, 0xA1, 0x00, 0x51, 0x58, 0x62, 0x46, 0x69,
-	0x43, 0x09, 0x12, 0x00, 0x2A, 0x3A, 0xD0, 0xB1,
-	0x42, 0x00, 0xDD, 0x01, 0x20,
-	0x00, 0x01, 0x85, 0x00, 0x80, 0xF0, 0xBD, 0x00,
-	0x00, 0xC0, 0xE0, 0x00, 0x00, 0xC8, 0xDF, 0x00,
-	0x00, 0x00, 0x04, 0x11, 0x40, 0x6E, 0x01, 0x00,
-	0x20, 0x98, 0xCD, 0x00, 0x00, 0x76, 0x01, 0x00,
-	0x20, 0x2C, 0xE1, 0x00, 0x00, 0x54, 0xE0, 0x00,
-	0x00, 0x63, 0x62, 0x00, 0x00, 0x39, 0xBF, 0x00,
-	0x00, 0xF9, 0xBE, 0x00, 0x00, 0xD9, 0xBD, 0x00,
-	0x00, 0x34, 0x03, 0x00, 0x20, 0x6D, 0x01, 0x00,
-	0x20, 0x15, 0x64, 0x00, 0x00, 0x47, 0xC0, 0x00,
-	0x00, 0x3F, 0xC0, 0x00, 0x00, 0xE9, 0xBF, 0x00,
-	0x00, 0x1F, 0xC0, 0x00, 0x00, 0x0F, 0xC0, 0x00,
-	0x00, 0xF5, 0xC0, 0x00, 0x00, 0x19, 0xC1, 0x00,
-	0x00, 0xF3, 0xC0, 0x00, 0x00, 0xF1, 0xC0, 0x00,
-	0x00, 0x09, 0xC1, 0x00, 0x00, 0xC4, 0x04, 0x00,
-	0x20, 0x38, 0xCF, 0x00, 0x00, 0xB1, 0x42, 0xC4,
-	0xDB, 0xC4, 0xE7, 0x70, 0xB5, 0x0C, 0x46, 0x95,
-	0x49, 0x15, 0x46, 0x8A, 0x68,
-	0x00, 0x01, 0x86, 0x00, 0x80, 0x01, 0x23, 0xD2,
-	0xB2, 0xDB, 0x02, 0xD2, 0x18, 0x8A, 0x60, 0x01,
-	0x46, 0x91, 0x48, 0x00, 0x78, 0xF9, 0xF7, 0x85,
-	0xFF, 0x16, 0x21, 0x48, 0x43, 0x8F, 0x49, 0x0A,
-	0x5A, 0x21, 0x46, 0x28, 0x46, 0x8E, 0x4B, 0xFF,
-	0xF7, 0x79, 0xFC, 0xC0, 0xB2, 0x8C, 0xE5, 0x70,
-	0xB5, 0xF9, 0xF7, 0x99, 0xFF, 0x8B, 0x48, 0x00,
-	0x25, 0x00, 0x78, 0x40, 0x08, 0x84, 0x08, 0xA4,
-	0x00, 0x28, 0x46, 0xFA, 0xF7, 0x20, 0xFB, 0x20,
-	0x46, 0xFA, 0xF7, 0x80, 0xFA, 0x86, 0x48, 0x01,
-	0x78, 0x08, 0x19, 0x00, 0x21, 0xFF, 0xF7, 0xA0,
-	0xFD, 0x84, 0x48, 0xC0, 0x7B, 0xFA, 0xF7, 0xBF,
-	0xFA, 0x83, 0x48, 0x42, 0x6A, 0x01, 0x21, 0x28,
-	0x46, 0xFF, 0xF7, 0xC7, 0xFF, 0x6C, 0xE5, 0x10,
-	0xB5, 0xFA, 0xF7, 0x52, 0xF8, 0x7D, 0x48, 0x60,
-	0x38, 0x00, 0x6B, 0x44, 0x08, 0x20, 0x46, 0xFA,
-	0xF7, 0x65, 0xFA, 0x20, 0x46,
-	0x00, 0x01, 0x87, 0x00, 0x80, 0xFA, 0xF7, 0xFF,
-	0xFA, 0x72, 0x48, 0x00, 0x68, 0x00, 0x28, 0x03,
-	0xD0, 0x76, 0x48, 0xC0, 0x7B, 0xFA, 0xF7, 0xA3,
-	0xFA, 0x75, 0x48, 0x82, 0x6A, 0x00, 0x21, 0x20,
-	0x46, 0xFF, 0xF7, 0xAB, 0xFF, 0x10, 0xBD, 0x10,
-	0xB5, 0xFA, 0xF7, 0x36, 0xF8, 0x6F, 0x48, 0x60,
-	0x38, 0x01, 0x6B, 0x40, 0x6B, 0x40, 0x08, 0x0C,
-	0x18, 0x20, 0x46, 0xFA, 0xF7, 0x47, 0xFA, 0x20,
-	0x46, 0xFA, 0xF7, 0xE1, 0xFA, 0x63, 0x48, 0x00,
-	0x68, 0x00, 0x28, 0x03, 0xD0, 0x67, 0x48, 0xC0,
-	0x7B, 0xFA, 0xF7, 0x85, 0xFA, 0x66, 0x48, 0x82,
-	0x6A, 0x00, 0x21, 0x20, 0x46, 0xFF, 0xF7, 0x8D,
-	0xFF, 0x10, 0xBD, 0x10, 0xB5, 0xFA, 0xF7, 0x2A,
-	0xF9, 0x00, 0x20, 0xFA, 0xF7, 0x2F, 0xFA, 0x00,
-	0x20, 0xFA, 0xF7, 0xC9, 0xFA, 0x5E, 0x48, 0x02,
-	0x6B, 0x01, 0x21, 0x00, 0x20, 0xFF, 0xF7, 0x7D,
-	0xFF, 0x10, 0xBD, 0x10, 0xB5,
-	0x00, 0x01, 0x88, 0x00, 0x80, 0xFA, 0xF7, 0x1A,
-	0xF9, 0xFA, 0xF7, 0xDA, 0xF8, 0xFA, 0xF7, 0x23,
-	0xFC, 0x01, 0x20, 0xFA, 0xF7, 0x1B, 0xFA, 0x56,
-	0x48, 0x02, 0x6B, 0x00, 0x21, 0x08, 0x46, 0xFF,
-	0xF7, 0x6C, 0xFF, 0x10, 0xBD, 0x51, 0x49, 0x4F,
-	0x48, 0x20, 0x39, 0x00, 0x78, 0xC9, 0x69, 0x02,
-	0x29, 0x02, 0xD1, 0xC0, 0x1C, 0x80, 0x08, 0x80,
-	0x00, 0x70, 0x47, 0xFF, 0xB5, 0x06, 0x46, 0x81,
-	0xB0, 0xD0, 0xB2, 0x03, 0x90, 0x49, 0x48, 0x0F,
-	0x46, 0x1D, 0x46, 0xC0, 0x7B, 0xFA, 0xF7, 0x47,
-	0xFA, 0x00, 0x20, 0x01, 0x46, 0x29, 0x54, 0x40,
-	0x1C, 0x09, 0x28, 0xFB, 0xD3, 0x3D, 0x48, 0x80,
-	0x30, 0x41, 0x63, 0x10, 0x24, 0x3B, 0x4A, 0x00,
-	0x20, 0x80, 0x32, 0x29, 0x5C, 0x21, 0x43, 0x0B,
-	0x02, 0x0B, 0x43, 0x81, 0x00, 0x89, 0x18, 0x4B,
-	0x61, 0x40, 0x1C, 0x08, 0x28, 0xF5, 0xD3, 0x03,
-	0x98, 0xFF, 0xF7, 0x61, 0xFB,
-	0x00, 0x01, 0x89, 0x00, 0x80, 0x00, 0x20, 0x3B,
-	0x4B, 0x03, 0x99, 0x0F, 0xE0, 0xCA, 0x07, 0x0B,
-	0xD0, 0x42, 0x00, 0x9A, 0x5E, 0x00, 0x2F, 0x02,
-	0xD0, 0xB2, 0x42, 0x05, 0xDC, 0x01, 0xE0, 0xB2,
-	0x42, 0x02, 0xDB, 0x2A, 0x5C, 0x22, 0x43, 0x2A,
-	0x54, 0x49, 0x08, 0x40, 0x1C, 0x00, 0x29, 0xED,
-	0xD1, 0x64, 0x08, 0xD7, 0xD1, 0x62, 0xE4, 0xFE,
-	0xB5, 0x04, 0x46, 0x26, 0x4A, 0x00, 0x20, 0x2E,
-	0x49, 0x80, 0x32, 0x83, 0x00, 0x9B, 0x18, 0x59,
-	0x61, 0x40, 0x1C, 0x09, 0x28, 0xF9, 0xD3, 0x27,
-	0x48, 0x20, 0x38, 0x00, 0x69, 0x01, 0x28, 0x01,
-	0xD0, 0x00, 0x20, 0x50, 0x63, 0x00, 0x27, 0xFE,
-	0x26, 0x20, 0x46, 0x20, 0x30, 0x3D, 0x46, 0x01,
-	0x90, 0x22, 0xE0, 0xF9, 0xF7, 0x9B, 0xFB, 0x21,
-	0x69, 0x28, 0x46, 0x88, 0x47, 0xE1, 0x68, 0x28,
-	0x46, 0x88, 0x47, 0x00, 0x90, 0x01, 0x98, 0x04,
-	0x21, 0x41, 0x56, 0x20, 0x68,
-	0x00, 0x01, 0x8A, 0x00, 0x80, 0x1D, 0x4B, 0x00,
-	0x9A, 0xFF, 0xF7, 0x88, 0xFB, 0xB8, 0x42, 0x00,
-	0xD9, 0x07, 0x46, 0x01, 0x98, 0x04, 0x21, 0x41,
-	0x56, 0x20, 0x68, 0x19, 0x4B, 0x00, 0x9A, 0xFF,
-	0xF7, 0x7D, 0xFB, 0xB0, 0x42, 0x00, 0xD2, 0x06,
-	0x46, 0x61, 0x69, 0x28, 0x46, 0x88, 0x47, 0x6D,
-	0x1C, 0x60, 0x68, 0xA8, 0x42, 0xD9, 0xD8, 0xB8,
-	0x19, 0x40, 0x08, 0xFE, 0x21, 0x08, 0x40, 0xE1,
-	0x69, 0x08, 0x70, 0x04, 0x49, 0xC0, 0x31, 0x0A,
-	0x68, 0x12, 0x0A, 0x12, 0x02, 0x02, 0x43, 0x0A,
-	0x60, 0xFE, 0xBD, 0x00, 0x00, 0x00, 0x00, 0x11,
-	0x40, 0x78, 0x01, 0x00, 0x20, 0x2C, 0xE1, 0x00,
-	0x00, 0x49, 0xC2, 0x00, 0x00, 0x6D, 0x01, 0x00,
-	0x20, 0x6E, 0x01, 0x00, 0x20, 0xE8, 0xDF, 0x00,
-	0x00, 0x54, 0xE0, 0x00, 0x00, 0xC4, 0x04, 0x00,
-	0x20, 0x0F, 0x0F, 0x00, 0x00, 0x5D, 0xBC, 0x00,
-	0x00, 0xEF, 0xBB, 0x00, 0x00,
-	0x00, 0x01, 0x8B, 0x00, 0x80, 0x70, 0x47, 0x10,
-	0xB5, 0xFD, 0xF7, 0xAE, 0xF9, 0x56, 0x48, 0x00,
-	0x68, 0xFA, 0xF7, 0x72, 0xFD, 0xFB, 0xF7, 0xAA,
-	0xF9, 0x54, 0x49, 0x01, 0x20, 0x08, 0x70, 0x48,
-	0x70, 0x10, 0xBD, 0xF8, 0xB5, 0x51, 0x4E, 0x07,
-	0x46, 0x00, 0x24, 0x70, 0x78, 0x25, 0x46, 0x00,
-	0x28, 0x09, 0xD1, 0x4F, 0x49, 0x70, 0x68, 0x09,
-	0x6A, 0x38, 0x1A, 0x88, 0x42, 0x48, 0xD9, 0xFD,
-	0xF7, 0xF7, 0xF9, 0x00, 0x28, 0x44, 0xD1, 0x00,
-	0x20, 0x77, 0x60, 0x70, 0x70, 0x49, 0x48, 0x86,
-	0x6A, 0x40, 0x30, 0x07, 0x6A, 0x02, 0x2F, 0x01,
-	0xD0, 0x03, 0x2F, 0x1A, 0xD1, 0x44, 0x4A, 0x00,
-	0x20, 0x40, 0x32, 0x0C, 0xE0, 0x44, 0x49, 0x43,
-	0x00, 0xC9, 0x5E, 0x1C, 0x23, 0xD3, 0x5E, 0x99,
-	0x42, 0x03, 0xDC, 0x1E, 0x23, 0xD3, 0x5E, 0x99,
-	0x42, 0x00, 0xDA, 0x64, 0x1C, 0x40, 0x1C, 0xB0,
-	0x42, 0xF0, 0xD3, 0x00, 0x2C,
-	0x00, 0x01, 0x8C, 0x00, 0x80, 0x05, 0xD0, 0xFF,
-	0xF7, 0xEC, 0xFE, 0x3C, 0x49, 0x08, 0x70, 0xFB,
-	0xF7, 0x6D, 0xF9, 0x01, 0x2F, 0x01, 0xD0, 0x03,
-	0x2F, 0x1A, 0xD1, 0x35, 0x4A, 0x00, 0x20, 0x38,
-	0x4B, 0x60, 0x32, 0x0B, 0xE0, 0x41, 0x00, 0x00,
-	0x24, 0x59, 0x5E, 0x14, 0x5F, 0xA1, 0x42, 0x03,
-	0xDC, 0x02, 0x24, 0x14, 0x5F, 0xA1, 0x42, 0x00,
-	0xDA, 0x6D, 0x1C, 0x40, 0x1C, 0xB0, 0x42, 0xF1,
-	0xD3, 0x00, 0x2D, 0x05, 0xD0, 0xFF, 0xF7, 0xDD,
-	0xFE, 0x2E, 0x49, 0x08, 0x70, 0xFB, 0xF7, 0x4E,
-	0xF9, 0xF8, 0xBD, 0xF1, 0xB5, 0x82, 0xB0, 0xFD,
-	0xF7, 0xC1, 0xF9, 0x23, 0x4E, 0x23, 0x4F, 0x01,
-	0x25, 0x01, 0x90, 0x62, 0xB6, 0x38, 0x78, 0x01,
-	0x28, 0x14, 0xD0, 0x02, 0x28, 0x1D, 0xD0, 0x03,
-	0x28, 0x36, 0xD1, 0x30, 0x68, 0xFA, 0xF7, 0x86,
-	0xFF, 0xFB, 0xF7, 0xAE, 0xF9, 0xFD, 0xF7, 0x38,
-	0xF9, 0x1B, 0x48, 0x3D, 0x70,
-	0x00, 0x01, 0x8D, 0x00, 0x80, 0xC0, 0x69, 0x01,
-	0x28, 0x02, 0xD1, 0x02, 0x98, 0xFF, 0xF7, 0x89,
-	0xFF, 0x00, 0x24, 0x14, 0xE0, 0x30, 0x68, 0xFA,
-	0xF7, 0xEF, 0xFC, 0xF9, 0xF7, 0xCF, 0xFF, 0xFA,
-	0xF7, 0x21, 0xFB, 0x02, 0x20, 0x38, 0x70, 0x2C,
-	0x46, 0x09, 0xE0, 0x01, 0x24, 0xFA, 0xF7, 0x93,
-	0xFB, 0x01, 0x28, 0x04, 0xD1, 0xF9, 0xF7, 0x88,
-	0xFD, 0x03, 0x20, 0x38, 0x70, 0xC4, 0x07, 0x72,
-	0xB6, 0xE0, 0x07, 0x05, 0xD0, 0xFA, 0xF7, 0x87,
-	0xFB, 0x01, 0x28, 0x01, 0xD1, 0xC0, 0x07, 0x04,
-	0x43, 0x00, 0x2C, 0xC6, 0xDB, 0x01, 0x98, 0xC0,
-	0xB2, 0xFD, 0xF7, 0x84, 0xF9, 0x20, 0x46, 0xFE,
-	0xBD, 0xF9, 0xF7, 0x8E, 0xFD, 0x3D, 0x70, 0xD3,
-	0xE7, 0x7C, 0x02, 0x00, 0x20, 0x40, 0x03, 0x00,
-	0x20, 0x78, 0xDC, 0x00, 0x00, 0x88, 0xDF, 0x00,
-	0x00, 0x1C, 0x02, 0x00, 0x20, 0x39, 0x03, 0x00,
-	0x20, 0x24, 0x02, 0x00, 0x20,
-	0x00, 0x01, 0x8E, 0x00, 0x80, 0x3A, 0x03, 0x00,
-	0x20, 0x0C, 0x49, 0xCA, 0x68, 0x03, 0x23, 0x1B,
-	0x02, 0x9A, 0x43, 0x00, 0x02, 0x02, 0x43, 0xCA,
-	0x60, 0x70, 0x47, 0x08, 0x49, 0x4A, 0x69, 0x0F,
-	0x23, 0x1B, 0x04, 0x9A, 0x43, 0x00, 0x04, 0x02,
-	0x43, 0x4A, 0x61, 0x70, 0x47, 0x03, 0x49, 0x8A,
-	0x69, 0x10, 0x23, 0x9A, 0x43, 0x00, 0x01, 0x02,
-	0x43, 0x8A, 0x61, 0x70, 0x47, 0x00, 0x00, 0x14,
-	0x40, 0x10, 0xB5, 0x02, 0x78, 0x2B, 0x49, 0x2C,
-	0x4C, 0x40, 0x78, 0x01, 0x2A, 0x18, 0xD1, 0x40,
-	0x00, 0x08, 0x62, 0x48, 0x69, 0x30, 0x22, 0x90,
-	0x43, 0x02, 0x22, 0x10, 0x43, 0x48, 0x61, 0x01,
-	0x20, 0x00, 0xF0, 0xB6, 0xF8, 0x01, 0x20, 0x00,
-	0xF0, 0x9F, 0xF8, 0x04, 0x20, 0x00, 0xF0, 0xB9,
-	0xF8, 0x04, 0x20, 0x00, 0xF0, 0xA2, 0xF8, 0x20,
-	0x68, 0x80, 0x08, 0x80, 0x00, 0x40, 0x1C, 0x15,
-	0xE0, 0x4A, 0x69, 0x32, 0x23,
-	0x00, 0x01, 0x8F, 0x00, 0x80, 0x9A, 0x43, 0x00,
-	0x01, 0x02, 0x43, 0x4A, 0x61, 0x01, 0x20, 0x00,
-	0xF0, 0xA8, 0xF8, 0x01, 0x20, 0x00, 0xF0, 0x91,
-	0xF8, 0x06, 0x20, 0x00, 0xF0, 0xB7, 0xF8, 0x01,
-	0x20, 0x00, 0xF0, 0xA8, 0xF8, 0x20, 0x68, 0x80,
-	0x08, 0x80, 0x00, 0x80, 0x1C, 0x20, 0x60, 0x10,
-	0xBD, 0x10, 0xB5, 0x10, 0x48, 0x41, 0x69, 0x41,
-	0x61, 0x02, 0x21, 0x41, 0x62, 0x00, 0x21, 0xC1,
-	0x62, 0x81, 0x62, 0xFF, 0x21, 0xC1, 0x60, 0x01,
-	0x21, 0x01, 0x61, 0x03, 0x20, 0xF6, 0xF7, 0x23,
-	0xFF, 0x03, 0x21, 0x08, 0x46, 0xF6, 0xF7, 0x08,
-	0xFF, 0x08, 0x49, 0x03, 0x20, 0xF6, 0xF7, 0xFA,
-	0xFE, 0x03, 0x20, 0xF6, 0xF7, 0x11, 0xFF, 0x10,
-	0xBD, 0x05, 0x4A, 0x80, 0x00, 0x80, 0x18, 0x01,
-	0x60, 0x70, 0x47, 0xFE, 0xE7, 0x00, 0x00, 0x12,
-	0x40, 0x00, 0x20, 0x14, 0x40, 0x41, 0xC8, 0x00,
-	0x00, 0x00, 0x10, 0x12, 0x40,
-	0x00, 0x01, 0x90, 0x00, 0x80, 0x0E, 0x4A, 0x11,
-	0x68, 0xEF, 0x23, 0xC0, 0x07, 0x19, 0x40, 0xC0,
-	0x0E, 0x08, 0x43, 0x10, 0x60, 0x70, 0x47, 0x0A,
-	0x49, 0x8A, 0x68, 0x07, 0x23, 0x1B, 0x03, 0x9A,
-	0x43, 0x00, 0x03, 0x02, 0x43, 0x8A, 0x60, 0x70,
-	0x47, 0x05, 0x48, 0x40, 0x68, 0xC0, 0x06, 0xC0,
-	0x0F, 0x70, 0x47, 0x03, 0x49, 0x08, 0x69, 0x10,
-	0x22, 0x10, 0x40, 0x08, 0x61, 0x00, 0x09, 0x70,
-	0x47, 0x00, 0x00, 0x14, 0x40, 0x70, 0xB5, 0x15,
-	0x49, 0xC8, 0x68, 0x15, 0x4D, 0xC8, 0x60, 0x09,
-	0x69, 0x14, 0x4C, 0x01, 0x40, 0x29, 0x60, 0x88,
-	0x07, 0x01, 0xD5, 0x20, 0x68, 0x80, 0x47, 0x28,
-	0x68, 0x40, 0x07, 0x01, 0xD5, 0x60, 0x68, 0x80,
-	0x47, 0x28, 0x68, 0x00, 0x07, 0x01, 0xD5, 0xA0,
-	0x68, 0x80, 0x47, 0x28, 0x68, 0xC0, 0x06, 0x01,
-	0xD5, 0xE0, 0x68, 0x80, 0x47, 0x28, 0x68, 0x80,
-	0x06, 0x01, 0xD5, 0x20, 0x69,
-	0x00, 0x01, 0x91, 0x00, 0x80, 0x80, 0x47, 0x28,
-	0x68, 0x40, 0x06, 0x01, 0xD5, 0x60, 0x69, 0x80,
-	0x47, 0x28, 0x68, 0x00, 0x06, 0x01, 0xD5, 0xA0,
-	0x69, 0x80, 0x47, 0x70, 0xBD, 0x00, 0x00, 0x12,
-	0x40, 0x48, 0x03, 0x00, 0x20, 0x0C, 0xD0, 0x00,
-	0x00, 0x08, 0x4A, 0x11, 0x68, 0xFD, 0x23, 0xC0,
-	0x07, 0x19, 0x40, 0x80, 0x0F, 0x08, 0x43, 0x10,
-	0x60, 0x70, 0x47, 0x04, 0x49, 0x8A, 0x68, 0x38,
-	0x23, 0x9A, 0x43, 0xC0, 0x00, 0x02, 0x43, 0x8A,
-	0x60, 0x70, 0x47, 0x00, 0x00, 0x00, 0x00, 0x14,
-	0x40, 0x07, 0x4A, 0x11, 0x68, 0xFE, 0x23, 0xC0,
-	0x07, 0x19, 0x40, 0xC0, 0x0F, 0x08, 0x43, 0x10,
-	0x60, 0x70, 0x47, 0x03, 0x49, 0x8A, 0x68, 0xD2,
-	0x08, 0xD2, 0x00, 0x02, 0x43, 0x8A, 0x60, 0x70,
-	0x47, 0x00, 0x00, 0x14, 0x40, 0x04, 0x49, 0x8A,
-	0x68, 0x07, 0x23, 0x5B, 0x02, 0x9A, 0x43, 0x40,
-	0x02, 0x02, 0x43, 0x8A, 0x60,
-	0x00, 0x01, 0x92, 0x00, 0x80, 0x70, 0x47, 0x00,
-	0x00, 0x00, 0x00, 0x14, 0x40, 0x04, 0x49, 0x8A,
-	0x68, 0xFF, 0x23, 0xC1, 0x33, 0x9A, 0x43, 0x80,
-	0x01, 0x02, 0x43, 0x8A, 0x60, 0x70, 0x47, 0x00,
-	0x00, 0x00, 0x00, 0x14, 0x40, 0xF8, 0xB5, 0x04,
-	0x2A, 0x2C, 0xD3, 0x83, 0x07, 0x12, 0xD0, 0x0B,
-	0x78, 0x49, 0x1C, 0x03, 0x70, 0x40, 0x1C, 0x52,
-	0x1E, 0x83, 0x07, 0x0B, 0xD0, 0x0B, 0x78, 0x49,
-	0x1C, 0x03, 0x70, 0x40, 0x1C, 0x52, 0x1E, 0x83,
-	0x07, 0x04, 0xD0, 0x0B, 0x78, 0x49, 0x1C, 0x03,
-	0x70, 0x40, 0x1C, 0x52, 0x1E, 0x8B, 0x07, 0x9B,
-	0x0F, 0x02, 0xD1, 0xF4, 0xF7, 0xED, 0xFC, 0xF8,
-	0xBD, 0xC9, 0x1A, 0xDE, 0x00, 0x20, 0x23, 0x9D,
-	0x1B, 0x08, 0xC9, 0x07, 0xE0, 0xF3, 0x40, 0x1C,
-	0x46, 0x08, 0xC9, 0x1F, 0x46, 0xAF, 0x40, 0x27,
-	0x43, 0x80, 0xC0, 0x12, 0x1F, 0x04, 0x2A, 0xF5,
-	0xD2, 0xEB, 0x08, 0xC9, 0x1A,
-	0x00, 0x01, 0x93, 0x00, 0x80, 0x52, 0x1E, 0xEA,
-	0xD4, 0x0B, 0x78, 0x49, 0x1C, 0x03, 0x70, 0x40,
-	0x1C, 0x52, 0x1E, 0xE4, 0xD4, 0x0B, 0x78, 0x49,
-	0x1C, 0x03, 0x70, 0x40, 0x1C, 0x52, 0x1E, 0xDE,
-	0xD4, 0x09, 0x78, 0x01, 0x70, 0xF8, 0xBD, 0x01,
-	0xE0, 0x04, 0xC0, 0x09, 0x1F, 0x04, 0x29, 0xFB,
-	0xD2, 0x8B, 0x07, 0x01, 0xD5, 0x02, 0x80, 0x80,
-	0x1C, 0xC9, 0x07, 0x00, 0xD0, 0x02, 0x70, 0x70,
-	0x47, 0x00, 0x29, 0x0B, 0xD0, 0xC3, 0x07, 0x02,
-	0xD0, 0x02, 0x70, 0x40, 0x1C, 0x49, 0x1E, 0x02,
-	0x29, 0x04, 0xD3, 0x83, 0x07, 0x02, 0xD5, 0x02,
-	0x80, 0x80, 0x1C, 0x89, 0x1E, 0xE3, 0xE7, 0x00,
-	0x22, 0xEE, 0xE7, 0x00, 0x22, 0xDF, 0xE7, 0x82,
-	0x08, 0x81, 0x07, 0x92, 0x00, 0xC9, 0x0E, 0x0C,
-	0xCA, 0xC0, 0x78, 0xCA, 0x40, 0x49, 0x42, 0x20,
-	0x31, 0x8B, 0x40, 0x1A, 0x43, 0x11, 0x02, 0x09,
-	0x0A, 0x00, 0x06, 0x08, 0x43,
-	0x00, 0x01, 0x94, 0x00, 0x80, 0x70, 0x47, 0x00,
-	0x22, 0x03, 0x09, 0x8B, 0x42, 0x2C, 0xD3, 0x03,
-	0x0A, 0x8B, 0x42, 0x11, 0xD3, 0x00, 0x23, 0x9C,
-	0x46, 0x4E, 0xE0, 0x03, 0x46, 0x0B, 0x43, 0x3C,
-	0xD4, 0x00, 0x22, 0x43, 0x08, 0x8B, 0x42, 0x31,
-	0xD3, 0x03, 0x09, 0x8B, 0x42, 0x1C, 0xD3, 0x03,
-	0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x94, 0x46, 0x3F,
-	0xE0, 0xC3, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0xCB,
-	0x01, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x09, 0x8B,
-	0x42, 0x01, 0xD3, 0x8B, 0x01, 0xC0, 0x1A, 0x52,
-	0x41, 0x43, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x4B,
-	0x01, 0xC0, 0x1A, 0x52, 0x41, 0x03, 0x09, 0x8B,
-	0x42, 0x01, 0xD3, 0x0B, 0x01, 0xC0, 0x1A, 0x52,
-	0x41, 0xC3, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0xCB,
-	0x00, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x08, 0x8B,
-	0x42, 0x01, 0xD3, 0x8B, 0x00, 0xC0, 0x1A, 0x52,
-	0x41, 0x43, 0x08, 0x8B, 0x42,
-	0x00, 0x01, 0x95, 0x00, 0x80, 0x01, 0xD3, 0x4B,
-	0x00, 0xC0, 0x1A, 0x52, 0x41, 0x41, 0x1A, 0x00,
-	0xD2, 0x01, 0x46, 0x52, 0x41, 0x10, 0x46, 0x70,
-	0x47, 0x5D, 0xE0, 0xCA, 0x0F, 0x00, 0xD0, 0x49,
-	0x42, 0x03, 0x10, 0x00, 0xD3, 0x40, 0x42, 0x53,
-	0x40, 0x00, 0x22, 0x9C, 0x46, 0x03, 0x09, 0x8B,
-	0x42, 0x2D, 0xD3, 0x03, 0x0A, 0x8B, 0x42, 0x12,
-	0xD3, 0xFC, 0x22, 0x89, 0x01, 0x12, 0xBA, 0x03,
-	0x0A, 0x8B, 0x42, 0x0C, 0xD3, 0x89, 0x01, 0x92,
-	0x11, 0x8B, 0x42, 0x08, 0xD3, 0x89, 0x01, 0x92,
-	0x11, 0x8B, 0x42, 0x04, 0xD3, 0x89, 0x01, 0x3A,
-	0xD0, 0x92, 0x11, 0x00, 0xE0, 0x89, 0x09, 0xC3,
-	0x09, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x01, 0xC0,
-	0x1A, 0x52, 0x41, 0x83, 0x09, 0x8B, 0x42, 0x01,
-	0xD3, 0x8B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0x43,
-	0x09, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x01, 0xC0,
-	0x1A, 0x52, 0x41, 0x03, 0x09,
-	0x00, 0x01, 0x96, 0x00, 0x80, 0x8B, 0x42, 0x01,
-	0xD3, 0x0B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0xC3,
-	0x08, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x00, 0xC0,
-	0x1A, 0x52, 0x41, 0x83, 0x08, 0x8B, 0x42, 0x01,
-	0xD3, 0x8B, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0xD9,
-	0xD2, 0x43, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x4B,
-	0x00, 0xC0, 0x1A, 0x52, 0x41, 0x41, 0x1A, 0x00,
-	0xD2, 0x01, 0x46, 0x63, 0x46, 0x52, 0x41, 0x5B,
-	0x10, 0x10, 0x46, 0x01, 0xD3, 0x40, 0x42, 0x00,
-	0x2B, 0x00, 0xD5, 0x49, 0x42, 0x70, 0x47, 0x63,
-	0x46, 0x5B, 0x10, 0x00, 0xD3, 0x40, 0x42, 0x01,
-	0xB5, 0x00, 0x20, 0xC0, 0x46, 0xC0, 0x46, 0x02,
-	0xBD, 0x04, 0x46, 0xC0, 0x46, 0xC0, 0x46, 0x20,
-	0x46, 0xF4, 0xF7, 0xDA, 0xFB, 0x02, 0x48, 0x03,
-	0x49, 0xAB, 0xBE, 0x70, 0x47, 0x0D, 0x00, 0x00,
-	0x00, 0x18, 0x00, 0x00, 0x00, 0x26, 0x00, 0x02,
-	0x00, 0x70, 0x47, 0x70, 0xB5,
-	0x00, 0x01, 0x97, 0x00, 0x80, 0x8C, 0x18, 0x05,
-	0x78, 0x40, 0x1C, 0x6B, 0x07, 0x5B, 0x0F, 0x01,
-	0xD1, 0x03, 0x78, 0x40, 0x1C, 0x2A, 0x11, 0x06,
-	0xD1, 0x02, 0x78, 0x40, 0x1C, 0x03, 0xE0, 0x06,
-	0x78, 0x40, 0x1C, 0x0E, 0x70, 0x49, 0x1C, 0x5B,
-	0x1E, 0xF9, 0xD1, 0x2B, 0x07, 0x06, 0xD4, 0x00,
-	0x23, 0x01, 0xE0, 0x0B, 0x70, 0x49, 0x1C, 0x52,
-	0x1E, 0xFB, 0xD5, 0x0A, 0xE0, 0x03, 0x78, 0x40,
-	0x1C, 0xCB, 0x1A, 0x92, 0x1C, 0x03, 0xE0, 0x1D,
-	0x78, 0x5B, 0x1C, 0x0D, 0x70, 0x49, 0x1C, 0x52,
-	0x1E, 0xF9, 0xD5, 0xA1, 0x42, 0xD7, 0xD3, 0x00,
-	0x20, 0x70, 0xBD, 0x30, 0xB4, 0x74, 0x46, 0x64,
-	0x1E, 0x25, 0x78, 0x64, 0x1C, 0xAB, 0x42, 0x00,
-	0xD2, 0x1D, 0x46, 0x63, 0x5D, 0x5B, 0x00, 0xE3,
-	0x18, 0x30, 0xBC, 0x18, 0x47, 0xFF, 0xFB, 0xED,
-	0xD5, 0xB5, 0x00, 0x31, 0x61, 0x8E, 0xB5, 0x00,
-	0x00, 0x02, 0x01, 0x00, 0x00,
-	0x00, 0x01, 0x98, 0x00, 0x80, 0x01, 0x60, 0x13,
-	0x40, 0x00, 0x30, 0x13, 0x40, 0x00, 0x04, 0x00,
-	0x40, 0x13, 0x40, 0x00, 0x02, 0xA5, 0x01, 0x02,
-	0x03, 0xFF, 0xFE, 0xFD, 0x5A, 0x54, 0x53, 0x47,
-	0x34, 0x20, 0x44, 0x46, 0x54, 0x74, 0x05, 0x00,
-	0x20, 0x31, 0x02, 0x00, 0x00, 0x8B, 0x0A, 0x00,
-	0x20, 0x31, 0x02, 0x00, 0x00, 0x64, 0x08, 0x00,
-	0x20, 0x31, 0x02, 0x00, 0x00, 0x6E, 0x07, 0x00,
-	0x20, 0x32, 0x01, 0x00, 0x00, 0x85, 0x0C, 0x00,
-	0x20, 0x31, 0x01, 0x00, 0x00, 0x5E, 0x0A, 0x00,
-	0x20, 0x31, 0x01, 0x00, 0x00, 0xC0, 0x0C, 0x00,
-	0x20, 0x32, 0x01, 0x00, 0x00, 0xCE, 0x0D, 0x00,
-	0x20, 0x31, 0x01, 0x00, 0x00, 0x74, 0x0D, 0x00,
-	0x20, 0x31, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03,
-	0xC1, 0x04, 0x00, 0x05, 0x10, 0x06, 0x00, 0x07,
-	0x32, 0x08, 0x00, 0x09, 0x34, 0x0A, 0x00, 0x0B,
-	0x41, 0x0C, 0x00, 0x0D, 0x61,
-	0x00, 0x01, 0x99, 0x00, 0x80, 0x0E, 0x00, 0x0F,
-	0x81, 0x10, 0x00, 0x11, 0x02, 0x12, 0x01, 0x13,
-	0x01, 0x18, 0x00, 0x19, 0x05, 0x1A, 0x82, 0x1B,
-	0x23, 0x22, 0x08, 0x2F, 0x02, 0x30, 0x03, 0x31,
-	0x01, 0x3E, 0x00, 0x3F, 0xFF, 0x41, 0x02, 0x42,
-	0x09, 0x49, 0x09, 0x4A, 0x00, 0x4B, 0x0E, 0x4C,
-	0x02, 0x4D, 0x0E, 0x4E, 0x04, 0x4F, 0x08, 0x50,
-	0x05, 0x51, 0x05, 0x52, 0xA5, 0x53, 0x02, 0x58,
-	0x01, 0x59, 0x00, 0x5A, 0x08, 0x5B, 0x06, 0x5C,
-	0x08, 0x5D, 0x07, 0x5E, 0x08, 0x5F, 0x08, 0x60,
-	0x08, 0x4A, 0x01, 0x00, 0x00, 0xD8, 0x00, 0x00,
-	0x20, 0x4B, 0x01, 0x00, 0x00, 0xDD, 0x00, 0x00,
-	0x20, 0x4C, 0x02, 0x00, 0x00, 0xE4, 0x00, 0x00,
-	0x20, 0x4D, 0x01, 0x00, 0x00, 0xD6, 0x00, 0x00,
-	0x20, 0x4E, 0x02, 0x00, 0x00, 0xE2, 0x00, 0x00,
-	0x20, 0x4F, 0x01, 0x00, 0x00, 0xD7, 0x00, 0x00,
-	0x20, 0x50, 0x01, 0x00, 0x00,
-	0x00, 0x01, 0x9A, 0x00, 0x80, 0xD9, 0x00, 0x00,
-	0x20, 0x51, 0x01, 0x00, 0x00, 0x33, 0x02, 0x00,
-	0x20, 0x52, 0x02, 0x00, 0x00, 0x66, 0x01, 0x00,
-	0x20, 0x80, 0x01, 0x00, 0x00, 0x90, 0x00, 0x00,
-	0x20, 0x28, 0x00, 0x2C, 0x00, 0x30, 0x00, 0x34,
-	0x00, 0x38, 0x00, 0x3C, 0x00, 0x40, 0x00, 0x44,
-	0x00, 0x4C, 0x00, 0x54, 0x00, 0x5C, 0x00, 0x64,
-	0x00, 0x70, 0x00, 0x7C, 0x00, 0x88, 0x00, 0x98,
-	0x00, 0xA8, 0x00, 0xBC, 0x00, 0xD0, 0x00, 0xE8,
-	0x00, 0x00, 0x01, 0x1C, 0x01, 0x3C, 0x01, 0x60,
-	0x01, 0x88, 0x01, 0xB4, 0x01, 0xE8, 0x01, 0x20,
-	0x02, 0x60, 0x02, 0xA8, 0x02, 0xF8, 0x02, 0x50,
-	0x03, 0xC6, 0x08, 0x27, 0x09, 0x58, 0x09, 0x89,
-	0x09, 0xEB, 0x09, 0x4C, 0x0A, 0xAE, 0x0A, 0x10,
-	0x0B, 0x71, 0x0B, 0xD3, 0x0B, 0x35, 0x0C, 0x96,
-	0x0C, 0xF8, 0x0C, 0x59, 0x0D, 0xBB, 0x0D, 0x1D,
-	0x0E, 0x19, 0x1B, 0x1C, 0x1D,
-	0x00, 0x01, 0x9B, 0x00, 0x80, 0x1E, 0x1F, 0x20,
-	0x21, 0x22, 0x23, 0x25, 0x26, 0x27, 0x28, 0x29,
-	0x2A, 0x2B, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33,
-	0x34, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
-	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
-	0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
-	0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
-	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
-	0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
-	0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
-	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
-	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x6F, 0x53,
-	0xB2, 0x01, 0x6F, 0x57, 0xB2, 0x01, 0x6F, 0x4B,
-	0xB2, 0x01, 0x6F, 0x4B, 0xB8, 0x01, 0x79, 0x43,
-	0xB2, 0x01, 0x68, 0x43, 0xB2, 0x00, 0x01, 0x02,
-	0x02, 0x03, 0x03, 0x04, 0x04, 0x00, 0x01, 0x00,
-	0x00, 0x00, 0x01, 0x00, 0x00,
-	0x00, 0x01, 0x9C, 0x00, 0x80, 0x80, 0x00, 0x00,
-	0x00, 0x55, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
-	0x00, 0x33, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00,
-	0x00, 0x24, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
-	0x00, 0xEB, 0x86, 0x00, 0x00, 0x43, 0x87, 0x00,
-	0x00, 0xA7, 0x88, 0x00, 0x00, 0xDB, 0x88, 0x00,
-	0x00, 0xFF, 0x88, 0x00, 0x00, 0x8B, 0x87, 0x00,
-	0x00, 0xC7, 0x89, 0x00, 0x00, 0x8B, 0x8C, 0x00,
-	0x00, 0x57, 0x8D, 0x00, 0x00, 0x0D, 0x8E, 0x00,
-	0x00, 0x95, 0x8E, 0x00, 0x00, 0xEB, 0x8E, 0x00,
-	0x00, 0x39, 0x8F, 0x00, 0x00, 0x1F, 0x90, 0x00,
-	0x00, 0x83, 0x90, 0x00, 0x00, 0xE5, 0x90, 0x00,
-	0x00, 0x2D, 0x91, 0x00, 0x00, 0x81, 0x91, 0x00,
-	0x00, 0xC1, 0x92, 0x00, 0x00, 0x33, 0x93, 0x00,
-	0x00, 0x5B, 0x93, 0x00, 0x00, 0xE1, 0x93, 0x00,
-	0x00, 0xBD, 0x94, 0x00, 0x00, 0xEA, 0x03, 0xEA,
-	0x03, 0xEA, 0x03, 0xEA, 0x03,
-	0x00, 0x01, 0x9D, 0x00, 0x80, 0x6A, 0x03, 0x6A,
-	0x03, 0x6A, 0x03, 0x6A, 0x03, 0x0A, 0x03, 0x00,
-	0x00, 0x0A, 0x03, 0x00, 0x00, 0x0A, 0x01, 0x0A,
-	0x01, 0x0A, 0x01, 0x0A, 0x01, 0x0A, 0x00, 0x00,
-	0x00, 0x0A, 0x00, 0x0A, 0x00, 0x64, 0x03, 0x64,
-	0x03, 0x64, 0x03, 0x64, 0x03, 0x04, 0x03, 0x04,
-	0x03, 0x04, 0x03, 0x04, 0x03, 0x04, 0x01, 0x04,
-	0x01, 0x04, 0x01, 0x04, 0x01, 0x04, 0x00, 0x04,
-	0x00, 0x04, 0x00, 0x04, 0x00, 0x62, 0x03, 0x62,
-	0x03, 0x62, 0x03, 0x62, 0x03, 0x02, 0x03, 0x02,
-	0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x01, 0x02,
-	0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x00, 0x02,
-	0x00, 0x02, 0x00, 0x02, 0x00, 0x0A, 0x03, 0x0A,
-	0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x03, 0x0A,
-	0x00, 0x0A, 0x00, 0x0A, 0x03, 0x0A, 0x03, 0xEA,
-	0x03, 0x0A, 0x03, 0x00, 0x00, 0x02, 0x00, 0x02,
-	0x03, 0x6A, 0x03, 0x0A, 0x03,
-	0x00, 0x01, 0x9E, 0x00, 0x80, 0x0A, 0x03, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6A,
-	0x03, 0xEA, 0x03, 0xEA, 0x03, 0x02, 0x00, 0x04,
-	0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02,
-	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
-	0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00,
-	0x00, 0x55, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
-	0x00, 0x33, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00,
-	0x00, 0x24, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
-	0x00, 0x00, 0x01, 0x00, 0x00, 0xB9, 0x00, 0x00,
-	0x00, 0x86, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00,
-	0x00, 0x26, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00,
-	0x00, 0x27, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00,
-	0x00, 0x52, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0x9F, 0x00, 0x80, 0x94, 0x00, 0x00,
-	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
-	0x00, 0x07, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00,
-	0x00, 0x0C, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00,
-	0x00, 0x10, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00,
-	0x00, 0x14, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00,
-	0x00, 0x17, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
-	0x00, 0x18, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00,
-	0x00, 0x19, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00,
-	0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00,
-	0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
-	0x00, 0x17, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00,
-	0x00, 0x14, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00,
-	0x00, 0x10, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00,
-	0x00, 0x0C, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00,
-	0x00, 0x07, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xA0, 0x00, 0x80, 0x05, 0x00, 0x00,
-	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0xEF, 0xC7, 0x00, 0x00, 0xEF, 0xC7, 0x00,
-	0x00, 0xEF, 0xC7, 0x00, 0x00, 0xEF, 0xC7, 0x00,
-	0x00, 0xEF, 0xC7, 0x00, 0x00, 0xEF, 0xC7, 0x00,
-	0x00, 0xEF, 0xC7, 0x00, 0x00, 0x58, 0xD0, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00,
-	0x00, 0xC4, 0x12, 0x00, 0x00, 0xD8, 0xD0, 0x00,
-	0x00, 0x84, 0x00, 0x00, 0x20, 0xC8, 0x02, 0x00,
-	0x00, 0x7E, 0xCB, 0x00, 0x00, 0x3C, 0xD1, 0x00,
-	0x00, 0x4C, 0x03, 0x00, 0x20, 0x34, 0x13, 0x00,
-	0x00, 0xE0, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xA1, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x03, 0x2B,
-	0x01, 0x24, 0x39, 0x2C, 0x46, 0x51, 0x25, 0x02,
-	0xA0, 0x8C, 0x6C, 0x50, 0x46, 0x01, 0x45, 0x01,
-	0x23, 0x0B, 0x2E, 0xFF, 0x07, 0x02, 0x09, 0x21,
-	0x54, 0x0A, 0x1C, 0xFF, 0xAC, 0x05, 0x34, 0xD0,
-	0xF1, 0xFF, 0x0F, 0x4B, 0x49,
-	0x00, 0x01, 0xA2, 0x00, 0x80, 0x5F, 0x04, 0x01,
-	0x19, 0x99, 0xF1, 0x13, 0xC9, 0x07, 0x1B, 0x20,
-	0xCA, 0x04, 0x1A, 0xC8, 0x04, 0x1A, 0xF0, 0x04,
-	0x1A, 0xF1, 0x04, 0x1A, 0xEF, 0x04, 0x13, 0x17,
-	0x08, 0x1B, 0x20, 0x18, 0x04, 0x1A, 0x16, 0x04,
-	0x1A, 0x3E, 0x04, 0x1A, 0x3F, 0x04, 0x1A, 0x3D,
-	0x04, 0x03, 0x5A, 0x04, 0xDE, 0x5A, 0xFF, 0x01,
-	0x01, 0x64, 0x03, 0x76, 0x2C, 0xDD, 0xE3, 0x80,
-	0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xA3, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xA4, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xA5, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xA6, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xA7, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xA8, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xA9, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xAA, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xAB, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xAC, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xAD, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xAE, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xAF, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xB0, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xB1, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xB2, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xB3, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xB4, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xB5, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xB6, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xB7, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xB8, 0x00, 0x80, 0xFC, 0x05, 0xFC,
-	0x05, 0x4C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01,
-	0x30, 0xEC, 0x13, 0xB0, 0x1D, 0x10, 0x07, 0x00,
-	0x0A, 0x03, 0x00, 0x32, 0x00, 0xB8, 0x0B, 0x01,
-	0x00, 0x32, 0x08, 0xF4, 0x01, 0xF4, 0x01, 0x1E,
-	0x00, 0x00, 0x00, 0x88, 0x13, 0x96, 0x00, 0x96,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00,
-	0x00, 0x64, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xB9, 0x00, 0x80, 0x64, 0x00, 0x00,
-	0x00, 0x64, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
-	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x07, 0x00,
-	0x00, 0x32, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
-	0x00, 0xD8, 0xFF, 0xFF, 0xFF, 0x0A, 0x00, 0x00,
-	0x00, 0x8C, 0x00, 0x00, 0x00, 0xD8, 0xFF, 0xFF,
-	0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
-	0x00, 0xFA, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
-	0x00, 0xB8, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0xA0, 0x00, 0xC4, 0xFF, 0xA0, 0x00, 0xC4,
-	0xFF, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x02, 0x45,
-	0x2D, 0x0F, 0x02, 0x56, 0x2D, 0x0F, 0x02, 0x00,
-	0x00, 0x2A, 0x01, 0x12, 0x12,
-	0x00, 0x01, 0xBA, 0x00, 0x80, 0x12, 0x23, 0x23,
-	0x50, 0x02, 0x03, 0x02, 0x0A, 0x14, 0x02, 0x28,
-	0x00, 0x32, 0x1E, 0x1E, 0x00, 0xC8, 0x00, 0x14,
-	0x00, 0xC8, 0x00, 0x14, 0x00, 0xC8, 0x00, 0x14,
-	0x00, 0xF0, 0x28, 0x29, 0x30, 0x3F, 0x48, 0x49,
-	0x90, 0x9F, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00,
-	0x00, 0xF0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
-	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
-	0x00, 0xF0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
-	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
-	0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0xA0, 0x86, 0x01, 0x00, 0x02, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
-	0x00, 0x14, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
-	0x00, 0xFF, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xBB, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
-	0x00, 0x02, 0x4B, 0x0F, 0x0D, 0x0F, 0x00, 0x0F,
-	0x09, 0xE0, 0x01, 0x00, 0x00, 0x20, 0x03, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
-	0x00, 0x00, 0x01, 0x01, 0x02, 0x03, 0x03, 0x0A,
-	0x19, 0x20, 0x03, 0x50, 0x0E, 0x50, 0x0E, 0x02,
-	0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x32, 0x00, 0x01, 0x00, 0x00,
-	0x00, 0x0B, 0x00, 0x00, 0x00, 0x19, 0x00, 0x19,
-	0x00, 0x19, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x14, 0x00, 0x14, 0x00, 0x14, 0x00, 0x14,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xBC, 0x00, 0x80, 0x1A, 0x00, 0x00,
-	0x00, 0x37, 0x77, 0x00, 0x05, 0x00, 0x05, 0x00,
-	0x14, 0x00, 0x14, 0x00, 0x00, 0x37, 0x77, 0x00,
-	0x28, 0x00, 0x0F, 0x01, 0x14, 0x01, 0x14, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02,
-	0x14, 0x0B, 0x02, 0x02, 0x17, 0x02, 0x14, 0x50,
-	0x50, 0x50, 0x50, 0x50, 0x0E, 0x0C, 0x0C, 0x0C,
-	0x0C, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x01, 0x00,
-	0x00, 0x00, 0x00, 0xFF, 0x81, 0x03, 0x06, 0x00,
-	0x00, 0xFF, 0x00, 0xAF, 0xC0, 0xFF, 0xFF, 0xB0,
-	0x00, 0x22, 0x02, 0x7F, 0x81, 0x7F, 0x72, 0x01,
-	0x80, 0x06, 0x01, 0x48, 0x04, 0x43, 0x28, 0x3C,
-	0x28, 0x12, 0x01, 0x01, 0x00, 0x04, 0x01, 0x08,
-	0x10, 0x01, 0x04, 0x00, 0x00, 0x44, 0x01, 0x02,
-	0x80, 0x01, 0x01, 0x00, 0x00,
-	0x00, 0x01, 0xBD, 0x00, 0x80, 0x80, 0x00, 0x01,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
-	0x90, 0x80, 0x00, 0xFE, 0x0B, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x7A, 0xA0, 0x00,
-	0xD0, 0x00, 0x00, 0x00, 0x00, 0x05, 0x04, 0xFF,
-	0x81, 0x04, 0x0C, 0x00, 0x00, 0xFF, 0x02, 0xAF,
-	0xC0, 0xFF, 0xFF, 0xD0, 0x00, 0x22, 0x02, 0x7F,
-	0x81, 0x7F, 0x72, 0x01, 0x80, 0x01, 0x81, 0x40,
-	0x04, 0x31, 0x0F, 0x31, 0x0F, 0x12, 0x01, 0x01,
-	0x00, 0x04, 0x01, 0x08, 0x10, 0x01, 0x04, 0x00,
-	0x00, 0x44, 0x01, 0x02, 0x80, 0x01, 0x01, 0x00,
-	0x00, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0x01, 0x00, 0x90, 0x80, 0x00, 0xFE,
-	0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x3A, 0xA6, 0x00, 0xD0, 0x00, 0x00, 0x00,
-	0x00, 0x05, 0x04, 0xFF, 0x80, 0x03, 0x20, 0x00,
-	0x00, 0xAF, 0x08, 0xAF, 0xC0,
-	0x00, 0x01, 0xBE, 0x00, 0x80, 0xFF, 0xFF, 0xB0,
-	0x00, 0x22, 0x02, 0x7F, 0x81, 0x7F, 0x72, 0x01,
-	0x80, 0x01, 0x81, 0x40, 0x04, 0x96, 0x0F, 0x96,
-	0x0F, 0x12, 0x01, 0x01, 0x00, 0x04, 0x01, 0x08,
-	0x10, 0x01, 0x04, 0x00, 0x00, 0x44, 0x01, 0x02,
-	0x80, 0x01, 0x01, 0x00, 0x00, 0x80, 0x00, 0x01,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
-	0x90, 0x80, 0x00, 0xFE, 0x0B, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x3A, 0xA0, 0x00,
-	0xD0, 0x05, 0x04, 0xFF, 0x80, 0x03, 0x24, 0x00,
-	0x00, 0xFF, 0x00, 0xAF, 0xC0, 0xFF, 0xFF, 0xB0,
-	0x00, 0x22, 0x02, 0x7F, 0x81, 0x7F, 0x72, 0x01,
-	0x80, 0x06, 0x01, 0x48, 0x04, 0x31, 0x23, 0x31,
-	0x23, 0x12, 0x01, 0x01, 0x00, 0x04, 0x01, 0x08,
-	0x10, 0x01, 0x04, 0x00, 0x00, 0x44, 0x01, 0x02,
-	0x80, 0x01, 0x01, 0x00, 0x00, 0x80, 0x00, 0x01,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xBF, 0x00, 0x80, 0x01, 0x01, 0x00,
-	0x90, 0x80, 0x00, 0xFE, 0x0B, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x7A, 0xA0, 0x00,
-	0xD0, 0x03, 0x08, 0x00, 0x00, 0x00, 0x00, 0x30,
-	0x30, 0x40, 0x03, 0x07, 0x40, 0x15, 0x00, 0x00,
-	0x00, 0x0D, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00,
-	0x00, 0x11, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00,
-	0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
-	0x00, 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
-	0x00, 0x0A, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00,
-	0x00, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
-	0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
-	0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
-	0x00, 0x0F, 0x00, 0x01, 0x00, 0x0F, 0x0F, 0x32,
-	0x00, 0x04, 0x00, 0x04, 0x02, 0x01, 0x01, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xC0, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
-	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
-	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
-	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
-	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xC1, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0xCE, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00,
-	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
-	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x12, 0x13,
-	0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x22, 0x23,
-	0x24, 0x25, 0x38, 0x37, 0x36, 0x2D, 0x2C, 0x2B,
-	0x2A, 0x29, 0x28, 0x27, 0x3B, 0x3A, 0x39, 0x01,
-	0x02, 0x03, 0x04, 0x05, 0x0E, 0x0F, 0x10, 0x10,
-	0x27, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x01, 0xC2, 0x00, 0x80, 0x00, 0x00, 0x00,
-	0x00, 0x38, 0x2B, 0x38, 0x2B, 0x10, 0x10, 0x10,
-	0x10, 0x10, 0x10, 0x13, 0x13, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x1F, 0x00,
-	0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC,
-	0x03, 0xE0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x7E, 0x00, 0x06, 0x10, 0x00, 0x00, 0x01,
-	0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x0F, 0x0B,
-	0x0A, 0x09, 0x09, 0x0A, 0x0A, 0x0F, 0x0F, 0xBF,
-	0x00, 0x07, 0x10, 0x07, 0x08, 0x09, 0x0A, 0x0B,
-	0x0C, 0x00, 0x06, 0x00, 0x0B, 0x0B, 0x0B, 0x0A,
-	0x0B, 0x0B, 0x0F, 0x0A, 0x0F, 0xFF, 0x00, 0x08,
-	0x38, 0x21, 0x14, 0x13, 0x12, 0x1D, 0x1E, 0x1F,
-	0x20, 0x00, 0x0B, 0x0B, 0x0B, 0x0B, 0x0A, 0x0A,
-	0x09, 0x0A, 0x0F, 0x8F, 0x00, 0x05, 0x10, 0x15,
-	0x19, 0x18, 0x17, 0x00, 0x00, 0x00, 0x16, 0x00,
-	0x0B, 0x0B, 0x0B, 0x0B, 0x0F,
-	0x00, 0x01, 0xC3, 0x00, 0x80, 0x0F, 0x0F, 0x0B,
-	0x0F, 0xFF, 0x00, 0x08, 0x10, 0x0D, 0x1A, 0x1B,
-	0x1C, 0x11, 0x10, 0x0F, 0x0E, 0x00, 0x0A, 0x0A,
-	0x0A, 0x0A, 0x0B, 0x0B, 0x0A, 0x0A, 0x0F, 0x81,
-	0x00, 0x02, 0x14, 0x22, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x23, 0x00, 0x0B, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x0B, 0x00, 0x11, 0x00, 0x02,
-	0x14, 0x23, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00,
-	0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x09, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0xC4, 0x12, 0x00, 0x00,
-	0x00, 0x01, 0xC4, 0x00, 0x80, 0x24, 0x00, 0x7E,
-	0x00, 0x02, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x43, 0x59, 0x49, 0x4C, 0x06, 0x01, 0x00, 0x03,
-	0x02, 0x0D, 0x15, 0x01, 0xE0, 0x03, 0x20, 0x01,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0xFE, 0xE9,
-	0x00, 0x01, 0xFF, 0x00, 0x80, 0x3C, 0x00, 0x3C,
-	0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0xCA, 0x95,
-	0xA2, 0x81, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x48, 0xBF, 0x00, 0x00, 0x0B, 0x25, 0x13,
-	0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0xC0, 0xED,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00,
-};
+static u8 cyttsp4_ver[] = {
+	0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x17, 0xC4
+};
+static u8 cyttsp4_img[] = {
+	0x00, 0x00, 0x24, 0x00, 0x80, 0x00, 0x20, 0x00, 0x20, 0x25, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 
+	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 
+	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 
+	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 
+	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 
+	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 
+	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 
+	0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 0x00, 0xDD, 0x13, 0x00, 
+	0x00, 0xDD, 0x13, 0x00, 0x00, 
+	0x00, 0x00, 0x25, 0x00, 0x80, 0x00, 0xF0, 0x02, 0xF8, 0x00, 0xF0, 0x40, 0xF8, 0x0C, 0xA0, 0x30, 
+	0xC8, 0x08, 0x38, 0x24, 0x18, 0x2D, 0x18, 0xA2, 0x46, 0x67, 0x1E, 0xAB, 0x46, 0x54, 0x46, 0x5D, 
+	0x46, 0xAC, 0x42, 0x01, 0xD1, 0x00, 0xF0, 0x32, 0xF8, 0x7E, 0x46, 0x0F, 0x3E, 0x0F, 0xCC, 0xB6, 
+	0x46, 0x01, 0x26, 0x33, 0x42, 0x00, 0xD0, 0xFB, 0x1A, 0xA2, 0x46, 0xAB, 0x46, 0x33, 0x43, 0x18, 
+	0x47, 0xFC, 0xC7, 0x00, 0x00, 0x2C, 0xC8, 0x00, 0x00, 0x10, 0x3A, 0x02, 0xD3, 0x78, 0xC8, 0x78, 
+	0xC1, 0xFA, 0xD8, 0x52, 0x07, 0x01, 0xD3, 0x30, 0xC8, 0x30, 0xC1, 0x01, 0xD5, 0x04, 0x68, 0x0C, 
+	0x60, 0x70, 0x47, 0x00, 0x00, 0x00, 0x23, 0x00, 0x24, 0x00, 0x25, 0x00, 0x26, 0x10, 0x3A, 0x01, 
+	0xD3, 0x78, 0xC1, 0xFB, 0xD8, 0x52, 0x07, 0x00, 0xD3, 0x30, 0xC1, 0x00, 0xD5, 0x0B, 0x60, 0x70, 
+	0x47, 0x1F, 0xB5, 0xC0, 0x46, 
+	0x00, 0x00, 0x26, 0x00, 0x80, 0xC0, 0x46, 0x1F, 0xBD, 0x10, 0xB5, 0x10, 0xBD, 0x03, 0x48, 0x85, 
+	0x46, 0xFF, 0xF7, 0xF6, 0xFF, 0x00, 0xF0, 0x7D, 0xF8, 0x0C, 0xF0, 0x52, 0xF9, 0x00, 0x20, 0x00, 
+	0x20, 0xFF, 0xF7, 0xF2, 0xFF, 0x0C, 0xF0, 0x52, 0xF9, 0x01, 0x4B, 0x9D, 0x46, 0x01, 0x48, 0x00, 
+	0x47, 0x00, 0x20, 0x00, 0x20, 0x81, 0x12, 0x00, 0x00, 0x70, 0xB5, 0x05, 0x46, 0x0C, 0x46, 0x16, 
+	0x46, 0x02, 0xE0, 0x0F, 0xCC, 0x0F, 0xC5, 0x10, 0x3E, 0x10, 0x2E, 0xFA, 0xD2, 0x08, 0x2E, 0x02, 
+	0xD3, 0x03, 0xCC, 0x03, 0xC5, 0x08, 0x3E, 0x04, 0x2E, 0x07, 0xD3, 0x01, 0xCC, 0x01, 0xC5, 0x36, 
+	0x1F, 0x03, 0xE0, 0x21, 0x78, 0x29, 0x70, 0x64, 0x1C, 0x6D, 0x1C, 0x76, 0x1E, 0xF9, 0xD2, 0x70, 
+	0xBD, 0x10, 0xB5, 0x19, 0x4C, 0x19, 0x4B, 0x00, 0x20, 0x21, 0x5C, 0x00, 0x29, 0x0F, 0xD0, 0x4A, 
+	0x07, 0x52, 0x0F, 0x52, 0x1C, 
+	0x00, 0x00, 0x27, 0x00, 0x80, 0x09, 0x06, 0xC9, 0x0E, 0x05, 0xD1, 0x07, 0x2A, 0x03, 0xD9, 0x20, 
+	0x18, 0x00, 0x7A, 0xD8, 0x61, 0x03, 0xE0, 0x80, 0x18, 0x40, 0x1C, 0x80, 0x28, 0xEC, 0xD3, 0x0E, 
+	0x49, 0x0E, 0x4A, 0x00, 0x20, 0x80, 0x31, 0x20, 0x32, 0x84, 0x00, 0x0C, 0x59, 0x94, 0x42, 0x04, 
+	0xD1, 0x80, 0x00, 0x40, 0x18, 0x40, 0x68, 0x18, 0x62, 0x02, 0xE0, 0x80, 0x1C, 0x10, 0x28, 0xF3, 
+	0xD3, 0x03, 0x20, 0x01, 0x21, 0x00, 0x04, 0x89, 0x07, 0x48, 0x61, 0x02, 0xF0, 0x1F, 0xFA, 0x00, 
+	0xF0, 0xFD, 0xFA, 0x00, 0xF0, 0x98, 0xFB, 0xFE, 0xE7, 0x80, 0xF0, 0xFF, 0x0F, 0x00, 0xFF, 0x00, 
+	0x40, 0xFE, 0xE7, 0x70, 0xB5, 0x0D, 0x4A, 0x0E, 0x4B, 0x00, 0x20, 0x81, 0x00, 0x54, 0x58, 0x40, 
+	0x1C, 0x5C, 0x50, 0x20, 0x28, 0xF9, 0xD3, 0x0B, 0x49, 0x01, 0x20, 0x08, 0x60, 0x0A, 0x49, 0x80, 
+	0x04, 0x08, 0x60, 0x0A, 0x4C, 
+	0x00, 0x00, 0x28, 0x00, 0x80, 0xE5, 0x69, 0x26, 0x6A, 0x05, 0xF0, 0x42, 0xFA, 0xE5, 0x61, 0x26, 
+	0x62, 0x70, 0xBD, 0xFF, 0xF7, 0xE6, 0xFF, 0xFF, 0xF7, 0xAB, 0xFF, 0xFE, 0xE7, 0x00, 0x12, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x10, 0x40, 0x00, 0x00, 0x01, 0x40, 0x00, 0xFF, 0x00, 
+	0x40, 0xF0, 0xB5, 0x2A, 0x4D, 0x84, 0x46, 0x00, 0x24, 0xAF, 0x88, 0x9E, 0x46, 0x20, 0x46, 0x28, 
+	0x4E, 0x8F, 0x42, 0x04, 0xD8, 0x77, 0x89, 0xEB, 0x88, 0xFF, 0x1A, 0x8F, 0x42, 0x08, 0xD2, 0x29, 
+	0x8A, 0x91, 0x42, 0x16, 0xD2, 0xB1, 0x89, 0x6B, 0x8A, 0xC9, 0x1A, 0x91, 0x42, 0x11, 0xD9, 0x0F, 
+	0xE0, 0x2F, 0x89, 0x8F, 0x42, 0x0D, 0xD2, 0x77, 0x89, 0x6B, 0x89, 0xFF, 0x1A, 0x8F, 0x42, 0x08, 
+	0xD9, 0xA9, 0x89, 0x91, 0x42, 0x04, 0xD8, 0xB1, 0x89, 0xEB, 0x89, 0xC9, 0x1A, 0x91, 0x42, 0x00, 
+	0xD2, 0x01, 0x24, 0x18, 0x4A, 
+	0x00, 0x00, 0x29, 0x00, 0x80, 0x01, 0x27, 0x61, 0x46, 0x73, 0x46, 0x16, 0x88, 0x8F, 0x40, 0x01, 
+	0x2B, 0x05, 0xD1, 0x01, 0x2C, 0x0A, 0xD1, 0x39, 0x46, 0x31, 0x43, 0x11, 0x80, 0x06, 0xE0, 0x00, 
+	0x2C, 0x04, 0xD1, 0x69, 0x7D, 0x00, 0x29, 0x01, 0xD1, 0xBE, 0x43, 0x16, 0x80, 0x61, 0x46, 0x00, 
+	0x29, 0x02, 0xD1, 0x29, 0x7D, 0x01, 0x29, 0x0E, 0xD0, 0x01, 0x2C, 0x03, 0xD1, 0x11, 0x88, 0x0F, 
+	0x42, 0x09, 0xD0, 0x07, 0xE0, 0x00, 0x2C, 0x06, 0xD1, 0x11, 0x88, 0x0F, 0x42, 0x03, 0xD0, 0x69, 
+	0x7D, 0x01, 0x29, 0x00, 0xD1, 0x01, 0x20, 0x00, 0x21, 0x51, 0x80, 0xF0, 0xBD, 0x60, 0xDC, 0x00, 
+	0x00, 0x8C, 0xDD, 0x00, 0x00, 0x84, 0x00, 0x00, 0x20, 0x01, 0x46, 0x00, 0x20, 0xC9, 0x1E, 0x04, 
+	0x29, 0x00, 0xD8, 0x02, 0x20, 0x70, 0x47, 0x00, 0xB5, 0x0A, 0x46, 0x00, 0x23, 0xFF, 0xF7, 0xF4, 
+	0xFF, 0x00, 0x28, 0x06, 0xD0, 
+	0x00, 0x00, 0x2A, 0x00, 0x80, 0x82, 0x42, 0x04, 0xD2, 0x90, 0x00, 0x0C, 0x49, 0x10, 0x18, 0x43, 
+	0x18, 0x9B, 0x1C, 0x18, 0x46, 0x00, 0xBD, 0x01, 0x46, 0x00, 0x20, 0x89, 0x1E, 0x05, 0x29, 0x00, 
+	0xD8, 0x06, 0x48, 0x70, 0x47, 0x05, 0x49, 0x48, 0x79, 0x89, 0x7A, 0x00, 0x07, 0x00, 0x0F, 0x09, 
+	0x07, 0x09, 0x0F, 0x88, 0x42, 0x00, 0xD2, 0x08, 0x46, 0x70, 0x47, 0x00, 0x00, 0xF0, 0xDC, 0x00, 
+	0x00, 0x10, 0xB5, 0x00, 0xF0, 0x67, 0xF8, 0x0C, 0x4C, 0x01, 0x28, 0x02, 0xD1, 0x00, 0xF0, 0x65, 
+	0xF8, 0x03, 0xE0, 0x0A, 0x48, 0x00, 0x79, 0xC0, 0x07, 0xC0, 0x0F, 0x20, 0x70, 0x10, 0xBD, 0x06, 
+	0x49, 0x00, 0x20, 0x08, 0x70, 0x70, 0x47, 0x04, 0x48, 0x00, 0x78, 0x70, 0x47, 0x03, 0x48, 0x40, 
+	0x79, 0x40, 0x07, 0x40, 0x0F, 0x70, 0x47, 0x00, 0x00, 0x88, 0x00, 0x00, 0x20, 0x50, 0xDE, 0x00, 
+	0x00, 0x28, 0x48, 0x00, 0x79, 
+	0x00, 0x00, 0x2B, 0x00, 0x80, 0x28, 0x48, 0x41, 0x78, 0x89, 0x07, 0x89, 0x0F, 0x01, 0x70, 0x70, 
+	0x47, 0x24, 0x48, 0x00, 0x79, 0x24, 0x49, 0x40, 0x07, 0x80, 0x0F, 0x48, 0x70, 0xF0, 0xE7, 0x10, 
+	0xB5, 0x20, 0x4C, 0xA0, 0x79, 0x01, 0xF0, 0xAE, 0xFD, 0xE0, 0x79, 0x01, 0xF0, 0x9F, 0xFD, 0x60, 
+	0x79, 0x01, 0xF0, 0x35, 0xFD, 0x00, 0x20, 0x02, 0xF0, 0x33, 0xF9, 0x00, 0x20, 0x01, 0xF0, 0x4C, 
+	0xFE, 0x00, 0x20, 0x04, 0xF0, 0x8A, 0xF8, 0x04, 0xF0, 0xE4, 0xFC, 0x04, 0xF0, 0xB4, 0xFC, 0x10, 
+	0xBD, 0x10, 0xB5, 0x15, 0x49, 0x00, 0x20, 0x08, 0x70, 0x14, 0x4C, 0x48, 0x70, 0x20, 0x68, 0xC0, 
+	0xB2, 0x01, 0xF0, 0x90, 0xFD, 0x60, 0x68, 0xC0, 0xB2, 0x01, 0xF0, 0x80, 0xFD, 0x10, 0x48, 0x80, 
+	0x68, 0x00, 0x04, 0x00, 0x0E, 0x01, 0xF0, 0x13, 0xFD, 0x00, 0x20, 0x02, 0xF0, 0x11, 0xF9, 0x00, 
+	0x20, 0x01, 0xF0, 0x2A, 0xFE, 
+	0x00, 0x00, 0x2C, 0x00, 0x80, 0x00, 0x20, 0x04, 0xF0, 0x68, 0xF8, 0x04, 0xF0, 0xC2, 0xFC, 0x04, 
+	0xF0, 0x92, 0xFC, 0x10, 0xBD, 0x04, 0x48, 0x00, 0x78, 0x70, 0x47, 0x02, 0x48, 0x80, 0x7A, 0xC0, 
+	0x07, 0xC0, 0x0F, 0x70, 0x47, 0x30, 0xE0, 0x00, 0x00, 0x89, 0x00, 0x00, 0x20, 0xD8, 0xDF, 0x00, 
+	0x00, 0x58, 0xDE, 0x00, 0x00, 0x23, 0x49, 0x00, 0x20, 0x08, 0x80, 0x48, 0x80, 0x70, 0x47, 0xFF, 
+	0xB5, 0x01, 0x24, 0x25, 0x46, 0x03, 0x94, 0x1F, 0x4C, 0x85, 0x40, 0x24, 0x88, 0x2E, 0x46, 0xA6, 
+	0x46, 0x26, 0x40, 0x06, 0x24, 0x60, 0x43, 0x1C, 0x4C, 0x04, 0x19, 0x00, 0x2E, 0x2C, 0xD0, 0x26, 
+	0x79, 0xB4, 0x46, 0x9E, 0x1B, 0x02, 0x96, 0x67, 0x88, 0xCE, 0x1B, 0x00, 0xD5, 0x76, 0x42, 0x01, 
+	0x96, 0xD6, 0x1B, 0x00, 0xD5, 0x76, 0x42, 0x00, 0x96, 0x9C, 0x45, 0x14, 0xD2, 0x13, 0x4E, 0xB4, 
+	0x46, 0xB6, 0x7E, 0x02, 0x9F, 
+	0x00, 0x00, 0x2D, 0x00, 0x80, 0xBE, 0x42, 0x0E, 0xDA, 0x66, 0x46, 0x36, 0x7E, 0x01, 0x9F, 0xBE, 
+	0x42, 0x09, 0xDD, 0x66, 0x46, 0x36, 0x7E, 0x00, 0x9F, 0xBE, 0x42, 0x04, 0xDD, 0x0A, 0x4D, 0x29, 
+	0x52, 0x62, 0x80, 0x23, 0x71, 0x05, 0xE0, 0x00, 0x20, 0x03, 0x90, 0x06, 0x49, 0x70, 0x46, 0xA8, 
+	0x43, 0x08, 0x80, 0x03, 0x98, 0x04, 0xB0, 0xF0, 0xBD, 0x02, 0x4E, 0x77, 0x46, 0x3D, 0x43, 0x35, 
+	0x80, 0xEC, 0xE7, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x20, 0x58, 0x03, 0x00, 0x20, 0x40, 0xDC, 0x00, 
+	0x00, 0xBA, 0x49, 0x00, 0x20, 0x08, 0x70, 0x48, 0x70, 0x70, 0x47, 0xFF, 0xB5, 0xB8, 0x48, 0xBA, 
+	0x4F, 0x03, 0xC8, 0x02, 0x90, 0x00, 0x20, 0x01, 0x90, 0x84, 0x46, 0x02, 0x46, 0x00, 0x90, 0xB5, 
+	0x48, 0x03, 0x91, 0x00, 0x21, 0x16, 0x01, 0x73, 0x18, 0xC3, 0x56, 0xBC, 0x7C, 0xA3, 0x42, 0x2B, 
+	0xDB, 0x6B, 0x46, 0x1B, 0x89, 
+	0x00, 0x00, 0x2E, 0x00, 0x80, 0x8C, 0x18, 0xA3, 0x42, 0x03, 0xD9, 0x6B, 0x46, 0x1C, 0x81, 0x1A, 
+	0x70, 0x19, 0x71, 0x10, 0x23, 0x5D, 0x1A, 0xAB, 0x1A, 0x18, 0x33, 0x9C, 0xB2, 0x6B, 0x46, 0x5B, 
+	0x89, 0xA3, 0x42, 0x03, 0xD9, 0x6B, 0x46, 0x5C, 0x81, 0x5A, 0x70, 0x59, 0x71, 0xAB, 0x18, 0x5B, 
+	0x1E, 0x9C, 0xB2, 0x6B, 0x46, 0x9B, 0x89, 0xA3, 0x42, 0x03, 0xD9, 0x6B, 0x46, 0x9C, 0x81, 0x9A, 
+	0x70, 0x99, 0x71, 0x8B, 0x1A, 0x19, 0x33, 0x9C, 0xB2, 0x6B, 0x46, 0xDB, 0x89, 0xA3, 0x42, 0x03, 
+	0xD9, 0x6B, 0x46, 0xDC, 0x81, 0xDA, 0x70, 0xD9, 0x71, 0x49, 0x1C, 0xC9, 0xB2, 0x10, 0x29, 0xCA, 
+	0xD3, 0x52, 0x1C, 0xD2, 0xB2, 0x1A, 0x2A, 0xC4, 0xD3, 0x6B, 0x46, 0x18, 0x79, 0x08, 0x28, 0x1C, 
+	0xD2, 0x18, 0x78, 0x0D, 0x28, 0x19, 0xD2, 0x59, 0x79, 0x0F, 0x20, 0x41, 0x1A, 0x08, 0x29, 0x14, 
+	0xDA, 0x5A, 0x78, 0x19, 0x21, 
+	0x00, 0x00, 0x2F, 0x00, 0x80, 0x8A, 0x1A, 0x0D, 0x2A, 0x0F, 0xDA, 0x9A, 0x79, 0x80, 0x1A, 0x08, 
+	0x28, 0x0B, 0xDA, 0x98, 0x78, 0x0D, 0x28, 0x08, 0xD2, 0xD8, 0x79, 0x08, 0x28, 0x05, 0xD2, 0xD8, 
+	0x78, 0x08, 0x1A, 0x0D, 0x28, 0x01, 0xDA, 0x01, 0x20, 0x84, 0x46, 0x60, 0x46, 0x04, 0xB0, 0xF0, 
+	0xBD, 0xF0, 0xB5, 0x07, 0x46, 0x00, 0x20, 0x94, 0x46, 0x8E, 0x46, 0x05, 0x46, 0x04, 0x46, 0x02, 
+	0x46, 0x05, 0x9E, 0x05, 0xE0, 0x61, 0x00, 0x89, 0x19, 0x0A, 0x70, 0x64, 0x1C, 0x4A, 0x70, 0xE4, 
+	0xB2, 0x9C, 0x42, 0xF7, 0xD3, 0x00, 0x24, 0x1C, 0xE0, 0x3A, 0x57, 0x00, 0x2D, 0x61, 0x46, 0x0A, 
+	0xD1, 0x8A, 0x42, 0x14, 0xDB, 0x40, 0x1C, 0xC0, 0xB2, 0x41, 0x00, 0x01, 0x25, 0x89, 0x19, 0x20, 
+	0x39, 0x8C, 0x77, 0xCD, 0x77, 0x0B, 0xE0, 0x8A, 0x42, 0x06, 0xDB, 0x42, 0x00, 0x92, 0x19, 0x20, 
+	0x3A, 0xD1, 0x7F, 0x49, 0x1C, 
+	0x00, 0x00, 0x30, 0x00, 0x80, 0xD1, 0x77, 0x02, 0xE0, 0x00, 0x25, 0x98, 0x42, 0x03, 0xD0, 0x64, 
+	0x1C, 0xE4, 0xB2, 0x74, 0x45, 0xE0, 0xD3, 0xF0, 0xBD, 0xF0, 0xB5, 0x9D, 0xB0, 0x00, 0x21, 0x7E, 
+	0x26, 0x68, 0x4D, 0x0E, 0xAC, 0xF6, 0x43, 0x32, 0x46, 0x00, 0x20, 0x03, 0x01, 0x5B, 0x18, 0xEB, 
+	0x56, 0x9A, 0x42, 0x00, 0xDA, 0x1A, 0x46, 0x40, 0x1C, 0xC0, 0xB2, 0x1A, 0x28, 0xF5, 0xD3, 0x62, 
+	0x54, 0x49, 0x1C, 0xC9, 0xB2, 0x10, 0x29, 0xEE, 0xD3, 0x00, 0x21, 0x04, 0xAF, 0x00, 0x20, 0x32, 
+	0x46, 0x0C, 0x01, 0x23, 0x18, 0xEB, 0x56, 0x9A, 0x42, 0x00, 0xDA, 0x1A, 0x46, 0x40, 0x1C, 0xC0, 
+	0xB2, 0x10, 0x28, 0xF6, 0xD3, 0x7A, 0x54, 0x49, 0x1C, 0xC9, 0xB2, 0x1A, 0x29, 0xEE, 0xD3, 0x1B, 
+	0xAA, 0x55, 0x4C, 0x00, 0x92, 0x12, 0x22, 0xA2, 0x56, 0x10, 0x21, 0x0E, 0xA8, 0x04, 0x23, 0xFF, 
+	0xF7, 0x97, 0xFF, 0x19, 0xAA, 
+	0x00, 0x00, 0x31, 0x00, 0x80, 0x00, 0x92, 0x12, 0x22, 0xA2, 0x56, 0x07, 0x46, 0x1A, 0x21, 0x04, 
+	0xA8, 0x04, 0x23, 0xFF, 0xF7, 0x8D, 0xFF, 0x00, 0x25, 0x18, 0x90, 0x28, 0x46, 0x1B, 0xA9, 0x06, 
+	0xE0, 0x42, 0x00, 0x52, 0x18, 0x52, 0x78, 0x52, 0x19, 0x40, 0x1C, 0xD5, 0xB2, 0xC0, 0xB2, 0xB8, 
+	0x42, 0xF6, 0xD3, 0x00, 0x26, 0x30, 0x46, 0x19, 0xA9, 0x06, 0xE0, 0x42, 0x00, 0x52, 0x18, 0x52, 
+	0x78, 0x92, 0x19, 0x40, 0x1C, 0xD6, 0xB2, 0xC0, 0xB2, 0x18, 0x9A, 0x90, 0x42, 0xF5, 0xD3, 0x3B, 
+	0x48, 0x00, 0x78, 0x01, 0x28, 0x0A, 0xD1, 0x20, 0x7D, 0x61, 0x7D, 0x88, 0x42, 0x20, 0x7D, 0x02, 
+	0xD9, 0x61, 0x7D, 0x40, 0x1A, 0xFF, 0xE7, 0xC0, 0xB2, 0x03, 0x90, 0x12, 0xE0, 0x02, 0x28, 0x0A, 
+	0xD1, 0xE0, 0x7D, 0x21, 0x7E, 0x88, 0x42, 0xE0, 0x7D, 0x02, 0xD9, 0x21, 0x7E, 0x40, 0x1A, 0xFF, 
+	0xE7, 0xC0, 0xB2, 0x03, 0x90, 
+	0x00, 0x00, 0x32, 0x00, 0x80, 0x1B, 0xE0, 0x21, 0x7D, 0x03, 0x91, 0x00, 0x28, 0x01, 0xD0, 0x01, 
+	0x28, 0x0F, 0xD1, 0x2A, 0x49, 0x00, 0x20, 0x08, 0x70, 0x03, 0x9A, 0x00, 0x96, 0x01, 0x92, 0xE2, 
+	0x7C, 0x29, 0x46, 0x38, 0x46, 0x18, 0x9B, 0x00, 0xF0, 0x37, 0xF8, 0x00, 0x28, 0x01, 0xD0, 0x01, 
+	0x21, 0x14, 0xE0, 0x22, 0x48, 0x00, 0x78, 0x00, 0x28, 0x01, 0xD0, 0x02, 0x28, 0x10, 0xD1, 0x1F, 
+	0x49, 0x00, 0x20, 0x08, 0x70, 0x03, 0x9A, 0x00, 0x95, 0x01, 0x92, 0xA2, 0x7D, 0x3B, 0x46, 0x31, 
+	0x46, 0x18, 0x98, 0x00, 0xF0, 0x21, 0xF8, 0x00, 0x28, 0x02, 0xD0, 0x02, 0x21, 0x17, 0x48, 0x01, 
+	0x70, 0x16, 0x4F, 0x00, 0x20, 0x78, 0x70, 0x60, 0x7E, 0xA8, 0x42, 0x05, 0xD8, 0xA0, 0x7E, 0xB0, 
+	0x42, 0x02, 0xD8, 0xFF, 0xF7, 0xB2, 0xFE, 0x78, 0x70, 0x00, 0x20, 0x1D, 0xB0, 0xF0, 0xBD, 0x12, 
+	0x48, 0x00, 0x7C, 0xC0, 0x07, 
+	0x00, 0x00, 0x33, 0x00, 0x80, 0x00, 0xD0, 0x47, 0xE7, 0x70, 0x47, 0x0C, 0x48, 0x00, 0x78, 0x70, 
+	0x47, 0x0A, 0x49, 0x01, 0x20, 0x08, 0x56, 0x70, 0x47, 0x70, 0xB5, 0x04, 0x46, 0x00, 0x20, 0x05, 
+	0x9E, 0x04, 0x9D, 0x01, 0x2C, 0x08, 0xD8, 0x02, 0x29, 0x06, 0xD3, 0x91, 0x42, 0x04, 0xD8, 0x02, 
+	0x2B, 0x02, 0xD8, 0xAE, 0x42, 0x00, 0xD8, 0x01, 0x20, 0x70, 0xBD, 0x00, 0x00, 0x90, 0x00, 0x00, 
+	0x20, 0x50, 0xD6, 0x00, 0x00, 0x6C, 0x09, 0x00, 0x20, 0xCC, 0xDD, 0x00, 0x00, 0xFE, 0xB5, 0x07, 
+	0xF0, 0x27, 0xFC, 0x07, 0xF0, 0x53, 0xFC, 0xD0, 0x48, 0x07, 0xF0, 0x80, 0xFB, 0x01, 0x20, 0x07, 
+	0xF0, 0x70, 0xFB, 0x07, 0xF0, 0xD7, 0xFB, 0xC0, 0x21, 0xCC, 0x48, 0x0A, 0x79, 0x02, 0x70, 0x49, 
+	0x79, 0x41, 0x70, 0xCB, 0x48, 0x80, 0x7A, 0xCB, 0x4C, 0xCB, 0x4D, 0x00, 0x28, 0x3C, 0xD0, 0xA6, 
+	0x68, 0x07, 0x21, 0xC9, 0x03, 
+	0x00, 0x00, 0x34, 0x00, 0x80, 0x30, 0x46, 0x88, 0x43, 0xC8, 0x49, 0x08, 0x43, 0xA0, 0x60, 0xA7, 
+	0x69, 0x20, 0x21, 0x38, 0x46, 0x88, 0x43, 0xA0, 0x61, 0x60, 0x69, 0x0F, 0x22, 0x12, 0x05, 0x00, 
+	0x90, 0x90, 0x43, 0x60, 0x61, 0x20, 0x68, 0x01, 0x90, 0x88, 0x43, 0x2C, 0x21, 0x08, 0x43, 0x20, 
+	0x60, 0x28, 0x68, 0x02, 0x90, 0x80, 0x08, 0x80, 0x00, 0x01, 0x21, 0x08, 0x43, 0x28, 0x60, 0x7D, 
+	0x20, 0xC0, 0x00, 0x07, 0xF0, 0x5D, 0xFC, 0x60, 0x68, 0x81, 0x06, 0xCA, 0x0F, 0xB3, 0x49, 0x89, 
+	0x1E, 0x0A, 0x70, 0x02, 0x07, 0xD2, 0x0F, 0x52, 0x00, 0x0B, 0x78, 0x40, 0x07, 0x1A, 0x43, 0xC0, 
+	0x0F, 0x80, 0x00, 0xD2, 0xB2, 0x10, 0x43, 0x08, 0x70, 0xA6, 0x60, 0xA7, 0x61, 0x00, 0x98, 0x60, 
+	0x61, 0x01, 0x98, 0x20, 0x60, 0x02, 0x98, 0x28, 0x60, 0xA8, 0x48, 0x0A, 0xF0, 0x6E, 0xFC, 0x0A, 
+	0xF0, 0x50, 0xFC, 0xC0, 0x26, 
+	0x00, 0x00, 0x35, 0x00, 0x80, 0xB0, 0x79, 0xC1, 0x07, 0x05, 0xD1, 0x80, 0x07, 0x01, 0xD4, 0x04, 
+	0x20, 0x07, 0xE0, 0x02, 0x20, 0x05, 0xE0, 0x01, 0x21, 0x80, 0x07, 0x01, 0xD4, 0x05, 0x20, 0x00, 
+	0xE0, 0x03, 0x20, 0x0A, 0xF0, 0x72, 0xFC, 0x0A, 0xF0, 0xDB, 0xFB, 0x28, 0x68, 0xB0, 0x43, 0x28, 
+	0x60, 0x9B, 0x48, 0x40, 0x30, 0x00, 0x7F, 0x07, 0x21, 0x49, 0x02, 0x01, 0x28, 0x0D, 0xD0, 0x02, 
+	0x28, 0x0A, 0xD1, 0x28, 0x68, 0x80, 0x22, 0x10, 0x43, 0x28, 0x60, 0x99, 0x4A, 0x90, 0x68, 0x88, 
+	0x43, 0xFF, 0x30, 0xFF, 0x30, 0x02, 0x30, 0x90, 0x60, 0xFE, 0xBD, 0x28, 0x68, 0x30, 0x43, 0x28, 
+	0x60, 0xA0, 0x68, 0x88, 0x43, 0xFF, 0x30, 0xFF, 0x30, 0x02, 0x30, 0xA0, 0x60, 0xFE, 0xBD, 0x10, 
+	0xB5, 0x07, 0xF0, 0x76, 0xFC, 0x8F, 0x4C, 0x20, 0x70, 0xC0, 0xB2, 0x07, 0xF0, 0x7E, 0xFC, 0x20, 
+	0x78, 0x07, 0xF0, 0xA3, 0xFC, 
+	0x00, 0x00, 0x36, 0x00, 0x80, 0x10, 0xBD, 0xF8, 0xB5, 0x07, 0xF0, 0x44, 0xFB, 0x8A, 0x48, 0x00, 
+	0x24, 0x04, 0x80, 0x07, 0xF0, 0xA5, 0xF9, 0x89, 0x49, 0x01, 0x25, 0x08, 0x80, 0xAD, 0x07, 0xAC, 
+	0x60, 0x01, 0x26, 0xAE, 0x61, 0x08, 0x88, 0x86, 0x4F, 0x80, 0x07, 0x7E, 0xD5, 0xFF, 0xF7, 0xDF, 
+	0xFF, 0x7B, 0x49, 0x88, 0x7E, 0xC0, 0x07, 0x28, 0x68, 0x02, 0xD1, 0x38, 0x43, 0x28, 0x60, 0x06, 
+	0xE0, 0xB8, 0x43, 0x28, 0x60, 0x88, 0x7E, 0x00, 0x09, 0x40, 0x00, 0x30, 0x43, 0xA8, 0x61, 0x7D, 
+	0x48, 0x00, 0x68, 0x00, 0x28, 0x13, 0xD0, 0x01, 0x20, 0x07, 0xF0, 0xD2, 0xFB, 0x02, 0x27, 0x6F, 
+	0x60, 0x04, 0x20, 0x04, 0xF0, 0x42, 0xFF, 0xAF, 0x60, 0x77, 0x49, 0x04, 0x20, 0x04, 0xF0, 0x14, 
+	0xFF, 0x00, 0x21, 0x04, 0x20, 0x04, 0xF0, 0x1A, 0xFF, 0x04, 0x20, 0x04, 0xF0, 0x27, 0xFF, 0x73, 
+	0x4D, 0x6E, 0x4A, 0x2E, 0x70, 
+	0x00, 0x00, 0x37, 0x00, 0x80, 0x10, 0x88, 0x08, 0x21, 0x08, 0x43, 0x10, 0x80, 0x80, 0xB2, 0x83, 
+	0x07, 0x02, 0xD4, 0x2C, 0x70, 0x88, 0x43, 0x10, 0x80, 0x10, 0x88, 0x83, 0x05, 0x02, 0xD4, 0x2C, 
+	0x70, 0x88, 0x43, 0x10, 0x80, 0x10, 0x88, 0x43, 0x07, 0x9B, 0x0F, 0x03, 0x2B, 0x07, 0xD0, 0x5C, 
+	0x4B, 0x20, 0x33, 0x1B, 0x7D, 0xDB, 0x07, 0x02, 0xD0, 0x2C, 0x70, 0x88, 0x43, 0x10, 0x80, 0x57, 
+	0x4F, 0x00, 0x20, 0xBF, 0x1E, 0x62, 0x49, 0x78, 0x70, 0x55, 0x4C, 0x08, 0x70, 0xA0, 0x7C, 0x61, 
+	0x4E, 0x00, 0x09, 0x00, 0x01, 0x30, 0x70, 0xE0, 0x7C, 0x5F, 0x49, 0x08, 0x70, 0x20, 0x7D, 0x5F, 
+	0x49, 0x08, 0x70, 0x60, 0x7E, 0x21, 0x7E, 0x00, 0x02, 0x08, 0x43, 0x5D, 0x49, 0x08, 0x80, 0xE0, 
+	0x7D, 0xA1, 0x7D, 0x00, 0x02, 0x08, 0x43, 0x5B, 0x49, 0x08, 0x80, 0x60, 0x7C, 0x5A, 0x49, 0x08, 
+	0x70, 0x20, 0x46, 0x40, 0x30, 
+	0x00, 0x00, 0x38, 0x00, 0x80, 0x80, 0x7D, 0x59, 0x49, 0x08, 0x70, 0x06, 0xF0, 0x23, 0xFC, 0x28, 
+	0x78, 0x00, 0x28, 0x06, 0xD0, 0x09, 0xF0, 0xD4, 0xFA, 0x0A, 0xF0, 0xD4, 0xFC, 0x01, 0x20, 0x0A, 
+	0xF0, 0xAC, 0xFA, 0x53, 0x49, 0x30, 0x78, 0x08, 0x70, 0x00, 0xE0, 0x1C, 0xE0, 0x01, 0x20, 0x07, 
+	0xF0, 0x5D, 0xFA, 0x20, 0x7C, 0x04, 0x21, 0x08, 0x40, 0x4E, 0x4E, 0xC0, 0xB2, 0x10, 0x24, 0x20, 
+	0x43, 0x30, 0x70, 0x79, 0x78, 0x01, 0x20, 0x0A, 0xF0, 0xCE, 0xFB, 0x31, 0x78, 0x00, 0x20, 0x0A, 
+	0xF0, 0xCA, 0xFB, 0x0A, 0xF0, 0x86, 0xFB, 0x48, 0x4D, 0x2C, 0x70, 0x05, 0xF0, 0xFF, 0xFD, 0x47, 
+	0x49, 0x00, 0x20, 0x08, 0x70, 0x41, 0xE0, 0x28, 0x68, 0xB8, 0x43, 0x67, 0xE7, 0x07, 0xF0, 0x92, 
+	0xFA, 0x28, 0x78, 0x00, 0x28, 0x3E, 0xD0, 0x10, 0x28, 0x3F, 0xD0, 0x20, 0x28, 0x01, 0xD1, 0x05, 
+	0xF0, 0xA1, 0xFB, 0x00, 0x20, 
+	0x00, 0x00, 0x39, 0x00, 0x80, 0x0A, 0xF0, 0xB3, 0xFB, 0x30, 0x70, 0xC0, 0xB2, 0xC0, 0x07, 0x01, 
+	0xD0, 0x04, 0xF0, 0xB2, 0xFE, 0x30, 0x78, 0x01, 0x07, 0xE8, 0xD5, 0x30, 0x21, 0x08, 0x40, 0x28, 
+	0x70, 0x00, 0x2C, 0x2D, 0xD0, 0x10, 0x2C, 0x2E, 0xD0, 0x20, 0x2C, 0x01, 0xD1, 0x05, 0xF0, 0x54, 
+	0xFC, 0x01, 0x20, 0x07, 0xF0, 0x1B, 0xFA, 0x28, 0x78, 0x00, 0x28, 0x27, 0xD0, 0x10, 0x28, 0x28, 
+	0xD0, 0x20, 0x28, 0x01, 0xD1, 0x04, 0xF0, 0xF2, 0xFE, 0x79, 0x78, 0xEF, 0x20, 0x01, 0x40, 0x01, 
+	0x20, 0x0A, 0xF0, 0x89, 0xFB, 0x30, 0x78, 0xC7, 0x21, 0x2C, 0x78, 0x08, 0x40, 0xC0, 0xB2, 0x20, 
+	0x43, 0x30, 0x70, 0xC1, 0xB2, 0x00, 0x20, 0x0A, 0xF0, 0x7E, 0xFB, 0x06, 0xF0, 0x2F, 0xFE, 0x06, 
+	0xF0, 0x65, 0xFE, 0xBB, 0xE7, 0x06, 0xF0, 0xB7, 0xFC, 0xC3, 0xE7, 0x05, 0xF0, 0x81, 0xFE, 0xC0, 
+	0xE7, 0x06, 0xF0, 0xA0, 0xFD, 
+	0x00, 0x00, 0x3A, 0x00, 0x80, 0xD4, 0xE7, 0x05, 0xF0, 0x7F, 0xFE, 0xD1, 0xE7, 0x05, 0xF0, 0x26, 
+	0xFF, 0xDA, 0xE7, 0x05, 0xF0, 0xA3, 0xFD, 0xD7, 0xE7, 0x10, 0x27, 0x00, 0x00, 0x94, 0x00, 0x00, 
+	0x20, 0x00, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40, 0x00, 0x20, 0x14, 0x40, 0x80, 0x04, 0x01, 
+	0x00, 0x00, 0x10, 0x14, 0x40, 0x50, 0x02, 0x00, 0x20, 0x1C, 0x02, 0x00, 0x20, 0x2C, 0x02, 0x00, 
+	0x20, 0x00, 0x00, 0x80, 0x00, 0x98, 0x00, 0x00, 0x20, 0x4D, 0x6A, 0x00, 0x00, 0x1A, 0x02, 0x00, 
+	0x20, 0xC3, 0x01, 0x00, 0x20, 0xC4, 0x01, 0x00, 0x20, 0xBC, 0x01, 0x00, 0x20, 0xBD, 0x01, 0x00, 
+	0x20, 0xCC, 0x01, 0x00, 0x20, 0xCE, 0x01, 0x00, 0x20, 0xBE, 0x01, 0x00, 0x20, 0xBF, 0x01, 0x00, 
+	0x20, 0x7F, 0x02, 0x00, 0x20, 0x30, 0x02, 0x00, 0x20, 0x1B, 0x02, 0x00, 0x20, 0x2F, 0x02, 0x00, 
+	0x20, 0x70, 0x47, 0xFE, 0xB5, 
+	0x00, 0x00, 0x3B, 0x00, 0x80, 0xFA, 0x4C, 0x25, 0x68, 0x03, 0x21, 0x09, 0x02, 0x28, 0x46, 0x88, 
+	0x43, 0x20, 0x60, 0xF7, 0x48, 0x40, 0x30, 0x80, 0x68, 0x01, 0x90, 0xE0, 0x6B, 0x00, 0x90, 0x01, 
+	0x98, 0xF3, 0x4A, 0x06, 0x0C, 0x00, 0x98, 0x36, 0x04, 0x07, 0x0C, 0xFF, 0x36, 0x02, 0x36, 0x3F, 
+	0x04, 0xFF, 0x37, 0xA0, 0x03, 0x31, 0x46, 0x02, 0x37, 0x41, 0x40, 0x40, 0x32, 0x91, 0x60, 0x78, 
+	0x40, 0xE0, 0x63, 0x01, 0x20, 0x04, 0xF0, 0xD6, 0xFD, 0xE9, 0x48, 0x40, 0x30, 0x86, 0x60, 0xE7, 
+	0x63, 0x01, 0x20, 0x04, 0xF0, 0xCF, 0xFD, 0xE6, 0x49, 0x01, 0x98, 0x40, 0x31, 0x88, 0x60, 0x00, 
+	0x98, 0xE0, 0x63, 0x25, 0x60, 0xFE, 0xBD, 0x10, 0xB5, 0xE2, 0x49, 0xC8, 0x68, 0x4A, 0x02, 0x10, 
+	0x43, 0xC8, 0x60, 0xE1, 0x48, 0x81, 0x68, 0x05, 0x20, 0x28, 0x29, 0x03, 0xD3, 0x06, 0x20, 0x30, 
+	0x29, 0x00, 0xD3, 0x07, 0x20, 
+	0x00, 0x00, 0x3C, 0x00, 0x80, 0xDD, 0x49, 0x0A, 0x7B, 0x12, 0x09, 0x10, 0x18, 0x42, 0x00, 0x08, 
+	0x7B, 0x40, 0x07, 0x40, 0x0F, 0x05, 0x28, 0x01, 0xD9, 0x00, 0x20, 0x05, 0xE0, 0x04, 0x28, 0x03, 
+	0xD1, 0x0B, 0x7C, 0x00, 0x2B, 0x00, 0xD0, 0x06, 0x20, 0xD5, 0x4B, 0x80, 0x00, 0x1B, 0x58, 0xD0, 
+	0x48, 0x13, 0x43, 0xC0, 0x30, 0x03, 0x61, 0x89, 0x7B, 0xD2, 0x4A, 0x09, 0x07, 0x09, 0x0F, 0x89, 
+	0x18, 0x41, 0x60, 0x03, 0x21, 0x81, 0x60, 0x91, 0x0C, 0xC9, 0x4A, 0x40, 0x32, 0x91, 0x62, 0xCB, 
+	0x49, 0x60, 0x39, 0x49, 0x69, 0xC6, 0x4B, 0x80, 0x33, 0x99, 0x63, 0x01, 0x21, 0x09, 0x03, 0x01, 
+	0x60, 0x09, 0x20, 0x00, 0x07, 0x90, 0x61, 0xC2, 0x4C, 0x20, 0x68, 0xC9, 0x04, 0x08, 0x43, 0x20, 
+	0x60, 0x05, 0x20, 0x04, 0xF0, 0xBA, 0xFD, 0x05, 0x20, 0x04, 0xF0, 0xA8, 0xFD, 0x20, 0x68, 0x00, 
+	0x28, 0x01, 0xD0, 0xFF, 0xF7, 
+	0x00, 0x00, 0x3D, 0x00, 0x80, 0x7E, 0xFF, 0x10, 0xBD, 0x70, 0xB5, 0xBF, 0x48, 0x01, 0x7F, 0x00, 
+	0x29, 0x19, 0xD0, 0xBE, 0x48, 0x41, 0x43, 0xBC, 0x48, 0x20, 0x30, 0x40, 0x78, 0x00, 0x04, 0x0B, 
+	0xF0, 0xE2, 0xFA, 0xB6, 0x4B, 0x00, 0x21, 0xBA, 0x4C, 0xBA, 0x4D, 0x20, 0x3B, 0x9E, 0x69, 0x64, 
+	0x22, 0x00, 0x2E, 0x01, 0xD0, 0x0A, 0x19, 0x12, 0x78, 0x4E, 0x00, 0x42, 0x43, 0x12, 0x12, 0x49, 
+	0x1C, 0xAA, 0x53, 0x08, 0x29, 0xF2, 0xD3, 0x70, 0xBD, 0xF8, 0xB5, 0x00, 0x21, 0x05, 0x20, 0x04, 
+	0xF0, 0x6D, 0xFD, 0xAA, 0x4E, 0x20, 0x3E, 0xF0, 0x69, 0x02, 0x28, 0x0E, 0xD1, 0xAE, 0x49, 0x0E, 
+	0x20, 0x04, 0xF0, 0x51, 0xFD, 0xAD, 0x48, 0x02, 0x6A, 0x01, 0x6A, 0xFF, 0x23, 0x1B, 0x04, 0x99, 
+	0x43, 0x01, 0x23, 0x9B, 0x05, 0x19, 0x43, 0x0A, 0x43, 0x02, 0x62, 0xA0, 0x4F, 0x60, 0x3F, 0xB8, 
+	0x69, 0xA1, 0x4C, 0x60, 0x70, 
+	0x00, 0x00, 0x3E, 0x00, 0x80, 0xF8, 0x69, 0xA0, 0x70, 0x60, 0x78, 0xC1, 0x1C, 0x89, 0x08, 0x21, 
+	0x75, 0xC9, 0xB2, 0x40, 0x1A, 0x40, 0x1C, 0x03, 0x21, 0x0B, 0xF0, 0xAF, 0xFA, 0x60, 0x75, 0x00, 
+	0x21, 0x20, 0x46, 0x20, 0x30, 0x9E, 0x4D, 0x81, 0x70, 0xE9, 0x68, 0xF0, 0x22, 0x11, 0x40, 0x01, 
+	0x70, 0x29, 0x6A, 0x21, 0x76, 0xA9, 0x68, 0xA1, 0x76, 0xA9, 0x68, 0x09, 0x0A, 0x21, 0x77, 0x31, 
+	0x68, 0x41, 0x70, 0xFF, 0xF7, 0xA1, 0xFF, 0x68, 0x6F, 0x60, 0x76, 0xE8, 0x6D, 0xE0, 0x76, 0xE8, 
+	0x6D, 0x29, 0x46, 0x00, 0x0A, 0x60, 0x77, 0x80, 0x31, 0x09, 0x6B, 0xC0, 0xB2, 0x0D, 0x0A, 0x39, 
+	0x46, 0x40, 0x39, 0x09, 0x68, 0x09, 0x0A, 0x00, 0x91, 0xF9, 0x68, 0x0F, 0x0A, 0x71, 0x68, 0x61, 
+	0x73, 0x64, 0x21, 0x41, 0x43, 0x60, 0x7B, 0x80, 0x03, 0x0B, 0xF0, 0x75, 0xFA, 0x60, 0x85, 0x83, 
+	0x48, 0x29, 0x46, 0x41, 0x43, 
+	0x00, 0x00, 0x3F, 0x00, 0x80, 0xB0, 0x68, 0x00, 0x04, 0x0B, 0xF0, 0x6D, 0xFA, 0x05, 0x46, 0x00, 
+	0x99, 0x64, 0x20, 0x41, 0x43, 0xF0, 0x68, 0x80, 0x03, 0x0B, 0xF0, 0x65, 0xFA, 0xE0, 0x85, 0x39, 
+	0x46, 0x64, 0x20, 0x41, 0x43, 0xF0, 0x68, 0x80, 0x03, 0x0B, 0xF0, 0x5D, 0xFA, 0x20, 0x86, 0xB1, 
+	0x69, 0x78, 0x48, 0x10, 0x30, 0x00, 0x29, 0x0B, 0xD0, 0x75, 0x4A, 0x00, 0x21, 0x8B, 0x18, 0x1B, 
+	0x78, 0x4C, 0x00, 0x6B, 0x43, 0x1B, 0x12, 0x49, 0x1C, 0x03, 0x53, 0x08, 0x29, 0xF6, 0xD3, 0x08, 
+	0xE0, 0x19, 0x22, 0x92, 0x02, 0x55, 0x43, 0x2A, 0x14, 0x4B, 0x00, 0x49, 0x1C, 0xC2, 0x52, 0x08, 
+	0x29, 0xFA, 0xD3, 0x66, 0x48, 0xC0, 0x79, 0xC0, 0x07, 0x02, 0xD0, 0x08, 0xF0, 0xB1, 0xF9, 0xF8, 
+	0xBD, 0x08, 0xF0, 0xB2, 0xF9, 0xF8, 0xBD, 0x10, 0xB5, 0x63, 0x4C, 0x20, 0x78, 0x00, 0x28, 0x03, 
+	0xD1, 0xFF, 0xF7, 0x62, 0xFF, 
+	0x00, 0x00, 0x40, 0x00, 0x80, 0x01, 0x20, 0x20, 0x70, 0xFF, 0xF7, 0xED, 0xFE, 0x10, 0xBD, 0x58, 
+	0x49, 0x64, 0x48, 0x48, 0x61, 0x56, 0x49, 0x64, 0x48, 0x40, 0x31, 0x48, 0x62, 0x01, 0x21, 0x54, 
+	0x48, 0xC9, 0x03, 0xC0, 0x30, 0x01, 0x60, 0x41, 0x68, 0x49, 0x00, 0x49, 0x08, 0x41, 0x60, 0x81, 
+	0x68, 0x49, 0x08, 0x49, 0x00, 0x81, 0x60, 0x01, 0x69, 0x01, 0x22, 0x89, 0x00, 0x89, 0x08, 0x92, 
+	0x07, 0x89, 0x18, 0x01, 0x61, 0x70, 0x47, 0x10, 0xB5, 0x49, 0x48, 0x01, 0x68, 0x49, 0x00, 0x49, 
+	0x08, 0x01, 0x60, 0x05, 0x20, 0x04, 0xF0, 0xC1, 0xFC, 0x05, 0x20, 0x04, 0xF0, 0xC6, 0xFC, 0x10, 
+	0xBD, 0x49, 0x48, 0xC0, 0x7F, 0xC0, 0x07, 0xC0, 0x0F, 0x70, 0x47, 0xFE, 0xB5, 0x00, 0x20, 0x43, 
+	0x4A, 0x02, 0x90, 0x90, 0x7C, 0x01, 0x21, 0x80, 0x07, 0x04, 0xD4, 0xFF, 0xF7, 0xF1, 0xFF, 0x00, 
+	0x28, 0x00, 0xD1, 0x00, 0x21, 
+	0x00, 0x00, 0x41, 0x00, 0x80, 0x90, 0x7C, 0xC0, 0x07, 0x32, 0xD0, 0x3F, 0x48, 0x00, 0x7F, 0x10, 
+	0x28, 0x2E, 0xD8, 0x08, 0x28, 0x2C, 0xD3, 0x00, 0x29, 0x2A, 0xD0, 0x35, 0x48, 0x85, 0x24, 0x81, 
+	0x68, 0xCE, 0xB2, 0x81, 0x68, 0x0D, 0x0A, 0x81, 0x6A, 0xC9, 0xB2, 0x01, 0x91, 0x40, 0x6A, 0x00, 
+	0x07, 0x00, 0x0F, 0x00, 0x90, 0x30, 0x48, 0x80, 0x68, 0x28, 0x28, 0x00, 0xD3, 0x64, 0x24, 0x20, 
+	0x46, 0x5A, 0x21, 0x48, 0x43, 0x64, 0x21, 0x0B, 0xF0, 0xCE, 0xF9, 0xE9, 0x00, 0x47, 0x18, 0x00, 
+	0x9A, 0x01, 0x99, 0x20, 0x46, 0x68, 0x43, 0x89, 0x18, 0x70, 0x43, 0x49, 0x1C, 0x48, 0x43, 0x4B, 
+	0x21, 0x40, 0x3F, 0x09, 0x01, 0x0B, 0xF0, 0xBF, 0xF9, 0xB8, 0x42, 0x01, 0xD3, 0x01, 0x20, 0x02, 
+	0x90, 0x02, 0x98, 0xFE, 0xBD, 0x2D, 0x48, 0x00, 0x88, 0xC0, 0xB2, 0x70, 0x47, 0x02, 0x46, 0x00, 
+	0x20, 0x01, 0x2A, 0x09, 0xD0, 
+	0x00, 0x00, 0x42, 0x00, 0x80, 0x02, 0x2A, 0x07, 0xD0, 0x04, 0x2A, 0x07, 0xD0, 0x08, 0x2A, 0x02, 
+	0xD1, 0x1A, 0x48, 0x60, 0x38, 0x80, 0x6B, 0x70, 0x47, 0x08, 0x46, 0x70, 0x47, 0x48, 0x08, 0x70, 
+	0x47, 0x13, 0x48, 0xC0, 0x30, 0x01, 0x69, 0x8A, 0x00, 0x92, 0x08, 0x41, 0x06, 0x52, 0x18, 0x02, 
+	0x61, 0x42, 0x68, 0x0A, 0x43, 0x42, 0x60, 0x81, 0x68, 0x01, 0x22, 0x11, 0x43, 0x81, 0x60, 0x70, 
+	0x47, 0xF8, 0xB5, 0xFF, 0xF7, 0xED, 0xFF, 0x01, 0x24, 0x0F, 0x4F, 0x00, 0x21, 0x3C, 0x73, 0x20, 
+	0x46, 0xFF, 0xF7, 0xD4, 0xFF, 0x38, 0x71, 0x08, 0xF0, 0x03, 0xF9, 0x00, 0x28, 0x01, 0xD0, 0x14, 
+	0x48, 0x04, 0x70, 0x06, 0x4C, 0x20, 0x3C, 0xE0, 0x69, 0x02, 0x28, 0x25, 0xD1, 0x11, 0x49, 0x24, 
+	0xE0, 0x00, 0x00, 0x11, 0x40, 0x00, 0x00, 0x01, 0x40, 0x00, 0xFF, 0x01, 0x40, 0xF8, 0xDF, 0x00, 
+	0x00, 0x98, 0xD6, 0x00, 0x00, 
+	0x00, 0x00, 0x43, 0x00, 0x80, 0x40, 0x40, 0x00, 0x80, 0x9C, 0x00, 0x00, 0x20, 0x71, 0x02, 0x00, 
+	0x00, 0x60, 0xF1, 0xFF, 0x0F, 0x42, 0x04, 0x00, 0x20, 0x8D, 0x95, 0x00, 0x00, 0x00, 0xED, 0x00, 
+	0xE0, 0x58, 0xDE, 0x00, 0x00, 0xFF, 0x00, 0xAF, 0x40, 0x0A, 0xA0, 0x00, 0x00, 0x96, 0x02, 0x00, 
+	0x20, 0x64, 0x02, 0x00, 0x20, 0x85, 0x99, 0x00, 0x00, 0xFF, 0x49, 0x05, 0x20, 0x04, 0xF0, 0xEC, 
+	0xFB, 0x00, 0x20, 0x78, 0x71, 0xFD, 0x48, 0x40, 0x69, 0xFD, 0x49, 0x01, 0x22, 0x09, 0x78, 0x00, 
+	0x02, 0x12, 0x03, 0x89, 0x18, 0x08, 0x43, 0xFB, 0x49, 0x08, 0x60, 0x00, 0x20, 0xFA, 0x4A, 0x0F, 
+	0x21, 0x83, 0x00, 0x9B, 0x18, 0x19, 0x60, 0x40, 0x1C, 0x41, 0x28, 0xF9, 0xD3, 0xF7, 0x49, 0x4A, 
+	0x68, 0xF7, 0x4D, 0xA8, 0x78, 0x00, 0x28, 0x05, 0xD0, 0x05, 0x20, 0x82, 0x43, 0xD0, 0x06, 0x01, 
+	0xD4, 0xC0, 0x20, 0x82, 0x43, 
+	0x00, 0x00, 0x44, 0x00, 0x80, 0xFF, 0xF7, 0x76, 0xFF, 0x03, 0x09, 0xF2, 0x48, 0xF2, 0x4E, 0x02, 
+	0xD0, 0xB3, 0x79, 0x01, 0x2B, 0x03, 0xD0, 0x23, 0x69, 0x5B, 0x07, 0x00, 0xD0, 0x00, 0x20, 0x82, 
+	0x43, 0xE8, 0x48, 0xC0, 0x38, 0x02, 0x60, 0x3A, 0x7F, 0xBB, 0x7E, 0x12, 0x02, 0x1A, 0x43, 0x82, 
+	0x60, 0xCA, 0x68, 0xF0, 0x23, 0x9A, 0x43, 0x2B, 0x78, 0x1A, 0x43, 0x42, 0x61, 0x0A, 0x69, 0x82, 
+	0x61, 0x4A, 0x69, 0xC2, 0x61, 0x8A, 0x69, 0x02, 0x62, 0xCA, 0x69, 0x42, 0x62, 0x0B, 0x6A, 0xE3, 
+	0x4A, 0x13, 0x40, 0x3A, 0x7E, 0x13, 0x43, 0x12, 0x04, 0x13, 0x43, 0x83, 0x62, 0x4A, 0x6A, 0xC2, 
+	0x62, 0x8A, 0x6A, 0x02, 0x63, 0xCA, 0x6A, 0x42, 0x63, 0x0A, 0x6B, 0x82, 0x63, 0x4A, 0x6B, 0xC2, 
+	0x63, 0x88, 0x6B, 0xD4, 0x4B, 0x80, 0x3B, 0x18, 0x60, 0xC8, 0x6B, 0x58, 0x60, 0x08, 0x6C, 0x98, 
+	0x60, 0x48, 0x6C, 0xD8, 0x60, 
+	0x00, 0x00, 0x45, 0x00, 0x80, 0x88, 0x6C, 0x18, 0x61, 0xC8, 0x6C, 0x58, 0x61, 0x08, 0x6D, 0x58, 
+	0x62, 0xD1, 0x48, 0x60, 0x38, 0x00, 0x69, 0xCB, 0x4F, 0x80, 0x09, 0x80, 0x01, 0x40, 0x3F, 0xF8, 
+	0x63, 0x0D, 0x20, 0x00, 0x07, 0x98, 0x61, 0xC5, 0x48, 0x40, 0x6B, 0x38, 0x61, 0xCC, 0x49, 0x00, 
+	0x20, 0x82, 0x00, 0xD2, 0x18, 0xD1, 0x62, 0x40, 0x1C, 0x09, 0x28, 0xF9, 0xD3, 0x20, 0x69, 0x00, 
+	0x28, 0x03, 0xD1, 0xF8, 0x68, 0x40, 0x00, 0x40, 0x08, 0xF8, 0x60, 0xE0, 0x69, 0x02, 0x28, 0x06, 
+	0xD1, 0xBC, 0x49, 0xC0, 0x39, 0x48, 0x69, 0x01, 0x22, 0xD2, 0x02, 0x10, 0x43, 0x48, 0x61, 0xFF, 
+	0xF7, 0xC4, 0xFE, 0xB1, 0x7C, 0x49, 0x07, 0xC9, 0x0F, 0x08, 0x40, 0x28, 0x72, 0xF8, 0xBD, 0xF8, 
+	0xB5, 0xFF, 0xF7, 0x16, 0xFF, 0xB6, 0x4F, 0x02, 0x25, 0x20, 0x3F, 0x3D, 0x73, 0x00, 0x21, 0x28, 
+	0x46, 0xFF, 0xF7, 0xFC, 0xFE, 
+	0x00, 0x00, 0x46, 0x00, 0x80, 0x38, 0x71, 0x08, 0xF0, 0x2B, 0xF8, 0x00, 0x28, 0x02, 0xD0, 0xB5, 
+	0x49, 0x01, 0x20, 0x08, 0x70, 0xB0, 0x4C, 0x20, 0x3C, 0xE0, 0x69, 0x02, 0x28, 0x78, 0x78, 0x03, 
+	0xD1, 0xC0, 0x1C, 0x80, 0x08, 0x80, 0x00, 0xFF, 0xE7, 0xAB, 0x4E, 0x60, 0x3E, 0xF1, 0x6A, 0x41, 
+	0x43, 0x79, 0x71, 0xAD, 0x49, 0x05, 0x20, 0x04, 0xF0, 0x2F, 0xFB, 0xA0, 0x48, 0x80, 0x69, 0x01, 
+	0x21, 0x00, 0x02, 0x09, 0x03, 0x08, 0x43, 0x9F, 0x49, 0x08, 0x60, 0x9F, 0x49, 0x00, 0x20, 0x82, 
+	0x00, 0x52, 0x18, 0x15, 0x60, 0x40, 0x1C, 0x41, 0x28, 0xF9, 0xD3, 0x9C, 0x4B, 0x99, 0x6D, 0x9C, 
+	0x48, 0x00, 0x90, 0x80, 0x78, 0x00, 0x28, 0x05, 0xD0, 0x05, 0x20, 0x81, 0x43, 0xC8, 0x06, 0x01, 
+	0xD4, 0xC0, 0x20, 0x81, 0x43, 0xFF, 0xF7, 0xBE, 0xFE, 0x02, 0x09, 0x96, 0x48, 0x96, 0x4D, 0x02, 
+	0xD0, 0xAA, 0x79, 0x01, 0x2A, 
+	0x00, 0x00, 0x47, 0x00, 0x80, 0x03, 0xD0, 0x22, 0x69, 0x52, 0x07, 0x00, 0xD0, 0x00, 0x20, 0x8D, 
+	0x4A, 0x81, 0x43, 0xC0, 0x3A, 0x11, 0x60, 0x78, 0x7F, 0xF9, 0x7E, 0x00, 0x02, 0x08, 0x43, 0x90, 
+	0x60, 0x18, 0x6E, 0x50, 0x61, 0x58, 0x6E, 0x90, 0x61, 0x98, 0x6E, 0xD0, 0x61, 0xD8, 0x6E, 0x10, 
+	0x62, 0x18, 0x6F, 0x50, 0x62, 0x59, 0x6F, 0x89, 0x48, 0x01, 0x40, 0x78, 0x7E, 0x01, 0x43, 0x00, 
+	0x04, 0x01, 0x43, 0x91, 0x62, 0x98, 0x6F, 0xD0, 0x62, 0xD8, 0x6F, 0x10, 0x63, 0x7F, 0x48, 0x80, 
+	0x30, 0x01, 0x68, 0x51, 0x63, 0x41, 0x68, 0x91, 0x63, 0x81, 0x68, 0xD1, 0x63, 0xC2, 0x68, 0x79, 
+	0x49, 0x80, 0x39, 0x0A, 0x60, 0x02, 0x69, 0x4A, 0x60, 0x42, 0x69, 0x8A, 0x60, 0x82, 0x69, 0xCA, 
+	0x60, 0xC2, 0x69, 0x0A, 0x61, 0x02, 0x6A, 0x4A, 0x61, 0x40, 0x6A, 0x48, 0x62, 0x30, 0x69, 0x71, 
+	0x4A, 0x40, 0x3A, 0xD0, 0x63, 
+	0x00, 0x00, 0x48, 0x00, 0x80, 0x0D, 0x20, 0x00, 0x07, 0x88, 0x61, 0x6C, 0x48, 0x80, 0x6B, 0x10, 
+	0x61, 0x73, 0x4B, 0x00, 0x20, 0x9B, 0x1C, 0x86, 0x00, 0x76, 0x18, 0xF3, 0x62, 0x40, 0x1C, 0x08, 
+	0x28, 0xF9, 0xD3, 0x6F, 0x48, 0xD0, 0x60, 0x20, 0x69, 0x00, 0x28, 0x03, 0xD1, 0xD0, 0x68, 0x40, 
+	0x00, 0x40, 0x08, 0xD0, 0x60, 0xFF, 0xF7, 0x19, 0xFE, 0xA9, 0x7C, 0x09, 0x07, 0xC9, 0x0F, 0x08, 
+	0x40, 0x00, 0x99, 0x08, 0x72, 0xF8, 0xBD, 0x10, 0xB5, 0xFF, 0xF7, 0x6A, 0xFE, 0x00, 0x20, 0x5E, 
+	0x49, 0x0F, 0x22, 0x83, 0x00, 0x5B, 0x18, 0x1A, 0x60, 0x40, 0x1C, 0x41, 0x28, 0xF9, 0xD3, 0x59, 
+	0x4A, 0x00, 0x20, 0x5F, 0x49, 0x80, 0x3A, 0x83, 0x00, 0x9B, 0x18, 0xD9, 0x62, 0x40, 0x1C, 0x09, 
+	0x28, 0xF9, 0xD3, 0x59, 0x48, 0xA0, 0x38, 0x00, 0x68, 0x52, 0x49, 0xC0, 0x39, 0x88, 0x60, 0x56, 
+	0x48, 0x60, 0x38, 0x00, 0x69, 
+	0x00, 0x00, 0x49, 0x00, 0x80, 0x4F, 0x49, 0x80, 0x09, 0x80, 0x01, 0x40, 0x39, 0xC8, 0x63, 0x4B, 
+	0x4A, 0x10, 0x6A, 0x56, 0x4B, 0x01, 0x24, 0x1B, 0x78, 0x00, 0x02, 0x24, 0x03, 0x1B, 0x19, 0x18, 
+	0x43, 0x48, 0x4B, 0x18, 0x60, 0x10, 0x6C, 0x08, 0x61, 0x10, 0xBD, 0x10, 0xB5, 0xFF, 0xF7, 0x38, 
+	0xFE, 0x00, 0x20, 0x45, 0x4A, 0x02, 0x21, 0x83, 0x00, 0x9B, 0x18, 0x19, 0x60, 0x40, 0x1C, 0x41, 
+	0x28, 0xF9, 0xD3, 0x47, 0x4A, 0x3F, 0x49, 0x00, 0x20, 0x92, 0x1C, 0x80, 0x39, 0x83, 0x00, 0x5B, 
+	0x18, 0xDA, 0x62, 0x40, 0x1C, 0x09, 0x28, 0xF9, 0xD3, 0x3F, 0x4A, 0x60, 0x3A, 0xD3, 0x68, 0x39, 
+	0x48, 0xC0, 0x38, 0x83, 0x60, 0x12, 0x69, 0x37, 0x4B, 0x40, 0x3B, 0xDA, 0x63, 0x4A, 0x6A, 0x03, 
+	0x24, 0x64, 0x02, 0x22, 0x43, 0x4A, 0x62, 0x81, 0x69, 0x01, 0x22, 0xC9, 0x0D, 0xC9, 0x05, 0x92, 
+	0x05, 0x89, 0x18, 0x81, 0x61, 
+	0x00, 0x00, 0x4A, 0x00, 0x80, 0x41, 0x69, 0x42, 0x15, 0x11, 0x43, 0x41, 0x61, 0x2B, 0x48, 0x01, 
+	0x6A, 0x37, 0x4A, 0x01, 0x24, 0x12, 0x78, 0x09, 0x02, 0x24, 0x03, 0x12, 0x19, 0x11, 0x43, 0x29, 
+	0x4A, 0x11, 0x60, 0x40, 0x6C, 0x18, 0x61, 0x10, 0xBD, 0xF8, 0xB5, 0x29, 0x4D, 0x08, 0x20, 0x20, 
+	0x3D, 0x28, 0x73, 0x00, 0x21, 0xFF, 0xF7, 0xE2, 0xFD, 0x27, 0x4C, 0x28, 0x71, 0xA0, 0x3C, 0xA0, 
+	0x69, 0x2C, 0x49, 0xC6, 0xB2, 0x05, 0x20, 0x04, 0xF0, 0x27, 0xFA, 0x20, 0x46, 0x40, 0x38, 0xC1, 
+	0x6B, 0x1C, 0x48, 0xC0, 0x38, 0x01, 0x60, 0x61, 0x68, 0x41, 0x61, 0xA1, 0x68, 0x81, 0x61, 0xE1, 
+	0x68, 0xC1, 0x61, 0x21, 0x69, 0x01, 0x62, 0x61, 0x69, 0x41, 0x62, 0xA1, 0x69, 0x1B, 0x4A, 0x11, 
+	0x40, 0x31, 0x43, 0x32, 0x04, 0x11, 0x43, 0x81, 0x62, 0xE1, 0x69, 0xC1, 0x62, 0x21, 0x6A, 0x01, 
+	0x63, 0x61, 0x6A, 0x41, 0x63, 
+	0x00, 0x00, 0x4B, 0x00, 0x80, 0xA1, 0x6A, 0x81, 0x63, 0xE1, 0x6A, 0xC1, 0x63, 0x21, 0x6B, 0x0D, 
+	0x48, 0x80, 0x38, 0x01, 0x60, 0x61, 0x6B, 0x41, 0x60, 0xA1, 0x6B, 0x81, 0x60, 0xE1, 0x6B, 0xC1, 
+	0x60, 0x40, 0x34, 0x21, 0x68, 0x01, 0x61, 0x61, 0x68, 0x41, 0x61, 0xA1, 0x68, 0x41, 0x62, 0x0D, 
+	0x21, 0x09, 0x07, 0x81, 0x61, 0x27, 0x46, 0x1F, 0xE0, 0xF5, 0x96, 0x00, 0x00, 0x54, 0xE0, 0x00, 
+	0x00, 0x70, 0x02, 0x00, 0x20, 0xC0, 0x00, 0x11, 0x40, 0x00, 0x04, 0x11, 0x40, 0x58, 0xDE, 0x00, 
+	0x00, 0xBC, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0xF8, 0xDF, 0x00, 0x00, 0x00, 0xFF, 0x00, 
+	0xFF, 0x01, 0x00, 0x00, 0xC0, 0x64, 0x02, 0x00, 0x20, 0xBB, 0x9C, 0x00, 0x00, 0x73, 0x02, 0x00, 
+	0x20, 0x74, 0x02, 0x00, 0x20, 0x0F, 0x9E, 0x00, 0x00, 0x40, 0x37, 0xF8, 0x69, 0x02, 0x28, 0x04, 
+	0xD1, 0x68, 0x78, 0xC0, 0x1C, 
+	0x00, 0x00, 0x4C, 0x00, 0x80, 0x86, 0x08, 0xB6, 0x00, 0x00, 0xE0, 0x6E, 0x78, 0x38, 0x6A, 0x01, 
+	0x28, 0x02, 0xD1, 0xFF, 0xF7, 0x4A, 0xFF, 0x01, 0xE0, 0xFF, 0xF7, 0x15, 0xFF, 0xE0, 0x6A, 0xA1, 
+	0x6B, 0x70, 0x43, 0x40, 0x18, 0xE1, 0x6B, 0x40, 0x18, 0x68, 0x71, 0x38, 0x69, 0x02, 0x28, 0x04, 
+	0xD0, 0xFF, 0x48, 0xC1, 0x68, 0x49, 0x00, 0x49, 0x08, 0xC1, 0x60, 0xFF, 0xF7, 0x16, 0xFD, 0xFD, 
+	0x49, 0x89, 0x7C, 0xC9, 0x06, 0xC9, 0x0F, 0x08, 0x40, 0xFB, 0x49, 0x08, 0x72, 0xF8, 0xBD, 0xFB, 
+	0x4A, 0x00, 0x21, 0x8B, 0x00, 0x9B, 0x18, 0x18, 0x60, 0x49, 0x1C, 0xC9, 0xB2, 0x41, 0x29, 0xF8, 
+	0xD3, 0x70, 0x47, 0xF8, 0xB5, 0xFF, 0xF7, 0x6C, 0xFD, 0xF3, 0x4C, 0xF1, 0x4E, 0x20, 0x3C, 0x20, 
+	0x7F, 0x01, 0x25, 0x2D, 0x03, 0x80, 0x3E, 0x10, 0x28, 0x04, 0xD9, 0xF1, 0x48, 0x80, 0x68, 0xC0, 
+	0xB2, 0x40, 0x19, 0xB0, 0x60, 
+	0x00, 0x00, 0x4D, 0x00, 0x80, 0x0F, 0x20, 0xFF, 0xF7, 0xE2, 0xFF, 0x00, 0x27, 0xE7, 0x75, 0x23, 
+	0x46, 0x67, 0x86, 0xE9, 0x4C, 0x39, 0x46, 0xA7, 0x71, 0xE7, 0x71, 0x01, 0x20, 0x1F, 0x65, 0xFF, 
+	0xF7, 0x2D, 0xFD, 0x18, 0x71, 0x10, 0x20, 0x18, 0x73, 0xE6, 0x49, 0x05, 0x20, 0x04, 0xF0, 0x74, 
+	0xF9, 0xE0, 0x48, 0x20, 0x38, 0x00, 0x69, 0xDE, 0x49, 0x02, 0x28, 0x03, 0xD0, 0xC8, 0x68, 0x40, 
+	0x00, 0x40, 0x08, 0xC8, 0x60, 0x00, 0x20, 0x82, 0x00, 0x52, 0x18, 0x57, 0x61, 0x40, 0x1C, 0x09, 
+	0x28, 0xF9, 0xD3, 0xD7, 0x48, 0x40, 0x30, 0x05, 0x60, 0xB1, 0x6A, 0xDB, 0x4A, 0x11, 0x40, 0xB1, 
+	0x62, 0x0D, 0x21, 0xD3, 0x4A, 0x09, 0x07, 0x40, 0x3A, 0x91, 0x61, 0xD2, 0x49, 0x09, 0x7C, 0x00, 
+	0x29, 0x07, 0xD0, 0x01, 0x69, 0xD5, 0x4A, 0x11, 0x40, 0x01, 0x61, 0x01, 0x69, 0xD4, 0x4A, 0x11, 
+	0x43, 0x01, 0x61, 0xFF, 0xF7, 
+	0x00, 0x00, 0x4E, 0x00, 0x80, 0xB2, 0xFC, 0x20, 0x72, 0xF8, 0xBD, 0xF8, 0xB5, 0x07, 0x46, 0x0F, 
+	0x20, 0xFF, 0xF7, 0x9D, 0xFF, 0x39, 0x46, 0x01, 0x20, 0xFF, 0xF7, 0xF0, 0xFC, 0x16, 0x21, 0x48, 
+	0x43, 0xCC, 0x4D, 0x04, 0x46, 0x28, 0x5A, 0xC4, 0x4E, 0x20, 0x3E, 0x70, 0x86, 0x38, 0x46, 0x07, 
+	0xF0, 0x58, 0xFE, 0xF0, 0x75, 0x72, 0x8E, 0x00, 0x21, 0x01, 0x23, 0xC7, 0x4E, 0xBF, 0x4F, 0x65, 
+	0x19, 0x18, 0x46, 0x88, 0x40, 0x10, 0x42, 0x06, 0xD0, 0x68, 0x18, 0x44, 0x7B, 0x00, 0x79, 0x30, 
+	0x5C, 0x80, 0x00, 0xC0, 0x19, 0x04, 0x60, 0x49, 0x1C, 0x08, 0x29, 0xF1, 0xD3, 0xF8, 0xBD, 0xB6, 
+	0x49, 0x10, 0xB5, 0x20, 0x39, 0x49, 0x79, 0xB2, 0x4B, 0x09, 0x18, 0xCA, 0x00, 0x89, 0x18, 0xBB, 
+	0x4A, 0x00, 0x20, 0x12, 0x68, 0x8A, 0x18, 0x11, 0x18, 0x09, 0x7B, 0x0C, 0x02, 0x0C, 0x43, 0x81, 
+	0x00, 0xC9, 0x18, 0x4C, 0x61, 
+	0x00, 0x00, 0x4F, 0x00, 0x80, 0x40, 0x1C, 0x09, 0x28, 0xF5, 0xD3, 0x10, 0xBD, 0xF0, 0xB5, 0xA9, 
+	0x4C, 0x62, 0x7C, 0xA9, 0x4B, 0x20, 0x3B, 0x00, 0x2A, 0x01, 0xD1, 0x01, 0x22, 0x00, 0xE0, 0x5A, 
+	0x7D, 0x94, 0x46, 0x62, 0x7C, 0x00, 0x2A, 0x01, 0xD1, 0xC2, 0x1C, 0x03, 0xE0, 0x5A, 0x78, 0x1C, 
+	0x7D, 0x12, 0x1B, 0x12, 0x18, 0xD2, 0xB2, 0x96, 0x46, 0xA9, 0x4D, 0x00, 0x22, 0x0C, 0x01, 0x66, 
+	0x19, 0x9C, 0x78, 0x73, 0x46, 0x03, 0x2A, 0x02, 0xD2, 0x63, 0x46, 0x53, 0x43, 0x1B, 0x18, 0xDB, 
+	0xB2, 0xFF, 0x29, 0x01, 0xD1, 0x0F, 0x25, 0x01, 0xE0, 0x95, 0x00, 0x75, 0x59, 0x9E, 0x4F, 0xE3, 
+	0x18, 0xFB, 0x5C, 0x96, 0x4F, 0x9B, 0x00, 0xDB, 0x19, 0x1D, 0x60, 0x52, 0x1C, 0xD2, 0xB2, 0x04, 
+	0x2A, 0xE7, 0xD3, 0xF0, 0xBD, 0xF0, 0xB5, 0x8F, 0x4A, 0x9A, 0x49, 0x60, 0x3A, 0x13, 0x6A, 0x96, 
+	0x4A, 0x52, 0x1E, 0x9A, 0x5C, 
+	0x00, 0x00, 0x50, 0x00, 0x80, 0x93, 0x00, 0x8D, 0x4A, 0x9A, 0x18, 0x13, 0x68, 0x96, 0x46, 0x9C, 
+	0x46, 0x0C, 0x23, 0x13, 0x60, 0x86, 0x4A, 0x80, 0x3A, 0x13, 0x68, 0x97, 0x68, 0x94, 0x6A, 0x15, 
+	0x68, 0x01, 0x26, 0xB6, 0x02, 0xB5, 0x43, 0x15, 0x60, 0xFF, 0x25, 0x02, 0x35, 0x95, 0x60, 0x00, 
+	0x28, 0x07, 0xD0, 0x95, 0x6A, 0x84, 0x4E, 0xF6, 0x43, 0x35, 0x40, 0x05, 0x43, 0x00, 0x04, 0x05, 
+	0x43, 0x95, 0x62, 0x07, 0x20, 0xD0, 0x60, 0x15, 0x68, 0x01, 0x26, 0xB6, 0x07, 0x35, 0x43, 0x15, 
+	0x60, 0xD5, 0x68, 0xED, 0x07, 0x01, 0xD1, 0x49, 0x1E, 0xFA, 0xD2, 0xD0, 0x60, 0x60, 0x46, 0x71, 
+	0x46, 0x08, 0x60, 0x13, 0x60, 0x97, 0x60, 0x94, 0x62, 0xF0, 0xBD, 0xF0, 0xB5, 0xD3, 0x00, 0xD2, 
+	0x18, 0x7D, 0x4B, 0x79, 0x4E, 0xD4, 0x18, 0x02, 0x25, 0x70, 0x4F, 0x0D, 0xE0, 0xC2, 0x08, 0xA3, 
+	0x5C, 0x42, 0x07, 0x52, 0x0F, 
+	0x00, 0x00, 0x51, 0x00, 0x80, 0xD3, 0x40, 0x2A, 0x46, 0xDB, 0x07, 0x00, 0xD1, 0x01, 0x22, 0x33, 
+	0x5C, 0x9B, 0x00, 0xDB, 0x19, 0x1A, 0x60, 0x40, 0x1C, 0x88, 0x42, 0xEF, 0xD3, 0xF0, 0xBD, 0xF8, 
+	0xB5, 0x65, 0x4B, 0x05, 0x46, 0x01, 0x46, 0x20, 0x3B, 0x18, 0x7B, 0xFF, 0xF7, 0x27, 0xFC, 0x04, 
+	0x46, 0x18, 0x7B, 0x02, 0x28, 0x00, 0xD0, 0x0F, 0x20, 0xFF, 0xF7, 0xC9, 0xFE, 0x16, 0x20, 0x44, 
+	0x43, 0x64, 0x48, 0x00, 0x21, 0x64, 0x4F, 0x5D, 0x4E, 0x20, 0x18, 0x62, 0x4A, 0x12, 0x5B, 0x01, 
+	0x23, 0x8B, 0x40, 0x1A, 0x42, 0x06, 0xD0, 0x42, 0x18, 0x53, 0x7B, 0x12, 0x79, 0xBA, 0x5C, 0x92, 
+	0x00, 0x92, 0x19, 0x13, 0x60, 0x49, 0x1C, 0x08, 0x29, 0xEF, 0xD3, 0x53, 0x49, 0x51, 0x4C, 0x20, 
+	0x39, 0x09, 0x7B, 0x60, 0x3C, 0x02, 0x29, 0x01, 0xD1, 0xC0, 0x78, 0x03, 0xE0, 0x04, 0x29, 0x18, 
+	0xD1, 0x5A, 0x48, 0x40, 0x5D, 
+	0x00, 0x00, 0x52, 0x00, 0x80, 0xFF, 0x28, 0x03, 0xD0, 0x0C, 0x22, 0x80, 0x00, 0x80, 0x19, 0x02, 
+	0x60, 0x04, 0x29, 0x0E, 0xD1, 0x20, 0x6B, 0xEA, 0x07, 0x40, 0x00, 0xD2, 0x0F, 0xA8, 0x42, 0x04, 
+	0xD9, 0xE0, 0x69, 0xA1, 0x69, 0x41, 0x18, 0xE0, 0x69, 0x01, 0xE0, 0xE1, 0x69, 0x00, 0x20, 0xFF, 
+	0xF7, 0x9C, 0xFF, 0x41, 0x48, 0x20, 0x38, 0x00, 0x7B, 0x08, 0x28, 0x0E, 0xD1, 0xE0, 0x69, 0xA1, 
+	0x69, 0x40, 0x18, 0xA1, 0x6A, 0x40, 0x18, 0x3B, 0x49, 0x20, 0x39, 0x09, 0x6A, 0x01, 0x29, 0x04, 
+	0xD0, 0x38, 0x5C, 0x01, 0x21, 0x80, 0x00, 0x80, 0x19, 0x01, 0x60, 0xF8, 0xBD, 0xFE, 0xB5, 0x35, 
+	0x4A, 0x14, 0x25, 0x60, 0x3A, 0xD0, 0x6A, 0x01, 0x90, 0x33, 0x48, 0x00, 0x21, 0x20, 0x38, 0x44, 
+	0x78, 0x86, 0x78, 0x81, 0x73, 0x01, 0x72, 0x81, 0x71, 0xC1, 0x71, 0xC1, 0x70, 0x01, 0x74, 0x81, 
+	0x74, 0x63, 0x1E, 0xC3, 0x74, 
+	0x00, 0x00, 0x53, 0x00, 0x80, 0x81, 0x75, 0xC1, 0x72, 0x11, 0x6A, 0x49, 0x1E, 0x81, 0x72, 0x00, 
+	0x20, 0xFF, 0xF7, 0x85, 0xFF, 0x00, 0x20, 0xFF, 0xF7, 0xE2, 0xFE, 0x07, 0xF0, 0xE7, 0xFC, 0x00, 
+	0x20, 0x07, 0xF0, 0x0E, 0xFD, 0x07, 0xF0, 0xFE, 0xFC, 0x22, 0x4F, 0x20, 0x3F, 0x38, 0x69, 0x00, 
+	0x28, 0x09, 0xD0, 0x21, 0x4A, 0x28, 0x49, 0x20, 0x3A, 0x92, 0x7A, 0x0C, 0x20, 0x89, 0x5C, 0x1F, 
+	0x4A, 0x89, 0x00, 0x89, 0x18, 0x08, 0x60, 0xF8, 0x69, 0x02, 0x28, 0x07, 0xD1, 0x00, 0x21, 0x08, 
+	0x46, 0xFF, 0xF7, 0xDC, 0xFE, 0xE4, 0x1C, 0xA4, 0x08, 0xA4, 0x00, 0x06, 0xE0, 0x1E, 0x49, 0x17, 
+	0x4A, 0x89, 0x5D, 0x01, 0x20, 0x89, 0x00, 0x89, 0x18, 0x08, 0x60, 0x01, 0x98, 0x60, 0x43, 0x12, 
+	0x4C, 0x20, 0x3C, 0xE0, 0x73, 0x0F, 0x48, 0xC0, 0x7B, 0xFF, 0xF7, 0xFC, 0xFE, 0x0C, 0x48, 0x1C, 
+	0x49, 0x80, 0x38, 0xC1, 0x60, 
+	0x00, 0x00, 0x54, 0x00, 0x80, 0x03, 0xF0, 0xAE, 0xFF, 0x00, 0x90, 0x09, 0x48, 0x80, 0x38, 0x00, 
+	0x68, 0x03, 0x21, 0x49, 0x07, 0x08, 0x43, 0x06, 0x49, 0x80, 0x39, 0x08, 0x60, 0x04, 0x48, 0x80, 
+	0x38, 0x00, 0x68, 0x80, 0x00, 0x01, 0xD5, 0x6D, 0x1E, 0xF8, 0xD2, 0xF8, 0x69, 0x02, 0x28, 0x21, 
+	0xE0, 0x80, 0x00, 0x11, 0x40, 0xF8, 0xDF, 0x00, 0x00, 0xBC, 0x00, 0x00, 0x20, 0x00, 0x04, 0x11, 
+	0x40, 0x58, 0xDE, 0x00, 0x00, 0xA3, 0x9F, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xE0, 0xE3, 
+	0xF1, 0x00, 0x0F, 0x08, 0x08, 0x2C, 0xE1, 0x00, 0x00, 0xC0, 0xE0, 0x00, 0x00, 0x78, 0x02, 0x00, 
+	0x20, 0x58, 0xD6, 0x00, 0x00, 0x88, 0x90, 0x00, 0x00, 0x18, 0xE1, 0x00, 0x00, 0x04, 0xE1, 0x00, 
+	0x00, 0xFF, 0x03, 0x00, 0x00, 0x05, 0xD1, 0x01, 0x21, 0x00, 0x20, 0xFF, 0xF7, 0x87, 0xFE, 0x00, 
+	0x20, 0x0C, 0xE0, 0x0F, 0x20, 
+	0x00, 0x00, 0x55, 0x00, 0x80, 0xFF, 0x4A, 0x91, 0x5D, 0x8B, 0x00, 0xFF, 0x49, 0x5B, 0x18, 0x18, 
+	0x60, 0x92, 0x19, 0x52, 0x78, 0x01, 0x20, 0x92, 0x00, 0x51, 0x18, 0x08, 0x60, 0x60, 0x72, 0x01, 
+	0x20, 0xFF, 0xF7, 0x5D, 0xFE, 0xF9, 0x48, 0x01, 0x68, 0x03, 0x22, 0x52, 0x07, 0x11, 0x43, 0x01, 
+	0x60, 0x01, 0x69, 0x02, 0x22, 0x11, 0x43, 0x01, 0x61, 0x00, 0x98, 0x03, 0xF0, 0x57, 0xFF, 0xFE, 
+	0xBD, 0x10, 0xB5, 0xF3, 0x4C, 0x00, 0x21, 0xE1, 0x72, 0xA1, 0x75, 0xF2, 0x49, 0x89, 0x69, 0x01, 
+	0x22, 0x12, 0x03, 0x09, 0x02, 0x80, 0x18, 0x01, 0x43, 0xEC, 0x48, 0xC0, 0x30, 0x01, 0x60, 0x07, 
+	0xF0, 0x45, 0xFC, 0xA0, 0x79, 0xFF, 0xF7, 0xDB, 0xFE, 0xA0, 0x79, 0xFF, 0xF7, 0x38, 0xFE, 0xA0, 
+	0x79, 0x07, 0xF0, 0x66, 0xFC, 0x07, 0xF0, 0x56, 0xFC, 0xE4, 0x4C, 0x20, 0x68, 0x00, 0x28, 0x02, 
+	0xD0, 0x00, 0x20, 0xFF, 0xF7, 
+	0x00, 0x00, 0x56, 0x00, 0x80, 0x77, 0xFE, 0xE4, 0x48, 0xE0, 0x60, 0x03, 0xF0, 0x2B, 0xFF, 0x21, 
+	0x69, 0x02, 0x22, 0x11, 0x43, 0x21, 0x61, 0x21, 0x68, 0x03, 0x22, 0x52, 0x07, 0x11, 0x43, 0x21, 
+	0x60, 0x03, 0xF0, 0x24, 0xFF, 0x10, 0xBD, 0xDD, 0x49, 0x02, 0x20, 0x08, 0x70, 0xDC, 0x48, 0x41, 
+	0x6B, 0x02, 0x6B, 0x8A, 0x18, 0xD6, 0x49, 0xCA, 0x73, 0x00, 0x6B, 0x88, 0x71, 0xC0, 0xB2, 0x40, 
+	0x1C, 0xC8, 0x71, 0xD8, 0x48, 0x00, 0x78, 0xBB, 0xE7, 0xD4, 0x48, 0x01, 0x21, 0x01, 0x70, 0xD4, 
+	0x48, 0x02, 0x6B, 0xCF, 0x48, 0xC2, 0x73, 0x00, 0x22, 0x82, 0x71, 0xC1, 0x71, 0xD2, 0x48, 0x00, 
+	0x78, 0xAE, 0xE7, 0xD2, 0x49, 0x08, 0x70, 0xC1, 0x07, 0x00, 0xD0, 0xED, 0xE7, 0x80, 0x07, 0x00, 
+	0xD5, 0xD9, 0xE7, 0x70, 0x47, 0xF0, 0xB5, 0x00, 0x21, 0x08, 0x20, 0xFF, 0xF7, 0xBF, 0xFA, 0xCC, 
+	0x4C, 0x16, 0x22, 0x00, 0x21, 
+	0x00, 0x00, 0x57, 0x00, 0x80, 0xBF, 0x4D, 0xC0, 0x4F, 0x50, 0x43, 0x06, 0x19, 0x22, 0x5A, 0x01, 
+	0x23, 0x8B, 0x40, 0x1A, 0x42, 0x06, 0xD0, 0x72, 0x18, 0x53, 0x7B, 0x12, 0x79, 0xAA, 0x5C, 0x92, 
+	0x00, 0xD2, 0x19, 0x13, 0x60, 0x49, 0x1C, 0x08, 0x29, 0xF0, 0xD3, 0xBD, 0x48, 0x40, 0x30, 0x00, 
+	0x6A, 0x03, 0x28, 0x0A, 0xD1, 0xBA, 0x48, 0xC1, 0x69, 0x82, 0x69, 0x80, 0x6A, 0x89, 0x18, 0x08, 
+	0x18, 0x28, 0x5C, 0x02, 0x21, 0x80, 0x00, 0xC0, 0x19, 0x01, 0x60, 0xF0, 0xBD, 0x10, 0xB5, 0xB0, 
+	0x4C, 0x00, 0x20, 0xA0, 0x75, 0xFF, 0xF7, 0x69, 0xFC, 0x20, 0x8E, 0xA0, 0x85, 0xFF, 0xF7, 0xCA, 
+	0xFF, 0x01, 0x20, 0xFF, 0xF7, 0xBC, 0xFD, 0xB3, 0x48, 0xE0, 0x63, 0xA8, 0x48, 0xAA, 0x49, 0xC1, 
+	0x60, 0x01, 0x68, 0x82, 0x03, 0x11, 0x43, 0x01, 0x60, 0x01, 0x69, 0x02, 0x22, 0x11, 0x43, 0x01, 
+	0x61, 0x10, 0xBD, 0x10, 0xB5, 
+	0x00, 0x00, 0x58, 0x00, 0x80, 0xA2, 0x4A, 0x00, 0x20, 0x90, 0x75, 0xA5, 0x49, 0xD0, 0x72, 0x40, 
+	0x31, 0x0B, 0x6A, 0x14, 0x46, 0x2E, 0x20, 0x20, 0x5E, 0x03, 0x2B, 0x01, 0xD1, 0xA6, 0x49, 0x03, 
+	0xE0, 0x0B, 0x6A, 0xA4, 0x49, 0x02, 0x2B, 0x06, 0xD1, 0xD1, 0x63, 0x90, 0x85, 0x00, 0x20, 0xFF, 
+	0xF7, 0x36, 0xFE, 0x00, 0x20, 0x05, 0xE0, 0xD1, 0x63, 0x10, 0x8E, 0x90, 0x85, 0xFF, 0xF7, 0x9A, 
+	0xFF, 0x01, 0x20, 0xFF, 0xF7, 0x8C, 0xFD, 0x00, 0x21, 0x08, 0x20, 0xFF, 0xF7, 0x57, 0xFA, 0x16, 
+	0x21, 0x48, 0x43, 0x97, 0x49, 0x08, 0x5A, 0x02, 0x04, 0x8C, 0x48, 0x01, 0x68, 0xFF, 0x23, 0x1B, 
+	0x04, 0x99, 0x43, 0x0A, 0x43, 0x02, 0x60, 0x8C, 0x49, 0xC1, 0x60, 0x01, 0x68, 0x82, 0x03, 0x11, 
+	0x43, 0x01, 0x60, 0x01, 0x69, 0x02, 0x22, 0x11, 0x43, 0x01, 0x61, 0x10, 0xBD, 0x70, 0xB5, 0x05, 
+	0x46, 0x87, 0x48, 0x02, 0x6B, 
+	0x00, 0x00, 0x59, 0x00, 0x80, 0x82, 0x49, 0x20, 0x31, 0x88, 0x79, 0x82, 0x42, 0x00, 0xD8, 0xC8, 
+	0x79, 0xFF, 0xF7, 0x3B, 0xFD, 0x07, 0xF0, 0x6A, 0xFB, 0x7D, 0x4E, 0x70, 0x8E, 0x07, 0xF0, 0x82, 
+	0xFB, 0x7A, 0x4C, 0x20, 0x68, 0x00, 0x28, 0x02, 0xD0, 0x00, 0x20, 0xFF, 0xF7, 0xA3, 0xFD, 0x07, 
+	0xF0, 0x57, 0xFB, 0x00, 0x21, 0x00, 0x28, 0x03, 0xD0, 0x80, 0x48, 0x00, 0x78, 0x01, 0x28, 0x05, 
+	0xD1, 0xB1, 0x77, 0xB1, 0x86, 0xF1, 0x77, 0x7E, 0x48, 0x31, 0x64, 0x01, 0x60, 0x00, 0x2D, 0x0E, 
+	0xD0, 0xB1, 0x75, 0xF1, 0x72, 0xF5, 0x73, 0x70, 0x48, 0xE0, 0x60, 0x20, 0x68, 0x03, 0x21, 0x49, 
+	0x07, 0x08, 0x43, 0x20, 0x60, 0x20, 0x69, 0x02, 0x21, 0x08, 0x43, 0x20, 0x61, 0x70, 0xBD, 0x01, 
+	0x20, 0xB0, 0x75, 0x70, 0xBD, 0x10, 0xB5, 0x65, 0x48, 0x41, 0x68, 0x65, 0x4C, 0x09, 0x07, 0x09, 
+	0x0F, 0x01, 0x29, 0x04, 0xD0, 
+	0x00, 0x00, 0x5A, 0x00, 0x80, 0x61, 0x49, 0xC0, 0x31, 0x49, 0x68, 0xC9, 0x00, 0x0C, 0xD4, 0x01, 
+	0x69, 0x02, 0x22, 0x91, 0x43, 0x01, 0x61, 0xD1, 0x1E, 0xC1, 0x60, 0x05, 0x20, 0x03, 0xF0, 0x65, 
+	0xFE, 0x64, 0x48, 0xA0, 0x63, 0x01, 0x20, 0x10, 0xBD, 0xA0, 0x7D, 0x10, 0xBD, 0xF3, 0xB5, 0x8E, 
+	0x46, 0x57, 0x48, 0x00, 0x21, 0x41, 0x74, 0xFF, 0x21, 0x01, 0x74, 0x59, 0x48, 0x00, 0x22, 0x84, 
+	0x46, 0x1E, 0xE0, 0x16, 0x21, 0x16, 0x46, 0x4E, 0x43, 0x59, 0x49, 0x00, 0x20, 0x77, 0x18, 0xD3, 
+	0xB2, 0x3C, 0x18, 0x25, 0x79, 0x00, 0x99, 0x8D, 0x42, 0x0E, 0xD3, 0x55, 0x4D, 0x24, 0x79, 0x74, 
+	0x45, 0x0A, 0xD8, 0xAC, 0x5B, 0x01, 0x25, 0x85, 0x40, 0x2C, 0x42, 0x05, 0xD0, 0x48, 0x4C, 0x25, 
+	0x7C, 0xFF, 0x2D, 0x00, 0xD1, 0x23, 0x74, 0x63, 0x74, 0x40, 0x1C, 0x08, 0x28, 0xE8, 0xD3, 0x52, 
+	0x1C, 0x60, 0x46, 0xC0, 0x6A, 
+	0x00, 0x00, 0x5B, 0x00, 0x80, 0x90, 0x42, 0xDC, 0xD8, 0xFC, 0xBD, 0xFF, 0xB5, 0x40, 0x4D, 0x04, 
+	0x46, 0xAF, 0x78, 0x87, 0xB0, 0x10, 0x46, 0x3A, 0x19, 0x19, 0x46, 0x14, 0x26, 0x02, 0x97, 0x01, 
+	0x92, 0xFF, 0xF7, 0xC4, 0xFF, 0x00, 0x21, 0xA9, 0x73, 0xE0, 0xB2, 0x06, 0x90, 0x28, 0x72, 0x28, 
+	0x7C, 0xA8, 0x71, 0xE8, 0x71, 0xE9, 0x70, 0x06, 0x98, 0xA8, 0x74, 0x08, 0x98, 0xE8, 0x74, 0xA9, 
+	0x75, 0xE9, 0x72, 0xA8, 0x79, 0xFF, 0xF7, 0x6B, 0xFD, 0x68, 0x78, 0x29, 0x7C, 0x48, 0x43, 0x00, 
+	0x19, 0x03, 0x90, 0xFF, 0xF7, 0xC4, 0xFC, 0x07, 0xF0, 0xC9, 0xFA, 0x31, 0x4F, 0x40, 0x37, 0x39, 
+	0x69, 0x38, 0x46, 0x20, 0x30, 0x05, 0x90, 0x00, 0x29, 0x1C, 0xD0, 0x68, 0x78, 0x40, 0x08, 0xA0, 
+	0x42, 0x0A, 0xD8, 0xF8, 0x69, 0x02, 0x28, 0x0B, 0xD1, 0x05, 0x98, 0x40, 0x7C, 0x00, 0x28, 0x07, 
+	0xD0, 0x28, 0x7D, 0x40, 0x08, 
+	0x00, 0x00, 0x5C, 0x00, 0x80, 0xA0, 0x42, 0x03, 0xD9, 0x25, 0x48, 0x00, 0x6A, 0x40, 0x1E, 0x00, 
+	0xE0, 0x02, 0x98, 0xA8, 0x72, 0x1B, 0x49, 0xAA, 0x7A, 0x0C, 0x20, 0x89, 0x5C, 0x1A, 0x4A, 0x89, 
+	0x00, 0x89, 0x18, 0x08, 0x60, 0xF8, 0x69, 0x08, 0x99, 0x09, 0x1B, 0x04, 0x91, 0x02, 0x28, 0x0E, 
+	0xD1, 0xE0, 0xB2, 0x00, 0x21, 0xFF, 0xF7, 0xAA, 0xFC, 0x04, 0x98, 0x69, 0x7C, 0x00, 0x1D, 0x2A, 
+	0x7C, 0x80, 0x08, 0x89, 0x1A, 0x80, 0x00, 0x49, 0x1C, 0x41, 0x43, 0xE9, 0x73, 0x0F, 0xE0, 0x0D, 
+	0x4A, 0x01, 0x98, 0x01, 0x21, 0x10, 0x5C, 0x0C, 0x4A, 0x80, 0x00, 0x80, 0x18, 0x01, 0x60, 0x68, 
+	0x7C, 0x29, 0x7C, 0x40, 0x1A, 0x04, 0x99, 0x40, 0x1C, 0x49, 0x1C, 0x48, 0x43, 0xE8, 0x73, 0x05, 
+	0x98, 0xC0, 0x7B, 0xFF, 0xF7, 0xBF, 0xFC, 0x05, 0x49, 0x07, 0x48, 0xC8, 0x60, 0x03, 0xF0, 0x72, 
+	0xFD, 0x00, 0x90, 0x1F, 0xE0, 
+	0x00, 0x00, 0x5D, 0x00, 0x80, 0xC0, 0xE0, 0x00, 0x00, 0x00, 0x04, 0x11, 0x40, 0x00, 0x00, 0x11, 
+	0x40, 0x9C, 0x00, 0x00, 0x20, 0x54, 0xE0, 0x00, 0x00, 0xFF, 0x03, 0x00, 0x00, 0x68, 0x02, 0x00, 
+	0x20, 0x98, 0xDF, 0x00, 0x00, 0x72, 0x02, 0x00, 0x20, 0x71, 0x02, 0x00, 0x20, 0x67, 0x02, 0x00, 
+	0x20, 0x2C, 0xE1, 0x00, 0x00, 0x7D, 0x1D, 0x00, 0x00, 0xC9, 0x2B, 0x00, 0x00, 0x64, 0x02, 0x00, 
+	0x20, 0x6C, 0x02, 0x00, 0x20, 0xD7, 0x48, 0x00, 0x68, 0x03, 0x21, 0x49, 0x07, 0x08, 0x43, 0xD5, 
+	0x49, 0x08, 0x60, 0xD4, 0x48, 0x00, 0x68, 0x80, 0x00, 0x01, 0xD5, 0x76, 0x1E, 0xF9, 0xD2, 0x03, 
+	0x98, 0x40, 0x1C, 0xFF, 0xF7, 0x3C, 0xFC, 0xF8, 0x69, 0x0F, 0x26, 0x02, 0x28, 0x06, 0xD1, 0xE0, 
+	0xB2, 0x01, 0x21, 0xFF, 0xF7, 0x4B, 0xFC, 0x06, 0x98, 0x68, 0x72, 0x0F, 0xE0, 0xCA, 0x48, 0x01, 
+	0x99, 0xCA, 0x4B, 0x41, 0x5C, 
+	0x00, 0x00, 0x5E, 0x00, 0x80, 0x89, 0x00, 0xC9, 0x18, 0x0E, 0x60, 0x01, 0x9A, 0x01, 0x21, 0x80, 
+	0x18, 0x40, 0x78, 0x80, 0x00, 0xC0, 0x18, 0x01, 0x60, 0x64, 0x1C, 0x6C, 0x72, 0x38, 0x69, 0x00, 
+	0x28, 0x1E, 0xD0, 0x68, 0x78, 0x41, 0x08, 0x68, 0x7A, 0x81, 0x42, 0x0A, 0xD0, 0xF9, 0x69, 0x02, 
+	0x29, 0x16, 0xD1, 0x05, 0x99, 0x49, 0x7C, 0x00, 0x29, 0x12, 0xD0, 0x29, 0x7D, 0x49, 0x08, 0x81, 
+	0x42, 0x0E, 0xD9, 0xB9, 0x49, 0xA8, 0x7A, 0xB9, 0x4A, 0x08, 0x5C, 0x80, 0x00, 0x80, 0x18, 0x06, 
+	0x60, 0x02, 0x98, 0x0C, 0x23, 0xC0, 0xB2, 0xA8, 0x72, 0x08, 0x5C, 0x80, 0x00, 0x80, 0x18, 0x03, 
+	0x60, 0xB0, 0x48, 0x01, 0x68, 0x03, 0x22, 0x52, 0x07, 0x11, 0x43, 0x01, 0x60, 0x01, 0x69, 0x02, 
+	0x22, 0x11, 0x43, 0x01, 0x61, 0x00, 0x98, 0x03, 0xF0, 0xF9, 0xFC, 0x0B, 0xB0, 0xF0, 0xBD, 0xAC, 
+	0x49, 0x00, 0x28, 0x00, 0xD1, 
+	0x00, 0x00, 0x5F, 0x00, 0x80, 0xAB, 0x48, 0x88, 0x63, 0x70, 0x47, 0x00, 0x28, 0x01, 0xD0, 0xA8, 
+	0x49, 0x48, 0x64, 0x70, 0x47, 0x00, 0x28, 0x01, 0xD0, 0xA5, 0x49, 0x88, 0x64, 0x70, 0x47, 0x00, 
+	0x28, 0x01, 0xD0, 0xA3, 0x49, 0xC8, 0x64, 0x70, 0x47, 0xA1, 0x49, 0xA3, 0x4A, 0x08, 0x76, 0x53, 
+	0x88, 0xA2, 0x4A, 0x01, 0x2B, 0x00, 0xD0, 0x50, 0x6F, 0x48, 0x76, 0x12, 0x6A, 0xA0, 0x48, 0x02, 
+	0x40, 0x08, 0x7E, 0x02, 0x43, 0x00, 0x04, 0x02, 0x43, 0x96, 0x48, 0x82, 0x62, 0x70, 0x47, 0x98, 
+	0x4A, 0x50, 0x76, 0x9A, 0x48, 0x01, 0x6A, 0x9A, 0x48, 0x01, 0x40, 0x10, 0x7E, 0x01, 0x43, 0x00, 
+	0x04, 0x01, 0x43, 0x90, 0x48, 0x81, 0x62, 0x70, 0x47, 0x91, 0x49, 0x94, 0x4A, 0x88, 0x76, 0xD3, 
+	0x6D, 0xDB, 0xB2, 0x83, 0x42, 0x00, 0xD3, 0xD0, 0x6D, 0xC8, 0x76, 0x8A, 0x48, 0x82, 0x68, 0x89, 
+	0x7E, 0x12, 0x0A, 0x12, 0x02, 
+	0x00, 0x00, 0x60, 0x00, 0x80, 0x0A, 0x43, 0x82, 0x60, 0x70, 0x47, 0x89, 0x49, 0xC8, 0x76, 0x85, 
+	0x48, 0x82, 0x68, 0x89, 0x7E, 0x12, 0x0A, 0x12, 0x02, 0x0A, 0x43, 0x82, 0x60, 0x70, 0x47, 0x10, 
+	0xB5, 0x83, 0x49, 0x80, 0x4A, 0x08, 0x77, 0x90, 0x68, 0xFF, 0x23, 0x09, 0x7F, 0x1B, 0x02, 0x98, 
+	0x43, 0x09, 0x02, 0x08, 0x43, 0x90, 0x60, 0xFE, 0xF7, 0x27, 0xFF, 0x10, 0xBD, 0x10, 0xB5, 0x7C, 
+	0x4C, 0x78, 0x4A, 0x60, 0x77, 0x91, 0x68, 0xFF, 0x23, 0x1B, 0x02, 0x99, 0x43, 0xC3, 0xB2, 0x1B, 
+	0x02, 0x19, 0x43, 0x91, 0x60, 0x64, 0x21, 0x41, 0x43, 0x60, 0x7B, 0x80, 0x03, 0x0A, 0xF0, 0x03, 
+	0xFA, 0x60, 0x85, 0x10, 0xBD, 0x72, 0x48, 0x80, 0x7F, 0x70, 0x47, 0x71, 0x48, 0x20, 0x30, 0xC0, 
+	0x78, 0x70, 0x47, 0x6F, 0x48, 0x20, 0x30, 0x00, 0x79, 0x70, 0x47, 0x6D, 0x48, 0x20, 0x30, 0x40, 
+	0x79, 0x70, 0x47, 0x6B, 0x48, 
+	0x00, 0x00, 0x61, 0x00, 0x80, 0x80, 0x8E, 0xC0, 0xB2, 0x70, 0x47, 0x69, 0x48, 0x02, 0x21, 0xC0, 
+	0x7F, 0x08, 0x40, 0x70, 0x47, 0x70, 0xB5, 0x6B, 0x4D, 0x04, 0x00, 0x05, 0xD0, 0x20, 0x78, 0xFF, 
+	0xF7, 0xBE, 0xFF, 0x64, 0x78, 0xE8, 0x6E, 0x0F, 0xE0, 0x64, 0x48, 0x80, 0x68, 0x00, 0x04, 0x00, 
+	0x0E, 0xFF, 0xF7, 0xB5, 0xFF, 0x64, 0x48, 0xC0, 0x79, 0xC0, 0x07, 0x01, 0xD0, 0x04, 0x24, 0x00, 
+	0xE0, 0x00, 0x24, 0x02, 0x20, 0x04, 0x43, 0xA8, 0x6E, 0xC0, 0xB2, 0xFF, 0xF7, 0xB7, 0xFF, 0x60, 
+	0x07, 0x02, 0xD5, 0x07, 0xF0, 0x3D, 0xF9, 0x01, 0xE0, 0x07, 0xF0, 0x3E, 0xF9, 0x5B, 0x48, 0xA1, 
+	0x07, 0x01, 0xD4, 0x01, 0x21, 0x00, 0xE0, 0x00, 0x21, 0x81, 0x70, 0x70, 0xBD, 0x10, 0xB5, 0x50, 
+	0x4C, 0x60, 0x73, 0x61, 0x7F, 0x64, 0x20, 0x41, 0x43, 0x60, 0x7B, 0x80, 0x03, 0x0A, 0xF0, 0xB3, 
+	0xF9, 0x60, 0x85, 0x10, 0xBD, 
+	0x00, 0x00, 0x62, 0x00, 0x80, 0x10, 0xB5, 0x51, 0x49, 0x48, 0x70, 0xFE, 0xF7, 0xBD, 0xFE, 0x10, 
+	0xBD, 0x70, 0xB5, 0x4E, 0x4E, 0x49, 0x4D, 0x04, 0x00, 0x22, 0xD0, 0x20, 0x78, 0xFF, 0xF7, 0x44, 
+	0xFF, 0xE0, 0x78, 0x00, 0x07, 0x00, 0x0E, 0x30, 0x70, 0x20, 0x79, 0xFF, 0xF7, 0x5D, 0xFF, 0x60, 
+	0x78, 0xFF, 0xF7, 0xE8, 0xFF, 0x40, 0x48, 0x40, 0x88, 0x01, 0x28, 0x10, 0xD1, 0x20, 0x78, 0xFF, 
+	0xF7, 0x46, 0xFF, 0xE8, 0x6D, 0x21, 0x79, 0xC0, 0xB2, 0x88, 0x42, 0x01, 0xD2, 0x20, 0x79, 0x01, 
+	0xE0, 0xE8, 0x6D, 0xC0, 0xB2, 0xFF, 0xF7, 0x59, 0xFF, 0xA0, 0x78, 0xFF, 0xF7, 0xC7, 0xFF, 0x70, 
+	0xBD, 0x28, 0x6A, 0xC0, 0xB2, 0xFF, 0xF7, 0x20, 0xFF, 0xE8, 0x68, 0xF0, 0x21, 0x08, 0x40, 0x30, 
+	0x70, 0xA8, 0x68, 0xC0, 0xB2, 0xFF, 0xF7, 0x38, 0xFF, 0x33, 0x4C, 0x20, 0x3C, 0x20, 0x68, 0xC0, 
+	0xB2, 0xFF, 0xF7, 0xC0, 0xFF, 
+	0x00, 0x00, 0x63, 0x00, 0x80, 0x68, 0x6F, 0xC0, 0xB2, 0xFF, 0xF7, 0x21, 0xFF, 0xE8, 0x6D, 0xC0, 
+	0xB2, 0xFF, 0xF7, 0x3B, 0xFF, 0x60, 0x68, 0xC0, 0xB2, 0xDF, 0xE7, 0x2B, 0x49, 0x10, 0xB5, 0x00, 
+	0x22, 0x60, 0x39, 0xCB, 0x6A, 0x83, 0x42, 0x01, 0xD9, 0x02, 0x46, 0x27, 0xE0, 0xCB, 0x6A, 0x8C, 
+	0x6B, 0x1B, 0x19, 0x83, 0x42, 0x01, 0xD9, 0xC9, 0x6A, 0x1F, 0xE0, 0xCB, 0x6A, 0x8C, 0x6B, 0x1B, 
+	0x19, 0xCC, 0x6B, 0x1B, 0x19, 0x83, 0x42, 0x05, 0xD9, 0xCA, 0x6A, 0x89, 0x6B, 0x80, 0x1A, 0x40, 
+	0x1A, 0x42, 0x08, 0x13, 0xE0, 0xCB, 0x6A, 0x8C, 0x6B, 0x1C, 0x19, 0xCB, 0x6B, 0x5B, 0x1C, 0xE3, 
+	0x18, 0x83, 0x42, 0x07, 0xD8, 0xCB, 0x6A, 0x8C, 0x6B, 0x1C, 0x19, 0xCB, 0x6B, 0x9B, 0x1C, 0xE3, 
+	0x18, 0x83, 0x42, 0x03, 0xD9, 0xCA, 0x6A, 0xC9, 0x6B, 0x80, 0x1A, 0x42, 0x1A, 0x10, 0x46, 0x10, 
+	0xBD, 0x0B, 0x49, 0x02, 0x46, 
+	0x00, 0x00, 0x64, 0x00, 0x80, 0x09, 0x7B, 0x00, 0x20, 0x04, 0x29, 0x0A, 0xD1, 0x0E, 0x49, 0x60, 
+	0x39, 0xCB, 0x6A, 0xD2, 0x1A, 0x8B, 0x6B, 0xD2, 0x1A, 0xD2, 0x07, 0x02, 0xD0, 0xC8, 0x69, 0x89, 
+	0x69, 0x40, 0x18, 0x70, 0x47, 0x00, 0x00, 0x11, 0x40, 0xC0, 0xE0, 0x00, 0x00, 0x00, 0x04, 0x11, 
+	0x40, 0x9C, 0x00, 0x00, 0x20, 0x7D, 0x1D, 0x00, 0x00, 0xB8, 0xDC, 0x00, 0x00, 0x58, 0xDE, 0x00, 
+	0x00, 0x00, 0xFF, 0x00, 0xFF, 0x78, 0xDC, 0x00, 0x00, 0xF8, 0xDF, 0x00, 0x00, 0xBC, 0x00, 0x00, 
+	0x20, 0xFF, 0x49, 0x00, 0x20, 0x08, 0x70, 0x70, 0x47, 0x10, 0xB5, 0xFD, 0x4C, 0x00, 0x28, 0x08, 
+	0xD1, 0xFE, 0xF7, 0xD8, 0xF9, 0x01, 0x28, 0x01, 0xD1, 0xFA, 0x48, 0x00, 0xE0, 0xFA, 0x48, 0x60, 
+	0x60, 0x10, 0xBD, 0x01, 0x28, 0xFC, 0xD1, 0xF8, 0x48, 0x08, 0x30, 0xF8, 0xE7, 0x02, 0x46, 0x08, 
+	0x46, 0xF5, 0x4B, 0x10, 0xB5, 
+	0x00, 0x00, 0x65, 0x00, 0x80, 0x11, 0x02, 0x1B, 0x1F, 0x9C, 0x7D, 0x02, 0x46, 0xA2, 0x40, 0x12, 
+	0x1A, 0x51, 0x18, 0x9A, 0x7D, 0xD1, 0x40, 0x0A, 0x1A, 0x81, 0x42, 0x00, 0xD8, 0x42, 0x1A, 0xDB, 
+	0x7D, 0x12, 0x0A, 0x9A, 0x42, 0x00, 0xD9, 0x08, 0x46, 0x10, 0xBD, 0xF0, 0xB5, 0x9D, 0xB0, 0x00, 
+	0x20, 0xE7, 0x49, 0x13, 0x90, 0x12, 0x90, 0x48, 0x68, 0x02, 0x78, 0x11, 0x92, 0x00, 0x22, 0x15, 
+	0x46, 0x10, 0x92, 0xE6, 0x4A, 0x12, 0x68, 0x12, 0x02, 0x12, 0x0C, 0x05, 0x92, 0xE4, 0x4A, 0x12, 
+	0x68, 0x12, 0x02, 0x12, 0x0C, 0x04, 0x92, 0xC2, 0x78, 0x0B, 0x92, 0x02, 0x79, 0x0A, 0x92, 0x44, 
+	0x79, 0x20, 0x23, 0x1A, 0x46, 0xE2, 0x40, 0x09, 0x92, 0x40, 0x78, 0x11, 0x9A, 0xC3, 0x40, 0x08, 
+	0x93, 0xDC, 0x48, 0x1C, 0x90, 0x00, 0x2A, 0x02, 0xD1, 0x00, 0x78, 0x80, 0x07, 0x7E, 0xD0, 0xD9, 
+	0x48, 0x20, 0x38, 0x42, 0x89, 
+	0x00, 0x00, 0x66, 0x00, 0x80, 0x40, 0x3A, 0x0F, 0x92, 0x82, 0x89, 0x40, 0x3A, 0x0E, 0x92, 0x42, 
+	0x89, 0x10, 0x3A, 0x0D, 0x92, 0x80, 0x89, 0x10, 0x38, 0x0C, 0x90, 0x10, 0x98, 0x13, 0xE0, 0x28, 
+	0x46, 0x0E, 0x21, 0x48, 0x43, 0xD0, 0x49, 0x02, 0x46, 0x44, 0x18, 0x10, 0x98, 0x0C, 0x26, 0x70, 
+	0x43, 0xE3, 0x7A, 0xCE, 0x4E, 0x1B, 0x90, 0x80, 0x19, 0x1A, 0x90, 0xC0, 0x7A, 0x83, 0x42, 0x0D, 
+	0xD0, 0x10, 0x98, 0x40, 0x1C, 0x10, 0x90, 0xC2, 0x49, 0x09, 0x78, 0x88, 0x42, 0x03, 0xD2, 0xC8, 
+	0x48, 0x00, 0x78, 0x85, 0x42, 0xE3, 0xD3, 0xC6, 0x48, 0x02, 0x78, 0x49, 0xE2, 0x67, 0x88, 0xA0, 
+	0x88, 0x18, 0x90, 0xA0, 0x79, 0x17, 0x90, 0xBC, 0x48, 0x00, 0x1F, 0x80, 0x7E, 0x01, 0x28, 0x7E, 
+	0xD1, 0x00, 0x26, 0x01, 0x96, 0x10, 0x98, 0x85, 0x42, 0x02, 0xD1, 0x88, 0x5A, 0x02, 0x28, 0x08, 
+	0xD2, 0xBA, 0x4A, 0x0C, 0x20, 
+	0x00, 0x00, 0x67, 0x00, 0x80, 0x00, 0x21, 0x68, 0x43, 0x84, 0x32, 0x80, 0x18, 0x01, 0x72, 0x41, 
+	0x72, 0x81, 0x72, 0x05, 0x98, 0x40, 0x00, 0xB8, 0x42, 0x05, 0xD8, 0xB2, 0x49, 0x20, 0x39, 0x49, 
+	0x89, 0x08, 0x1A, 0xB8, 0x42, 0x22, 0xD2, 0x20, 0x7B, 0x10, 0x28, 0x00, 0xD1, 0x01, 0x26, 0x05, 
+	0x98, 0x87, 0x42, 0x06, 0xD3, 0xAB, 0x48, 0x20, 0x38, 0x40, 0x89, 0x05, 0x99, 0x40, 0x1A, 0xB8, 
+	0x42, 0x14, 0xD2, 0xA8, 0x48, 0x01, 0x26, 0x20, 0x38, 0x81, 0x89, 0x18, 0x9A, 0x49, 0x08, 0x0A, 
+	0x39, 0x91, 0x42, 0x0B, 0xD2, 0x80, 0x89, 0x40, 0x08, 0x0A, 0x30, 0x90, 0x42, 0x06, 0xD9, 0xA3, 
+	0x4A, 0x0C, 0x20, 0x01, 0x21, 0x68, 0x43, 0x84, 0x32, 0x80, 0x18, 0x41, 0x72, 0x04, 0x98, 0x18, 
+	0x99, 0x40, 0x00, 0x88, 0x42, 0x08, 0xD8, 0x9B, 0x49, 0x20, 0x39, 0x00, 0xE0, 0xFC, 0xE1, 0x89, 
+	0x89, 0x08, 0x1A, 0x18, 0x99, 
+	0x00, 0x00, 0x68, 0x00, 0x80, 0x88, 0x42, 0x23, 0xD2, 0x20, 0x7B, 0x10, 0x28, 0x01, 0xD1, 0x02, 
+	0x20, 0x06, 0x43, 0x08, 0x46, 0x04, 0x99, 0x88, 0x42, 0x06, 0xD3, 0x92, 0x48, 0x20, 0x38, 0x80, 
+	0x89, 0x41, 0x1A, 0x18, 0x98, 0x81, 0x42, 0x13, 0xD2, 0x02, 0x20, 0x8E, 0x4A, 0x06, 0x43, 0x20, 
+	0x3A, 0x51, 0x89, 0x49, 0x08, 0x0A, 0x39, 0xB9, 0x42, 0x0A, 0xD2, 0x51, 0x89, 0x49, 0x08, 0x0A, 
+	0x31, 0xB9, 0x42, 0x05, 0xD9, 0x89, 0x4A, 0x0C, 0x21, 0x69, 0x43, 0x84, 0x32, 0x89, 0x18, 0x48, 
+	0x72, 0x00, 0x2E, 0x12, 0xD0, 0x85, 0x49, 0x0C, 0x20, 0x68, 0x43, 0x84, 0x31, 0x40, 0x18, 0x19, 
+	0x90, 0x41, 0x7A, 0x08, 0x46, 0x70, 0x40, 0x03, 0x28, 0x07, 0xD0, 0x19, 0x98, 0x00, 0xE0, 0x72, 
+	0xE0, 0x80, 0x7A, 0x02, 0x46, 0x72, 0x40, 0x03, 0x2A, 0x09, 0xD1, 0x7C, 0x4A, 0x0C, 0x20, 0x00, 
+	0x21, 0x68, 0x43, 0x84, 0x32, 
+	0x00, 0x00, 0x69, 0x00, 0x80, 0x80, 0x18, 0x01, 0x72, 0x41, 0x72, 0x86, 0x72, 0x63, 0xE0, 0x01, 
+	0x22, 0x03, 0x28, 0x00, 0xD0, 0x00, 0x22, 0x19, 0x98, 0x03, 0x2E, 0x86, 0x72, 0x02, 0xD1, 0x03, 
+	0x20, 0x0E, 0x46, 0x01, 0x90, 0x01, 0x2E, 0x09, 0xD1, 0xB8, 0xB2, 0x03, 0x90, 0x6F, 0x49, 0x1B, 
+	0x98, 0x08, 0x5A, 0x41, 0x09, 0x18, 0x98, 0x06, 0x90, 0x04, 0x98, 0x07, 0xE0, 0x18, 0x98, 0x80, 
+	0xB2, 0x03, 0x90, 0x1A, 0x98, 0x40, 0x88, 0x06, 0x97, 0x41, 0x09, 0x05, 0x98, 0x02, 0x90, 0x01, 
+	0x2A, 0x0A, 0xD1, 0x00, 0x20, 0x43, 0x00, 0x19, 0x9A, 0x40, 0x1C, 0xC0, 0xB2, 0xD1, 0x52, 0x04, 
+	0x28, 0xF8, 0xD3, 0x19, 0x98, 0x0F, 0x21, 0x01, 0x72, 0x02, 0x99, 0x06, 0x98, 0x09, 0xF0, 0xBB, 
+	0xFF, 0x02, 0x99, 0x48, 0x43, 0x06, 0x99, 0x08, 0x1A, 0x80, 0x00, 0x02, 0x99, 0x09, 0xF0, 0xB3, 
+	0xFF, 0x01, 0x99, 0xC0, 0xB2, 
+	0x00, 0x00, 0x6A, 0x00, 0x80, 0x00, 0x29, 0x0A, 0xD1, 0x19, 0x9A, 0x43, 0x00, 0x03, 0x99, 0xD1, 
+	0x52, 0x19, 0x99, 0x01, 0x22, 0x09, 0x7A, 0x82, 0x40, 0x19, 0x98, 0x11, 0x43, 0x01, 0x72, 0x19, 
+	0x99, 0x00, 0x23, 0x09, 0x7A, 0x18, 0x46, 0x8C, 0x46, 0x01, 0x22, 0x61, 0x46, 0x82, 0x40, 0x11, 
+	0x42, 0x04, 0xD0, 0x19, 0x99, 0x42, 0x00, 0x89, 0x5A, 0xCB, 0x18, 0x01, 0xE0, 0x03, 0x99, 0x5B, 
+	0x18, 0x40, 0x1C, 0xC0, 0xB2, 0x04, 0x28, 0xEF, 0xD3, 0x98, 0x03, 0x00, 0x0C, 0x01, 0x2E, 0x01, 
+	0xD1, 0x07, 0x46, 0x00, 0xE0, 0x18, 0x90, 0x45, 0x48, 0x1B, 0x99, 0x40, 0x5A, 0x16, 0x90, 0x1A, 
+	0x98, 0x41, 0x88, 0x15, 0x91, 0x80, 0x88, 0x14, 0x90, 0x16, 0x98, 0x4E, 0x09, 0x11, 0x99, 0x40, 
+	0x09, 0x09, 0x06, 0x6C, 0xD5, 0xC1, 0x1B, 0xB8, 0x42, 0x00, 0xD8, 0x39, 0x1A, 0x0A, 0x98, 0x81, 
+	0x42, 0x01, 0xD8, 0x08, 0x98, 
+	0x00, 0x00, 0x6B, 0x00, 0x80, 0x11, 0xE0, 0x0B, 0x98, 0x81, 0x42, 0x01, 0xD9, 0x09, 0x98, 0x0C, 
+	0xE0, 0x0A, 0x98, 0x08, 0x9A, 0x08, 0x1A, 0x09, 0x99, 0x89, 0x1A, 0x48, 0x43, 0x0A, 0x9A, 0x0B, 
+	0x99, 0x89, 0x1A, 0x09, 0xF0, 0x60, 0xFF, 0x08, 0x99, 0x40, 0x18, 0x07, 0x90, 0x2A, 0x48, 0x00, 
+	0x1F, 0x00, 0x7D, 0x01, 0x28, 0x0A, 0xD1, 0x2F, 0x48, 0xC0, 0x6B, 0x01, 0x28, 0x06, 0xD1, 0x2E, 
+	0x48, 0x00, 0x88, 0x80, 0x06, 0x02, 0xD5, 0x07, 0x98, 0x80, 0x08, 0x07, 0x90, 0x18, 0x98, 0x18, 
+	0x99, 0x30, 0x1A, 0x8E, 0x42, 0x00, 0xD8, 0x88, 0x1B, 0x0A, 0x99, 0x88, 0x42, 0x01, 0xD2, 0x08, 
+	0x98, 0x11, 0xE0, 0x0B, 0x99, 0x88, 0x42, 0x01, 0xD3, 0x09, 0x98, 0x0C, 0xE0, 0x0A, 0x99, 0x08, 
+	0x9A, 0x40, 0x1A, 0x09, 0x99, 0x89, 0x1A, 0x48, 0x43, 0x0A, 0x9A, 0x0B, 0x99, 0x89, 0x1A, 0x09, 
+	0xF0, 0x32, 0xFF, 0x08, 0x99, 
+	0x00, 0x00, 0x6C, 0x00, 0x80, 0x40, 0x18, 0x14, 0x49, 0x09, 0x1F, 0x09, 0x7D, 0x01, 0x29, 0x08, 
+	0xD1, 0x18, 0x49, 0xC9, 0x6B, 0x01, 0x29, 0x04, 0xD1, 0x17, 0x49, 0x09, 0x88, 0x89, 0x06, 0x00, 
+	0xD5, 0x80, 0x08, 0x07, 0x99, 0x88, 0x42, 0x00, 0xD9, 0x07, 0x90, 0x07, 0x99, 0x16, 0x98, 0x07, 
+	0x9A, 0x48, 0x43, 0x16, 0x99, 0x40, 0x09, 0x09, 0x1A, 0x07, 0x98, 0x47, 0x43, 0xCE, 0x19, 0x07, 
+	0x99, 0x15, 0x98, 0x48, 0x43, 0x15, 0x99, 0x40, 0x09, 0x09, 0x1A, 0x18, 0x98, 0x16, 0xE0, 0x18, 
+	0xE0, 0xF4, 0x00, 0x00, 0x20, 0x44, 0xE0, 0x00, 0x00, 0x2C, 0xDD, 0x00, 0x00, 0x10, 0x01, 0x00, 
+	0x20, 0x14, 0x01, 0x00, 0x20, 0xAC, 0xDD, 0x00, 0x00, 0x6A, 0x05, 0x00, 0x20, 0x62, 0x04, 0x00, 
+	0x20, 0xFF, 0x00, 0x00, 0x20, 0x78, 0xDC, 0x00, 0x00, 0x96, 0x02, 0x00, 0x20, 0x50, 0x43, 0x0F, 
+	0x18, 0x02, 0xE0, 0x18, 0x98, 
+	0x00, 0x00, 0x6D, 0x00, 0x80, 0x7E, 0x01, 0x47, 0x01, 0x11, 0x98, 0x80, 0x06, 0x10, 0xD5, 0x5B, 
+	0x48, 0x40, 0x68, 0x80, 0x78, 0x01, 0x28, 0x04, 0xD1, 0x14, 0x99, 0x17, 0x98, 0x40, 0x18, 0x40, 
+	0x08, 0x05, 0xE0, 0x14, 0x98, 0x41, 0x00, 0x41, 0x18, 0x17, 0x98, 0x08, 0x18, 0x80, 0x08, 0x17, 
+	0x90, 0x11, 0x98, 0x40, 0x06, 0x25, 0xD5, 0x16, 0x98, 0x86, 0x42, 0x06, 0xD9, 0x0F, 0x98, 0x86, 
+	0x42, 0x03, 0xD8, 0x10, 0x2E, 0x01, 0xD9, 0x10, 0x3E, 0x08, 0xE0, 0x16, 0x98, 0x86, 0x42, 0x05, 
+	0xD2, 0x40, 0x2E, 0x03, 0xD3, 0x0D, 0x98, 0x86, 0x42, 0x00, 0xD2, 0x10, 0x36, 0x15, 0x98, 0x87, 
+	0x42, 0x06, 0xD9, 0x0E, 0x98, 0x87, 0x42, 0x03, 0xD8, 0x10, 0x2F, 0x01, 0xD9, 0x10, 0x3F, 0x08, 
+	0xE0, 0x15, 0x98, 0x87, 0x42, 0x05, 0xD2, 0x40, 0x2F, 0x03, 0xD3, 0x0C, 0x98, 0x86, 0x42, 0x00, 
+	0xD2, 0x10, 0x37, 0x11, 0x98, 
+	0x00, 0x00, 0x6E, 0x00, 0x80, 0xC0, 0x06, 0x09, 0xD5, 0x14, 0x99, 0x17, 0x98, 0x88, 0x42, 0x01, 
+	0xD9, 0x40, 0x1E, 0x02, 0xE0, 0x88, 0x42, 0x01, 0xD2, 0x40, 0x1C, 0x17, 0x90, 0x1C, 0x98, 0x00, 
+	0x78, 0xC0, 0x07, 0x0B, 0xD0, 0x1A, 0x98, 0xC1, 0x88, 0xE0, 0x79, 0xFF, 0xF7, 0xA7, 0xFD, 0x13, 
+	0x90, 0x1A, 0x98, 0x01, 0x89, 0x20, 0x7A, 0xFF, 0xF7, 0xA1, 0xFD, 0x12, 0x90, 0x1C, 0x98, 0x00, 
+	0x78, 0x80, 0x07, 0x17, 0xD5, 0x1A, 0x99, 0x0A, 0x20, 0x08, 0x56, 0x2D, 0x49, 0x03, 0x46, 0x0A, 
+	0x7E, 0x01, 0x46, 0x91, 0x40, 0x09, 0x22, 0xA2, 0x56, 0x09, 0x1A, 0x8A, 0x18, 0x28, 0x49, 0x09, 
+	0x7E, 0x0A, 0x41, 0x62, 0x72, 0x10, 0x1A, 0x00, 0xD5, 0x40, 0x42, 0x25, 0x49, 0x49, 0x7E, 0x81, 
+	0x42, 0x00, 0xDD, 0x63, 0x72, 0x28, 0x46, 0x0C, 0x22, 0x50, 0x43, 0x22, 0x4A, 0x03, 0x46, 0xE1, 
+	0x7A, 0x80, 0x18, 0xC1, 0x72, 
+	0x00, 0x00, 0x6F, 0x00, 0x80, 0xF1, 0x02, 0xD6, 0x52, 0x09, 0x0C, 0x61, 0x80, 0xF9, 0x02, 0x47, 
+	0x80, 0x09, 0x0C, 0xA1, 0x80, 0x17, 0x99, 0x81, 0x80, 0x17, 0x99, 0xA1, 0x71, 0x13, 0x99, 0xC1, 
+	0x80, 0x13, 0x99, 0x09, 0x0A, 0xE1, 0x71, 0x12, 0x99, 0x01, 0x81, 0x12, 0x99, 0x09, 0x0A, 0x21, 
+	0x72, 0x61, 0x7A, 0x81, 0x72, 0x6D, 0x1C, 0xC3, 0xE5, 0x0E, 0x20, 0x13, 0x49, 0x68, 0x43, 0x40, 
+	0x18, 0x41, 0x88, 0x0C, 0x24, 0x4B, 0x01, 0x29, 0x46, 0x61, 0x43, 0x0E, 0x4C, 0x63, 0x52, 0x83, 
+	0x88, 0x09, 0x19, 0x5B, 0x01, 0x4B, 0x80, 0x83, 0x79, 0x8B, 0x80, 0xC3, 0x7A, 0xCB, 0x72, 0xC3, 
+	0x79, 0x1B, 0x02, 0xCB, 0x80, 0x03, 0x7A, 0x1B, 0x02, 0x0B, 0x81, 0x40, 0x7A, 0x88, 0x72, 0x6D, 
+	0x1C, 0x95, 0x42, 0xE1, 0xD3, 0x01, 0x48, 0x02, 0x70, 0x1D, 0xB0, 0xF0, 0xBD, 0xF4, 0x00, 0x00, 
+	0x20, 0x28, 0xDD, 0x00, 0x00, 
+	0x00, 0x00, 0x70, 0x00, 0x80, 0x62, 0x04, 0x00, 0x20, 0x6A, 0x05, 0x00, 0x20, 0x02, 0x48, 0x40, 
+	0x68, 0x02, 0x49, 0x08, 0x61, 0x70, 0x47, 0x00, 0x00, 0xA0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x01, 
+	0x40, 0x70, 0xB5, 0xF7, 0x4E, 0xF7, 0x4C, 0x35, 0x46, 0x40, 0x35, 0x00, 0x28, 0x13, 0xD1, 0xFD, 
+	0xF7, 0xF1, 0xFE, 0x01, 0x28, 0x06, 0xD1, 0xF4, 0x48, 0x01, 0x7A, 0xE1, 0x71, 0x41, 0x7A, 0x21, 
+	0x72, 0x80, 0x7C, 0x04, 0xE0, 0x70, 0x79, 0xE0, 0x71, 0xF0, 0x79, 0x20, 0x72, 0xA8, 0x7A, 0xA0, 
+	0x71, 0x30, 0x7F, 0x60, 0x73, 0x09, 0xE0, 0x02, 0x28, 0x07, 0xD1, 0xB0, 0x7F, 0xE0, 0x71, 0xF0, 
+	0x7F, 0x20, 0x72, 0x70, 0x7F, 0x60, 0x73, 0xE8, 0x7A, 0xA0, 0x71, 0xE0, 0x79, 0x60, 0x72, 0x70, 
+	0xBD, 0xF8, 0xB5, 0xE3, 0x4A, 0x50, 0x89, 0x14, 0x46, 0x20, 0x34, 0x05, 0x21, 0x61, 0x56, 0x40, 
+	0x18, 0x06, 0x21, 0x61, 0x56, 
+	0x00, 0x00, 0x71, 0x00, 0x80, 0xDF, 0x4E, 0x40, 0x18, 0x00, 0x02, 0x70, 0x61, 0x91, 0x89, 0x07, 
+	0x23, 0xE3, 0x56, 0xC9, 0x18, 0x08, 0x23, 0xE3, 0x56, 0xC9, 0x18, 0x09, 0x02, 0xB1, 0x61, 0x00, 
+	0x91, 0x91, 0x7B, 0xDA, 0x4D, 0x01, 0x29, 0x14, 0xD1, 0xA9, 0x69, 0x09, 0xF0, 0xDC, 0xFD, 0x70, 
+	0x61, 0xE9, 0x69, 0x07, 0x46, 0x00, 0x98, 0x09, 0xF0, 0xD6, 0xFD, 0x05, 0x46, 0x05, 0x21, 0xB0, 
+	0x61, 0xC9, 0x01, 0x38, 0x46, 0x09, 0xF0, 0xD9, 0xFD, 0x05, 0x21, 0x70, 0x62, 0xC9, 0x01, 0x28, 
+	0x46, 0x11, 0xE0, 0xE9, 0x69, 0x09, 0xF0, 0xC7, 0xFD, 0x70, 0x61, 0xA9, 0x69, 0x07, 0x46, 0x00, 
+	0x98, 0x09, 0xF0, 0xC1, 0xFD, 0x05, 0x25, 0xED, 0x01, 0x29, 0x46, 0xB0, 0x61, 0x09, 0xF0, 0xC5, 
+	0xFD, 0x70, 0x62, 0x29, 0x46, 0x38, 0x46, 0x09, 0xF0, 0xC0, 0xFD, 0xB0, 0x62, 0x70, 0x6A, 0x40, 
+	0x10, 0xF0, 0x61, 0xB0, 0x6A, 
+	0x00, 0x00, 0x72, 0x00, 0x80, 0x40, 0x10, 0x00, 0x25, 0x30, 0x62, 0xF5, 0x70, 0xB5, 0x72, 0x20, 
+	0x78, 0x30, 0x70, 0xBB, 0x48, 0x40, 0x30, 0xC0, 0x89, 0xC0, 0x07, 0xC0, 0x0F, 0xB0, 0x70, 0x28, 
+	0x46, 0xFF, 0xF7, 0x7E, 0xFF, 0xB6, 0x48, 0x41, 0x79, 0xF1, 0x71, 0xC1, 0x79, 0x31, 0x72, 0x00, 
+	0x7F, 0x70, 0x73, 0xF5, 0x72, 0x35, 0x73, 0x75, 0x71, 0xF8, 0xBD, 0x10, 0xB5, 0xB1, 0x4C, 0x60, 
+	0x78, 0x00, 0x28, 0x03, 0xD1, 0xFF, 0xF7, 0x94, 0xFF, 0x01, 0x20, 0x60, 0x70, 0x10, 0xBD, 0xF8, 
+	0xB5, 0xAB, 0x49, 0xAC, 0x4D, 0x01, 0x28, 0x04, 0xD1, 0x48, 0x89, 0x00, 0x02, 0x68, 0x61, 0x88, 
+	0x89, 0x11, 0xE0, 0x4A, 0x89, 0xA6, 0x48, 0x20, 0x30, 0x05, 0x23, 0xC3, 0x56, 0xD2, 0x18, 0x06, 
+	0x23, 0xC3, 0x56, 0xD2, 0x18, 0x12, 0x02, 0x6A, 0x61, 0x8A, 0x89, 0x07, 0x23, 0xC3, 0x56, 0xD2, 
+	0x18, 0x08, 0x23, 0xC3, 0x56, 
+	0x00, 0x00, 0x73, 0x00, 0x80, 0xD0, 0x18, 0x00, 0x02, 0xA8, 0x61, 0x88, 0x7B, 0x05, 0x27, 0xFF, 
+	0x01, 0x9E, 0x4C, 0x01, 0x28, 0x13, 0xD1, 0xA1, 0x69, 0x68, 0x69, 0x09, 0xF0, 0x64, 0xFD, 0x68, 
+	0x61, 0xE1, 0x69, 0x06, 0x46, 0xA8, 0x69, 0x09, 0xF0, 0x5E, 0xFD, 0x04, 0x46, 0xA8, 0x61, 0x39, 
+	0x46, 0x30, 0x46, 0x09, 0xF0, 0x62, 0xFD, 0x68, 0x62, 0x39, 0x46, 0x20, 0x46, 0x10, 0xE0, 0xE1, 
+	0x69, 0x68, 0x69, 0x09, 0xF0, 0x50, 0xFD, 0x68, 0x61, 0xA1, 0x69, 0x06, 0x46, 0xA8, 0x69, 0x09, 
+	0xF0, 0x4A, 0xFD, 0x39, 0x46, 0xA8, 0x61, 0x09, 0xF0, 0x50, 0xFD, 0x68, 0x62, 0x39, 0x46, 0x30, 
+	0x46, 0x09, 0xF0, 0x4B, 0xFD, 0xA8, 0x62, 0x68, 0x6A, 0x40, 0x10, 0xE8, 0x61, 0xA8, 0x6A, 0x40, 
+	0x10, 0x28, 0x62, 0xF8, 0xBD, 0x0A, 0x88, 0x02, 0x80, 0xCA, 0x7A, 0xC2, 0x72, 0x8A, 0x79, 0x82, 
+	0x71, 0x8A, 0x88, 0x82, 0x80, 
+	0x00, 0x00, 0x74, 0x00, 0x80, 0x4A, 0x88, 0x42, 0x80, 0xCA, 0x79, 0xC2, 0x71, 0x0A, 0x7A, 0x02, 
+	0x72, 0x4A, 0x7A, 0x42, 0x72, 0x8A, 0x7A, 0x82, 0x72, 0x09, 0x7B, 0x01, 0x73, 0x70, 0x47, 0x30, 
+	0xB5, 0x0C, 0x46, 0x43, 0x1C, 0x7A, 0x4D, 0x07, 0xE0, 0x0E, 0x20, 0x58, 0x43, 0x41, 0x19, 0x08, 
+	0x46, 0x0E, 0x38, 0xFF, 0xF7, 0xDF, 0xFF, 0x5B, 0x1C, 0xA3, 0x42, 0xF5, 0xD3, 0x60, 0x1E, 0x30, 
+	0xBD, 0xF0, 0xB5, 0x06, 0x46, 0x6F, 0x48, 0x80, 0x78, 0xC0, 0x07, 0x2F, 0xD1, 0x6C, 0x4C, 0x32, 
+	0x68, 0x20, 0x34, 0x05, 0x23, 0xE3, 0x56, 0x0F, 0x68, 0xD2, 0x1A, 0x03, 0xD5, 0x00, 0x22, 0x00, 
+	0x2B, 0x00, 0xD0, 0x01, 0x20, 0x07, 0x25, 0x65, 0x57, 0x7B, 0x1B, 0x03, 0xD5, 0x00, 0x23, 0x00, 
+	0x2D, 0x00, 0xD0, 0x01, 0x20, 0x62, 0x4F, 0x7D, 0x89, 0x6D, 0x1E, 0xAA, 0x42, 0x05, 0xD9, 0x2A, 
+	0x46, 0x06, 0x25, 0x65, 0x57, 
+	0x00, 0x00, 0x75, 0x00, 0x80, 0x00, 0x2D, 0x00, 0xDD, 0x01, 0x20, 0xBD, 0x89, 0x6D, 0x1E, 0xAB, 
+	0x42, 0x05, 0xD9, 0x2B, 0x46, 0x08, 0x25, 0x65, 0x57, 0x00, 0x2D, 0x00, 0xDD, 0x01, 0x20, 0x32, 
+	0x60, 0x0B, 0x60, 0x01, 0x28, 0x03, 0xD1, 0x61, 0x7A, 0xC9, 0x07, 0x00, 0xD1, 0x00, 0x20, 0xF0, 
+	0xBD, 0xFF, 0xB5, 0x0E, 0x23, 0x58, 0x43, 0x56, 0x4B, 0x83, 0xB0, 0xC0, 0x18, 0x80, 0x79, 0x83, 
+	0x07, 0x9B, 0x0F, 0x00, 0x93, 0x00, 0x07, 0x85, 0x0F, 0x52, 0x48, 0x00, 0x23, 0x07, 0x78, 0x08, 
+	0x46, 0x78, 0x43, 0x80, 0x18, 0x9E, 0x46, 0x9C, 0x46, 0x1E, 0x46, 0x1C, 0x46, 0x00, 0x2D, 0x12, 
+	0xD0, 0x48, 0x49, 0x00, 0x2A, 0x0B, 0x6A, 0x89, 0x6A, 0x9C, 0x46, 0x8E, 0x46, 0x01, 0xD0, 0x43, 
+	0x1E, 0x02, 0xE0, 0x43, 0x1C, 0x00, 0x24, 0xE4, 0x43, 0x7F, 0x1E, 0xBA, 0x42, 0x01, 0xD2, 0x46, 
+	0x1C, 0x1F, 0xE0, 0x46, 0x1E, 
+	0x00, 0x00, 0x76, 0x00, 0x80, 0x1C, 0xE0, 0x00, 0x9F, 0x00, 0x2F, 0x1A, 0xD0, 0x3D, 0x4B, 0xDE, 
+	0x69, 0x5B, 0x6A, 0xB4, 0x46, 0x9E, 0x46, 0x3F, 0x4B, 0x0E, 0x46, 0x1B, 0x78, 0x5E, 0x43, 0xB2, 
+	0x18, 0xD6, 0x1A, 0xD7, 0x18, 0x00, 0x29, 0x01, 0xD0, 0x33, 0x46, 0x02, 0xE0, 0x00, 0x24, 0x3B, 
+	0x46, 0xE4, 0x43, 0x39, 0x4A, 0x12, 0x78, 0x52, 0x1E, 0x91, 0x42, 0x01, 0xD2, 0x3E, 0x46, 0x00, 
+	0xE0, 0x01, 0x24, 0x00, 0x99, 0x29, 0x43, 0x02, 0x91, 0x33, 0xD0, 0x34, 0x4F, 0x38, 0x56, 0x81, 
+	0x10, 0x40, 0x1A, 0x01, 0x90, 0xFA, 0x56, 0xBB, 0x57, 0x00, 0x20, 0x9A, 0x42, 0x01, 0xDD, 0x44, 
+	0x1E, 0x03, 0xE0, 0x1A, 0x46, 0x00, 0x2C, 0x00, 0xD1, 0x01, 0x24, 0x8A, 0x42, 0x0B, 0xDD, 0x52, 
+	0x1A, 0x60, 0x46, 0x02, 0x99, 0x50, 0x43, 0x01, 0x29, 0x02, 0xD0, 0x10, 0x46, 0x71, 0x46, 0x48, 
+	0x43, 0x01, 0x99, 0x09, 0xF0, 
+	0x00, 0x00, 0x77, 0x00, 0x80, 0x7A, 0xFC, 0x44, 0x43, 0x1D, 0x48, 0x00, 0x21, 0x80, 0x7B, 0x00, 
+	0x2D, 0x11, 0xD0, 0x01, 0x28, 0x06, 0xD1, 0x0C, 0x98, 0x00, 0x68, 0x00, 0x19, 0x00, 0xD4, 0x01, 
+	0x46, 0x0C, 0x98, 0x05, 0xE0, 0x06, 0x98, 0x00, 0x68, 0x00, 0x19, 0x00, 0xD4, 0x01, 0x46, 0x06, 
+	0x98, 0x01, 0x60, 0x07, 0xB0, 0xF0, 0xBD, 0x01, 0x28, 0xF4, 0xD0, 0xEC, 0xE7, 0x30, 0xB5, 0x00, 
+	0x22, 0x13, 0x46, 0x14, 0x21, 0x4B, 0x43, 0x19, 0x18, 0xC4, 0x58, 0x0D, 0x69, 0xC5, 0x50, 0x0C, 
+	0x61, 0xCC, 0x68, 0x4B, 0x68, 0x52, 0x1C, 0x4C, 0x60, 0xCB, 0x60, 0x05, 0x2A, 0xF0, 0xDB, 0x30, 
+	0xBD, 0x30, 0xB5, 0x00, 0x22, 0x93, 0x00, 0x19, 0x18, 0xC4, 0x58, 0x0D, 0x6D, 0xC5, 0x50, 0x0C, 
+	0x65, 0xCC, 0x6B, 0x4B, 0x69, 0x52, 0x1C, 0x4C, 0x61, 0xCB, 0x63, 0x05, 0x2A, 0xF2, 0xDB, 0x30, 
+	0xBD, 0x8C, 0xDD, 0x00, 0x00, 
+	0x00, 0x00, 0x78, 0x00, 0x80, 0xFC, 0x00, 0x00, 0x20, 0x30, 0xE0, 0x00, 0x00, 0x98, 0xDF, 0x00, 
+	0x00, 0x6A, 0x05, 0x00, 0x20, 0x9E, 0x00, 0x00, 0x20, 0x9D, 0x00, 0x00, 0x20, 0x6C, 0x09, 0x00, 
+	0x20, 0xF8, 0xB5, 0x86, 0x46, 0x08, 0x46, 0x00, 0x23, 0x14, 0x21, 0x5A, 0x1C, 0x9C, 0x00, 0x59, 
+	0x43, 0x0D, 0x18, 0x0A, 0xE0, 0x97, 0x00, 0x14, 0x21, 0xEE, 0x59, 0x51, 0x43, 0x09, 0x18, 0xB4, 
+	0x46, 0x0E, 0x59, 0xEE, 0x51, 0x66, 0x46, 0x0E, 0x51, 0x52, 0x1C, 0x05, 0x2A, 0xF2, 0xDB, 0x5B, 
+	0x1C, 0x04, 0x2B, 0xE9, 0xDB, 0x71, 0x46, 0x01, 0x29, 0x02, 0xD1, 0xFF, 0xF7, 0xC1, 0xFF, 0xF8, 
+	0xBD, 0xFF, 0xF7, 0xAC, 0xFF, 0xF8, 0xBD, 0xF3, 0xB5, 0x0C, 0x46, 0xA0, 0x6A, 0x01, 0x21, 0x83, 
+	0xB0, 0x00, 0x28, 0x00, 0xD0, 0x01, 0x46, 0xFF, 0x48, 0x80, 0x78, 0xC0, 0x07, 0xFE, 0x48, 0x04, 
+	0xD0, 0x40, 0x30, 0xC0, 0x89, 
+	0x00, 0x00, 0x79, 0x00, 0x80, 0x00, 0x05, 0x00, 0x0F, 0x00, 0xE0, 0x00, 0x7A, 0x23, 0x6A, 0x03, 
+	0x9A, 0x02, 0x93, 0xA7, 0x69, 0x00, 0x2A, 0x02, 0xD1, 0x3E, 0x46, 0x1A, 0x46, 0x01, 0xE0, 0x26, 
+	0x6C, 0xA2, 0x6C, 0x56, 0x43, 0x46, 0x43, 0x03, 0x9A, 0xE0, 0x69, 0x01, 0x90, 0x00, 0x2A, 0x00, 
+	0xD0, 0x60, 0x6C, 0x00, 0x28, 0x00, 0xD1, 0x01, 0x20, 0x40, 0x43, 0x05, 0x01, 0x62, 0x69, 0x69, 
+	0x43, 0x10, 0x46, 0x50, 0x43, 0x70, 0x43, 0x00, 0x92, 0x09, 0xF0, 0xD7, 0xFB, 0x20, 0x60, 0x00, 
+	0x9A, 0x90, 0x42, 0x00, 0xDD, 0x22, 0x60, 0xE0, 0x6A, 0x01, 0x21, 0x00, 0x28, 0x00, 0xD0, 0x01, 
+	0x46, 0x38, 0x46, 0x78, 0x43, 0x70, 0x43, 0x69, 0x43, 0x09, 0xF0, 0xC7, 0xFB, 0x60, 0x60, 0xB8, 
+	0x42, 0x00, 0xDD, 0x67, 0x60, 0x03, 0x98, 0x21, 0x6B, 0x00, 0x28, 0x02, 0xD1, 0x09, 0x01, 0x30, 
+	0x46, 0x03, 0xE0, 0x01, 0x98, 
+	0x00, 0x00, 0x7A, 0x00, 0x80, 0x69, 0x43, 0x40, 0x43, 0x70, 0x43, 0x09, 0xF0, 0xB6, 0xFB, 0xA0, 
+	0x60, 0x01, 0x99, 0x88, 0x42, 0x00, 0xDD, 0xA1, 0x60, 0x01, 0x27, 0x60, 0x6B, 0x39, 0x46, 0x00, 
+	0x28, 0x00, 0xD0, 0x01, 0x46, 0x02, 0x98, 0x69, 0x43, 0x40, 0x43, 0x70, 0x43, 0x09, 0xF0, 0xA5, 
+	0xFB, 0xE0, 0x60, 0x02, 0x99, 0x88, 0x42, 0x00, 0xDD, 0xE1, 0x60, 0xA0, 0x6B, 0x3A, 0x46, 0x00, 
+	0x28, 0x00, 0xD0, 0x02, 0x46, 0x61, 0x6A, 0x08, 0x46, 0x48, 0x43, 0x0F, 0x46, 0x29, 0x46, 0x70, 
+	0x43, 0x51, 0x43, 0x09, 0xF0, 0x92, 0xFB, 0x20, 0x61, 0xB8, 0x42, 0x00, 0xDD, 0x27, 0x61, 0x61, 
+	0x68, 0xA0, 0x68, 0x81, 0x42, 0x00, 0xDD, 0x60, 0x60, 0xE1, 0x68, 0x81, 0x42, 0x00, 0xDD, 0xE0, 
+	0x60, 0x21, 0x68, 0x60, 0x68, 0x81, 0x42, 0x00, 0xDD, 0x20, 0x60, 0x21, 0x69, 0xE0, 0x68, 0x81, 
+	0x42, 0x00, 0xDD, 0x20, 0x61, 
+	0x00, 0x00, 0x7B, 0x00, 0x80, 0x05, 0xB0, 0xF0, 0xBD, 0xF0, 0xB5, 0x04, 0x46, 0xB9, 0x48, 0x8B, 
+	0xB0, 0x80, 0x78, 0xC0, 0x07, 0xB8, 0x48, 0x03, 0xD0, 0x40, 0x30, 0xC0, 0x89, 0x00, 0x0B, 0x00, 
+	0xE0, 0x40, 0x7A, 0x00, 0x90, 0x61, 0x6C, 0x01, 0x20, 0x00, 0x29, 0x00, 0xD0, 0x08, 0x46, 0x05, 
+	0x90, 0xE0, 0x6B, 0x01, 0x22, 0x00, 0x28, 0x00, 0xD0, 0x02, 0x46, 0x04, 0x92, 0x21, 0x6C, 0x0A, 
+	0x91, 0xA0, 0x6C, 0x09, 0x90, 0x41, 0x43, 0x00, 0x98, 0x41, 0x43, 0x03, 0x91, 0x20, 0x6B, 0x08, 
+	0x90, 0x40, 0x43, 0x07, 0x90, 0xE5, 0x6A, 0x66, 0x6B, 0x28, 0x46, 0x00, 0x99, 0x70, 0x43, 0x48, 
+	0x43, 0x00, 0x02, 0x07, 0x99, 0x09, 0xF0, 0x49, 0xFB, 0x07, 0x46, 0x05, 0x98, 0x03, 0x99, 0x40, 
+	0x43, 0x06, 0x90, 0x08, 0x02, 0x06, 0x99, 0x09, 0xF0, 0x40, 0xFB, 0x38, 0x18, 0x02, 0x90, 0x06, 
+	0x98, 0x04, 0x9A, 0x01, 0x01, 
+	0x00, 0x00, 0x7C, 0x00, 0x80, 0x01, 0x91, 0xA7, 0x6A, 0x03, 0x99, 0x38, 0x46, 0x78, 0x43, 0x48, 
+	0x43, 0x01, 0x99, 0x51, 0x43, 0x09, 0xF0, 0x31, 0xFB, 0x60, 0x61, 0xB8, 0x42, 0x00, 0xDD, 0x67, 
+	0x61, 0x01, 0x27, 0x0A, 0x98, 0x39, 0x46, 0x00, 0x28, 0x00, 0xD0, 0x01, 0x46, 0x28, 0x46, 0x02, 
+	0x9A, 0x68, 0x43, 0x50, 0x43, 0x49, 0x03, 0x09, 0xF0, 0x20, 0xFB, 0xA0, 0x61, 0xA8, 0x42, 0x00, 
+	0xDD, 0xA5, 0x61, 0x3A, 0x46, 0x00, 0x2D, 0x00, 0xD0, 0x2A, 0x46, 0x00, 0x2E, 0x00, 0xD0, 0x72, 
+	0x43, 0x89, 0x49, 0x07, 0x98, 0x20, 0x31, 0xC9, 0x7A, 0x08, 0x41, 0x90, 0x42, 0x00, 0xDA, 0x10, 
+	0x46, 0x05, 0x99, 0x00, 0x9A, 0x09, 0x01, 0x50, 0x43, 0x09, 0xF0, 0x07, 0xFB, 0xE0, 0x61, 0x08, 
+	0x99, 0x4A, 0x00, 0x89, 0x18, 0xCA, 0x0F, 0x51, 0x18, 0x49, 0x10, 0x88, 0x42, 0x00, 0xDD, 0xE1, 
+	0x61, 0x09, 0x98, 0x39, 0x46, 
+	0x00, 0x00, 0x7D, 0x00, 0x80, 0x00, 0x28, 0x00, 0xD0, 0x01, 0x46, 0x30, 0x46, 0x02, 0x9A, 0x70, 
+	0x43, 0x50, 0x43, 0x49, 0x03, 0x09, 0xF0, 0xF1, 0xFA, 0x20, 0x62, 0xB0, 0x42, 0x00, 0xDD, 0x26, 
+	0x62, 0xE0, 0x6C, 0x00, 0x28, 0x00, 0xD0, 0x07, 0x46, 0xA5, 0x6B, 0x03, 0x99, 0x28, 0x46, 0x68, 
+	0x43, 0x48, 0x43, 0x01, 0x99, 0x79, 0x43, 0x09, 0xF0, 0xE0, 0xFA, 0x60, 0x62, 0xA8, 0x42, 0x00, 
+	0xDD, 0x65, 0x62, 0xA1, 0x69, 0xE0, 0x69, 0x81, 0x42, 0x03, 0xDD, 0xC1, 0x0F, 0x09, 0x18, 0x49, 
+	0x10, 0xA1, 0x61, 0x21, 0x6A, 0x81, 0x42, 0x03, 0xDD, 0xC1, 0x0F, 0x08, 0x18, 0x40, 0x10, 0x20, 
+	0x62, 0x61, 0x69, 0xA0, 0x69, 0x81, 0x42, 0x03, 0xDD, 0xC1, 0x0F, 0x08, 0x18, 0x40, 0x10, 0x60, 
+	0x61, 0x61, 0x6A, 0x20, 0x6A, 0x81, 0x42, 0x03, 0xDD, 0xC1, 0x0F, 0x08, 0x18, 0x40, 0x10, 0x60, 
+	0x62, 0x21, 0x46, 0x01, 0x20, 
+	0x00, 0x00, 0x7E, 0x00, 0x80, 0xFF, 0xF7, 0xAF, 0xFE, 0x0B, 0xB0, 0xF0, 0xBD, 0xF0, 0xB5, 0x59, 
+	0x49, 0x5A, 0x4B, 0x89, 0x78, 0xC9, 0x07, 0x05, 0xD0, 0xD9, 0x89, 0x0A, 0x0B, 0xD9, 0x89, 0x09, 
+	0x05, 0x09, 0x0F, 0x02, 0xE0, 0x54, 0x49, 0x4A, 0x7A, 0x09, 0x7A, 0x4C, 0x00, 0x09, 0x19, 0x8E, 
+	0x46, 0x02, 0x24, 0x14, 0x25, 0x02, 0x21, 0x65, 0x43, 0x2E, 0x18, 0x8D, 0x00, 0xAC, 0x46, 0x75, 
+	0x59, 0x5F, 0x7B, 0xBD, 0x42, 0x03, 0xDD, 0x2F, 0x46, 0x5D, 0x7B, 0x7F, 0x1B, 0x00, 0xE0, 0x00, 
+	0x27, 0x65, 0x46, 0x49, 0x1C, 0x77, 0x51, 0x05, 0x29, 0xEF, 0xD3, 0x64, 0x1C, 0x05, 0x2C, 0xE8, 
+	0xD3, 0x43, 0x6C, 0x01, 0x6B, 0xC9, 0x1A, 0x51, 0x43, 0x09, 0x11, 0xC1, 0x61, 0x83, 0x6C, 0x41, 
+	0x6B, 0xC9, 0x1A, 0x51, 0x43, 0x09, 0x11, 0x01, 0x62, 0x81, 0x6B, 0xC3, 0x6C, 0x89, 0x10, 0xC9, 
+	0x1A, 0x51, 0x43, 0x09, 0x11, 
+	0x00, 0x00, 0x7F, 0x00, 0x80, 0x41, 0x62, 0x02, 0x21, 0x8B, 0x00, 0x1C, 0x18, 0x64, 0x69, 0x75, 
+	0x46, 0x6C, 0x43, 0x24, 0x12, 0x49, 0x1C, 0xC4, 0x50, 0x05, 0x29, 0xF5, 0xD3, 0x81, 0x68, 0xC3, 
+	0x68, 0x89, 0x10, 0xC9, 0x1A, 0x51, 0x43, 0x09, 0x11, 0x41, 0x60, 0x03, 0x6A, 0xC1, 0x69, 0xC9, 
+	0x1A, 0x51, 0x43, 0x09, 0x11, 0x81, 0x61, 0x43, 0x6B, 0x01, 0x6B, 0xC9, 0x1A, 0x51, 0x43, 0x09, 
+	0x11, 0xC1, 0x62, 0x83, 0x6C, 0x41, 0x6C, 0xC9, 0x1A, 0x51, 0x43, 0x09, 0x11, 0x01, 0x64, 0x81, 
+	0x6D, 0xC3, 0x6D, 0x89, 0x10, 0xC9, 0x1A, 0x51, 0x43, 0x09, 0x11, 0x41, 0x65, 0x00, 0x21, 0x14, 
+	0x22, 0x4A, 0x43, 0x13, 0x18, 0x5B, 0x68, 0x74, 0x46, 0x63, 0x43, 0x1B, 0x12, 0x49, 0x1C, 0x83, 
+	0x50, 0x05, 0x29, 0xF4, 0xD3, 0xF0, 0xBD, 0xFF, 0xB5, 0x87, 0xB0, 0x00, 0x20, 0x98, 0x63, 0xD8, 
+	0x64, 0x18, 0x66, 0xD8, 0x65, 
+	0x00, 0x00, 0x80, 0x00, 0x80, 0x98, 0x65, 0x1D, 0x4E, 0x98, 0x6C, 0x71, 0x7B, 0x1C, 0x46, 0x88, 
+	0x42, 0x02, 0xDD, 0x71, 0x7B, 0x45, 0x1A, 0x00, 0xE0, 0x00, 0x25, 0x02, 0x20, 0xA5, 0x64, 0x02, 
+	0x2D, 0x00, 0xDD, 0x28, 0x46, 0x02, 0x90, 0x60, 0x6C, 0x06, 0x90, 0x61, 0x6B, 0x05, 0x91, 0x40, 
+	0x18, 0x01, 0x90, 0x02, 0x28, 0x01, 0xDA, 0x02, 0x20, 0x01, 0x90, 0x0F, 0x4F, 0x2C, 0x20, 0x38, 
+	0x5E, 0x01, 0x02, 0x2E, 0x20, 0x04, 0x91, 0x38, 0x5E, 0x01, 0x99, 0x68, 0x43, 0x00, 0x02, 0x09, 
+	0xF0, 0x14, 0xFA, 0x04, 0x99, 0x40, 0x18, 0x30, 0x21, 0x79, 0x5E, 0x01, 0x9A, 0x51, 0x43, 0x09, 
+	0x02, 0xC9, 0x11, 0x08, 0x18, 0x32, 0x21, 0x79, 0x5E, 0x69, 0x43, 0x09, 0x02, 0xC9, 0x11, 0x08, 
+	0x18, 0x34, 0x21, 0x05, 0xE0, 0xFC, 0x00, 0x00, 0x20, 0x8C, 0xDD, 0x00, 0x00, 0xCC, 0xDD, 0x00, 
+	0x00, 0x79, 0x5E, 0x69, 0x43, 
+	0x00, 0x00, 0x81, 0x00, 0x80, 0x89, 0x02, 0xC9, 0x11, 0x09, 0x18, 0x04, 0x91, 0x24, 0x6B, 0x05, 
+	0x98, 0x21, 0x1A, 0x06, 0x98, 0x08, 0x1A, 0x36, 0x21, 0x79, 0x5E, 0x48, 0x43, 0x02, 0x99, 0x00, 
+	0x02, 0x09, 0x01, 0x09, 0xF0, 0xEA, 0xF9, 0x04, 0x99, 0x40, 0x18, 0x38, 0x21, 0x79, 0x5E, 0x61, 
+	0x43, 0x09, 0x02, 0xC9, 0x11, 0x09, 0x18, 0x3A, 0x20, 0x04, 0x91, 0x38, 0x5E, 0x80, 0x21, 0x09, 
+	0x1B, 0x48, 0x43, 0x00, 0x02, 0x21, 0x46, 0x09, 0xF0, 0xD8, 0xF9, 0x04, 0x99, 0x41, 0x18, 0x60, 
+	0x1B, 0x04, 0x91, 0x3C, 0x21, 0x79, 0x5E, 0x48, 0x43, 0x01, 0x99, 0x00, 0x02, 0x89, 0x00, 0x09, 
+	0xF0, 0xCC, 0xF9, 0x04, 0x99, 0x41, 0x18, 0x00, 0x20, 0x04, 0x91, 0x30, 0x5E, 0x21, 0x46, 0x68, 
+	0x43, 0x00, 0x02, 0x09, 0xF0, 0xC2, 0xF9, 0x04, 0x99, 0x40, 0x18, 0x04, 0x90, 0x28, 0x19, 0x02, 
+	0x90, 0x02, 0x20, 0x30, 0x5E, 
+	0x00, 0x00, 0x82, 0x00, 0x80, 0x01, 0x02, 0x03, 0x91, 0x06, 0x99, 0x05, 0x98, 0x0D, 0x1A, 0x04, 
+	0x20, 0x30, 0x5E, 0x21, 0x46, 0x68, 0x43, 0x00, 0x02, 0x09, 0xF0, 0xAF, 0xF9, 0x03, 0x99, 0x44, 
+	0x18, 0x08, 0x20, 0x30, 0x5E, 0x02, 0x99, 0x45, 0x43, 0x28, 0x02, 0x09, 0xF0, 0xA6, 0xF9, 0x01, 
+	0x19, 0x04, 0x98, 0x00, 0x12, 0x0C, 0x12, 0xB9, 0x7B, 0xFF, 0x4A, 0x01, 0x29, 0x96, 0x69, 0x55, 
+	0x69, 0x10, 0xD1, 0x70, 0x43, 0x07, 0x14, 0x76, 0x43, 0x30, 0x12, 0x60, 0x43, 0x29, 0x46, 0x09, 
+	0xF0, 0x94, 0xF9, 0x01, 0x12, 0x6C, 0x43, 0x20, 0x14, 0x3A, 0x18, 0x07, 0x98, 0x79, 0x1A, 0x02, 
+	0x60, 0x08, 0x98, 0x0F, 0xE0, 0x68, 0x43, 0x07, 0x14, 0x6D, 0x43, 0x28, 0x12, 0x60, 0x43, 0x31, 
+	0x46, 0x09, 0xF0, 0x83, 0xF9, 0x74, 0x43, 0x21, 0x14, 0x08, 0x9A, 0x79, 0x18, 0x00, 0x12, 0x11, 
+	0x60, 0x39, 0x1A, 0x07, 0x98, 
+	0x00, 0x00, 0x83, 0x00, 0x80, 0x01, 0x60, 0xBF, 0xE6, 0xFF, 0xB5, 0x91, 0xB0, 0x1C, 0x46, 0x00, 
+	0x20, 0x09, 0xE0, 0x0E, 0x22, 0xE9, 0x4B, 0x42, 0x43, 0xD2, 0x18, 0xD3, 0x7A, 0x20, 0x2B, 0x01, 
+	0xD1, 0x00, 0x23, 0x93, 0x71, 0x40, 0x1C, 0x11, 0x9A, 0x90, 0x42, 0xF2, 0xD3, 0x48, 0x00, 0x12, 
+	0x90, 0xE3, 0x48, 0x05, 0x92, 0x10, 0x90, 0x20, 0xE3, 0x40, 0x1E, 0x0E, 0x21, 0x05, 0x90, 0x48, 
+	0x43, 0xDE, 0x49, 0x46, 0x18, 0xF0, 0x7A, 0x10, 0x28, 0xF5, 0xD0, 0xB5, 0x88, 0x70, 0x88, 0x0B, 
+	0x90, 0x00, 0x20, 0x21, 0xE0, 0x13, 0x99, 0x0B, 0x9A, 0x09, 0x5C, 0x52, 0x1A, 0x00, 0xD5, 0x52, 
+	0x42, 0x13, 0x99, 0x09, 0x18, 0x49, 0x78, 0x69, 0x1A, 0x00, 0xD5, 0x49, 0x42, 0x13, 0x46, 0x0B, 
+	0x43, 0x11, 0xD0, 0x03, 0x2A, 0x0F, 0xDC, 0x03, 0x29, 0x0D, 0xDC, 0x02, 0x2A, 0x02, 0xDA, 0xB2, 
+	0x79, 0x12, 0x1D, 0xB2, 0x71, 
+	0x00, 0x00, 0x84, 0x00, 0x80, 0x02, 0x29, 0x02, 0xDA, 0xB1, 0x79, 0x49, 0x1C, 0xB1, 0x71, 0xB1, 
+	0x79, 0xF0, 0x22, 0x11, 0x43, 0xB1, 0x71, 0x80, 0x1C, 0x12, 0x99, 0x88, 0x42, 0xDA, 0xD3, 0x0B, 
+	0x98, 0xC0, 0x1E, 0x84, 0x46, 0x00, 0x20, 0x06, 0x90, 0x60, 0x46, 0x40, 0x1C, 0x84, 0x46, 0x03, 
+	0xD4, 0xC4, 0x49, 0x09, 0x78, 0x8C, 0x45, 0x0B, 0xDB, 0x06, 0x9A, 0x00, 0x20, 0x14, 0x23, 0x5A, 
+	0x43, 0x01, 0x46, 0x12, 0x19, 0x83, 0x00, 0x40, 0x1C, 0xD1, 0x50, 0x05, 0x28, 0xFA, 0xDB, 0x24, 
+	0xE0, 0xBD, 0x4A, 0x60, 0x46, 0x12, 0x78, 0xA9, 0x1E, 0x50, 0x43, 0x40, 0x18, 0x06, 0x9A, 0x0A, 
+	0x90, 0x14, 0x23, 0x00, 0x20, 0x5A, 0x43, 0x17, 0x19, 0x00, 0x29, 0x03, 0xDB, 0xB6, 0x4A, 0x12, 
+	0x78, 0x91, 0x42, 0x02, 0xDB, 0x00, 0x22, 0x83, 0x00, 0x07, 0xE0, 0xB4, 0x4A, 0x0A, 0x9B, 0xD2, 
+	0x56, 0x83, 0x00, 0xFA, 0x50, 
+	0x00, 0x00, 0x85, 0x00, 0x80, 0x00, 0x2A, 0x01, 0xDA, 0x00, 0x22, 0xFA, 0x50, 0x0A, 0x9A, 0x49, 
+	0x1C, 0x52, 0x1C, 0x40, 0x1C, 0x0A, 0x92, 0x05, 0x28, 0xE6, 0xDB, 0x06, 0x98, 0x40, 0x1C, 0x06, 
+	0x90, 0x05, 0x28, 0xC1, 0xDB, 0x20, 0x6B, 0x00, 0x28, 0x01, 0xD1, 0x01, 0x20, 0x20, 0x63, 0x00, 
+	0x20, 0x04, 0x90, 0x03, 0x90, 0x02, 0x90, 0x0B, 0x98, 0x01, 0x28, 0x3E, 0xDC, 0x00, 0x28, 0x37, 
+	0xD1, 0x00, 0x2D, 0x04, 0xD0, 0xA0, 0x48, 0x00, 0x78, 0x40, 0x1E, 0x85, 0x42, 0x2A, 0xD1, 0x08, 
+	0x20, 0x02, 0x90, 0x00, 0x2D, 0x02, 0xD0, 0x20, 0x46, 0xFF, 0xF7, 0x70, 0xFC, 0x10, 0x98, 0x00, 
+	0x7B, 0x01, 0x28, 0x0A, 0xD1, 0x94, 0x48, 0x80, 0x78, 0xC0, 0x07, 0x06, 0xD1, 0x23, 0x46, 0x03, 
+	0xA9, 0x04, 0xA8, 0x05, 0x9A, 0xFF, 0xF7, 0x7F, 0xFE, 0x02, 0xE0, 0x20, 0x46, 0xFF, 0xF7, 0x06, 
+	0xFE, 0x00, 0x2D, 0x71, 0xD0, 
+	0x00, 0x00, 0x86, 0x00, 0x80, 0x8E, 0x48, 0x40, 0x38, 0x80, 0x7B, 0x01, 0x28, 0x03, 0xD1, 0x03, 
+	0x98, 0x40, 0x42, 0x03, 0x90, 0x02, 0xE0, 0x04, 0x98, 0x40, 0x42, 0x04, 0x90, 0x20, 0x46, 0xFF, 
+	0xF7, 0x4D, 0xFC, 0x69, 0xE0, 0x01, 0x20, 0x02, 0x90, 0x20, 0x46, 0xFF, 0xF7, 0x2D, 0xFD, 0x63, 
+	0xE0, 0x21, 0x46, 0x00, 0x20, 0xFF, 0xF7, 0x97, 0xFC, 0x5E, 0xE0, 0x82, 0x4F, 0x02, 0x46, 0x39, 
+	0x78, 0x88, 0x1E, 0x82, 0x42, 0x58, 0xDB, 0x01, 0x23, 0x18, 0x46, 0x00, 0x2D, 0x05, 0xD0, 0x7E, 
+	0x4A, 0x12, 0x78, 0x52, 0x1E, 0x95, 0x42, 0x00, 0xD0, 0x00, 0x20, 0x0B, 0x9A, 0x49, 0x1E, 0x8A, 
+	0x42, 0x00, 0xD0, 0x00, 0x23, 0x18, 0x42, 0x31, 0xD0, 0x09, 0x20, 0x02, 0x90, 0x20, 0x46, 0xFF, 
+	0xF7, 0x37, 0xFC, 0x00, 0x2D, 0x02, 0xD0, 0x20, 0x46, 0xFF, 0xF7, 0x20, 0xFC, 0x10, 0x98, 0x00, 
+	0x7B, 0x01, 0x28, 0x0A, 0xD1, 
+	0x00, 0x00, 0x87, 0x00, 0x80, 0x6C, 0x48, 0x80, 0x78, 0xC0, 0x07, 0x06, 0xD1, 0x23, 0x46, 0x03, 
+	0xA9, 0x04, 0xA8, 0x05, 0x9A, 0xFF, 0xF7, 0x2F, 0xFE, 0x02, 0xE0, 0x20, 0x46, 0xFF, 0xF7, 0xB6, 
+	0xFD, 0x20, 0x46, 0xFF, 0xF7, 0x1D, 0xFC, 0x00, 0x2D, 0x0C, 0xD1, 0x65, 0x48, 0x40, 0x38, 0x80, 
+	0x7B, 0x01, 0x28, 0x03, 0xD1, 0x04, 0x98, 0x40, 0x42, 0x04, 0x90, 0x24, 0xE0, 0x03, 0x98, 0x40, 
+	0x42, 0x03, 0x90, 0x20, 0xE0, 0x04, 0x98, 0x40, 0x42, 0x04, 0x90, 0xA0, 0xE7, 0x20, 0x46, 0xFF, 
+	0xF7, 0x07, 0xFC, 0x38, 0x78, 0x0B, 0x99, 0x40, 0x1E, 0x81, 0x42, 0x06, 0xD1, 0x02, 0x20, 0x02, 
+	0x90, 0x20, 0x46, 0xFF, 0xF7, 0xD1, 0xFC, 0x04, 0xE0, 0x4D, 0xE0, 0x21, 0x46, 0x00, 0x20, 0xFF, 
+	0xF7, 0x3A, 0xFC, 0x20, 0x46, 0xFF, 0xF7, 0xF4, 0xFB, 0x01, 0x2D, 0x1D, 0xDC, 0x00, 0x2D, 0x08, 
+	0xD1, 0x0B, 0x98, 0x00, 0x28, 
+	0x00, 0x00, 0x88, 0x00, 0x80, 0x3F, 0xD0, 0x4F, 0x49, 0x0B, 0x98, 0x09, 0x78, 0x49, 0x1E, 0x88, 
+	0x42, 0x39, 0xD0, 0x21, 0x46, 0x00, 0x20, 0xFF, 0xF7, 0x03, 0xFC, 0x00, 0x2D, 0x05, 0xD1, 0x03, 
+	0x20, 0x02, 0x90, 0x20, 0x46, 0xFF, 0xF7, 0xB0, 0xFC, 0x03, 0xE0, 0x21, 0x46, 0x00, 0x20, 0xFF, 
+	0xF7, 0x1A, 0xFC, 0x21, 0x46, 0x01, 0x20, 0x24, 0xE0, 0x43, 0x4F, 0x38, 0x78, 0x81, 0x1E, 0x8D, 
+	0x42, 0x21, 0xDB, 0x40, 0x1E, 0x85, 0x42, 0x08, 0xD1, 0x0B, 0x98, 0x00, 0x28, 0x1B, 0xD0, 0x01, 
+	0x46, 0x3C, 0x48, 0x00, 0x78, 0x40, 0x1E, 0x81, 0x42, 0x15, 0xD0, 0x21, 0x46, 0x01, 0x20, 0xFF, 
+	0xF7, 0xDF, 0xFB, 0x38, 0x78, 0x40, 0x1E, 0x85, 0x42, 0x05, 0xD1, 0x04, 0x20, 0x02, 0x90, 0x20, 
+	0x46, 0xFF, 0xF7, 0x8A, 0xFC, 0x03, 0xE0, 0x21, 0x46, 0x00, 0x20, 0xFF, 0xF7, 0xF4, 0xFB, 0x21, 
+	0x46, 0x00, 0x20, 0xFF, 0xF7, 
+	0x00, 0x00, 0x89, 0x00, 0x80, 0xCD, 0xFB, 0x02, 0x98, 0x00, 0x07, 0x19, 0xD4, 0x00, 0x21, 0x14, 
+	0x22, 0x00, 0x20, 0x4A, 0x43, 0x13, 0x19, 0x82, 0x00, 0x10, 0x9F, 0x94, 0x46, 0x9A, 0x58, 0x7F, 
+	0x7B, 0xBA, 0x42, 0x04, 0xDD, 0x17, 0x46, 0x10, 0x9A, 0x52, 0x7B, 0xBF, 0x1A, 0x00, 0xE0, 0x00, 
+	0x27, 0x62, 0x46, 0x40, 0x1C, 0x9F, 0x50, 0x05, 0x28, 0xED, 0xDB, 0x49, 0x1C, 0x05, 0x29, 0xE6, 
+	0xDB, 0x20, 0x6B, 0x00, 0x28, 0x01, 0xD1, 0x01, 0x20, 0x20, 0x63, 0xE1, 0x69, 0xA0, 0x69, 0xE2, 
+	0x6A, 0x40, 0x18, 0x21, 0x6A, 0x00, 0x27, 0x89, 0x18, 0x40, 0x18, 0x21, 0x6B, 0x40, 0x18, 0x61, 
+	0x6B, 0x40, 0x18, 0x21, 0x6C, 0x40, 0x18, 0x61, 0x6C, 0x40, 0x18, 0xA1, 0x6C, 0x07, 0x97, 0x40, 
+	0x18, 0x08, 0x97, 0x09, 0x90, 0xB0, 0x79, 0x00, 0x28, 0x7E, 0xD1, 0x82, 0x00, 0x96, 0x46, 0xA1, 
+	0x58, 0x13, 0x19, 0x5A, 0x69, 
+	0x00, 0x00, 0x8A, 0x00, 0x80, 0x9C, 0x46, 0x89, 0x18, 0x9A, 0x6A, 0xDB, 0x6B, 0xD2, 0x18, 0x89, 
+	0x18, 0x63, 0x46, 0x1A, 0x6D, 0x89, 0x18, 0xCF, 0x19, 0x14, 0x22, 0x01, 0x46, 0x51, 0x43, 0x0A, 
+	0x19, 0x12, 0x69, 0x61, 0x58, 0x51, 0x1A, 0x07, 0x9A, 0x89, 0x18, 0x07, 0x91, 0x72, 0x46, 0xA2, 
+	0x58, 0x19, 0x6D, 0x89, 0x1A, 0x08, 0x9A, 0x0B, 0xE0, 0xFC, 0x00, 0x00, 0x20, 0x6A, 0x05, 0x00, 
+	0x20, 0xCC, 0xDD, 0x00, 0x00, 0x9D, 0x00, 0x00, 0x20, 0x9E, 0x00, 0x00, 0x20, 0x6C, 0x09, 0x00, 
+	0x20, 0x89, 0x18, 0x40, 0x1C, 0x08, 0x91, 0x05, 0x28, 0xCF, 0xDB, 0x07, 0x98, 0x40, 0x00, 0x07, 
+	0x90, 0x48, 0x00, 0x08, 0x90, 0x00, 0x20, 0x14, 0x21, 0x41, 0x43, 0x09, 0x19, 0xCA, 0x68, 0x49, 
+	0x68, 0x51, 0x1A, 0x07, 0x9A, 0x89, 0x18, 0x07, 0x91, 0x81, 0x00, 0x09, 0x19, 0xCA, 0x6B, 0x49, 
+	0x69, 0x40, 0x1C, 0x51, 0x1A, 
+	0x00, 0x00, 0x8B, 0x00, 0x80, 0x08, 0x9A, 0x89, 0x18, 0x08, 0x91, 0x05, 0x28, 0xEB, 0xDB, 0x02, 
+	0x98, 0x39, 0x46, 0x01, 0x28, 0x20, 0xD1, 0x00, 0x20, 0x06, 0x90, 0x14, 0x22, 0x50, 0x43, 0x22, 
+	0x58, 0x00, 0x19, 0x43, 0x68, 0x96, 0x46, 0xD2, 0x18, 0x0F, 0x93, 0x84, 0x46, 0x83, 0x68, 0xC0, 
+	0x68, 0x1B, 0x18, 0xD2, 0x18, 0x63, 0x46, 0x1B, 0x69, 0xD2, 0x18, 0x89, 0x1A, 0x72, 0x46, 0x9A, 
+	0x1A, 0x0F, 0x9B, 0x52, 0x00, 0xC0, 0x1A, 0x10, 0x18, 0x07, 0x9A, 0x10, 0x1A, 0x07, 0x90, 0x06, 
+	0x98, 0x40, 0x1C, 0x06, 0x90, 0x02, 0x28, 0xE0, 0xDB, 0x02, 0x98, 0x02, 0x28, 0x22, 0xD1, 0x03, 
+	0x20, 0x06, 0x90, 0x14, 0x22, 0x50, 0x43, 0x22, 0x58, 0x00, 0x19, 0x43, 0x68, 0x96, 0x46, 0xD2, 
+	0x18, 0x0E, 0x93, 0x84, 0x46, 0x83, 0x68, 0x00, 0xE0, 0x5B, 0xE0, 0xC0, 0x68, 0x1B, 0x18, 0xD2, 
+	0x18, 0x63, 0x46, 0x1B, 0x69, 
+	0x00, 0x00, 0x8C, 0x00, 0x80, 0xD2, 0x18, 0x89, 0x1A, 0x72, 0x46, 0x9A, 0x1A, 0x0E, 0x9B, 0x52, 
+	0x00, 0xC0, 0x1A, 0x10, 0x18, 0x07, 0x9A, 0x10, 0x1A, 0x07, 0x90, 0x06, 0x98, 0x40, 0x1C, 0x06, 
+	0x90, 0x05, 0x28, 0xDE, 0xDB, 0x02, 0x98, 0x03, 0x28, 0x1F, 0xD1, 0x00, 0x20, 0x06, 0x90, 0x80, 
+	0x00, 0x22, 0x58, 0x00, 0x19, 0x43, 0x69, 0x96, 0x46, 0xD2, 0x18, 0x0D, 0x93, 0x84, 0x46, 0x83, 
+	0x6A, 0xC0, 0x6B, 0x1B, 0x18, 0xD2, 0x18, 0x63, 0x46, 0x1B, 0x6D, 0xD2, 0x18, 0xBF, 0x1A, 0x72, 
+	0x46, 0x9A, 0x1A, 0x0D, 0x9B, 0x52, 0x00, 0xC0, 0x1A, 0x10, 0x18, 0x08, 0x9A, 0x10, 0x1A, 0x08, 
+	0x90, 0x06, 0x98, 0x40, 0x1C, 0x06, 0x90, 0x02, 0x28, 0xE1, 0xDB, 0x02, 0x98, 0x04, 0x28, 0x5F, 
+	0xD1, 0x03, 0x20, 0x06, 0x90, 0x80, 0x00, 0x22, 0x58, 0x00, 0x19, 0x43, 0x69, 0x96, 0x46, 0xD2, 
+	0x18, 0x0C, 0x93, 0x84, 0x46, 
+	0x00, 0x00, 0x8D, 0x00, 0x80, 0x83, 0x6A, 0xC0, 0x6B, 0x1B, 0x18, 0xD2, 0x18, 0x63, 0x46, 0x1B, 
+	0x6D, 0xD2, 0x18, 0xBF, 0x1A, 0x72, 0x46, 0x9A, 0x1A, 0x0C, 0x9B, 0x52, 0x00, 0xC0, 0x1A, 0x10, 
+	0x18, 0x08, 0x9A, 0x10, 0x1A, 0x08, 0x90, 0x06, 0x98, 0x40, 0x1C, 0x06, 0x90, 0x05, 0x28, 0xE1, 
+	0xDB, 0x3E, 0xE0, 0x09, 0x9F, 0x01, 0x20, 0x39, 0x46, 0x14, 0x22, 0x42, 0x43, 0x12, 0x19, 0xD3, 
+	0x68, 0x52, 0x68, 0x9A, 0x1A, 0x07, 0x9B, 0xD2, 0x18, 0x07, 0x92, 0x82, 0x00, 0x12, 0x19, 0xD3, 
+	0x6B, 0x52, 0x69, 0x40, 0x1C, 0x9A, 0x1A, 0x08, 0x9B, 0xD2, 0x18, 0x08, 0x92, 0x04, 0x28, 0xEB, 
+	0xDB, 0x02, 0x98, 0x01, 0x28, 0x04, 0xD1, 0xA2, 0x69, 0xE0, 0x69, 0x13, 0x18, 0x20, 0x6A, 0x05, 
+	0xE0, 0x02, 0x28, 0x0A, 0xD1, 0x22, 0x6C, 0x60, 0x6C, 0x13, 0x18, 0xA0, 0x6C, 0x1B, 0x18, 0x80, 
+	0x1A, 0x07, 0x9A, 0xC9, 0x1A, 
+	0x00, 0x00, 0x8E, 0x00, 0x80, 0x10, 0x1A, 0x07, 0x90, 0x12, 0xE0, 0x03, 0x28, 0x04, 0xD1, 0xA2, 
+	0x69, 0xE0, 0x6A, 0x13, 0x18, 0x20, 0x6C, 0x05, 0xE0, 0x04, 0x28, 0x09, 0xD1, 0x22, 0x6A, 0x60, 
+	0x6B, 0x13, 0x18, 0xA0, 0x6C, 0x1B, 0x18, 0x80, 0x1A, 0x08, 0x9A, 0xFF, 0x1A, 0x10, 0x1A, 0x08, 
+	0x90, 0x07, 0x98, 0x00, 0x02, 0x08, 0xF0, 0xA1, 0xFE, 0x29, 0x02, 0x40, 0x18, 0x80, 0x30, 0x07, 
+	0x90, 0x08, 0x98, 0x39, 0x46, 0x00, 0x02, 0x08, 0xF0, 0x98, 0xFE, 0x0B, 0x99, 0x09, 0x02, 0x40, 
+	0x18, 0x80, 0x30, 0xFF, 0x4F, 0x08, 0x90, 0xB9, 0x7B, 0x01, 0x29, 0x0B, 0xD1, 0xFD, 0x49, 0x07, 
+	0x98, 0x8A, 0x69, 0x50, 0x43, 0x00, 0x14, 0x07, 0x90, 0x08, 0x98, 0x49, 0x69, 0x48, 0x43, 0x00, 
+	0x14, 0x08, 0x90, 0x0A, 0xE0, 0xF7, 0x49, 0x8A, 0x69, 0x49, 0x69, 0x50, 0x43, 0x07, 0x9A, 0x00, 
+	0x14, 0x4A, 0x43, 0x11, 0x14, 
+	0x00, 0x00, 0x8F, 0x00, 0x80, 0x07, 0x90, 0x08, 0x91, 0x08, 0x46, 0x04, 0x99, 0x40, 0x18, 0x08, 
+	0x90, 0x03, 0x99, 0x07, 0x98, 0x40, 0x18, 0x00, 0x21, 0x0A, 0x46, 0x07, 0x90, 0x00, 0x28, 0x00, 
+	0xDB, 0x02, 0x46, 0x08, 0x98, 0x07, 0x92, 0x00, 0x28, 0x00, 0xDB, 0x01, 0x46, 0x08, 0x91, 0xB0, 
+	0x79, 0x00, 0x07, 0x07, 0xD0, 0x07, 0xAA, 0x00, 0x92, 0x2A, 0x46, 0x08, 0xAB, 0x0B, 0x99, 0x05, 
+	0x98, 0xFF, 0xF7, 0x76, 0xF9, 0x07, 0xA9, 0x08, 0xA8, 0xFF, 0xF7, 0x3A, 0xF9, 0x00, 0x28, 0x05, 
+	0xD0, 0x11, 0x99, 0x05, 0x98, 0xFF, 0xF7, 0x23, 0xF9, 0x11, 0x90, 0x0E, 0xE0, 0x07, 0x98, 0xB0, 
+	0x80, 0x08, 0x98, 0x70, 0x80, 0xF8, 0x7B, 0x09, 0x99, 0x50, 0x22, 0x51, 0x43, 0x48, 0x43, 0xC0, 
+	0x0B, 0xFF, 0x21, 0xFF, 0x28, 0x00, 0xD8, 0xC1, 0xB2, 0xB1, 0x71, 0x05, 0x98, 0x00, 0x28, 0x00, 
+	0xD0, 0xDA, 0xE4, 0x11, 0x98, 
+	0x00, 0x00, 0x90, 0x00, 0x80, 0x15, 0xB0, 0xF0, 0xBD, 0xD1, 0x49, 0x00, 0x20, 0x09, 0x7C, 0x89, 
+	0x07, 0x89, 0x0F, 0x03, 0x29, 0x01, 0xD1, 0x01, 0x20, 0x70, 0x47, 0xCF, 0x4A, 0x01, 0x29, 0x12, 
+	0x88, 0x01, 0xD1, 0xD1, 0x06, 0x02, 0xE0, 0x02, 0x29, 0xF6, 0xD1, 0x91, 0x06, 0x00, 0x29, 0xF2, 
+	0xDB, 0x70, 0x47, 0xF0, 0xB5, 0xC9, 0x4E, 0x00, 0x24, 0x02, 0x22, 0x73, 0x1F, 0xA4, 0x18, 0x35, 
+	0x5D, 0x1F, 0x5D, 0x45, 0x43, 0x4F, 0x43, 0xBD, 0x42, 0x00, 0xD9, 0xA4, 0x1A, 0x52, 0x08, 0xF5, 
+	0xD1, 0x22, 0x01, 0x94, 0x46, 0x1D, 0x5D, 0x32, 0x5D, 0x64, 0x1C, 0x1B, 0x5D, 0x4D, 0x43, 0x4B, 
+	0x43, 0x31, 0x5D, 0x42, 0x43, 0x5B, 0x1B, 0x41, 0x43, 0x8C, 0x1A, 0x2E, 0x01, 0x15, 0x01, 0x08, 
+	0x21, 0x00, 0x20, 0x40, 0x18, 0x02, 0x46, 0x07, 0x46, 0x62, 0x43, 0x5F, 0x43, 0x52, 0x19, 0xBF, 
+	0x19, 0xBA, 0x42, 0x00, 0xD9, 
+	0x00, 0x00, 0x91, 0x00, 0x80, 0x40, 0x1A, 0x49, 0x08, 0xF3, 0xD1, 0x60, 0x44, 0xF0, 0xBD, 0xFF, 
+	0xB5, 0x83, 0xB0, 0x00, 0x25, 0x03, 0x98, 0x0C, 0x9C, 0x00, 0x95, 0x00, 0x28, 0x03, 0xD0, 0xAD, 
+	0x48, 0x00, 0x78, 0x80, 0x07, 0x03, 0xD1, 0x00, 0x20, 0xE0, 0x71, 0x20, 0x72, 0x99, 0xE0, 0x00, 
+	0x20, 0x02, 0x90, 0x40, 0x1E, 0x01, 0x90, 0xA6, 0x48, 0x80, 0x7B, 0x01, 0x28, 0x03, 0xD1, 0x60, 
+	0x88, 0x86, 0x46, 0xA0, 0x88, 0x02, 0xE0, 0xA0, 0x88, 0x86, 0x46, 0x60, 0x88, 0x00, 0x22, 0x84, 
+	0x46, 0x23, 0xE0, 0x08, 0x78, 0x05, 0x9B, 0x06, 0x9E, 0x58, 0x43, 0x5B, 0x08, 0xC0, 0x18, 0x03, 
+	0x0A, 0x70, 0x46, 0x1B, 0x1A, 0x48, 0x78, 0x70, 0x43, 0x76, 0x08, 0x80, 0x19, 0x00, 0x0A, 0x66, 
+	0x46, 0x86, 0x1B, 0x18, 0x46, 0x37, 0x46, 0x58, 0x43, 0x77, 0x43, 0xC0, 0x19, 0x02, 0x9F, 0xB8, 
+	0x42, 0x04, 0xD3, 0x02, 0x90, 
+	0x00, 0x00, 0x92, 0x00, 0x80, 0x30, 0xB2, 0x1D, 0xB2, 0x00, 0x90, 0x03, 0xE0, 0x01, 0x9B, 0x98, 
+	0x42, 0x00, 0xD8, 0x01, 0x90, 0x52, 0x1C, 0xD2, 0xB2, 0x89, 0x1C, 0x03, 0x98, 0x82, 0x42, 0xD8, 
+	0xD3, 0x02, 0x98, 0x00, 0xF0, 0x8F, 0xFE, 0x46, 0x00, 0x01, 0x98, 0x01, 0x01, 0x02, 0x98, 0xC2, 
+	0x00, 0x80, 0x18, 0x81, 0x42, 0x01, 0xD9, 0x37, 0x46, 0x13, 0xE0, 0x01, 0x98, 0x00, 0xF0, 0x82, 
+	0xFE, 0x47, 0x00, 0x83, 0x48, 0x80, 0x7B, 0x01, 0x28, 0x02, 0xD0, 0x00, 0x98, 0x00, 0x95, 0x05, 
+	0x46, 0x80, 0x48, 0x00, 0x78, 0x80, 0x07, 0x04, 0xD5, 0x00, 0x98, 0x40, 0x42, 0x02, 0xB2, 0x00, 
+	0x2D, 0x01, 0xD1, 0x00, 0x20, 0x18, 0xE0, 0x00, 0x2A, 0x03, 0xDA, 0x50, 0x42, 0x02, 0xB2, 0x68, 
+	0x42, 0x05, 0xB2, 0x68, 0x42, 0x00, 0x2D, 0x00, 0xDB, 0x28, 0x46, 0x82, 0x42, 0x04, 0xD9, 0x01, 
+	0x46, 0x10, 0x46, 0xFF, 0xF7, 
+	0x00, 0x00, 0x93, 0x00, 0x80, 0x56, 0xFF, 0x04, 0xE0, 0x11, 0x46, 0xFF, 0xF7, 0x52, 0xFF, 0x7F, 
+	0x21, 0x08, 0x1A, 0x00, 0x2D, 0x00, 0xDA, 0x40, 0x42, 0x6E, 0x49, 0x09, 0x78, 0xC9, 0x07, 0x02, 
+	0xD1, 0x00, 0x22, 0x11, 0x46, 0x1B, 0xE0, 0x6A, 0x49, 0x20, 0x31, 0x4A, 0x78, 0xB2, 0x42, 0x02, 
+	0xD2, 0x4A, 0x78, 0xB2, 0x1A, 0x00, 0xE0, 0x00, 0x22, 0x8B, 0x78, 0x53, 0x43, 0x1A, 0x0A, 0xFF, 
+	0x2A, 0x00, 0xD9, 0xFF, 0x22, 0xCB, 0x78, 0xBB, 0x42, 0x02, 0xD2, 0xCB, 0x78, 0xFB, 0x1A, 0x00, 
+	0xE0, 0x00, 0x23, 0x09, 0x79, 0x59, 0x43, 0x09, 0x0A, 0xFF, 0x29, 0x00, 0xD9, 0xFF, 0x21, 0xE2, 
+	0x71, 0x21, 0x72, 0x60, 0x72, 0x07, 0xB0, 0xF0, 0xBD, 0xF7, 0xB5, 0x59, 0x4C, 0xDA, 0xB0, 0xA5, 
+	0x7B, 0x07, 0x46, 0x58, 0x4B, 0x01, 0x2D, 0x5A, 0x69, 0x98, 0x69, 0x02, 0xD1, 0x1D, 0x92, 0x1C, 
+	0x90, 0x01, 0xE0, 0x1C, 0x92, 
+	0x00, 0x00, 0x94, 0x00, 0x80, 0x1D, 0x90, 0x56, 0x48, 0x51, 0x4A, 0x00, 0x78, 0x40, 0x1E, 0x3C, 
+	0x90, 0x54, 0x48, 0x00, 0x78, 0x40, 0x1E, 0x3B, 0x90, 0x00, 0x20, 0x20, 0x90, 0x50, 0x7D, 0x1F, 
+	0x90, 0x90, 0x7D, 0x1E, 0x90, 0x98, 0x7A, 0x00, 0x28, 0x14, 0xD0, 0xD8, 0x7A, 0x01, 0x28, 0x09, 
+	0xD1, 0x10, 0x46, 0xC2, 0x7D, 0x1F, 0x9C, 0x12, 0x19, 0x1F, 0x92, 0x00, 0x7E, 0x1E, 0x9A, 0x10, 
+	0x1A, 0x1E, 0x90, 0x07, 0xE0, 0x18, 0x7B, 0x01, 0x28, 0x04, 0xD1, 0x41, 0x48, 0xC2, 0x7D, 0x1F, 
+	0x98, 0x80, 0x1A, 0x1F, 0x90, 0x3F, 0x48, 0x00, 0x24, 0xC4, 0x72, 0x04, 0x73, 0x42, 0x48, 0x40, 
+	0x6A, 0x42, 0x09, 0x52, 0x1C, 0x20, 0x46, 0x04, 0xE0, 0x00, 0x23, 0x84, 0x00, 0x23, 0xAD, 0x2B, 
+	0x51, 0x40, 0x1C, 0x90, 0x42, 0xF8, 0xD3, 0x48, 0x00, 0x5B, 0x90, 0x00, 0x20, 0x34, 0x49, 0x36, 
+	0x90, 0x08, 0x46, 0x40, 0x30, 
+	0x00, 0x00, 0x95, 0x00, 0x80, 0x20, 0x31, 0x59, 0x90, 0x58, 0x91, 0x36, 0x98, 0xB0, 0xE2, 0x36, 
+	0x99, 0x5C, 0x98, 0x23, 0xAB, 0x41, 0x5C, 0x22, 0x91, 0x36, 0x99, 0x00, 0x24, 0x40, 0x18, 0x42, 
+	0x78, 0x21, 0x92, 0x01, 0x21, 0x3B, 0x9A, 0x38, 0x91, 0x52, 0x1C, 0x22, 0x99, 0x57, 0x92, 0x51, 
+	0x43, 0x21, 0x9A, 0x56, 0x91, 0x89, 0x18, 0x4A, 0x09, 0x92, 0x00, 0x16, 0x46, 0x9A, 0x58, 0xCD, 
+	0x06, 0xED, 0x0E, 0x01, 0x23, 0xAB, 0x40, 0x15, 0x46, 0x20, 0x46, 0x1D, 0x42, 0x72, 0xD1, 0x23, 
+	0xAD, 0x5A, 0x40, 0xAA, 0x51, 0x25, 0x4A, 0x51, 0x56, 0x1D, 0x4A, 0x92, 0x7E, 0x8A, 0x42, 0x1C, 
+	0x4A, 0x01, 0xDD, 0xD2, 0x7E, 0x00, 0xE0, 0x52, 0x7E, 0x8C, 0x46, 0x4A, 0x43, 0xD2, 0x09, 0x3A, 
+	0x92, 0x22, 0x9A, 0x42, 0x92, 0x40, 0x92, 0x3F, 0x92, 0x21, 0x9A, 0x3E, 0x92, 0x01, 0x23, 0x1B, 
+	0x93, 0x59, 0x9B, 0x41, 0x92, 
+	0x00, 0x00, 0x96, 0x00, 0x80, 0x3D, 0x92, 0x5B, 0x7B, 0x8B, 0x42, 0x03, 0xDA, 0x59, 0x9B, 0x5B, 
+	0x7B, 0xC9, 0x1A, 0x00, 0xE0, 0x00, 0x21, 0x42, 0x9B, 0x0D, 0x46, 0x37, 0x91, 0x5D, 0x43, 0x51, 
+	0x43, 0x0E, 0x46, 0x00, 0x21, 0x1A, 0x91, 0x41, 0x9B, 0x3B, 0x99, 0x8B, 0x42, 0x6A, 0xD0, 0x5B, 
+	0x1C, 0x42, 0x99, 0x57, 0x9A, 0x54, 0x91, 0x51, 0x43, 0xCA, 0x18, 0x51, 0x11, 0x41, 0x93, 0x89, 
+	0x00, 0x39, 0x92, 0x55, 0x93, 0x53, 0x91, 0x23, 0xAA, 0x51, 0x58, 0x52, 0x91, 0x39, 0x9A, 0x0F, 
+	0xE0, 0x8C, 0xDD, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x20, 0x96, 0x02, 0x00, 0x20, 0xB9, 0xD6, 0x00, 
+	0x00, 0x9D, 0x00, 0x00, 0x20, 0x9E, 0x00, 0x00, 0x20, 0x98, 0xDF, 0x00, 0x00, 0x6C, 0x09, 0x00, 
+	0x20, 0xD3, 0x06, 0xDB, 0x0E, 0x01, 0x22, 0x9A, 0x40, 0x11, 0x42, 0x40, 0xD1, 0x52, 0x99, 0x23, 
+	0xAB, 0x51, 0x40, 0x53, 0x9A, 
+	0x00, 0x00, 0x97, 0x00, 0x80, 0x99, 0x50, 0xFF, 0x49, 0x39, 0x9A, 0x89, 0x56, 0x3A, 0x9A, 0x39, 
+	0x91, 0x91, 0x42, 0x13, 0xDD, 0x54, 0x99, 0x39, 0x54, 0x3A, 0x18, 0x41, 0x99, 0x51, 0x70, 0x1B, 
+	0x99, 0x80, 0x1C, 0x49, 0x1C, 0x1B, 0x91, 0x59, 0x99, 0x49, 0x7B, 0x39, 0x9A, 0x91, 0x42, 0x02, 
+	0xDA, 0x11, 0x46, 0x01, 0xE0, 0x09, 0xE2, 0x00, 0x21, 0x8C, 0x44, 0x0A, 0xE0, 0x30, 0x2C, 0x08, 
+	0xD2, 0x61, 0x00, 0x01, 0xAA, 0x54, 0x9B, 0x53, 0x54, 0x89, 0x18, 0x55, 0x9B, 0x64, 0x1C, 0x4B, 
+	0x70, 0xE4, 0xB2, 0x59, 0x99, 0x49, 0x7B, 0x39, 0x9A, 0x52, 0x1A, 0x00, 0x2A, 0x0C, 0xDD, 0x37, 
+	0x99, 0x89, 0x18, 0x37, 0x91, 0x42, 0x99, 0x51, 0x43, 0x4D, 0x19, 0x41, 0x99, 0x4A, 0x43, 0x96, 
+	0x19, 0x3D, 0x9A, 0x8A, 0x42, 0x00, 0xD2, 0x3D, 0x91, 0x38, 0x99, 0x49, 0x1C, 0x38, 0x91, 0x41, 
+	0x99, 0x49, 0x1E, 0x41, 0x91, 
+	0x00, 0x00, 0x98, 0x00, 0x80, 0x3C, 0x9A, 0x42, 0x99, 0x91, 0x42, 0x59, 0xD0, 0x49, 0x1C, 0x42, 
+	0x91, 0x57, 0x9A, 0x51, 0x91, 0x51, 0x43, 0x41, 0x9A, 0x50, 0x92, 0x8A, 0x18, 0x51, 0x11, 0x89, 
+	0x00, 0x39, 0x92, 0x4F, 0x91, 0x23, 0xAA, 0x51, 0x58, 0x39, 0x9A, 0x4E, 0x91, 0xD3, 0x06, 0xDB, 
+	0x0E, 0x01, 0x22, 0x9A, 0x40, 0x11, 0x42, 0x40, 0xD1, 0x4E, 0x99, 0x23, 0xAB, 0x51, 0x40, 0x4F, 
+	0x9A, 0x99, 0x50, 0xD0, 0x49, 0x39, 0x9A, 0x89, 0x56, 0x3A, 0x9A, 0x39, 0x91, 0x91, 0x42, 0x12, 
+	0xDD, 0x51, 0x99, 0x39, 0x54, 0x3A, 0x18, 0x41, 0x99, 0x51, 0x70, 0x1B, 0x99, 0x80, 0x1C, 0x49, 
+	0x1C, 0x1B, 0x91, 0x59, 0x99, 0x49, 0x7B, 0x39, 0x9A, 0x91, 0x42, 0x01, 0xDA, 0x11, 0x46, 0x00, 
+	0xE0, 0x00, 0x21, 0x8C, 0x44, 0x0A, 0xE0, 0x30, 0x2C, 0x08, 0xD2, 0x61, 0x00, 0x01, 0xAA, 0x51, 
+	0x9B, 0x53, 0x54, 0x89, 0x18, 
+	0x00, 0x00, 0x99, 0x00, 0x80, 0x50, 0x9B, 0x64, 0x1C, 0x4B, 0x70, 0xE4, 0xB2, 0x59, 0x99, 0x49, 
+	0x7B, 0x39, 0x9A, 0x51, 0x1A, 0x00, 0x29, 0x0D, 0xDD, 0x37, 0x9A, 0x0B, 0x46, 0x52, 0x18, 0x37, 
+	0x92, 0x42, 0x9A, 0x53, 0x43, 0x5D, 0x19, 0x41, 0x9B, 0x59, 0x43, 0x8E, 0x19, 0x3F, 0x99, 0x91, 
+	0x42, 0x00, 0xD2, 0x3F, 0x92, 0x38, 0x99, 0x49, 0x1C, 0x38, 0x91, 0x42, 0x99, 0x49, 0x1E, 0x42, 
+	0x91, 0x41, 0x9B, 0x00, 0x2B, 0x57, 0xD0, 0x5B, 0x1E, 0x4D, 0x93, 0x57, 0x9A, 0x4C, 0x91, 0x51, 
+	0x43, 0xCA, 0x18, 0x51, 0x11, 0x41, 0x93, 0x89, 0x00, 0x39, 0x92, 0x4B, 0x91, 0x23, 0xAA, 0x51, 
+	0x58, 0x39, 0x9A, 0x4A, 0x91, 0xD3, 0x06, 0xDB, 0x0E, 0x01, 0x22, 0x9A, 0x40, 0x11, 0x42, 0x3F, 
+	0xD1, 0x4A, 0x99, 0x23, 0xAB, 0x51, 0x40, 0x4B, 0x9A, 0x99, 0x50, 0xA2, 0x49, 0x39, 0x9A, 0x89, 
+	0x56, 0x3A, 0x9A, 0x39, 0x91, 
+	0x00, 0x00, 0x9A, 0x00, 0x80, 0x91, 0x42, 0x12, 0xDD, 0x4C, 0x99, 0x39, 0x54, 0x3A, 0x18, 0x41, 
+	0x99, 0x51, 0x70, 0x1B, 0x99, 0x80, 0x1C, 0x49, 0x1C, 0x1B, 0x91, 0x59, 0x99, 0x49, 0x7B, 0x39, 
+	0x9A, 0x91, 0x42, 0x01, 0xDA, 0x11, 0x46, 0x00, 0xE0, 0x00, 0x21, 0x8C, 0x44, 0x0A, 0xE0, 0x30, 
+	0x2C, 0x08, 0xD2, 0x61, 0x00, 0x01, 0xAA, 0x4C, 0x9B, 0x53, 0x54, 0x89, 0x18, 0x4D, 0x9B, 0x64, 
+	0x1C, 0x4B, 0x70, 0xE4, 0xB2, 0x59, 0x99, 0x49, 0x7B, 0x39, 0x9A, 0x52, 0x1A, 0x00, 0x2A, 0x0C, 
+	0xDD, 0x37, 0x99, 0x89, 0x18, 0x37, 0x91, 0x42, 0x99, 0x51, 0x43, 0x4D, 0x19, 0x41, 0x99, 0x4A, 
+	0x43, 0x96, 0x19, 0x3E, 0x9A, 0x8A, 0x42, 0x00, 0xD9, 0x3E, 0x91, 0x38, 0x99, 0x49, 0x1C, 0x38, 
+	0x91, 0x41, 0x99, 0x49, 0x1C, 0x41, 0x91, 0x42, 0x99, 0x00, 0x29, 0x59, 0xD0, 0x49, 0x1E, 0x57, 
+	0x9A, 0x42, 0x91, 0x49, 0x91, 
+	0x00, 0x00, 0x9B, 0x00, 0x80, 0x51, 0x43, 0x41, 0x9A, 0x48, 0x92, 0x8A, 0x18, 0x51, 0x11, 0x89, 
+	0x00, 0x39, 0x92, 0x47, 0x91, 0x23, 0xAA, 0x51, 0x58, 0x39, 0x9A, 0x46, 0x91, 0xD3, 0x06, 0xDB, 
+	0x0E, 0x01, 0x22, 0x9A, 0x40, 0x11, 0x42, 0x40, 0xD1, 0x46, 0x99, 0x23, 0xAB, 0x51, 0x40, 0x47, 
+	0x9A, 0x99, 0x50, 0x74, 0x49, 0x39, 0x9A, 0x89, 0x56, 0x3A, 0x9A, 0x39, 0x91, 0x91, 0x42, 0x12, 
+	0xDD, 0x49, 0x99, 0x39, 0x54, 0x3A, 0x18, 0x41, 0x99, 0x51, 0x70, 0x1B, 0x99, 0x80, 0x1C, 0x49, 
+	0x1C, 0x1B, 0x91, 0x59, 0x99, 0x49, 0x7B, 0x39, 0x9A, 0x91, 0x42, 0x01, 0xDA, 0x11, 0x46, 0x00, 
+	0xE0, 0x00, 0x21, 0x8C, 0x44, 0x0A, 0xE0, 0x30, 0x2C, 0x08, 0xD2, 0x61, 0x00, 0x01, 0xAA, 0x49, 
+	0x9B, 0x53, 0x54, 0x89, 0x18, 0x48, 0x9B, 0x64, 0x1C, 0x4B, 0x70, 0xE4, 0xB2, 0x59, 0x99, 0x49, 
+	0x7B, 0x39, 0x9A, 0x51, 0x1A, 
+	0x00, 0x00, 0x9C, 0x00, 0x80, 0x00, 0x29, 0x0D, 0xDD, 0x37, 0x9A, 0x0B, 0x46, 0x52, 0x18, 0x37, 
+	0x92, 0x42, 0x9A, 0x53, 0x43, 0x5D, 0x19, 0x41, 0x9B, 0x59, 0x43, 0x8E, 0x19, 0x40, 0x99, 0x91, 
+	0x42, 0x00, 0xD9, 0x40, 0x92, 0x38, 0x99, 0x49, 0x1C, 0x38, 0x91, 0x42, 0x99, 0x49, 0x1C, 0x42, 
+	0x91, 0x00, 0x28, 0x20, 0xD0, 0x80, 0x1E, 0x39, 0x56, 0x42, 0x91, 0x3A, 0x18, 0x01, 0x21, 0x51, 
+	0x56, 0x41, 0x91, 0x45, 0x91, 0x00, 0x21, 0x19, 0x91, 0x42, 0x9B, 0x10, 0xE0, 0x19, 0x9A, 0x5C, 
+	0x99, 0x89, 0x5C, 0x99, 0x42, 0x07, 0xD1, 0x5C, 0x99, 0x89, 0x18, 0x49, 0x78, 0x45, 0x9A, 0x91, 
+	0x42, 0x01, 0xD1, 0x01, 0x21, 0x1A, 0x91, 0x19, 0x99, 0x89, 0x1C, 0xC9, 0xB2, 0x19, 0x91, 0x5B, 
+	0x9A, 0x91, 0x42, 0xEB, 0xD3, 0x57, 0xE6, 0x58, 0x98, 0x80, 0x7A, 0x00, 0x28, 0x26, 0xD0, 0x41, 
+	0x49, 0x21, 0x9A, 0x56, 0x98, 
+	0x00, 0x00, 0x9D, 0x00, 0x80, 0x89, 0x18, 0x40, 0x56, 0x61, 0x46, 0x48, 0x43, 0x1B, 0x99, 0x08, 
+	0xF0, 0xEA, 0xFA, 0x40, 0x9A, 0x3F, 0x99, 0x3E, 0x9B, 0x89, 0x1A, 0x3D, 0x9A, 0xD2, 0x1A, 0x91, 
+	0x42, 0x00, 0xD8, 0x11, 0x46, 0x08, 0xF0, 0xDF, 0xFA, 0xC0, 0x08, 0xFF, 0x28, 0x00, 0xD9, 0xFF, 
+	0x20, 0x20, 0x99, 0x00, 0x29, 0x01, 0xD1, 0x34, 0x49, 0x88, 0x73, 0x58, 0x99, 0x89, 0x7A, 0x32, 
+	0x4A, 0xD2, 0x78, 0x00, 0x2A, 0x00, 0xD0, 0x00, 0x21, 0x88, 0x42, 0x7E, 0xD3, 0x38, 0x99, 0x1F, 
+	0x98, 0x88, 0x42, 0x7F, 0xD3, 0x20, 0x99, 0x36, 0x98, 0x0E, 0x22, 0x51, 0x43, 0xC0, 0x03, 0x2B, 
+	0x4A, 0x00, 0x0C, 0x50, 0x52, 0x89, 0x18, 0x00, 0x20, 0x44, 0x91, 0xC8, 0x71, 0x08, 0x72, 0x48, 
+	0x72, 0x1E, 0x9A, 0x38, 0x99, 0x8A, 0x42, 0x0C, 0xD3, 0x1A, 0x99, 0x00, 0x29, 0x09, 0xD1, 0x22, 
+	0x99, 0x42, 0x91, 0x21, 0x99, 
+	0x00, 0x00, 0x9E, 0x00, 0x80, 0x41, 0x91, 0x44, 0x9A, 0x20, 0x21, 0xD1, 0x72, 0x44, 0x99, 0x08, 
+	0x73, 0x51, 0xE0, 0x1F, 0x48, 0x80, 0x7B, 0x00, 0x28, 0x03, 0xD1, 0x28, 0x46, 0x42, 0x95, 0x35, 
+	0x46, 0x06, 0x46, 0x19, 0x48, 0x37, 0x99, 0x42, 0x69, 0x43, 0x92, 0x10, 0x46, 0x68, 0x43, 0x08, 
+	0xF0, 0xA4, 0xFA, 0x43, 0x9A, 0x51, 0x10, 0x40, 0x18, 0x00, 0x12, 0x42, 0x90, 0x12, 0x48, 0x37, 
+	0x99, 0x85, 0x69, 0x28, 0x46, 0x70, 0x43, 0x08, 0xF0, 0x98, 0xFA, 0x69, 0x10, 0x40, 0x18, 0x00, 
+	0x12, 0x41, 0x90, 0x41, 0xA9, 0x42, 0xA8, 0xFE, 0xF7, 0x73, 0xFD, 0x01, 0x28, 0x45, 0xD0, 0x0C, 
+	0x48, 0xC1, 0x7B, 0x37, 0x98, 0x50, 0x22, 0x50, 0x43, 0x41, 0x43, 0xC8, 0x0B, 0xFF, 0x21, 0xFF, 
+	0x28, 0x00, 0xD8, 0xC1, 0xB2, 0x44, 0x98, 0x81, 0x71, 0x44, 0x99, 0x10, 0x20, 0xC8, 0x72, 0x44, 
+	0x99, 0x08, 0x73, 0x07, 0xE0, 
+	0x00, 0x00, 0x9F, 0x00, 0x80, 0x6C, 0x09, 0x00, 0x20, 0xFC, 0x00, 0x00, 0x20, 0x6A, 0x05, 0x00, 
+	0x20, 0x8C, 0xDD, 0x00, 0x00, 0x44, 0x99, 0x42, 0x98, 0x48, 0x80, 0x44, 0x99, 0x41, 0x98, 0x88, 
+	0x80, 0x44, 0x9A, 0x00, 0x92, 0x01, 0xA9, 0x20, 0x46, 0x1C, 0x9B, 0x1D, 0x9A, 0xFF, 0xF7, 0x6F, 
+	0xFC, 0xF8, 0x49, 0x01, 0x20, 0xC8, 0x72, 0x44, 0x99, 0x42, 0x98, 0x48, 0x80, 0x44, 0x99, 0x41, 
+	0x98, 0x88, 0x80, 0x20, 0x98, 0x40, 0x1C, 0x20, 0x90, 0x01, 0xE0, 0x0E, 0xE0, 0x02, 0xE0, 0x0B, 
+	0x28, 0x12, 0xD0, 0x0A, 0xE0, 0xF0, 0x48, 0x00, 0x79, 0x02, 0x28, 0x03, 0xD1, 0xED, 0x49, 0x08, 
+	0x79, 0x40, 0x1C, 0x08, 0x71, 0xEB, 0x49, 0x01, 0x20, 0x08, 0x73, 0x36, 0x98, 0x80, 0x1C, 0x36, 
+	0x90, 0x5B, 0x99, 0x88, 0x42, 0x00, 0xD2, 0x4A, 0xE5, 0x20, 0x98, 0x5D, 0xB0, 0xC0, 0xB2, 0xF0, 
+	0xBD, 0xF3, 0xB5, 0x8E, 0xB0, 
+	0x00, 0x00, 0xA0, 0x00, 0x80, 0x40, 0x00, 0x00, 0x21, 0x0E, 0x90, 0xE2, 0x48, 0x01, 0x91, 0x0A, 
+	0x91, 0x40, 0x79, 0x0D, 0x90, 0xE1, 0x48, 0x0A, 0x46, 0x00, 0x78, 0x8C, 0x46, 0x40, 0x1E, 0x0C, 
+	0x90, 0xDF, 0x48, 0x00, 0x78, 0x0B, 0x90, 0x40, 0x1E, 0x86, 0x46, 0x00, 0x25, 0x89, 0xE0, 0x0F, 
+	0x99, 0x60, 0x46, 0x0C, 0x5C, 0x08, 0x18, 0x0B, 0x99, 0x40, 0x78, 0x61, 0x43, 0x09, 0x18, 0x01, 
+	0x23, 0x00, 0x2C, 0x07, 0xD0, 0x00, 0x28, 0x05, 0xD0, 0x0C, 0x9E, 0xB4, 0x42, 0x02, 0xD0, 0x70, 
+	0x45, 0x00, 0xD0, 0x00, 0x23, 0x00, 0x93, 0x00, 0x23, 0x9E, 0x00, 0x02, 0xAF, 0x5B, 0x1C, 0xBD, 
+	0x51, 0x08, 0x2B, 0xF9, 0xD3, 0x00, 0x9B, 0x00, 0x2B, 0xCB, 0x4B, 0x01, 0xD1, 0xDB, 0x7C, 0x00, 
+	0xE0, 0x1B, 0x7D, 0xCC, 0x4E, 0x76, 0x56, 0x73, 0x43, 0xDB, 0x08, 0x9A, 0x18, 0x0D, 0x9B, 0x01, 
+	0x2B, 0x03, 0xD1, 0xC8, 0x4B, 
+	0x00, 0x00, 0xA1, 0x00, 0x80, 0x5B, 0x56, 0x5B, 0x10, 0x9A, 0x18, 0x0C, 0x9B, 0x9C, 0x42, 0x13, 
+	0xD2, 0x0B, 0x9B, 0xCF, 0x18, 0xC3, 0x4B, 0x70, 0x45, 0xDB, 0x57, 0x08, 0x93, 0x04, 0xD2, 0xC1, 
+	0x4B, 0xFB, 0x18, 0x01, 0x26, 0x9E, 0x57, 0x09, 0x96, 0x00, 0x28, 0x05, 0xD0, 0xBD, 0x4B, 0xFB, 
+	0x18, 0x20, 0x3B, 0x1F, 0x26, 0x9E, 0x57, 0x07, 0x96, 0x00, 0x2C, 0x11, 0xD0, 0x0B, 0x9B, 0xB9, 
+	0x4F, 0xCB, 0x1A, 0xFC, 0x56, 0x03, 0x94, 0x70, 0x45, 0x03, 0xD2, 0xDC, 0x19, 0x01, 0x26, 0xA6, 
+	0x57, 0x04, 0x96, 0x00, 0x28, 0x04, 0xD0, 0xDB, 0x19, 0x20, 0x3B, 0x1F, 0x24, 0x1C, 0x57, 0x02, 
+	0x94, 0x70, 0x45, 0x04, 0xD2, 0xAF, 0x4B, 0x5B, 0x18, 0x01, 0x24, 0x1C, 0x57, 0x06, 0x94, 0x00, 
+	0x28, 0x05, 0xD0, 0xAC, 0x48, 0x40, 0x18, 0x20, 0x38, 0x1F, 0x21, 0x41, 0x56, 0x05, 0x91, 0x00, 
+	0x99, 0x03, 0x20, 0x00, 0x29, 
+	0x00, 0x00, 0xA2, 0x00, 0x80, 0x00, 0xD0, 0x02, 0x20, 0x00, 0x23, 0x02, 0xAF, 0x00, 0x90, 0x12, 
+	0xE0, 0x00, 0x21, 0x01, 0x20, 0x84, 0x00, 0x8E, 0x00, 0x3C, 0x59, 0xBE, 0x59, 0xB4, 0x42, 0x00, 
+	0xDD, 0x01, 0x46, 0x40, 0x1C, 0x08, 0x28, 0xF5, 0xD3, 0x88, 0x00, 0x39, 0x58, 0x0A, 0x9C, 0x09, 
+	0x19, 0x0A, 0x91, 0x3D, 0x50, 0x5B, 0x1C, 0x00, 0x98, 0x83, 0x42, 0xE9, 0xD3, 0x60, 0x46, 0x80, 
+	0x1C, 0x84, 0x46, 0x0E, 0x99, 0x8C, 0x45, 0x00, 0xD2, 0x71, 0xE7, 0x0A, 0x98, 0x90, 0x42, 0x01, 
+	0xD2, 0x01, 0x20, 0x01, 0x90, 0x0D, 0x98, 0x8F, 0x49, 0x00, 0x28, 0x01, 0x98, 0x48, 0x71, 0x02, 
+	0xD1, 0x00, 0x20, 0x10, 0xB0, 0xF0, 0xBD, 0x01, 0x20, 0xFB, 0xE7, 0xFE, 0xB5, 0x94, 0x46, 0x89, 
+	0x4A, 0x04, 0x46, 0x90, 0x7A, 0x84, 0x42, 0x58, 0xD0, 0xD3, 0x79, 0x00, 0x93, 0x00, 0x2C, 0x01, 
+	0xD1, 0x18, 0x46, 0x05, 0xE0, 
+	0x00, 0x00, 0xA3, 0x00, 0x80, 0x00, 0x28, 0x05, 0xD1, 0x83, 0x48, 0x83, 0x79, 0x00, 0x98, 0xC0, 
+	0x1A, 0x50, 0x72, 0x4A, 0xE0, 0x84, 0x42, 0x48, 0xD9, 0x00, 0x20, 0x62, 0x06, 0x14, 0x0E, 0x41, 
+	0xE0, 0x00, 0x22, 0x13, 0x46, 0x01, 0x92, 0x7B, 0x4A, 0x0E, 0x18, 0x92, 0x7A, 0x96, 0x46, 0x10, 
+	0xE0, 0x7D, 0x4A, 0x5D, 0x00, 0x0F, 0x5C, 0x52, 0x5D, 0xBA, 0x1A, 0x52, 0x1C, 0x02, 0x2A, 0x0D, 
+	0xD8, 0x79, 0x4A, 0x77, 0x78, 0x52, 0x19, 0x52, 0x78, 0xBA, 0x1A, 0x52, 0x1C, 0x02, 0x2A, 0x05, 
+	0xD8, 0x5B, 0x1C, 0x73, 0x45, 0xEC, 0xD3, 0x01, 0x9A, 0x00, 0x2A, 0x22, 0xD0, 0x70, 0x4B, 0x0A, 
+	0x5C, 0x1B, 0x78, 0x5A, 0x43, 0x73, 0x78, 0xD2, 0x18, 0x6E, 0x4B, 0x9B, 0x56, 0x00, 0x9A, 0x93, 
+	0x42, 0x17, 0xDA, 0x03, 0x46, 0x82, 0x1C, 0x0F, 0xE0, 0x8D, 0x5C, 0xCD, 0x54, 0x8D, 0x18, 0x6D, 
+	0x78, 0xCE, 0x18, 0x75, 0x70, 
+	0x00, 0x00, 0xA4, 0x00, 0x80, 0x56, 0x08, 0x76, 0x00, 0x65, 0x46, 0xAD, 0x5B, 0x5E, 0x08, 0x76, 
+	0x00, 0x67, 0x46, 0x9B, 0x1C, 0xBD, 0x53, 0x92, 0x1C, 0xA2, 0x42, 0xED, 0xD3, 0xA4, 0x1E, 0xE4, 
+	0xB2, 0x00, 0xE0, 0x80, 0x1C, 0xA0, 0x42, 0xBB, 0xD3, 0x64, 0x08, 0x62, 0x00, 0x5E, 0x48, 0x08, 
+	0xF0, 0xA9, 0xF8, 0x20, 0x46, 0xFE, 0xBD, 0xFF, 0xB5, 0x56, 0x48, 0x9B, 0xB0, 0x00, 0x22, 0x02, 
+	0x71, 0x18, 0x92, 0x19, 0x92, 0x55, 0x4A, 0x0E, 0x46, 0x12, 0x78, 0x52, 0x1E, 0x16, 0x92, 0x54, 
+	0x4A, 0x12, 0x78, 0x15, 0x92, 0x40, 0x7A, 0x17, 0x90, 0x04, 0xE1, 0x15, 0x98, 0x1E, 0x99, 0x70, 
+	0x43, 0x49, 0x1E, 0x47, 0x18, 0x1E, 0x9D, 0xF5, 0xE0, 0x4E, 0x49, 0x7F, 0x1C, 0xC8, 0x57, 0x17, 
+	0x9A, 0x90, 0x42, 0x7E, 0xDB, 0x15, 0x9A, 0x01, 0x21, 0x52, 0x1E, 0x04, 0x46, 0x95, 0x42, 0x00, 
+	0xD3, 0x00, 0x21, 0x16, 0x9A, 
+	0x00, 0x00, 0xA5, 0x00, 0x80, 0x96, 0x42, 0x1D, 0xD2, 0x15, 0x9A, 0xBB, 0x18, 0x5B, 0x1C, 0x00, 
+	0x29, 0x06, 0xD0, 0x44, 0x4A, 0xD2, 0x56, 0x90, 0x42, 0xEB, 0xDB, 0x00, 0x2A, 0x00, 0xDD, 0x14, 
+	0x19, 0x40, 0x4A, 0x5B, 0x1E, 0xD2, 0x56, 0x90, 0x42, 0xE3, 0xDB, 0x00, 0x2A, 0x00, 0xDD, 0x14, 
+	0x19, 0x00, 0x2D, 0x07, 0xD0, 0x3B, 0x4A, 0x5B, 0x1E, 0xD2, 0x56, 0x90, 0x42, 0xD9, 0xDB, 0x00, 
+	0x2A, 0x00, 0xDD, 0x14, 0x19, 0x00, 0x29, 0x08, 0xD0, 0x36, 0x4A, 0xD3, 0x19, 0x01, 0x22, 0x9A, 
+	0x56, 0x90, 0x42, 0xCE, 0xDB, 0x00, 0x2A, 0x00, 0xDD, 0x14, 0x19, 0x00, 0x2D, 0x09, 0xD0, 0x31, 
+	0x4A, 0xD3, 0x19, 0x20, 0x3B, 0x1F, 0x22, 0x9A, 0x56, 0x90, 0x42, 0x42, 0xDD, 0x00, 0x2A, 0x00, 
+	0xDD, 0x14, 0x19, 0x00, 0x2E, 0x1D, 0xD0, 0x15, 0x9A, 0xBB, 0x1A, 0x5B, 0x1C, 0x00, 0x29, 0x06, 
+	0xD0, 0x28, 0x4A, 0xD2, 0x56, 
+	0x00, 0x00, 0xA6, 0x00, 0x80, 0x90, 0x42, 0xF0, 0xDD, 0x00, 0x2A, 0x00, 0xDD, 0x14, 0x19, 0x25, 
+	0x4A, 0x5B, 0x1E, 0xD2, 0x56, 0x90, 0x42, 0xE8, 0xDD, 0x00, 0x2A, 0x00, 0xDD, 0x14, 0x19, 0x00, 
+	0x2D, 0x07, 0xD0, 0x20, 0x4A, 0x5B, 0x1E, 0xD2, 0x56, 0x90, 0x42, 0xDE, 0xDD, 0x00, 0x2A, 0x00, 
+	0xDD, 0x14, 0x19, 0x01, 0x20, 0x00, 0x2D, 0x02, 0xD0, 0x00, 0x29, 0x00, 0xD0, 0x00, 0x20, 0x00, 
+	0x2E, 0x02, 0xD0, 0x16, 0x99, 0x8E, 0x42, 0x00, 0xD1, 0x40, 0x1C, 0x12, 0x4A, 0x17, 0x99, 0x92, 
+	0x79, 0x91, 0x40, 0x01, 0x41, 0xA1, 0x42, 0x7C, 0xDC, 0xFC, 0xF7, 0x05, 0xF9, 0x01, 0x28, 0x68, 
+	0xD1, 0xFC, 0xF7, 0x04, 0xF9, 0x01, 0x21, 0x8C, 0x46, 0x10, 0x49, 0x09, 0x78, 0x1A, 0x91, 0xC9, 
+	0x07, 0x00, 0xE0, 0x6E, 0xE0, 0x2F, 0xD0, 0x00, 0x21, 0x14, 0x91, 0x85, 0x42, 0x01, 0xD9, 0x29, 
+	0x1A, 0x00, 0xE0, 0x00, 0x21, 
+	0x00, 0x00, 0xA7, 0x00, 0x80, 0x06, 0x4B, 0x2A, 0x18, 0x1B, 0x78, 0x9A, 0x42, 0x10, 0xD2, 0x0A, 
+	0x92, 0x1A, 0xE0, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x20, 0x8C, 0xDD, 0x00, 0x00, 0x9D, 0x00, 0x00, 
+	0x20, 0x9E, 0x00, 0x00, 0x20, 0x6C, 0x09, 0x00, 0x20, 0x04, 0x06, 0x00, 0x20, 0x29, 0x01, 0x00, 
+	0x20, 0x5B, 0x1E, 0x0A, 0x93, 0x08, 0xE0, 0xAD, 0x4A, 0xAD, 0x4B, 0x52, 0x56, 0xDB, 0x79, 0x9A, 
+	0x42, 0x01, 0xDB, 0x01, 0x22, 0x14, 0x92, 0x49, 0x1C, 0x0A, 0x9A, 0x91, 0x42, 0xF3, 0xD9, 0x14, 
+	0x9A, 0x61, 0x46, 0x11, 0x40, 0x8C, 0x46, 0x1A, 0x99, 0x89, 0x07, 0x27, 0xD5, 0x00, 0x21, 0x14, 
+	0x91, 0xA4, 0x49, 0x86, 0x42, 0x09, 0x78, 0x02, 0xD9, 0x89, 0x19, 0x09, 0x1A, 0xFF, 0xE7, 0x0B, 
+	0x91, 0x16, 0x9A, 0x31, 0x18, 0x91, 0x42, 0x04, 0xD2, 0x9E, 0x49, 0x09, 0x78, 0x89, 0x19, 0x0B, 
+	0x18, 0x03, 0xE0, 0x9C, 0x48, 
+	0x00, 0x00, 0xA8, 0x00, 0x80, 0x00, 0x78, 0x83, 0x18, 0x5B, 0x1E, 0x0B, 0x98, 0x08, 0xE0, 0x97, 
+	0x49, 0x97, 0x4A, 0x09, 0x56, 0xD2, 0x79, 0x91, 0x42, 0x01, 0xDB, 0x01, 0x21, 0x14, 0x91, 0x40, 
+	0x1C, 0x98, 0x42, 0xF4, 0xD9, 0x14, 0x99, 0x60, 0x46, 0x08, 0x40, 0x84, 0x46, 0x60, 0x46, 0x00, 
+	0x28, 0x0F, 0xD0, 0x91, 0x48, 0x01, 0xAA, 0xC0, 0x57, 0x21, 0x1A, 0x18, 0x98, 0x40, 0x00, 0x11, 
+	0x52, 0x0C, 0xA9, 0x0E, 0x54, 0x40, 0x18, 0x45, 0x70, 0x18, 0x98, 0x40, 0x1C, 0x18, 0x90, 0x10, 
+	0x28, 0x0C, 0xD0, 0x6D, 0x1C, 0x24, 0x98, 0x85, 0x42, 0x00, 0xD8, 0x05, 0xE7, 0x18, 0x98, 0x10, 
+	0x28, 0x04, 0xD0, 0x76, 0x1C, 0x1D, 0x98, 0x86, 0x42, 0x00, 0xD8, 0xF6, 0xE6, 0x80, 0x4C, 0xA0, 
+	0x79, 0x00, 0x28, 0x18, 0x98, 0x00, 0xD1, 0x05, 0xE0, 0xC0, 0xB2, 0x01, 0xAA, 0x0C, 0xA9, 0xFF, 
+	0xF7, 0x74, 0xFE, 0x18, 0x90, 
+	0x00, 0x00, 0xA9, 0x00, 0x80, 0x00, 0x28, 0x7E, 0xD0, 0x7C, 0x48, 0x80, 0x78, 0xC0, 0x07, 0xC0, 
+	0x0F, 0xFE, 0xF7, 0x5D, 0xFA, 0x0C, 0xA9, 0x18, 0x98, 0xFF, 0xF7, 0xB2, 0xFD, 0x74, 0x49, 0x09, 
+	0x79, 0x00, 0x29, 0x08, 0xD0, 0x00, 0x28, 0x06, 0xD1, 0x0C, 0xAA, 0x18, 0x99, 0x1B, 0x98, 0xFF, 
+	0xF7, 0x9B, 0xFA, 0x03, 0x46, 0x22, 0xE0, 0x71, 0x49, 0x00, 0x20, 0xC8, 0x72, 0x08, 0x73, 0x18, 
+	0x98, 0x0B, 0x23, 0x0B, 0x28, 0x00, 0xD8, 0x03, 0x46, 0x00, 0x21, 0x15, 0xE0, 0x08, 0x46, 0x0E, 
+	0x26, 0x70, 0x43, 0x4A, 0x00, 0x0C, 0xAD, 0x6A, 0x4E, 0xAC, 0x5C, 0x07, 0x46, 0x80, 0x19, 0x44, 
+	0x80, 0x52, 0x19, 0x52, 0x78, 0x82, 0x80, 0x20, 0x22, 0xC2, 0x72, 0x00, 0x22, 0x02, 0x73, 0xF1, 
+	0x53, 0xC2, 0x71, 0x02, 0x72, 0x42, 0x72, 0x49, 0x1C, 0x99, 0x42, 0xE7, 0xD3, 0x5F, 0x4C, 0x00, 
+	0x21, 0xE0, 0x78, 0x00, 0x28, 
+	0x00, 0x00, 0xAA, 0x00, 0x80, 0x00, 0xD0, 0x61, 0x7B, 0x00, 0x20, 0x05, 0xE0, 0x0E, 0x22, 0x5C, 
+	0x4D, 0x42, 0x43, 0x52, 0x19, 0x91, 0x72, 0x40, 0x1C, 0x98, 0x42, 0xF7, 0xD3, 0xFF, 0xF7, 0x74, 
+	0xF9, 0x00, 0x28, 0x6A, 0xD0, 0xE0, 0x78, 0x98, 0x42, 0x67, 0xD0, 0x51, 0x48, 0x40, 0x7C, 0x00, 
+	0x90, 0x64, 0x28, 0x01, 0xD9, 0x64, 0x20, 0x00, 0x90, 0x00, 0x25, 0x5C, 0xE0, 0x0E, 0x20, 0x50, 
+	0x49, 0x68, 0x43, 0x08, 0x5A, 0x01, 0xAA, 0x40, 0x00, 0x17, 0x5E, 0x0C, 0xAC, 0x00, 0x19, 0x40, 
+	0x78, 0x09, 0x90, 0x2E, 0x46, 0x00, 0x20, 0x19, 0xE0, 0xA8, 0x42, 0x16, 0xD0, 0x0E, 0x21, 0x48, 
+	0x4A, 0x41, 0x43, 0x51, 0x5A, 0x4C, 0x00, 0x0C, 0xA9, 0x61, 0x18, 0x4A, 0x78, 0x09, 0x99, 0x89, 
+	0x1A, 0x00, 0xD5, 0x49, 0x42, 0x04, 0x29, 0x08, 0xDA, 0x01, 0xA9, 0x09, 0x5F, 0xB9, 0x42, 0x04, 
+	0xDD, 0x0F, 0x46, 0x06, 0x46, 
+	0x00, 0x00, 0xAB, 0x00, 0x80, 0x00, 0xE0, 0x41, 0xE0, 0x09, 0x92, 0x40, 0x1C, 0x98, 0x42, 0xE3, 
+	0xD3, 0x00, 0x24, 0x2D, 0xE0, 0xB4, 0x42, 0x2A, 0xD0, 0x20, 0x46, 0x0E, 0x21, 0x48, 0x43, 0x38, 
+	0x49, 0x09, 0x5A, 0x4A, 0x00, 0x0C, 0xA9, 0x51, 0x18, 0x94, 0x46, 0x49, 0x78, 0x09, 0x9A, 0x51, 
+	0x1A, 0x00, 0xD5, 0x49, 0x42, 0x04, 0x29, 0x1A, 0xDA, 0x61, 0x46, 0x01, 0xAA, 0x51, 0x5E, 0x64, 
+	0x22, 0x51, 0x43, 0x00, 0x9A, 0x7A, 0x43, 0x91, 0x42, 0x0C, 0xD2, 0x19, 0x46, 0x20, 0x46, 0xFE, 
+	0xF7, 0x26, 0xFA, 0x03, 0x46, 0xB4, 0x42, 0x00, 0xD2, 0x76, 0x1E, 0xAC, 0x42, 0x00, 0xD2, 0x6D, 
+	0x1E, 0x64, 0x1E, 0x04, 0xE0, 0x22, 0x49, 0x89, 0x7C, 0x25, 0x4A, 0x80, 0x18, 0x81, 0x72, 0x64, 
+	0x1C, 0x9C, 0x42, 0xCF, 0xD3, 0x6D, 0x1C, 0x9D, 0x42, 0xA0, 0xD3, 0x1B, 0x9C, 0x18, 0x46, 0x0C, 
+	0xAA, 0x23, 0x46, 0x18, 0x99, 
+	0x00, 0x00, 0xAC, 0x00, 0x80, 0xFE, 0xF7, 0xC0, 0xFD, 0x19, 0x90, 0x02, 0xE0, 0x1B, 0x48, 0x00, 
+	0x21, 0x81, 0x73, 0x1A, 0x49, 0x18, 0x98, 0x88, 0x72, 0x19, 0x98, 0xC8, 0x70, 0x1F, 0xB0, 0xF0, 
+	0xBD, 0x08, 0xB5, 0x14, 0x49, 0x09, 0x78, 0x49, 0x1E, 0xCA, 0xB2, 0x16, 0x49, 0x00, 0x92, 0x09, 
+	0x78, 0x49, 0x1E, 0xCA, 0xB2, 0x00, 0x21, 0x0B, 0x46, 0xFF, 0xF7, 0xFD, 0xFD, 0x08, 0xBD, 0x0F, 
+	0x48, 0x80, 0x7B, 0x70, 0x47, 0x02, 0x46, 0x00, 0x20, 0x01, 0x21, 0xC9, 0x03, 0x00, 0xE0, 0x49, 
+	0x08, 0x91, 0x42, 0xFC, 0xD8, 0x06, 0xE0, 0x40, 0x18, 0x03, 0x46, 0x43, 0x43, 0x93, 0x42, 0x00, 
+	0xD9, 0x40, 0x1A, 0x49, 0x08, 0x00, 0x29, 0xF6, 0xD1, 0x70, 0x47, 0x00, 0x00, 0xAC, 0x0B, 0x00, 
+	0x20, 0x8C, 0xDD, 0x00, 0x00, 0x9E, 0x00, 0x00, 0x20, 0x6C, 0x09, 0x00, 0x20, 0xFC, 0x00, 0x00, 
+	0x20, 0x6A, 0x05, 0x00, 0x20, 
+	0x00, 0x00, 0xAD, 0x00, 0x80, 0x9D, 0x00, 0x00, 0x20, 0xFE, 0x48, 0x42, 0x7D, 0xFE, 0x49, 0x0A, 
+	0x71, 0x82, 0x7D, 0x4A, 0x71, 0x82, 0x7B, 0x8A, 0x71, 0xC2, 0x7B, 0xCA, 0x71, 0x40, 0x7C, 0x08, 
+	0x72, 0x00, 0x20, 0x48, 0x72, 0x70, 0x47, 0x00, 0xB5, 0xF7, 0x4B, 0x18, 0x78, 0x00, 0x28, 0x03, 
+	0xD1, 0xFF, 0xF7, 0xEA, 0xFF, 0x01, 0x20, 0x18, 0x70, 0x00, 0xBD, 0xF3, 0x49, 0x00, 0x28, 0x02, 
+	0xD1, 0xF0, 0x48, 0x1C, 0x38, 0x03, 0xE0, 0x02, 0x28, 0x03, 0xD1, 0xEE, 0x48, 0x0E, 0x38, 0xC8, 
+	0x63, 0x70, 0x47, 0x01, 0x28, 0xFC, 0xD1, 0xEB, 0x48, 0xF9, 0xE7, 0x70, 0xB5, 0xEA, 0x4D, 0xE9, 
+	0x4C, 0x00, 0x28, 0x17, 0xD1, 0xFB, 0xF7, 0x96, 0xFF, 0x01, 0x28, 0x08, 0xD1, 0xE7, 0x48, 0x01, 
+	0x7F, 0x29, 0x71, 0x41, 0x7F, 0x69, 0x71, 0x81, 0x7F, 0xA9, 0x71, 0xC0, 0x7F, 0x06, 0xE0, 0x60, 
+	0x7D, 0x28, 0x71, 0xA0, 0x7D, 
+	0x00, 0x00, 0xAE, 0x00, 0x80, 0x68, 0x71, 0xA0, 0x7B, 0xA8, 0x71, 0xE0, 0x7B, 0xE8, 0x71, 0x60, 
+	0x7C, 0x28, 0x72, 0x70, 0xBD, 0x02, 0x28, 0xFC, 0xD1, 0xA0, 0x7E, 0x28, 0x71, 0xE0, 0x7E, 0x68, 
+	0x71, 0xA0, 0x7C, 0xA8, 0x71, 0xE0, 0x7C, 0xE8, 0x71, 0x20, 0x7D, 0xF1, 0xE7, 0xFF, 0xB5, 0x8F, 
+	0xB0, 0x00, 0x20, 0x06, 0x90, 0x05, 0x90, 0x01, 0x20, 0xD3, 0x4C, 0x03, 0x90, 0xE0, 0x6B, 0x06, 
+	0x88, 0x1B, 0x99, 0x01, 0x29, 0x1E, 0xD1, 0x04, 0xF0, 0x0B, 0xFE, 0x00, 0x28, 0x01, 0xD0, 0x02, 
+	0x20, 0x03, 0x90, 0xFB, 0xF7, 0x5F, 0xFF, 0x01, 0x28, 0x0A, 0xD1, 0xCC, 0x48, 0xC1, 0x7A, 0x49, 
+	0x06, 0x4E, 0x0F, 0x81, 0x7B, 0x06, 0x91, 0xC1, 0x7B, 0x05, 0x91, 0x40, 0x7C, 0x19, 0x90, 0x20, 
+	0xE0, 0xE0, 0x6B, 0x01, 0x79, 0x06, 0x91, 0x05, 0x21, 0x41, 0x56, 0x70, 0x20, 0x06, 0x40, 0x36, 
+	0x09, 0x05, 0x91, 0x16, 0xE0, 
+	0x00, 0x00, 0xAF, 0x00, 0x80, 0x02, 0x29, 0x09, 0xD1, 0x81, 0x79, 0x06, 0x91, 0x07, 0x21, 0x41, 
+	0x56, 0x07, 0x20, 0x00, 0x02, 0x06, 0x40, 0x36, 0x0A, 0x05, 0x91, 0x0A, 0xE0, 0x03, 0x29, 0x08, 
+	0xD1, 0x01, 0x7A, 0x06, 0x91, 0x09, 0x21, 0x41, 0x56, 0x07, 0x20, 0x00, 0x03, 0x06, 0x40, 0x36, 
+	0x0B, 0x05, 0x91, 0x00, 0x20, 0x04, 0x90, 0xB3, 0x48, 0x20, 0x30, 0x0E, 0x90, 0x04, 0x98, 0x41, 
+	0xE1, 0x00, 0x20, 0x02, 0x90, 0x12, 0x98, 0x34, 0xE1, 0xFD, 0xF7, 0x1A, 0xFD, 0x01, 0x90, 0x09, 
+	0x98, 0xFD, 0xF7, 0xE3, 0xFC, 0x16, 0x21, 0x48, 0x43, 0xAD, 0x49, 0x40, 0x18, 0x0A, 0x90, 0x00, 
+	0x20, 0x08, 0x90, 0x04, 0x46, 0x05, 0x46, 0x07, 0x90, 0x0A, 0x98, 0x07, 0x88, 0x04, 0xF0, 0xB8, 
+	0xFD, 0x00, 0x28, 0x07, 0xD0, 0x04, 0x98, 0x00, 0x28, 0x02, 0xD1, 0x3F, 0x07, 0x3F, 0x0F, 0x01, 
+	0xE0, 0xF0, 0x20, 0x07, 0x40, 
+	0x00, 0x00, 0xB0, 0x00, 0x80, 0xF8, 0xB2, 0x86, 0x46, 0x19, 0x98, 0x00, 0x28, 0x65, 0xD0, 0xF0, 
+	0x07, 0x63, 0xD0, 0x00, 0x20, 0xF9, 0x07, 0x22, 0xD0, 0x0A, 0x99, 0x09, 0x18, 0x09, 0x79, 0x01, 
+	0x9A, 0x10, 0x9B, 0x89, 0x18, 0x4A, 0x00, 0x9A, 0x5E, 0x11, 0x9B, 0x59, 0x56, 0x0F, 0x9B, 0x51, 
+	0x1A, 0x02, 0x9A, 0x82, 0x18, 0x52, 0x00, 0x9A, 0x5E, 0x51, 0x1A, 0x0A, 0x1E, 0x00, 0xDA, 0x4A, 
+	0x42, 0x19, 0x9B, 0x9A, 0x42, 0x01, 0xDB, 0xFF, 0x2B, 0x09, 0xD1, 0x08, 0x9A, 0x64, 0x18, 0x52, 
+	0x1C, 0x08, 0x92, 0x00, 0x29, 0x03, 0xDA, 0x07, 0x9A, 0x52, 0x1C, 0x6D, 0x18, 0x07, 0x92, 0x7F, 
+	0x08, 0x40, 0x1C, 0x00, 0x2F, 0xD6, 0xD1, 0x08, 0x98, 0x01, 0x28, 0x0F, 0xDD, 0x81, 0x00, 0x89, 
+	0x48, 0x41, 0x58, 0x61, 0x43, 0x0C, 0x12, 0x07, 0x99, 0x89, 0x00, 0x40, 0x58, 0x68, 0x43, 0x05, 
+	0x12, 0x00, 0x2C, 0x00, 0xDA, 
+	0x00, 0x00, 0xB1, 0x00, 0x80, 0x64, 0x1C, 0x00, 0x2D, 0x00, 0xDA, 0x6D, 0x1C, 0x1B, 0x98, 0x01, 
+	0x28, 0x23, 0xD1, 0x7D, 0x4A, 0x09, 0x98, 0x5C, 0x32, 0x10, 0x56, 0x01, 0x1E, 0x00, 0xDA, 0x41, 
+	0x42, 0x0E, 0x9B, 0x9B, 0x78, 0x99, 0x42, 0x00, 0xD1, 0x00, 0x20, 0x00, 0x2C, 0x07, 0xDD, 0x00, 
+	0x28, 0x10, 0xDB, 0x0E, 0x99, 0x89, 0x78, 0x81, 0x42, 0x0D, 0xDD, 0x40, 0x1C, 0x0B, 0xE0, 0x00, 
+	0x2C, 0x08, 0xDA, 0x00, 0x28, 0x06, 0xDC, 0x0E, 0x99, 0x89, 0x78, 0x49, 0x42, 0x81, 0x42, 0x02, 
+	0xDA, 0x40, 0x1E, 0x00, 0xE0, 0x00, 0x20, 0x09, 0x99, 0x50, 0x54, 0x00, 0x20, 0x84, 0x46, 0x70, 
+	0x46, 0xC0, 0x07, 0x7E, 0xD0, 0x0A, 0x99, 0x60, 0x46, 0x08, 0x18, 0x00, 0x79, 0x01, 0x99, 0x42, 
+	0x18, 0x1B, 0x98, 0x03, 0x28, 0x04, 0xD1, 0x68, 0x48, 0xC1, 0x69, 0x80, 0x69, 0x08, 0x18, 0x12, 
+	0x1A, 0x02, 0x99, 0x60, 0x46, 
+	0x00, 0x00, 0xB2, 0x00, 0x80, 0x40, 0x18, 0x0F, 0x99, 0x40, 0x00, 0x08, 0x5E, 0x51, 0x00, 0x10, 
+	0x9B, 0x0C, 0x91, 0x0D, 0x90, 0x59, 0x5E, 0x11, 0x9B, 0xF7, 0x07, 0x9B, 0x56, 0x0B, 0x93, 0x15, 
+	0xD0, 0xCB, 0x1A, 0x98, 0x42, 0x02, 0xDB, 0x07, 0x1B, 0x9F, 0x42, 0x04, 0xDB, 0x98, 0x42, 0x04, 
+	0xDC, 0x07, 0x1B, 0x9F, 0x42, 0x01, 0xDD, 0x18, 0x46, 0x08, 0xE0, 0x67, 0x1B, 0xFF, 0x1C, 0x06, 
+	0x2F, 0x03, 0xD9, 0x98, 0x42, 0x01, 0xDC, 0x40, 0x1B, 0x00, 0xE0, 0x00, 0x1B, 0x73, 0x07, 0x10, 
+	0xD5, 0x43, 0x1A, 0x88, 0x42, 0x00, 0xDC, 0x0B, 0x1A, 0x05, 0x9F, 0xBB, 0x42, 0x09, 0xDA, 0x06, 
+	0x9B, 0x00, 0x2B, 0x02, 0xD1, 0x40, 0x18, 0x40, 0x10, 0x03, 0xE0, 0x4B, 0x00, 0xCB, 0x18, 0x18, 
+	0x18, 0x80, 0x10, 0xB3, 0x07, 0x06, 0xD5, 0x88, 0x42, 0x01, 0xDD, 0x40, 0x1E, 0x02, 0xE0, 0x88, 
+	0x42, 0x00, 0xDA, 0x40, 0x1C, 
+	0x00, 0x00, 0xB3, 0x00, 0x80, 0x1B, 0x9B, 0x01, 0x2B, 0x1A, 0xD1, 0xF3, 0x07, 0x18, 0xD0, 0x0E, 
+	0x9B, 0x9B, 0x78, 0x00, 0x2B, 0x14, 0xD0, 0x3C, 0x4B, 0x09, 0x9F, 0x5C, 0x33, 0xDB, 0x57, 0x0E, 
+	0x9F, 0xBF, 0x78, 0xBB, 0x42, 0x04, 0xD1, 0x0D, 0x9B, 0x83, 0x42, 0x09, 0xDD, 0x40, 0x1C, 0x07, 
+	0xE0, 0x0E, 0x9F, 0xBF, 0x78, 0xFB, 0x42, 0x03, 0xD1, 0x0D, 0x9B, 0x83, 0x42, 0x00, 0xDA, 0x40, 
+	0x1E, 0x36, 0x4B, 0x98, 0x42, 0x02, 0xDC, 0xDB, 0x43, 0x98, 0x42, 0x00, 0xDA, 0x18, 0x46, 0x0B, 
+	0x9B, 0x1B, 0x18, 0x5B, 0x1A, 0x7F, 0x2B, 0x09, 0xDD, 0x0B, 0x98, 0x10, 0x9B, 0x08, 0x1A, 0x7F, 
+	0x30, 0x00, 0xE0, 0x16, 0xE0, 0x0C, 0x99, 0x58, 0x52, 0x7F, 0x20, 0x0A, 0xE0, 0x7F, 0x27, 0xFF, 
+	0x43, 0xBB, 0x42, 0x09, 0xDA, 0x0B, 0x98, 0x10, 0x9B, 0x08, 0x1A, 0x0C, 0x99, 0x80, 0x38, 0x58, 
+	0x52, 0x38, 0x46, 0x11, 0x99, 
+	0x00, 0x00, 0xB4, 0x00, 0x80, 0x88, 0x54, 0x04, 0xE0, 0x10, 0x9F, 0x0C, 0x99, 0x78, 0x52, 0x11, 
+	0x98, 0x83, 0x54, 0x70, 0x46, 0x40, 0x08, 0x86, 0x46, 0x60, 0x46, 0x40, 0x1C, 0x84, 0x46, 0x70, 
+	0x46, 0x00, 0x28, 0x00, 0xD0, 0x5B, 0xE7, 0x02, 0x98, 0x08, 0x30, 0xC0, 0xB2, 0x02, 0x90, 0x09, 
+	0x98, 0x40, 0x1C, 0x09, 0x90, 0x18, 0x99, 0x88, 0x42, 0x00, 0xD2, 0xC5, 0xE6, 0x04, 0x98, 0x40, 
+	0x1C, 0xC0, 0xB2, 0x04, 0x90, 0x03, 0x99, 0x88, 0x42, 0x00, 0xD2, 0xB9, 0xE6, 0x13, 0xB0, 0xF0, 
+	0xBD, 0xF0, 0xB5, 0x16, 0x46, 0x04, 0x46, 0x10, 0x4A, 0x85, 0xB0, 0x0D, 0x46, 0x18, 0x46, 0x0A, 
+	0x99, 0xD3, 0x6A, 0x97, 0x6B, 0xD2, 0x6B, 0xDB, 0x19, 0x9B, 0x18, 0x03, 0x22, 0x01, 0xAF, 0x07, 
+	0xC7, 0x5A, 0x1C, 0x00, 0x92, 0x32, 0x46, 0x29, 0x46, 0x20, 0x46, 0xFF, 0xF7, 0x57, 0xFE, 0x05, 
+	0xB0, 0xF0, 0xBD, 0x00, 0x00, 
+	0x00, 0x00, 0xB5, 0x00, 0x80, 0x24, 0xDE, 0x00, 0x00, 0x28, 0x01, 0x00, 0x20, 0x30, 0xE0, 0x00, 
+	0x00, 0x2C, 0xE1, 0x00, 0x00, 0xC8, 0xD6, 0x00, 0x00, 0x98, 0xDF, 0x00, 0x00, 0xFF, 0x1F, 0x00, 
+	0x00, 0xF8, 0xB5, 0xFF, 0x4C, 0x05, 0x46, 0x20, 0x6A, 0xFE, 0x4E, 0x01, 0x28, 0xF1, 0x6B, 0x08, 
+	0xD1, 0x32, 0x46, 0x58, 0x32, 0x00, 0x92, 0x4B, 0x7B, 0x08, 0x3A, 0x11, 0x46, 0x1C, 0x31, 0x28, 
+	0x46, 0x16, 0xE0, 0xF8, 0x4A, 0x54, 0x32, 0x00, 0x92, 0x0B, 0x7B, 0x08, 0x3A, 0x11, 0x46, 0x18, 
+	0x31, 0x28, 0x46, 0xFF, 0xF7, 0xBD, 0xFF, 0x20, 0x6A, 0x03, 0x28, 0x0B, 0xD1, 0xF1, 0x4A, 0x58, 
+	0x32, 0x00, 0x92, 0xF0, 0x6B, 0x43, 0x7B, 0x08, 0x3A, 0x11, 0x46, 0x28, 0x46, 0x1C, 0x31, 0x10, 
+	0x30, 0xFF, 0xF7, 0xAE, 0xFF, 0xF8, 0xBD, 0x7F, 0xB5, 0x0E, 0x46, 0xE9, 0x49, 0x40, 0x39, 0xCC, 
+	0x6A, 0x03, 0x28, 0x02, 0xD1, 
+	0x00, 0x00, 0xB6, 0x00, 0x80, 0x23, 0x46, 0x88, 0x6B, 0x07, 0xE0, 0x01, 0x28, 0x02, 0xD1, 0x23, 
+	0x46, 0x08, 0x6B, 0x02, 0xE0, 0x08, 0x6B, 0x03, 0x19, 0x48, 0x6B, 0xE3, 0x49, 0xC5, 0x18, 0xE1, 
+	0x48, 0x01, 0x22, 0xC0, 0x6B, 0xC0, 0x7A, 0x00, 0x95, 0x01, 0xAD, 0x07, 0xC5, 0x18, 0x1B, 0x00, 
+	0x01, 0x80, 0x19, 0xDE, 0x4A, 0xDE, 0x49, 0xFF, 0xF7, 0xF9, 0xFD, 0x7F, 0xBD, 0xFF, 0xB5, 0x8F, 
+	0xB0, 0x04, 0xF0, 0x0E, 0xFC, 0x00, 0x28, 0x01, 0xD0, 0x02, 0x20, 0x00, 0xE0, 0x01, 0x20, 0x00, 
+	0x90, 0xFB, 0xF7, 0x60, 0xFD, 0x01, 0x28, 0x0A, 0xD1, 0xD6, 0x48, 0xC1, 0x7A, 0x49, 0x07, 0x49, 
+	0x0F, 0x04, 0x91, 0x01, 0x7B, 0x03, 0x91, 0x41, 0x7B, 0x02, 0x91, 0x00, 0x7C, 0x0B, 0xE0, 0xCD, 
+	0x48, 0xC0, 0x6B, 0x01, 0x88, 0x49, 0x07, 0x49, 0x0F, 0x04, 0x91, 0x81, 0x78, 0x03, 0x91, 0x03, 
+	0x21, 0x41, 0x56, 0x02, 0x91, 
+	0x00, 0x00, 0xB7, 0x00, 0x80, 0x80, 0x7A, 0x07, 0x90, 0x00, 0x20, 0x01, 0x90, 0xCA, 0x48, 0x0E, 
+	0x90, 0x01, 0x98, 0x4B, 0xE1, 0x11, 0x98, 0x40, 0xE1, 0xC8, 0x49, 0x0F, 0x98, 0x09, 0x78, 0x48, 
+	0x43, 0x08, 0x90, 0xC7, 0x49, 0x0A, 0x98, 0x09, 0x78, 0x48, 0x43, 0x0F, 0x99, 0x40, 0x18, 0xC0, 
+	0x00, 0x09, 0x90, 0x0A, 0x98, 0xFD, 0xF7, 0xF1, 0xFA, 0x16, 0x21, 0x48, 0x43, 0xC1, 0x49, 0x0F, 
+	0x9E, 0x40, 0x18, 0x0B, 0x90, 0x23, 0xE1, 0x00, 0x20, 0x06, 0x90, 0x04, 0x46, 0x05, 0x46, 0x05, 
+	0x90, 0x0B, 0x98, 0x07, 0x88, 0x04, 0xF0, 0xC4, 0xFB, 0x00, 0x28, 0x07, 0xD0, 0x01, 0x98, 0x00, 
+	0x28, 0x02, 0xD1, 0x3F, 0x07, 0x3F, 0x0F, 0x01, 0xE0, 0xF0, 0x20, 0x07, 0x40, 0xF8, 0xB2, 0x86, 
+	0x46, 0x07, 0x98, 0x00, 0x28, 0x62, 0xD0, 0x04, 0x98, 0xC0, 0x07, 0x5F, 0xD0, 0x00, 0x20, 0xF9, 
+	0x07, 0x1E, 0xD0, 0x0B, 0x99, 
+	0x00, 0x00, 0xB8, 0x00, 0x80, 0x09, 0x18, 0x09, 0x79, 0x08, 0x9A, 0xB0, 0x4B, 0x52, 0x18, 0xAE, 
+	0x49, 0x89, 0x56, 0x9A, 0x56, 0x18, 0x9B, 0x89, 0x1A, 0x09, 0x9A, 0x12, 0x18, 0x9A, 0x56, 0x51, 
+	0x1A, 0x0A, 0x1E, 0x00, 0xDA, 0x4A, 0x42, 0x07, 0x9B, 0x9A, 0x42, 0x09, 0xDA, 0x06, 0x9A, 0x64, 
+	0x18, 0x52, 0x1C, 0x06, 0x92, 0x00, 0x29, 0x03, 0xDA, 0x05, 0x9A, 0x52, 0x1C, 0x6D, 0x18, 0x05, 
+	0x92, 0x7F, 0x08, 0x40, 0x1C, 0x00, 0x2F, 0xDA, 0xD1, 0x06, 0x98, 0x01, 0x28, 0x0F, 0xDD, 0xA0, 
+	0x49, 0x80, 0x00, 0x08, 0x58, 0x60, 0x43, 0x04, 0x12, 0x05, 0x98, 0x80, 0x00, 0x08, 0x58, 0x68, 
+	0x43, 0x05, 0x12, 0x00, 0x2C, 0x00, 0xDA, 0x64, 0x1C, 0x00, 0x2D, 0x00, 0xDA, 0x6D, 0x1C, 0x94, 
+	0x48, 0x0A, 0x9F, 0x00, 0x78, 0x47, 0x43, 0x8C, 0x48, 0x30, 0x30, 0x82, 0x19, 0xB8, 0x56, 0x01, 
+	0x1E, 0x00, 0xDA, 0x41, 0x42, 
+	0x00, 0x00, 0xB9, 0x00, 0x80, 0x0E, 0x9B, 0x9B, 0x78, 0x99, 0x42, 0x00, 0xD1, 0x00, 0x20, 0x00, 
+	0x2C, 0x07, 0xDD, 0x00, 0x28, 0x10, 0xDB, 0x0E, 0x99, 0x89, 0x78, 0x81, 0x42, 0x0D, 0xDD, 0x40, 
+	0x1C, 0x0B, 0xE0, 0x00, 0x2C, 0x08, 0xDA, 0x00, 0x28, 0x06, 0xDC, 0x0E, 0x99, 0x89, 0x78, 0x49, 
+	0x42, 0x81, 0x42, 0x02, 0xDA, 0x40, 0x1E, 0x00, 0xE0, 0x00, 0x20, 0xB8, 0x54, 0x00, 0x20, 0x84, 
+	0x46, 0x70, 0x46, 0xC0, 0x07, 0x7E, 0xD0, 0x0B, 0x99, 0x60, 0x46, 0x08, 0x18, 0x01, 0x79, 0x09, 
+	0x9A, 0x60, 0x46, 0x10, 0x18, 0x18, 0x9A, 0x04, 0x9B, 0x10, 0x56, 0x0D, 0x90, 0x08, 0x9A, 0x52, 
+	0x18, 0x79, 0x49, 0xDB, 0x07, 0x89, 0x56, 0x17, 0xD0, 0x78, 0x4B, 0x9B, 0x56, 0xCB, 0x1A, 0x98, 
+	0x42, 0x02, 0xDB, 0x07, 0x1B, 0x9F, 0x42, 0x04, 0xDB, 0x98, 0x42, 0x04, 0xDC, 0x07, 0x1B, 0x9F, 
+	0x42, 0x01, 0xDD, 0x18, 0x46, 
+	0x00, 0x00, 0xBA, 0x00, 0x80, 0x08, 0xE0, 0x67, 0x1B, 0xFF, 0x1C, 0x06, 0x2F, 0x03, 0xD9, 0x98, 
+	0x42, 0x01, 0xDC, 0x40, 0x1B, 0x00, 0xE0, 0x00, 0x1B, 0x04, 0x9B, 0x5B, 0x07, 0x10, 0xD5, 0x43, 
+	0x1A, 0x88, 0x42, 0x00, 0xDC, 0x0B, 0x1A, 0x02, 0x9F, 0xBB, 0x42, 0x09, 0xD2, 0x03, 0x9B, 0x00, 
+	0x2B, 0x02, 0xD1, 0x40, 0x18, 0x40, 0x10, 0x03, 0xE0, 0x4B, 0x00, 0xCB, 0x18, 0x18, 0x18, 0x80, 
+	0x10, 0x04, 0x9B, 0x9B, 0x07, 0x06, 0xD5, 0x88, 0x42, 0x01, 0xDD, 0x40, 0x1E, 0x02, 0xE0, 0x88, 
+	0x42, 0x00, 0xDA, 0x40, 0x1C, 0x04, 0x9B, 0xDB, 0x07, 0x1C, 0xD0, 0x0E, 0x9B, 0x9B, 0x78, 0x00, 
+	0x2B, 0x18, 0xD0, 0x57, 0x4F, 0x0A, 0x9B, 0x3F, 0x78, 0x7B, 0x43, 0x4F, 0x4F, 0x30, 0x37, 0xBF, 
+	0x19, 0xDB, 0x57, 0x0E, 0x9F, 0xBF, 0x78, 0xBB, 0x42, 0x04, 0xD1, 0x0D, 0x9B, 0x83, 0x42, 0x09, 
+	0xDD, 0x40, 0x1C, 0x07, 0xE0, 
+	0x00, 0x00, 0xBB, 0x00, 0x80, 0x0E, 0x9F, 0xBF, 0x78, 0xFB, 0x42, 0x03, 0xD1, 0x0D, 0x9B, 0x83, 
+	0x42, 0x00, 0xDA, 0x40, 0x1E, 0x7F, 0x28, 0x01, 0xDD, 0x7F, 0x20, 0x04, 0xE0, 0x7F, 0x23, 0xDB, 
+	0x43, 0x98, 0x42, 0x00, 0xDA, 0x18, 0x46, 0x49, 0x4B, 0x9B, 0x56, 0x0C, 0x93, 0x1B, 0x18, 0x5B, 
+	0x1A, 0x7F, 0x2B, 0x08, 0xDD, 0x0C, 0x98, 0x45, 0x4B, 0x08, 0x1A, 0x43, 0x49, 0x7F, 0x30, 0x88, 
+	0x54, 0x7F, 0x20, 0x0B, 0xE0, 0x10, 0xE0, 0x7F, 0x27, 0xFF, 0x43, 0xBB, 0x42, 0x08, 0xDA, 0x0C, 
+	0x98, 0x3E, 0x4B, 0x08, 0x1A, 0x3C, 0x49, 0x80, 0x38, 0x88, 0x54, 0x38, 0x46, 0x98, 0x54, 0x03, 
+	0xE0, 0x39, 0x49, 0x88, 0x54, 0x39, 0x48, 0x83, 0x54, 0x70, 0x46, 0x40, 0x08, 0x86, 0x46, 0x60, 
+	0x46, 0x40, 0x1C, 0x84, 0x46, 0x70, 0x46, 0x00, 0x28, 0x00, 0xD0, 0x61, 0xE7, 0x09, 0x98, 0x2F, 
+	0x49, 0x08, 0x30, 0x09, 0x90, 
+	0x00, 0x00, 0xBC, 0x00, 0x80, 0x09, 0x78, 0x08, 0x98, 0x40, 0x18, 0x76, 0x1C, 0x08, 0x90, 0x10, 
+	0x98, 0x86, 0x42, 0x00, 0xD8, 0xD7, 0xE6, 0x0A, 0x98, 0x40, 0x1C, 0x12, 0x99, 0x0A, 0x90, 0x88, 
+	0x42, 0x00, 0xD8, 0xB9, 0xE6, 0x01, 0x98, 0x40, 0x1C, 0xC0, 0xB2, 0x01, 0x90, 0x00, 0x99, 0x88, 
+	0x42, 0x00, 0xD2, 0xAF, 0xE6, 0x0A, 0xE6, 0x08, 0xB5, 0x00, 0x90, 0x19, 0x48, 0x40, 0x38, 0xC3, 
+	0x6A, 0x1F, 0x48, 0x00, 0x22, 0x01, 0x78, 0x5B, 0x1E, 0x49, 0x1E, 0x10, 0x46, 0xFF, 0xF7, 0x76, 
+	0xFE, 0x08, 0xBD, 0xF8, 0xB5, 0x04, 0x46, 0x0D, 0x46, 0x10, 0x46, 0x19, 0x46, 0x06, 0x9E, 0xFC, 
+	0xF7, 0x65, 0xFF, 0x1C, 0x48, 0x00, 0x96, 0x03, 0x78, 0x1B, 0x48, 0x29, 0x46, 0x02, 0x78, 0x20, 
+	0x46, 0xFF, 0xF7, 0x64, 0xFE, 0xF8, 0xBD, 0x30, 0xB5, 0x09, 0x48, 0x40, 0x38, 0x80, 0x6A, 0x00, 
+	0x28, 0x0C, 0xD0, 0x08, 0x4A, 
+	0x00, 0x00, 0xBD, 0x00, 0x80, 0x00, 0x21, 0x4C, 0x32, 0x14, 0x46, 0x13, 0x1D, 0x0C, 0x3C, 0x25, 
+	0x1D, 0x40, 0x1E, 0x11, 0x54, 0x19, 0x54, 0x21, 0x54, 0x29, 0x54, 0xF9, 0xD1, 0x30, 0xBD, 0x00, 
+	0x00, 0xD8, 0xDF, 0x00, 0x00, 0x28, 0x01, 0x00, 0x20, 0x1C, 0x0E, 0x00, 0x20, 0xAC, 0x0B, 0x00, 
+	0x20, 0x64, 0x08, 0x00, 0x20, 0x30, 0xE0, 0x00, 0x00, 0x44, 0xDE, 0x00, 0x00, 0x9E, 0x00, 0x00, 
+	0x20, 0x9D, 0x00, 0x00, 0x20, 0x2C, 0xE1, 0x00, 0x00, 0x24, 0x06, 0x00, 0x20, 0x6C, 0x09, 0x00, 
+	0x20, 0xC8, 0xD6, 0x00, 0x00, 0xAD, 0x00, 0x00, 0x20, 0xAC, 0x00, 0x00, 0x20, 0x70, 0xB5, 0xFF, 
+	0x4D, 0xFF, 0x48, 0xEC, 0x6B, 0xE8, 0x63, 0xFC, 0xF7, 0x1F, 0xFB, 0xFC, 0xF7, 0x8A, 0xFE, 0xFC, 
+	0xF7, 0x01, 0xFF, 0x00, 0x28, 0xFB, 0xD0, 0xFB, 0x48, 0x00, 0x68, 0xFF, 0xF7, 0xD1, 0xFD, 0xEC, 
+	0x63, 0xFF, 0xF7, 0xB9, 0xFF, 
+	0x00, 0x00, 0xBE, 0x00, 0x80, 0x70, 0xBD, 0xF8, 0x48, 0x00, 0x6A, 0xF8, 0x4A, 0x00, 0x21, 0x40, 
+	0x1E, 0x11, 0x54, 0xFC, 0xD1, 0xF6, 0x48, 0xF7, 0x4A, 0x00, 0x78, 0x11, 0x54, 0x40, 0x1E, 0xFC, 
+	0xD1, 0xF5, 0x48, 0xF4, 0x4A, 0x00, 0x78, 0x2A, 0x32, 0x11, 0x54, 0x40, 0x1E, 0xFC, 0xD1, 0xEB, 
+	0x48, 0x81, 0x70, 0xC1, 0x70, 0x70, 0x47, 0x70, 0xB5, 0xE8, 0x4D, 0xE9, 0x48, 0xEC, 0x6B, 0xE8, 
+	0x63, 0xFC, 0xF7, 0xD5, 0xF9, 0x03, 0x20, 0xFC, 0xF7, 0x0C, 0xFE, 0xFC, 0xF7, 0xD3, 0xFE, 0x00, 
+	0x28, 0xFB, 0xD0, 0xEA, 0x48, 0x01, 0x68, 0x03, 0x20, 0xFF, 0xF7, 0xCD, 0xFD, 0xEC, 0x63, 0xFF, 
+	0xF7, 0xD2, 0xFF, 0x70, 0xBD, 0xE0, 0x48, 0x40, 0x6A, 0xE2, 0x4A, 0x54, 0x32, 0x00, 0x21, 0x40, 
+	0x1E, 0x11, 0x54, 0xFC, 0xD1, 0xDE, 0x48, 0xDF, 0x4A, 0x00, 0x78, 0x54, 0x3A, 0x11, 0x54, 0x40, 
+	0x1E, 0xFC, 0xD1, 0xDD, 0x48, 
+	0x00, 0x00, 0xBF, 0x00, 0x80, 0xDB, 0x4A, 0x00, 0x78, 0x2A, 0x3A, 0x11, 0x54, 0x40, 0x1E, 0xFC, 
+	0xD1, 0x70, 0x47, 0x70, 0xB5, 0xD1, 0x4D, 0xD2, 0x48, 0xEC, 0x6B, 0xE8, 0x63, 0xFC, 0xF7, 0xD0, 
+	0xF8, 0xFC, 0xF7, 0xDC, 0xFC, 0xFC, 0xF7, 0xA6, 0xFE, 0x00, 0x28, 0xFB, 0xD0, 0xD4, 0x48, 0x00, 
+	0x68, 0xFF, 0xF7, 0x41, 0xFF, 0xEC, 0x63, 0xFF, 0xF7, 0xD5, 0xFF, 0x70, 0xBD, 0xF0, 0xB5, 0xCA, 
+	0x48, 0x8D, 0xB0, 0x80, 0x6A, 0x0B, 0x90, 0xC5, 0x4A, 0xC5, 0x48, 0x15, 0x7A, 0x01, 0x7E, 0x08, 
+	0x91, 0x41, 0x7E, 0x07, 0x91, 0xC1, 0x7F, 0x4E, 0x07, 0x76, 0x0F, 0x01, 0x46, 0x20, 0x31, 0x0B, 
+	0x78, 0xC0, 0x7F, 0x5F, 0x07, 0x7F, 0x0F, 0xC0, 0x08, 0x06, 0x90, 0x08, 0x78, 0xC0, 0x08, 0x05, 
+	0x90, 0x30, 0x46, 0x38, 0x43, 0x08, 0xD1, 0xD0, 0x79, 0x40, 0x00, 0x0A, 0x90, 0x09, 0x90, 0x00, 
+	0x20, 0x04, 0x90, 0x03, 0x90, 
+	0x00, 0x00, 0xC0, 0x00, 0x80, 0x02, 0x90, 0x15, 0xE0, 0xA8, 0x19, 0x40, 0x1C, 0x0A, 0x90, 0xE8, 
+	0x19, 0x40, 0x1C, 0x09, 0x90, 0xBB, 0x48, 0x81, 0x5D, 0x04, 0x91, 0xC0, 0x5D, 0x03, 0x90, 0xB9, 
+	0x48, 0xB1, 0x00, 0x08, 0x30, 0x09, 0x18, 0x49, 0x68, 0xC9, 0xB2, 0x02, 0x91, 0xB9, 0x00, 0x08, 
+	0x18, 0x40, 0x68, 0xC0, 0xB2, 0x01, 0x90, 0x00, 0x20, 0x09, 0xE0, 0xA8, 0x49, 0x40, 0x31, 0x0A, 
+	0x5C, 0x52, 0x1C, 0x0A, 0x54, 0x0A, 0x1D, 0x11, 0x5C, 0x49, 0x1C, 0x11, 0x54, 0x40, 0x1C, 0x0B, 
+	0x99, 0x88, 0x42, 0xF2, 0xD3, 0xA4, 0x48, 0x00, 0x24, 0x40, 0x30, 0x0C, 0x90, 0xA4, 0xE0, 0x9F, 
+	0x48, 0x08, 0x99, 0x4C, 0x30, 0x00, 0x57, 0x88, 0x42, 0x0E, 0xDD, 0xFB, 0xF7, 0x7C, 0xFA, 0x00, 
+	0x28, 0x07, 0xD0, 0x9A, 0x49, 0x00, 0x20, 0x44, 0x31, 0x08, 0x55, 0x0C, 0x99, 0x09, 0x6A, 0x02, 
+	0x29, 0x02, 0xD1, 0x96, 0x49, 
+	0x00, 0x00, 0xC1, 0x00, 0x80, 0x40, 0x31, 0x08, 0x55, 0x94, 0x48, 0x07, 0x99, 0x50, 0x30, 0x00, 
+	0x57, 0x88, 0x42, 0x0E, 0xDD, 0xFB, 0xF7, 0x67, 0xFA, 0x00, 0x28, 0x07, 0xD0, 0x8F, 0x49, 0x00, 
+	0x20, 0x40, 0x31, 0x08, 0x55, 0x0C, 0x99, 0x09, 0x6A, 0x01, 0x29, 0x02, 0xD1, 0x8B, 0x49, 0x44, 
+	0x31, 0x08, 0x55, 0x8A, 0x48, 0x40, 0x30, 0x00, 0x5D, 0xA8, 0x42, 0x37, 0xD3, 0xA8, 0x42, 0x03, 
+	0xD1, 0x86, 0x48, 0x4C, 0x30, 0x00, 0x5D, 0x21, 0xE0, 0x0A, 0x99, 0x88, 0x42, 0x22, 0xD2, 0x00, 
+	0x2E, 0x2C, 0xD0, 0x82, 0x48, 0x81, 0x49, 0x4C, 0x30, 0x00, 0x57, 0x54, 0x31, 0x0A, 0x57, 0x84, 
+	0x46, 0x80, 0x1A, 0x01, 0x1E, 0x00, 0xDA, 0x41, 0x42, 0x06, 0x9B, 0x99, 0x42, 0x01, 0xDD, 0x1F, 
+	0x2B, 0x08, 0xD1, 0x04, 0x9B, 0x79, 0x49, 0xC0, 0x18, 0x02, 0x9B, 0x54, 0x31, 0x58, 0x43, 0x00, 
+	0x12, 0x10, 0x18, 0x05, 0xE0, 
+	0x00, 0x00, 0xC2, 0x00, 0x80, 0x75, 0x48, 0x40, 0x30, 0x05, 0x55, 0x60, 0x46, 0x73, 0x49, 0x54, 
+	0x31, 0x08, 0x55, 0x0B, 0xE0, 0x71, 0x4A, 0x4C, 0x32, 0x10, 0x46, 0x08, 0x30, 0x11, 0x5D, 0x03, 
+	0x5D, 0xC9, 0x1A, 0x11, 0x55, 0x00, 0x21, 0x0C, 0x3A, 0x11, 0x55, 0x01, 0x55, 0x6B, 0x48, 0x44, 
+	0x30, 0x00, 0x5D, 0xA8, 0x42, 0x37, 0xD3, 0xA8, 0x42, 0x06, 0xD1, 0x68, 0x48, 0x67, 0x49, 0x50, 
+	0x30, 0x00, 0x5D, 0x58, 0x31, 0x08, 0x55, 0x2E, 0xE0, 0x09, 0x99, 0x88, 0x42, 0x1F, 0xD2, 0x00, 
+	0x2F, 0x29, 0xD0, 0x62, 0x48, 0x61, 0x4A, 0x50, 0x30, 0x58, 0x32, 0x00, 0x57, 0x11, 0x57, 0x86, 
+	0x46, 0x8C, 0x46, 0x40, 0x1A, 0x01, 0x1E, 0x00, 0xDA, 0x49, 0x42, 0x05, 0x9B, 0x99, 0x42, 0x01, 
+	0xDD, 0x1F, 0x2B, 0x06, 0xD1, 0x03, 0x9B, 0xC0, 0x18, 0x01, 0x9B, 0x58, 0x43, 0x00, 0x12, 0x60, 
+	0x44, 0x03, 0xE0, 0x56, 0x48, 
+	0x00, 0x00, 0xC3, 0x00, 0x80, 0x44, 0x30, 0x05, 0x55, 0x70, 0x46, 0x10, 0x55, 0x0B, 0xE0, 0x53, 
+	0x4A, 0x50, 0x32, 0x10, 0x46, 0x08, 0x30, 0x11, 0x5D, 0x03, 0x5D, 0xC9, 0x1A, 0x11, 0x55, 0x00, 
+	0x21, 0x0C, 0x3A, 0x11, 0x55, 0x01, 0x55, 0x64, 0x1C, 0x0B, 0x98, 0x84, 0x42, 0x00, 0xD2, 0x56, 
+	0xE7, 0x0D, 0xB0, 0x65, 0xE4, 0xF0, 0xB5, 0x4E, 0x48, 0x91, 0xB0, 0x00, 0x78, 0x0B, 0x90, 0x4E, 
+	0x48, 0x46, 0x4A, 0x00, 0x78, 0x0A, 0x90, 0x50, 0x48, 0xD7, 0x79, 0x00, 0x78, 0x08, 0x90, 0x50, 
+	0x79, 0x07, 0x90, 0x43, 0x48, 0x41, 0x7F, 0x49, 0x07, 0x49, 0x0F, 0x06, 0x91, 0x40, 0x7F, 0xC0, 
+	0x08, 0x05, 0x90, 0x3F, 0x48, 0x20, 0x30, 0xC1, 0x78, 0xC0, 0x78, 0x09, 0x09, 0x8C, 0x46, 0x00, 
+	0x07, 0x00, 0x0F, 0x01, 0x90, 0x06, 0x99, 0x00, 0x29, 0x04, 0xD1, 0x78, 0x00, 0x09, 0x90, 0x00, 
+	0x20, 0x04, 0x90, 0x0C, 0xE0, 
+	0x00, 0x00, 0xC4, 0x00, 0x80, 0x78, 0x18, 0x40, 0x1C, 0x09, 0x90, 0x3E, 0x49, 0x06, 0x98, 0x08, 
+	0x5C, 0x04, 0x90, 0x06, 0x98, 0x08, 0x31, 0x80, 0x00, 0x40, 0x18, 0x40, 0x68, 0xC0, 0xB2, 0x00, 
+	0x21, 0x03, 0x90, 0x2E, 0x48, 0x0B, 0x46, 0x81, 0x64, 0xC1, 0x70, 0x81, 0x70, 0x02, 0x91, 0x40, 
+	0x78, 0x10, 0x90, 0x0C, 0x46, 0x0A, 0x46, 0xC0, 0x07, 0x1E, 0xD0, 0x2E, 0x4D, 0x0B, 0x98, 0x0B, 
+	0x9E, 0x28, 0x5C, 0x40, 0x1C, 0xA8, 0x55, 0x0B, 0x98, 0x65, 0x46, 0x40, 0x1E, 0x6D, 0x42, 0x0F, 
+	0x95, 0x26, 0x4D, 0x2D, 0x56, 0x65, 0x45, 0x03, 0xDD, 0xEB, 0x18, 0x64, 0x1C, 0xE4, 0xB2, 0x05, 
+	0xE0, 0x0F, 0x9E, 0xB5, 0x42, 0x02, 0xDA, 0x69, 0x18, 0x52, 0x1C, 0xD2, 0xB2, 0x21, 0x4D, 0x2E, 
+	0x5C, 0x76, 0x1C, 0x2E, 0x54, 0x40, 0x1E, 0xEB, 0xD1, 0x10, 0x98, 0x80, 0x07, 0x20, 0xD5, 0x1D, 
+	0x4D, 0x0A, 0x98, 0x2A, 0x35, 
+	0x00, 0x00, 0xC5, 0x00, 0x80, 0x28, 0x5C, 0x0A, 0x9E, 0x40, 0x1C, 0xA8, 0x55, 0x0A, 0x98, 0x66, 
+	0x46, 0x40, 0x1E, 0x76, 0x42, 0x0E, 0x96, 0x15, 0x4D, 0x2D, 0x56, 0x65, 0x45, 0x03, 0xDD, 0xEB, 
+	0x18, 0x64, 0x1C, 0xE4, 0xB2, 0x05, 0xE0, 0x0E, 0x9E, 0xB5, 0x42, 0x02, 0xDA, 0x69, 0x18, 0x52, 
+	0x1C, 0xD2, 0xB2, 0x10, 0x4D, 0x2A, 0x35, 0x2E, 0x5C, 0x76, 0x1C, 0x2E, 0x54, 0x40, 0x1E, 0xEA, 
+	0xD1, 0x08, 0x1E, 0x00, 0xDA, 0x48, 0x42, 0x5D, 0x00, 0xA8, 0x42, 0x21, 0xDD, 0x03, 0x2A, 0x1F, 
+	0xD9, 0x01, 0x98, 0x00, 0x28, 0x1C, 0xD0, 0x01, 0x4D, 0x68, 0x7A, 0x17, 0xE0, 0x28, 0x01, 0x00, 
+	0x20, 0x24, 0xDE, 0x00, 0x00, 0xE8, 0x00, 0x00, 0x20, 0x98, 0xDF, 0x00, 0x00, 0xAC, 0x0B, 0x00, 
+	0x20, 0x9E, 0x00, 0x00, 0x20, 0x18, 0x09, 0x00, 0x20, 0x9D, 0x00, 0x00, 0x20, 0xE4, 0x00, 0x00, 
+	0x20, 0xE0, 0x00, 0x00, 0x20, 
+	0x00, 0x00, 0xC6, 0x00, 0x80, 0xC0, 0xD6, 0x00, 0x00, 0x04, 0x01, 0x00, 0x20, 0x40, 0x1C, 0x01, 
+	0xE0, 0xF9, 0x4D, 0x00, 0x20, 0x68, 0x72, 0x00, 0x29, 0x00, 0xDA, 0x49, 0x42, 0x99, 0x42, 0x07, 
+	0xDA, 0x50, 0x00, 0xA0, 0x42, 0x04, 0xD2, 0x01, 0x98, 0x00, 0x28, 0x01, 0xD0, 0x01, 0x20, 0x00, 
+	0xE0, 0x00, 0x20, 0x00, 0x90, 0x10, 0x98, 0xC0, 0x07, 0x7C, 0xD0, 0x08, 0x98, 0x0B, 0x9C, 0x40, 
+	0x42, 0x0D, 0x90, 0xEE, 0x48, 0x64, 0x1E, 0x05, 0x57, 0x0D, 0x98, 0x85, 0x42, 0x02, 0xDA, 0xEA, 
+	0x49, 0x01, 0x20, 0x88, 0x70, 0x01, 0x98, 0x00, 0x28, 0x15, 0xD0, 0xE7, 0x48, 0x01, 0x9A, 0x41, 
+	0x7A, 0x91, 0x42, 0x08, 0xD9, 0x00, 0x2D, 0x06, 0xDD, 0x01, 0x21, 0x02, 0x91, 0xE4, 0x49, 0x0D, 
+	0x55, 0x42, 0x6A, 0x09, 0x99, 0x11, 0x55, 0x00, 0x99, 0x00, 0x29, 0x04, 0xD0, 0x00, 0x2D, 0x02, 
+	0xDA, 0x40, 0x6A, 0x00, 0x21, 
+	0x00, 0x00, 0xC7, 0x00, 0x80, 0x01, 0x55, 0x08, 0x98, 0x85, 0x42, 0x02, 0xDD, 0xDA, 0x49, 0x01, 
+	0x20, 0xC8, 0x70, 0x07, 0x98, 0x85, 0x42, 0x15, 0xDD, 0xD7, 0x4E, 0x28, 0x1A, 0xB1, 0x6C, 0x40, 
+	0x18, 0xB0, 0x64, 0xFB, 0xF7, 0xE0, 0xF8, 0x00, 0x28, 0x05, 0xD1, 0x71, 0x6A, 0x08, 0x55, 0xB1, 
+	0x6A, 0x08, 0x55, 0xF1, 0x6A, 0x05, 0xE0, 0xF1, 0x68, 0x00, 0x20, 0x08, 0x55, 0x31, 0x69, 0x08, 
+	0x55, 0x71, 0x69, 0x08, 0x55, 0xCC, 0x48, 0x41, 0x6A, 0x08, 0x5D, 0xB8, 0x42, 0x30, 0xD3, 0xB8, 
+	0x42, 0x06, 0xD1, 0xCC, 0x4A, 0x12, 0x88, 0x10, 0x2A, 0x02, 0xD8, 0xC9, 0x48, 0x05, 0x55, 0x27, 
+	0xE0, 0x09, 0x9A, 0x90, 0x42, 0x18, 0xD2, 0x06, 0x98, 0x00, 0x28, 0x21, 0xD0, 0xC4, 0x48, 0x03, 
+	0x57, 0xE8, 0x1A, 0x02, 0x1E, 0x00, 0xDA, 0x42, 0x42, 0x05, 0x9E, 0xB2, 0x42, 0x01, 0xDD, 0x1F, 
+	0x2E, 0x08, 0xD1, 0x04, 0x9A, 
+	0x00, 0x00, 0xC8, 0x00, 0x80, 0xBE, 0x49, 0x80, 0x18, 0x03, 0x9A, 0x50, 0x43, 0x00, 0x12, 0x18, 
+	0x18, 0x08, 0x55, 0x0D, 0xE0, 0x0F, 0x55, 0xE0, 0xE7, 0xBA, 0x48, 0x00, 0x88, 0x10, 0x28, 0x07, 
+	0xD8, 0xB7, 0x4A, 0xB6, 0x4B, 0x10, 0x5D, 0x28, 0x1A, 0x18, 0x55, 0x00, 0x20, 0x08, 0x55, 0x10, 
+	0x55, 0x00, 0x2C, 0x86, 0xD1, 0xB0, 0x48, 0x40, 0x78, 0x80, 0x07, 0x7A, 0xD5, 0x08, 0x98, 0x0A, 
+	0x9C, 0x40, 0x42, 0x0C, 0x90, 0x0B, 0x98, 0x64, 0x1E, 0x26, 0x18, 0xAC, 0x48, 0x85, 0x57, 0x0C, 
+	0x98, 0x85, 0x42, 0x02, 0xDA, 0xA8, 0x49, 0x01, 0x20, 0x88, 0x70, 0x01, 0x98, 0x00, 0x28, 0x15, 
+	0xD0, 0xA5, 0x48, 0x01, 0x9A, 0x41, 0x7A, 0x91, 0x42, 0x08, 0xD9, 0x00, 0x2D, 0x06, 0xDD, 0x01, 
+	0x21, 0x02, 0x91, 0xA3, 0x49, 0x0D, 0x55, 0x02, 0x6B, 0x09, 0x99, 0x11, 0x55, 0x00, 0x99, 0x00, 
+	0x29, 0x04, 0xD0, 0x00, 0x2D, 
+	0x00, 0x00, 0xC9, 0x00, 0x80, 0x02, 0xDA, 0x00, 0x6B, 0x00, 0x21, 0x01, 0x55, 0x08, 0x98, 0x85, 
+	0x42, 0x02, 0xDD, 0x99, 0x49, 0x01, 0x20, 0xC8, 0x70, 0x07, 0x98, 0x85, 0x42, 0x17, 0xDD, 0x29, 
+	0x1A, 0x95, 0x48, 0x82, 0x6C, 0x89, 0x18, 0x81, 0x64, 0xFB, 0xF7, 0x5D, 0xF8, 0x00, 0x28, 0x06, 
+	0xD1, 0x91, 0x49, 0x0A, 0x6B, 0x10, 0x55, 0x4A, 0x6B, 0x10, 0x55, 0x89, 0x6B, 0x06, 0xE0, 0x8E, 
+	0x49, 0x00, 0x20, 0x8A, 0x69, 0x10, 0x55, 0xCA, 0x69, 0x10, 0x55, 0x09, 0x6A, 0x08, 0x55, 0x8A, 
+	0x48, 0x01, 0x6B, 0x08, 0x5D, 0xB8, 0x42, 0x2A, 0xD3, 0xB8, 0x42, 0x02, 0xD1, 0x88, 0x48, 0x85, 
+	0x55, 0x25, 0xE0, 0x09, 0x9A, 0x90, 0x42, 0x1A, 0xD2, 0x06, 0x98, 0x00, 0x28, 0x1F, 0xD0, 0x84, 
+	0x48, 0x80, 0x57, 0x84, 0x46, 0x28, 0x1A, 0x02, 0x1E, 0x00, 0xDA, 0x42, 0x42, 0x05, 0x9B, 0x9A, 
+	0x42, 0x01, 0xDD, 0x1F, 0x2B, 
+	0x00, 0x00, 0xCA, 0x00, 0x80, 0x08, 0xD1, 0x04, 0x9B, 0x7D, 0x4A, 0xC0, 0x18, 0x03, 0x9B, 0x58, 
+	0x43, 0x00, 0x12, 0x60, 0x44, 0x90, 0x55, 0x0A, 0xE0, 0x0F, 0x55, 0xDF, 0xE7, 0x09, 0xE0, 0x78, 
+	0x4A, 0x76, 0x4B, 0x90, 0x5D, 0x28, 0x1A, 0x98, 0x55, 0x00, 0x20, 0x08, 0x55, 0xF2, 0xE7, 0x00, 
+	0x2C, 0x88, 0xD1, 0x02, 0x98, 0x01, 0x28, 0x02, 0xD1, 0x6F, 0x49, 0x00, 0x20, 0x48, 0x72, 0x11, 
+	0xB0, 0xF0, 0xBD, 0xF0, 0xB5, 0x70, 0x48, 0x6C, 0x4A, 0x05, 0x78, 0x70, 0x48, 0x87, 0xB0, 0x07, 
+	0x78, 0x90, 0x79, 0x6F, 0x49, 0x06, 0x90, 0x0B, 0x7F, 0x5B, 0x07, 0x5B, 0x0F, 0x04, 0x93, 0x09, 
+	0x7F, 0xC9, 0x08, 0x03, 0x91, 0x00, 0x2B, 0x04, 0xD1, 0x40, 0x00, 0x05, 0x90, 0x00, 0x20, 0x02, 
+	0x90, 0x0B, 0xE0, 0xC0, 0x18, 0x40, 0x1C, 0x67, 0x49, 0x05, 0x90, 0xC8, 0x5C, 0x02, 0x90, 0x65, 
+	0x48, 0x99, 0x00, 0x08, 0x30, 
+	0x00, 0x00, 0xCB, 0x00, 0x80, 0x08, 0x18, 0x40, 0x68, 0xC0, 0xB2, 0x01, 0x90, 0x5A, 0x48, 0x00, 
+	0x21, 0x41, 0x81, 0x40, 0x78, 0x02, 0x28, 0x07, 0xD0, 0x5F, 0x48, 0x2C, 0x46, 0x01, 0x5D, 0x49, 
+	0x1C, 0x01, 0x55, 0x64, 0x1E, 0xFA, 0xD1, 0x07, 0xE0, 0x5B, 0x48, 0x3C, 0x46, 0x2A, 0x30, 0x01, 
+	0x5D, 0x49, 0x1C, 0x01, 0x55, 0x64, 0x1E, 0xFA, 0xD1, 0x00, 0x26, 0xFA, 0xF7, 0xD4, 0xFF, 0x00, 
+	0x28, 0x3F, 0xD1, 0x1D, 0xE0, 0x00, 0x20, 0x18, 0xE0, 0x53, 0x49, 0xA8, 0x31, 0x0A, 0x57, 0x4A, 
+	0x49, 0x64, 0x1C, 0x0B, 0x79, 0x9A, 0x42, 0x0F, 0xDD, 0x4A, 0x89, 0x52, 0x1C, 0x4A, 0x81, 0xCB, 
+	0x68, 0x00, 0x22, 0x1A, 0x54, 0x0B, 0x69, 0x1A, 0x54, 0x4B, 0x69, 0x1A, 0x54, 0x8B, 0x69, 0x9A, 
+	0x55, 0xCB, 0x69, 0x9A, 0x55, 0x09, 0x6A, 0x8A, 0x55, 0x40, 0x1C, 0xA8, 0x42, 0xE4, 0xD3, 0x76, 
+	0x1C, 0xBE, 0x42, 0xDF, 0xD3, 
+	0x00, 0x00, 0xCC, 0x00, 0x80, 0x1F, 0xE0, 0x00, 0x20, 0x18, 0xE0, 0x43, 0x49, 0xA8, 0x31, 0x0A, 
+	0x57, 0x39, 0x49, 0x64, 0x1C, 0x0B, 0x79, 0x9A, 0x42, 0x0F, 0xDD, 0x4A, 0x89, 0x52, 0x1C, 0x4A, 
+	0x81, 0x4B, 0x6A, 0x00, 0x22, 0x1A, 0x54, 0x8B, 0x6A, 0x1A, 0x54, 0xCB, 0x6A, 0x1A, 0x54, 0x0B, 
+	0x6B, 0x9A, 0x55, 0x4B, 0x6B, 0x9A, 0x55, 0x89, 0x6B, 0x8A, 0x55, 0x40, 0x1C, 0xA8, 0x42, 0xE4, 
+	0xD3, 0x76, 0x1C, 0xBE, 0x42, 0xDF, 0xD3, 0x2C, 0x48, 0x40, 0x78, 0x02, 0x28, 0x7B, 0xD1, 0x00, 
+	0x20, 0x74, 0xE0, 0x29, 0x49, 0x06, 0x9A, 0x89, 0x69, 0x8E, 0x46, 0x09, 0x5C, 0x91, 0x42, 0x6C, 
+	0xD3, 0x91, 0x42, 0x12, 0xD1, 0x27, 0x4A, 0x12, 0x88, 0x10, 0x2A, 0x0E, 0xD8, 0x2A, 0x4E, 0x01, 
+	0x46, 0x22, 0x4C, 0x69, 0x43, 0x00, 0x22, 0xA8, 0x36, 0x30, 0x34, 0x03, 0xE0, 0x73, 0x5C, 0x63, 
+	0x54, 0x49, 0x1C, 0x52, 0x1C, 
+	0x00, 0x00, 0xCD, 0x00, 0x80, 0xAA, 0x42, 0xF9, 0xD3, 0x57, 0xE0, 0x05, 0x9A, 0x91, 0x42, 0x29, 
+	0xD2, 0x04, 0x99, 0x00, 0x29, 0x51, 0xD0, 0x01, 0x46, 0x69, 0x43, 0x00, 0x22, 0x1A, 0xE0, 0x17, 
+	0x4C, 0x1D, 0x4B, 0x30, 0x34, 0xA8, 0x33, 0x64, 0x56, 0x5B, 0x56, 0xA4, 0x46, 0x1B, 0x1B, 0x1C, 
+	0x1E, 0x00, 0xDA, 0x64, 0x42, 0x03, 0x9E, 0xB4, 0x42, 0x01, 0xDD, 0x1F, 0x2E, 0x0D, 0xD1, 0x02, 
+	0x9E, 0x0E, 0x4C, 0x9B, 0x19, 0x01, 0x9E, 0x30, 0x34, 0x73, 0x43, 0x1B, 0x12, 0x63, 0x44, 0x63, 
+	0x54, 0x49, 0x1C, 0x52, 0x1C, 0xAA, 0x42, 0xE2, 0xD3, 0x2F, 0xE0, 0x72, 0x46, 0x06, 0x99, 0x11, 
+	0x54, 0x40, 0x1E, 0x2A, 0xE0, 0x07, 0x49, 0x09, 0x88, 0x10, 0x29, 0x26, 0xD8, 0x01, 0x46, 0x03, 
+	0x4C, 0x69, 0x43, 0x00, 0x22, 0x30, 0x34, 0x1B, 0xE0, 0x28, 0x01, 0x00, 0x20, 0xAC, 0x0B, 0x00, 
+	0x20, 0x1C, 0x0E, 0x00, 0x20, 
+	0x00, 0x00, 0xCE, 0x00, 0x80, 0x96, 0x02, 0x00, 0x20, 0x9E, 0x00, 0x00, 0x20, 0x9D, 0x00, 0x00, 
+	0x20, 0x24, 0xDE, 0x00, 0x00, 0xC0, 0xD6, 0x00, 0x00, 0xC4, 0x08, 0x00, 0x20, 0x35, 0x4B, 0x66, 
+	0x5C, 0x5B, 0x5C, 0x9B, 0x1B, 0x33, 0x4E, 0x73, 0x54, 0x00, 0x23, 0x63, 0x54, 0x49, 0x1C, 0x52, 
+	0x1C, 0xAA, 0x42, 0xF3, 0xD3, 0x00, 0x22, 0x71, 0x46, 0x0A, 0x54, 0x40, 0x1C, 0xB8, 0x42, 0x88, 
+	0xD3, 0x07, 0xB0, 0xF0, 0xBD, 0xFF, 0xE7, 0x00, 0x20, 0x51, 0xE0, 0x2B, 0x49, 0x06, 0x9A, 0xC9, 
+	0x68, 0x8E, 0x46, 0x09, 0x5C, 0x91, 0x42, 0x49, 0xD3, 0x91, 0x42, 0x0B, 0xD1, 0x01, 0x46, 0x00, 
+	0x22, 0x24, 0x4E, 0x26, 0x4C, 0x03, 0xE0, 0x73, 0x5C, 0x63, 0x54, 0x49, 0x19, 0x52, 0x1C, 0xBA, 
+	0x42, 0xF9, 0xD3, 0x3B, 0xE0, 0x05, 0x9A, 0x91, 0x42, 0x25, 0xD2, 0x04, 0x99, 0x00, 0x29, 0x35, 
+	0xD0, 0x01, 0x46, 0x00, 0x22, 
+	0x00, 0x00, 0xCF, 0x00, 0x80, 0x17, 0xE0, 0x1D, 0x4C, 0x1A, 0x4B, 0x64, 0x56, 0x5B, 0x56, 0xA4, 
+	0x46, 0x1B, 0x1B, 0x1C, 0x1E, 0x00, 0xDA, 0x64, 0x42, 0x03, 0x9E, 0xB4, 0x42, 0x01, 0xDD, 0x1F, 
+	0x2E, 0x0C, 0xD1, 0x02, 0x9E, 0x15, 0x4C, 0x9B, 0x19, 0x01, 0x9E, 0x73, 0x43, 0x1B, 0x12, 0x63, 
+	0x44, 0x63, 0x54, 0x49, 0x19, 0x52, 0x1C, 0xBA, 0x42, 0xE5, 0xD3, 0x17, 0xE0, 0x72, 0x46, 0x06, 
+	0x99, 0x11, 0x54, 0x40, 0x1E, 0x12, 0xE0, 0x01, 0x46, 0x00, 0x22, 0x0C, 0x4C, 0x09, 0xE0, 0x09, 
+	0x4B, 0x66, 0x5C, 0x5B, 0x5C, 0x9B, 0x1B, 0x07, 0x4E, 0x73, 0x54, 0x00, 0x23, 0x63, 0x54, 0x49, 
+	0x19, 0x52, 0x1C, 0xBA, 0x42, 0xF3, 0xD3, 0x00, 0x22, 0x71, 0x46, 0x0A, 0x54, 0x40, 0x1C, 0xA8, 
+	0x42, 0xAB, 0xD3, 0xA5, 0xE7, 0x6C, 0x09, 0x00, 0x20, 0x28, 0x01, 0x00, 0x20, 0xDC, 0x0B, 0x00, 
+	0x20, 0xF8, 0xB5, 0x47, 0x49, 
+	0x00, 0x00, 0xD0, 0x00, 0x80, 0x0A, 0x78, 0x47, 0x48, 0x20, 0x25, 0x24, 0x2A, 0x03, 0xD3, 0x4A, 
+	0x78, 0xC2, 0x61, 0x89, 0x78, 0x1C, 0xE0, 0xCA, 0x78, 0x24, 0x2A, 0x03, 0xD3, 0x0A, 0x79, 0xC2, 
+	0x61, 0x49, 0x79, 0x15, 0xE0, 0x8A, 0x79, 0x24, 0x2A, 0x03, 0xD3, 0xCA, 0x79, 0xC2, 0x61, 0x09, 
+	0x7A, 0x0E, 0xE0, 0x4A, 0x7A, 0x24, 0x2A, 0x03, 0xD3, 0x8A, 0x7A, 0xC2, 0x61, 0xC9, 0x7A, 0x07, 
+	0xE0, 0x0A, 0x7B, 0x00, 0x2A, 0x02, 0xD0, 0x0A, 0x7B, 0xC2, 0x61, 0x00, 0xE0, 0xC5, 0x61, 0x49, 
+	0x7B, 0x01, 0x62, 0x01, 0x26, 0x34, 0x4C, 0xB6, 0x04, 0x26, 0x60, 0x31, 0x48, 0x20, 0x30, 0x40, 
+	0x7C, 0x32, 0x4F, 0x78, 0x60, 0x05, 0x20, 0x00, 0xF0, 0x85, 0xF8, 0x27, 0x20, 0xB8, 0x60, 0x30, 
+	0x48, 0x05, 0x60, 0x10, 0x21, 0x81, 0x60, 0xC1, 0x60, 0x00, 0x06, 0xE0, 0x60, 0x60, 0x60, 0x26, 
+	0x60, 0x2C, 0x49, 0x40, 0x1C, 
+	0x00, 0x00, 0xD1, 0x00, 0x80, 0x08, 0x60, 0x2B, 0x49, 0x2B, 0x48, 0x40, 0x31, 0x08, 0x60, 0xF8, 
+	0xBD, 0xF8, 0xB5, 0x72, 0xB6, 0x00, 0x24, 0x29, 0x4E, 0x06, 0x20, 0x60, 0x43, 0x85, 0x19, 0x28, 
+	0x46, 0x06, 0xF0, 0xD1, 0xFD, 0x69, 0x79, 0x2A, 0x79, 0x09, 0x02, 0x11, 0x43, 0x06, 0xF0, 0xC7, 
+	0xFD, 0x64, 0x1C, 0xE4, 0xB2, 0x02, 0x2C, 0xEF, 0xD3, 0x20, 0x4F, 0x00, 0x21, 0x3F, 0x1F, 0x0A, 
+	0x46, 0x3D, 0x1F, 0x90, 0x00, 0x3B, 0x58, 0x1E, 0x0A, 0xD8, 0xB2, 0x36, 0x02, 0x05, 0xE0, 0x4B, 
+	0x00, 0x5C, 0x19, 0xEB, 0x5C, 0x64, 0x78, 0xF4, 0x54, 0x49, 0x1C, 0x03, 0x46, 0x40, 0x1E, 0xC0, 
+	0xB2, 0x00, 0x2B, 0xF4, 0xD1, 0x52, 0x1C, 0xEC, 0xD0, 0x15, 0x48, 0x02, 0x22, 0x02, 0x60, 0x15, 
+	0x48, 0x30, 0x21, 0x01, 0x60, 0x51, 0x03, 0x81, 0x60, 0x81, 0x15, 0xC1, 0x60, 0x13, 0x48, 0x12, 
+	0x49, 0x01, 0x60, 0x45, 0x21, 
+	0x00, 0x00, 0xD2, 0x00, 0x80, 0x49, 0x04, 0x41, 0x60, 0x11, 0x48, 0x01, 0x78, 0x11, 0x43, 0x01, 
+	0x70, 0x01, 0x78, 0x06, 0x22, 0x11, 0x43, 0x01, 0x70, 0xFF, 0xF7, 0x72, 0xFF, 0xF8, 0xBD, 0x00, 
+	0x00, 0xC0, 0xF1, 0xFF, 0x0F, 0x00, 0xFF, 0x00, 0x40, 0x00, 0x00, 0x01, 0x40, 0x00, 0xFF, 0x01, 
+	0x40, 0x80, 0x02, 0x01, 0x40, 0x00, 0x01, 0x01, 0x40, 0x32, 0x00, 0x00, 0x80, 0xF4, 0xD6, 0x00, 
+	0x00, 0x00, 0x20, 0x14, 0x40, 0x00, 0x00, 0x14, 0x40, 0x04, 0x00, 0x09, 0x00, 0x00, 0x50, 0x13, 
+	0x40, 0x00, 0x70, 0x13, 0x40, 0x80, 0x1C, 0x80, 0x08, 0x03, 0xD0, 0x00, 0xBF, 0x40, 0x1E, 0x00, 
+	0x46, 0xFC, 0xD1, 0x70, 0x47, 0xEF, 0xF3, 0x10, 0x80, 0x72, 0xB6, 0x70, 0x47, 0x80, 0xF3, 0x10, 
+	0x88, 0x70, 0x47, 0x00, 0x00, 0x10, 0xB5, 0x2E, 0x49, 0x09, 0x78, 0x48, 0x43, 0xFF, 0xF7, 0xEA, 
+	0xFF, 0x10, 0xBD, 0x00, 0xBE, 
+	0x00, 0x00, 0xD3, 0x00, 0x80, 0x70, 0x47, 0x01, 0x22, 0x52, 0x07, 0x10, 0x28, 0x00, 0xD3, 0x00, 
+	0xBE, 0x83, 0x00, 0xD0, 0x58, 0xD1, 0x50, 0x70, 0x47, 0x01, 0x22, 0x52, 0x07, 0x10, 0x28, 0x00, 
+	0xD3, 0x00, 0xBE, 0x80, 0x00, 0x82, 0x18, 0x10, 0x6C, 0x11, 0x64, 0x70, 0x47, 0x03, 0x29, 0x00, 
+	0xD9, 0x00, 0xBE, 0x10, 0x28, 0x00, 0xD3, 0x00, 0xBE, 0x82, 0x07, 0xD2, 0x0E, 0x92, 0x1D, 0x91, 
+	0x40, 0x80, 0x08, 0x1C, 0x4A, 0x80, 0x00, 0x80, 0x18, 0x01, 0x60, 0x70, 0x47, 0x02, 0x07, 0x1A, 
+	0x49, 0x12, 0x0F, 0x01, 0x20, 0x90, 0x40, 0x08, 0x60, 0x70, 0x47, 0x17, 0x49, 0x02, 0x07, 0x80, 
+	0x31, 0x12, 0x0F, 0x01, 0x20, 0x90, 0x40, 0x08, 0x60, 0x70, 0x47, 0x02, 0x07, 0x13, 0x49, 0x12, 
+	0x0F, 0x01, 0x20, 0x90, 0x40, 0x08, 0x60, 0x70, 0x47, 0x12, 0x49, 0x11, 0x48, 0xC8, 0x60, 0x70, 
+	0x47, 0x70, 0xB5, 0x0B, 0x4D, 
+	0x00, 0x00, 0xD4, 0x00, 0x80, 0x00, 0x28, 0x00, 0xD1, 0x0F, 0x48, 0x10, 0x49, 0x04, 0x46, 0x68, 
+	0x60, 0x48, 0x1E, 0x20, 0x18, 0x06, 0xF0, 0x27, 0xFD, 0x7D, 0x21, 0x28, 0x70, 0xC9, 0x00, 0x48, 
+	0x1E, 0x20, 0x18, 0x06, 0xF0, 0x20, 0xFD, 0xA8, 0x60, 0xC0, 0x03, 0xE8, 0x60, 0x70, 0xBD, 0x00, 
+	0x00, 0x9C, 0x01, 0x00, 0x20, 0x00, 0xE4, 0x00, 0xE0, 0x00, 0xE1, 0x00, 0xE0, 0x80, 0xE2, 0x00, 
+	0xE0, 0x04, 0x00, 0xFA, 0x05, 0x00, 0xED, 0x00, 0xE0, 0x00, 0x51, 0x25, 0x02, 0x40, 0x42, 0x0F, 
+	0x00, 0x10, 0xB5, 0xFF, 0x20, 0xFF, 0xF7, 0x95, 0xFF, 0x10, 0xBD, 0x70, 0xB5, 0xFF, 0xF7, 0x82, 
+	0xFF, 0x0D, 0x4A, 0x11, 0x68, 0x03, 0x23, 0x9B, 0x03, 0x01, 0x24, 0x99, 0x43, 0xA4, 0x03, 0x0C, 
+	0x43, 0x14, 0x60, 0x01, 0x24, 0xE4, 0x03, 0x0C, 0x43, 0x14, 0x60, 0x09, 0x4D, 0x07, 0x4C, 0x2C, 
+	0x61, 0x08, 0x4D, 0x04, 0x24, 
+	0x00, 0x00, 0xD5, 0x00, 0x80, 0x2C, 0x60, 0x19, 0x43, 0x11, 0x60, 0xFF, 0xF7, 0x6F, 0xFF, 0x06, 
+	0x49, 0x01, 0x20, 0x08, 0x70, 0x70, 0xBD, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x05, 0x01, 0x01, 
+	0x00, 0x00, 0x04, 0x01, 0x40, 0x80, 0xE2, 0x00, 0xE0, 0xAE, 0x01, 0x00, 0x20, 0x70, 0xB5, 0x05, 
+	0xF0, 0x63, 0xFC, 0x01, 0x25, 0x6D, 0x02, 0x28, 0x46, 0x05, 0xF0, 0x88, 0xFC, 0x05, 0xF0, 0x51, 
+	0xFC, 0x03, 0x24, 0xA0, 0xB2, 0x00, 0x21, 0x05, 0xF0, 0x8E, 0xFC, 0x64, 0x1C, 0xAC, 0x42, 0xF8, 
+	0xD3, 0x40, 0x21, 0x02, 0x20, 0x05, 0xF0, 0x87, 0xFC, 0xFB, 0x49, 0x00, 0x20, 0x08, 0x70, 0x70, 
+	0xBD, 0xFF, 0xB5, 0x87, 0xB0, 0x86, 0x46, 0x00, 0x20, 0x14, 0x9C, 0x15, 0x9B, 0x02, 0x46, 0xF7, 
+	0x4E, 0x02, 0x90, 0x80, 0xE0, 0x16, 0x98, 0x09, 0x99, 0x50, 0x43, 0x40, 0x18, 0x80, 0xB2, 0x01, 
+	0x90, 0x13, 0x98, 0x16, 0x21, 
+	0x00, 0x00, 0xD6, 0x00, 0x80, 0x80, 0x18, 0x48, 0x43, 0xF1, 0x49, 0x0D, 0x5A, 0x40, 0x18, 0xED, 
+	0xB2, 0x84, 0x46, 0x04, 0x95, 0x80, 0x78, 0x02, 0x99, 0x03, 0x90, 0x08, 0x18, 0xC0, 0xB2, 0x02, 
+	0x90, 0x70, 0x46, 0x01, 0x28, 0x07, 0xD1, 0x30, 0x6A, 0x03, 0x28, 0x04, 0xD1, 0x02, 0x99, 0x03, 
+	0x98, 0x08, 0x18, 0xC0, 0xB2, 0x02, 0x90, 0x00, 0x21, 0x01, 0x25, 0x04, 0x9F, 0x8D, 0x40, 0x3D, 
+	0x42, 0x53, 0xD0, 0x70, 0x46, 0x00, 0x28, 0x0D, 0xD1, 0x01, 0x9D, 0xEF, 0x00, 0xE8, 0x19, 0xC0, 
+	0x18, 0x40, 0x18, 0x00, 0x7B, 0x16, 0x27, 0x15, 0x46, 0x7D, 0x43, 0xDD, 0x4F, 0xED, 0x19, 0x6D, 
+	0x18, 0x2D, 0x79, 0x26, 0xE0, 0x70, 0x46, 0x01, 0x28, 0x31, 0xD1, 0xD8, 0x4F, 0x40, 0x3F, 0xBD, 
+	0x69, 0xFF, 0x69, 0xE8, 0x19, 0x37, 0x6A, 0xC5, 0xB2, 0x02, 0x2F, 0x02, 0xD0, 0x37, 0x6A, 0x03, 
+	0x2F, 0x19, 0xD1, 0x11, 0x9F, 
+	0x00, 0x00, 0xD7, 0x00, 0x80, 0xD7, 0x19, 0xF8, 0x00, 0x3F, 0x18, 0xFF, 0x18, 0x7F, 0x18, 0x06, 
+	0x97, 0x38, 0x7B, 0x67, 0x46, 0x7F, 0x18, 0x05, 0x97, 0x3F, 0x79, 0x7F, 0x1B, 0xE0, 0x55, 0x37, 
+	0x6A, 0x03, 0x2F, 0x22, 0xD1, 0x06, 0x9F, 0x78, 0x7D, 0x05, 0x9F, 0x3F, 0x79, 0x7D, 0x1B, 0x03, 
+	0x9F, 0xED, 0x19, 0x60, 0x55, 0x19, 0xE0, 0x11, 0x9F, 0xD7, 0x19, 0xF8, 0x00, 0x3F, 0x18, 0xFF, 
+	0x18, 0x7F, 0x18, 0x78, 0x7D, 0x67, 0x46, 0x7F, 0x18, 0x3F, 0x79, 0x7D, 0x1B, 0xF1, 0xE7, 0x70, 
+	0x46, 0x02, 0x28, 0x0A, 0xD1, 0x11, 0x98, 0x15, 0x18, 0xEF, 0x00, 0xE8, 0x19, 0xC0, 0x18, 0x40, 
+	0x18, 0x05, 0x7B, 0x67, 0x46, 0x7F, 0x18, 0x3F, 0x79, 0xE5, 0x55, 0x49, 0x1C, 0x89, 0xB2, 0x08, 
+	0x29, 0xA2, 0xD3, 0x52, 0x1C, 0x92, 0xB2, 0x12, 0x98, 0x82, 0x42, 0x00, 0xD2, 0x7A, 0xE7, 0x0A, 
+	0x99, 0x10, 0x98, 0x00, 0x25, 
+	0x00, 0x00, 0xD8, 0x00, 0x80, 0x0E, 0x18, 0x14, 0xE0, 0x08, 0x98, 0x0A, 0x99, 0x00, 0x88, 0x88, 
+	0x42, 0x08, 0xD3, 0xB0, 0x42, 0x06, 0xD2, 0x0A, 0x9A, 0x61, 0x5D, 0x80, 0x1A, 0x08, 0x30, 0x80, 
+	0xB2, 0x05, 0xF0, 0xE1, 0xFB, 0x08, 0x98, 0x08, 0x99, 0x00, 0x88, 0x40, 0x1C, 0x6D, 0x1C, 0x08, 
+	0x80, 0xAD, 0xB2, 0x02, 0x98, 0x85, 0x42, 0xE7, 0xD3, 0x0B, 0xB0, 0xF0, 0xBD, 0xF1, 0xB5, 0x9E, 
+	0xB0, 0x00, 0x20, 0x1D, 0x90, 0x1B, 0x90, 0x03, 0x20, 0x05, 0xF0, 0xD1, 0xFB, 0x04, 0x02, 0x04, 
+	0x20, 0x05, 0xF0, 0xCD, 0xFB, 0x04, 0x43, 0x05, 0x20, 0x05, 0xF0, 0xC9, 0xFB, 0x06, 0x02, 0x06, 
+	0x20, 0x05, 0xF0, 0xC5, 0xFB, 0x06, 0x43, 0x1E, 0x98, 0x9A, 0x4D, 0x04, 0x28, 0x03, 0xD1, 0x09, 
+	0x21, 0x28, 0x46, 0xC9, 0x01, 0x04, 0xE0, 0x05, 0x28, 0x03, 0xD1, 0x96, 0x48, 0x09, 0x21, 0x09, 
+	0x02, 0x45, 0x18, 0xFF, 0x20, 
+	0x00, 0x00, 0xD9, 0x00, 0x80, 0xF9, 0x30, 0x86, 0x42, 0x00, 0xD8, 0x30, 0x46, 0x8F, 0x4E, 0x1A, 
+	0x90, 0xF0, 0x69, 0x02, 0x28, 0x90, 0x48, 0x04, 0xD1, 0x00, 0x78, 0xC0, 0x1C, 0x87, 0x08, 0xBF, 
+	0x00, 0x00, 0xE0, 0x07, 0x78, 0x00, 0x20, 0x1D, 0x90, 0x88, 0x48, 0x1E, 0x9B, 0x40, 0x38, 0x06, 
+	0xF0, 0xC4, 0xFC, 0x06, 0x04, 0x2D, 0x9E, 0x57, 0x04, 0x04, 0x5F, 0xC0, 0x6A, 0x80, 0xB2, 0x19, 
+	0x90, 0x00, 0x20, 0x18, 0x90, 0x1C, 0x90, 0x00, 0x2C, 0x03, 0xD1, 0xA9, 0x78, 0x08, 0x20, 0x05, 
+	0xF0, 0x8A, 0xFB, 0x10, 0xAB, 0x98, 0x8E, 0x40, 0x1C, 0x00, 0x26, 0x1D, 0x90, 0x11, 0xE0, 0x0E, 
+	0xA8, 0x04, 0xA9, 0xA1, 0xC1, 0x1C, 0x98, 0x18, 0x9A, 0x19, 0x99, 0x01, 0xAB, 0x07, 0xC3, 0x1A, 
+	0x9A, 0x00, 0x92, 0x23, 0x46, 0x32, 0x46, 0x1D, 0xA9, 0x00, 0x20, 0xFF, 0xF7, 0xF1, 0xFE, 0x76, 
+	0x1C, 0xB6, 0xB2, 0x75, 0x48, 
+	0x00, 0x00, 0xDA, 0x00, 0x80, 0x00, 0x78, 0x86, 0x42, 0xE9, 0xD3, 0x70, 0xE0, 0x01, 0x6B, 0x42, 
+	0x6B, 0x89, 0x18, 0x89, 0xB2, 0x19, 0x91, 0x00, 0x21, 0x18, 0x91, 0xC0, 0x6A, 0x78, 0x43, 0x86, 
+	0xB2, 0x00, 0x2C, 0x04, 0xD1, 0xE9, 0x78, 0x08, 0x20, 0x05, 0xF0, 0x5D, 0xFB, 0x01, 0xE0, 0x01, 
+	0x2C, 0x03, 0xD8, 0x29, 0x79, 0x09, 0x20, 0x05, 0xF0, 0x56, 0xFB, 0x10, 0xAB, 0x98, 0x8E, 0x04, 
+	0xA9, 0x80, 0x1C, 0x1D, 0x90, 0x07, 0xA8, 0xA1, 0xC1, 0x18, 0x9A, 0x19, 0x99, 0x01, 0x96, 0x03, 
+	0x92, 0x1A, 0x9A, 0x00, 0x92, 0x02, 0x91, 0x00, 0x22, 0x23, 0x46, 0x1D, 0xA9, 0x02, 0x20, 0x44, 
+	0xE0, 0x01, 0x21, 0x19, 0x91, 0x81, 0x6B, 0xC9, 0xB2, 0x18, 0x91, 0x81, 0x6A, 0x00, 0x29, 0x02, 
+	0xD1, 0x01, 0x20, 0x1B, 0x90, 0x3B, 0xE0, 0xC1, 0x6A, 0x82, 0x6B, 0x79, 0x43, 0xC0, 0x6B, 0x89, 
+	0x18, 0x08, 0x18, 0x80, 0xB2, 
+	0x00, 0x00, 0xDB, 0x00, 0x80, 0x1C, 0x90, 0x30, 0x6A, 0x02, 0x28, 0x02, 0xD0, 0x30, 0x6A, 0x03, 
+	0x28, 0x09, 0xD1, 0x00, 0x2C, 0x03, 0xD1, 0xE9, 0x79, 0x08, 0x20, 0x05, 0xF0, 0x24, 0xFB, 0x10, 
+	0xAB, 0x98, 0x8E, 0x40, 0x1C, 0x1D, 0x90, 0x30, 0x6A, 0x01, 0x28, 0x02, 0xD0, 0x30, 0x6A, 0x03, 
+	0x28, 0x0D, 0xD1, 0x10, 0xAB, 0x98, 0x8E, 0xA0, 0x42, 0x05, 0xD3, 0x29, 0x7A, 0x00, 0x1B, 0x08, 
+	0x30, 0x80, 0xB2, 0x05, 0xF0, 0x10, 0xFB, 0x10, 0xAB, 0x98, 0x8E, 0x40, 0x1C, 0x1D, 0x90, 0x07, 
+	0xA8, 0x04, 0xA9, 0xA1, 0xC1, 0x1C, 0x98, 0x18, 0x9A, 0x19, 0x99, 0x01, 0xAB, 0x07, 0xC3, 0x1A, 
+	0x9A, 0x00, 0x92, 0x23, 0x46, 0x00, 0x22, 0x1D, 0xA9, 0x01, 0x20, 0xFF, 0xF7, 0x79, 0xFE, 0x03, 
+	0x20, 0x1B, 0x99, 0x05, 0xF0, 0xF8, 0xFA, 0x04, 0x20, 0x1E, 0x99, 0x05, 0xF0, 0xF4, 0xFA, 0x1A, 
+	0x98, 0x01, 0x0A, 0x05, 0x20, 
+	0x00, 0x00, 0xDC, 0x00, 0x80, 0x05, 0xF0, 0xEF, 0xFA, 0x1A, 0x98, 0xC1, 0xB2, 0x06, 0x20, 0x05, 
+	0xF0, 0xEA, 0xFA, 0x09, 0x21, 0x07, 0x20, 0x05, 0xF0, 0xE6, 0xFA, 0x1F, 0xB0, 0xF0, 0xBD, 0xF0, 
+	0xB5, 0x85, 0xB0, 0x03, 0x20, 0x05, 0xF0, 0xF4, 0xFA, 0x02, 0x90, 0x05, 0x20, 0x05, 0xF0, 0xF0, 
+	0xFA, 0x01, 0x90, 0x07, 0x20, 0x05, 0xF0, 0xDB, 0xFA, 0x28, 0x4C, 0x05, 0x46, 0x21, 0x46, 0xFF, 
+	0x31, 0x81, 0x31, 0xFF, 0x34, 0x41, 0x34, 0x04, 0x91, 0x03, 0x28, 0x01, 0xD2, 0x67, 0x6A, 0x07, 
+	0xE0, 0x06, 0x2D, 0x01, 0xD2, 0x27, 0x6A, 0x03, 0xE0, 0x09, 0x2D, 0x15, 0xD2, 0x20, 0x6A, 0x47, 
+	0x00, 0x1F, 0x48, 0xE9, 0x00, 0x08, 0x18, 0x00, 0x79, 0x46, 0x07, 0x76, 0x0F, 0xFF, 0x20, 0x31, 
+	0x46, 0xF9, 0x30, 0x06, 0xF0, 0xF8, 0xFA, 0x01, 0x99, 0x81, 0x42, 0x00, 0xD9, 0x01, 0x90, 0x02, 
+	0x98, 0xB8, 0x42, 0x0D, 0xD2, 
+	0x00, 0x00, 0xDD, 0x00, 0x80, 0x38, 0x1A, 0x0C, 0xE0, 0x09, 0x2D, 0x07, 0xD1, 0xA0, 0x6A, 0x87, 
+	0x00, 0x08, 0x6A, 0x03, 0x28, 0x00, 0xD1, 0x7F, 0x00, 0x02, 0x26, 0xE7, 0xE7, 0x01, 0x21, 0xB2, 
+	0xE0, 0x00, 0x20, 0x01, 0x99, 0x81, 0x42, 0x00, 0xD9, 0x01, 0x90, 0x09, 0x2D, 0x75, 0xD1, 0x08, 
+	0x20, 0x00, 0x90, 0x05, 0xF0, 0xFA, 0xFB, 0x07, 0x46, 0x02, 0x98, 0x02, 0x99, 0xC6, 0xB2, 0x01, 
+	0x98, 0x08, 0x18, 0x03, 0x90, 0x5C, 0xE0, 0x00, 0x00, 0x2E, 0x02, 0x00, 0x20, 0xD8, 0xDF, 0x00, 
+	0x00, 0x2C, 0xE1, 0x00, 0x00, 0x80, 0xE2, 0x00, 0x00, 0x9D, 0x00, 0x00, 0x20, 0x58, 0xDE, 0x00, 
+	0x00, 0x10, 0xD7, 0x00, 0x00, 0xB0, 0x08, 0x00, 0x21, 0x82, 0x00, 0xB2, 0x1A, 0xA3, 0x6A, 0x92, 
+	0xB2, 0x83, 0x42, 0x04, 0x9B, 0x1B, 0x6A, 0x25, 0xD9, 0x01, 0x2B, 0x0C, 0xD0, 0x00, 0x2A, 0x05, 
+	0xD0, 0x01, 0x2A, 0x06, 0xD0, 
+	0x00, 0x00, 0xDE, 0x00, 0x80, 0x02, 0x2A, 0x0C, 0xD1, 0xF9, 0x49, 0x18, 0xE0, 0x40, 0x00, 0xF9, 
+	0x49, 0x10, 0xE0, 0xF9, 0x49, 0x13, 0xE0, 0x00, 0x2A, 0x0A, 0xD0, 0x01, 0x2A, 0x0C, 0xD0, 0x02, 
+	0x2A, 0x0C, 0xD0, 0x03, 0x2A, 0x1E, 0xD1, 0x39, 0x46, 0xC1, 0x40, 0xC9, 0x07, 0xC9, 0x0F, 0x19, 
+	0xE0, 0xF2, 0x49, 0x40, 0x00, 0x09, 0x5A, 0x15, 0xE0, 0xF1, 0x49, 0x00, 0xE0, 0xF1, 0x49, 0x08, 
+	0x56, 0x81, 0xB2, 0x0F, 0xE0, 0x03, 0x2B, 0x0D, 0xD1, 0x00, 0x2A, 0x1C, 0xD0, 0x01, 0x2A, 0x1D, 
+	0xD0, 0x02, 0x2A, 0x1F, 0xD0, 0x03, 0x2A, 0x05, 0xD1, 0xA1, 0x6A, 0x41, 0x1A, 0x38, 0x46, 0xC8, 
+	0x40, 0xC1, 0x07, 0xC9, 0x0F, 0x08, 0x0A, 0x09, 0x02, 0x08, 0x43, 0x81, 0xB2, 0x00, 0x98, 0x05, 
+	0xF0, 0x44, 0xFA, 0x00, 0x98, 0x80, 0x1C, 0x80, 0xB2, 0x00, 0x90, 0x76, 0x1C, 0x03, 0x98, 0xF6, 
+	0xB2, 0xB0, 0x42, 0xAF, 0xD8, 
+	0x00, 0x00, 0xDF, 0x00, 0x80, 0x1D, 0xE0, 0xA1, 0x6A, 0x40, 0x1A, 0xD1, 0xE7, 0xA1, 0x6A, 0x40, 
+	0x1A, 0xD2, 0xE7, 0x02, 0xE0, 0xA1, 0x6A, 0x40, 0x1A, 0xD0, 0xE7, 0xDB, 0x49, 0xE8, 0x00, 0x08, 
+	0x58, 0x02, 0x99, 0x01, 0x9F, 0x71, 0x43, 0x0C, 0x18, 0x77, 0x43, 0x00, 0x26, 0x07, 0xE0, 0x30, 
+	0x46, 0x08, 0x30, 0x21, 0x78, 0x80, 0xB2, 0x05, 0xF0, 0x16, 0xFA, 0x64, 0x1C, 0x76, 0x1C, 0xBE, 
+	0x42, 0xF5, 0xD3, 0xE9, 0xB2, 0x04, 0x20, 0x05, 0xF0, 0x0E, 0xFA, 0x01, 0x98, 0x81, 0xB2, 0x05, 
+	0x20, 0x05, 0xF0, 0x13, 0xFA, 0x09, 0x2D, 0x01, 0xD1, 0x32, 0x21, 0x10, 0xE0, 0x03, 0x2D, 0x04, 
+	0xD3, 0xC9, 0x48, 0xE9, 0x00, 0x08, 0x18, 0x01, 0x79, 0x09, 0xE0, 0xC8, 0x48, 0x80, 0x7B, 0x01, 
+	0x28, 0xF6, 0xD1, 0xC5, 0x48, 0xE9, 0x00, 0x08, 0x18, 0x01, 0x79, 0x08, 0x20, 0x01, 0x43, 0x07, 
+	0x20, 0x05, 0xF0, 0xF1, 0xF9, 
+	0x00, 0x00, 0xE0, 0x00, 0x80, 0x00, 0x21, 0x03, 0x20, 0x05, 0xF0, 0xED, 0xF9, 0x05, 0xB0, 0xF0, 
+	0xBD, 0xFE, 0xB5, 0x03, 0x20, 0x05, 0xF0, 0xEB, 0xF9, 0x06, 0x02, 0x04, 0x20, 0x05, 0xF0, 0xE7, 
+	0xF9, 0x06, 0x43, 0x05, 0x20, 0x05, 0xF0, 0xE3, 0xF9, 0x04, 0x02, 0x06, 0x20, 0x05, 0xF0, 0xDF, 
+	0xF9, 0x04, 0x43, 0x07, 0x20, 0x05, 0xF0, 0xDB, 0xF9, 0x01, 0x90, 0x05, 0xF0, 0xB4, 0xF8, 0x07, 
+	0x46, 0x00, 0x20, 0x00, 0x90, 0x01, 0x98, 0x0C, 0x37, 0x02, 0x28, 0x03, 0xD0, 0x03, 0x28, 0x07, 
+	0xD0, 0x04, 0x28, 0x29, 0xD1, 0x1B, 0x2C, 0x00, 0xD9, 0x1B, 0x24, 0x00, 0x25, 0xAC, 0x4F, 0x1B, 
+	0xE0, 0xFF, 0x20, 0xF9, 0x30, 0x84, 0x42, 0x00, 0xD9, 0x04, 0x46, 0x00, 0x25, 0x08, 0xE0, 0x70, 
+	0x19, 0x39, 0x5C, 0x28, 0x46, 0x08, 0x30, 0x80, 0xB2, 0x05, 0xF0, 0xB5, 0xF9, 0x6D, 0x1C, 0xAD, 
+	0xB2, 0xA5, 0x42, 0xF4, 0xD3, 
+	0x00, 0x00, 0xE1, 0x00, 0x80, 0x12, 0xE0, 0x70, 0x19, 0x39, 0x5C, 0x28, 0x46, 0x09, 0x30, 0x80, 
+	0xB2, 0x05, 0xF0, 0xA9, 0xF9, 0x6D, 0x1C, 0xAD, 0xB2, 0xAC, 0x42, 0xF4, 0xD8, 0x9D, 0x48, 0x41, 
+	0x78, 0x08, 0x20, 0x05, 0xF0, 0xA0, 0xF9, 0x01, 0xE0, 0x01, 0x20, 0x00, 0x90, 0x03, 0x20, 0x00, 
+	0x99, 0x05, 0xF0, 0x99, 0xF9, 0x04, 0x20, 0x01, 0x99, 0x05, 0xF0, 0x95, 0xF9, 0x21, 0x0A, 0x05, 
+	0x20, 0x05, 0xF0, 0x91, 0xF9, 0xE1, 0xB2, 0x06, 0x20, 0x05, 0xF0, 0x8D, 0xF9, 0xFE, 0xBD, 0xF8, 
+	0xB5, 0x01, 0x24, 0x00, 0x25, 0x03, 0x20, 0x05, 0xF0, 0x8A, 0xF9, 0x06, 0x46, 0x04, 0x20, 0x05, 
+	0xF0, 0x86, 0xF9, 0x00, 0x90, 0x8C, 0x48, 0x07, 0x88, 0x8C, 0x48, 0x01, 0xF0, 0xF7, 0xFF, 0x30, 
+	0x46, 0x88, 0x4E, 0x01, 0x28, 0x08, 0xD0, 0x02, 0x28, 0x1E, 0xD0, 0x03, 0x28, 0x11, 0xD0, 0x04, 
+	0x28, 0x2A, 0xD1, 0x01, 0xF0, 
+	0x00, 0x00, 0xE2, 0x00, 0x80, 0x09, 0xFE, 0x20, 0xE0, 0x81, 0x48, 0x09, 0x38, 0x01, 0xF0, 0x29, 
+	0xFF, 0x70, 0x70, 0xC0, 0xB2, 0x00, 0x28, 0x02, 0xD0, 0x01, 0x21, 0x08, 0x43, 0x70, 0x70, 0x00, 
+	0x24, 0x1A, 0xE0, 0x7B, 0x48, 0x00, 0x99, 0x09, 0x38, 0x01, 0xF0, 0xDB, 0xFE, 0x70, 0x70, 0xC0, 
+	0xB2, 0x00, 0x28, 0xF4, 0xD1, 0x01, 0x25, 0xF2, 0xE7, 0x30, 0x78, 0x00, 0x28, 0x07, 0xD0, 0x01, 
+	0x28, 0x0A, 0xD1, 0x73, 0x48, 0x09, 0x38, 0x01, 0xF0, 0x56, 0xFD, 0x70, 0x70, 0xF2, 0xE7, 0x70, 
+	0x48, 0x09, 0x38, 0x01, 0xF0, 0xA8, 0xFD, 0xF8, 0xE7, 0x38, 0x46, 0x01, 0xF0, 0xBF, 0xFF, 0x21, 
+	0x46, 0x03, 0x20, 0x05, 0xF0, 0x40, 0xF9, 0x71, 0x78, 0x04, 0x20, 0x05, 0xF0, 0x3C, 0xF9, 0x29, 
+	0x46, 0x05, 0x20, 0x05, 0xF0, 0x38, 0xF9, 0xF8, 0xBD, 0xF0, 0xB5, 0xA3, 0xB0, 0x03, 0x20, 0x05, 
+	0xF0, 0x47, 0xF9, 0x06, 0x46, 
+	0x00, 0x00, 0xE3, 0x00, 0x80, 0x05, 0x20, 0x05, 0xF0, 0x43, 0xF9, 0x05, 0x46, 0x07, 0x20, 0x05, 
+	0xF0, 0x2E, 0xF9, 0x21, 0x90, 0x00, 0x28, 0x10, 0xD0, 0x01, 0x28, 0x1A, 0xD0, 0x02, 0x28, 0x5D, 
+	0xD1, 0x00, 0x2E, 0x5B, 0xD1, 0x80, 0x2D, 0x59, 0xD8, 0x5D, 0x4F, 0x38, 0x46, 0x40, 0x02, 0x00, 
+	0x0C, 0x22, 0x90, 0x00, 0x20, 0x04, 0x46, 0x00, 0x90, 0x12, 0xE0, 0x5A, 0x48, 0x5A, 0x49, 0xC0, 
+	0x09, 0xC9, 0x09, 0x40, 0x1A, 0xB0, 0x42, 0x49, 0xD9, 0x80, 0x2D, 0x47, 0xD8, 0x56, 0x4F, 0x38, 
+	0x46, 0xEC, 0xE7, 0x00, 0x2E, 0x42, 0xD1, 0x80, 0x2D, 0x40, 0xD8, 0x52, 0x4F, 0x38, 0x46, 0xE5, 
+	0xE7, 0x28, 0x19, 0x08, 0x30, 0x80, 0xB2, 0x05, 0xF0, 0x02, 0xF9, 0x47, 0x49, 0x10, 0x39, 0x09, 
+	0x5D, 0x88, 0x42, 0x01, 0xD0, 0x01, 0x20, 0x00, 0x90, 0x64, 0x1C, 0xA4, 0xB2, 0x08, 0x2C, 0xEF, 
+	0xD3, 0x00, 0x98, 0x00, 0x28, 
+	0x00, 0x00, 0xE4, 0x00, 0x80, 0x2A, 0xD1, 0x00, 0x24, 0x08, 0xE0, 0x20, 0x46, 0x08, 0x30, 0x80, 
+	0xB2, 0x05, 0xF0, 0xED, 0xF8, 0x01, 0xA9, 0x08, 0x55, 0x64, 0x1C, 0xA4, 0xB2, 0xA5, 0x42, 0xF4, 
+	0xD8, 0xF0, 0x01, 0xC0, 0x19, 0x40, 0x19, 0x05, 0xE0, 0x01, 0x78, 0x01, 0xAA, 0x11, 0x55, 0x40, 
+	0x1C, 0x64, 0x1C, 0xA4, 0xB2, 0x80, 0x2C, 0xF7, 0xD3, 0x28, 0x46, 0x10, 0x30, 0x80, 0xB2, 0x05, 
+	0xF0, 0xD6, 0xF8, 0x04, 0x02, 0x28, 0x46, 0x11, 0x30, 0x80, 0xB2, 0x05, 0xF0, 0xD0, 0xF8, 0x04, 
+	0x43, 0x01, 0xA9, 0x28, 0x46, 0x05, 0xF0, 0x36, 0xFA, 0x84, 0x42, 0x05, 0xD0, 0x01, 0x21, 0x03, 
+	0x20, 0x05, 0xF0, 0xC1, 0xF8, 0x23, 0xB0, 0xF0, 0xBD, 0x00, 0x2E, 0x07, 0xD1, 0x00, 0x20, 0x01, 
+	0xA9, 0x3A, 0x5C, 0x0A, 0x54, 0x40, 0x1C, 0x80, 0xB2, 0x04, 0x28, 0xF9, 0xD3, 0x22, 0x98, 0x01, 
+	0xA9, 0x80, 0x19, 0x80, 0xB2, 
+	0x00, 0x00, 0xE5, 0x00, 0x80, 0x05, 0xF0, 0x62, 0xFA, 0x00, 0x28, 0x01, 0xD1, 0x00, 0x21, 0x00, 
+	0xE0, 0x01, 0x21, 0x03, 0x20, 0x05, 0xF0, 0xA7, 0xF8, 0x04, 0x20, 0x21, 0x99, 0x05, 0xF0, 0xA3, 
+	0xF8, 0x29, 0x46, 0x05, 0x20, 0x05, 0xF0, 0xA9, 0xF8, 0x21, 0x98, 0x00, 0x28, 0xDA, 0xD1, 0x1F, 
+	0x49, 0x08, 0x70, 0x1F, 0x48, 0x01, 0x88, 0xC9, 0x07, 0xC9, 0x0F, 0x01, 0x80, 0xD2, 0xE7, 0xFE, 
+	0xB5, 0x03, 0x20, 0x05, 0xF0, 0xA5, 0xF8, 0x04, 0x46, 0x05, 0x20, 0x05, 0xF0, 0xA1, 0xF8, 0x05, 
+	0x46, 0x07, 0x20, 0x05, 0xF0, 0x8C, 0xF8, 0x00, 0x90, 0x00, 0x28, 0x2B, 0xD0, 0x01, 0x28, 0x34, 
+	0xD0, 0x02, 0x28, 0x3C, 0xD1, 0x00, 0x2C, 0x3A, 0xD1, 0x80, 0x2D, 0x38, 0xD8, 0x0C, 0x4E, 0x31, 
+	0xE0, 0x74, 0x01, 0x00, 0x20, 0x8C, 0x01, 0x00, 0x20, 0x7C, 0x01, 0x00, 0x20, 0x94, 0x01, 0x00, 
+	0x20, 0x80, 0x01, 0x00, 0x20, 
+	0x00, 0x00, 0xE6, 0x00, 0x80, 0x78, 0x01, 0x00, 0x20, 0x10, 0xD7, 0x00, 0x00, 0x8C, 0xDD, 0x00, 
+	0x00, 0x33, 0x10, 0x00, 0x20, 0xAF, 0x01, 0x00, 0x20, 0x34, 0x02, 0x00, 0x20, 0x10, 0x27, 0x00, 
+	0x00, 0x00, 0xE2, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xDC, 0x00, 0x00, 0x1A, 0x02, 0x00, 
+	0x20, 0x2C, 0x02, 0x00, 0x20, 0xF9, 0x48, 0xFA, 0x49, 0xC0, 0x09, 0xC9, 0x09, 0x40, 0x1A, 0xA0, 
+	0x42, 0x0D, 0xD9, 0x80, 0x2D, 0x0B, 0xD8, 0xF6, 0x4E, 0x04, 0xE0, 0x00, 0x2C, 0x07, 0xD1, 0x80, 
+	0x2D, 0x05, 0xD8, 0xF2, 0x4E, 0xE0, 0x01, 0x87, 0x19, 0x00, 0x24, 0x01, 0x90, 0x0C, 0xE0, 0x01, 
+	0x21, 0x03, 0x20, 0x05, 0xF0, 0x40, 0xF8, 0xFE, 0xBD, 0x20, 0x46, 0x08, 0x30, 0x39, 0x5D, 0x80, 
+	0xB2, 0x05, 0xF0, 0x39, 0xF8, 0x64, 0x1C, 0xA4, 0xB2, 0xA5, 0x42, 0xF5, 0xD8, 0x39, 0x46, 0x28, 
+	0x46, 0x05, 0xF0, 0xA0, 0xF9, 
+	0x00, 0x00, 0xE7, 0x00, 0x80, 0x04, 0x46, 0x01, 0x0A, 0x28, 0x46, 0x08, 0x30, 0x80, 0xB2, 0x05, 
+	0xF0, 0x2A, 0xF8, 0x28, 0x46, 0x09, 0x30, 0xE1, 0xB2, 0x80, 0xB2, 0x05, 0xF0, 0x24, 0xF8, 0x00, 
+	0x21, 0x03, 0x20, 0x05, 0xF0, 0x20, 0xF8, 0x04, 0x20, 0x00, 0x99, 0x05, 0xF0, 0x1C, 0xF8, 0x00, 
+	0x2D, 0x03, 0xD1, 0x71, 0x88, 0x01, 0x98, 0x08, 0x1A, 0x85, 0xB2, 0x29, 0x46, 0x05, 0x20, 0x05, 
+	0xF0, 0x1C, 0xF8, 0xFE, 0xBD, 0xF8, 0xB5, 0x01, 0xF0, 0xB9, 0xFE, 0x02, 0x20, 0x05, 0xF0, 0x0F, 
+	0xF8, 0x05, 0x46, 0x40, 0x06, 0x76, 0xD4, 0x01, 0xE0, 0x01, 0xF0, 0xDC, 0xFE, 0x05, 0xF0, 0x21, 
+	0xF8, 0x00, 0x28, 0xF9, 0xD1, 0xAB, 0x06, 0x9B, 0x0E, 0xCE, 0x48, 0x0A, 0x2B, 0x3D, 0xD0, 0x07, 
+	0xDC, 0x06, 0xF0, 0x23, 0xF9, 0x0A, 0x9F, 0x9D, 0x24, 0x29, 0x2C, 0x9D, 0x2F, 0x32, 0x35, 0x38, 
+	0x9D, 0x0F, 0x2B, 0x73, 0xD0, 
+	0x00, 0x00, 0xE8, 0x00, 0x80, 0x0A, 0xDC, 0x0B, 0x2B, 0x44, 0xD0, 0x0C, 0x2B, 0x5B, 0xD0, 0xC6, 
+	0x4E, 0x0D, 0x2B, 0x5B, 0xD0, 0x0E, 0x2B, 0x68, 0xD1, 0x00, 0x20, 0x63, 0xE0, 0x10, 0x2B, 0x6B, 
+	0xD0, 0x11, 0x2B, 0x7B, 0xD0, 0x3F, 0x2B, 0xF6, 0xD1, 0x03, 0x20, 0x04, 0xF0, 0xE0, 0xFF, 0xFE, 
+	0x28, 0x77, 0xD0, 0xFF, 0x28, 0x78, 0xD1, 0x00, 0xF0, 0x90, 0xF8, 0x76, 0xE0, 0x80, 0x21, 0x03, 
+	0x20, 0x04, 0xF0, 0xDB, 0xFF, 0x75, 0xE0, 0xFF, 0xF7, 0x3A, 0xFF, 0x72, 0xE0, 0xFF, 0xF7, 0x94, 
+	0xFE, 0x6F, 0xE0, 0x00, 0xF0, 0xA3, 0xF9, 0x6C, 0xE0, 0xFF, 0xF7, 0x39, 0xFE, 0x69, 0xE0, 0xFF, 
+	0xF7, 0xD7, 0xFD, 0x66, 0xE0, 0x00, 0xF0, 0x70, 0xF9, 0x63, 0xE0, 0x00, 0x78, 0x00, 0x28, 0x50, 
+	0xD0, 0x03, 0x20, 0x04, 0xF0, 0xBC, 0xFF, 0x04, 0x46, 0xC0, 0x07, 0x01, 0xD0, 0xFE, 0xF7, 0x89, 
+	0xFD, 0xA0, 0x07, 0x01, 0xD5, 
+	0x00, 0x00, 0xE9, 0x00, 0x80, 0xFE, 0xF7, 0x2A, 0xFD, 0x60, 0x07, 0x01, 0xD5, 0xFE, 0xF7, 0x53, 
+	0xFD, 0x00, 0x21, 0x3F, 0xE0, 0x00, 0x78, 0x00, 0x28, 0x3B, 0xD0, 0x01, 0x20, 0x04, 0xF0, 0x6D, 
+	0xFE, 0x01, 0xF0, 0xB0, 0xFD, 0x03, 0xF0, 0xEE, 0xFE, 0xC0, 0x07, 0xF9, 0xD1, 0x62, 0xB6, 0x9F, 
+	0x48, 0x80, 0x6A, 0x00, 0x28, 0x3D, 0xD0, 0x01, 0xF0, 0xA5, 0xFD, 0x05, 0xF0, 0xD3, 0xFD, 0x01, 
+	0x28, 0xF9, 0xD0, 0x36, 0xE0, 0x47, 0xE0, 0xFF, 0xF7, 0xAA, 0xFC, 0x32, 0xE0, 0x00, 0x24, 0x67, 
+	0x00, 0xF8, 0x1C, 0x80, 0xB2, 0x04, 0xF0, 0x9C, 0xFF, 0x95, 0x49, 0x64, 0x1C, 0xC8, 0x53, 0x19, 
+	0x2C, 0xF5, 0xD3, 0x01, 0x20, 0x30, 0x70, 0x24, 0xE0, 0x00, 0xE0, 0x20, 0xE0, 0x03, 0x20, 0x04, 
+	0xF0, 0x7E, 0xFF, 0x90, 0x49, 0x08, 0x70, 0xCB, 0xE7, 0x07, 0x20, 0x04, 0xF0, 0x78, 0xFF, 0x00, 
+	0x07, 0x00, 0x0F, 0x05, 0x28, 
+	0x00, 0x00, 0xEA, 0x00, 0x80, 0x05, 0xD8, 0xFF, 0xF7, 0x99, 0xFB, 0x12, 0xE0, 0x06, 0xE0, 0x08, 
+	0xE0, 0x0A, 0xE0, 0x01, 0x21, 0x03, 0x20, 0x04, 0xF0, 0x66, 0xFF, 0x0A, 0xE0, 0x00, 0xF0, 0xCA, 
+	0xF8, 0x07, 0xE0, 0x00, 0xF0, 0x71, 0xF8, 0x00, 0xE0, 0x01, 0x20, 0x00, 0x28, 0x01, 0xD0, 0xAD, 
+	0x09, 0xAD, 0x01, 0x81, 0x48, 0x80, 0x22, 0x01, 0x78, 0x51, 0x40, 0x01, 0x70, 0xC8, 0xB2, 0xC1, 
+	0x09, 0xC9, 0x01, 0x29, 0x43, 0x40, 0x20, 0x01, 0x43, 0x02, 0x20, 0x04, 0xF0, 0x4C, 0xFF, 0x01, 
+	0xF0, 0xFD, 0xF9, 0x01, 0xF0, 0x33, 0xFA, 0xF8, 0xBD, 0x70, 0x47, 0xFE, 0xB5, 0x04, 0x20, 0x04, 
+	0xF0, 0x46, 0xFF, 0x04, 0x46, 0x05, 0x20, 0x04, 0xF0, 0x42, 0xFF, 0x00, 0x02, 0x24, 0x18, 0x06, 
+	0x20, 0x04, 0xF0, 0x3D, 0xFF, 0x00, 0x04, 0x24, 0x18, 0x07, 0x20, 0x04, 0xF0, 0x38, 0xFF, 0x00, 
+	0x06, 0x25, 0x18, 0x08, 0x20, 
+	0x00, 0x00, 0xEB, 0x00, 0x80, 0x04, 0xF0, 0x33, 0xFF, 0x04, 0x46, 0x09, 0x20, 0x04, 0xF0, 0x2F, 
+	0xFF, 0x00, 0x02, 0xFF, 0x26, 0x20, 0x18, 0xEF, 0x36, 0xB0, 0x42, 0x00, 0xD8, 0x06, 0x46, 0x00, 
+	0x24, 0x20, 0x46, 0x0A, 0x30, 0x07, 0x46, 0x80, 0xB2, 0x04, 0xF0, 0x21, 0xFF, 0x69, 0x46, 0x08, 
+	0x55, 0xB8, 0xB2, 0x00, 0x21, 0x04, 0xF0, 0x17, 0xFF, 0x64, 0x1C, 0x08, 0x2C, 0xF0, 0xD3, 0x01, 
+	0x21, 0x5E, 0x4B, 0x00, 0x20, 0x6A, 0x46, 0x1C, 0x5C, 0x17, 0x5C, 0xBC, 0x42, 0x00, 0xD0, 0x00, 
+	0x21, 0x40, 0x1C, 0x08, 0x28, 0xF7, 0xD3, 0x01, 0x29, 0x06, 0xD1, 0x48, 0x07, 0x85, 0x42, 0x03, 
+	0xD3, 0x57, 0x49, 0xA8, 0x19, 0x88, 0x42, 0x01, 0xD9, 0x01, 0x20, 0xFE, 0xBD, 0x00, 0x24, 0x07, 
+	0xE0, 0x20, 0x46, 0x12, 0x30, 0x80, 0xB2, 0x04, 0xF0, 0xFA, 0xFE, 0x28, 0x70, 0x6D, 0x1C, 0x64, 
+	0x1C, 0xB4, 0x42, 0xF5, 0xD3, 
+	0x00, 0x00, 0xEC, 0x00, 0x80, 0x00, 0x20, 0xFE, 0xBD, 0xFE, 0xB5, 0x04, 0x20, 0x04, 0xF0, 0xEF, 
+	0xFE, 0x04, 0x46, 0x05, 0x20, 0x04, 0xF0, 0xEB, 0xFE, 0x00, 0x02, 0x24, 0x18, 0x06, 0x20, 0x04, 
+	0xF0, 0xE6, 0xFE, 0x00, 0x04, 0x24, 0x18, 0x07, 0x20, 0x04, 0xF0, 0xE1, 0xFE, 0x00, 0x06, 0x25, 
+	0x18, 0x08, 0x20, 0x04, 0xF0, 0xDC, 0xFE, 0x04, 0x46, 0x09, 0x20, 0x04, 0xF0, 0xD8, 0xFE, 0x00, 
+	0x02, 0xFF, 0x26, 0x20, 0x18, 0xFD, 0x36, 0xB0, 0x42, 0x00, 0xD8, 0x06, 0x46, 0x00, 0x24, 0x20, 
+	0x46, 0x0A, 0x30, 0x07, 0x46, 0x80, 0xB2, 0x04, 0xF0, 0xCA, 0xFE, 0x69, 0x46, 0x08, 0x55, 0xB8, 
+	0xB2, 0x00, 0x21, 0x04, 0xF0, 0xC0, 0xFE, 0x64, 0x1C, 0x08, 0x2C, 0xF0, 0xD3, 0x01, 0x21, 0x33, 
+	0x4B, 0x00, 0x20, 0x6A, 0x46, 0x1C, 0x5C, 0x17, 0x5C, 0xBC, 0x42, 0x00, 0xD0, 0x00, 0x21, 0x40, 
+	0x1C, 0x08, 0x28, 0xF7, 0xD3, 
+	0x00, 0x00, 0xED, 0x00, 0x80, 0x01, 0x29, 0x06, 0xD1, 0x48, 0x07, 0x85, 0x42, 0x03, 0xD3, 0x2C, 
+	0x49, 0xA8, 0x19, 0x88, 0x42, 0x01, 0xD9, 0x01, 0x20, 0xFE, 0xBD, 0x00, 0x24, 0x06, 0xE0, 0x29, 
+	0x78, 0x20, 0x1D, 0x6D, 0x1C, 0x80, 0xB2, 0x04, 0xF0, 0x9E, 0xFE, 0x64, 0x1C, 0xB4, 0x42, 0xF6, 
+	0xD3, 0x00, 0x20, 0xFE, 0xBD, 0xF8, 0xB5, 0x03, 0x20, 0x04, 0xF0, 0x99, 0xFE, 0x00, 0x26, 0x00, 
+	0x28, 0x05, 0xD0, 0x01, 0x28, 0x05, 0xD0, 0x02, 0x28, 0x24, 0xD1, 0x1E, 0x4C, 0x02, 0xE0, 0x14, 
+	0x4C, 0x00, 0xE0, 0x12, 0x4C, 0x20, 0x88, 0x67, 0x88, 0x21, 0x46, 0x04, 0xF0, 0xF3, 0xFF, 0x05, 
+	0x46, 0xE0, 0x19, 0x04, 0x88, 0xA5, 0x42, 0x00, 0xD0, 0x01, 0x26, 0x31, 0x46, 0x03, 0x20, 0x04, 
+	0xF0, 0x7A, 0xFE, 0x29, 0x0A, 0x04, 0x20, 0x04, 0xF0, 0x76, 0xFE, 0xE9, 0xB2, 0x05, 0x20, 0x04, 
+	0xF0, 0x72, 0xFE, 0x21, 0x0A, 
+	0x00, 0x00, 0xEE, 0x00, 0x80, 0x06, 0x20, 0x04, 0xF0, 0x6E, 0xFE, 0xE1, 0xB2, 0x07, 0x20, 0x04, 
+	0xF0, 0x6A, 0xFE, 0xF8, 0xBD, 0x01, 0x21, 0x03, 0x20, 0xF9, 0xE7, 0x00, 0x00, 0x00, 0xFF, 0x00, 
+	0x00, 0x00, 0xDC, 0x00, 0x00, 0x1A, 0x02, 0x00, 0x20, 0xBA, 0x01, 0x00, 0x20, 0x98, 0xDF, 0x00, 
+	0x00, 0xE4, 0x01, 0x00, 0x20, 0x2F, 0x02, 0x00, 0x20, 0x2E, 0x02, 0x00, 0x20, 0x08, 0xD7, 0x00, 
+	0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0xE2, 0x00, 0x00, 0x70, 0xB5, 0x3F, 0x48, 0x00, 0x78, 0x00, 
+	0x28, 0x01, 0xD1, 0x01, 0x21, 0x16, 0xE0, 0x03, 0x20, 0x04, 0xF0, 0x49, 0xFE, 0x04, 0x46, 0x3B, 
+	0x48, 0x06, 0x88, 0x3B, 0x48, 0x01, 0xF0, 0xBA, 0xFC, 0x00, 0x25, 0x00, 0x2C, 0x0E, 0xD0, 0x01, 
+	0x2C, 0x0E, 0xD0, 0x02, 0x2C, 0x0E, 0xD0, 0x03, 0x2C, 0x00, 0xD0, 0x01, 0x25, 0x30, 0x46, 0x01, 
+	0xF0, 0xAD, 0xFC, 0x29, 0x46, 
+	0x00, 0x00, 0xEF, 0x00, 0x80, 0x03, 0x20, 0x04, 0xF0, 0x2E, 0xFE, 0x70, 0xBD, 0x81, 0x20, 0x02, 
+	0xE0, 0x88, 0x20, 0x00, 0xE0, 0x82, 0x20, 0x03, 0xF0, 0x6B, 0xFC, 0xEF, 0xE7, 0xF8, 0xB5, 0x03, 
+	0x20, 0x04, 0xF0, 0x25, 0xFE, 0x06, 0x02, 0x04, 0x20, 0x04, 0xF0, 0x21, 0xFE, 0x06, 0x43, 0x05, 
+	0x20, 0x04, 0xF0, 0x1D, 0xFE, 0x05, 0x02, 0x06, 0x20, 0x04, 0xF0, 0x19, 0xFE, 0x05, 0x43, 0x07, 
+	0x20, 0x04, 0xF0, 0x15, 0xFE, 0x00, 0x27, 0x00, 0x90, 0x01, 0x28, 0x03, 0xD0, 0x02, 0x28, 0x12, 
+	0xD0, 0x03, 0x28, 0x26, 0xD1, 0x09, 0x2D, 0x00, 0xD9, 0x09, 0x25, 0x00, 0x24, 0x08, 0xE0, 0x20, 
+	0x46, 0x08, 0x30, 0x04, 0xF0, 0x04, 0xFE, 0x31, 0x19, 0x1A, 0x4A, 0x64, 0x1C, 0x50, 0x54, 0xE4, 
+	0xB2, 0xA5, 0x42, 0xF4, 0xD8, 0x16, 0xE0, 0x09, 0x2D, 0x00, 0xD9, 0x09, 0x25, 0x08, 0x20, 0x04, 
+	0xF0, 0xF6, 0xFD, 0x15, 0x49, 
+	0x00, 0x00, 0xF0, 0x00, 0x80, 0x00, 0x24, 0x08, 0x70, 0x08, 0xE0, 0x20, 0x46, 0x09, 0x30, 0x04, 
+	0xF0, 0xEE, 0xFD, 0x31, 0x19, 0x0F, 0x4A, 0x64, 0x1C, 0x50, 0x54, 0xE4, 0xB2, 0xA5, 0x42, 0xF4, 
+	0xD8, 0x00, 0xE0, 0x01, 0x27, 0x39, 0x46, 0x03, 0x20, 0x04, 0xF0, 0xDD, 0xFD, 0x04, 0x20, 0x00, 
+	0x99, 0x04, 0xF0, 0xD9, 0xFD, 0x29, 0x0A, 0x05, 0x20, 0x04, 0xF0, 0xD5, 0xFD, 0xE9, 0xB2, 0x06, 
+	0x20, 0x04, 0xF0, 0xD1, 0xFD, 0xF8, 0xBD, 0x00, 0x00, 0x1A, 0x02, 0x00, 0x20, 0x34, 0x02, 0x00, 
+	0x20, 0x10, 0x27, 0x00, 0x00, 0x2A, 0x10, 0x00, 0x20, 0xAF, 0x01, 0x00, 0x20, 0x70, 0xB5, 0x04, 
+	0xF0, 0x8B, 0xFD, 0x01, 0x20, 0x04, 0xF0, 0xB2, 0xFD, 0x04, 0xF0, 0x7B, 0xFD, 0x01, 0x24, 0x65, 
+	0x02, 0xA0, 0xB2, 0x00, 0x21, 0x04, 0xF0, 0xB7, 0xFD, 0x64, 0x1C, 0xAC, 0x42, 0xF8, 0xD3, 0x63, 
+	0x4D, 0x00, 0x24, 0x60, 0x00, 
+	0x00, 0x00, 0xF1, 0x00, 0x80, 0x41, 0x19, 0x49, 0x78, 0x28, 0x5C, 0x04, 0xF0, 0xAC, 0xFD, 0x64, 
+	0x1C, 0x32, 0x2C, 0xF6, 0xD3, 0xFF, 0x24, 0x01, 0x34, 0xA1, 0x78, 0x1C, 0x20, 0x04, 0xF0, 0xA3, 
+	0xFD, 0xE1, 0x78, 0x1D, 0x20, 0x04, 0xF0, 0x9F, 0xFD, 0x59, 0x48, 0x81, 0x88, 0x1E, 0x20, 0x04, 
+	0xF0, 0xA4, 0xFD, 0x57, 0x4C, 0x23, 0x20, 0x20, 0x34, 0x21, 0x8B, 0x04, 0xF0, 0x9E, 0xFD, 0xA1, 
+	0x7E, 0x25, 0x20, 0x04, 0xF0, 0x90, 0xFD, 0xE1, 0x7E, 0x26, 0x20, 0x04, 0xF0, 0x8C, 0xFD, 0x21, 
+	0x7F, 0x27, 0x20, 0x04, 0xF0, 0x88, 0xFD, 0x61, 0x7F, 0x28, 0x20, 0x04, 0xF0, 0x84, 0xFD, 0xA1, 
+	0x7F, 0x29, 0x20, 0x04, 0xF0, 0x80, 0xFD, 0xE1, 0x7F, 0x2A, 0x20, 0x04, 0xF0, 0x7C, 0xFD, 0x49, 
+	0x4C, 0x60, 0x7A, 0x22, 0x7A, 0x01, 0x02, 0x11, 0x43, 0x2D, 0x20, 0x04, 0xF0, 0x7E, 0xFD, 0x46, 
+	0x48, 0x01, 0x88, 0x32, 0x20, 
+	0x00, 0x00, 0xF2, 0x00, 0x80, 0x04, 0xF0, 0x79, 0xFD, 0x60, 0x7B, 0x22, 0x7B, 0x01, 0x02, 0x11, 
+	0x43, 0x36, 0x20, 0x04, 0xF0, 0x72, 0xFD, 0xE0, 0x7B, 0xA2, 0x7B, 0x01, 0x02, 0x11, 0x43, 0x38, 
+	0x20, 0x04, 0xF0, 0x6B, 0xFD, 0x3D, 0x4D, 0xA8, 0x7B, 0x3D, 0x4C, 0x01, 0x28, 0x06, 0xD1, 0xA0, 
+	0x69, 0xC1, 0xB2, 0x34, 0x20, 0x04, 0xF0, 0x57, 0xFD, 0xE0, 0x69, 0x05, 0xE0, 0xE0, 0x69, 0xC1, 
+	0xB2, 0x34, 0x20, 0x04, 0xF0, 0x50, 0xFD, 0xA0, 0x69, 0xC1, 0xB2, 0x35, 0x20, 0x04, 0xF0, 0x4B, 
+	0xFD, 0x69, 0x89, 0x3A, 0x20, 0x04, 0xF0, 0x51, 0xFD, 0xA9, 0x89, 0x3C, 0x20, 0x04, 0xF0, 0x4D, 
+	0xFD, 0x30, 0x48, 0x01, 0x78, 0x40, 0x20, 0x04, 0xF0, 0x3E, 0xFD, 0x00, 0xF0, 0x93, 0xF8, 0x2E, 
+	0x4D, 0x2E, 0x4E, 0x28, 0x78, 0xC1, 0x00, 0x40, 0x18, 0x31, 0x88, 0x40, 0x18, 0x08, 0x38, 0x81, 
+	0xB2, 0x43, 0x20, 0x04, 0xF0, 
+	0x00, 0x00, 0xF3, 0x00, 0x80, 0x3A, 0xFD, 0xA0, 0x6A, 0xC1, 0xB2, 0x45, 0x20, 0x04, 0xF0, 0x2B, 
+	0xFD, 0x30, 0x88, 0xC1, 0xB2, 0x46, 0x20, 0x04, 0xF0, 0x26, 0xFD, 0x1E, 0x48, 0x20, 0x30, 0x40, 
+	0x7D, 0xC1, 0x07, 0x23, 0x48, 0xC9, 0x0F, 0x00, 0x88, 0x42, 0x06, 0xD2, 0x0F, 0x53, 0x00, 0x0B, 
+	0x43, 0x01, 0x06, 0xC9, 0x0F, 0x8A, 0x00, 0x80, 0x06, 0xC0, 0x0F, 0xC1, 0x00, 0x1A, 0x43, 0x11, 
+	0x43, 0x47, 0x20, 0x04, 0xF0, 0x10, 0xFD, 0x29, 0x78, 0x48, 0x20, 0x04, 0xF0, 0x0C, 0xFD, 0x19, 
+	0x4D, 0x00, 0x24, 0x28, 0x19, 0x01, 0x79, 0x20, 0x46, 0x61, 0x30, 0x80, 0xB2, 0x04, 0xF0, 0x03, 
+	0xFD, 0x64, 0x1C, 0x20, 0x2C, 0xF5, 0xD3, 0x14, 0x4D, 0x00, 0x24, 0x28, 0x19, 0x01, 0x79, 0x20, 
+	0x46, 0x81, 0x30, 0x80, 0xB2, 0x04, 0xF0, 0xF7, 0xFC, 0x64, 0x1C, 0x40, 0x2C, 0xF5, 0xD3, 0x70, 
+	0xBD, 0x10, 0xB5, 0x01, 0xF0, 
+	0x00, 0x00, 0xF4, 0x00, 0x80, 0x9B, 0xFB, 0x10, 0xBD, 0x70, 0x47, 0x00, 0x00, 0x58, 0xD7, 0x00, 
+	0x00, 0x40, 0xF1, 0xFF, 0x0F, 0x00, 0xDC, 0x00, 0x00, 0x2C, 0x02, 0x00, 0x20, 0x8C, 0xDD, 0x00, 
+	0x00, 0x98, 0xDF, 0x00, 0x00, 0x92, 0x00, 0x00, 0x20, 0xD6, 0x02, 0x00, 0x20, 0xD6, 0x01, 0x00, 
+	0x20, 0xD8, 0x02, 0x00, 0x20, 0x00, 0xE2, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x70, 0xB5, 0x40, 
+	0x21, 0x02, 0x20, 0x04, 0xF0, 0xD0, 0xFC, 0x00, 0x21, 0x03, 0x20, 0x04, 0xF0, 0xCC, 0xFC, 0x00, 
+	0x21, 0x04, 0x20, 0x04, 0xF0, 0xC8, 0xFC, 0x00, 0x21, 0x05, 0x20, 0x04, 0xF0, 0xC4, 0xFC, 0x00, 
+	0x21, 0x06, 0x20, 0x04, 0xF0, 0xC0, 0xFC, 0x00, 0x21, 0x07, 0x20, 0x04, 0xF0, 0xBC, 0xFC, 0x00, 
+	0x21, 0x08, 0x20, 0x04, 0xF0, 0xB8, 0xFC, 0x00, 0x21, 0x09, 0x20, 0x04, 0xF0, 0xB4, 0xFC, 0x0B, 
+	0x24, 0x01, 0x25, 0x6D, 0x02, 
+	0x00, 0x00, 0xF5, 0x00, 0x80, 0xA0, 0xB2, 0x00, 0x21, 0x04, 0xF0, 0xAD, 0xFC, 0x64, 0x1C, 0xAC, 
+	0x42, 0xF8, 0xD3, 0x70, 0xBD, 0xFB, 0x48, 0x80, 0x6A, 0x00, 0x28, 0x00, 0xD0, 0x01, 0x20, 0xFA, 
+	0x4A, 0x0B, 0x30, 0xD0, 0x83, 0xF9, 0x48, 0x41, 0x7D, 0xC9, 0x07, 0x00, 0xD0, 0x02, 0x21, 0xD3, 
+	0x8B, 0xC9, 0x18, 0x11, 0x84, 0x41, 0x78, 0x03, 0x78, 0x08, 0x02, 0x18, 0x43, 0xC0, 0x07, 0x11, 
+	0x8C, 0xC0, 0x0F, 0x40, 0x18, 0x50, 0x84, 0x70, 0x47, 0x70, 0xB5, 0xEF, 0x4C, 0x00, 0x25, 0xA5, 
+	0x84, 0x25, 0x73, 0xFF, 0xF7, 0xDF, 0xFF, 0x04, 0xF0, 0x4F, 0xFC, 0x08, 0x20, 0x04, 0xF0, 0x76, 
+	0xFC, 0x04, 0xF0, 0x3F, 0xFC, 0x20, 0x21, 0x0A, 0x20, 0x04, 0xF0, 0x7D, 0xFC, 0xFF, 0xF7, 0xA6, 
+	0xFF, 0x01, 0xF0, 0xC4, 0xFB, 0xE6, 0x4B, 0x25, 0x75, 0x00, 0x20, 0x1F, 0x21, 0x1E, 0x46, 0xA5, 
+	0x74, 0x16, 0x3E, 0x0E, 0x22, 
+	0x00, 0x00, 0xF6, 0x00, 0x80, 0x42, 0x43, 0xD2, 0x18, 0xD1, 0x72, 0x42, 0x00, 0x40, 0x1C, 0xC0, 
+	0xB2, 0xB5, 0x52, 0x0B, 0x28, 0xF5, 0xD3, 0xDF, 0x48, 0x00, 0x78, 0x00, 0x28, 0x04, 0xD0, 0x03, 
+	0xF0, 0x33, 0xFA, 0x00, 0x20, 0x04, 0xF0, 0x29, 0xFB, 0xDB, 0x49, 0x20, 0x7C, 0x08, 0x70, 0xE5, 
+	0x71, 0x01, 0x20, 0x20, 0x70, 0xD9, 0x48, 0x65, 0x74, 0x05, 0x80, 0xD9, 0x48, 0x05, 0x80, 0x00, 
+	0xF0, 0x82, 0xFE, 0x02, 0x20, 0xA0, 0x73, 0x01, 0xF0, 0x5D, 0xFA, 0xE0, 0x62, 0xD5, 0x48, 0x40, 
+	0x68, 0xD5, 0x49, 0x08, 0x60, 0xA0, 0x8B, 0x01, 0xF0, 0xC9, 0xFA, 0x70, 0xBD, 0xD3, 0x49, 0x00, 
+	0x20, 0x08, 0x70, 0xB1, 0xE7, 0x70, 0xB5, 0x01, 0x25, 0x01, 0xF0, 0x4C, 0xFA, 0x06, 0x46, 0xD0, 
+	0x48, 0x04, 0x78, 0xC4, 0x48, 0x80, 0x6A, 0x00, 0x28, 0x06, 0xD0, 0x04, 0xF0, 0x96, 0xFD, 0x00, 
+	0x28, 0x00, 0xD0, 0x01, 0x20, 
+	0x00, 0x00, 0xF7, 0x00, 0x80, 0x00, 0x19, 0xC4, 0xB2, 0xCA, 0x4A, 0xBF, 0x49, 0x00, 0x2C, 0x02, 
+	0xD1, 0x10, 0x78, 0x40, 0x07, 0x00, 0xD4, 0xCE, 0x62, 0x48, 0x7B, 0x01, 0x28, 0x05, 0xD1, 0x48, 
+	0x7C, 0x04, 0x43, 0x21, 0xD1, 0x00, 0xF0, 0x4F, 0xFE, 0x1E, 0xE0, 0x02, 0x28, 0x0E, 0xD1, 0x00, 
+	0x2C, 0x11, 0xD1, 0x10, 0x78, 0x40, 0x07, 0x17, 0xD5, 0xC8, 0x6A, 0x0A, 0x8B, 0x30, 0x1A, 0x90, 
+	0x42, 0x12, 0xD9, 0x03, 0x20, 0x48, 0x73, 0x48, 0x8B, 0x88, 0x83, 0x0D, 0xE0, 0x03, 0x28, 0x09, 
+	0xD1, 0x48, 0x78, 0x04, 0x43, 0x03, 0xD0, 0x00, 0x25, 0x00, 0xF0, 0x3B, 0xFE, 0x04, 0xE0, 0x10, 
+	0x78, 0x40, 0x07, 0x01, 0xD4, 0x00, 0x25, 0xDD, 0xE7, 0x28, 0x46, 0x70, 0xBD, 0xF0, 0xB5, 0xA6, 
+	0x4A, 0x91, 0xB0, 0x91, 0x7A, 0x49, 0x43, 0x0A, 0x91, 0xD1, 0x7A, 0x49, 0x43, 0x09, 0x91, 0xA3, 
+	0x49, 0x20, 0x31, 0x10, 0x91, 
+	0x00, 0x00, 0xF8, 0x00, 0x80, 0x0A, 0x7E, 0x09, 0x7E, 0x4A, 0x43, 0x10, 0x99, 0x07, 0x92, 0xCA, 
+	0x7D, 0xC9, 0x7D, 0x4A, 0x43, 0xA8, 0x49, 0x06, 0x92, 0x09, 0x78, 0x88, 0x42, 0x00, 0xD9, 0x08, 
+	0x46, 0x00, 0x26, 0x31, 0x46, 0xFF, 0x22, 0x01, 0xAB, 0x5A, 0x54, 0x49, 0x1C, 0xC9, 0xB2, 0x0E, 
+	0x29, 0xFA, 0xD9, 0x00, 0x21, 0x9A, 0x4F, 0x13, 0xE0, 0x0E, 0x22, 0xA0, 0x4B, 0x4A, 0x43, 0xD2, 
+	0x18, 0xD2, 0x7A, 0x3C, 0x88, 0xD3, 0x06, 0xDB, 0x0E, 0x01, 0x22, 0x9A, 0x40, 0x14, 0x43, 0x9C, 
+	0x4D, 0x3C, 0x80, 0x2C, 0x88, 0x16, 0x43, 0x14, 0x43, 0x2C, 0x80, 0x01, 0xAC, 0xE1, 0x54, 0x49, 
+	0x1C, 0x81, 0x42, 0xE9, 0xD3, 0x8D, 0x48, 0x3A, 0x88, 0x01, 0x88, 0x11, 0x40, 0x00, 0x24, 0x01, 
+	0x80, 0x25, 0x46, 0xB6, 0xE0, 0x0E, 0x20, 0x86, 0x4A, 0x68, 0x43, 0x80, 0x18, 0x0F, 0x90, 0xC0, 
+	0x7A, 0xC2, 0x43, 0xD2, 0x06, 
+	0x00, 0x00, 0xF9, 0x00, 0x80, 0x7E, 0xD0, 0x41, 0x06, 0x89, 0x0F, 0x03, 0x29, 0x7B, 0xD0, 0xC0, 
+	0x06, 0xC0, 0x0E, 0x01, 0x27, 0x87, 0x40, 0x01, 0xA9, 0x0B, 0x90, 0x08, 0x5C, 0xBE, 0x43, 0xFF, 
+	0x28, 0x1A, 0xD1, 0xAC, 0x42, 0x07, 0xD0, 0x7A, 0x49, 0x0E, 0x20, 0x60, 0x43, 0x40, 0x18, 0x0E, 
+	0x22, 0x0F, 0x99, 0x05, 0xF0, 0x67, 0xFB, 0x0B, 0x99, 0x60, 0x20, 0x01, 0x43, 0x0E, 0x20, 0x74, 
+	0x4A, 0x60, 0x43, 0x80, 0x18, 0xC1, 0x72, 0x75, 0x49, 0x08, 0x88, 0xB8, 0x43, 0x08, 0x80, 0x7C, 
+	0x49, 0x08, 0x88, 0xB8, 0x43, 0x08, 0x80, 0x74, 0xE0, 0x0E, 0x21, 0x48, 0x43, 0x77, 0x49, 0x0F, 
+	0x9A, 0x41, 0x18, 0x0E, 0x91, 0x84, 0x46, 0x48, 0x88, 0x52, 0x88, 0x83, 0x1A, 0x0F, 0x9A, 0x88, 
+	0x88, 0x92, 0x88, 0x5B, 0x43, 0x80, 0x1A, 0x40, 0x43, 0x18, 0x18, 0x05, 0x90, 0x0F, 0x98, 0x8A, 
+	0x79, 0x80, 0x79, 0x63, 0x4B, 
+	0x00, 0x00, 0xFA, 0x00, 0x80, 0x80, 0x1A, 0x6A, 0x00, 0x16, 0x3B, 0x9A, 0x5A, 0x0A, 0x9B, 0x9A, 
+	0x42, 0x05, 0xD2, 0x10, 0x9A, 0x92, 0x7E, 0x82, 0x42, 0x01, 0xDA, 0x07, 0x98, 0x00, 0xE0, 0x09, 
+	0x98, 0x08, 0x90, 0x66, 0x48, 0x62, 0x46, 0x80, 0x5A, 0x10, 0x9A, 0x52, 0x7E, 0x90, 0x42, 0x0E, 
+	0xD2, 0x55, 0x48, 0x80, 0x8C, 0x07, 0x42, 0x0A, 0xD1, 0x06, 0x9A, 0x05, 0x98, 0x90, 0x42, 0x06, 
+	0xD2, 0x0E, 0x20, 0x53, 0x4A, 0x60, 0x43, 0x80, 0x18, 0x0E, 0x22, 0x05, 0xF0, 0x1B, 0xFB, 0x4E, 
+	0x49, 0x08, 0x98, 0x89, 0x8C, 0x0F, 0x42, 0x00, 0xD1, 0x0A, 0x98, 0x05, 0x99, 0x88, 0x42, 0x16, 
+	0xD8, 0x0E, 0x20, 0x4B, 0x49, 0x60, 0x43, 0x41, 0x18, 0x0D, 0x91, 0x0E, 0x22, 0x0E, 0x99, 0x0D, 
+	0x98, 0x05, 0xF0, 0x08, 0xFB, 0x0B, 0x98, 0x40, 0x21, 0x08, 0x43, 0x0D, 0x99, 0xC8, 0x72, 0x42, 
+	0x48, 0x81, 0x8C, 0x01, 0xE0, 
+	0x00, 0x00, 0xFB, 0x00, 0x80, 0x32, 0xE0, 0x1E, 0xE0, 0x0F, 0x43, 0x87, 0x84, 0x10, 0xE0, 0xAC, 
+	0x42, 0x07, 0xD0, 0x3F, 0x48, 0x0E, 0x21, 0x61, 0x43, 0x08, 0x18, 0x0E, 0x22, 0x0F, 0x99, 0x05, 
+	0xF0, 0xF1, 0xFA, 0x0E, 0x20, 0x21, 0x46, 0x41, 0x43, 0x39, 0x48, 0x0B, 0x9A, 0x08, 0x18, 0xC2, 
+	0x72, 0x44, 0x48, 0x05, 0x99, 0x81, 0x42, 0x00, 0xD8, 0x08, 0x46, 0x35, 0x4A, 0x61, 0x00, 0x16, 
+	0x3A, 0x50, 0x52, 0x64, 0x1C, 0x0C, 0xE0, 0xC0, 0x06, 0xC0, 0x0E, 0x01, 0x22, 0x33, 0x49, 0x82, 
+	0x40, 0x08, 0x88, 0x90, 0x43, 0x08, 0x80, 0x2E, 0x4A, 0x00, 0x20, 0x69, 0x00, 0x16, 0x3A, 0x50, 
+	0x52, 0x6D, 0x1C, 0x35, 0x49, 0x08, 0x78, 0x85, 0x42, 0x00, 0xD2, 0x43, 0xE7, 0x00, 0x25, 0x33, 
+	0xE0, 0xF0, 0x07, 0x2E, 0xD0, 0x01, 0xA8, 0x40, 0x5D, 0x0E, 0x21, 0x48, 0x43, 0x2F, 0x49, 0x01, 
+	0x23, 0x47, 0x18, 0xBA, 0x88, 
+	0x00, 0x00, 0xFC, 0x00, 0x80, 0x79, 0x88, 0x28, 0x46, 0xF9, 0xF7, 0x12, 0xFB, 0x00, 0x28, 0x20, 
+	0xD1, 0x10, 0x98, 0xC0, 0x7E, 0xC0, 0x07, 0x07, 0xD0, 0xBB, 0x79, 0xBA, 0x88, 0x79, 0x88, 0x28, 
+	0x46, 0xF9, 0xF7, 0x0D, 0xFC, 0x00, 0x28, 0x14, 0xD1, 0x0E, 0x20, 0x19, 0x49, 0x60, 0x43, 0x41, 
+	0x18, 0x0C, 0x91, 0x0E, 0x22, 0x39, 0x46, 0x0C, 0x98, 0x05, 0xF0, 0xA4, 0xFA, 0x20, 0x20, 0x0C, 
+	0x99, 0x28, 0x43, 0xC8, 0x72, 0x10, 0x48, 0x01, 0x22, 0x81, 0x8C, 0xAA, 0x40, 0x91, 0x43, 0x81, 
+	0x84, 0x64, 0x1C, 0x6D, 0x1C, 0xED, 0xB2, 0x76, 0x08, 0x00, 0x2E, 0x03, 0xD0, 0x16, 0x48, 0x00, 
+	0x78, 0x84, 0x42, 0xC5, 0xD3, 0x08, 0x48, 0x14, 0x49, 0xC4, 0x74, 0x09, 0x4B, 0x1F, 0x20, 0x0A, 
+	0x78, 0x04, 0xE0, 0x0E, 0x21, 0x61, 0x43, 0xC9, 0x18, 0xC8, 0x72, 0x64, 0x1C, 0x94, 0x42, 0xF8, 
+	0xD3, 0x11, 0xB0, 0xF0, 0xBD, 
+	0x00, 0x00, 0xFD, 0x00, 0x80, 0x98, 0xDF, 0x00, 0x00, 0xB4, 0x01, 0x00, 0x20, 0x20, 0xDC, 0x00, 
+	0x00, 0x64, 0x10, 0x00, 0x20, 0x1A, 0x02, 0x00, 0x20, 0x7F, 0x02, 0x00, 0x20, 0x84, 0x00, 0x00, 
+	0x20, 0x86, 0x00, 0x00, 0x20, 0x00, 0x04, 0x01, 0x40, 0x38, 0x02, 0x00, 0x20, 0x2E, 0x02, 0x00, 
+	0x20, 0xFF, 0x00, 0x00, 0x20, 0x30, 0x02, 0x00, 0x20, 0xD6, 0x02, 0x00, 0x20, 0x6A, 0x05, 0x00, 
+	0x20, 0x8E, 0x00, 0x00, 0x20, 0xFF, 0xFF, 0x00, 0x00, 0xF1, 0xB5, 0x82, 0xB0, 0x00, 0x26, 0xFF, 
+	0x48, 0x00, 0x78, 0x00, 0x28, 0x04, 0xD0, 0x00, 0x20, 0xFC, 0x49, 0x01, 0x24, 0x08, 0x70, 0x00, 
+	0xE0, 0x00, 0x24, 0xFB, 0x48, 0x07, 0x78, 0xFB, 0x48, 0x00, 0x78, 0x87, 0x42, 0x00, 0xD9, 0x07, 
+	0x46, 0xF9, 0x4D, 0xA8, 0x6A, 0x00, 0x28, 0x43, 0xD0, 0x04, 0xF0, 0xD7, 0xFB, 0xF7, 0x49, 0x8C, 
+	0x46, 0x09, 0x7C, 0x89, 0x07, 
+	0x00, 0x00, 0xFE, 0x00, 0x80, 0x89, 0x0F, 0x01, 0x29, 0x1F, 0xD1, 0xF1, 0x49, 0x09, 0x78, 0x00, 
+	0x29, 0x03, 0xD0, 0x00, 0x28, 0x03, 0xD0, 0x01, 0x22, 0x02, 0xE0, 0x00, 0x28, 0x02, 0xD1, 0x00, 
+	0x22, 0xEA, 0x4B, 0x1A, 0x71, 0xE9, 0x4A, 0x12, 0x79, 0x00, 0x2A, 0x00, 0xD0, 0x00, 0x20, 0xEC, 
+	0x4A, 0x00, 0x29, 0x04, 0xD0, 0x61, 0x46, 0x09, 0x7C, 0x89, 0x08, 0x11, 0x70, 0x05, 0xE0, 0x11, 
+	0x78, 0x00, 0x29, 0x02, 0xD0, 0x49, 0x1E, 0x11, 0x70, 0x00, 0x20, 0xAA, 0x6A, 0xE5, 0x49, 0x91, 
+	0x40, 0x88, 0x43, 0xF0, 0x21, 0x01, 0x40, 0x00, 0x90, 0x00, 0x07, 0x09, 0x01, 0x00, 0x0F, 0x08, 
+	0x18, 0x0C, 0x21, 0x01, 0x40, 0x03, 0x22, 0x10, 0x40, 0x89, 0x00, 0x08, 0x18, 0x22, 0x21, 0x01, 
+	0x40, 0x11, 0x22, 0x49, 0x00, 0x10, 0x40, 0x08, 0x18, 0xDB, 0x49, 0x09, 0x68, 0xC8, 0x72, 0x01, 
+	0xE0, 0x00, 0x20, 0x00, 0x90, 
+	0x00, 0x00, 0xFF, 0x00, 0x80, 0xD1, 0x49, 0x00, 0x98, 0xCA, 0x78, 0x82, 0x42, 0x00, 0xD0, 0x01, 
+	0x24, 0xCE, 0x49, 0xD6, 0x4A, 0xC8, 0x70, 0x10, 0x78, 0xD5, 0x49, 0x40, 0x06, 0x40, 0x0F, 0x02, 
+	0x28, 0x03, 0xD1, 0x0B, 0x88, 0x9B, 0x06, 0x00, 0xD4, 0x00, 0x27, 0x04, 0x28, 0x03, 0xD1, 0x08, 
+	0x88, 0x40, 0x06, 0x00, 0xD4, 0x00, 0x27, 0xF8, 0xB2, 0xFF, 0xF7, 0x18, 0xFE, 0xF9, 0xF7, 0xE5, 
+	0xFC, 0x00, 0x28, 0x02, 0xD0, 0xC1, 0x48, 0x01, 0x21, 0xC1, 0x74, 0xC0, 0x48, 0xC7, 0x7C, 0xF9, 
+	0xF7, 0xDF, 0xFC, 0x20, 0x22, 0x00, 0x28, 0x04, 0xD1, 0xC4, 0x49, 0x09, 0x78, 0x49, 0x00, 0x39, 
+	0x43, 0x08, 0xE0, 0x39, 0x46, 0x11, 0x43, 0xC3, 0x4A, 0x52, 0x7F, 0xD2, 0x06, 0x92, 0x0F, 0x03, 
+	0x2A, 0x00, 0xD1, 0x01, 0x24, 0xB5, 0x4A, 0x93, 0x78, 0x83, 0x42, 0x06, 0xD0, 0xBD, 0x4B, 0x5B, 
+	0x7F, 0xDB, 0x06, 0x9B, 0x0F, 
+	0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0xD0, 0x01, 0x24, 0x90, 0x70, 0xB0, 0x48, 0xC9, 0xB2, 0x40, 
+	0x8C, 0x00, 0xF0, 0x25, 0xFC, 0xAD, 0x48, 0x40, 0x8C, 0x40, 0x1C, 0x87, 0xB2, 0xAB, 0x48, 0xC0, 
+	0x7C, 0xC1, 0x00, 0x40, 0x18, 0xC1, 0x19, 0xB0, 0x48, 0x09, 0x39, 0x00, 0x68, 0x41, 0x72, 0x00, 
+	0x20, 0x01, 0x90, 0x31, 0xE0, 0x0E, 0x21, 0x48, 0x43, 0xAF, 0x49, 0x46, 0x18, 0x71, 0x88, 0x38, 
+	0x46, 0x00, 0xF0, 0x12, 0xFC, 0xB8, 0x1C, 0xB1, 0x88, 0x80, 0xB2, 0x00, 0xF0, 0x0D, 0xFC, 0x38, 
+	0x1D, 0xB1, 0x79, 0x80, 0xB2, 0x00, 0xF0, 0x03, 0xFC, 0xB8, 0x1D, 0xF1, 0x79, 0x80, 0xB2, 0x00, 
+	0xF0, 0xFE, 0xFB, 0xF8, 0x1D, 0x31, 0x7A, 0x80, 0xB2, 0x00, 0xF0, 0xF9, 0xFB, 0x38, 0x46, 0x08, 
+	0x30, 0x71, 0x7A, 0x80, 0xB2, 0x00, 0xF0, 0xF3, 0xFB, 0x9B, 0x49, 0x78, 0x1D, 0x09, 0x68, 0x80, 
+	0xB2, 0xF6, 0x7A, 0x08, 0x18, 
+	0x00, 0x01, 0x01, 0x00, 0x80, 0x06, 0x70, 0x60, 0x20, 0x06, 0x40, 0x00, 0xD0, 0x01, 0x24, 0x09, 
+	0x37, 0x01, 0x98, 0xBF, 0xB2, 0x40, 0x1C, 0x01, 0x90, 0x8C, 0x49, 0xC9, 0x7C, 0x88, 0x42, 0xC9, 
+	0xD3, 0x8B, 0x48, 0x8A, 0x49, 0x00, 0x78, 0x08, 0x75, 0xC8, 0x7C, 0x8A, 0x7C, 0x90, 0x42, 0x00, 
+	0xD0, 0x01, 0x24, 0x86, 0x49, 0x88, 0x74, 0xF9, 0xF7, 0x68, 0xFC, 0x00, 0x28, 0x62, 0xD0, 0x83, 
+	0x48, 0x00, 0x26, 0x40, 0x8C, 0x40, 0x1C, 0x87, 0xB2, 0xF9, 0xF7, 0x5F, 0xFC, 0x01, 0x28, 0x13, 
+	0xD1, 0x89, 0x48, 0x41, 0x88, 0x38, 0x46, 0x00, 0xF0, 0xC7, 0xFB, 0x88, 0x48, 0x80, 0x89, 0x41, 
+	0x08, 0xB8, 0x1C, 0x80, 0xB2, 0x00, 0xF0, 0xC0, 0xFB, 0x7F, 0x49, 0x38, 0x46, 0x08, 0x30, 0x09, 
+	0x68, 0x80, 0xB2, 0x08, 0x18, 0x00, 0x21, 0x12, 0xE0, 0x80, 0x48, 0x40, 0x89, 0x41, 0x08, 0x38, 
+	0x46, 0x00, 0xF0, 0xB2, 0xFB, 
+	0x00, 0x01, 0x02, 0x00, 0x80, 0x7C, 0x48, 0x81, 0x88, 0xB8, 0x1C, 0x80, 0xB2, 0x00, 0xF0, 0xAC, 
+	0xFB, 0x75, 0x49, 0x38, 0x46, 0x08, 0x30, 0x09, 0x68, 0x80, 0xB2, 0x08, 0x18, 0x5A, 0x21, 0x01, 
+	0x70, 0x38, 0x1D, 0x81, 0xB2, 0x70, 0x48, 0x02, 0x68, 0x51, 0x18, 0xFF, 0x22, 0x0A, 0x70, 0xB9, 
+	0x1D, 0x02, 0x68, 0x89, 0xB2, 0x51, 0x18, 0x5A, 0x22, 0x0A, 0x70, 0xF9, 0x1D, 0x00, 0x68, 0x89, 
+	0xB2, 0x40, 0x18, 0x1E, 0x21, 0x01, 0x70, 0xF9, 0xF7, 0x20, 0xFC, 0x01, 0x28, 0x6A, 0x48, 0x01, 
+	0xD1, 0x40, 0x88, 0x00, 0xE0, 0x80, 0x88, 0x5D, 0x49, 0x4A, 0x79, 0x00, 0x2A, 0x03, 0xD1, 0x01, 
+	0x22, 0x4A, 0x71, 0x20, 0x26, 0x06, 0xE0, 0xCA, 0x8A, 0x12, 0x1A, 0x12, 0xB2, 0x52, 0x1D, 0x0A, 
+	0x2A, 0x00, 0xD9, 0x40, 0x26, 0xC8, 0x82, 0x5C, 0x49, 0x78, 0x1D, 0x09, 0x68, 0x80, 0xB2, 0x08, 
+	0x18, 0x06, 0x70, 0x07, 0xE0, 
+	0x00, 0x01, 0x03, 0x00, 0x80, 0x51, 0x48, 0x41, 0x79, 0x00, 0x29, 0x03, 0xD0, 0x60, 0x21, 0x0E, 
+	0x43, 0x00, 0x21, 0x41, 0x71, 0x70, 0x06, 0x80, 0x0F, 0x00, 0xD0, 0x01, 0x24, 0x55, 0x4E, 0x20, 
+	0x36, 0x70, 0x7D, 0xC0, 0x07, 0x27, 0xD0, 0x56, 0x48, 0x01, 0x23, 0x01, 0x78, 0xCA, 0x08, 0x48, 
+	0x07, 0x40, 0x0F, 0x83, 0x40, 0xD8, 0xB2, 0x4F, 0x4B, 0x9A, 0x18, 0x20, 0x32, 0x92, 0x7D, 0x02, 
+	0x42, 0x0C, 0xD1, 0x42, 0x48, 0xC0, 0x8B, 0x00, 0xF0, 0x4A, 0xFB, 0x40, 0x48, 0x4D, 0x49, 0xC0, 
+	0x8B, 0x09, 0x78, 0x40, 0x1C, 0x80, 0xB2, 0x00, 0xF0, 0x42, 0xFB, 0x0C, 0xE0, 0x3B, 0x4A, 0x42, 
+	0x4B, 0xD0, 0x8B, 0x19, 0x68, 0x08, 0x18, 0x00, 0x21, 0x01, 0x70, 0xD0, 0x8B, 0x1A, 0x68, 0x40, 
+	0x1C, 0x80, 0xB2, 0x10, 0x18, 0x01, 0x70, 0x70, 0x78, 0x31, 0x78, 0x00, 0x02, 0x08, 0x43, 0xC0, 
+	0x07, 0x15, 0xD0, 0x00, 0xF0, 
+	0x00, 0x01, 0x04, 0x00, 0x80, 0xFF, 0xFE, 0x71, 0x78, 0x32, 0x78, 0x09, 0x02, 0x11, 0x43, 0x2F, 
+	0x4A, 0x49, 0x08, 0x93, 0x6A, 0x49, 0x08, 0x49, 0x00, 0xC3, 0x1A, 0x8B, 0x42, 0x03, 0xD9, 0x11, 
+	0x7B, 0x49, 0x1C, 0x11, 0x73, 0x90, 0x62, 0x11, 0x7B, 0x10, 0x8C, 0x00, 0xF0, 0x18, 0xFB, 0xA8, 
+	0x6A, 0x00, 0x28, 0x22, 0xD0, 0x27, 0x48, 0x01, 0x78, 0x24, 0x48, 0xC0, 0x7C, 0x08, 0x1A, 0xC1, 
+	0x00, 0x40, 0x18, 0xC0, 0x19, 0x00, 0x21, 0x80, 0xB2, 0x01, 0x22, 0x13, 0xE0, 0x00, 0x9B, 0x13, 
+	0x42, 0x26, 0xD0, 0x21, 0x4B, 0x40, 0x33, 0x1B, 0x6A, 0x01, 0x2B, 0x01, 0xD1, 0x2A, 0x4B, 0x00, 
+	0xE0, 0x2A, 0x4B, 0x5E, 0x5C, 0x20, 0x4B, 0x1B, 0x68, 0x1B, 0x18, 0x40, 0x1C, 0x49, 0x1C, 0x1E, 
+	0x70, 0x80, 0xB2, 0x52, 0x00, 0xAB, 0x6A, 0x8B, 0x42, 0xE8, 0xD8, 0x14, 0x48, 0x80, 0x79, 0x00, 
+	0x28, 0x78, 0xD0, 0xA9, 0x6A, 
+	0x00, 0x01, 0x05, 0x00, 0x80, 0x01, 0x24, 0x11, 0x48, 0x40, 0x8C, 0x09, 0x18, 0x11, 0x48, 0x00, 
+	0x78, 0xC2, 0x00, 0x80, 0x18, 0x40, 0x1C, 0x08, 0x18, 0x87, 0xB2, 0x00, 0x20, 0x01, 0x90, 0x04, 
+	0xE0, 0x11, 0x4B, 0x1B, 0x68, 0x1B, 0x18, 0x00, 0x26, 0xDF, 0xE7, 0x08, 0x49, 0x40, 0x00, 0x30, 
+	0x31, 0x08, 0x5A, 0x17, 0x49, 0x46, 0x05, 0x76, 0x0D, 0x8E, 0x42, 0x5B, 0xD0, 0x03, 0x21, 0x89, 
+	0x03, 0x08, 0x40, 0x44, 0xD0, 0x01, 0x21, 0x89, 0x03, 0x40, 0x1A, 0x23, 0xE0, 0xB4, 0x01, 0x00, 
+	0x20, 0xFF, 0x00, 0x00, 0x20, 0xD6, 0x02, 0x00, 0x20, 0x98, 0xDF, 0x00, 0x00, 0xD8, 0xDC, 0x00, 
+	0x00, 0x4E, 0x03, 0x00, 0x20, 0xFF, 0xFF, 0x00, 0x00, 0xC4, 0x02, 0x00, 0x20, 0x7E, 0x02, 0x00, 
+	0x20, 0xD8, 0x02, 0x00, 0x20, 0x00, 0xDC, 0x00, 0x00, 0x64, 0x10, 0x00, 0x20, 0x8C, 0xDD, 0x00, 
+	0x00, 0x7D, 0x02, 0x00, 0x20, 
+	0x00, 0x01, 0x06, 0x00, 0x80, 0xF1, 0x02, 0x00, 0x20, 0x78, 0x01, 0x00, 0x20, 0x74, 0x01, 0x00, 
+	0x20, 0xFF, 0x07, 0x00, 0x00, 0x2F, 0xD0, 0x40, 0x1A, 0x5C, 0xD1, 0x28, 0x6A, 0xB0, 0x42, 0x59, 
+	0xD9, 0xFF, 0x49, 0x70, 0x00, 0x09, 0x5A, 0x38, 0x46, 0x00, 0xF0, 0x9E, 0xFA, 0xFD, 0x48, 0x80, 
+	0x57, 0x81, 0xB2, 0x38, 0x46, 0x32, 0x30, 0x80, 0xB2, 0x00, 0xF0, 0x96, 0xFA, 0xFA, 0x48, 0x80, 
+	0x57, 0x81, 0xB2, 0x38, 0x46, 0x64, 0x30, 0x80, 0xB2, 0x00, 0xF0, 0x8E, 0xFA, 0x42, 0xE0, 0x68, 
+	0x6A, 0xB0, 0x42, 0x3F, 0xD9, 0xF5, 0x48, 0x80, 0x57, 0x81, 0xB2, 0x38, 0x46, 0x00, 0xF0, 0x84, 
+	0xFA, 0xF3, 0x48, 0x80, 0x57, 0x81, 0xB2, 0x38, 0x46, 0x32, 0x30, 0x80, 0xB2, 0x00, 0xF0, 0x7C, 
+	0xFA, 0xF0, 0x48, 0xE4, 0xE7, 0x36, 0xE0, 0x30, 0x46, 0x03, 0x21, 0x49, 0x02, 0x08, 0x40, 0x36, 
+	0x07, 0xA9, 0x6A, 0x36, 0x0F, 
+	0x00, 0x01, 0x07, 0x00, 0x80, 0xB1, 0x42, 0x25, 0xD9, 0x00, 0x28, 0x13, 0xD0, 0xFF, 0x38, 0xFF, 
+	0x38, 0x02, 0x38, 0x1F, 0xD1, 0xE8, 0x49, 0x70, 0x00, 0x09, 0x5A, 0x38, 0x46, 0x00, 0xF0, 0x64, 
+	0xFA, 0xE6, 0x48, 0x80, 0x57, 0x81, 0xB2, 0x38, 0x46, 0x32, 0x30, 0x80, 0xB2, 0x00, 0xF0, 0x5C, 
+	0xFA, 0xE3, 0x48, 0xC4, 0xE7, 0xE3, 0x49, 0x70, 0x00, 0x09, 0x5A, 0x38, 0x46, 0x00, 0xF0, 0x54, 
+	0xFA, 0xE1, 0x48, 0x80, 0x57, 0x81, 0xB2, 0x38, 0x46, 0x32, 0x30, 0x80, 0xB2, 0x00, 0xF0, 0x4C, 
+	0xFA, 0xDE, 0x48, 0xB4, 0xE7, 0x01, 0x98, 0xBF, 0x1C, 0x40, 0x1C, 0xBF, 0xB2, 0x01, 0x90, 0x19, 
+	0x28, 0x00, 0xD2, 0x62, 0xE7, 0x02, 0x99, 0x00, 0x20, 0xC9, 0x06, 0x00, 0xD5, 0x04, 0x20, 0x02, 
+	0x99, 0x89, 0x06, 0x00, 0xD5, 0x08, 0x20, 0x02, 0x99, 0x49, 0x06, 0x00, 0xD5, 0x0C, 0x20, 0x02, 
+	0x99, 0x09, 0x06, 0x00, 0xD5, 
+	0x00, 0x01, 0x08, 0x00, 0x80, 0x10, 0x20, 0x02, 0x99, 0xC9, 0x05, 0x01, 0xD5, 0x1C, 0x20, 0x01, 
+	0xE0, 0x1C, 0x28, 0x05, 0xD1, 0xCE, 0x49, 0xCA, 0x79, 0x00, 0x2A, 0x08, 0xD1, 0x01, 0x22, 0x04, 
+	0xE0, 0xCB, 0x49, 0xCA, 0x79, 0x01, 0x2A, 0x02, 0xD1, 0x00, 0x22, 0xCA, 0x71, 0x01, 0x24, 0xC8, 
+	0x49, 0xE3, 0x23, 0xCA, 0x7B, 0x1A, 0x40, 0x02, 0x43, 0xCA, 0x73, 0x00, 0x2C, 0x02, 0xD0, 0xC8, 
+	0x7B, 0x40, 0x30, 0xC8, 0x73, 0xC8, 0x7B, 0xDC, 0x21, 0x08, 0x40, 0xC2, 0x49, 0x09, 0x68, 0x88, 
+	0x72, 0x20, 0x46, 0xFE, 0xBD, 0x10, 0xB5, 0xBE, 0x49, 0x70, 0x22, 0x08, 0x7C, 0x03, 0x46, 0x13, 
+	0x40, 0x8F, 0x22, 0x20, 0x2B, 0x01, 0xD9, 0x10, 0x40, 0x08, 0x74, 0x08, 0x7C, 0x03, 0x06, 0x08, 
+	0xD5, 0xB9, 0x4B, 0x1B, 0x88, 0x1B, 0x06, 0x5B, 0x0F, 0x03, 0xD1, 0x40, 0x06, 0x40, 0x0E, 0x10, 
+	0x40, 0x08, 0x74, 0x0A, 0x7A, 
+	0x00, 0x01, 0x09, 0x00, 0x80, 0xFA, 0x20, 0xFA, 0x2A, 0x00, 0xD9, 0x08, 0x72, 0x4A, 0x7A, 0xFA, 
+	0x2A, 0x00, 0xD9, 0x48, 0x72, 0x4A, 0x8B, 0x08, 0x7A, 0x82, 0x42, 0x00, 0xD2, 0x48, 0x83, 0x4A, 
+	0x8B, 0x48, 0x7A, 0x82, 0x42, 0x00, 0xD2, 0x48, 0x83, 0x4A, 0x8B, 0x7D, 0x20, 0xC0, 0x00, 0x82, 
+	0x42, 0x00, 0xD9, 0x48, 0x83, 0x0A, 0x8B, 0xA9, 0x48, 0x82, 0x42, 0x00, 0xD9, 0x08, 0x83, 0x00, 
+	0xF0, 0x79, 0xFF, 0x10, 0xBD, 0x70, 0xB5, 0x03, 0x20, 0x03, 0xF0, 0x91, 0xFF, 0x05, 0x46, 0x04, 
+	0x20, 0x03, 0xF0, 0x8D, 0xFF, 0x02, 0x46, 0x01, 0x24, 0xA1, 0x48, 0x00, 0x21, 0xCB, 0x00, 0xC3, 
+	0x5C, 0xAB, 0x42, 0x23, 0xD1, 0xC9, 0x00, 0x08, 0x18, 0x45, 0x68, 0x40, 0x78, 0x00, 0x24, 0x90, 
+	0x42, 0x1A, 0xD1, 0x01, 0x2A, 0x0E, 0xD0, 0x02, 0x2A, 0x11, 0xD0, 0x04, 0x2A, 0x14, 0xD1, 0x07, 
+	0x20, 0x03, 0xF0, 0x86, 0xFF, 
+	0x00, 0x01, 0x0A, 0x00, 0x80, 0x06, 0x46, 0x05, 0x20, 0x03, 0xF0, 0x82, 0xFF, 0x00, 0x04, 0x30, 
+	0x18, 0x28, 0x60, 0x0F, 0xE0, 0x05, 0x20, 0x03, 0xF0, 0x6A, 0xFF, 0x28, 0x70, 0x0A, 0xE0, 0x05, 
+	0x20, 0x03, 0xF0, 0x76, 0xFF, 0x28, 0x80, 0x05, 0xE0, 0x01, 0x24, 0x03, 0xE0, 0x49, 0x1C, 0xC9, 
+	0xB2, 0x0B, 0x29, 0xD3, 0xD9, 0xFF, 0xF7, 0x8E, 0xFF, 0x00, 0x2C, 0x04, 0xD0, 0x00, 0x21, 0x04, 
+	0x20, 0x03, 0xF0, 0x51, 0xFF, 0x70, 0xBD, 0x87, 0x48, 0x87, 0x49, 0x00, 0x68, 0x09, 0x78, 0x00, 
+	0x22, 0x40, 0x18, 0x86, 0x49, 0x20, 0x38, 0x40, 0x7F, 0x8A, 0x5E, 0x85, 0x49, 0x80, 0x18, 0x48, 
+	0x60, 0x7B, 0x4A, 0x51, 0x7B, 0x50, 0x7A, 0x01, 0x29, 0x01, 0xD1, 0x10, 0x7A, 0x02, 0xE0, 0x03, 
+	0x29, 0x00, 0xD1, 0x50, 0x8B, 0x7F, 0x49, 0x09, 0x68, 0x88, 0x42, 0xE3, 0xD0, 0x80, 0xB2, 0x00, 
+	0xF0, 0xB5, 0xFD, 0x70, 0xBD, 
+	0x00, 0x01, 0x0B, 0x00, 0x80, 0x70, 0xB5, 0x02, 0x20, 0x03, 0xF0, 0x31, 0xFF, 0x04, 0x46, 0x40, 
+	0x06, 0x67, 0xD4, 0x01, 0xE0, 0x00, 0xF0, 0xFE, 0xFD, 0x03, 0xF0, 0x43, 0xFF, 0x00, 0x28, 0xF9, 
+	0xD1, 0xA1, 0x06, 0x89, 0x0E, 0x05, 0x29, 0x19, 0xD0, 0x08, 0xDC, 0x00, 0x29, 0x49, 0xD0, 0x02, 
+	0x29, 0x11, 0xD0, 0x03, 0x29, 0x43, 0xD1, 0xFF, 0xF7, 0x85, 0xFF, 0x42, 0xE0, 0x06, 0x29, 0x13, 
+	0xD0, 0x25, 0x29, 0x1F, 0xD0, 0x26, 0x29, 0x3A, 0xD1, 0xFD, 0xF7, 0x39, 0xF8, 0x01, 0x46, 0x03, 
+	0x20, 0x03, 0xF0, 0x09, 0xFF, 0x35, 0xE0, 0x00, 0xF0, 0x4E, 0xF9, 0x32, 0xE0, 0x66, 0x49, 0x67, 
+	0x48, 0x04, 0xF0, 0x70, 0xF8, 0x05, 0x46, 0x04, 0xE0, 0x63, 0x48, 0x41, 0x7A, 0x00, 0x7A, 0x0D, 
+	0x02, 0x05, 0x43, 0x00, 0x21, 0x03, 0x20, 0x03, 0xF0, 0xF6, 0xFE, 0x29, 0x46, 0x04, 0x20, 0x03, 
+	0xF0, 0xFC, 0xFE, 0x1E, 0xE0, 
+	0x00, 0x01, 0x0C, 0x00, 0x80, 0xFA, 0xF7, 0x2E, 0xFD, 0x01, 0x46, 0x03, 0x20, 0x03, 0xF0, 0xF5, 
+	0xFE, 0xFA, 0xF7, 0x2B, 0xFD, 0x01, 0x46, 0x05, 0x20, 0x03, 0xF0, 0xE5, 0xFE, 0xFA, 0xF7, 0x29, 
+	0xFD, 0x01, 0x46, 0x06, 0x20, 0x03, 0xF0, 0xDF, 0xFE, 0xFA, 0xF7, 0x27, 0xFD, 0x01, 0x46, 0x07, 
+	0x20, 0x03, 0xF0, 0xD9, 0xFE, 0xFA, 0xF7, 0x25, 0xFD, 0x01, 0x46, 0x08, 0x20, 0xC8, 0xE7, 0xA4, 
+	0x09, 0xA4, 0x01, 0x4F, 0x48, 0x80, 0x22, 0x01, 0x78, 0x51, 0x40, 0x01, 0x70, 0xC8, 0xB2, 0xC1, 
+	0x09, 0xC9, 0x01, 0x21, 0x43, 0x40, 0x20, 0x01, 0x43, 0x02, 0x20, 0x03, 0xF0, 0xC4, 0xFE, 0x01, 
+	0x20, 0x70, 0xBD, 0x00, 0x20, 0x70, 0xBD, 0x70, 0xB5, 0x46, 0x4D, 0x47, 0x4C, 0x28, 0x78, 0x80, 
+	0x07, 0x1B, 0xD5, 0x20, 0x78, 0x00, 0x28, 0x01, 0xD0, 0x02, 0xF0, 0xFD, 0xFD, 0x20, 0x21, 0x0A, 
+	0x20, 0x03, 0xF0, 0xB1, 0xFE, 
+	0x00, 0x01, 0x0D, 0x00, 0x80, 0xFF, 0xF7, 0xDA, 0xF9, 0x00, 0xF0, 0x9C, 0xFD, 0x28, 0x78, 0xFD, 
+	0x21, 0x08, 0x40, 0x28, 0x70, 0xC1, 0xB2, 0x00, 0x20, 0x03, 0xF0, 0xA5, 0xFE, 0x20, 0x78, 0x00, 
+	0x28, 0x01, 0xD0, 0x02, 0xF0, 0x8D, 0xFD, 0xFF, 0xF7, 0x0F, 0xFA, 0x38, 0x4D, 0x28, 0x78, 0xC0, 
+	0x07, 0x01, 0xD0, 0x03, 0xF0, 0x83, 0xFE, 0x28, 0x78, 0x00, 0x28, 0x03, 0xD1, 0x00, 0xF0, 0x7E, 
+	0xF9, 0x03, 0xF0, 0xCE, 0xFD, 0x20, 0x78, 0x22, 0x4E, 0x00, 0x28, 0x04, 0xD0, 0x30, 0x78, 0x00, 
+	0x28, 0x01, 0xD1, 0x00, 0xF0, 0x04, 0xF9, 0xFF, 0xF7, 0x55, 0xFF, 0x00, 0x28, 0x01, 0xD0, 0x01, 
+	0x20, 0x70, 0x74, 0x28, 0x78, 0x00, 0x07, 0x01, 0xD5, 0x03, 0xF0, 0x68, 0xFE, 0x70, 0x7C, 0x00, 
+	0x28, 0x04, 0xD0, 0x28, 0x78, 0x00, 0x28, 0x01, 0xD1, 0x00, 0xF0, 0x28, 0xF9, 0x03, 0xF0, 0xB4, 
+	0xFE, 0x23, 0x49, 0x08, 0x69, 
+	0x00, 0x01, 0x0E, 0x00, 0x80, 0x04, 0x22, 0x90, 0x43, 0x08, 0x61, 0x22, 0x48, 0x81, 0x68, 0x89, 
+	0x07, 0xFC, 0xD5, 0x20, 0x78, 0x00, 0x28, 0x67, 0xD0, 0x72, 0xB6, 0x00, 0xF0, 0x73, 0xFC, 0x3B, 
+	0xE0, 0x64, 0x08, 0x00, 0x20, 0x1C, 0x0E, 0x00, 0x20, 0xAC, 0x0B, 0x00, 0x20, 0x24, 0x06, 0x00, 
+	0x20, 0xDC, 0x0B, 0x00, 0x20, 0x6C, 0x09, 0x00, 0x20, 0x8C, 0x01, 0x00, 0x20, 0x7C, 0x01, 0x00, 
+	0x20, 0x74, 0x01, 0x00, 0x20, 0x94, 0x01, 0x00, 0x20, 0x80, 0x01, 0x00, 0x20, 0x78, 0x01, 0x00, 
+	0x20, 0xB4, 0x01, 0x00, 0x20, 0xC4, 0x02, 0x00, 0x20, 0xD8, 0x02, 0x00, 0x20, 0x60, 0xEA, 0x00, 
+	0x00, 0xBC, 0xD7, 0x00, 0x00, 0x54, 0x02, 0x00, 0x20, 0x50, 0x02, 0x00, 0x20, 0x52, 0x02, 0x00, 
+	0x20, 0x00, 0xFF, 0x01, 0x40, 0x4C, 0x02, 0x00, 0x20, 0x00, 0xDC, 0x00, 0x00, 0xFC, 0x05, 0x00, 
+	0x00, 0x2E, 0x02, 0x00, 0x20, 
+	0x00, 0x01, 0x0F, 0x00, 0x80, 0x30, 0x02, 0x00, 0x20, 0x1A, 0x02, 0x00, 0x20, 0x2F, 0x02, 0x00, 
+	0x20, 0x00, 0xED, 0x00, 0xE0, 0x00, 0x00, 0x12, 0x40, 0x02, 0xF0, 0x74, 0xFD, 0x84, 0xB2, 0xE0, 
+	0x07, 0x05, 0xD1, 0x62, 0xB6, 0x63, 0x48, 0x80, 0x6A, 0x00, 0x28, 0x0F, 0xD0, 0x06, 0xE0, 0xBF, 
+	0xF3, 0x50, 0x8F, 0xBF, 0xF3, 0x60, 0x8F, 0x30, 0xBF, 0x62, 0xB6, 0xAD, 0xE7, 0x72, 0xB6, 0x00, 
+	0xF0, 0x21, 0xFC, 0x04, 0xF0, 0x4F, 0xFC, 0xC0, 0x07, 0x35, 0xD1, 0x62, 0xB6, 0x5A, 0x48, 0x00, 
+	0x79, 0xC0, 0x07, 0x01, 0xD0, 0x03, 0xF0, 0xB9, 0xFC, 0x28, 0x78, 0x80, 0x07, 0x01, 0xD5, 0x03, 
+	0xF0, 0xED, 0xFD, 0x20, 0x46, 0xFF, 0xF7, 0x70, 0xFB, 0x70, 0x74, 0x03, 0xF0, 0x5F, 0xFE, 0x53, 
+	0x48, 0x80, 0x78, 0x7D, 0x21, 0xC9, 0x00, 0x48, 0x43, 0x00, 0xF0, 0x73, 0xFD, 0x00, 0x28, 0x04, 
+	0xD0, 0x28, 0x78, 0x40, 0x07, 
+	0x00, 0x01, 0x10, 0x00, 0x80, 0x01, 0xD5, 0x03, 0xF0, 0xD9, 0xFD, 0xFF, 0xF7, 0xAB, 0xF9, 0x04, 
+	0x46, 0x28, 0x78, 0xC0, 0x09, 0x01, 0xD0, 0x03, 0xF0, 0xD1, 0xFD, 0x00, 0x2C, 0x01, 0xD0, 0x00, 
+	0xF0, 0x8D, 0xFC, 0xB0, 0x7B, 0x71, 0x7B, 0x88, 0x42, 0x04, 0xD0, 0xB0, 0x8B, 0x00, 0xF0, 0x5E, 
+	0xFC, 0x70, 0x7B, 0xB0, 0x73, 0x70, 0xBD, 0xBF, 0xF3, 0x50, 0x8F, 0xBF, 0xF3, 0x60, 0x8F, 0x30, 
+	0xBF, 0x62, 0xB6, 0xBB, 0xE7, 0x70, 0x47, 0x3E, 0x48, 0x02, 0x21, 0x41, 0x73, 0x41, 0x7A, 0x81, 
+	0x83, 0x70, 0x47, 0x3B, 0x48, 0x01, 0x21, 0x41, 0x73, 0x01, 0x7A, 0x81, 0x83, 0x70, 0x47, 0x39, 
+	0x4A, 0x12, 0x68, 0x10, 0x18, 0x01, 0x70, 0x70, 0x47, 0x36, 0x4A, 0x12, 0x68, 0x10, 0x18, 0x0A, 
+	0x0A, 0x02, 0x70, 0x41, 0x70, 0x70, 0x47, 0x70, 0xB5, 0x03, 0x20, 0x03, 0xF0, 0xB8, 0xFD, 0x01, 
+	0x23, 0x31, 0x4A, 0x00, 0x21, 
+	0x00, 0x01, 0x11, 0x00, 0x80, 0xCC, 0x00, 0x14, 0x5D, 0x84, 0x42, 0x1D, 0xD1, 0xC8, 0x00, 0x80, 
+	0x18, 0x45, 0x78, 0x44, 0x68, 0x29, 0x46, 0x04, 0x20, 0x03, 0xF0, 0xA5, 0xFD, 0x01, 0x2D, 0x0D, 
+	0xD0, 0x02, 0x2D, 0x0E, 0xD0, 0x04, 0x2D, 0x15, 0xD1, 0x24, 0x68, 0x05, 0x20, 0x21, 0x0C, 0x03, 
+	0xF0, 0xA4, 0xFD, 0xA1, 0xB2, 0x07, 0x20, 0x03, 0xF0, 0xA0, 0xFD, 0x70, 0xBD, 0x21, 0x78, 0x05, 
+	0x20, 0x0A, 0xE0, 0x21, 0x88, 0x05, 0x20, 0xF6, 0xE7, 0x49, 0x1C, 0xC9, 0xB2, 0x0B, 0x29, 0xD9, 
+	0xD9, 0x00, 0x2B, 0xF2, 0xD0, 0x00, 0x21, 0x04, 0x20, 0x03, 0xF0, 0x85, 0xFD, 0x70, 0xBD, 0x70, 
+	0xB5, 0x18, 0x48, 0x62, 0x26, 0x05, 0x68, 0x16, 0x48, 0x81, 0x79, 0x00, 0x29, 0x00, 0xD0, 0xF8, 
+	0x26, 0xC1, 0x7B, 0x20, 0x20, 0x01, 0x43, 0x0A, 0x20, 0x03, 0xF0, 0x75, 0xFD, 0x01, 0xE0, 0x00, 
+	0xF0, 0x49, 0xFC, 0x03, 0xF0, 
+	0x00, 0x01, 0x12, 0x00, 0x80, 0x8E, 0xFD, 0x00, 0x28, 0xF9, 0xD1, 0x0B, 0x24, 0x0B, 0x36, 0x05, 
+	0xE0, 0x29, 0x5D, 0x20, 0x46, 0x03, 0xF0, 0x67, 0xFD, 0x64, 0x1C, 0xA4, 0xB2, 0xB4, 0x42, 0xF7, 
+	0xD3, 0x69, 0x7A, 0x09, 0x20, 0x03, 0xF0, 0x5F, 0xFD, 0xA9, 0x7A, 0x0A, 0x20, 0x03, 0xF0, 0x5B, 
+	0xFD, 0x70, 0xBD, 0x00, 0x00, 0x98, 0xDF, 0x00, 0x00, 0x30, 0xE0, 0x00, 0x00, 0x20, 0xDC, 0x00, 
+	0x00, 0xB4, 0x01, 0x00, 0x20, 0xC4, 0x02, 0x00, 0x20, 0xBC, 0xD7, 0x00, 0x00, 0x70, 0xB5, 0x03, 
+	0xF0, 0x87, 0xFC, 0x00, 0x20, 0x03, 0xF0, 0x4B, 0xFD, 0xC0, 0x09, 0xC0, 0x01, 0xFF, 0x4E, 0x70, 
+	0x70, 0x00, 0x20, 0x30, 0x70, 0xFE, 0x4C, 0x60, 0x7F, 0x80, 0x07, 0x80, 0x0F, 0x01, 0x28, 0x1A, 
+	0xD0, 0x02, 0x28, 0x1D, 0xD1, 0x03, 0xF0, 0x19, 0xFD, 0x30, 0x24, 0x0B, 0x25, 0x00, 0xF0, 0x0A, 
+	0xFC, 0x00, 0x20, 0x03, 0xF0, 
+	0x00, 0x01, 0x13, 0x00, 0x80, 0x34, 0xFD, 0x01, 0x46, 0xF2, 0x78, 0x21, 0x40, 0x91, 0x42, 0x07, 
+	0xD1, 0x01, 0x46, 0x29, 0x42, 0x04, 0xD1, 0xC0, 0x09, 0x71, 0x78, 0xC0, 0x01, 0x88, 0x42, 0xED, 
+	0xD0, 0x03, 0xF0, 0x5E, 0xFC, 0x70, 0xBD, 0x01, 0x20, 0x30, 0x70, 0x00, 0xF0, 0x2B, 0xFB, 0xF0, 
+	0x60, 0x03, 0xF0, 0xFB, 0xFC, 0x20, 0x7F, 0x00, 0xF0, 0xA3, 0xFC, 0xF1, 0xE7, 0xF8, 0xB5, 0xE7, 
+	0x4C, 0x20, 0x78, 0x00, 0x28, 0x20, 0xD0, 0xE6, 0x48, 0xC1, 0x7F, 0x80, 0x7F, 0x0D, 0x02, 0x05, 
+	0x43, 0x30, 0x26, 0x0B, 0x27, 0x00, 0xF0, 0xDE, 0xFB, 0x00, 0x20, 0x03, 0xF0, 0x08, 0xFD, 0x01, 
+	0x46, 0xE2, 0x78, 0x31, 0x40, 0x91, 0x42, 0x0D, 0xD1, 0x01, 0x46, 0x39, 0x42, 0x0A, 0xD1, 0xC0, 
+	0x09, 0x61, 0x78, 0xC0, 0x01, 0x88, 0x42, 0x05, 0xD1, 0x00, 0xF0, 0x04, 0xFB, 0xE1, 0x68, 0x40, 
+	0x1A, 0xA8, 0x42, 0xE7, 0xD9, 
+	0x00, 0x01, 0x14, 0x00, 0x80, 0x00, 0x20, 0x20, 0x70, 0xF8, 0xBD, 0x10, 0xB5, 0x03, 0xF0, 0xCB, 
+	0xFB, 0xD4, 0x4B, 0x00, 0x21, 0xD3, 0x4A, 0x5C, 0x33, 0x8C, 0x00, 0x04, 0x59, 0x10, 0xC2, 0x49, 
+	0x1C, 0x89, 0xB2, 0x9A, 0x42, 0xF8, 0xD3, 0xCF, 0x4A, 0xCE, 0x4B, 0x64, 0x32, 0xE8, 0x33, 0x8C, 
+	0x00, 0x04, 0x59, 0x10, 0xC2, 0x49, 0x1C, 0x89, 0xB2, 0x9A, 0x42, 0xF8, 0xD9, 0x8A, 0x00, 0xCA, 
+	0x4B, 0x82, 0x58, 0xDA, 0x60, 0x49, 0x1C, 0x89, 0xB2, 0x8A, 0x00, 0x83, 0x58, 0xC7, 0x4A, 0x53, 
+	0x60, 0x49, 0x1C, 0x09, 0x04, 0x89, 0x0B, 0x40, 0x58, 0xD0, 0x60, 0x10, 0xBD, 0xF8, 0xB5, 0x82, 
+	0x00, 0x0C, 0x46, 0xC3, 0x48, 0x00, 0x27, 0x1C, 0x21, 0x15, 0x18, 0x29, 0x60, 0xC0, 0x4A, 0xA0, 
+	0x00, 0x86, 0x18, 0xFF, 0x2C, 0x00, 0xD0, 0x31, 0x60, 0x0A, 0x20, 0xFD, 0xF7, 0x7B, 0xFF, 0x10, 
+	0x20, 0x28, 0x60, 0x23, 0x20, 
+	0x00, 0x01, 0x15, 0x00, 0x80, 0xFD, 0xF7, 0x76, 0xFF, 0xB6, 0x48, 0x01, 0x68, 0x02, 0x03, 0x11, 
+	0x43, 0x01, 0x60, 0xC1, 0x68, 0x09, 0x06, 0xFC, 0xD5, 0x80, 0x21, 0xC1, 0x60, 0x00, 0x20, 0x28, 
+	0x60, 0xFF, 0x2C, 0x00, 0xD0, 0x30, 0x60, 0xAF, 0x48, 0xC0, 0x30, 0xC0, 0x68, 0xAB, 0x49, 0xFF, 
+	0x38, 0x06, 0x22, 0xFF, 0x38, 0x8A, 0x5E, 0x02, 0x38, 0x50, 0x43, 0x00, 0x28, 0x00, 0xDA, 0x40, 
+	0x42, 0x09, 0x69, 0x88, 0x42, 0x00, 0xD9, 0x01, 0x27, 0x38, 0x46, 0xF8, 0xBD, 0x70, 0xB5, 0x03, 
+	0xF0, 0x6A, 0xFB, 0xA2, 0x4C, 0xA7, 0x4A, 0x21, 0x89, 0x00, 0x20, 0x43, 0x00, 0xD3, 0x5A, 0x8B, 
+	0x42, 0x03, 0xD8, 0x40, 0x1C, 0xC0, 0xB2, 0x20, 0x28, 0xF7, 0xD3, 0x20, 0x28, 0x01, 0xD1, 0x1F, 
+	0x20, 0x01, 0xE0, 0x00, 0x28, 0x0C, 0xD0, 0x43, 0x00, 0x9D, 0x18, 0x20, 0x3D, 0xED, 0x8B, 0xD3, 
+	0x5A, 0x4D, 0x1B, 0x59, 0x1A, 
+	0x00, 0x01, 0x16, 0x00, 0x80, 0xAD, 0xB2, 0x89, 0xB2, 0x8D, 0x42, 0x01, 0xD2, 0x40, 0x1E, 0xC0, 
+	0xB2, 0x41, 0x00, 0x51, 0x5A, 0x21, 0x81, 0x53, 0x21, 0x93, 0x4A, 0x49, 0x06, 0xD1, 0x60, 0x91, 
+	0x4D, 0x95, 0x49, 0x69, 0x61, 0x8F, 0x4A, 0x95, 0x49, 0x40, 0x32, 0x51, 0x62, 0x01, 0x04, 0x94, 
+	0x48, 0x01, 0x43, 0x8C, 0x48, 0x80, 0x30, 0x81, 0x63, 0x92, 0x49, 0xC1, 0x60, 0xC1, 0x6B, 0x89, 
+	0x09, 0x89, 0x01, 0xC1, 0x63, 0x87, 0x4E, 0x90, 0x48, 0xC0, 0x36, 0x70, 0x60, 0x03, 0x20, 0xB0, 
+	0x60, 0x8E, 0x48, 0x30, 0x61, 0x8E, 0x48, 0x30, 0x62, 0x00, 0x21, 0xB1, 0x61, 0x29, 0x61, 0x8D, 
+	0x48, 0x28, 0x60, 0x28, 0x68, 0x40, 0x00, 0xFC, 0xD4, 0x01, 0x22, 0x80, 0x48, 0xD2, 0x07, 0x42, 
+	0x60, 0x89, 0x4A, 0xC2, 0x60, 0x7E, 0x4B, 0x00, 0x20, 0x82, 0x00, 0xD2, 0x18, 0x11, 0x60, 0x40, 
+	0x1C, 0xC0, 0xB2, 0x41, 0x28, 
+	0x00, 0x01, 0x17, 0x00, 0x80, 0xF8, 0xD3, 0x28, 0x69, 0x80, 0x21, 0x88, 0x43, 0x28, 0x61, 0x70, 
+	0x68, 0x78, 0x49, 0x00, 0x07, 0xC0, 0x0E, 0x40, 0x31, 0x08, 0x5E, 0x21, 0x89, 0x04, 0xF0, 0x6D, 
+	0xFC, 0xE0, 0x80, 0x70, 0xBD, 0x70, 0xB5, 0x03, 0xF0, 0xFE, 0xFA, 0x6E, 0x4B, 0x00, 0x21, 0x6D, 
+	0x4A, 0x5C, 0x33, 0x10, 0xCA, 0x8D, 0x00, 0x49, 0x1C, 0x44, 0x51, 0x89, 0xB2, 0x9A, 0x42, 0xF8, 
+	0xD3, 0x68, 0x4A, 0x68, 0x4B, 0x64, 0x32, 0xE8, 0x33, 0x10, 0xCA, 0x8D, 0x00, 0x49, 0x1C, 0x44, 
+	0x51, 0x89, 0xB2, 0x9A, 0x42, 0xF8, 0xD9, 0x64, 0x4A, 0xD2, 0x68, 0x8B, 0x00, 0xC2, 0x50, 0x63, 
+	0x4A, 0x49, 0x1C, 0x53, 0x68, 0x89, 0xB2, 0x8C, 0x00, 0x03, 0x51, 0x49, 0x1C, 0xD2, 0x68, 0x09, 
+	0x04, 0x89, 0x0B, 0x42, 0x50, 0x70, 0xBD, 0xF0, 0xB5, 0x85, 0xB0, 0x00, 0x20, 0x02, 0x90, 0x58, 
+	0x48, 0x20, 0x30, 0x41, 0x7A, 
+	0x00, 0x01, 0x18, 0x00, 0x80, 0x03, 0x7A, 0x0A, 0x02, 0x54, 0x49, 0x1A, 0x43, 0x0A, 0x81, 0xC2, 
+	0x79, 0x83, 0x79, 0x10, 0x02, 0x18, 0x43, 0x08, 0x61, 0xFF, 0xF7, 0xC4, 0xFF, 0xFF, 0xF7, 0x56, 
+	0xFF, 0x00, 0x20, 0x01, 0x46, 0x5D, 0x4A, 0x11, 0x54, 0x40, 0x1C, 0xC0, 0xB2, 0x09, 0x28, 0xF9, 
+	0xD3, 0x00, 0x25, 0x68, 0x1C, 0xC4, 0xB2, 0x03, 0x90, 0x28, 0xE0, 0xEE, 0x08, 0xE7, 0x08, 0x6A, 
+	0x07, 0x01, 0x21, 0x52, 0x0F, 0x08, 0x46, 0x90, 0x40, 0xC2, 0xB2, 0x60, 0x07, 0x40, 0x0F, 0x81, 
+	0x40, 0xC8, 0xB2, 0x53, 0x49, 0x01, 0x92, 0x00, 0x90, 0x88, 0x5D, 0x10, 0x42, 0x14, 0xD0, 0xC8, 
+	0x5D, 0x00, 0x99, 0x08, 0x42, 0x10, 0xD0, 0x21, 0x46, 0x28, 0x46, 0xFF, 0xF7, 0xF7, 0xFE, 0x00, 
+	0x28, 0x0A, 0xD0, 0x4A, 0x48, 0x01, 0x9A, 0x81, 0x5D, 0x11, 0x43, 0x81, 0x55, 0xC1, 0x5D, 0x00, 
+	0x9A, 0x11, 0x43, 0xC1, 0x55, 
+	0x00, 0x01, 0x19, 0x00, 0x80, 0x01, 0x20, 0x02, 0x90, 0x64, 0x1C, 0xE4, 0xB2, 0x41, 0x2C, 0xD4, 
+	0xD3, 0x00, 0xF0, 0x80, 0xFA, 0x03, 0x98, 0xC5, 0xB2, 0x41, 0x2D, 0xCA, 0xD3, 0xFF, 0xF7, 0xB5, 
+	0xFE, 0x02, 0x98, 0x05, 0xB0, 0xF0, 0xBD, 0xF8, 0xB5, 0x2D, 0x48, 0x00, 0x26, 0x20, 0x30, 0xC1, 
+	0x7A, 0x83, 0x7A, 0x0A, 0x02, 0x29, 0x49, 0x1A, 0x43, 0x0A, 0x81, 0xC2, 0x79, 0x83, 0x79, 0x10, 
+	0x02, 0x18, 0x43, 0x08, 0x61, 0xFF, 0xF7, 0x6E, 0xFF, 0xFF, 0xF7, 0x00, 0xFF, 0x00, 0x20, 0x33, 
+	0x49, 0x02, 0x46, 0x0A, 0x54, 0x40, 0x1C, 0xC0, 0xB2, 0x09, 0x28, 0xFA, 0xD3, 0x00, 0x24, 0xE5, 
+	0x08, 0x61, 0x07, 0x49, 0x0F, 0x01, 0x20, 0x88, 0x40, 0xC7, 0xB2, 0x2D, 0x48, 0x40, 0x5D, 0x38, 
+	0x42, 0x0A, 0xD0, 0xFF, 0x21, 0x20, 0x46, 0xFF, 0xF7, 0xB1, 0xFE, 0x00, 0x28, 0x04, 0xD0, 0x27, 
+	0x48, 0x41, 0x5D, 0x39, 0x43, 
+	0x00, 0x01, 0x1A, 0x00, 0x80, 0x41, 0x55, 0x01, 0x26, 0x64, 0x1C, 0xE4, 0xB2, 0x41, 0x2C, 0xE6, 
+	0xD3, 0xFF, 0xF7, 0x7B, 0xFE, 0x30, 0x46, 0xF8, 0xBD, 0xF8, 0xB5, 0x09, 0x21, 0x20, 0x48, 0x04, 
+	0xF0, 0x8E, 0xFB, 0x00, 0x20, 0x1E, 0x4C, 0x1F, 0x4F, 0x1F, 0x4E, 0x0A, 0xE0, 0x3A, 0x5C, 0xD1, 
+	0x08, 0x55, 0x07, 0x6D, 0x0F, 0x63, 0x5C, 0x01, 0x22, 0xAA, 0x40, 0x13, 0x43, 0x40, 0x1C, 0x63, 
+	0x54, 0xC0, 0xB2, 0x31, 0x6A, 0x81, 0x42, 0xF1, 0xD8, 0x15, 0x48, 0xFF, 0xF7, 0xAC, 0xFF, 0x13, 
+	0x4D, 0x06, 0x46, 0x00, 0x21, 0x68, 0x5C, 0x6A, 0x18, 0x50, 0x72, 0x27, 0xE0, 0x18, 0x02, 0x00, 
+	0x20, 0x00, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x11, 0x40, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x03, 
+	0x40, 0x00, 0x04, 0x11, 0x40, 0x1C, 0xD8, 0x00, 0x00, 0xFF, 0x01, 0x3A, 0xC0, 0x3A, 0xA0, 0x00, 
+	0xF0, 0x40, 0x03, 0x00, 0x40, 
+	0x00, 0x01, 0x1B, 0x00, 0x80, 0x01, 0x00, 0x03, 0xC0, 0x72, 0x40, 0x00, 0x80, 0x10, 0x0D, 0xCA, 
+	0x98, 0x00, 0x02, 0x00, 0x80, 0x00, 0x03, 0x00, 0xC0, 0x51, 0x08, 0x00, 0x00, 0x33, 0x10, 0x00, 
+	0x20, 0x2A, 0x10, 0x00, 0x20, 0xC0, 0xE0, 0x00, 0x00, 0x98, 0xDF, 0x00, 0x00, 0x49, 0x1C, 0xC9, 
+	0xB2, 0x09, 0x29, 0xCF, 0xD3, 0x7B, 0x48, 0xFF, 0xF7, 0x1E, 0xFF, 0x30, 0x43, 0x01, 0x46, 0x00, 
+	0x20, 0x2A, 0x5C, 0x2B, 0x18, 0x9A, 0x74, 0x22, 0x5C, 0x2A, 0x54, 0x40, 0x1C, 0xC0, 0xB2, 0x09, 
+	0x28, 0xF6, 0xD3, 0x08, 0x46, 0xF8, 0xBD, 0x10, 0xB5, 0x73, 0x48, 0x74, 0x4A, 0x01, 0x88, 0x10, 
+	0x46, 0x8B, 0x05, 0x80, 0x30, 0x00, 0x2B, 0x12, 0xDB, 0xC3, 0x1D, 0xF9, 0x33, 0x1B, 0x69, 0x00, 
+	0x2B, 0x25, 0xD1, 0x53, 0x68, 0x9B, 0x06, 0x22, 0xD1, 0x93, 0x6D, 0x9B, 0x06, 0x1F, 0xD1, 0xC3, 
+	0x6A, 0x9B, 0x06, 0x1C, 0xD1, 
+	0x00, 0x01, 0x1C, 0x00, 0x80, 0x13, 0x46, 0xC0, 0x33, 0xDB, 0x6B, 0x9B, 0x06, 0x17, 0xD1, 0xC9, 
+	0x05, 0x17, 0xD4, 0xD3, 0x68, 0xF0, 0x21, 0x0B, 0x40, 0x40, 0x2B, 0x10, 0xD8, 0x12, 0x6E, 0x0A, 
+	0x40, 0x40, 0x2A, 0x0C, 0xD8, 0x40, 0x6B, 0x08, 0x40, 0x40, 0x28, 0x08, 0xD8, 0x60, 0x48, 0x40, 
+	0x68, 0x08, 0x40, 0x40, 0x28, 0x03, 0xD8, 0xF8, 0xF7, 0x75, 0xFB, 0x04, 0x28, 0x01, 0xD9, 0x01, 
+	0x20, 0x10, 0xBD, 0x00, 0x20, 0x10, 0xBD, 0x10, 0xB5, 0x5A, 0x49, 0x5B, 0x48, 0x03, 0xF0, 0x3A, 
+	0xFC, 0x5A, 0x49, 0x09, 0x88, 0x88, 0x42, 0x01, 0xD0, 0x01, 0x20, 0x10, 0xBD, 0x00, 0x20, 0x10, 
+	0xBD, 0x10, 0xB5, 0x57, 0x48, 0x00, 0x24, 0x01, 0x68, 0xEF, 0x22, 0x11, 0x40, 0x01, 0x29, 0x00, 
+	0xD1, 0x01, 0x24, 0xFF, 0x21, 0x01, 0x60, 0x03, 0xF0, 0x43, 0xFC, 0xFF, 0xF7, 0xE4, 0xFF, 0x00, 
+	0x28, 0x11, 0xD1, 0x02, 0x20, 
+	0x00, 0x01, 0x1D, 0x00, 0x80, 0x04, 0x43, 0xFF, 0xF7, 0xA6, 0xFF, 0x00, 0x28, 0x0B, 0xD1, 0x01, 
+	0x20, 0x40, 0x02, 0x04, 0x43, 0xFF, 0xF7, 0x40, 0xFF, 0x00, 0x28, 0x04, 0xD1, 0xFF, 0x21, 0x20, 
+	0x46, 0x05, 0x31, 0x08, 0x43, 0x10, 0xBD, 0x20, 0x46, 0x10, 0xBD, 0xF0, 0xB5, 0x16, 0x26, 0x0F, 
+	0x46, 0x05, 0x46, 0x77, 0x43, 0x00, 0x20, 0xCE, 0x00, 0x89, 0x19, 0x04, 0x46, 0x49, 0x19, 0x41, 
+	0x4D, 0xED, 0x5B, 0x01, 0x26, 0xA6, 0x40, 0x35, 0x42, 0x07, 0xD0, 0x0D, 0x19, 0x2D, 0x7B, 0xAA, 
+	0x42, 0x01, 0xD3, 0xAB, 0x42, 0x01, 0xD9, 0x40, 0x1C, 0x80, 0xB2, 0x64, 0x1C, 0x08, 0x2C, 0xEE, 
+	0xD3, 0xF0, 0xBD, 0xF8, 0xB5, 0x0D, 0x46, 0x00, 0x26, 0x03, 0xF0, 0x5D, 0xF9, 0x09, 0x21, 0xC9, 
+	0x01, 0x00, 0x90, 0x04, 0xF0, 0xA4, 0xFA, 0x35, 0x49, 0x33, 0x48, 0x08, 0x60, 0x00, 0x2D, 0x01, 
+	0xD0, 0x01, 0x23, 0x00, 0xE0, 
+	0x00, 0x01, 0x1E, 0x00, 0x80, 0x00, 0x23, 0x2B, 0x4C, 0x20, 0x34, 0xE1, 0x7C, 0xA0, 0x7C, 0x00, 
+	0x9A, 0x01, 0xF0, 0x6D, 0xFE, 0x00, 0x2D, 0x01, 0xD0, 0x01, 0x23, 0x00, 0xE0, 0x00, 0x23, 0x61, 
+	0x7C, 0x20, 0x7C, 0x00, 0x9A, 0x01, 0xF0, 0x35, 0xFD, 0x21, 0x4F, 0x00, 0x25, 0x40, 0x37, 0x08, 
+	0xE0, 0x23, 0x7B, 0x62, 0x7B, 0x29, 0x46, 0x00, 0x98, 0xFF, 0xF7, 0xB7, 0xFF, 0x80, 0x19, 0x86, 
+	0xB2, 0x6D, 0x1C, 0xF8, 0x6A, 0xA8, 0x42, 0xF3, 0xD8, 0xF8, 0x6A, 0xB9, 0x6B, 0x40, 0x18, 0xF9, 
+	0x6B, 0xA3, 0x7B, 0x41, 0x18, 0xE2, 0x7B, 0x00, 0x98, 0xFF, 0xF7, 0xA7, 0xFF, 0x80, 0x19, 0xC0, 
+	0xB2, 0xF8, 0xBD, 0x70, 0xB5, 0x04, 0x46, 0x13, 0x49, 0x13, 0x48, 0x03, 0xF0, 0xAB, 0xFB, 0x01, 
+	0x46, 0x05, 0x20, 0x03, 0xF0, 0x42, 0xFA, 0x11, 0x48, 0x01, 0x88, 0x07, 0x20, 0x03, 0xF0, 0x3D, 
+	0xFA, 0x13, 0x4D, 0xA8, 0x78, 
+	0x00, 0x01, 0x1F, 0x00, 0x80, 0x00, 0x28, 0x09, 0xD0, 0x20, 0x46, 0xFF, 0xF7, 0x8C, 0xFE, 0x20, 
+	0x46, 0xFF, 0xF7, 0x31, 0xFE, 0x00, 0x21, 0x20, 0x46, 0xFF, 0xF7, 0xA3, 0xFF, 0xA8, 0x88, 0xC0, 
+	0xB2, 0x70, 0xBD, 0x00, 0x00, 0x2A, 0x10, 0x00, 0x20, 0xD8, 0x02, 0x00, 0x20, 0x58, 0xDE, 0x00, 
+	0x00, 0x58, 0xDF, 0x00, 0x00, 0x00, 0xDC, 0x00, 0x00, 0xFC, 0x05, 0x00, 0x00, 0xFC, 0xE1, 0x00, 
+	0x00, 0x00, 0x00, 0x02, 0x40, 0x2C, 0xE1, 0x00, 0x00, 0x80, 0xE2, 0x00, 0x00, 0x78, 0x02, 0x00, 
+	0x20, 0x18, 0x02, 0x00, 0x20, 0x70, 0xB5, 0xDF, 0x4C, 0x25, 0x69, 0x61, 0x69, 0x40, 0x1B, 0x00, 
+	0x02, 0x0E, 0x46, 0x04, 0xF0, 0x40, 0xFA, 0xFF, 0x28, 0x09, 0xD9, 0x01, 0x0A, 0x0A, 0x46, 0x72, 
+	0x43, 0x52, 0x19, 0x22, 0x61, 0xE2, 0x68, 0x09, 0x02, 0x52, 0x18, 0x40, 0x1A, 0xE2, 0x60, 0xE1, 
+	0x68, 0x08, 0x18, 0x70, 0xBD, 
+	0x00, 0x01, 0x20, 0x00, 0x80, 0xD4, 0x48, 0x40, 0x68, 0xE4, 0xE7, 0xF8, 0xB5, 0xD3, 0x4C, 0x21, 
+	0x88, 0xD0, 0x4D, 0x28, 0x88, 0x06, 0x46, 0x04, 0xF0, 0x26, 0xFA, 0x21, 0x88, 0x41, 0x43, 0xB1, 
+	0x42, 0x00, 0xD2, 0x40, 0x1C, 0x03, 0x28, 0x00, 0xD2, 0x03, 0x20, 0x21, 0x88, 0x6A, 0x69, 0x51, 
+	0x43, 0x09, 0x0A, 0xCB, 0x4A, 0x49, 0x1E, 0x91, 0x42, 0x00, 0xD9, 0x11, 0x46, 0x06, 0x04, 0x0E, 
+	0x43, 0xFD, 0xF7, 0x90, 0xFC, 0xC7, 0x4B, 0x05, 0x46, 0x19, 0x68, 0x03, 0x27, 0xBF, 0x03, 0x01, 
+	0x20, 0xB9, 0x43, 0x80, 0x03, 0x08, 0x43, 0x18, 0x60, 0x01, 0x20, 0xC0, 0x03, 0x08, 0x43, 0x18, 
+	0x60, 0xBD, 0x4C, 0x20, 0x69, 0xFF, 0x22, 0x02, 0x32, 0x90, 0x43, 0xBF, 0x4A, 0x10, 0x43, 0x20, 
+	0x61, 0xBE, 0x48, 0x22, 0x69, 0x02, 0x42, 0xFC, 0xD1, 0xBD, 0x4A, 0x04, 0x20, 0x10, 0x60, 0xA6, 
+	0x60, 0xBC, 0x48, 0xE0, 0x60, 
+	0x00, 0x01, 0x21, 0x00, 0x80, 0xBC, 0x48, 0x20, 0x61, 0x46, 0x00, 0x20, 0x69, 0x32, 0x46, 0x82, 
+	0x43, 0xFB, 0xD1, 0x39, 0x43, 0x19, 0x60, 0xB9, 0x49, 0x02, 0x20, 0xFD, 0xF7, 0x7D, 0xFC, 0x03, 
+	0x21, 0x02, 0x20, 0xFD, 0xF7, 0x83, 0xFC, 0x02, 0x20, 0xFD, 0xF7, 0x90, 0xFC, 0xB4, 0x49, 0x20, 
+	0x69, 0x08, 0x42, 0xFC, 0xD1, 0xB3, 0x49, 0x00, 0x20, 0x08, 0x70, 0xE8, 0xB2, 0xFD, 0xF7, 0x56, 
+	0xFC, 0xF8, 0xBD, 0xA6, 0x49, 0x00, 0x28, 0x01, 0xD1, 0x01, 0x20, 0x05, 0xE0, 0x4B, 0x22, 0x12, 
+	0x01, 0x90, 0x42, 0x01, 0xD9, 0x0A, 0x80, 0x00, 0xE0, 0x08, 0x80, 0x96, 0xE7, 0xA0, 0x49, 0x9D, 
+	0x4A, 0x88, 0x42, 0x01, 0xD9, 0x11, 0x80, 0x00, 0xE0, 0x10, 0x80, 0x8E, 0xE7, 0x10, 0xB5, 0x04, 
+	0x46, 0x40, 0x00, 0x20, 0x18, 0xC8, 0x28, 0x00, 0xD2, 0xC8, 0x20, 0xFF, 0xF7, 0xEF, 0xFF, 0x95, 
+	0x49, 0x20, 0x46, 0x8C, 0x61, 
+	0x00, 0x01, 0x22, 0x00, 0x80, 0xFF, 0xF7, 0xDD, 0xFF, 0x10, 0xBD, 0x1C, 0xB5, 0x68, 0x46, 0x03, 
+	0xF0, 0x54, 0xFB, 0x00, 0x28, 0xFA, 0xD1, 0x6B, 0x46, 0x19, 0x79, 0x01, 0x20, 0x80, 0x07, 0x21, 
+	0x29, 0x02, 0xD3, 0x99, 0x49, 0x49, 0x8A, 0xC1, 0x60, 0x01, 0x68, 0x49, 0x00, 0x49, 0x08, 0x01, 
+	0x60, 0x96, 0x48, 0x01, 0x69, 0x04, 0x22, 0x11, 0x43, 0x01, 0x61, 0x1C, 0xBD, 0x10, 0xB5, 0x03, 
+	0xF0, 0x7E, 0xF9, 0x03, 0xF0, 0x28, 0xF8, 0xFF, 0xF7, 0xE0, 0xFF, 0x72, 0xB6, 0x90, 0x48, 0x81, 
+	0x68, 0x89, 0x07, 0xFC, 0xD5, 0x62, 0xB6, 0x72, 0xB6, 0x8A, 0x4C, 0x20, 0x78, 0x00, 0x28, 0x0B, 
+	0xD1, 0x06, 0xE0, 0xBF, 0xF3, 0x50, 0x8F, 0xBF, 0xF3, 0x60, 0x8F, 0x30, 0xBF, 0x62, 0xB6, 0x72, 
+	0xB6, 0x20, 0x78, 0x00, 0x28, 0xF5, 0xD0, 0x01, 0xE0, 0xFF, 0xF7, 0x47, 0xFF, 0x00, 0x20, 0x20, 
+	0x70, 0x75, 0x48, 0x40, 0x68, 
+	0x00, 0x01, 0x23, 0x00, 0x80, 0x73, 0x49, 0x48, 0x60, 0x62, 0xB6, 0x03, 0xF0, 0x08, 0xF8, 0x03, 
+	0xF0, 0x74, 0xF9, 0x10, 0xBD, 0x70, 0xB5, 0xFD, 0xF7, 0xE5, 0xFB, 0x72, 0x4A, 0x11, 0x68, 0x03, 
+	0x23, 0x9B, 0x03, 0x01, 0x24, 0x99, 0x43, 0xA4, 0x03, 0x0C, 0x43, 0x14, 0x60, 0x01, 0x24, 0xE4, 
+	0x03, 0x0C, 0x43, 0x14, 0x60, 0x68, 0x4D, 0x77, 0x4C, 0x2C, 0x61, 0x19, 0x43, 0x11, 0x60, 0xFD, 
+	0xF7, 0xD5, 0xFB, 0x70, 0xBD, 0x10, 0xB5, 0x72, 0xB6, 0x7D, 0x20, 0xC0, 0x00, 0xFF, 0xF7, 0x79, 
+	0xFF, 0x00, 0xF0, 0xB1, 0xF8, 0x63, 0x4C, 0x06, 0x20, 0x60, 0x60, 0x00, 0xF0, 0xA5, 0xF8, 0x6E, 
+	0x48, 0x40, 0x7F, 0x40, 0x06, 0x80, 0x0F, 0x01, 0xD1, 0x02, 0x20, 0x04, 0xE0, 0x01, 0x28, 0x01, 
+	0xD1, 0x03, 0x20, 0x00, 0xE0, 0x01, 0x20, 0x03, 0xF0, 0x5A, 0xF9, 0xFF, 0xF7, 0x86, 0xFF, 0xBF, 
+	0xF3, 0x50, 0x8F, 0xBF, 0xF3, 
+	0x00, 0x01, 0x24, 0x00, 0x80, 0x60, 0x8F, 0x30, 0xBF, 0x03, 0xF0, 0x94, 0xF9, 0x00, 0xF0, 0x93, 
+	0xF8, 0x62, 0x48, 0x60, 0x60, 0x00, 0xF0, 0x88, 0xF8, 0xFF, 0xF7, 0xBC, 0xFF, 0x62, 0xB6, 0x10, 
+	0xBD, 0x70, 0xB5, 0xFD, 0xF7, 0x9F, 0xFB, 0x4F, 0x4C, 0x21, 0x68, 0x03, 0x25, 0xAD, 0x03, 0x01, 
+	0x22, 0xA9, 0x43, 0x92, 0x03, 0x0A, 0x43, 0x22, 0x60, 0x01, 0x22, 0xD2, 0x03, 0x0A, 0x43, 0x22, 
+	0x60, 0x56, 0x4A, 0x62, 0x60, 0x44, 0x4A, 0xD3, 0x68, 0x55, 0x4E, 0x33, 0x40, 0xD3, 0x60, 0x13, 
+	0x69, 0x05, 0x26, 0x36, 0x04, 0x33, 0x43, 0x13, 0x61, 0x13, 0x69, 0x9B, 0x03, 0xFC, 0xD5, 0x29, 
+	0x43, 0x21, 0x60, 0x3C, 0x4C, 0x00, 0x21, 0xA1, 0x60, 0xE1, 0x60, 0x51, 0x68, 0xC0, 0xB2, 0x21, 
+	0x61, 0xFD, 0xF7, 0x7C, 0xFB, 0x01, 0x20, 0x40, 0x03, 0x60, 0x61, 0x70, 0xBD, 0x70, 0xB5, 0x4A, 
+	0x4B, 0x48, 0x48, 0x58, 0x61, 
+	0x00, 0x01, 0x25, 0x00, 0x80, 0x05, 0x20, 0x18, 0x61, 0x72, 0xB6, 0x33, 0x48, 0x41, 0x68, 0x42, 
+	0x68, 0x8A, 0x42, 0xFC, 0xD0, 0x00, 0x21, 0x99, 0x61, 0x44, 0x68, 0x41, 0x68, 0xA1, 0x42, 0xFC, 
+	0xD0, 0x98, 0x69, 0x40, 0x49, 0x89, 0x1C, 0x0D, 0x1A, 0x04, 0x20, 0x18, 0x61, 0x62, 0xB6, 0x20, 
+	0x46, 0xFF, 0xF7, 0x90, 0xFE, 0x27, 0x4E, 0x00, 0x2D, 0xF0, 0x60, 0x34, 0x61, 0xB0, 0x60, 0x0D, 
+	0xD0, 0x3A, 0x48, 0x7D, 0x21, 0x00, 0x78, 0xC9, 0x02, 0x48, 0x43, 0x29, 0x46, 0x04, 0xF0, 0xCB, 
+	0xF8, 0x70, 0x61, 0x00, 0x28, 0x01, 0xD1, 0x01, 0x20, 0x70, 0x61, 0x70, 0xBD, 0x01, 0x20, 0x40, 
+	0x03, 0xFA, 0xE7, 0x10, 0xB5, 0x04, 0x46, 0xFF, 0xF7, 0x8D, 0xFE, 0x1A, 0x49, 0x89, 0x68, 0x40, 
+	0x1A, 0xA0, 0x42, 0x03, 0xD3, 0xFF, 0xF7, 0xC2, 0xFF, 0x01, 0x20, 0x10, 0xBD, 0x00, 0x20, 0x10, 
+	0xBD, 0x00, 0x28, 0x10, 0xD0, 
+	0x00, 0x01, 0x26, 0x00, 0x80, 0x2A, 0x49, 0x88, 0x42, 0x00, 0xD9, 0x08, 0x46, 0x24, 0x21, 0x48, 
+	0x43, 0x25, 0x49, 0x48, 0x61, 0x05, 0x20, 0x08, 0x61, 0x00, 0x20, 0x88, 0x61, 0x08, 0x69, 0xC0, 
+	0x03, 0xFC, 0xD5, 0x04, 0x20, 0x08, 0x61, 0x70, 0x47, 0x0E, 0x49, 0x08, 0x68, 0x03, 0x22, 0x92, 
+	0x03, 0x10, 0x43, 0x08, 0x60, 0x70, 0x47, 0x0B, 0x49, 0x08, 0x68, 0x03, 0x22, 0x92, 0x03, 0x90, 
+	0x43, 0x01, 0x22, 0x92, 0x03, 0x02, 0x43, 0x0A, 0x60, 0x01, 0x22, 0xD2, 0x03, 0x10, 0x43, 0x08, 
+	0x60, 0x70, 0x47, 0x00, 0x00, 0x34, 0x02, 0x00, 0x20, 0x00, 0x04, 0x01, 0x40, 0xAC, 0x01, 0x00, 
+	0x20, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x0C, 0x0C, 0x04, 0x00, 0x0A, 0x0A, 0x00, 
+	0x00, 0x80, 0xE2, 0x00, 0xE0, 0x0D, 0x02, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x57, 0x6A, 0x00, 
+	0x00, 0x08, 0x08, 0x08, 0x00, 
+	0x00, 0x01, 0x27, 0x00, 0x80, 0xAE, 0x01, 0x00, 0x20, 0x40, 0xF1, 0xFF, 0x0F, 0x00, 0xED, 0x00, 
+	0xE0, 0x00, 0x00, 0x12, 0x40, 0x01, 0x09, 0x01, 0x00, 0x00, 0xDC, 0x00, 0x00, 0x06, 0x00, 0x00, 
+	0x80, 0xFF, 0xF7, 0xFE, 0x20, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xE0, 0x00, 0xE0, 0x50, 0x02, 0x00, 
+	0x20, 0x50, 0xC3, 0x00, 0x00, 0x10, 0xB5, 0x3A, 0x4B, 0x02, 0x24, 0x18, 0x78, 0x59, 0x68, 0xC0, 
+	0x1E, 0xC0, 0xB2, 0x0A, 0x5C, 0x1C, 0x5F, 0x52, 0x42, 0xA2, 0x42, 0x00, 0xDD, 0x5A, 0x80, 0x09, 
+	0x5C, 0xFF, 0x20, 0x40, 0x1A, 0x02, 0x21, 0x59, 0x5E, 0x88, 0x42, 0x00, 0xDA, 0x58, 0x80, 0x10, 
+	0xBD, 0x30, 0x48, 0xC1, 0x7A, 0x24, 0x29, 0x01, 0xD2, 0x24, 0x20, 0x70, 0x47, 0xC1, 0x7A, 0x30, 
+	0x29, 0x01, 0xD9, 0x30, 0x20, 0x70, 0x47, 0xC0, 0x7A, 0x70, 0x47, 0xF0, 0xB5, 0x2A, 0x4F, 0x00, 
+	0x21, 0x3A, 0x7B, 0x7B, 0x7B, 
+	0x00, 0x01, 0x28, 0x00, 0x80, 0x8C, 0x46, 0x0E, 0x46, 0x14, 0x46, 0x1D, 0x46, 0x04, 0x21, 0x20, 
+	0x2A, 0x00, 0xD0, 0x01, 0x26, 0x20, 0x2B, 0x01, 0xD0, 0x01, 0x22, 0x94, 0x46, 0x49, 0x1E, 0x0B, 
+	0xD4, 0x4A, 0x00, 0x21, 0x4B, 0x8A, 0x18, 0xD7, 0x18, 0x7A, 0x78, 0xBB, 0x78, 0x3F, 0x78, 0x87, 
+	0x42, 0xED, 0xD3, 0x14, 0x46, 0x1D, 0x46, 0xEA, 0xE7, 0x1C, 0x48, 0x00, 0x2E, 0x00, 0xD0, 0xC4, 
+	0x61, 0x61, 0x46, 0x00, 0x29, 0x00, 0xD0, 0x05, 0x62, 0xF0, 0xBD, 0xF8, 0xB5, 0x04, 0x46, 0xC0, 
+	0x1E, 0xC5, 0xB2, 0x20, 0x46, 0x18, 0x38, 0xC6, 0xB2, 0x15, 0x48, 0x11, 0x4F, 0x24, 0x2C, 0x0B, 
+	0xD2, 0x14, 0x49, 0x89, 0x5D, 0x06, 0x46, 0x81, 0x60, 0x05, 0x20, 0xFD, 0xF7, 0x73, 0xFA, 0x78, 
+	0x68, 0x40, 0x5D, 0x70, 0x60, 0xF0, 0x20, 0x0A, 0xE0, 0x79, 0x68, 0x49, 0x5D, 0x05, 0x46, 0x41, 
+	0x60, 0xF0, 0x20, 0xFD, 0xF7, 
+	0x00, 0x01, 0x29, 0x00, 0x80, 0x67, 0xFA, 0x0B, 0x48, 0x80, 0x5D, 0xA8, 0x60, 0x05, 0x20, 0xFD, 
+	0xF7, 0x61, 0xFA, 0x09, 0x49, 0x20, 0x46, 0x48, 0x43, 0xFD, 0xF7, 0xB2, 0xFA, 0xF8, 0xBD, 0x00, 
+	0x00, 0x50, 0x02, 0x00, 0x20, 0x00, 0xDC, 0x00, 0x00, 0xC0, 0xF1, 0xFF, 0x0F, 0x00, 0xFF, 0x00, 
+	0x40, 0x00, 0xFF, 0x01, 0x40, 0x7C, 0xD8, 0x00, 0x00, 0x40, 0x42, 0x0F, 0x00, 0xF0, 0xB5, 0x07, 
+	0x46, 0xFF, 0x48, 0x85, 0xB0, 0x00, 0x78, 0x0C, 0x46, 0xFE, 0x4E, 0xFF, 0x4D, 0x00, 0x28, 0x52, 
+	0xD0, 0x38, 0x46, 0x00, 0xF0, 0x75, 0xFF, 0x02, 0x90, 0x38, 0x46, 0x00, 0xF0, 0x82, 0xFF, 0x01, 
+	0x90, 0xFB, 0x49, 0xFA, 0x48, 0x09, 0x78, 0x40, 0x18, 0x20, 0x38, 0x00, 0x7E, 0x00, 0x90, 0xF9, 
+	0x48, 0x80, 0x69, 0x00, 0x01, 0x01, 0xD5, 0xF8, 0x48, 0x00, 0xE0, 0xF8, 0x48, 0x03, 0x90, 0x32, 
+	0x78, 0x01, 0x20, 0x90, 0x40, 
+	0x00, 0x01, 0x2A, 0x00, 0x80, 0x84, 0x46, 0x00, 0x23, 0x2F, 0xE0, 0x02, 0x98, 0x61, 0x46, 0x08, 
+	0x42, 0x27, 0xD0, 0x00, 0x20, 0x51, 0x00, 0x13, 0xE0, 0x01, 0x9D, 0x03, 0x9E, 0x45, 0x43, 0xED, 
+	0x18, 0xAD, 0x00, 0x75, 0x59, 0x00, 0x9E, 0x2F, 0xB2, 0xBE, 0x46, 0xE8, 0x4F, 0x36, 0x18, 0x6C, 
+	0x3F, 0xBE, 0x5D, 0x77, 0x46, 0x65, 0x5A, 0x7E, 0x43, 0x36, 0x12, 0xAD, 0x19, 0x65, 0x52, 0x40, 
+	0x1C, 0xE3, 0x4D, 0x2D, 0x78, 0xA8, 0x42, 0xE7, 0xD3, 0xE1, 0x48, 0xE0, 0x4E, 0x00, 0x78, 0x0A, 
+	0x36, 0x40, 0x00, 0x5B, 0x1C, 0x80, 0x19, 0x20, 0x38, 0x65, 0x5E, 0x00, 0x8A, 0x45, 0x43, 0x28, 
+	0x12, 0x60, 0x52, 0x60, 0x46, 0x40, 0x00, 0x84, 0x46, 0x52, 0x1C, 0xD7, 0x48, 0x00, 0x78, 0x82, 
+	0x42, 0xCB, 0xD3, 0x05, 0xB0, 0xF0, 0xBD, 0x30, 0x78, 0xD9, 0x4A, 0x05, 0xE0, 0x81, 0x00, 0x89, 
+	0x18, 0x09, 0x68, 0x43, 0x00, 
+	0x00, 0x01, 0x2B, 0x00, 0x80, 0xE1, 0x52, 0x40, 0x1C, 0x29, 0x78, 0x88, 0x42, 0xF6, 0xD3, 0xF0, 
+	0xE7, 0xF8, 0xB5, 0xD4, 0x4C, 0xD4, 0x49, 0xA0, 0x78, 0x09, 0x78, 0xD4, 0x4A, 0x48, 0x43, 0x12, 
+	0x68, 0xC0, 0x00, 0x85, 0x18, 0xD2, 0x48, 0x42, 0x7C, 0x00, 0x2A, 0x01, 0xD1, 0x01, 0x22, 0x01, 
+	0xE0, 0xD0, 0x4A, 0x12, 0x78, 0x40, 0x7C, 0x53, 0xB2, 0x62, 0x78, 0x00, 0x28, 0x01, 0xD1, 0xD0, 
+	0x1C, 0x03, 0xE0, 0xCD, 0x48, 0x00, 0x78, 0x08, 0x1A, 0x80, 0x18, 0xC4, 0xB2, 0x00, 0x20, 0x6E, 
+	0x46, 0x21, 0x46, 0x03, 0x28, 0x02, 0xD2, 0x01, 0x46, 0x59, 0x43, 0x89, 0x18, 0x31, 0x54, 0x40, 
+	0x1C, 0x04, 0x28, 0xF5, 0xD3, 0xB7, 0x48, 0x00, 0x78, 0x58, 0xE0, 0xC4, 0x49, 0x12, 0x22, 0x09, 
+	0x78, 0x12, 0x27, 0x51, 0x43, 0xC2, 0x4A, 0x36, 0x24, 0x89, 0x18, 0x42, 0x00, 0x8E, 0x5E, 0x89, 
+	0x18, 0xCF, 0x5F, 0x24, 0x22, 
+	0x00, 0x01, 0x2C, 0x00, 0x80, 0x8A, 0x5E, 0x0C, 0x5F, 0xF1, 0x19, 0x8C, 0x46, 0x89, 0x18, 0x09, 
+	0x1B, 0x7F, 0x23, 0x89, 0x10, 0xDB, 0x43, 0x99, 0x42, 0x01, 0xDA, 0x19, 0x46, 0x02, 0xE0, 0x7F, 
+	0x29, 0x00, 0xDD, 0x7F, 0x21, 0x6B, 0x46, 0x1B, 0x78, 0xDB, 0x00, 0x1B, 0x18, 0xE9, 0x54, 0x61, 
+	0x46, 0x09, 0x19, 0x89, 0x1A, 0x7F, 0x23, 0x89, 0x10, 0xDB, 0x43, 0x99, 0x42, 0x01, 0xDA, 0x19, 
+	0x46, 0x02, 0xE0, 0x7F, 0x29, 0x00, 0xDD, 0x7F, 0x21, 0x6B, 0x46, 0x5B, 0x78, 0xDB, 0x00, 0x1B, 
+	0x18, 0xE9, 0x54, 0xB1, 0x18, 0x09, 0x19, 0xC9, 0x1B, 0x7F, 0x23, 0x89, 0x10, 0xDB, 0x43, 0x99, 
+	0x42, 0x01, 0xDA, 0x19, 0x46, 0x02, 0xE0, 0x7F, 0x29, 0x00, 0xDD, 0x7F, 0x21, 0x6B, 0x46, 0x9B, 
+	0x78, 0xDB, 0x00, 0x1B, 0x18, 0xE9, 0x54, 0xB9, 0x18, 0x09, 0x19, 0x89, 0x1B, 0x7F, 0x22, 0x89, 
+	0x10, 0xD2, 0x43, 0x91, 0x42, 
+	0x00, 0x01, 0x2D, 0x00, 0x80, 0x01, 0xDA, 0x11, 0x46, 0x02, 0xE0, 0x7F, 0x29, 0x00, 0xDD, 0x7F, 
+	0x21, 0x6B, 0x46, 0xDA, 0x78, 0xD2, 0x00, 0x12, 0x18, 0xA9, 0x54, 0x40, 0x1C, 0x8A, 0x49, 0x09, 
+	0x78, 0x88, 0x42, 0xA2, 0xD3, 0x97, 0x48, 0x98, 0x49, 0x00, 0x78, 0x09, 0x78, 0x88, 0x42, 0x09, 
+	0xD1, 0x96, 0x49, 0x08, 0x78, 0x00, 0x28, 0x05, 0xD0, 0x02, 0x28, 0x03, 0xD2, 0x40, 0x1C, 0x08, 
+	0x70, 0xF9, 0xF7, 0x4C, 0xF9, 0xF8, 0xBD, 0x10, 0xB5, 0x89, 0x4C, 0x20, 0x3C, 0x20, 0x69, 0x01, 
+	0x28, 0x10, 0xD1, 0xF8, 0xF7, 0x0F, 0xFD, 0x00, 0x09, 0x03, 0xD0, 0x85, 0x48, 0x80, 0x79, 0x00, 
+	0x28, 0x08, 0xD1, 0x7F, 0x48, 0x00, 0x6A, 0x61, 0x69, 0x00, 0xB2, 0x89, 0x4A, 0x50, 0x43, 0x41, 
+	0x43, 0x08, 0x14, 0x10, 0xBD, 0x00, 0x20, 0x10, 0xBD, 0xF0, 0xB5, 0x00, 0x20, 0x85, 0xB0, 0x6E, 
+	0x46, 0x01, 0x46, 0x02, 0x46, 
+	0x00, 0x01, 0x2E, 0x00, 0x80, 0x03, 0x46, 0x0F, 0xC6, 0x72, 0x4C, 0x14, 0x27, 0x02, 0x20, 0x40, 
+	0x3C, 0xE0, 0x60, 0x7C, 0x49, 0x80, 0x4A, 0x08, 0x78, 0x40, 0x1C, 0x08, 0x70, 0x7D, 0x48, 0x72, 
+	0x49, 0x00, 0x78, 0x09, 0x78, 0x12, 0x78, 0x41, 0x43, 0x89, 0x18, 0x70, 0x4A, 0xC9, 0x00, 0x12, 
+	0x68, 0x8D, 0x18, 0x69, 0x46, 0xFF, 0xF7, 0xC2, 0xFE, 0xFF, 0xF7, 0xC5, 0xFF, 0x61, 0x49, 0x77, 
+	0x4E, 0x09, 0x78, 0x12, 0xE0, 0x4A, 0x00, 0x6B, 0x46, 0x9B, 0x5E, 0xB2, 0x5E, 0x1B, 0x1A, 0x53, 
+	0x43, 0x9A, 0x12, 0x7F, 0x23, 0x12, 0xB2, 0xDB, 0x43, 0x9A, 0x42, 0x01, 0xDA, 0x6B, 0x54, 0x03, 
+	0xE0, 0x7F, 0x2A, 0x00, 0xDD, 0x7F, 0x22, 0x6A, 0x54, 0x49, 0x1C, 0x57, 0x4A, 0x12, 0x78, 0x91, 
+	0x42, 0xE8, 0xD3, 0x6B, 0x48, 0x68, 0x49, 0x00, 0x78, 0x08, 0x70, 0x6A, 0x48, 0x65, 0x49, 0x00, 
+	0x78, 0x58, 0x4E, 0x08, 0x70, 
+	0x00, 0x01, 0x2F, 0x00, 0x80, 0x31, 0x78, 0x5A, 0x4D, 0x01, 0x29, 0x17, 0xD1, 0x00, 0x21, 0x31, 
+	0x70, 0x49, 0x1E, 0xE1, 0x60, 0x00, 0xF0, 0x14, 0xFE, 0x00, 0xF0, 0x04, 0xFE, 0xE8, 0x7B, 0xF9, 
+	0xF7, 0x29, 0xF8, 0x05, 0x20, 0xFD, 0xF7, 0x21, 0xF9, 0x20, 0x68, 0x03, 0x21, 0x49, 0x07, 0x08, 
+	0x43, 0x20, 0x60, 0x20, 0x68, 0x80, 0x00, 0x01, 0xD5, 0x7F, 0x1E, 0xFA, 0xD2, 0x51, 0x48, 0x52, 
+	0x49, 0x00, 0x78, 0x09, 0x78, 0x40, 0x1C, 0x88, 0x42, 0x69, 0xD2, 0x57, 0x48, 0x54, 0x4F, 0x02, 
+	0x78, 0x38, 0x78, 0x56, 0x4B, 0x12, 0x18, 0x9A, 0x5C, 0x55, 0x4B, 0x0F, 0x21, 0x92, 0x00, 0xD2, 
+	0x18, 0x11, 0x60, 0x40, 0x1C, 0xC0, 0xB2, 0x53, 0x49, 0x38, 0x70, 0x09, 0x78, 0x88, 0x42, 0x0B, 
+	0xD9, 0x51, 0x48, 0x4C, 0x49, 0x00, 0x78, 0x38, 0x70, 0x08, 0x78, 0x40, 0x1C, 0xC0, 0xB2, 0x08, 
+	0x70, 0xF9, 0xF7, 0x4D, 0xF8, 
+	0x00, 0x01, 0x30, 0x00, 0x80, 0x01, 0x20, 0x30, 0x70, 0x39, 0x48, 0x20, 0x38, 0x84, 0x46, 0x00, 
+	0x69, 0x00, 0x28, 0x29, 0xD0, 0x49, 0x48, 0x45, 0x4A, 0x03, 0x78, 0x0F, 0x21, 0xD2, 0x5C, 0x44, 
+	0x4B, 0x92, 0x00, 0xD2, 0x18, 0x11, 0x60, 0x30, 0x49, 0x09, 0x78, 0x4A, 0x08, 0x39, 0x78, 0x8A, 
+	0x42, 0x0B, 0xD8, 0x62, 0x46, 0xD2, 0x69, 0x02, 0x2A, 0x0C, 0xD1, 0x6A, 0x7C, 0x00, 0x2A, 0x09, 
+	0xD0, 0x2D, 0x4A, 0x12, 0x78, 0x52, 0x08, 0x8A, 0x42, 0x04, 0xD9, 0x29, 0x49, 0x60, 0x39, 0x09, 
+	0x6A, 0x49, 0x1E, 0x01, 0xE0, 0x34, 0x49, 0x09, 0x78, 0x01, 0x70, 0x34, 0x49, 0x00, 0x78, 0x0C, 
+	0x22, 0x08, 0x5C, 0x80, 0x00, 0xC0, 0x18, 0x02, 0x60, 0x2F, 0x48, 0x01, 0x21, 0x02, 0x78, 0x38, 
+	0x78, 0x13, 0x18, 0x2E, 0x4A, 0xD2, 0x5C, 0x93, 0x00, 0x2D, 0x4A, 0x9A, 0x18, 0x11, 0x60, 0x1A, 
+	0x49, 0x0A, 0x78, 0x28, 0x49, 
+	0x00, 0x01, 0x31, 0x00, 0x80, 0x09, 0x78, 0x4A, 0x43, 0x10, 0x18, 0xF8, 0xF7, 0x68, 0xFF, 0x30, 
+	0x78, 0x01, 0x28, 0x6E, 0xD0, 0x20, 0x68, 0x03, 0x21, 0x49, 0x07, 0x08, 0x43, 0x20, 0x60, 0x19, 
+	0x48, 0x01, 0x78, 0x19, 0x48, 0x00, 0x78, 0x81, 0x42, 0x68, 0xD1, 0x1F, 0x48, 0x1F, 0x4E, 0x01, 
+	0x78, 0x1B, 0x48, 0x0F, 0x25, 0x00, 0x78, 0x1E, 0x4F, 0x08, 0x18, 0x30, 0x5C, 0x80, 0x00, 0x3F, 
+	0xE0, 0xC4, 0x00, 0x00, 0x20, 0x65, 0x02, 0x00, 0x20, 0x66, 0x02, 0x00, 0x20, 0x58, 0xD9, 0x00, 
+	0x00, 0xB8, 0x00, 0x00, 0x20, 0x40, 0x00, 0x11, 0x40, 0x00, 0x12, 0x11, 0x40, 0x00, 0x10, 0x11, 
+	0x40, 0x00, 0x02, 0x11, 0x40, 0x58, 0x02, 0x00, 0x20, 0x9D, 0x00, 0x00, 0x20, 0xE0, 0x00, 0x00, 
+	0x20, 0xF8, 0xDF, 0x00, 0x00, 0xB1, 0x00, 0x00, 0x20, 0xB0, 0x00, 0x00, 0x20, 0x9F, 0x00, 0x00, 
+	0x20, 0xB2, 0x03, 0x00, 0x20, 
+	0x00, 0x01, 0x32, 0x00, 0x80, 0xA7, 0x00, 0x00, 0x20, 0xAB, 0x00, 0x00, 0x20, 0x64, 0x02, 0x00, 
+	0x20, 0x3C, 0x0A, 0x00, 0x00, 0xA2, 0x00, 0x00, 0x20, 0xA4, 0x00, 0x00, 0x20, 0x42, 0x04, 0x00, 
+	0x20, 0xA5, 0x00, 0x00, 0x20, 0xA3, 0x00, 0x00, 0x20, 0x9E, 0x00, 0x00, 0x20, 0xC0, 0xE0, 0x00, 
+	0x00, 0x00, 0x04, 0x11, 0x40, 0xAF, 0x00, 0x00, 0x20, 0xAE, 0x00, 0x00, 0x20, 0xA6, 0x00, 0x00, 
+	0x20, 0xC0, 0x19, 0x05, 0x60, 0x21, 0x69, 0x02, 0x20, 0x81, 0x43, 0x21, 0x61, 0x05, 0x20, 0xFD, 
+	0xF7, 0x4C, 0xF8, 0xFE, 0x48, 0x00, 0x78, 0x30, 0x5C, 0x80, 0x00, 0xC0, 0x19, 0x05, 0x60, 0xFC, 
+	0x49, 0x08, 0x78, 0x00, 0x28, 0x06, 0xD0, 0x02, 0x28, 0x04, 0xD2, 0x40, 0x1C, 0x08, 0x70, 0xF8, 
+	0xF7, 0xF5, 0xFF, 0xFE, 0xE5, 0xF7, 0x49, 0x01, 0x20, 0x08, 0x70, 0xFA, 0xE5, 0x20, 0x68, 0x01, 
+	0x21, 0x89, 0x07, 0x08, 0x43, 
+	0x00, 0x01, 0x33, 0x00, 0x80, 0x20, 0x60, 0xF4, 0xE5, 0xF0, 0xB5, 0xF3, 0x4E, 0x87, 0xB0, 0x30, 
+	0x78, 0x06, 0x90, 0x00, 0x20, 0x01, 0xAC, 0x01, 0x46, 0x02, 0x46, 0x03, 0x46, 0x0F, 0xC4, 0x14, 
+	0x27, 0xEE, 0x49, 0x02, 0x20, 0xC8, 0x60, 0xEE, 0x49, 0x08, 0x78, 0x40, 0x1C, 0x08, 0x70, 0xED, 
+	0x48, 0x12, 0x21, 0x00, 0x78, 0x48, 0x43, 0xEC, 0x49, 0x40, 0x18, 0x05, 0x90, 0xEB, 0x48, 0x01, 
+	0xA9, 0x00, 0x78, 0xFF, 0xF7, 0x7B, 0xFD, 0xFF, 0xF7, 0x7E, 0xFE, 0xE9, 0x49, 0xE9, 0x4D, 0x09, 
+	0x78, 0x09, 0xE0, 0x4A, 0x00, 0x01, 0xAB, 0x9C, 0x5E, 0xAB, 0x5E, 0x24, 0x1A, 0x5C, 0x43, 0xA3, 
+	0x12, 0x05, 0x9C, 0x49, 0x1C, 0xA3, 0x52, 0xE4, 0x4A, 0x12, 0x78, 0x91, 0x42, 0xF1, 0xD3, 0xE3, 
+	0x4D, 0xE3, 0x4C, 0x28, 0x78, 0x01, 0x28, 0x1C, 0xD1, 0x00, 0x20, 0x28, 0x70, 0x41, 0x1E, 0xD7, 
+	0x48, 0xC1, 0x60, 0xE0, 0x48, 
+	0x00, 0x01, 0x34, 0x00, 0x80, 0x00, 0x78, 0x00, 0xF0, 0xDB, 0xFC, 0x00, 0xF0, 0xCB, 0xFC, 0xE0, 
+	0x7B, 0xF8, 0xF7, 0xF0, 0xFE, 0x05, 0x20, 0xFC, 0xF7, 0xE8, 0xFF, 0xD0, 0x48, 0x00, 0x68, 0x03, 
+	0x21, 0x49, 0x07, 0x08, 0x43, 0xCD, 0x49, 0x08, 0x60, 0x08, 0x68, 0x80, 0x00, 0x01, 0xD5, 0x7F, 
+	0x1E, 0xFA, 0xD2, 0x60, 0x7C, 0x00, 0x28, 0xD4, 0x48, 0x00, 0x78, 0x09, 0xD0, 0xD1, 0x49, 0xC0, 
+	0x1C, 0x80, 0x08, 0x09, 0x78, 0x80, 0x00, 0x48, 0x43, 0x31, 0x78, 0x89, 0x00, 0x40, 0x18, 0x0A, 
+	0xE0, 0xC0, 0x1C, 0x81, 0x08, 0xCB, 0x48, 0x89, 0x00, 0x00, 0x78, 0x41, 0x43, 0x30, 0x78, 0xC0, 
+	0x1C, 0x80, 0x08, 0x80, 0x00, 0x08, 0x18, 0xBF, 0x4F, 0xE8, 0x70, 0x3B, 0x78, 0x03, 0xF0, 0xE5, 
+	0xFD, 0x08, 0x05, 0x0C, 0x15, 0xA6, 0x05, 0x0C, 0x15, 0xCA, 0xEF, 0x02, 0x21, 0x30, 0x78, 0xF8, 
+	0xF7, 0x85, 0xFE, 0xE8, 0x78, 
+	0x00, 0x01, 0x35, 0x00, 0x80, 0x80, 0x1C, 0x05, 0xE0, 0x03, 0x21, 0x30, 0x78, 0xF8, 0xF7, 0x7E, 
+	0xFE, 0xE8, 0x78, 0xC0, 0x1C, 0xF8, 0xF7, 0x63, 0xFE, 0x8C, 0xE0, 0xB1, 0x48, 0xBB, 0x49, 0x00, 
+	0x78, 0x09, 0x78, 0x40, 0x1C, 0x88, 0x42, 0xF7, 0xD2, 0x60, 0x7C, 0x00, 0x28, 0x01, 0xD0, 0x01, 
+	0x20, 0x00, 0xE0, 0x04, 0x20, 0xB6, 0x49, 0x09, 0x78, 0x40, 0x18, 0x30, 0x70, 0x60, 0x7C, 0x00, 
+	0x28, 0x04, 0xD0, 0xB4, 0x49, 0x30, 0x78, 0x09, 0x78, 0x88, 0x42, 0x07, 0xD2, 0x61, 0x7C, 0xB2, 
+	0x48, 0x00, 0x29, 0x10, 0xD1, 0x31, 0x78, 0x02, 0x78, 0x91, 0x42, 0x0C, 0xD9, 0xAF, 0x48, 0xA9, 
+	0x49, 0x00, 0x78, 0x30, 0x70, 0x08, 0x78, 0x40, 0x1C, 0xC0, 0xB2, 0x08, 0x70, 0xF8, 0xF7, 0xD7, 
+	0xFE, 0x01, 0x20, 0x28, 0x70, 0x09, 0xE0, 0x61, 0x7C, 0x00, 0x29, 0x06, 0xD1, 0x31, 0x78, 0x00, 
+	0x78, 0xC9, 0x1C, 0x81, 0x42, 
+	0x00, 0x01, 0x36, 0x00, 0x80, 0x01, 0xD9, 0xC0, 0x1E, 0x30, 0x70, 0xFF, 0x21, 0x06, 0x98, 0xF8, 
+	0xF7, 0x3D, 0xFE, 0x9B, 0x48, 0x20, 0x38, 0x84, 0x46, 0x00, 0x69, 0x00, 0x28, 0x29, 0xD0, 0x8B, 
+	0x48, 0x9F, 0x4A, 0x03, 0x78, 0x0F, 0x21, 0xD2, 0x5C, 0x9E, 0x4B, 0x92, 0x00, 0xD2, 0x18, 0x11, 
+	0x60, 0x95, 0x49, 0x09, 0x78, 0x4A, 0x08, 0x31, 0x78, 0x8A, 0x42, 0x0B, 0xD8, 0x62, 0x46, 0xD2, 
+	0x69, 0x02, 0x2A, 0x0C, 0xD1, 0x62, 0x7C, 0x00, 0x2A, 0x09, 0xD0, 0x92, 0x4A, 0x12, 0x78, 0x52, 
+	0x08, 0x8A, 0x42, 0x04, 0xD9, 0x8A, 0x49, 0x60, 0x39, 0x09, 0x6A, 0x49, 0x1E, 0x01, 0xE0, 0x92, 
+	0x49, 0x09, 0x78, 0x01, 0x70, 0x8E, 0x4A, 0x00, 0x78, 0x0C, 0x21, 0x10, 0x5C, 0x82, 0x00, 0xD0, 
+	0x18, 0x01, 0x60, 0x00, 0x21, 0x30, 0x78, 0xF8, 0xF7, 0x09, 0xFE, 0x60, 0x7C, 0x00, 0x28, 0x82, 
+	0x48, 0x00, 0x78, 0x09, 0xD0, 
+	0x00, 0x01, 0x37, 0x00, 0x80, 0x7F, 0x49, 0xC0, 0x1C, 0x80, 0x08, 0x09, 0x78, 0x80, 0x00, 0x48, 
+	0x43, 0x31, 0x78, 0x89, 0x00, 0x40, 0x18, 0x0A, 0xE0, 0xC0, 0x1C, 0x81, 0x08, 0x79, 0x48, 0x89, 
+	0x00, 0x00, 0x78, 0x41, 0x43, 0x30, 0x78, 0xC0, 0x1C, 0x80, 0x08, 0x80, 0x00, 0x08, 0x18, 0xE8, 
+	0x70, 0xC0, 0xB2, 0x6F, 0xE7, 0x38, 0x78, 0x40, 0x1C, 0x38, 0x70, 0x48, 0xE0, 0x68, 0x48, 0x73, 
+	0x49, 0x00, 0x78, 0x09, 0x78, 0x40, 0x1C, 0x88, 0x42, 0x07, 0xD2, 0x01, 0x21, 0x30, 0x78, 0xF8, 
+	0xF7, 0xDD, 0xFD, 0xE8, 0x78, 0x40, 0x1C, 0xF8, 0xF7, 0xC2, 0xFD, 0x74, 0x49, 0x00, 0x20, 0x08, 
+	0x70, 0x6B, 0x49, 0x08, 0x78, 0x68, 0x70, 0x61, 0x48, 0x02, 0x78, 0xAA, 0x70, 0x65, 0x4A, 0x12, 
+	0x78, 0x02, 0x70, 0x30, 0x78, 0x08, 0x70, 0x6E, 0x49, 0x48, 0x68, 0x01, 0x22, 0x12, 0x07, 0x10, 
+	0x43, 0x48, 0x60, 0xD7, 0xE7, 
+	0x00, 0x01, 0x38, 0x00, 0x80, 0x56, 0x48, 0x61, 0x49, 0x00, 0x78, 0x09, 0x78, 0x40, 0x1C, 0x88, 
+	0x42, 0x07, 0xD2, 0x01, 0x21, 0x30, 0x78, 0xF8, 0xF7, 0xB9, 0xFD, 0xE8, 0x78, 0x40, 0x1C, 0xF8, 
+	0xF7, 0x9E, 0xFD, 0x00, 0x20, 0x38, 0x70, 0x61, 0x49, 0x04, 0x20, 0x08, 0x70, 0x58, 0x49, 0x08, 
+	0x78, 0x68, 0x70, 0x4E, 0x48, 0x02, 0x78, 0xAA, 0x70, 0x52, 0x4A, 0x12, 0x78, 0x02, 0x70, 0x30, 
+	0x78, 0x08, 0x70, 0x5B, 0x49, 0x48, 0x68, 0x01, 0x22, 0x12, 0x07, 0x10, 0x43, 0x48, 0x60, 0x44, 
+	0x48, 0x4E, 0x49, 0x00, 0x78, 0x09, 0x78, 0x42, 0x1C, 0x8A, 0x42, 0x08, 0xD2, 0x2A, 0x78, 0x01, 
+	0x2A, 0x25, 0xD0, 0x3E, 0x4C, 0x23, 0x68, 0x03, 0x22, 0x52, 0x07, 0x13, 0x43, 0x23, 0x60, 0x88, 
+	0x42, 0x1F, 0xD1, 0xFF, 0x21, 0x06, 0x98, 0xF8, 0xF7, 0x89, 0xFD, 0x34, 0x4A, 0x48, 0x49, 0x12, 
+	0x78, 0x0F, 0x20, 0x89, 0x5C, 
+	0x00, 0x01, 0x39, 0x00, 0x80, 0x47, 0x4A, 0x89, 0x00, 0x89, 0x18, 0x08, 0x60, 0x33, 0x4A, 0x11, 
+	0x69, 0x02, 0x20, 0x81, 0x43, 0x11, 0x61, 0x05, 0x20, 0xFC, 0xF7, 0xA7, 0xFE, 0x2C, 0x48, 0x00, 
+	0x78, 0x00, 0x28, 0x01, 0xD0, 0x02, 0x28, 0x02, 0xD3, 0x2A, 0x49, 0x01, 0x20, 0x08, 0x70, 0x07, 
+	0xB0, 0xF0, 0xBD, 0x2A, 0x49, 0x08, 0x68, 0x8A, 0x03, 0x10, 0x43, 0x08, 0x60, 0xF7, 0xE7, 0xF0, 
+	0xB5, 0x00, 0x20, 0x85, 0xB0, 0x6D, 0x46, 0x01, 0x46, 0x02, 0x46, 0x03, 0x46, 0x0F, 0xC5, 0x24, 
+	0x49, 0x10, 0x3D, 0x08, 0x78, 0x40, 0x1C, 0x08, 0x70, 0x24, 0x48, 0x36, 0x49, 0x00, 0x78, 0x09, 
+	0x68, 0x02, 0x01, 0x54, 0x18, 0x69, 0x46, 0xFF, 0xF7, 0xE9, 0xFB, 0xFF, 0xF7, 0xEC, 0xFC, 0x20, 
+	0x49, 0x31, 0x4E, 0x09, 0x78, 0x08, 0xE0, 0x4A, 0x00, 0xAB, 0x5E, 0x00, 0x27, 0xF7, 0x5F, 0x1B, 
+	0x1A, 0x7B, 0x43, 0x1B, 0x13, 
+	0x00, 0x01, 0x3A, 0x00, 0x80, 0xA3, 0x52, 0x49, 0x1C, 0x1B, 0x4A, 0x12, 0x78, 0x91, 0x42, 0xF2, 
+	0xD3, 0x16, 0x4D, 0x00, 0x21, 0x28, 0x78, 0x11, 0x4C, 0x40, 0x1C, 0xC0, 0xB2, 0x28, 0x70, 0xC9, 
+	0x43, 0xE1, 0x60, 0x1A, 0x49, 0x09, 0x78, 0x88, 0x42, 0x48, 0xD2, 0x00, 0xF0, 0x49, 0xFB, 0x00, 
+	0xF0, 0x39, 0xFB, 0x28, 0x78, 0xF8, 0xF7, 0xB3, 0xFD, 0x28, 0x78, 0xF8, 0xF7, 0x10, 0xFD, 0x20, 
+	0x68, 0x03, 0x21, 0x49, 0x07, 0x08, 0x43, 0x20, 0x60, 0x13, 0xE4, 0x00, 0x00, 0xA6, 0x00, 0x00, 
+	0x20, 0x64, 0x02, 0x00, 0x20, 0xB2, 0x00, 0x00, 0x20, 0xA5, 0x00, 0x00, 0x20, 0x00, 0x00, 0x11, 
+	0x40, 0xA7, 0x00, 0x00, 0x20, 0xAA, 0x00, 0x00, 0x20, 0xB2, 0x03, 0x00, 0x20, 0xA2, 0x00, 0x00, 
+	0x20, 0x65, 0x02, 0x00, 0x20, 0x42, 0x04, 0x00, 0x20, 0x66, 0x02, 0x00, 0x20, 0x58, 0x02, 0x00, 
+	0x20, 0xF8, 0xDF, 0x00, 0x00, 
+	0x00, 0x01, 0x3B, 0x00, 0x80, 0xA3, 0x00, 0x00, 0x20, 0x9D, 0x00, 0x00, 0x20, 0xAB, 0x00, 0x00, 
+	0x20, 0xA4, 0x00, 0x00, 0x20, 0xB0, 0x00, 0x00, 0x20, 0xAF, 0x00, 0x00, 0x20, 0xAE, 0x00, 0x00, 
+	0x20, 0xC0, 0xE0, 0x00, 0x00, 0x00, 0x04, 0x11, 0x40, 0x9E, 0x00, 0x00, 0x20, 0x9F, 0x00, 0x00, 
+	0x20, 0x00, 0xED, 0x00, 0xE0, 0xE4, 0x00, 0x00, 0x20, 0xC6, 0x00, 0x00, 0x20, 0x20, 0x69, 0x02, 
+	0x21, 0x88, 0x43, 0x20, 0x61, 0x05, 0x20, 0xFC, 0xF7, 0x10, 0xFE, 0xFA, 0x49, 0xFA, 0x4B, 0x08, 
+	0x78, 0x00, 0x28, 0x0C, 0xD0, 0x02, 0x28, 0x0A, 0xD2, 0x40, 0x1C, 0x08, 0x70, 0x18, 0x78, 0x01, 
+	0x28, 0x02, 0xD1, 0xF8, 0xF7, 0xB1, 0xFE, 0xC4, 0xE5, 0xF8, 0xF7, 0x9D, 0xFE, 0xC1, 0xE5, 0xF3, 
+	0x4A, 0x14, 0x78, 0x01, 0x22, 0x03, 0x2C, 0x06, 0xD1, 0x1B, 0x78, 0x01, 0x2B, 0x03, 0xD1, 0x00, 
+	0x28, 0xF2, 0xD0, 0x0A, 0x70, 
+	0x00, 0x01, 0x3C, 0x00, 0x80, 0xF0, 0xE7, 0xEE, 0x48, 0x02, 0x70, 0xEE, 0x48, 0x00, 0x68, 0x80, 
+	0x47, 0xAF, 0xE5, 0xF0, 0xB5, 0x00, 0x20, 0x85, 0xB0, 0x6E, 0x46, 0x01, 0x46, 0x02, 0x46, 0x03, 
+	0x46, 0x0F, 0xC6, 0x10, 0x3E, 0xE8, 0x4D, 0x02, 0x20, 0xE8, 0x60, 0xE8, 0x49, 0xE8, 0x4B, 0x08, 
+	0x78, 0x1B, 0x68, 0x02, 0x01, 0x40, 0x1C, 0x08, 0x70, 0xD4, 0x18, 0x69, 0x46, 0x00, 0x20, 0xFF, 
+	0xF7, 0x3D, 0xFB, 0xE4, 0x4B, 0x00, 0x20, 0x41, 0x00, 0x00, 0x27, 0x72, 0x5E, 0xDF, 0x5F, 0x40, 
+	0x1C, 0x7A, 0x43, 0x12, 0x13, 0x62, 0x52, 0x08, 0x28, 0xF5, 0xD3, 0xD9, 0x49, 0x01, 0x20, 0x08, 
+	0x70, 0x28, 0x69, 0x02, 0x21, 0x88, 0x43, 0x28, 0x61, 0x05, 0x20, 0xFC, 0xF7, 0xBE, 0xFD, 0xDA, 
+	0x48, 0x00, 0x68, 0x80, 0x47, 0x7D, 0xE5, 0xFF, 0xB5, 0x8A, 0xB0, 0xD8, 0x49, 0x0D, 0x98, 0x08, 
+	0x18, 0x20, 0x38, 0x00, 0x7E, 
+	0x00, 0x01, 0x3D, 0x00, 0x80, 0x06, 0x90, 0x00, 0x20, 0x00, 0x90, 0x84, 0x46, 0x02, 0x46, 0x05, 
+	0x90, 0xD3, 0x48, 0x01, 0x21, 0x00, 0x78, 0x08, 0x90, 0x81, 0x40, 0xD2, 0x48, 0x09, 0x91, 0x00, 
+	0x78, 0x86, 0x46, 0x6A, 0xE0, 0x00, 0x25, 0x2B, 0x46, 0x09, 0x9C, 0x08, 0x99, 0x21, 0xE0, 0x0B, 
+	0x98, 0x20, 0x42, 0x1C, 0xD0, 0x0C, 0x98, 0x0A, 0x9E, 0x50, 0x43, 0xC0, 0x18, 0x80, 0x00, 0x30, 
+	0x58, 0xC9, 0x4E, 0x80, 0x00, 0x36, 0x78, 0x00, 0xB2, 0x00, 0x2E, 0x07, 0xD0, 0x06, 0x9E, 0xC3, 
+	0x4F, 0xB6, 0x18, 0x6C, 0x3F, 0xBE, 0x5D, 0x46, 0x43, 0x30, 0x12, 0x00, 0xB2, 0x4E, 0x00, 0x01, 
+	0xAF, 0xB8, 0x53, 0x46, 0x42, 0x00, 0x28, 0x00, 0xDB, 0x06, 0x46, 0x75, 0x19, 0x5B, 0x1C, 0x64, 
+	0x00, 0x49, 0x1C, 0x71, 0x45, 0xDB, 0xD3, 0x0C, 0x98, 0xB8, 0x49, 0x80, 0x00, 0xC0, 0x39, 0x08, 
+	0x58, 0x00, 0x23, 0x68, 0x43, 
+	0x00, 0x01, 0x3E, 0x00, 0x80, 0x07, 0x12, 0x7D, 0x42, 0x1C, 0x46, 0x09, 0x99, 0x08, 0x98, 0x07, 
+	0x95, 0x0F, 0xE0, 0x0B, 0x9E, 0x0E, 0x42, 0x0A, 0xD0, 0x46, 0x00, 0x01, 0xAD, 0xAD, 0x5F, 0x07, 
+	0x9E, 0xB5, 0x42, 0x04, 0xDB, 0xBD, 0x42, 0x02, 0xDC, 0x2C, 0x19, 0x24, 0xB2, 0x5B, 0x1C, 0x49, 
+	0x00, 0x40, 0x1C, 0x70, 0x45, 0xED, 0xD3, 0xA9, 0x49, 0x98, 0x00, 0xC0, 0x39, 0x08, 0x58, 0xAB, 
+	0x49, 0x60, 0x43, 0x09, 0x78, 0x00, 0x12, 0x4B, 0x00, 0x01, 0xA9, 0xC9, 0x5A, 0x08, 0x1A, 0x01, 
+	0xB2, 0x48, 0x42, 0x00, 0x29, 0x00, 0xDB, 0x08, 0x46, 0xFF, 0x23, 0x00, 0xB2, 0xFD, 0x33, 0x98, 
+	0x42, 0x00, 0xD9, 0x18, 0x46, 0x00, 0x9B, 0x83, 0x42, 0x00, 0xDA, 0x00, 0x90, 0x05, 0x9B, 0x18, 
+	0x18, 0x05, 0x90, 0x60, 0x46, 0x40, 0x18, 0x84, 0x46, 0x52, 0x1C, 0x0D, 0x98, 0x82, 0x42, 0x91, 
+	0xD3, 0x9B, 0x48, 0x00, 0x99, 
+	0x00, 0x01, 0x3F, 0x00, 0x80, 0x42, 0x68, 0x51, 0x18, 0x41, 0x60, 0x82, 0x68, 0x05, 0x99, 0x51, 
+	0x18, 0x81, 0x60, 0x60, 0x46, 0x00, 0x28, 0x00, 0xDA, 0x40, 0x42, 0x96, 0x49, 0x0A, 0x68, 0x80, 
+	0x18, 0x08, 0x60, 0x0E, 0xB0, 0xF0, 0xBD, 0xF0, 0xB5, 0x87, 0x49, 0x89, 0xB0, 0x02, 0x20, 0xC8, 
+	0x60, 0x86, 0x4F, 0x85, 0x4A, 0x38, 0x78, 0x40, 0x1C, 0xC0, 0xB2, 0x38, 0x70, 0x40, 0x32, 0x92, 
+	0x69, 0x12, 0x01, 0x01, 0xD5, 0x8C, 0x4E, 0x00, 0xE0, 0x8C, 0x4E, 0x7F, 0x49, 0x89, 0x68, 0x8E, 
+	0x4C, 0x0D, 0x0A, 0x8B, 0x49, 0x01, 0x28, 0x09, 0x78, 0x02, 0x91, 0x8A, 0x49, 0x09, 0x88, 0x03, 
+	0x91, 0x7E, 0xD1, 0x00, 0x20, 0x01, 0x90, 0x7E, 0x48, 0x02, 0x78, 0x01, 0x20, 0x90, 0x40, 0x84, 
+	0x46, 0x7C, 0x48, 0x00, 0x23, 0x00, 0x78, 0x08, 0x90, 0x1F, 0xE0, 0x03, 0x98, 0x61, 0x46, 0x08, 
+	0x42, 0x16, 0xD0, 0x00, 0x21, 
+	0x00, 0x01, 0x40, 0x00, 0x80, 0x08, 0x46, 0x0A, 0xE0, 0x02, 0x9F, 0x47, 0x43, 0xFF, 0x18, 0xBF, 
+	0x00, 0xF7, 0x59, 0x3F, 0xB2, 0x00, 0x2F, 0x00, 0xDC, 0x7F, 0x42, 0x79, 0x18, 0x40, 0x1C, 0xA8, 
+	0x42, 0xF2, 0xD3, 0x01, 0x98, 0x88, 0x42, 0x02, 0xDA, 0x70, 0x48, 0x01, 0x91, 0x02, 0x70, 0x5B, 
+	0x1C, 0x60, 0x46, 0x40, 0x00, 0x84, 0x46, 0x08, 0x98, 0x52, 0x1C, 0x82, 0x42, 0xDD, 0xD3, 0x29, 
+	0x46, 0x01, 0x98, 0x03, 0xF0, 0x10, 0xFA, 0xC1, 0xB2, 0x70, 0x48, 0x72, 0x4F, 0x01, 0x70, 0x70, 
+	0x48, 0x03, 0x68, 0x71, 0x48, 0x02, 0x78, 0x6C, 0x48, 0x60, 0x38, 0x99, 0x42, 0x05, 0xDD, 0x03, 
+	0x6B, 0x93, 0x42, 0x02, 0xD9, 0x6A, 0x4B, 0x19, 0x60, 0x3A, 0x70, 0x6B, 0x4B, 0x52, 0x1C, 0xD2, 
+	0xB2, 0x1A, 0x70, 0x03, 0x6B, 0x93, 0x42, 0x07, 0xD8, 0x03, 0x6B, 0x93, 0x42, 0x0D, 0xD1, 0x00, 
+	0x6B, 0x3A, 0x78, 0x40, 0x1E, 
+	0x00, 0x01, 0x41, 0x00, 0x80, 0x90, 0x42, 0x08, 0xD0, 0x4F, 0x4A, 0x11, 0x69, 0x02, 0x20, 0x81, 
+	0x43, 0x11, 0x61, 0x05, 0x20, 0xFC, 0xF7, 0xA9, 0xFC, 0x14, 0xE1, 0xA0, 0x88, 0x5F, 0x4F, 0x88, 
+	0x42, 0x06, 0xD3, 0x5F, 0x48, 0xC0, 0x8B, 0x5F, 0x4A, 0x12, 0x78, 0x10, 0x40, 0xC0, 0x07, 0x02, 
+	0xD0, 0x38, 0x68, 0x81, 0x42, 0x03, 0xDC, 0x02, 0xF0, 0x63, 0xF8, 0x01, 0x28, 0x14, 0xD1, 0x53, 
+	0x48, 0x59, 0x49, 0x00, 0x78, 0x38, 0x60, 0x01, 0x20, 0x08, 0x70, 0x49, 0x49, 0x00, 0x20, 0x48, 
+	0x60, 0x88, 0x60, 0x48, 0x49, 0x2B, 0x46, 0x08, 0x60, 0x30, 0x46, 0x02, 0x9A, 0x03, 0x99, 0x00, 
+	0xE0, 0x22, 0xE0, 0xFF, 0xF7, 0xC8, 0xFE, 0x2B, 0xE0, 0x37, 0x48, 0x01, 0x69, 0x02, 0x22, 0x91, 
+	0x43, 0x01, 0x61, 0x30, 0x49, 0x08, 0x78, 0x00, 0x28, 0x01, 0xD0, 0x02, 0x28, 0x59, 0xD3, 0x38, 
+	0x68, 0x00, 0x28, 0x0F, 0xD1, 
+	0x00, 0x01, 0x42, 0x00, 0x80, 0x49, 0x49, 0x64, 0x22, 0x08, 0x70, 0x49, 0x49, 0x08, 0x70, 0x49, 
+	0x49, 0x08, 0x70, 0x29, 0x46, 0x02, 0x98, 0x48, 0x4D, 0x41, 0x43, 0x28, 0x88, 0x50, 0x43, 0x03, 
+	0xF0, 0xA2, 0xF9, 0x28, 0x80, 0x01, 0x20, 0xD3, 0xE0, 0x2B, 0x46, 0x30, 0x46, 0x02, 0x9A, 0xFF, 
+	0xF7, 0xA2, 0xFE, 0x38, 0x78, 0x41, 0x4A, 0x07, 0x90, 0x11, 0x78, 0x40, 0x1C, 0x88, 0x42, 0x04, 
+	0xD2, 0x21, 0x49, 0x08, 0x68, 0x03, 0x22, 0x52, 0x07, 0xC8, 0xE0, 0x07, 0x98, 0x88, 0x42, 0x77, 
+	0xD1, 0x27, 0x4F, 0x01, 0x46, 0x78, 0x68, 0x06, 0x90, 0x03, 0xF0, 0x8F, 0xF9, 0x80, 0x05, 0x06, 
+	0x0E, 0x32, 0x48, 0x64, 0x21, 0x06, 0x70, 0x23, 0x48, 0x05, 0x96, 0x00, 0x68, 0x48, 0x43, 0x29, 
+	0x46, 0x03, 0xF0, 0x79, 0xF9, 0x06, 0x99, 0x03, 0xF0, 0x76, 0xF9, 0x2D, 0x49, 0xC0, 0xB2, 0x08, 
+	0x70, 0x04, 0x90, 0xB8, 0x68, 
+	0x00, 0x01, 0x43, 0x00, 0x80, 0x64, 0x21, 0x48, 0x43, 0x29, 0x46, 0x03, 0xF0, 0x6C, 0xF9, 0x06, 
+	0x99, 0x03, 0xF0, 0x69, 0xF9, 0x27, 0x49, 0x11, 0x4B, 0x08, 0x70, 0x32, 0x02, 0x05, 0x21, 0x00, 
+	0x20, 0x9C, 0x3B, 0x26, 0x7A, 0x87, 0x00, 0xDF, 0x59, 0x7E, 0x43, 0x96, 0x42, 0x49, 0xD2, 0x01, 
+	0xB2, 0x4A, 0xE0, 0x80, 0xE0, 0x64, 0x02, 0x00, 0x20, 0x68, 0x02, 0x00, 0x20, 0x67, 0x02, 0x00, 
+	0x20, 0xB2, 0x00, 0x00, 0x20, 0xD4, 0x00, 0x00, 0x20, 0x00, 0x00, 0x11, 0x40, 0xA7, 0x00, 0x00, 
+	0x20, 0xE8, 0x00, 0x00, 0x20, 0xC8, 0x00, 0x00, 0x20, 0xD8, 0x00, 0x00, 0x20, 0x58, 0xD9, 0x00, 
+	0x00, 0x65, 0x02, 0x00, 0x20, 0x66, 0x02, 0x00, 0x20, 0xC4, 0x00, 0x00, 0x20, 0xF0, 0x00, 0x00, 
+	0x20, 0x58, 0x02, 0x00, 0x20, 0xDC, 0x00, 0x00, 0x20, 0x00, 0x12, 0x11, 0x40, 0x00, 0x10, 0x11, 
+	0x40, 0xB3, 0x00, 0x00, 0x20, 
+	0x00, 0x01, 0x44, 0x00, 0x80, 0xCE, 0x00, 0x00, 0x20, 0xF8, 0xDF, 0x00, 0x00, 0xBA, 0x00, 0x00, 
+	0x20, 0xEC, 0x00, 0x00, 0x20, 0xC3, 0x00, 0x00, 0x20, 0xC2, 0x00, 0x00, 0x20, 0x6C, 0x02, 0x00, 
+	0x20, 0xB8, 0xDC, 0x00, 0x00, 0x80, 0x02, 0x00, 0x20, 0xBB, 0x00, 0x00, 0x20, 0xBF, 0x00, 0x00, 
+	0x20, 0xC0, 0x00, 0x00, 0x20, 0xC1, 0x00, 0x00, 0x20, 0xD0, 0x00, 0x00, 0x20, 0xAB, 0x00, 0x00, 
+	0x20, 0x49, 0xE0, 0x40, 0x1C, 0x05, 0x28, 0xAC, 0xD3, 0x60, 0x7A, 0x36, 0x4A, 0x89, 0x00, 0x51, 
+	0x58, 0x35, 0x4E, 0x48, 0x43, 0x00, 0x0A, 0x01, 0x27, 0x37, 0x70, 0xE1, 0x7A, 0xCA, 0x07, 0x03, 
+	0x21, 0x00, 0x2A, 0x03, 0xD0, 0x04, 0x9A, 0x82, 0x42, 0x09, 0xD9, 0x07, 0xE0, 0x62, 0x7A, 0x04, 
+	0x98, 0x82, 0x42, 0x04, 0xD2, 0x22, 0x7A, 0x05, 0x98, 0x82, 0x42, 0x00, 0xD2, 0x31, 0x70, 0x07, 
+	0x99, 0x02, 0x98, 0x69, 0x43, 
+	0x00, 0x01, 0x45, 0x00, 0x80, 0x29, 0x4D, 0x41, 0x43, 0x28, 0x88, 0x64, 0x22, 0x50, 0x43, 0x03, 
+	0xF0, 0xEA, 0xF8, 0x27, 0x4A, 0x28, 0x80, 0x11, 0x69, 0x02, 0x20, 0x81, 0x43, 0x11, 0x61, 0x05, 
+	0x20, 0xFC, 0xF7, 0xA3, 0xFB, 0x30, 0x78, 0x80, 0x07, 0x11, 0xD4, 0x22, 0x49, 0x08, 0x78, 0x00, 
+	0x28, 0x0D, 0xD0, 0x02, 0x28, 0x0B, 0xD2, 0x40, 0x1C, 0x08, 0x70, 0x1F, 0x49, 0x00, 0x20, 0x08, 
+	0x70, 0x1E, 0x49, 0x08, 0x60, 0x1E, 0x48, 0x00, 0x78, 0xF8, 0xF7, 0xD8, 0xFC, 0x08, 0xE0, 0x38, 
+	0x46, 0x1C, 0x49, 0x08, 0x70, 0x04, 0xE0, 0x16, 0x49, 0x08, 0x68, 0x8A, 0x03, 0x10, 0x43, 0x08, 
+	0x60, 0x18, 0x48, 0x00, 0x78, 0x01, 0x28, 0x1B, 0xD1, 0x20, 0x7C, 0x00, 0x28, 0x18, 0xD0, 0x20, 
+	0x7B, 0x40, 0x07, 0x40, 0x0F, 0x05, 0x28, 0x01, 0xD9, 0x00, 0x20, 0x02, 0xE0, 0x04, 0x28, 0x00, 
+	0xD1, 0x06, 0x20, 0x0B, 0x49, 
+	0x00, 0x01, 0x46, 0x00, 0x80, 0xC0, 0x31, 0x0A, 0x69, 0x0F, 0x4B, 0x1A, 0x40, 0x0A, 0x61, 0x0A, 
+	0x69, 0x0E, 0x4B, 0x80, 0x00, 0x18, 0x58, 0x0C, 0x4B, 0xDB, 0x43, 0x18, 0x40, 0x02, 0x43, 0x0A, 
+	0x61, 0x09, 0xB0, 0xF0, 0xBD, 0xD0, 0xD8, 0x00, 0x00, 0xBB, 0x00, 0x00, 0x20, 0xD0, 0x00, 0x00, 
+	0x20, 0x00, 0x00, 0x11, 0x40, 0x64, 0x02, 0x00, 0x20, 0xC2, 0x00, 0x00, 0x20, 0xEC, 0x00, 0x00, 
+	0x20, 0xAB, 0x00, 0x00, 0x20, 0xB2, 0x00, 0x00, 0x20, 0xFF, 0xE0, 0xE3, 0xF1, 0x98, 0xD6, 0x00, 
+	0x00, 0x39, 0x49, 0x01, 0x20, 0x08, 0x70, 0x70, 0x47, 0x37, 0x49, 0x00, 0x20, 0x08, 0x70, 0x70, 
+	0x47, 0x35, 0x48, 0x00, 0x78, 0x00, 0x28, 0x00, 0xD0, 0x01, 0x20, 0x70, 0x47, 0x10, 0xB5, 0x32, 
+	0x49, 0x00, 0x23, 0x08, 0x78, 0x08, 0x22, 0x00, 0x28, 0x07, 0xD0, 0x04, 0x24, 0x01, 0x28, 0x02, 
+	0xD1, 0x4B, 0x70, 0x8C, 0x70, 
+	0x00, 0x01, 0x47, 0x00, 0x80, 0x03, 0xE0, 0x4C, 0x70, 0x00, 0xE0, 0x4B, 0x70, 0x8A, 0x70, 0x00, 
+	0xF0, 0x47, 0xF8, 0x02, 0x04, 0x29, 0x48, 0x01, 0x68, 0xFF, 0x23, 0x1B, 0x04, 0x99, 0x43, 0x0A, 
+	0x43, 0x02, 0x60, 0x10, 0xBD, 0x10, 0xB5, 0x04, 0x46, 0x00, 0xF0, 0x3A, 0xF8, 0x20, 0x40, 0x02, 
+	0x04, 0x22, 0x48, 0x01, 0x68, 0xFF, 0x23, 0x1B, 0x04, 0x99, 0x43, 0x0A, 0x43, 0x02, 0x60, 0x10, 
+	0xBD, 0x10, 0xB5, 0x1F, 0x49, 0x09, 0x78, 0x08, 0x18, 0x16, 0x21, 0x48, 0x43, 0x1D, 0x49, 0x0C, 
+	0x5A, 0x00, 0xF0, 0x26, 0xF8, 0x20, 0x40, 0x10, 0xBD, 0x17, 0x48, 0x41, 0x78, 0x01, 0x20, 0x88, 
+	0x40, 0x70, 0x47, 0x30, 0xB5, 0x16, 0x49, 0x14, 0x4C, 0x09, 0x78, 0x22, 0x78, 0x08, 0x18, 0x16, 
+	0x21, 0x14, 0x4B, 0x48, 0x43, 0x00, 0x2A, 0x0F, 0xD0, 0x1B, 0x5A, 0xFF, 0xF7, 0xED, 0xFF, 0x62, 
+	0x78, 0x00, 0x21, 0xA4, 0x78, 
+	0x00, 0x01, 0x48, 0x00, 0x80, 0x05, 0xE0, 0x1D, 0x46, 0x05, 0x42, 0x01, 0xD0, 0x49, 0x1C, 0x40, 
+	0x00, 0x52, 0x1C, 0xA2, 0x42, 0xF7, 0xD3, 0x01, 0xE0, 0xC0, 0x18, 0x81, 0x78, 0x08, 0x46, 0x30, 
+	0xBD, 0x05, 0x48, 0x00, 0x78, 0x00, 0x28, 0x05, 0xD0, 0x01, 0x28, 0x01, 0xD1, 0x0F, 0x20, 0x70, 
+	0x47, 0xF0, 0x20, 0x70, 0x47, 0xFF, 0x20, 0x70, 0x47, 0x64, 0x02, 0x00, 0x20, 0x00, 0x00, 0x11, 
+	0x40, 0xA0, 0x00, 0x00, 0x20, 0x2C, 0xE1, 0x00, 0x00, 0xFF, 0x49, 0x8A, 0x78, 0xFF, 0x48, 0x02, 
+	0x70, 0xCA, 0x78, 0x42, 0x70, 0x0A, 0x79, 0x82, 0x70, 0xCA, 0x79, 0xC2, 0x70, 0x09, 0x7A, 0x01, 
+	0x71, 0x70, 0x47, 0xF1, 0xE7, 0xF0, 0xB5, 0x00, 0x29, 0x0B, 0xD0, 0x00, 0x24, 0xF6, 0x4E, 0x0E, 
+	0xE0, 0x05, 0x19, 0xEF, 0x00, 0x00, 0x23, 0xED, 0x19, 0xAD, 0x19, 0xEF, 0x18, 0x3F, 0x7B, 0x00, 
+	0x2F, 0x01, 0xD0, 0x10, 0x46, 
+	0x00, 0x01, 0x49, 0x00, 0x80, 0xF0, 0xBD, 0x5B, 0x1C, 0x09, 0x2B, 0xF6, 0xD3, 0x64, 0x1C, 0x8C, 
+	0x42, 0xEE, 0xD3, 0x00, 0x20, 0xF0, 0xBD, 0xF8, 0xB5, 0xEB, 0x4D, 0xED, 0x4F, 0x06, 0x46, 0x00, 
+	0x24, 0xA9, 0x1C, 0x38, 0x46, 0x02, 0xF0, 0x0E, 0xF9, 0x29, 0x88, 0x88, 0x42, 0x33, 0xD1, 0x00, 
+	0x2E, 0x11, 0xD0, 0xE8, 0x49, 0x38, 0x46, 0x02, 0xF0, 0x05, 0xF9, 0xE6, 0x49, 0x89, 0x1E, 0x09, 
+	0x88, 0x88, 0x42, 0x28, 0xD1, 0xE4, 0x49, 0x38, 0x46, 0x02, 0xF0, 0xFC, 0xF8, 0xE2, 0x49, 0x89, 
+	0x1E, 0x09, 0x88, 0x88, 0x42, 0x1F, 0xD1, 0x00, 0x25, 0x00, 0xF0, 0x95, 0xFC, 0xDF, 0x4C, 0xE1, 
+	0x6A, 0x06, 0x46, 0x4E, 0x43, 0x01, 0x22, 0x31, 0x46, 0x28, 0x46, 0xFF, 0xF7, 0xBB, 0xFF, 0xA7, 
+	0x6B, 0x05, 0x46, 0x02, 0x22, 0x39, 0x46, 0x30, 0x46, 0xFF, 0xF7, 0xB4, 0xFF, 0x05, 0x43, 0xE1, 
+	0x6B, 0xF0, 0x19, 0x40, 0x18, 
+	0x00, 0x01, 0x4A, 0x00, 0x80, 0xA1, 0x6A, 0x00, 0x29, 0x00, 0xD0, 0x01, 0x21, 0x08, 0x22, 0xFF, 
+	0xF7, 0xA9, 0xFF, 0x28, 0x43, 0x04, 0x46, 0x20, 0x46, 0xF8, 0xBD, 0xF1, 0xB5, 0xD1, 0x48, 0xD0, 
+	0x4C, 0x01, 0x69, 0x82, 0xB0, 0x07, 0x22, 0x52, 0x06, 0x00, 0x91, 0x91, 0x43, 0x01, 0x22, 0x52, 
+	0x06, 0x89, 0x18, 0x01, 0x61, 0x00, 0x26, 0x35, 0x46, 0xFF, 0xF7, 0x12, 0xFF, 0x00, 0x28, 0x01, 
+	0xD0, 0x01, 0x26, 0x02, 0x25, 0xF0, 0xB2, 0xC8, 0x49, 0x01, 0x90, 0x30, 0xE0, 0xFF, 0xF7, 0x0E, 
+	0xFF, 0x02, 0x98, 0xFF, 0xF7, 0x27, 0xFF, 0xC1, 0x48, 0x60, 0x30, 0xC0, 0x7B, 0xF8, 0xF7, 0x4A, 
+	0xF9, 0xC0, 0x49, 0x07, 0x22, 0xC0, 0x39, 0xCA, 0x60, 0x08, 0x68, 0x8B, 0x03, 0x18, 0x43, 0x08, 
+	0x60, 0xC8, 0x68, 0xC0, 0x07, 0x01, 0xD1, 0x64, 0x1E, 0xFA, 0xD2, 0xCA, 0x60, 0xBB, 0x48, 0x02, 
+	0x99, 0x00, 0x78, 0xBC, 0x4A, 
+	0x00, 0x01, 0x4B, 0x00, 0x80, 0xC1, 0x40, 0xBA, 0x4B, 0x12, 0x78, 0x0B, 0xE0, 0xCE, 0x07, 0x07, 
+	0xD0, 0xB9, 0x4F, 0x86, 0x00, 0xF6, 0x19, 0x36, 0x68, 0x36, 0x04, 0x76, 0x14, 0x47, 0x00, 0xDE, 
+	0x53, 0x49, 0x08, 0x40, 0x1C, 0x90, 0x42, 0xF1, 0xD3, 0xAF, 0x49, 0x08, 0x78, 0x40, 0x1C, 0x08, 
+	0x70, 0xAD, 0x48, 0x00, 0x78, 0xA8, 0x42, 0xC9, 0xD9, 0xAB, 0x49, 0x01, 0x98, 0x08, 0x70, 0xA9, 
+	0x49, 0x00, 0x98, 0x08, 0x61, 0xFE, 0xBD, 0x70, 0xB5, 0x05, 0x46, 0x00, 0x23, 0xA8, 0x4E, 0x18, 
+	0x46, 0xD4, 0x07, 0x09, 0xD0, 0x5C, 0x00, 0x34, 0x5F, 0x00, 0x29, 0x02, 0xD0, 0xAC, 0x42, 0x03, 
+	0xDD, 0x01, 0xE0, 0xAC, 0x42, 0x00, 0xDA, 0x01, 0x20, 0x5B, 0x1C, 0x52, 0x08, 0xF0, 0xD1, 0x70, 
+	0xBD, 0xFF, 0xB5, 0x81, 0xB0, 0xD0, 0xB2, 0x03, 0x90, 0x98, 0x48, 0x1F, 0x46, 0x60, 0x30, 0xC0, 
+	0x7B, 0xF8, 0xF7, 0xF8, 0xF8, 
+	0x00, 0x01, 0x4C, 0x00, 0x80, 0x00, 0x25, 0x80, 0x24, 0xFE, 0x26, 0x96, 0x49, 0x25, 0x43, 0x08, 
+	0x68, 0xB0, 0x43, 0x28, 0x43, 0x08, 0x60, 0x03, 0x98, 0xFF, 0xF7, 0x7F, 0xFF, 0x01, 0xA8, 0x07, 
+	0xC8, 0xB8, 0x47, 0x00, 0x28, 0x00, 0xD0, 0xA5, 0x43, 0x64, 0x08, 0x34, 0x40, 0xED, 0xD1, 0x28, 
+	0x46, 0x05, 0xB0, 0xF0, 0xBD, 0x70, 0xB5, 0x05, 0x46, 0x00, 0x23, 0x8D, 0x4E, 0x01, 0x20, 0xD4, 
+	0x07, 0x09, 0xD0, 0x5C, 0x00, 0x34, 0x5F, 0x00, 0x29, 0x02, 0xD0, 0xAC, 0x42, 0x03, 0xDC, 0x01, 
+	0xE0, 0xAC, 0x42, 0x00, 0xDB, 0x00, 0x20, 0x5B, 0x1C, 0x52, 0x08, 0xF0, 0xD1, 0x70, 0xBD, 0xFF, 
+	0xB5, 0x81, 0xB0, 0x7A, 0x48, 0x0A, 0x9F, 0x09, 0x22, 0x81, 0x68, 0xD2, 0x01, 0x38, 0x46, 0x02, 
+	0xF0, 0x89, 0xFE, 0x00, 0x26, 0x4A, 0xE0, 0x28, 0x20, 0x0D, 0x99, 0x70, 0x43, 0x44, 0x18, 0xA0, 
+	0x68, 0x80, 0x47, 0x78, 0x48, 
+	0x00, 0x01, 0x4D, 0x00, 0x80, 0xC0, 0x38, 0x81, 0x68, 0x01, 0x22, 0xC9, 0xB2, 0xD2, 0x02, 0x89, 
+	0x18, 0x81, 0x60, 0x03, 0x98, 0x00, 0x28, 0x09, 0xD0, 0x72, 0x49, 0x80, 0x39, 0x48, 0x6A, 0x03, 
+	0x22, 0x12, 0x07, 0x90, 0x43, 0x04, 0x9A, 0x12, 0x07, 0x10, 0x43, 0x48, 0x62, 0x01, 0x98, 0x00, 
+	0x28, 0x07, 0xD0, 0x6C, 0x48, 0x01, 0x68, 0x02, 0x9A, 0x09, 0x0A, 0x09, 0x02, 0x11, 0x43, 0x01, 
+	0x60, 0x02, 0xE0, 0x20, 0x46, 0x00, 0xF0, 0xE8, 0xFB, 0x00, 0x25, 0x15, 0xE0, 0xFE, 0xF7, 0x62, 
+	0xFD, 0x21, 0x69, 0x28, 0x46, 0x88, 0x47, 0xE1, 0x68, 0x28, 0x46, 0x88, 0x47, 0x02, 0x46, 0xE9, 
+	0x00, 0x20, 0x6A, 0x69, 0x18, 0x43, 0x18, 0x24, 0x20, 0x01, 0x57, 0x20, 0x68, 0x00, 0xF0, 0x96, 
+	0xFB, 0x61, 0x69, 0x28, 0x46, 0x88, 0x47, 0x6D, 0x1C, 0x60, 0x68, 0xA8, 0x42, 0xE6, 0xD8, 0xA0, 
+	0x69, 0x00, 0x28, 0x02, 0xD0, 
+	0x00, 0x01, 0x4E, 0x00, 0x80, 0xE1, 0x69, 0x09, 0x78, 0x01, 0x70, 0x76, 0x1C, 0x0C, 0x98, 0x86, 
+	0x42, 0xB1, 0xD3, 0x00, 0x20, 0x59, 0x4A, 0x0F, 0x21, 0x83, 0x00, 0x9B, 0x18, 0x19, 0x60, 0x40, 
+	0x1C, 0x41, 0x28, 0xF9, 0xD3, 0x0B, 0x98, 0x00, 0x28, 0x82, 0xD0, 0xB9, 0x1C, 0x48, 0x48, 0x01, 
+	0xF0, 0xC9, 0xFF, 0x38, 0x80, 0x45, 0x48, 0x80, 0x68, 0xC4, 0x09, 0x25, 0x46, 0x09, 0x35, 0x05, 
+	0xE0, 0xA0, 0xB2, 0x39, 0x46, 0x02, 0xF0, 0x02, 0xF8, 0x80, 0x37, 0x64, 0x1C, 0xAC, 0x42, 0xF7, 
+	0xD3, 0x6E, 0xE7, 0x70, 0xB5, 0x05, 0x46, 0x0C, 0x46, 0x00, 0xF0, 0x55, 0xFB, 0x06, 0x46, 0x01, 
+	0x46, 0x28, 0x46, 0x02, 0xF0, 0x80, 0xFE, 0x20, 0x60, 0x70, 0x43, 0x28, 0x1A, 0x81, 0x07, 0x89, 
+	0x0F, 0x21, 0x61, 0x3A, 0x49, 0x60, 0x60, 0x40, 0x31, 0xC9, 0x69, 0x41, 0x4A, 0x02, 0x29, 0x08, 
+	0xD1, 0x11, 0x78, 0x8B, 0x08, 
+	0x00, 0x01, 0x4F, 0x00, 0x80, 0x9B, 0x00, 0x83, 0x42, 0x02, 0xD9, 0x80, 0x08, 0x80, 0x00, 0x00, 
+	0xE0, 0x08, 0x1F, 0x3C, 0x49, 0x09, 0x78, 0x43, 0x18, 0xA3, 0x60, 0x12, 0x78, 0x52, 0x08, 0x82, 
+	0x42, 0x04, 0xD9, 0x2E, 0x48, 0x00, 0x6A, 0x40, 0x1E, 0xE0, 0x60, 0x70, 0xBD, 0xE1, 0x60, 0x70, 
+	0xBD, 0x70, 0xB5, 0x86, 0xB0, 0x01, 0xA9, 0xFF, 0xF7, 0xCC, 0xFF, 0x33, 0x4E, 0x03, 0x98, 0x27, 
+	0x49, 0x80, 0x19, 0x40, 0x31, 0xC9, 0x69, 0x0F, 0x24, 0x2C, 0x4D, 0x02, 0x29, 0x27, 0xD1, 0x23, 
+	0x49, 0x60, 0x31, 0x49, 0x7C, 0x00, 0x29, 0x0A, 0xD0, 0x2A, 0x49, 0x03, 0x98, 0x09, 0x78, 0x40, 
+	0x1A, 0xC0, 0x1C, 0x80, 0x05, 0x00, 0x0E, 0xFF, 0x21, 0xF7, 0xF7, 0xD0, 0xFF, 0x0F, 0xE0, 0x01, 
+	0x78, 0x89, 0x00, 0x49, 0x19, 0x0C, 0x60, 0x41, 0x78, 0x89, 0x00, 0x49, 0x19, 0x0C, 0x60, 0x81, 
+	0x78, 0x89, 0x00, 0x49, 0x19, 
+	0x00, 0x01, 0x50, 0x00, 0x80, 0x0C, 0x60, 0xC0, 0x78, 0x80, 0x00, 0x40, 0x19, 0x04, 0x60, 0x1F, 
+	0x48, 0x00, 0x78, 0x30, 0x5C, 0x80, 0x00, 0x40, 0x19, 0x04, 0x60, 0x06, 0xB0, 0x70, 0xBD, 0x00, 
+	0x78, 0xF2, 0xE7, 0x70, 0xB5, 0x18, 0x4A, 0x0D, 0x4B, 0x12, 0x18, 0x40, 0x33, 0xDC, 0x69, 0x13, 
+	0x4B, 0x02, 0x2C, 0x4B, 0xD1, 0x09, 0x4C, 0x60, 0x34, 0x64, 0x7C, 0x00, 0x2C, 0x2E, 0xD0, 0x11, 
+	0x4A, 0xC9, 0xB2, 0x12, 0x78, 0x80, 0x1A, 0x23, 0xE0, 0x80, 0xE2, 0x00, 0x00, 0x70, 0x02, 0x00, 
+	0x20, 0x3A, 0x04, 0x00, 0x00, 0x02, 0xE7, 0x00, 0x00, 0x82, 0xEB, 0x00, 0x00, 0x98, 0xDF, 0x00, 
+	0x00, 0x88, 0x90, 0x00, 0x00, 0xC0, 0x00, 0x11, 0x40, 0x64, 0x02, 0x00, 0x20, 0x65, 0x02, 0x00, 
+	0x20, 0xB2, 0x03, 0x00, 0x20, 0x66, 0x02, 0x00, 0x20, 0x00, 0x02, 0x11, 0x40, 0x00, 0x04, 0x11, 
+	0x40, 0x9D, 0x00, 0x00, 0x20, 
+	0x00, 0x01, 0x51, 0x00, 0x80, 0x9E, 0x00, 0x00, 0x20, 0xC0, 0xE0, 0x00, 0x00, 0xA6, 0x00, 0x00, 
+	0x20, 0xC0, 0x1C, 0x00, 0x06, 0x80, 0x0E, 0xF7, 0xF7, 0x79, 0xFF, 0x70, 0xBD, 0x08, 0x01, 0x15, 
+	0x78, 0xFD, 0x49, 0xAD, 0x00, 0x0C, 0x58, 0xED, 0x18, 0x2C, 0x60, 0x54, 0x78, 0x40, 0x18, 0xA4, 
+	0x00, 0xE4, 0x18, 0x41, 0x68, 0x21, 0x60, 0x94, 0x78, 0x81, 0x68, 0xA4, 0x00, 0xE4, 0x18, 0x21, 
+	0x60, 0xC0, 0x68, 0xD1, 0x78, 0x89, 0x00, 0xC9, 0x18, 0x08, 0x60, 0x70, 0xBD, 0x01, 0x20, 0x11, 
+	0x78, 0xF8, 0xE7, 0x00, 0xB5, 0x85, 0xB0, 0x69, 0x46, 0xFF, 0xF7, 0x3B, 0xFF, 0x01, 0x98, 0x00, 
+	0x28, 0x02, 0xD1, 0x00, 0x98, 0xF7, 0xF7, 0xDB, 0xFF, 0x03, 0x98, 0xEC, 0x49, 0xC0, 0xB2, 0x08, 
+	0x70, 0xEB, 0x49, 0x09, 0x69, 0x00, 0x29, 0x06, 0xD0, 0xEA, 0x4A, 0x0C, 0x21, 0x10, 0x5C, 0xEA, 
+	0x4A, 0x80, 0x00, 0x80, 0x18, 
+	0x00, 0x01, 0x52, 0x00, 0x80, 0x01, 0x60, 0x04, 0x99, 0x02, 0x98, 0xFF, 0xF7, 0x8A, 0xFF, 0x05, 
+	0xB0, 0x00, 0xBD, 0x00, 0xB5, 0x85, 0xB0, 0x69, 0x46, 0xFF, 0xF7, 0x1B, 0xFF, 0x00, 0x98, 0x16, 
+	0x21, 0x48, 0x43, 0xE2, 0x49, 0x08, 0x5A, 0xF2, 0xE7, 0x70, 0xB5, 0x04, 0x46, 0xE0, 0x48, 0x0D, 
+	0x46, 0x40, 0x6A, 0x20, 0x60, 0x00, 0xF0, 0x67, 0xFA, 0xD9, 0x49, 0x40, 0x39, 0xC9, 0x6A, 0x48, 
+	0x43, 0x60, 0x60, 0xDC, 0x48, 0xA0, 0x60, 0xDC, 0x48, 0xE0, 0x60, 0xDC, 0x48, 0x20, 0x61, 0xDC, 
+	0x48, 0x60, 0x61, 0xDC, 0x48, 0xA0, 0x61, 0xA8, 0x1C, 0x0C, 0x35, 0x25, 0x62, 0xE0, 0x61, 0x01, 
+	0x20, 0x20, 0x34, 0x20, 0x71, 0x70, 0xBD, 0x30, 0xB5, 0x0D, 0x46, 0x8F, 0xB0, 0x04, 0x46, 0x01, 
+	0x46, 0x05, 0xA8, 0xFF, 0xF7, 0xD9, 0xFF, 0x05, 0xAA, 0x03, 0x92, 0x00, 0x22, 0x01, 0x21, 0x02, 
+	0x91, 0x01, 0x95, 0x00, 0x94, 
+	0x00, 0x01, 0x53, 0x00, 0x80, 0x11, 0x46, 0x10, 0x46, 0x13, 0x46, 0xFF, 0xF7, 0x68, 0xFE, 0x0F, 
+	0xB0, 0x30, 0xBD, 0xF0, 0xB5, 0x8F, 0xB0, 0x06, 0x46, 0x0C, 0x46, 0x15, 0x46, 0x1F, 0x46, 0x11, 
+	0x46, 0x05, 0xA8, 0xFF, 0xF7, 0xC1, 0xFF, 0x05, 0xAA, 0x01, 0x21, 0x03, 0x92, 0x02, 0x91, 0x0A, 
+	0x46, 0x23, 0x46, 0x01, 0x97, 0x00, 0x95, 0x31, 0x46, 0x01, 0x20, 0xFF, 0xF7, 0x50, 0xFE, 0x0F, 
+	0xB0, 0xF0, 0xBD, 0x30, 0xB5, 0xC0, 0x48, 0xC1, 0x49, 0x00, 0x78, 0x09, 0x78, 0xB5, 0x4A, 0x43, 
+	0x18, 0x00, 0x20, 0x02, 0x21, 0xB4, 0x4C, 0x04, 0xE0, 0x15, 0x5C, 0xAD, 0x00, 0x2D, 0x19, 0x29, 
+	0x60, 0x40, 0x1C, 0x83, 0x42, 0xF8, 0xD8, 0x30, 0xBD, 0xAD, 0x49, 0x10, 0xB5, 0x40, 0x39, 0x09, 
+	0x6B, 0x08, 0x18, 0xF7, 0xF7, 0x54, 0xFF, 0x10, 0xBD, 0x10, 0xB5, 0x04, 0x46, 0x00, 0x21, 0x02, 
+	0x20, 0xF7, 0xF7, 0x7C, 0xFB, 
+	0x00, 0x01, 0x54, 0x00, 0x80, 0x01, 0x19, 0xA6, 0x48, 0x40, 0x38, 0x00, 0x6B, 0x08, 0x18, 0x16, 
+	0x21, 0x48, 0x43, 0xA6, 0x49, 0x08, 0x5A, 0x10, 0xBD, 0x10, 0xB5, 0xF7, 0xF7, 0x40, 0xFF, 0x10, 
+	0xBD, 0x10, 0xB5, 0x04, 0x46, 0x00, 0x21, 0x01, 0x20, 0xF7, 0xF7, 0x68, 0xFB, 0x00, 0x19, 0x16, 
+	0x21, 0x48, 0x43, 0x9E, 0x49, 0x08, 0x5A, 0x10, 0xBD, 0xF3, 0xB5, 0x99, 0xB0, 0x04, 0x46, 0x00, 
+	0xF0, 0xE2, 0xF9, 0x97, 0x49, 0x40, 0x39, 0xCA, 0x6A, 0x99, 0x4D, 0x50, 0x43, 0xAA, 0x6A, 0x05, 
+	0x92, 0x0A, 0x6B, 0x06, 0x92, 0x9F, 0x4A, 0x08, 0x92, 0x9F, 0x4A, 0x09, 0x92, 0x99, 0x4A, 0x9C, 
+	0x4E, 0x52, 0x1C, 0x0B, 0x92, 0x07, 0x96, 0xE2, 0x1C, 0x0C, 0x92, 0xC2, 0x00, 0x82, 0x18, 0x12, 
+	0x19, 0x0C, 0x32, 0x9A, 0x4F, 0x0D, 0x92, 0x0A, 0x97, 0x00, 0x22, 0x08, 0xAB, 0x1A, 0x76, 0xAB, 
+	0x6A, 0x0F, 0x93, 0x4B, 0x6B, 
+	0x00, 0x01, 0x55, 0x00, 0x80, 0x10, 0x93, 0x96, 0x4B, 0x12, 0x93, 0x96, 0x4B, 0x13, 0x93, 0x8D, 
+	0x4B, 0x11, 0x96, 0x9B, 0x1C, 0x15, 0x93, 0x23, 0x1D, 0x14, 0x97, 0x16, 0x93, 0x09, 0x6B, 0x18, 
+	0xAB, 0x08, 0x18, 0xC1, 0x00, 0x40, 0x18, 0x00, 0x19, 0x0C, 0x30, 0x17, 0x90, 0x1A, 0x70, 0x1A, 
+	0x98, 0x00, 0x94, 0x05, 0xAA, 0x02, 0x21, 0x01, 0xAC, 0x07, 0xC4, 0x00, 0x22, 0x11, 0x46, 0x10, 
+	0x46, 0x13, 0x46, 0xFF, 0xF7, 0xCC, 0xFD, 0x1B, 0xB0, 0xF0, 0xBD, 0x70, 0x47, 0x70, 0x47, 0x10, 
+	0xB5, 0x00, 0x21, 0x08, 0x20, 0xF7, 0xF7, 0x12, 0xFB, 0x16, 0x21, 0x48, 0x43, 0x73, 0x49, 0x08, 
+	0x5A, 0x10, 0xBD, 0x10, 0xB5, 0xF7, 0xF7, 0x20, 0xFD, 0xF7, 0xF7, 0xDF, 0xFC, 0xF8, 0xF7, 0x42, 
+	0xF8, 0x10, 0xBD, 0x10, 0xB5, 0xF7, 0xF7, 0x18, 0xFD, 0x00, 0x20, 0xF7, 0xF7, 0xD0, 0xFE, 0x10, 
+	0xBD, 0xF7, 0xB5, 0x67, 0x48, 
+	0x00, 0x01, 0x56, 0x00, 0x80, 0x0C, 0x46, 0x05, 0x6A, 0x00, 0x26, 0x07, 0x46, 0x40, 0x3F, 0xB8, 
+	0x6A, 0x00, 0x28, 0x01, 0xD1, 0x01, 0x20, 0xFE, 0xBD, 0x03, 0x2D, 0x04, 0xD0, 0x01, 0x2D, 0x01, 
+	0xD1, 0x02, 0x25, 0x00, 0xE0, 0x01, 0x25, 0x00, 0xF0, 0x6E, 0xF9, 0xF9, 0x6A, 0x48, 0x43, 0xB9, 
+	0x6B, 0x40, 0x18, 0xF9, 0x6B, 0x01, 0x23, 0x41, 0x18, 0xE8, 0x07, 0x5D, 0x4F, 0x6A, 0x4A, 0x00, 
+	0x28, 0x18, 0xD0, 0x38, 0x6B, 0x63, 0x60, 0x20, 0x60, 0x68, 0x48, 0xE2, 0x60, 0xA0, 0x60, 0x68, 
+	0x48, 0x20, 0x61, 0x68, 0x48, 0x60, 0x61, 0x5B, 0x48, 0xC0, 0x1C, 0xA0, 0x61, 0x02, 0x98, 0xC0, 
+	0x1D, 0xE0, 0x61, 0xC8, 0x00, 0x02, 0x9E, 0x08, 0x18, 0x80, 0x19, 0x0C, 0x30, 0x20, 0x62, 0x24, 
+	0x20, 0x03, 0x55, 0x01, 0x26, 0xA8, 0x07, 0x1D, 0xD5, 0x3D, 0x6B, 0x30, 0x46, 0x28, 0x27, 0x78, 
+	0x43, 0x25, 0x50, 0x00, 0x19, 
+	0x00, 0x01, 0x57, 0x00, 0x80, 0x43, 0x60, 0x5C, 0x4B, 0x83, 0x60, 0xC2, 0x60, 0x58, 0x4A, 0x02, 
+	0x61, 0x58, 0x4A, 0x42, 0x61, 0x4B, 0x4A, 0x12, 0x1D, 0x82, 0x61, 0x02, 0x9A, 0x08, 0x32, 0xC2, 
+	0x61, 0xCA, 0x00, 0x8A, 0x18, 0x02, 0x99, 0x51, 0x18, 0x15, 0x31, 0x01, 0x62, 0x00, 0x21, 0x20, 
+	0x30, 0x01, 0x71, 0x76, 0x1C, 0x00, 0x98, 0x06, 0x60, 0x00, 0x20, 0xFE, 0xBD, 0x30, 0xB5, 0x99, 
+	0xB0, 0x04, 0x46, 0x0D, 0x46, 0x02, 0x46, 0x05, 0xA9, 0x04, 0xA8, 0xFF, 0xF7, 0x99, 0xFF, 0x00, 
+	0x28, 0x0B, 0xD1, 0x05, 0xAA, 0x03, 0x92, 0x00, 0x22, 0x04, 0x99, 0x02, 0x91, 0x01, 0x95, 0x00, 
+	0x94, 0x11, 0x46, 0x10, 0x46, 0x13, 0x46, 0xFF, 0xF7, 0x3A, 0xFD, 0x19, 0xB0, 0x30, 0xBD, 0xF0, 
+	0xB5, 0x99, 0xB0, 0x05, 0x46, 0x0C, 0x46, 0x16, 0x46, 0x1F, 0x46, 0x05, 0xA9, 0x04, 0xA8, 0xFF, 
+	0xF7, 0x7F, 0xFF, 0x00, 0x28, 
+	0x00, 0x01, 0x58, 0x00, 0x80, 0x0B, 0xD1, 0x05, 0xAA, 0x04, 0x99, 0x03, 0x92, 0x02, 0x91, 0x01, 
+	0x22, 0x23, 0x46, 0x01, 0x97, 0x00, 0x96, 0x29, 0x46, 0x10, 0x46, 0xFF, 0xF7, 0x20, 0xFD, 0x19, 
+	0xB0, 0xF0, 0xBD, 0xF0, 0xB5, 0x00, 0x23, 0x8C, 0x46, 0x06, 0x46, 0x34, 0x49, 0x18, 0x46, 0x1D, 
+	0x46, 0x1C, 0x46, 0xD7, 0x07, 0x03, 0xD0, 0x5F, 0x00, 0xCF, 0x5F, 0x7D, 0x19, 0x64, 0x1C, 0x5B, 
+	0x1C, 0x52, 0x08, 0xF6, 0xD1, 0x2E, 0x4A, 0xA1, 0x00, 0x51, 0x58, 0x62, 0x46, 0x69, 0x43, 0x09, 
+	0x12, 0x00, 0x2A, 0x03, 0xD0, 0xB1, 0x42, 0x00, 0xDD, 0x01, 0x20, 0xF0, 0xBD, 0xB1, 0x42, 0xFB, 
+	0xDB, 0xF0, 0xBD, 0x70, 0xB5, 0x0C, 0x46, 0x27, 0x49, 0x15, 0x46, 0x8A, 0x68, 0x01, 0x23, 0xD2, 
+	0xB2, 0xDB, 0x02, 0xD2, 0x18, 0x8A, 0x60, 0x01, 0x46, 0x23, 0x48, 0x00, 0x78, 0xF7, 0xF7, 0x3E, 
+	0xFA, 0x16, 0x21, 0x48, 0x43, 
+	0x00, 0x01, 0x59, 0x00, 0x80, 0x09, 0x49, 0x0A, 0x5A, 0x21, 0x46, 0x28, 0x46, 0x1F, 0x4B, 0xFF, 
+	0xF7, 0xAF, 0xFC, 0xC0, 0xB2, 0x70, 0xBD, 0x00, 0x00, 0x58, 0xD6, 0x00, 0x00, 0xA6, 0x00, 0x00, 
+	0x20, 0xD8, 0xDF, 0x00, 0x00, 0xC0, 0xE0, 0x00, 0x00, 0x00, 0x04, 0x11, 0x40, 0x2C, 0xE1, 0x00, 
+	0x00, 0x54, 0xE0, 0x00, 0x00, 0x3D, 0x21, 0x00, 0x00, 0x0F, 0xA9, 0x00, 0x00, 0xCF, 0xA8, 0x00, 
+	0x00, 0xAD, 0xA7, 0x00, 0x00, 0x70, 0x02, 0x00, 0x20, 0x9E, 0x00, 0x00, 0x20, 0x9D, 0x00, 0x00, 
+	0x20, 0xEB, 0x22, 0x00, 0x00, 0x1D, 0xAA, 0x00, 0x00, 0x15, 0xAA, 0x00, 0x00, 0xBF, 0xA9, 0x00, 
+	0x00, 0xF5, 0xA9, 0x00, 0x00, 0xE5, 0xA9, 0x00, 0x00, 0xCB, 0xAA, 0x00, 0x00, 0xEF, 0xAA, 0x00, 
+	0x00, 0xC9, 0xAA, 0x00, 0x00, 0xC7, 0xAA, 0x00, 0x00, 0xDF, 0xAA, 0x00, 0x00, 0xB2, 0x03, 0x00, 
+	0x20, 0x98, 0xD8, 0x00, 0x00, 
+	0x00, 0x01, 0x5A, 0x00, 0x80, 0x00, 0x00, 0x11, 0x40, 0xA8, 0x00, 0x00, 0x20, 0x1F, 0xAC, 0x00, 
+	0x00, 0x70, 0xB5, 0xF7, 0xF7, 0x15, 0xFA, 0x87, 0x48, 0x00, 0x25, 0x00, 0x78, 0x40, 0x08, 0x84, 
+	0x08, 0xA4, 0x00, 0x28, 0x46, 0xF7, 0xF7, 0xBB, 0xFD, 0x20, 0x46, 0xF7, 0xF7, 0x18, 0xFD, 0x82, 
+	0x48, 0x01, 0x78, 0x08, 0x19, 0x00, 0x21, 0xFF, 0xF7, 0x74, 0xFD, 0x80, 0x48, 0xC0, 0x7B, 0xF7, 
+	0xF7, 0x59, 0xFD, 0x7F, 0x48, 0x42, 0x6A, 0x01, 0x21, 0x28, 0x46, 0xFF, 0xF7, 0x8A, 0xFF, 0xA1, 
+	0xE7, 0x10, 0xB5, 0xF7, 0xF7, 0xCC, 0xFA, 0x79, 0x48, 0x60, 0x38, 0x00, 0x6B, 0x44, 0x08, 0x20, 
+	0x46, 0xF7, 0xF7, 0xFD, 0xFC, 0x20, 0x46, 0xF7, 0xF7, 0x9A, 0xFD, 0x76, 0x48, 0x00, 0x68, 0x00, 
+	0x28, 0x03, 0xD0, 0x72, 0x48, 0xC0, 0x7B, 0xF7, 0xF7, 0x3D, 0xFD, 0x71, 0x48, 0x82, 0x6A, 0x00, 
+	0x21, 0x20, 0x46, 0xFF, 0xF7, 
+	0x00, 0x01, 0x5B, 0x00, 0x80, 0x6E, 0xFF, 0x10, 0xBD, 0x10, 0xB5, 0xF7, 0xF7, 0xB0, 0xFA, 0x6B, 
+	0x48, 0x60, 0x38, 0x01, 0x6B, 0x40, 0x6B, 0x40, 0x08, 0x0C, 0x18, 0x20, 0x46, 0xF7, 0xF7, 0xDF, 
+	0xFC, 0x20, 0x46, 0xF7, 0xF7, 0x7C, 0xFD, 0x67, 0x48, 0x00, 0x68, 0x00, 0x28, 0x03, 0xD0, 0x63, 
+	0x48, 0xC0, 0x7B, 0xF7, 0xF7, 0x1F, 0xFD, 0x62, 0x48, 0x82, 0x6A, 0x00, 0x21, 0x20, 0x46, 0xFF, 
+	0xF7, 0x50, 0xFF, 0x10, 0xBD, 0x10, 0xB5, 0xF7, 0xF7, 0xAF, 0xFB, 0x00, 0x20, 0xF7, 0xF7, 0xC7, 
+	0xFC, 0x00, 0x20, 0xF7, 0xF7, 0x64, 0xFD, 0x5A, 0x48, 0x02, 0x6B, 0x01, 0x21, 0x00, 0x20, 0xFF, 
+	0xF7, 0x40, 0xFF, 0x10, 0xBD, 0x10, 0xB5, 0xF7, 0xF7, 0x9F, 0xFB, 0xF7, 0xF7, 0x5E, 0xFB, 0xF7, 
+	0xF7, 0xC1, 0xFE, 0x01, 0x20, 0xF7, 0xF7, 0xB3, 0xFC, 0x51, 0x48, 0x02, 0x6B, 0x00, 0x21, 0x08, 
+	0x46, 0xFF, 0xF7, 0x2F, 0xFF, 
+	0x00, 0x01, 0x5C, 0x00, 0x80, 0x10, 0xBD, 0x4D, 0x49, 0x4A, 0x48, 0x20, 0x39, 0x00, 0x78, 0xC9, 
+	0x69, 0x02, 0x29, 0x02, 0xD1, 0xC0, 0x1C, 0x80, 0x08, 0x80, 0x00, 0x70, 0x47, 0xFF, 0xB5, 0x06, 
+	0x46, 0x81, 0xB0, 0xD0, 0xB2, 0x03, 0x90, 0x45, 0x48, 0x0F, 0x46, 0x1D, 0x46, 0xC0, 0x7B, 0xF7, 
+	0xF7, 0xE1, 0xFC, 0x00, 0x20, 0x01, 0x46, 0x29, 0x54, 0x40, 0x1C, 0x09, 0x28, 0xFB, 0xD3, 0x41, 
+	0x48, 0x80, 0x30, 0x41, 0x63, 0x10, 0x24, 0x3F, 0x4A, 0x00, 0x20, 0x80, 0x32, 0x29, 0x5C, 0x21, 
+	0x43, 0x0B, 0x02, 0x0B, 0x43, 0x81, 0x00, 0x89, 0x18, 0x4B, 0x61, 0x40, 0x1C, 0x08, 0x28, 0xF5, 
+	0xD3, 0x03, 0x98, 0xFF, 0xF7, 0x5A, 0xFB, 0x00, 0x20, 0x37, 0x4B, 0x03, 0x99, 0x0F, 0xE0, 0xCA, 
+	0x07, 0x0B, 0xD0, 0x42, 0x00, 0x9A, 0x5E, 0x00, 0x2F, 0x02, 0xD0, 0xB2, 0x42, 0x05, 0xDC, 0x01, 
+	0xE0, 0xB2, 0x42, 0x02, 0xDB, 
+	0x00, 0x01, 0x5D, 0x00, 0x80, 0x2A, 0x5C, 0x22, 0x43, 0x2A, 0x54, 0x49, 0x08, 0x40, 0x1C, 0x00, 
+	0x29, 0xED, 0xD1, 0x64, 0x08, 0xD7, 0xD1, 0x5B, 0xE4, 0xFE, 0xB5, 0x04, 0x46, 0x29, 0x4A, 0x00, 
+	0x20, 0x2A, 0x49, 0x80, 0x32, 0x83, 0x00, 0x9B, 0x18, 0x59, 0x61, 0x40, 0x1C, 0x09, 0x28, 0xF9, 
+	0xD3, 0x22, 0x48, 0x20, 0x38, 0x00, 0x69, 0x01, 0x28, 0x01, 0xD0, 0x00, 0x20, 0x50, 0x63, 0x00, 
+	0x27, 0xFE, 0x26, 0x20, 0x46, 0x20, 0x30, 0x3D, 0x46, 0x01, 0x90, 0x22, 0xE0, 0xFE, 0xF7, 0x62, 
+	0xF9, 0x21, 0x69, 0x28, 0x46, 0x88, 0x47, 0xE1, 0x68, 0x28, 0x46, 0x88, 0x47, 0x00, 0x90, 0x01, 
+	0x98, 0x04, 0x21, 0x41, 0x56, 0x20, 0x68, 0x1A, 0x4B, 0x00, 0x9A, 0xFF, 0xF7, 0x81, 0xFB, 0xB8, 
+	0x42, 0x00, 0xD9, 0x07, 0x46, 0x01, 0x98, 0x04, 0x21, 0x41, 0x56, 0x20, 0x68, 0x15, 0x4B, 0x00, 
+	0x9A, 0xFF, 0xF7, 0x76, 0xFB, 
+	0x00, 0x01, 0x5E, 0x00, 0x80, 0xB0, 0x42, 0x00, 0xD2, 0x06, 0x46, 0x61, 0x69, 0x28, 0x46, 0x88, 
+	0x47, 0x6D, 0x1C, 0x60, 0x68, 0xA8, 0x42, 0xD9, 0xD8, 0xB8, 0x19, 0x40, 0x08, 0xFE, 0x21, 0x08, 
+	0x40, 0xE1, 0x69, 0x08, 0x70, 0x07, 0x49, 0xC0, 0x31, 0x0A, 0x68, 0x12, 0x0A, 0x12, 0x02, 0x02, 
+	0x43, 0x0A, 0x60, 0xFE, 0xBD, 0x9D, 0x00, 0x00, 0x20, 0x9E, 0x00, 0x00, 0x20, 0xF8, 0xDF, 0x00, 
+	0x00, 0x54, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x11, 0x40, 0xB2, 0x03, 0x00, 0x20, 0x0F, 0x0F, 0x00, 
+	0x00, 0x31, 0xA6, 0x00, 0x00, 0xC3, 0xA5, 0x00, 0x00, 0x10, 0xB5, 0xFA, 0x48, 0x40, 0x69, 0xFA, 
+	0x49, 0xFA, 0x4C, 0x08, 0x70, 0x00, 0x20, 0xE0, 0x70, 0xF6, 0xF7, 0x54, 0xFB, 0x20, 0x76, 0xF5, 
+	0x48, 0x40, 0x30, 0xC0, 0x8B, 0x80, 0x07, 0xC0, 0x0F, 0x20, 0x71, 0xF5, 0x48, 0x80, 0x6A, 0x00, 
+	0x28, 0x01, 0xD0, 0x02, 0xF0, 
+	0x00, 0x01, 0x5F, 0x00, 0x80, 0x05, 0xF8, 0x10, 0xBD, 0xF0, 0x49, 0x01, 0x20, 0x48, 0x74, 0x70, 
+	0x47, 0xF7, 0xB5, 0x0F, 0x46, 0x16, 0x46, 0xEF, 0x4C, 0x03, 0x20, 0xF6, 0xF7, 0xBC, 0xFA, 0xF8, 
+	0xF7, 0x79, 0xF8, 0x00, 0x20, 0xF8, 0xF7, 0xB4, 0xF8, 0xEC, 0x4D, 0xEB, 0x48, 0x28, 0x60, 0x81, 
+	0x78, 0xEB, 0x4A, 0x11, 0x70, 0xC1, 0x78, 0xEB, 0x4A, 0x11, 0x70, 0x00, 0x79, 0xEA, 0x49, 0x08, 
+	0x70, 0xFA, 0xF7, 0xE7, 0xFF, 0xFA, 0xF7, 0xB7, 0xFF, 0x03, 0x20, 0x00, 0x99, 0xF6, 0xF7, 0x93, 
+	0xFA, 0xF8, 0xF7, 0x9E, 0xF8, 0x01, 0x21, 0x20, 0x46, 0x2F, 0x60, 0xFF, 0xF7, 0xC4, 0xFC, 0xF7, 
+	0xF7, 0xAF, 0xF8, 0xF7, 0xF7, 0xBB, 0xFC, 0xF7, 0xF7, 0x85, 0xFE, 0x00, 0x28, 0xFB, 0xD0, 0xDF, 
+	0x48, 0x00, 0x68, 0xFA, 0xF7, 0x20, 0xFF, 0x01, 0x21, 0x20, 0x46, 0xFF, 0xF7, 0x1D, 0xFD, 0xF7, 
+	0xF7, 0x76, 0xF9, 0x03, 0x20, 
+	0x00, 0x01, 0x60, 0x00, 0x80, 0xF7, 0xF7, 0xAD, 0xFD, 0xF7, 0xF7, 0x74, 0xFE, 0x00, 0x28, 0xFB, 
+	0xD0, 0xD7, 0x48, 0x01, 0x68, 0x03, 0x20, 0xFA, 0xF7, 0x6E, 0xFD, 0xCD, 0x4D, 0x68, 0x6A, 0xD5, 
+	0x49, 0x02, 0xE0, 0x40, 0x1E, 0x0A, 0x5C, 0x22, 0x54, 0x00, 0x28, 0xFA, 0xDC, 0x28, 0x6A, 0x09, 
+	0x27, 0xBF, 0x01, 0xD1, 0x49, 0x04, 0xE0, 0x40, 0x1E, 0x23, 0x18, 0x0A, 0x5C, 0xDB, 0x19, 0x1A, 
+	0x70, 0x00, 0x28, 0xF8, 0xDC, 0x68, 0x6A, 0xF1, 0x09, 0x7F, 0x30, 0xC2, 0x09, 0x20, 0x46, 0x01, 
+	0xF0, 0xBB, 0xF8, 0xF0, 0x19, 0xC1, 0x09, 0x28, 0x6A, 0xC8, 0x4A, 0xB2, 0x18, 0x80, 0x18, 0xC0, 
+	0x09, 0x42, 0x1A, 0xE0, 0x1D, 0xFF, 0x30, 0x52, 0x1C, 0xFA, 0x30, 0x01, 0xF0, 0xAD, 0xF8, 0xFE, 
+	0xBD, 0xF8, 0xB5, 0x05, 0x46, 0xB3, 0x48, 0xC0, 0x6B, 0x01, 0x28, 0x06, 0xD1, 0xB1, 0x48, 0x40, 
+	0x30, 0x00, 0x88, 0x00, 0x28, 
+	0x00, 0x01, 0x61, 0x00, 0x80, 0x01, 0xD0, 0x01, 0x27, 0x00, 0xE0, 0x00, 0x27, 0x28, 0x06, 0x01, 
+	0xD5, 0x00, 0x24, 0x06, 0xE0, 0x38, 0x46, 0xFF, 0xF7, 0xFE, 0xF9, 0x04, 0x07, 0x24, 0x0F, 0x0B, 
+	0x20, 0x44, 0x40, 0xAE, 0x48, 0x2C, 0x43, 0xAC, 0x49, 0x01, 0x60, 0x00, 0x2F, 0x07, 0xD0, 0x03, 
+	0x20, 0xF6, 0xF7, 0x31, 0xFA, 0xF7, 0xF7, 0xEE, 0xFF, 0x00, 0x20, 0xF8, 0xF7, 0x29, 0xF8, 0xA0, 
+	0x07, 0x03, 0xD5, 0x01, 0x21, 0xA3, 0x48, 0xFF, 0xF7, 0xB7, 0xFC, 0xE0, 0x07, 0x03, 0xD0, 0x01, 
+	0x21, 0xA0, 0x48, 0xFF, 0xF7, 0x48, 0xFC, 0x9E, 0x48, 0x00, 0x90, 0x80, 0x6A, 0x00, 0x28, 0x05, 
+	0xD0, 0x20, 0x07, 0x03, 0xD5, 0x01, 0x21, 0x9B, 0x48, 0xFF, 0xF7, 0x68, 0xFD, 0x09, 0x21, 0x9A, 
+	0x48, 0x09, 0x02, 0x45, 0x18, 0x49, 0x10, 0x46, 0x18, 0x00, 0x2F, 0x31, 0xD0, 0x00, 0x98, 0x80, 
+	0x6A, 0x00, 0x28, 0x0D, 0xD0, 
+	0x00, 0x01, 0x62, 0x00, 0x80, 0x20, 0x07, 0x0B, 0xD5, 0x94, 0x48, 0x01, 0x21, 0x06, 0x60, 0x91, 
+	0x48, 0xFF, 0xF7, 0x54, 0xFD, 0x91, 0x48, 0x01, 0x21, 0x05, 0x60, 0x8E, 0x48, 0xFF, 0xF7, 0x4E, 
+	0xFD, 0xA0, 0x07, 0x1D, 0xD0, 0x89, 0x4C, 0x40, 0x21, 0x60, 0x8B, 0x08, 0x43, 0x60, 0x83, 0x01, 
+	0x20, 0xFA, 0xF7, 0xC3, 0xFA, 0x00, 0x20, 0xFA, 0xF7, 0xD0, 0xFA, 0x91, 0x4A, 0x31, 0x46, 0x00, 
+	0x20, 0xFF, 0xF7, 0x26, 0xFF, 0x8F, 0x4A, 0x29, 0x46, 0x01, 0x20, 0xFF, 0xF7, 0x21, 0xFF, 0x00, 
+	0x20, 0xFA, 0xF7, 0xB3, 0xFA, 0x60, 0x8B, 0x40, 0x21, 0x88, 0x43, 0x60, 0x83, 0xF6, 0xF7, 0x57, 
+	0xFF, 0x7D, 0x48, 0x82, 0x78, 0x79, 0x49, 0x1E, 0x31, 0x0A, 0x70, 0xB2, 0x78, 0x4A, 0x70, 0xAA, 
+	0x78, 0x8A, 0x70, 0xC3, 0x78, 0xCA, 0x1C, 0x13, 0x70, 0xF3, 0x78, 0x53, 0x70, 0xEB, 0x78, 0x93, 
+	0x70, 0x04, 0x79, 0x8B, 0x1D, 
+	0x00, 0x01, 0x63, 0x00, 0x80, 0x1C, 0x70, 0x34, 0x79, 0x5C, 0x70, 0x2C, 0x79, 0x9C, 0x70, 0x74, 
+	0x4C, 0x09, 0x78, 0x21, 0x70, 0x11, 0x78, 0x73, 0x4A, 0x00, 0x2F, 0x11, 0x70, 0x72, 0x4A, 0x19, 
+	0x78, 0x11, 0x70, 0x6E, 0x49, 0x08, 0x60, 0x05, 0xD0, 0x00, 0x20, 0xF7, 0xF7, 0xB1, 0xFF, 0x00, 
+	0x20, 0xF7, 0xF7, 0x70, 0xFF, 0xFA, 0xF7, 0xED, 0xFE, 0xFA, 0xF7, 0xBD, 0xFE, 0xF8, 0xBD, 0x70, 
+	0x47, 0x70, 0xB5, 0x62, 0x4C, 0x01, 0x26, 0x20, 0x78, 0x00, 0x28, 0x02, 0xD1, 0x26, 0x70, 0xFF, 
+	0xF7, 0xC3, 0xFE, 0x6D, 0x48, 0xF7, 0xF7, 0xD3, 0xFE, 0x00, 0x25, 0x25, 0x63, 0x65, 0x63, 0xFF, 
+	0xF7, 0x40, 0xF9, 0xF6, 0xF7, 0x08, 0xFF, 0xFA, 0xF7, 0x5E, 0xFA, 0xF8, 0xF7, 0xA6, 0xFB, 0x01, 
+	0xF0, 0xCD, 0xFE, 0x01, 0xF0, 0x20, 0xFB, 0xF8, 0xF7, 0x2B, 0xF8, 0x01, 0xF0, 0xB5, 0xFE, 0xF6, 
+	0xF7, 0x67, 0xFA, 0xF6, 0xF7, 
+	0x00, 0x01, 0x64, 0x00, 0x80, 0x9D, 0xF9, 0xF6, 0xF7, 0xC3, 0xF9, 0xF6, 0xF7, 0x13, 0xFA, 0x51, 
+	0x48, 0x50, 0x49, 0x21, 0x64, 0xE0, 0x38, 0xE0, 0x63, 0x70, 0x39, 0x61, 0x64, 0x5B, 0x49, 0xA1, 
+	0x64, 0xF7, 0xF7, 0xB8, 0xFE, 0x20, 0x6C, 0xF7, 0xF7, 0xB0, 0xFE, 0xE0, 0x6B, 0xF7, 0xF7, 0xB7, 
+	0xFE, 0x00, 0x20, 0xFF, 0xF7, 0x1D, 0xFF, 0x43, 0x48, 0xE5, 0x73, 0xC0, 0x6B, 0x01, 0x28, 0x0A, 
+	0xD1, 0x00, 0xF0, 0xB3, 0xFF, 0xF6, 0xF7, 0x0C, 0xFF, 0x00, 0x28, 0x03, 0xD1, 0xF7, 0xF7, 0x19, 
+	0xFF, 0x00, 0x28, 0x00, 0xD0, 0xE6, 0x73, 0xA5, 0x63, 0xE5, 0x71, 0x25, 0x72, 0xA5, 0x74, 0xA5, 
+	0x75, 0x65, 0x83, 0xA5, 0x83, 0x3A, 0x48, 0x65, 0x71, 0x80, 0x6A, 0x00, 0x28, 0x01, 0xD0, 0x01, 
+	0xF0, 0x93, 0xFE, 0x66, 0x74, 0x70, 0xBD, 0x10, 0xB5, 0xF6, 0xF7, 0xE5, 0xFE, 0x33, 0x49, 0x00, 
+	0x20, 0x48, 0x71, 0x10, 0xBD, 
+	0x00, 0x01, 0x65, 0x00, 0x80, 0xF8, 0xB5, 0x31, 0x4D, 0x00, 0x24, 0x06, 0x46, 0xAC, 0x70, 0xFB, 
+	0xF7, 0x69, 0xFB, 0x07, 0x46, 0x62, 0xB6, 0x68, 0x79, 0x17, 0x28, 0x06, 0xD2, 0x3C, 0x49, 0x80, 
+	0x00, 0x09, 0x58, 0x30, 0x46, 0x88, 0x47, 0x04, 0x46, 0x04, 0xE0, 0xF6, 0xF7, 0xCC, 0xFE, 0x00, 
+	0x20, 0x68, 0x71, 0x08, 0x24, 0x72, 0xB6, 0xE0, 0x07, 0x05, 0xD0, 0xF7, 0xF7, 0x1B, 0xFD, 0x01, 
+	0x28, 0x01, 0xD1, 0xC0, 0x07, 0x04, 0x43, 0x00, 0x2C, 0xE4, 0xDB, 0xF8, 0xB2, 0xFB, 0xF7, 0x4E, 
+	0xFB, 0x1C, 0x48, 0x40, 0x30, 0x80, 0x8B, 0x00, 0x28, 0x02, 0xD1, 0xF6, 0xF7, 0x31, 0xF9, 0x10, 
+	0xE0, 0xF6, 0xF7, 0xBE, 0xFE, 0x00, 0x28, 0x03, 0xD0, 0xEE, 0x62, 0xF6, 0xF7, 0x38, 0xF9, 0x08, 
+	0xE0, 0x14, 0x4A, 0xE9, 0x6A, 0x92, 0x6D, 0x28, 0x46, 0x71, 0x1A, 0x91, 0x42, 0x01, 0xD9, 0xC6, 
+	0x62, 0xEB, 0xE7, 0xA9, 0x8B, 
+	0x00, 0x01, 0x66, 0x00, 0x80, 0x20, 0x46, 0x08, 0x43, 0xF8, 0xBD, 0xF8, 0xB5, 0x09, 0x26, 0x1C, 
+	0x4B, 0x20, 0x4C, 0x21, 0x4D, 0xB6, 0x01, 0x1B, 0x4F, 0x0D, 0x4A, 0x00, 0x29, 0x7B, 0xD0, 0x01, 
+	0x29, 0x03, 0xD0, 0x02, 0x29, 0x78, 0xD1, 0x00, 0x20, 0x70, 0xE0, 0x00, 0x28, 0x44, 0xD1, 0x04, 
+	0xE0, 0x21, 0x5C, 0x1F, 0x5C, 0xC9, 0x19, 0x21, 0x54, 0x40, 0x1C, 0x51, 0x6A, 0x81, 0x42, 0xF7, 
+	0xD8, 0x00, 0x20, 0x35, 0xE0, 0x78, 0xDC, 0x00, 0x00, 0x29, 0x01, 0x00, 0x20, 0x7C, 0x02, 0x00, 
+	0x20, 0x98, 0xDF, 0x00, 0x00, 0xE0, 0x11, 0x00, 0x20, 0x80, 0xE2, 0x00, 0x00, 0x78, 0x02, 0x00, 
+	0x20, 0x70, 0x02, 0x00, 0x20, 0x71, 0x02, 0x00, 0x20, 0x72, 0x02, 0x00, 0x20, 0xE0, 0x00, 0x00, 
+	0x20, 0xE4, 0x00, 0x00, 0x20, 0x6C, 0x09, 0x00, 0x20, 0xAC, 0x0B, 0x00, 0x20, 0xBF, 0x02, 0x00, 
+	0x00, 0x00, 0xF6, 0x00, 0x00, 
+	0x00, 0x01, 0x67, 0x00, 0x80, 0x80, 0xFA, 0x00, 0x00, 0xBB, 0xB1, 0x00, 0x00, 0xC8, 0x14, 0x00, 
+	0x20, 0x74, 0xD9, 0x00, 0x00, 0x24, 0x06, 0x00, 0x20, 0x64, 0x08, 0x00, 0x20, 0x41, 0x00, 0x6B, 
+	0x5A, 0xFF, 0x4C, 0x24, 0x18, 0xA4, 0x19, 0x00, 0x27, 0xE7, 0x57, 0xDB, 0x19, 0x6B, 0x52, 0x40, 
+	0x1C, 0x11, 0x6A, 0x81, 0x42, 0xF2, 0xD8, 0xF8, 0xBD, 0x00, 0x20, 0x07, 0xE0, 0xF8, 0x49, 0x09, 
+	0x5C, 0x3B, 0x5C, 0xC9, 0x1A, 0x23, 0x5C, 0xC9, 0x18, 0x21, 0x54, 0x40, 0x1C, 0x51, 0x6A, 0x81, 
+	0x42, 0xF4, 0xD8, 0x00, 0x20, 0x0E, 0xE0, 0xF2, 0x49, 0x09, 0x18, 0x8B, 0x19, 0x00, 0x21, 0x59, 
+	0x56, 0x3B, 0x18, 0x9B, 0x19, 0x00, 0x24, 0x1C, 0x57, 0x0B, 0x1B, 0x41, 0x00, 0x6C, 0x5A, 0x1B, 
+	0x19, 0x6B, 0x52, 0x40, 0x1C, 0x11, 0x6A, 0x81, 0x42, 0xED, 0xD8, 0xF8, 0xBD, 0x39, 0x5C, 0xE8, 
+	0x4B, 0x1B, 0x5C, 0xC9, 0x1A, 
+	0x00, 0x01, 0x68, 0x00, 0x80, 0x23, 0x5C, 0xC9, 0x18, 0x21, 0x54, 0x40, 0x1C, 0x51, 0x6A, 0x81, 
+	0x42, 0xF4, 0xD8, 0x00, 0x20, 0x10, 0xE0, 0x13, 0xE0, 0x4A, 0xE0, 0x39, 0x18, 0x8B, 0x19, 0x00, 
+	0x21, 0x59, 0x56, 0xDF, 0x4B, 0x1B, 0x18, 0x9B, 0x19, 0x00, 0x24, 0x1C, 0x57, 0x0B, 0x1B, 0x41, 
+	0x00, 0x6C, 0x5A, 0x1B, 0x19, 0x6B, 0x52, 0x40, 0x1C, 0x11, 0x6A, 0x81, 0x42, 0xED, 0xD8, 0xF8, 
+	0xBD, 0x01, 0x28, 0x19, 0xD1, 0x00, 0x20, 0x04, 0xE0, 0x21, 0x5C, 0x1F, 0x5C, 0xC9, 0x1B, 0x21, 
+	0x54, 0x40, 0x1C, 0x51, 0x6A, 0x81, 0x42, 0xF7, 0xD8, 0x00, 0x20, 0x09, 0xE0, 0xD0, 0x4C, 0x41, 
+	0x00, 0x24, 0x18, 0xA4, 0x19, 0x00, 0x27, 0x6B, 0x5A, 0xE7, 0x57, 0xDB, 0x1B, 0x6B, 0x52, 0x40, 
+	0x1C, 0x11, 0x6A, 0x81, 0x42, 0xF2, 0xD8, 0xF8, 0xBD, 0x00, 0x20, 0x04, 0xE0, 0x21, 0x5C, 0x3B, 
+	0x5C, 0xC9, 0x1A, 0x21, 0x54, 
+	0x00, 0x01, 0x69, 0x00, 0x80, 0x40, 0x1C, 0x51, 0x6A, 0x81, 0x42, 0xF7, 0xD8, 0x00, 0x20, 0x2B, 
+	0x46, 0x0A, 0xE0, 0x41, 0x00, 0x09, 0x26, 0x3D, 0x18, 0xB6, 0x01, 0xAD, 0x19, 0x00, 0x26, 0x5C, 
+	0x5A, 0xAE, 0x57, 0xA4, 0x1B, 0x5C, 0x52, 0x40, 0x1C, 0x11, 0x6A, 0x81, 0x42, 0xF1, 0xD8, 0xF8, 
+	0xBD, 0xBC, 0x4C, 0x00, 0x20, 0xA0, 0x74, 0xF7, 0xF7, 0x2B, 0xFE, 0x21, 0x46, 0xA0, 0x7C, 0x1E, 
+	0x31, 0xB9, 0x4A, 0x09, 0x5C, 0x11, 0x70, 0x21, 0x46, 0x21, 0x31, 0xB8, 0x4A, 0x09, 0x5C, 0x11, 
+	0x70, 0x21, 0x46, 0x24, 0x31, 0xB6, 0x4A, 0x09, 0x5C, 0x11, 0x70, 0x09, 0x21, 0xC9, 0x01, 0x48, 
+	0x43, 0xB4, 0x49, 0x40, 0x18, 0xB4, 0x49, 0x08, 0x60, 0xFA, 0xF7, 0x53, 0xFD, 0xFA, 0xF7, 0x23, 
+	0xFD, 0xF8, 0xBD, 0x70, 0xB5, 0xAB, 0x4C, 0xB1, 0x4A, 0x61, 0x8B, 0x8B, 0x06, 0x03, 0xD4, 0xCB, 
+	0x06, 0x01, 0xD4, 0xC9, 0x05, 
+	0x00, 0x01, 0x6A, 0x00, 0x80, 0x42, 0xD5, 0xAE, 0x49, 0x09, 0x78, 0x00, 0x29, 0x3E, 0xD1, 0xA1, 
+	0x6A, 0x88, 0x42, 0x3A, 0xD9, 0x91, 0x6D, 0x08, 0x18, 0xA0, 0x62, 0x00, 0x20, 0xF7, 0xF7, 0xBA, 
+	0xFD, 0x00, 0x25, 0xA5, 0x75, 0xA0, 0x7C, 0x00, 0x28, 0x1B, 0xD0, 0x00, 0x20, 0xF7, 0xF7, 0xF0, 
+	0xFD, 0xA0, 0x7C, 0xE0, 0x74, 0x9B, 0x48, 0xA5, 0x74, 0x1E, 0x30, 0x9B, 0x4A, 0x00, 0x78, 0x10, 
+	0x70, 0x98, 0x48, 0x9A, 0x4A, 0x21, 0x30, 0x00, 0x78, 0x10, 0x70, 0x96, 0x48, 0x98, 0x4A, 0x24, 
+	0x30, 0x00, 0x78, 0x10, 0x70, 0x98, 0x4A, 0x97, 0x48, 0x10, 0x60, 0x29, 0x46, 0xE0, 0x7C, 0xFF, 
+	0xF7, 0xD4, 0xFE, 0x00, 0x20, 0xFA, 0xF7, 0xA9, 0xF8, 0x00, 0x20, 0xFA, 0xF7, 0xB6, 0xF8, 0x00, 
+	0x20, 0xF7, 0xF7, 0x72, 0xFE, 0x00, 0x20, 0x01, 0xF0, 0x5F, 0xF9, 0x00, 0x20, 0xF8, 0xF7, 0x50, 
+	0xF9, 0x60, 0x8B, 0xFF, 0x21, 
+	0x00, 0x01, 0x6B, 0x00, 0x80, 0xF1, 0x31, 0x88, 0x43, 0x60, 0x83, 0x70, 0xBD, 0x91, 0x6D, 0x08, 
+	0x18, 0xA0, 0x62, 0x70, 0xBD, 0x10, 0xB5, 0xFF, 0xF7, 0xAC, 0xFF, 0x82, 0x48, 0x41, 0x8B, 0x81, 
+	0x83, 0x86, 0x49, 0x89, 0x69, 0x01, 0x29, 0x01, 0xD1, 0x41, 0x71, 0x09, 0xE0, 0x85, 0x49, 0x09, 
+	0x79, 0x01, 0x29, 0x01, 0xD1, 0x0E, 0x21, 0x00, 0xE0, 0x09, 0x21, 0x41, 0x71, 0x00, 0x21, 0x41, 
+	0x73, 0x01, 0x20, 0xC0, 0x07, 0x10, 0xBD, 0x70, 0xB5, 0x05, 0x46, 0xF6, 0xF7, 0x90, 0xFE, 0x75, 
+	0x4C, 0x7D, 0x48, 0xE0, 0x63, 0x60, 0x64, 0xF7, 0xF7, 0xDD, 0xFC, 0x78, 0x48, 0x41, 0x69, 0x03, 
+	0x29, 0x04, 0xD1, 0x03, 0x20, 0xF7, 0xF7, 0xBD, 0xFA, 0x04, 0x20, 0x0A, 0xE0, 0x40, 0x69, 0x01, 
+	0x28, 0x03, 0xD1, 0xF7, 0xF7, 0xB6, 0xFA, 0x01, 0x20, 0x03, 0xE0, 0x02, 0x20, 0xF7, 0xF7, 0xB1, 
+	0xFA, 0x02, 0x20, 0x20, 0x74, 
+	0x00, 0x01, 0x6C, 0x00, 0x80, 0x05, 0x20, 0x25, 0x63, 0x60, 0x71, 0x01, 0x20, 0x70, 0xBD, 0x70, 
+	0xB5, 0x06, 0x46, 0x01, 0x24, 0xF7, 0xF7, 0x6E, 0xFB, 0x01, 0x28, 0x3D, 0xD1, 0xF6, 0xF7, 0xF7, 
+	0xFC, 0x60, 0x4D, 0x28, 0x7C, 0x04, 0x28, 0x02, 0xD1, 0x03, 0x20, 0x69, 0x6C, 0x05, 0xE0, 0x69, 
+	0x6C, 0xC0, 0x07, 0x01, 0xD0, 0x01, 0x20, 0x00, 0xE0, 0x02, 0x20, 0xFA, 0xF7, 0x5C, 0xFA, 0xFA, 
+	0xF7, 0xB9, 0xFD, 0xE8, 0x78, 0x40, 0x06, 0x41, 0x0F, 0x03, 0x20, 0xC4, 0x07, 0x00, 0x29, 0x22, 
+	0xD1, 0x5A, 0x49, 0x8A, 0x69, 0x01, 0x2A, 0x1E, 0xD1, 0x5C, 0x4A, 0x12, 0x78, 0x01, 0x2A, 0x1A, 
+	0xD0, 0xEA, 0x79, 0x00, 0x2A, 0x17, 0xD1, 0xAA, 0x79, 0x01, 0x2A, 0x14, 0xD0, 0x58, 0x4A, 0x12, 
+	0x78, 0x01, 0x2A, 0x10, 0xD0, 0x6A, 0x6B, 0x89, 0x68, 0xB2, 0x1A, 0x8A, 0x42, 0x0B, 0xD8, 0x00, 
+	0x21, 0x69, 0x71, 0x2A, 0x7A, 
+	0x00, 0x01, 0x6D, 0x00, 0x80, 0xA8, 0x78, 0x08, 0x24, 0x82, 0x42, 0x01, 0xD0, 0x28, 0x72, 0x0C, 
+	0x24, 0x4B, 0x48, 0x01, 0x70, 0x00, 0xE0, 0x68, 0x71, 0x20, 0x46, 0x70, 0xBD, 0x10, 0xB5, 0x4D, 
+	0x48, 0x42, 0x78, 0x01, 0x78, 0x07, 0x20, 0x00, 0xF0, 0xA1, 0xFD, 0xF6, 0xF7, 0x49, 0xFD, 0x46, 
+	0x48, 0x3C, 0x4C, 0xE0, 0x30, 0x20, 0x64, 0xA0, 0x64, 0xF7, 0xF7, 0x67, 0xFC, 0x23, 0x7B, 0xE2, 
+	0x7A, 0xA1, 0x7A, 0x60, 0x7A, 0xF7, 0xF7, 0x61, 0xFB, 0x06, 0x20, 0x60, 0x71, 0x01, 0x20, 0x10, 
+	0xBD, 0x70, 0xB5, 0x05, 0x46, 0xF6, 0xF7, 0x34, 0xFD, 0x3B, 0x48, 0x32, 0x4C, 0xE0, 0x30, 0x20, 
+	0x64, 0xA0, 0x64, 0xF7, 0xF7, 0x52, 0xFC, 0xF7, 0xF7, 0x39, 0xF9, 0x07, 0x20, 0x65, 0x63, 0x60, 
+	0x71, 0x01, 0x20, 0x70, 0xBD, 0x00, 0x20, 0x70, 0x47, 0xF8, 0xB5, 0x00, 0x26, 0x00, 0xF0, 0x55, 
+	0xFD, 0xF7, 0xF7, 0xBF, 0xFC, 
+	0x00, 0x01, 0x6E, 0x00, 0x80, 0x27, 0x4D, 0x04, 0x46, 0xE8, 0x7B, 0x01, 0x28, 0x0A, 0xD1, 0xF7, 
+	0xF7, 0xBC, 0xFC, 0x00, 0x28, 0x06, 0xD1, 0x00, 0x2C, 0x04, 0xD1, 0xE8, 0x73, 0xFA, 0xF7, 0x0B, 
+	0xFC, 0xFA, 0xF7, 0x37, 0xFC, 0x68, 0x8B, 0x25, 0x4F, 0x2B, 0x49, 0xC2, 0x05, 0x06, 0xD5, 0x3A, 
+	0x6D, 0x7B, 0x6D, 0xD2, 0x1A, 0xA2, 0x42, 0x10, 0xD9, 0x88, 0x43, 0x68, 0x83, 0xA8, 0x7D, 0x01, 
+	0x28, 0x18, 0xD1, 0x1E, 0x48, 0x40, 0x30, 0x00, 0x88, 0x00, 0x28, 0x13, 0xD1, 0x38, 0x6D, 0xA0, 
+	0x42, 0x05, 0xD2, 0x68, 0x8B, 0x08, 0x43, 0x68, 0x83, 0x1F, 0xE0, 0x01, 0x20, 0xF8, 0xBD, 0xF7, 
+	0xF7, 0x94, 0xFC, 0x80, 0x21, 0x00, 0x28, 0x68, 0x8B, 0x01, 0xD0, 0x08, 0x43, 0x00, 0xE0, 0x88, 
+	0x43, 0x68, 0x83, 0x13, 0xE0, 0xF7, 0xF7, 0x89, 0xFC, 0x00, 0x28, 0x09, 0xD1, 0x38, 0x6D, 0xA0, 
+	0x42, 0x06, 0xD3, 0xF6, 0xF7, 
+	0x00, 0x01, 0x6F, 0x00, 0x80, 0x6D, 0xFC, 0x00, 0x28, 0x08, 0xD0, 0x68, 0x8B, 0xC0, 0x06, 0x05, 
+	0xD4, 0x00, 0x20, 0x28, 0x75, 0x68, 0x75, 0x01, 0x20, 0xE8, 0x75, 0x01, 0x26, 0x30, 0x46, 0xF8, 
+	0xBD, 0x00, 0xF6, 0x00, 0x00, 0x7C, 0x02, 0x00, 0x20, 0x70, 0x02, 0x00, 0x20, 0x71, 0x02, 0x00, 
+	0x20, 0x72, 0x02, 0x00, 0x20, 0x80, 0xE2, 0x00, 0x00, 0x78, 0x02, 0x00, 0x20, 0x78, 0xDC, 0x00, 
+	0x00, 0xFF, 0x00, 0x00, 0x20, 0x50, 0xDE, 0x00, 0x00, 0x00, 0x11, 0x00, 0x20, 0x2B, 0x01, 0x00, 
+	0x20, 0x2A, 0x01, 0x00, 0x20, 0x0B, 0x01, 0x00, 0x20, 0x00, 0x01, 0x00, 0x00, 0xF1, 0xB5, 0x82, 
+	0xB0, 0x01, 0x27, 0xF7, 0xF7, 0x87, 0xFA, 0x01, 0x28, 0x43, 0xD1, 0xF6, 0xF7, 0x10, 0xFC, 0xF8, 
+	0x48, 0xC0, 0x6B, 0xFF, 0x07, 0xF7, 0x4C, 0x01, 0x28, 0x05, 0xD1, 0xFF, 0xF7, 0x7D, 0xFF, 0x01, 
+	0x28, 0x01, 0xD1, 0x15, 0x20, 
+	0x00, 0x01, 0x70, 0x00, 0x80, 0x20, 0xE0, 0x60, 0x8B, 0xA0, 0x83, 0xA2, 0x6C, 0x00, 0x92, 0x23, 
+	0x7B, 0xE2, 0x7A, 0xA1, 0x7A, 0x60, 0x7A, 0xFA, 0xF7, 0x1C, 0xFB, 0xFA, 0xF7, 0x92, 0xFE, 0x22, 
+	0x7B, 0x00, 0x92, 0xE3, 0x7A, 0xA2, 0x7A, 0x61, 0x7A, 0xEB, 0x48, 0x01, 0x90, 0xF9, 0xF7, 0x03, 
+	0xFD, 0xEA, 0x4E, 0x30, 0x78, 0x01, 0x28, 0x06, 0xD8, 0x00, 0x25, 0x01, 0x28, 0x06, 0xD1, 0xE8, 
+	0x48, 0xC0, 0x7A, 0xC0, 0x06, 0x04, 0xD5, 0x03, 0x20, 0x60, 0x71, 0x12, 0xE0, 0x00, 0x28, 0x00, 
+	0xD0, 0xA5, 0x70, 0x01, 0x98, 0x01, 0xF0, 0xF1, 0xF9, 0xF7, 0xF7, 0x27, 0xFD, 0x30, 0x78, 0x02, 
+	0x99, 0x01, 0xF0, 0x8C, 0xFB, 0x60, 0x70, 0xA0, 0x78, 0x20, 0x72, 0x30, 0x78, 0xE0, 0x71, 0x0C, 
+	0x27, 0x65, 0x71, 0x38, 0x46, 0xFE, 0xBD, 0xF8, 0xB5, 0xD6, 0x4D, 0x00, 0x21, 0x6A, 0x7C, 0xD4, 
+	0x4E, 0x0C, 0x46, 0x01, 0x2A, 
+	0x00, 0x01, 0x71, 0x00, 0x80, 0x08, 0xD0, 0xAA, 0x6B, 0x33, 0x6A, 0x82, 0x1A, 0x9A, 0x42, 0x7E, 
+	0xD9, 0xD4, 0x4A, 0x12, 0x78, 0x00, 0x2A, 0x7A, 0xD1, 0xA8, 0x63, 0x00, 0x20, 0x68, 0x74, 0xD2, 
+	0x4B, 0x09, 0xE0, 0xD2, 0x4A, 0xB7, 0x6A, 0x12, 0x56, 0xBA, 0x42, 0x02, 0xDC, 0xF7, 0x6A, 0xBA, 
+	0x42, 0x00, 0xDA, 0x49, 0x1C, 0x40, 0x1C, 0x5A, 0x6A, 0x82, 0x42, 0xF2, 0xD8, 0x00, 0x20, 0x0A, 
+	0xE0, 0xCB, 0x4A, 0x47, 0x00, 0xD2, 0x5F, 0x77, 0x6B, 0xBA, 0x42, 0x02, 0xDC, 0xB7, 0x6B, 0xBA, 
+	0x42, 0x00, 0xDA, 0x64, 0x1C, 0x40, 0x1C, 0x1A, 0x6A, 0x82, 0x42, 0xF1, 0xD8, 0xBC, 0x48, 0x42, 
+	0x6A, 0xBC, 0x4E, 0x40, 0x30, 0x21, 0x36, 0x00, 0x90, 0x8A, 0x42, 0x58, 0xD2, 0xF6, 0xF7, 0x28, 
+	0xFC, 0xB7, 0x48, 0xC0, 0x6B, 0x01, 0x28, 0x38, 0xD1, 0x00, 0x98, 0x00, 0x88, 0x00, 0x28, 0x34, 
+	0xD0, 0x03, 0x20, 0xF5, 0xF7, 
+	0x00, 0x01, 0x72, 0x00, 0x80, 0x08, 0xFE, 0xF7, 0xF7, 0xC5, 0xFB, 0x00, 0x27, 0x79, 0x1E, 0x03, 
+	0x20, 0xF5, 0xF7, 0xF1, 0xFD, 0xF7, 0xF7, 0xFC, 0xFB, 0xFF, 0xF7, 0xFA, 0xF9, 0xAD, 0x49, 0x1E, 
+	0x31, 0xC8, 0x55, 0xFF, 0xF7, 0x15, 0xFA, 0xF0, 0x55, 0xFF, 0xF7, 0x2E, 0xFA, 0xA9, 0x49, 0x24, 
+	0x31, 0xC8, 0x55, 0x7F, 0x1C, 0x03, 0x2F, 0xE9, 0xD3, 0x68, 0x8B, 0x40, 0x06, 0x07, 0xD5, 0xA9, 
+	0x7C, 0x03, 0x20, 0x49, 0x1E, 0xF5, 0xF7, 0xD7, 0xFD, 0xF7, 0xF7, 0xE2, 0xFB, 0x1D, 0xE0, 0x00, 
+	0x20, 0xF7, 0xF7, 0xDE, 0xFB, 0x68, 0x8B, 0x80, 0x06, 0x03, 0xD5, 0x02, 0x20, 0xF5, 0xF7, 0xDB, 
+	0xFD, 0x00, 0xE0, 0x00, 0x20, 0xF7, 0xF7, 0x96, 0xFB, 0x0F, 0xE0, 0xFF, 0xF7, 0xD1, 0xF9, 0x99, 
+	0x49, 0xAA, 0x7C, 0x1E, 0x31, 0x88, 0x54, 0xFF, 0xF7, 0xEB, 0xF9, 0xA9, 0x7C, 0x70, 0x54, 0xFF, 
+	0xF7, 0x03, 0xFA, 0x94, 0x49, 
+	0x00, 0x01, 0x73, 0x00, 0x80, 0xAA, 0x7C, 0x24, 0x31, 0x88, 0x54, 0x92, 0x48, 0x00, 0xE0, 0x56, 
+	0xE0, 0xA9, 0x7C, 0x1E, 0x30, 0x41, 0x5C, 0x97, 0x48, 0x01, 0x70, 0xFA, 0xF7, 0xFA, 0xFA, 0x8C, 
+	0x48, 0x01, 0x6B, 0xA1, 0x42, 0x4B, 0xD2, 0xC0, 0x6B, 0x00, 0x28, 0x33, 0xD0, 0x00, 0x98, 0x00, 
+	0x88, 0x00, 0x28, 0x2F, 0xD0, 0x03, 0x20, 0xF5, 0xF7, 0xAE, 0xFD, 0xF7, 0xF7, 0x6B, 0xFB, 0x85, 
+	0x4F, 0x00, 0x24, 0x24, 0x37, 0x61, 0x1E, 0x03, 0x20, 0xF5, 0xF7, 0x95, 0xFD, 0xF7, 0xF7, 0xA0, 
+	0xFB, 0xFF, 0xF7, 0xBE, 0xF9, 0x30, 0x55, 0xFF, 0xF7, 0xD7, 0xF9, 0x38, 0x55, 0x64, 0x1C, 0x03, 
+	0x2C, 0xF0, 0xD3, 0x68, 0x8B, 0x40, 0x06, 0x07, 0xD5, 0xA9, 0x7C, 0x03, 0x20, 0x49, 0x1E, 0xF5, 
+	0xF7, 0x82, 0xFD, 0xF7, 0xF7, 0x8D, 0xFB, 0x17, 0xE0, 0x00, 0x20, 0xF7, 0xF7, 0x89, 0xFB, 0x68, 
+	0x8B, 0x80, 0x06, 0x03, 0xD5, 
+	0x00, 0x01, 0x74, 0x00, 0x80, 0x02, 0x20, 0xF5, 0xF7, 0x86, 0xFD, 0x00, 0xE0, 0x00, 0x20, 0xF7, 
+	0xF7, 0x41, 0xFB, 0x09, 0xE0, 0xFF, 0xF7, 0x9C, 0xF9, 0xA9, 0x7C, 0x70, 0x54, 0xFF, 0xF7, 0xB4, 
+	0xF9, 0x6C, 0x49, 0xAA, 0x7C, 0x24, 0x31, 0x88, 0x54, 0xA8, 0x7C, 0x73, 0x4A, 0x31, 0x5C, 0x11, 
+	0x70, 0x68, 0x49, 0x24, 0x31, 0x08, 0x5C, 0x71, 0x49, 0x08, 0x70, 0xFA, 0xF7, 0x7C, 0xFA, 0xF8, 
+	0xBD, 0xF1, 0xB5, 0x82, 0xB0, 0x01, 0x25, 0xF7, 0xF7, 0x55, 0xF9, 0x01, 0x28, 0x4D, 0xD1, 0xF6, 
+	0xF7, 0xDE, 0xFA, 0x5F, 0x4E, 0xF0, 0x6B, 0xED, 0x07, 0x5E, 0x4C, 0x01, 0x28, 0x06, 0xD1, 0xFF, 
+	0xF7, 0x4B, 0xFE, 0x01, 0x28, 0x02, 0xD1, 0x15, 0x20, 0x60, 0x71, 0x3E, 0xE0, 0x60, 0x8B, 0xA0, 
+	0x83, 0xA0, 0x6C, 0xFA, 0xF7, 0xE0, 0xF9, 0xFA, 0xF7, 0x64, 0xFD, 0x57, 0x48, 0x01, 0x90, 0xF9, 
+	0xF7, 0xCF, 0xFD, 0x56, 0x4F, 
+	0x00, 0x01, 0x75, 0x00, 0x80, 0x00, 0x25, 0x38, 0x78, 0x00, 0x28, 0x00, 0xD0, 0xA5, 0x70, 0x55, 
+	0x48, 0x00, 0x78, 0x00, 0x28, 0x03, 0xD0, 0xA0, 0x78, 0x80, 0x21, 0x08, 0x43, 0xA0, 0x70, 0x01, 
+	0x98, 0x01, 0xF0, 0xCB, 0xF8, 0xF7, 0xF7, 0x01, 0xFC, 0x38, 0x78, 0x02, 0x99, 0x01, 0xF0, 0x66, 
+	0xFA, 0x60, 0x70, 0xA0, 0x78, 0x20, 0x72, 0x38, 0x78, 0x00, 0x28, 0x02, 0xD1, 0x65, 0x71, 0x0C, 
+	0x25, 0x0A, 0xE0, 0x4F, 0x49, 0x09, 0x79, 0x01, 0x29, 0x01, 0xD1, 0x0E, 0x21, 0x00, 0xE0, 0x09, 
+	0x21, 0x61, 0x71, 0x4C, 0x4D, 0x01, 0x21, 0x61, 0x73, 0xE0, 0x71, 0xF0, 0x69, 0x01, 0x28, 0x04, 
+	0xD1, 0x49, 0x48, 0xA0, 0x64, 0x02, 0x98, 0xFF, 0xF7, 0xC6, 0xFE, 0x28, 0x46, 0xFE, 0xBD, 0x39, 
+	0x49, 0x00, 0x20, 0x48, 0x71, 0x08, 0x20, 0x70, 0x47, 0x70, 0xB5, 0x05, 0x46, 0x34, 0x48, 0x80, 
+	0x69, 0x34, 0x4C, 0x01, 0x28, 
+	0x00, 0x01, 0x76, 0x00, 0x80, 0x05, 0xD1, 0x40, 0x48, 0xE0, 0x38, 0xE0, 0x63, 0x60, 0x64, 0xF7, 
+	0xF7, 0x41, 0xFA, 0x3D, 0x48, 0x20, 0x64, 0x30, 0x48, 0xA0, 0x64, 0xF6, 0xF7, 0x11, 0xFB, 0x20, 
+	0x6C, 0xF7, 0xF7, 0x33, 0xFA, 0xF6, 0xF7, 0x1A, 0xFF, 0x0A, 0x20, 0x65, 0x63, 0x60, 0x71, 0x61, 
+	0x7B, 0x05, 0x20, 0x00, 0x29, 0x00, 0xD1, 0x01, 0x20, 0x70, 0xBD, 0x10, 0xB5, 0xF7, 0xF7, 0xDA, 
+	0xF8, 0x01, 0x28, 0x12, 0xD1, 0xF6, 0xF7, 0x63, 0xFA, 0x21, 0x48, 0xC0, 0x6B, 0x21, 0x4C, 0x01, 
+	0x28, 0x07, 0xD1, 0xFF, 0xF7, 0xD1, 0xFD, 0x01, 0x28, 0x03, 0xD1, 0x15, 0x20, 0x60, 0x71, 0xC0, 
+	0x07, 0x10, 0xBD, 0x0B, 0x20, 0x60, 0x71, 0x00, 0x20, 0x10, 0xBD, 0x01, 0x20, 0x10, 0xBD, 0x10, 
+	0xB5, 0xF6, 0xF7, 0xE6, 0xFA, 0x17, 0x48, 0x00, 0x6C, 0xF7, 0xF7, 0x07, 0xFA, 0xF6, 0xF7, 0xEE, 
+	0xFE, 0x10, 0xBD, 0x70, 0xB5, 
+	0x00, 0x01, 0x77, 0x00, 0x80, 0x13, 0x4D, 0x04, 0x46, 0x29, 0x6C, 0xA8, 0x6C, 0xA9, 0x64, 0x28, 
+	0x64, 0xF7, 0xF7, 0xFB, 0xF9, 0x0E, 0x4E, 0xB0, 0x69, 0x01, 0x28, 0x0F, 0xD1, 0x28, 0x6B, 0x71, 
+	0x68, 0x20, 0x1A, 0x88, 0x42, 0x0A, 0xD9, 0x19, 0x48, 0xF7, 0xF7, 0xE9, 0xF9, 0xF6, 0xF7, 0x9F, 
+	0xFB, 0x70, 0x69, 0xF6, 0xF7, 0xD6, 0xFF, 0x16, 0x20, 0x2C, 0x63, 0x05, 0xE0, 0xF6, 0xF7, 0xC0, 
+	0xFA, 0xF6, 0xF7, 0xCC, 0xFE, 0x0C, 0x20, 0x6C, 0x63, 0x68, 0x71, 0x01, 0x20, 0xC0, 0x07, 0x70, 
+	0xBD, 0x78, 0xDC, 0x00, 0x00, 0x7C, 0x02, 0x00, 0x20, 0xC8, 0x14, 0x00, 0x20, 0xFF, 0x00, 0x00, 
+	0x20, 0x6A, 0x05, 0x00, 0x20, 0x00, 0x01, 0x00, 0x20, 0x98, 0xDF, 0x00, 0x00, 0x24, 0x06, 0x00, 
+	0x20, 0x64, 0x08, 0x00, 0x20, 0x70, 0x02, 0x00, 0x20, 0x71, 0x02, 0x00, 0x20, 0x72, 0x02, 0x00, 
+	0x20, 0x50, 0xDE, 0x00, 0x00, 
+	0x00, 0x01, 0x78, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0xE0, 0x11, 0x00, 0x20, 0x6B, 0xBB, 0x00, 
+	0x00, 0xF1, 0xB5, 0xFA, 0x4C, 0xA0, 0x6C, 0xFA, 0xF7, 0x0E, 0xF9, 0xFA, 0xF7, 0x92, 0xFC, 0xA0, 
+	0x6C, 0xF9, 0xF7, 0xFE, 0xFC, 0xF6, 0x4F, 0xF7, 0x49, 0x38, 0x78, 0x08, 0x70, 0xF6, 0x49, 0x00, 
+	0x26, 0x09, 0x78, 0x03, 0x29, 0x01, 0xD1, 0x3E, 0x70, 0x02, 0xE0, 0x00, 0x28, 0x00, 0xD0, 0xA6, 
+	0x70, 0xF2, 0x48, 0x00, 0x78, 0x00, 0x28, 0x03, 0xD0, 0xA0, 0x78, 0x80, 0x21, 0x08, 0x43, 0xA0, 
+	0x70, 0xA0, 0x6C, 0x00, 0xF0, 0xF2, 0xFF, 0xF7, 0xF7, 0x28, 0xFB, 0x38, 0x78, 0x00, 0x99, 0x01, 
+	0xF0, 0x8D, 0xF9, 0x60, 0x70, 0xA0, 0x78, 0x20, 0x72, 0xE9, 0x48, 0x04, 0x25, 0x81, 0x69, 0x0B, 
+	0x20, 0x01, 0x29, 0x04, 0xD1, 0x39, 0x78, 0x00, 0x29, 0x01, 0xD1, 0x66, 0x71, 0x00, 0xE0, 0x60, 
+	0x71, 0x38, 0x78, 0xE0, 0x71, 
+	0x00, 0x01, 0x79, 0x00, 0x80, 0x60, 0x8B, 0xA0, 0x83, 0xF7, 0xF7, 0x34, 0xF8, 0x01, 0x26, 0x01, 
+	0x28, 0x18, 0xD1, 0xF6, 0xF7, 0xBC, 0xF9, 0xDE, 0x4F, 0xF8, 0x6B, 0x01, 0x28, 0x08, 0xD1, 0xFF, 
+	0xF7, 0x2B, 0xFD, 0x01, 0x28, 0x04, 0xD1, 0x15, 0x20, 0x66, 0x73, 0x60, 0x71, 0xC5, 0x07, 0x11, 
+	0xE0, 0x00, 0x98, 0xFF, 0xF7, 0x1E, 0xFC, 0xF8, 0x69, 0x01, 0x28, 0x0B, 0xD1, 0x00, 0x98, 0xFF, 
+	0xF7, 0xDA, 0xFD, 0x07, 0xE0, 0x60, 0x79, 0x05, 0x25, 0x00, 0x28, 0x00, 0xD0, 0x00, 0x26, 0xA6, 
+	0x73, 0x0D, 0x20, 0x60, 0x71, 0x28, 0x46, 0xF8, 0xBD, 0x70, 0xB5, 0x06, 0x46, 0xF7, 0xF7, 0x0A, 
+	0xF8, 0x01, 0x28, 0x22, 0xD1, 0xF6, 0xF7, 0x93, 0xF9, 0xC9, 0x4D, 0xE8, 0x6B, 0xC3, 0x4C, 0x01, 
+	0x28, 0x07, 0xD1, 0xFF, 0xF7, 0x01, 0xFD, 0x01, 0x28, 0x03, 0xD1, 0x15, 0x20, 0x60, 0x71, 0xC0, 
+	0x07, 0x65, 0xE7, 0x30, 0x46, 
+	0x00, 0x01, 0x7A, 0x00, 0x80, 0xFF, 0xF7, 0xF5, 0xFB, 0xE8, 0x69, 0x01, 0x28, 0x02, 0xD1, 0x30, 
+	0x46, 0xFF, 0xF7, 0xB1, 0xFD, 0xA0, 0x7B, 0x01, 0x28, 0x03, 0xD1, 0x00, 0x20, 0x60, 0x71, 0x08, 
+	0x20, 0x55, 0xE7, 0x0B, 0x20, 0x60, 0x71, 0x00, 0x20, 0x51, 0xE7, 0x01, 0x20, 0x4F, 0xE7, 0x70, 
+	0xB5, 0x05, 0x46, 0xB2, 0x4C, 0xB7, 0x48, 0xE0, 0x63, 0x70, 0x30, 0x60, 0x64, 0x70, 0x30, 0x20, 
+	0x64, 0xB5, 0x48, 0xA0, 0x64, 0xB5, 0x48, 0xF7, 0xF7, 0x1A, 0xF9, 0xF6, 0xF7, 0xD0, 0xFA, 0xE0, 
+	0x6B, 0xF7, 0xF7, 0x20, 0xF9, 0xAE, 0x48, 0x41, 0x69, 0x03, 0x29, 0x04, 0xD1, 0x03, 0x20, 0xF6, 
+	0xF7, 0x00, 0xFF, 0x04, 0x20, 0x0A, 0xE0, 0x40, 0x69, 0x01, 0x28, 0x03, 0xD1, 0xF6, 0xF7, 0xF9, 
+	0xFE, 0x01, 0x20, 0x03, 0xE0, 0x02, 0x20, 0xF6, 0xF7, 0xF4, 0xFE, 0x02, 0x20, 0x20, 0x74, 0x0F, 
+	0x20, 0x25, 0x63, 0x60, 0x71, 
+	0x00, 0x01, 0x7B, 0x00, 0x80, 0x61, 0x7B, 0x05, 0x20, 0x00, 0x29, 0x00, 0xD1, 0x01, 0x20, 0x1E, 
+	0xE7, 0x10, 0xB5, 0xF6, 0xF7, 0xAF, 0xFF, 0x01, 0x28, 0x15, 0xD1, 0xF6, 0xF7, 0x38, 0xF9, 0x9C, 
+	0x48, 0xC0, 0x6B, 0x96, 0x4C, 0x01, 0x28, 0x0A, 0xD1, 0xFF, 0xF7, 0xA6, 0xFC, 0x01, 0x28, 0x06, 
+	0xD1, 0x9B, 0x48, 0xF7, 0xF7, 0xE4, 0xF8, 0x15, 0x20, 0x60, 0x71, 0xC0, 0x07, 0x10, 0xBD, 0x10, 
+	0x20, 0x60, 0x71, 0x00, 0x20, 0x10, 0xBD, 0x01, 0x20, 0x10, 0xBD, 0x70, 0xB5, 0x8B, 0x4C, 0x05, 
+	0x46, 0xE1, 0x6B, 0x60, 0x6C, 0x61, 0x64, 0xE0, 0x63, 0x21, 0x6C, 0xA0, 0x6C, 0xA1, 0x64, 0x20, 
+	0x64, 0xF6, 0xF7, 0x85, 0xFA, 0xE0, 0x6B, 0xF7, 0xF7, 0xD5, 0xF8, 0x89, 0x48, 0x41, 0x69, 0x03, 
+	0x29, 0x04, 0xD1, 0x03, 0x20, 0xF6, 0xF7, 0xB5, 0xFE, 0x04, 0x20, 0x0A, 0xE0, 0x40, 0x69, 0x01, 
+	0x28, 0x03, 0xD1, 0xF6, 0xF7, 
+	0x00, 0x01, 0x7C, 0x00, 0x80, 0xAE, 0xFE, 0x01, 0x20, 0x03, 0xE0, 0x02, 0x20, 0xF6, 0xF7, 0xA9, 
+	0xFE, 0x02, 0x20, 0x20, 0x74, 0x11, 0x20, 0x25, 0x63, 0x60, 0x71, 0xC0, 0x07, 0xD7, 0xE6, 0xF1, 
+	0xB5, 0x76, 0x4C, 0x20, 0x7C, 0x21, 0x46, 0x49, 0x6C, 0x04, 0x28, 0x01, 0xD1, 0x03, 0x20, 0x04, 
+	0xE0, 0xC0, 0x07, 0x01, 0xD0, 0x01, 0x20, 0x00, 0xE0, 0x02, 0x20, 0xF9, 0xF7, 0x5C, 0xFE, 0xFA, 
+	0xF7, 0xB9, 0xF9, 0xA0, 0x6C, 0xF9, 0xF7, 0xF7, 0xFF, 0xFA, 0xF7, 0x7B, 0xFB, 0xA0, 0x6C, 0xF9, 
+	0xF7, 0xE7, 0xFB, 0x6B, 0x4F, 0x6B, 0x49, 0x38, 0x78, 0x08, 0x70, 0x6B, 0x49, 0x00, 0x26, 0x09, 
+	0x78, 0x03, 0x29, 0x01, 0xD1, 0x3E, 0x70, 0x02, 0xE0, 0x00, 0x28, 0x00, 0xD0, 0xA6, 0x70, 0x67, 
+	0x48, 0x00, 0x78, 0x00, 0x28, 0x03, 0xD0, 0xA0, 0x78, 0x80, 0x21, 0x08, 0x43, 0xA0, 0x70, 0xA0, 
+	0x6C, 0x00, 0xF0, 0xDB, 0xFE, 
+	0x00, 0x01, 0x7D, 0x00, 0x80, 0xF7, 0xF7, 0x11, 0xFA, 0x38, 0x78, 0x00, 0x99, 0x01, 0xF0, 0x76, 
+	0xF8, 0x60, 0x70, 0xA0, 0x78, 0x20, 0x72, 0x5E, 0x48, 0x04, 0x25, 0x81, 0x69, 0x10, 0x20, 0x01, 
+	0x29, 0x04, 0xD1, 0x39, 0x78, 0x00, 0x29, 0x01, 0xD1, 0x66, 0x71, 0x00, 0xE0, 0x60, 0x71, 0x38, 
+	0x78, 0xE0, 0x71, 0x60, 0x8B, 0xA0, 0x83, 0xF6, 0xF7, 0x1D, 0xFF, 0x01, 0x26, 0x01, 0x28, 0x21, 
+	0xD1, 0xF6, 0xF7, 0xA5, 0xF8, 0x52, 0x4F, 0xF8, 0x6B, 0x01, 0x28, 0x0B, 0xD1, 0xFF, 0xF7, 0x14, 
+	0xFC, 0x01, 0x28, 0x07, 0xD1, 0x52, 0x48, 0xF7, 0xF7, 0x52, 0xF8, 0x15, 0x20, 0x66, 0x73, 0x60, 
+	0x71, 0xC5, 0x07, 0x17, 0xE0, 0x00, 0x98, 0xFF, 0xF7, 0x04, 0xFB, 0x60, 0x79, 0x00, 0x28, 0x02, 
+	0xD1, 0x4B, 0x48, 0xF7, 0xF7, 0x44, 0xF8, 0xF8, 0x69, 0x01, 0x28, 0x0B, 0xD1, 0x00, 0x98, 0xFF, 
+	0xF7, 0xBA, 0xFC, 0x07, 0xE0, 
+	0x00, 0x01, 0x7E, 0x00, 0x80, 0x60, 0x79, 0x05, 0x25, 0x00, 0x28, 0x00, 0xD0, 0x00, 0x26, 0xA6, 
+	0x73, 0x12, 0x20, 0x60, 0x71, 0x28, 0x46, 0xF8, 0xBD, 0x70, 0xB5, 0x06, 0x46, 0xF6, 0xF7, 0xEA, 
+	0xFE, 0x01, 0x28, 0x28, 0xD1, 0xF6, 0xF7, 0x73, 0xF8, 0x39, 0x4D, 0xE8, 0x6B, 0x33, 0x4C, 0x01, 
+	0x28, 0x0A, 0xD1, 0xFF, 0xF7, 0xE1, 0xFB, 0x01, 0x28, 0x06, 0xD1, 0x39, 0x48, 0xF7, 0xF7, 0x1F, 
+	0xF8, 0x15, 0x20, 0x60, 0x71, 0xC0, 0x07, 0x42, 0xE6, 0x30, 0x46, 0xFF, 0xF7, 0xD2, 0xFA, 0xE8, 
+	0x69, 0x01, 0x28, 0x02, 0xD1, 0x30, 0x46, 0xFF, 0xF7, 0x8E, 0xFC, 0xA0, 0x7B, 0x01, 0x28, 0x06, 
+	0xD1, 0x00, 0x20, 0x60, 0x71, 0x08, 0x24, 0x2E, 0x48, 0xF7, 0xF7, 0x09, 0xF8, 0x04, 0xE0, 0x10, 
+	0x20, 0x60, 0x71, 0x00, 0x24, 0x00, 0xE0, 0x01, 0x24, 0x20, 0x46, 0x28, 0xE6, 0x10, 0xB5, 0xF6, 
+	0xF7, 0x70, 0xFB, 0x23, 0x48, 
+	0x00, 0x01, 0x7F, 0x00, 0x80, 0x40, 0x6C, 0xC0, 0xB2, 0xF6, 0xF7, 0x78, 0xFE, 0x1B, 0x48, 0x14, 
+	0x21, 0x41, 0x71, 0x41, 0x7B, 0x01, 0x29, 0x03, 0xD1, 0x00, 0x21, 0x41, 0x73, 0x05, 0x20, 0x10, 
+	0xBD, 0x01, 0x20, 0x10, 0xBD, 0x70, 0xB5, 0xF6, 0xF7, 0xA5, 0xFE, 0x01, 0x28, 0x50, 0xD1, 0xF6, 
+	0xF7, 0x2E, 0xF8, 0xF7, 0xF7, 0x66, 0xF8, 0x06, 0x46, 0xF7, 0xF7, 0x67, 0xF8, 0x14, 0x4A, 0x0F, 
+	0x4D, 0x00, 0x24, 0x00, 0x28, 0x02, 0xD1, 0x10, 0x6D, 0xB0, 0x42, 0x32, 0xD2, 0x69, 0x8B, 0x15, 
+	0x23, 0x8E, 0x06, 0xD8, 0x07, 0x00, 0x2E, 0x0E, 0xDA, 0x0D, 0x4E, 0x40, 0x36, 0x36, 0x88, 0x01, 
+	0x2E, 0x25, 0xD1, 0x2E, 0x7D, 0x02, 0x2E, 0x06, 0xD3, 0x96, 0x6C, 0x6A, 0x7D, 0x96, 0x42, 0x19, 
+	0xD9, 0x2C, 0x75, 0x52, 0x1C, 0x6A, 0x75, 0x6B, 0x71, 0xE9, 0xE5, 0x00, 0x00, 0x7C, 0x02, 0x00, 
+	0x20, 0xFF, 0x00, 0x00, 0x20, 
+	0x00, 0x01, 0x80, 0x00, 0x80, 0xB5, 0x01, 0x00, 0x20, 0xC1, 0x01, 0x00, 0x20, 0x00, 0x01, 0x00, 
+	0x20, 0x78, 0xDC, 0x00, 0x00, 0x00, 0x11, 0x00, 0x20, 0xC8, 0x14, 0x00, 0x20, 0x6B, 0xBB, 0x00, 
+	0x00, 0xBB, 0xB1, 0x00, 0x00, 0xFF, 0x20, 0x01, 0x30, 0x01, 0x43, 0x69, 0x83, 0x0D, 0xE0, 0x80, 
+	0x20, 0xFA, 0xE7, 0xF7, 0xF7, 0x26, 0xF8, 0xE9, 0x7B, 0x01, 0x29, 0x06, 0xD1, 0x00, 0x28, 0x04, 
+	0xD1, 0xEC, 0x73, 0xF9, 0xF7, 0x78, 0xFF, 0xF9, 0xF7, 0xA4, 0xFF, 0x6C, 0x71, 0x08, 0x20, 0xBE, 
+	0xE5, 0x01, 0x20, 0xBC, 0xE5, 0x70, 0xB5, 0x78, 0x4C, 0x00, 0x25, 0x60, 0x8B, 0xC1, 0x05, 0x00, 
+	0x29, 0x02, 0xDA, 0x65, 0x71, 0x08, 0x20, 0xB2, 0xE5, 0xC0, 0x06, 0x0E, 0xD4, 0x02, 0x20, 0xF9, 
+	0xF7, 0x24, 0xFB, 0x02, 0x20, 0xF9, 0xF7, 0x31, 0xFB, 0x02, 0x20, 0xF7, 0xF7, 0xD1, 0xFB, 0x01, 
+	0x20, 0xF7, 0xF7, 0xEA, 0xF8, 
+	0x00, 0x01, 0x81, 0x00, 0x80, 0x60, 0x8B, 0x10, 0x21, 0x48, 0xE0, 0xA0, 0x7D, 0x00, 0x28, 0x09, 
+	0xD1, 0x02, 0x20, 0xF5, 0xF7, 0x40, 0xFA, 0xF6, 0xF7, 0xFD, 0xFF, 0x01, 0x20, 0xA0, 0x75, 0x00, 
+	0xF0, 0xCB, 0xFB, 0x39, 0xE0, 0x03, 0x20, 0xF5, 0xF7, 0x36, 0xFA, 0xF6, 0xF7, 0xF3, 0xFF, 0xA0, 
+	0x7C, 0xE0, 0x74, 0x40, 0x1C, 0xC0, 0xB2, 0xA0, 0x74, 0x03, 0x28, 0x04, 0xD3, 0xE0, 0x7D, 0x00, 
+	0x28, 0x00, 0xD0, 0x01, 0x20, 0xA0, 0x74, 0xA1, 0x7C, 0x03, 0x20, 0x49, 0x1E, 0xF5, 0xF7, 0x13, 
+	0xFA, 0xF7, 0xF7, 0x1E, 0xF8, 0x58, 0x48, 0xA1, 0x7C, 0x1E, 0x30, 0x58, 0x4A, 0x40, 0x5C, 0x10, 
+	0x70, 0x55, 0x48, 0x57, 0x4A, 0x21, 0x30, 0x40, 0x5C, 0x10, 0x70, 0x53, 0x48, 0x55, 0x4A, 0x24, 
+	0x30, 0x40, 0x5C, 0x10, 0x70, 0x09, 0x20, 0xC0, 0x01, 0x53, 0x4A, 0x48, 0x43, 0x80, 0x18, 0x53, 
+	0x4A, 0x10, 0x60, 0xE0, 0x7C, 
+	0x00, 0x01, 0x82, 0x00, 0x80, 0xFF, 0xF7, 0x01, 0xF9, 0xE5, 0x75, 0x20, 0x7D, 0x40, 0x21, 0x40, 
+	0x1C, 0x20, 0x75, 0x60, 0x8B, 0x08, 0x43, 0x60, 0x83, 0x60, 0x8B, 0x20, 0x21, 0x08, 0x43, 0x60, 
+	0x83, 0x13, 0x20, 0x60, 0x71, 0xC0, 0x07, 0x52, 0xE5, 0x10, 0xB5, 0xFF, 0xF7, 0x71, 0xFD, 0x04, 
+	0x46, 0x47, 0x48, 0x40, 0x69, 0x40, 0x49, 0x49, 0x6C, 0xF9, 0xF7, 0xDD, 0xFC, 0xFA, 0xF7, 0x3A, 
+	0xF8, 0x44, 0x48, 0xF6, 0xF7, 0x1C, 0xFF, 0x20, 0x46, 0x10, 0xBD, 0x10, 0xB5, 0xF5, 0xF7, 0x18, 
+	0xFA, 0xF5, 0xF7, 0x60, 0xFA, 0x38, 0x4C, 0x21, 0x7E, 0x88, 0x42, 0x0A, 0xD0, 0xF5, 0xF7, 0x5A, 
+	0xFA, 0x20, 0x76, 0xC0, 0xB2, 0x01, 0x28, 0x05, 0xD1, 0x60, 0x8B, 0xC0, 0x06, 0x02, 0xD4, 0xF5, 
+	0xF7, 0x16, 0xFA, 0x10, 0xBD, 0xF5, 0xF7, 0x2C, 0xFA, 0x10, 0xBD, 0x2F, 0x49, 0x88, 0x71, 0x70, 
+	0x47, 0x2D, 0x49, 0x00, 0x20, 
+	0x00, 0x01, 0x83, 0x00, 0x80, 0x49, 0x8B, 0x10, 0x29, 0x04, 0xD3, 0x31, 0x49, 0xC9, 0x6C, 0xC9, 
+	0x07, 0x00, 0xD0, 0x01, 0x20, 0x70, 0x47, 0x10, 0xB5, 0xF5, 0xF7, 0x55, 0xFF, 0x10, 0xBD, 0x10, 
+	0xB5, 0xF5, 0xF7, 0x29, 0xFF, 0x10, 0xBD, 0x2C, 0x48, 0x70, 0x47, 0x10, 0xB5, 0xF6, 0xF7, 0x59, 
+	0xFA, 0x27, 0x48, 0x40, 0x6C, 0xC0, 0xB2, 0xF6, 0xF7, 0x61, 0xFD, 0xF6, 0xF7, 0x9B, 0xFD, 0x01, 
+	0x28, 0xFB, 0xD1, 0xF5, 0xF7, 0x24, 0xFF, 0x10, 0xBD, 0x70, 0xB5, 0x05, 0x46, 0x0C, 0x46, 0x56, 
+	0x18, 0x09, 0xE0, 0xA0, 0xB2, 0x29, 0x46, 0x00, 0xF0, 0xB9, 0xFA, 0x00, 0x28, 0x01, 0xD0, 0x72, 
+	0xB6, 0xFE, 0xE7, 0x80, 0x35, 0x64, 0x1C, 0xA6, 0x42, 0xF3, 0xD8, 0xF0, 0xE4, 0x70, 0xB5, 0x40, 
+	0x08, 0x00, 0x25, 0x11, 0x4B, 0x90, 0x42, 0x01, 0xD3, 0x5D, 0x72, 0x01, 0xE0, 0x14, 0x1A, 0x5C, 
+	0x72, 0x16, 0x4C, 0xA6, 0x69, 
+	0x00, 0x01, 0x84, 0x00, 0x80, 0x36, 0x1A, 0x76, 0x1E, 0x96, 0x42, 0x02, 0xD8, 0xA2, 0x69, 0x52, 
+	0x1E, 0x00, 0xE0, 0x82, 0x18, 0x9A, 0x72, 0x88, 0x42, 0x01, 0xD3, 0xDD, 0x72, 0x01, 0xE0, 0x0A, 
+	0x1A, 0xDA, 0x72, 0xE2, 0x69, 0x12, 0x1A, 0x52, 0x1E, 0x8A, 0x42, 0x02, 0xD8, 0xE0, 0x69, 0x40, 
+	0x1E, 0x00, 0xE0, 0x40, 0x18, 0x18, 0x73, 0xCA, 0xE4, 0x7C, 0x02, 0x00, 0x20, 0x70, 0x02, 0x00, 
+	0x20, 0x71, 0x02, 0x00, 0x20, 0x72, 0x02, 0x00, 0x20, 0x80, 0xE2, 0x00, 0x00, 0x78, 0x02, 0x00, 
+	0x20, 0x78, 0xDC, 0x00, 0x00, 0xBB, 0xB1, 0x00, 0x00, 0xE0, 0x11, 0x00, 0x20, 0x98, 0xDF, 0x00, 
+	0x00, 0x10, 0xB5, 0xCF, 0x48, 0x40, 0x7A, 0x00, 0x28, 0x01, 0xD1, 0x01, 0x20, 0x00, 0xE0, 0x00, 
+	0x20, 0x00, 0xF0, 0xF8, 0xFF, 0x10, 0xBD, 0x10, 0xB5, 0x00, 0x20, 0x00, 0xF0, 0x6F, 0xFF, 0x01, 
+	0xF0, 0x08, 0xF8, 0x00, 0x20, 
+	0x00, 0x01, 0x85, 0x00, 0x80, 0x00, 0xF0, 0x73, 0xFF, 0x00, 0x20, 0x00, 0xF0, 0x79, 0xFF, 0xC5, 
+	0x48, 0x00, 0x78, 0x01, 0x07, 0xC2, 0x48, 0x0E, 0xD4, 0x40, 0x7A, 0x00, 0x28, 0x04, 0xD1, 0x01, 
+	0x20, 0x00, 0xF0, 0xE9, 0xFF, 0x01, 0x20, 0x03, 0xE0, 0x01, 0x20, 0x00, 0xF0, 0xE4, 0xFF, 0x00, 
+	0x20, 0x00, 0xF0, 0xD8, 0xFF, 0x10, 0xBD, 0x00, 0x7A, 0x00, 0xF0, 0xDD, 0xFF, 0xFF, 0xF7, 0xD0, 
+	0xFF, 0x10, 0xBD, 0xD8, 0xE7, 0x30, 0xB5, 0x01, 0x23, 0xB5, 0x49, 0x24, 0x20, 0x8B, 0x71, 0xC8, 
+	0x71, 0xB4, 0x48, 0x02, 0x78, 0x9A, 0x43, 0x02, 0x70, 0x02, 0x78, 0xFD, 0x24, 0x22, 0x40, 0x02, 
+	0x70, 0x5A, 0x02, 0x0A, 0x80, 0x00, 0x22, 0x4A, 0x80, 0x8A, 0x80, 0x04, 0x78, 0xF7, 0x25, 0x2C, 
+	0x40, 0x04, 0x70, 0x02, 0x24, 0x0C, 0x72, 0x4A, 0x72, 0x01, 0x78, 0xFB, 0x22, 0x11, 0x40, 0x01, 
+	0x70, 0x43, 0x70, 0x30, 0xBD, 
+	0x00, 0x01, 0x86, 0x00, 0x80, 0xA6, 0x49, 0xA8, 0x48, 0x4A, 0x88, 0x82, 0x62, 0x89, 0x88, 0xC1, 
+	0x62, 0xA4, 0x49, 0x09, 0x78, 0xC9, 0x07, 0x03, 0xD0, 0x41, 0x69, 0x08, 0x22, 0x11, 0x43, 0x41, 
+	0x61, 0x70, 0x47, 0x10, 0xB5, 0x9F, 0x48, 0x40, 0x78, 0x00, 0x28, 0x0B, 0xD1, 0x00, 0xF0, 0x6E, 
+	0xFF, 0xFF, 0xF7, 0xC8, 0xFF, 0x03, 0x21, 0x00, 0x20, 0xFA, 0xF7, 0x38, 0xFB, 0x9B, 0x49, 0x00, 
+	0x20, 0xFA, 0xF7, 0x2A, 0xFB, 0x98, 0x48, 0x40, 0x69, 0xC0, 0x07, 0x01, 0xD0, 0x00, 0xF0, 0x1E, 
+	0xF9, 0xFF, 0xF7, 0xD8, 0xFF, 0xFF, 0xF7, 0x8F, 0xFF, 0x10, 0xBD, 0x10, 0xB5, 0x00, 0xF0, 0x1A, 
+	0xFF, 0x10, 0xBD, 0x91, 0x48, 0x41, 0x69, 0x01, 0x22, 0x11, 0x43, 0x41, 0x61, 0x8D, 0x48, 0x01, 
+	0x78, 0x04, 0x22, 0x11, 0x43, 0x01, 0x70, 0x70, 0x47, 0x10, 0xB5, 0x00, 0xF0, 0x07, 0xF9, 0x89, 
+	0x48, 0x01, 0x78, 0xFB, 0x22, 
+	0x00, 0x01, 0x87, 0x00, 0x80, 0x11, 0x40, 0x01, 0x70, 0x10, 0xBD, 0x30, 0xB4, 0x85, 0x4A, 0x01, 
+	0x28, 0x13, 0x78, 0x02, 0xD1, 0xF7, 0x24, 0x23, 0x40, 0x01, 0xE0, 0x08, 0x24, 0x23, 0x43, 0x13, 
+	0x70, 0x7F, 0x4A, 0x10, 0x72, 0x51, 0x72, 0x30, 0xBC, 0x65, 0xE7, 0x10, 0xB5, 0x7C, 0x48, 0x40, 
+	0x7A, 0x00, 0x28, 0x00, 0xD0, 0x01, 0x20, 0x00, 0xF0, 0x55, 0xFF, 0x10, 0xBD, 0x10, 0xB5, 0x00, 
+	0xF0, 0x63, 0xFF, 0x01, 0x21, 0x48, 0x40, 0x00, 0xF0, 0x4D, 0xFF, 0x10, 0xBD, 0x75, 0x49, 0x0A, 
+	0x78, 0x01, 0x23, 0x1A, 0x43, 0x0A, 0x70, 0x76, 0x49, 0x71, 0x4A, 0x88, 0x42, 0x01, 0xD9, 0x91, 
+	0x80, 0x00, 0xE0, 0x90, 0x80, 0x8E, 0xE7, 0x10, 0xB5, 0x00, 0xF0, 0x2C, 0xFF, 0x10, 0xBD, 0x71, 
+	0x49, 0x80, 0x00, 0x40, 0x18, 0x00, 0x68, 0xC0, 0xB2, 0x70, 0x47, 0x70, 0xB5, 0x0C, 0x46, 0x05, 
+	0x46, 0x09, 0x0A, 0x00, 0xF0, 
+	0x00, 0x01, 0x88, 0x00, 0x80, 0x1F, 0xFF, 0xE1, 0xB2, 0x68, 0x1C, 0x00, 0xF0, 0x1B, 0xFF, 0x70, 
+	0xBD, 0x81, 0x00, 0x68, 0x48, 0x08, 0x18, 0x01, 0x68, 0x40, 0x68, 0x09, 0x02, 0x01, 0x43, 0x88, 
+	0xB2, 0x70, 0x47, 0x61, 0x48, 0x80, 0x69, 0x08, 0x21, 0x08, 0x40, 0x70, 0x47, 0xC0, 0x20, 0xC0, 
+	0x68, 0x61, 0x49, 0x08, 0x42, 0x02, 0xD0, 0x48, 0x00, 0x60, 0x49, 0xC8, 0x61, 0x70, 0x47, 0x10, 
+	0xB5, 0xFF, 0xF7, 0xF4, 0xFF, 0x58, 0x4C, 0xFA, 0xF7, 0x8D, 0xFA, 0xA1, 0x69, 0x09, 0x07, 0x07, 
+	0xD4, 0xA1, 0x68, 0x01, 0x22, 0x11, 0x43, 0xA1, 0x60, 0xC0, 0xB2, 0xFA, 0xF7, 0x87, 0xFA, 0x10, 
+	0xBD, 0xC0, 0xB2, 0xFA, 0xF7, 0x83, 0xFA, 0xEE, 0xE7, 0xE9, 0xE7, 0xC0, 0x20, 0xC0, 0x68, 0x52, 
+	0x49, 0x08, 0x42, 0x01, 0xD0, 0x51, 0x49, 0xC8, 0x61, 0x70, 0x47, 0x10, 0xB5, 0xFF, 0xF7, 0xF5, 
+	0xFF, 0x49, 0x4C, 0xFA, 0xF7, 
+	0x00, 0x01, 0x89, 0x00, 0x80, 0x6F, 0xFA, 0xA1, 0x69, 0x09, 0x07, 0x07, 0xD4, 0xA1, 0x68, 0x49, 
+	0x08, 0x49, 0x00, 0xA1, 0x60, 0xC0, 0xB2, 0xFA, 0xF7, 0x69, 0xFA, 0x03, 0xE0, 0xC0, 0xB2, 0xFA, 
+	0xF7, 0x65, 0xFA, 0xEE, 0xE7, 0xA0, 0x68, 0x80, 0x07, 0xFC, 0xD4, 0x10, 0xBD, 0xE5, 0xE7, 0x70, 
+	0xB5, 0x04, 0x46, 0xFF, 0xF7, 0xBB, 0xFF, 0xA0, 0x07, 0x01, 0xD1, 0x01, 0x20, 0x04, 0x43, 0x39, 
+	0x4E, 0x3E, 0x4D, 0xB4, 0x70, 0xE0, 0x07, 0x12, 0xD0, 0xFF, 0xF7, 0xB9, 0xFF, 0x36, 0x49, 0x48, 
+	0x69, 0x80, 0x07, 0x01, 0xD5, 0x09, 0x20, 0x00, 0xE0, 0x03, 0x20, 0x08, 0x61, 0xFF, 0x20, 0xC8, 
+	0x60, 0x03, 0x20, 0xFA, 0xF7, 0x82, 0xFA, 0x03, 0x20, 0xFA, 0xF7, 0x70, 0xFA, 0x0E, 0xE0, 0x00, 
+	0xF0, 0x4D, 0xF8, 0xA8, 0x68, 0xFF, 0x21, 0xC8, 0x31, 0xB0, 0x60, 0x88, 0x43, 0x40, 0x1C, 0xA8, 
+	0x60, 0x2F, 0x49, 0x08, 0x68, 
+	0x00, 0x01, 0x8A, 0x00, 0x80, 0x70, 0x60, 0x80, 0x08, 0x80, 0x00, 0x08, 0x60, 0xA0, 0x07, 0x10, 
+	0xD5, 0x03, 0x20, 0x00, 0xF0, 0x23, 0xFE, 0x00, 0x20, 0x00, 0xF0, 0x29, 0xFE, 0x00, 0x20, 0x00, 
+	0xF0, 0x2F, 0xFE, 0x10, 0x20, 0x28, 0x61, 0x00, 0x20, 0xFA, 0xF7, 0x5F, 0xFA, 0x00, 0x20, 0xFA, 
+	0xF7, 0x4D, 0xFA, 0x70, 0xBD, 0x70, 0xB5, 0x1B, 0x4C, 0xA5, 0x78, 0xFF, 0xF7, 0x96, 0xFF, 0x00, 
+	0x20, 0xFA, 0xF7, 0x4B, 0xFA, 0x00, 0x20, 0x00, 0xF0, 0x09, 0xFE, 0x1C, 0x4E, 0x10, 0x20, 0x30, 
+	0x61, 0x00, 0x20, 0xFA, 0xF7, 0x4A, 0xFA, 0xE8, 0x07, 0x0B, 0xD0, 0x13, 0x48, 0x00, 0x21, 0x01, 
+	0x61, 0xFF, 0x21, 0xC1, 0x60, 0x03, 0x20, 0xFA, 0xF7, 0x38, 0xFA, 0x03, 0x20, 0xFA, 0xF7, 0x3D, 
+	0xFA, 0x09, 0xE0, 0x13, 0x49, 0x60, 0x68, 0x08, 0x60, 0xA0, 0x68, 0xB0, 0x60, 0x20, 0x78, 0x40, 
+	0x07, 0x01, 0xD5, 0xFF, 0xF7, 
+	0x00, 0x01, 0x8B, 0x00, 0x80, 0xEE, 0xFE, 0xFF, 0xF7, 0x78, 0xFF, 0x70, 0xBD, 0x06, 0x48, 0x81, 
+	0x69, 0x09, 0x07, 0xFC, 0xD4, 0x41, 0x69, 0x49, 0x08, 0x49, 0x00, 0x41, 0x61, 0x70, 0x47, 0x00, 
+	0x00, 0xB0, 0x17, 0x00, 0x20, 0xC8, 0x02, 0x00, 0x20, 0x00, 0x00, 0x12, 0x40, 0xBF, 0xC2, 0x00, 
+	0x00, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x10, 0x12, 0x40, 0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x14, 
+	0x40, 0x00, 0x20, 0x14, 0x40, 0x3A, 0x49, 0x00, 0x20, 0x08, 0x70, 0x70, 0x47, 0x38, 0x49, 0x00, 
+	0x20, 0x08, 0x70, 0x70, 0x47, 0xF0, 0xB5, 0x37, 0x48, 0x85, 0xB0, 0x80, 0x6A, 0x03, 0x90, 0x35, 
+	0x48, 0x00, 0x24, 0x40, 0x30, 0x04, 0x90, 0x5B, 0xE0, 0x33, 0x49, 0x60, 0x00, 0x40, 0x18, 0x82, 
+	0x88, 0x0B, 0x7B, 0xD7, 0x18, 0x82, 0x88, 0x0B, 0x7B, 0xD2, 0x1A, 0x02, 0x92, 0x02, 0x8A, 0x0B, 
+	0x7E, 0xD2, 0x18, 0x01, 0x92, 
+	0x00, 0x01, 0x8C, 0x00, 0x80, 0x00, 0x8A, 0x09, 0x7E, 0x40, 0x1A, 0x00, 0x90, 0x2B, 0x48, 0x05, 
+	0x57, 0x2B, 0x48, 0x06, 0x57, 0x04, 0x98, 0x00, 0x6A, 0x01, 0x28, 0x0E, 0xD1, 0x96, 0x42, 0x3B, 
+	0xDD, 0x23, 0x48, 0x01, 0x21, 0x02, 0x78, 0xA1, 0x40, 0x11, 0x43, 0x04, 0xE0, 0x20, 0x48, 0x01, 
+	0x22, 0x01, 0x78, 0xA2, 0x40, 0x91, 0x43, 0x01, 0x70, 0x31, 0xE0, 0x04, 0x98, 0x00, 0x6A, 0x02, 
+	0x28, 0x0B, 0xD1, 0xBD, 0x42, 0xEC, 0xDC, 0x02, 0x98, 0x85, 0x42, 0x28, 0xDC, 0x18, 0x49, 0x01, 
+	0x20, 0x0A, 0x78, 0xA0, 0x40, 0x82, 0x43, 0x0A, 0x70, 0x21, 0xE0, 0xF4, 0xF7, 0x84, 0xFF, 0x00, 
+	0x28, 0x0B, 0xD1, 0xBD, 0x42, 0xDC, 0xDC, 0x02, 0x98, 0x85, 0x42, 0x18, 0xDC, 0x10, 0x4A, 0x01, 
+	0x21, 0x10, 0x78, 0xA1, 0x40, 0x88, 0x43, 0x10, 0x70, 0x11, 0xE0, 0xBD, 0x42, 0x09, 0xDD, 0x01, 
+	0x98, 0x86, 0x42, 0x06, 0xDD, 
+	0x00, 0x01, 0x8D, 0x00, 0x80, 0x0A, 0x49, 0x01, 0x20, 0x0A, 0x78, 0xA0, 0x40, 0x10, 0x43, 0x08, 
+	0x70, 0x05, 0xE0, 0x02, 0x98, 0x85, 0x42, 0x02, 0xDC, 0x00, 0x98, 0x86, 0x42, 0xC6, 0xDD, 0x64, 
+	0x1C, 0x03, 0x98, 0x84, 0x42, 0xA0, 0xD3, 0x05, 0xB0, 0xF0, 0xBD, 0x01, 0x48, 0x00, 0x78, 0x70, 
+	0x47, 0xD4, 0x02, 0x00, 0x20, 0x98, 0xDF, 0x00, 0x00, 0xE8, 0xDD, 0x00, 0x00, 0x74, 0x01, 0x00, 
+	0x20, 0x78, 0x01, 0x00, 0x20, 0x70, 0xB5, 0x05, 0x46, 0x0B, 0x48, 0x00, 0x23, 0x0B, 0x4C, 0x10, 
+	0xE0, 0xCA, 0x5C, 0x12, 0x02, 0x50, 0x40, 0x08, 0x22, 0x06, 0x04, 0x02, 0xD5, 0x40, 0x00, 0x60, 
+	0x40, 0x00, 0xE0, 0x40, 0x00, 0x52, 0x1E, 0x12, 0x06, 0x80, 0xB2, 0x12, 0x0E, 0xF4, 0xD1, 0x5B, 
+	0x1C, 0x9B, 0xB2, 0xAB, 0x42, 0xEC, 0xD3, 0x70, 0xBD, 0xFF, 0xFF, 0x00, 0x00, 0x21, 0x10, 0x00, 
+	0x00, 0x1C, 0xB5, 0x68, 0x46, 
+	0x00, 0x01, 0x8E, 0x00, 0x80, 0x00, 0xF0, 0x59, 0xF8, 0x00, 0x22, 0x0E, 0x49, 0x00, 0x28, 0x08, 
+	0xD1, 0x6B, 0x46, 0x58, 0x88, 0x90, 0x28, 0x04, 0xD1, 0x18, 0x88, 0xC3, 0x1F, 0xF9, 0x3B, 0x66, 
+	0x2B, 0x02, 0xD3, 0x0A, 0x70, 0x4A, 0x80, 0x1C, 0xBD, 0x07, 0x4A, 0x40, 0x00, 0x80, 0x18, 0xFF, 
+	0x38, 0xFF, 0x38, 0x02, 0x38, 0x00, 0x88, 0x48, 0x80, 0x80, 0xB2, 0xC0, 0x06, 0xC0, 0x0E, 0x08, 
+	0x70, 0x1C, 0xBD, 0x00, 0x00, 0xD6, 0x02, 0x00, 0x20, 0xD0, 0xD9, 0x00, 0x00, 0x70, 0xB5, 0x01, 
+	0x23, 0x00, 0x22, 0x5B, 0x02, 0x98, 0x42, 0x1C, 0xD2, 0x2B, 0x4B, 0x2A, 0x4C, 0x9C, 0x60, 0x00, 
+	0x25, 0xFF, 0x28, 0x00, 0xD9, 0x1D, 0x01, 0x29, 0x4E, 0x35, 0x43, 0x25, 0x60, 0x7F, 0x25, 0x65, 
+	0x60, 0x8D, 0x5C, 0xA6, 0x18, 0x35, 0x72, 0x52, 0x1C, 0xD2, 0xB2, 0x80, 0x2A, 0xF8, 0xD3, 0x24, 
+	0x49, 0x59, 0x60, 0x59, 0x68, 
+	0x00, 0x01, 0x8F, 0x00, 0x80, 0x00, 0x29, 0xFC, 0xDB, 0x9A, 0x68, 0x05, 0x21, 0x49, 0x07, 0x8A, 
+	0x42, 0x01, 0xD0, 0x09, 0x20, 0x70, 0xBD, 0x9C, 0x60, 0x1E, 0x4A, 0x00, 0x04, 0x80, 0x18, 0x20, 
+	0x60, 0x1B, 0x48, 0x40, 0x1C, 0x58, 0x60, 0x58, 0x68, 0x00, 0x28, 0xFC, 0xDB, 0x98, 0x68, 0x88, 
+	0x42, 0x01, 0xD1, 0x00, 0x20, 0x70, 0xBD, 0x98, 0x68, 0x70, 0xBD, 0x70, 0xB5, 0x05, 0x46, 0x12, 
+	0x4E, 0x15, 0x48, 0xB0, 0x60, 0xFA, 0xF7, 0xCE, 0xF8, 0xF1, 0x02, 0x71, 0x60, 0x71, 0x68, 0x00, 
+	0x29, 0xFC, 0xDB, 0xB4, 0x68, 0x71, 0x68, 0xC0, 0xB2, 0x0E, 0x05, 0x36, 0x0D, 0xFA, 0xF7, 0xC6, 
+	0xF8, 0x20, 0x0F, 0x0A, 0x28, 0x01, 0xD0, 0x01, 0x20, 0x70, 0xBD, 0x2C, 0x80, 0x20, 0x0C, 0x28, 
+	0x71, 0x20, 0x02, 0x00, 0x0F, 0x68, 0x71, 0x20, 0x03, 0x00, 0x0F, 0xA8, 0x71, 0x6E, 0x80, 0x00, 
+	0x20, 0x70, 0xBD, 0x00, 0x00, 
+	0x00, 0x01, 0x90, 0x00, 0x80, 0xBC, 0x17, 0x00, 0x20, 0x00, 0x00, 0x10, 0x40, 0xB6, 0xD7, 0x00, 
+	0x00, 0x04, 0x00, 0x00, 0x80, 0xB6, 0xD8, 0x00, 0x00, 0xB6, 0xD3, 0x00, 0x00, 0xFF, 0x48, 0x00, 
+	0x21, 0xC1, 0x80, 0x41, 0x81, 0x01, 0x81, 0x81, 0x81, 0x81, 0x70, 0xFD, 0x49, 0x0A, 0x89, 0xC2, 
+	0x81, 0x09, 0x7B, 0x01, 0x71, 0x70, 0x47, 0xF1, 0xE7, 0xF9, 0x4A, 0xF8, 0x49, 0x00, 0x28, 0x03, 
+	0xD1, 0x10, 0x89, 0xC8, 0x81, 0x10, 0x7B, 0x04, 0xE0, 0x01, 0x28, 0x03, 0xD1, 0x50, 0x89, 0xC8, 
+	0x81, 0x50, 0x7B, 0x08, 0x71, 0x70, 0x47, 0x10, 0xB5, 0xF0, 0x4B, 0x19, 0x89, 0xDA, 0x88, 0x11, 
+	0x43, 0x00, 0x20, 0xCC, 0x07, 0x05, 0xD1, 0x01, 0x21, 0x81, 0x40, 0x11, 0x43, 0xD9, 0x80, 0xC0, 
+	0xB2, 0x10, 0xBD, 0x40, 0x1C, 0x49, 0x08, 0x0E, 0x28, 0xF3, 0xD9, 0x1E, 0x20, 0x10, 0xBD, 0xFF, 
+	0xB5, 0x87, 0xB0, 0x10, 0x9C, 
+	0x00, 0x01, 0x91, 0x00, 0x80, 0x22, 0x46, 0x79, 0x32, 0x01, 0x92, 0x0B, 0x32, 0x94, 0x46, 0x01, 
+	0x28, 0x06, 0xD1, 0x01, 0x29, 0x04, 0xD1, 0x09, 0x99, 0x00, 0x20, 0x08, 0x70, 0x0B, 0xB0, 0xF0, 
+	0xBD, 0x00, 0x22, 0x22, 0xE0, 0x04, 0x9B, 0x00, 0x22, 0xDE, 0x4F, 0x9B, 0x00, 0x0A, 0xE0, 0x2C, 
+	0x26, 0x15, 0x46, 0x75, 0x43, 0x0A, 0x9E, 0xAD, 0x19, 0xED, 0x58, 0xBD, 0x42, 0x00, 0xDA, 0x2F, 
+	0x46, 0x52, 0x1C, 0xD2, 0xB2, 0x82, 0x42, 0xF2, 0xD3, 0x00, 0x22, 0x09, 0xE0, 0x2C, 0x26, 0x15, 
+	0x46, 0x75, 0x43, 0x0A, 0x9E, 0xAE, 0x19, 0xF5, 0x58, 0xED, 0x1B, 0x52, 0x1C, 0xF5, 0x50, 0xD2, 
+	0xB2, 0x82, 0x42, 0xF3, 0xD3, 0x04, 0x9A, 0x52, 0x1C, 0xD2, 0xB2, 0x04, 0x92, 0x8A, 0x42, 0xD9, 
+	0xD3, 0x00, 0x22, 0x34, 0xE0, 0x09, 0x9D, 0xFF, 0x23, 0xAB, 0x54, 0x00, 0x23, 0x2B, 0xE0, 0x2C, 
+	0x25, 0x0A, 0x9E, 0x5D, 0x43, 
+	0x00, 0x01, 0x92, 0x00, 0x80, 0xAD, 0x19, 0x96, 0x00, 0xAD, 0x59, 0x00, 0x2D, 0x1C, 0xD1, 0x0B, 
+	0x25, 0x5D, 0x43, 0x2D, 0x19, 0x00, 0x26, 0x06, 0x95, 0xAE, 0x54, 0x35, 0x46, 0x01, 0x27, 0x06, 
+	0xE0, 0x09, 0x9E, 0x76, 0x57, 0x9E, 0x42, 0x00, 0xD1, 0x00, 0x27, 0x6D, 0x1C, 0xED, 0xB2, 0x95, 
+	0x42, 0x02, 0xD2, 0x01, 0x2F, 0xF4, 0xD0, 0x0C, 0xE0, 0x01, 0x2F, 0x0A, 0xD1, 0x09, 0x9D, 0xAB, 
+	0x54, 0x06, 0x9E, 0x01, 0x25, 0xB5, 0x54, 0x04, 0xE0, 0x0B, 0x26, 0xFF, 0x25, 0x5E, 0x43, 0x36, 
+	0x19, 0xF8, 0xE7, 0x5B, 0x1C, 0xDB, 0xB2, 0x83, 0x42, 0xD1, 0xD3, 0x52, 0x1C, 0xD2, 0xB2, 0x8A, 
+	0x42, 0xC8, 0xD3, 0x2D, 0xE1, 0x00, 0x22, 0x04, 0xE0, 0x01, 0x9B, 0x00, 0x25, 0x9D, 0x54, 0x52, 
+	0x1C, 0xD2, 0xB2, 0x82, 0x42, 0xF8, 0xD3, 0x00, 0x22, 0x08, 0xE0, 0x09, 0x9B, 0x9B, 0x56, 0x5B, 
+	0x1C, 0x00, 0xD0, 0x01, 0x23, 
+	0x00, 0x01, 0x93, 0x00, 0x80, 0x65, 0x46, 0xAB, 0x54, 0x52, 0x1C, 0xD2, 0xB2, 0x8A, 0x42, 0xF4, 
+	0xD3, 0x00, 0x22, 0xA2, 0x4B, 0xD2, 0x43, 0x1A, 0x70, 0xC9, 0xE0, 0x00, 0x22, 0x13, 0x46, 0x9F, 
+	0x4F, 0x00, 0x92, 0x1F, 0xE0, 0x01, 0x9A, 0xD2, 0x5C, 0x01, 0x2A, 0x19, 0xD0, 0x0B, 0x26, 0x1D, 
+	0x46, 0x75, 0x43, 0x00, 0x22, 0x2D, 0x19, 0x5E, 0xB2, 0x05, 0x95, 0x0F, 0xE0, 0x65, 0x46, 0xAD, 
+	0x5C, 0x01, 0x2D, 0x09, 0xD0, 0x05, 0x9D, 0xAD, 0x5C, 0x00, 0x2D, 0x05, 0xD1, 0x01, 0x25, 0x00, 
+	0x95, 0x92, 0x4D, 0x3E, 0x70, 0x6D, 0x1C, 0x2A, 0x70, 0x52, 0x1C, 0xD2, 0xB2, 0x8A, 0x42, 0xED, 
+	0xD3, 0x5B, 0x1C, 0xDB, 0xB2, 0x83, 0x42, 0xDD, 0xD3, 0x00, 0x9A, 0x52, 0xB2, 0x02, 0x92, 0x00, 
+	0x2A, 0x62, 0xD1, 0x8C, 0x4A, 0x03, 0x92, 0x00, 0x22, 0x1A, 0xE0, 0x01, 0x9A, 0xD2, 0x5D, 0x01, 
+	0x2A, 0x14, 0xD0, 0x3B, 0x46, 
+	0x00, 0x01, 0x94, 0x00, 0x80, 0x2C, 0x25, 0x6B, 0x43, 0x0A, 0x9D, 0x00, 0x22, 0x5E, 0x19, 0x0B, 
+	0xE0, 0x63, 0x46, 0x9B, 0x5C, 0x01, 0x2B, 0x05, 0xD0, 0x93, 0x00, 0xF3, 0x58, 0x03, 0x9D, 0xAB, 
+	0x42, 0x00, 0xDA, 0x03, 0x93, 0x52, 0x1C, 0xD2, 0xB2, 0x8A, 0x42, 0xF1, 0xD3, 0x7A, 0x1C, 0xD2, 
+	0xB2, 0x17, 0x46, 0x82, 0x42, 0xE1, 0xD3, 0x00, 0x23, 0x3B, 0xE0, 0x00, 0x22, 0x35, 0xE0, 0x65, 
+	0x46, 0xAD, 0x5C, 0x01, 0x2D, 0x15, 0xD1, 0x01, 0x9D, 0xED, 0x5C, 0x01, 0x2D, 0x11, 0xD1, 0x2C, 
+	0x25, 0x0A, 0x9E, 0x5D, 0x43, 0xAE, 0x19, 0x95, 0x00, 0xAE, 0x46, 0x37, 0x46, 0x75, 0x59, 0x03, 
+	0x9E, 0xAD, 0x19, 0x3E, 0x46, 0x77, 0x46, 0xF5, 0x51, 0x0B, 0x26, 0xFF, 0x25, 0x5E, 0x43, 0x36, 
+	0x19, 0xB5, 0x54, 0x65, 0x46, 0xAD, 0x5C, 0x00, 0x2D, 0x15, 0xD1, 0x01, 0x9D, 0xED, 0x5C, 0x00, 
+	0x2D, 0x11, 0xD1, 0x2C, 0x25, 
+	0x00, 0x01, 0x95, 0x00, 0x80, 0x0A, 0x9E, 0x5D, 0x43, 0xAE, 0x19, 0x95, 0x00, 0xAE, 0x46, 0x37, 
+	0x46, 0x75, 0x59, 0x03, 0x9E, 0xAD, 0x1B, 0x3E, 0x46, 0x77, 0x46, 0xF5, 0x51, 0x03, 0xD1, 0x0B, 
+	0x26, 0x5E, 0x43, 0x36, 0x19, 0xB5, 0x54, 0x52, 0x1C, 0xD2, 0xB2, 0x8A, 0x42, 0xC7, 0xD3, 0x5B, 
+	0x1C, 0xDB, 0xB2, 0x83, 0x42, 0xC1, 0xD3, 0x70, 0xE7, 0x00, 0x22, 0x58, 0x4E, 0x53, 0x1E, 0xB5, 
+	0x56, 0x0B, 0x26, 0x75, 0x43, 0x55, 0x4E, 0x2F, 0x19, 0x76, 0x1C, 0xB5, 0x56, 0x0B, 0xE0, 0x66, 
+	0x46, 0xB6, 0x5C, 0x00, 0x2E, 0x05, 0xD0, 0xAA, 0x42, 0x03, 0xD0, 0xBE, 0x5C, 0x01, 0x2E, 0x00, 
+	0xD1, 0x53, 0xB2, 0x52, 0x1C, 0xD2, 0xB2, 0x8A, 0x42, 0x02, 0xD2, 0x5E, 0x1C, 0xEF, 0xD0, 0x10, 
+	0xE0, 0x5A, 0x1C, 0x0E, 0xD1, 0x02, 0x9A, 0x01, 0x2A, 0xDD, 0xD1, 0x48, 0x4E, 0x00, 0x23, 0xF3, 
+	0x56, 0x0B, 0x25, 0x6B, 0x43, 
+	0x00, 0x01, 0x96, 0x00, 0x80, 0x02, 0x22, 0x1B, 0x19, 0x01, 0x25, 0x75, 0x57, 0x5A, 0x55, 0x35, 
+	0x46, 0x0F, 0xE0, 0x02, 0x22, 0x7A, 0x55, 0x00, 0x25, 0x62, 0x46, 0xD5, 0x54, 0x3F, 0x4D, 0x00, 
+	0x26, 0xAE, 0x57, 0x01, 0x9A, 0x01, 0x23, 0x93, 0x55, 0x9A, 0x1E, 0x2B, 0x46, 0x1A, 0x70, 0x5A, 
+	0x70, 0x33, 0xE7, 0x00, 0x22, 0xAA, 0x56, 0x0B, 0x23, 0x5A, 0x43, 0x01, 0x23, 0xEB, 0x56, 0x12, 
+	0x19, 0xD6, 0x56, 0x02, 0x2E, 0x23, 0xD1, 0x00, 0x27, 0x0E, 0xE0, 0x0B, 0x26, 0x7E, 0x43, 0x36, 
+	0x19, 0xF6, 0x5C, 0x01, 0x2E, 0x06, 0xD1, 0xD6, 0x54, 0xAE, 0x57, 0x09, 0x9B, 0x2A, 0x78, 0x9A, 
+	0x55, 0x2F, 0x70, 0x03, 0xE0, 0x7F, 0x1C, 0xFF, 0xB2, 0x87, 0x42, 0xEE, 0xD3, 0x87, 0x42, 0xE0, 
+	0xD1, 0x2A, 0x46, 0x00, 0x25, 0x55, 0x57, 0x0B, 0x26, 0x01, 0x23, 0x75, 0x43, 0xD6, 0x56, 0x2D, 
+	0x19, 0xAB, 0x55, 0x01, 0x26, 
+	0x00, 0x01, 0x97, 0x00, 0x80, 0x96, 0x57, 0x09, 0x9D, 0x13, 0x78, 0xAB, 0x55, 0x18, 0xE0, 0x01, 
+	0x2E, 0xCF, 0xD1, 0x00, 0x26, 0x07, 0xE0, 0x97, 0x5D, 0x02, 0x2F, 0x02, 0xD1, 0xD7, 0x54, 0x6E, 
+	0x70, 0x03, 0xE0, 0x76, 0x1C, 0xF6, 0xB2, 0x8E, 0x42, 0xF5, 0xD3, 0x8E, 0x42, 0xC1, 0xD1, 0x00, 
+	0x22, 0xAA, 0x56, 0x0B, 0x26, 0x72, 0x43, 0x02, 0x23, 0x12, 0x19, 0x01, 0x26, 0xAE, 0x57, 0x93, 
+	0x55, 0x00, 0x23, 0x1A, 0x46, 0x06, 0xE0, 0x09, 0x9D, 0xAD, 0x56, 0x6D, 0x1C, 0x00, 0xD0, 0x5B, 
+	0x1C, 0x52, 0x1C, 0xD2, 0xB2, 0x8A, 0x42, 0xF6, 0xD3, 0x8B, 0x42, 0x00, 0xD2, 0xC2, 0xE6, 0x5D, 
+	0xE6, 0xFF, 0xB5, 0x8C, 0x46, 0x9E, 0x46, 0x00, 0x25, 0x23, 0xE0, 0x29, 0x46, 0x2C, 0x23, 0x59, 
+	0x43, 0x09, 0x9B, 0x00, 0x20, 0x74, 0x46, 0xCB, 0x18, 0x0F, 0xE0, 0x51, 0x88, 0x66, 0x88, 0x97, 
+	0x88, 0x89, 0x1B, 0x0E, 0xB2, 
+	0x00, 0x01, 0x98, 0x00, 0x80, 0xA1, 0x88, 0x76, 0x43, 0x79, 0x1A, 0x09, 0xB2, 0x49, 0x43, 0x71, 
+	0x18, 0x86, 0x00, 0x40, 0x1C, 0x99, 0x51, 0xC0, 0xB2, 0x0E, 0x34, 0x05, 0xE0, 0xDA, 0x02, 0x00, 
+	0x20, 0x5C, 0xDD, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x7F, 0x84, 0x45, 0xE6, 0xD8, 0x6D, 0x1C, 0xED, 
+	0xB2, 0x0E, 0x32, 0x00, 0x98, 0xA8, 0x42, 0xD8, 0xD8, 0xFF, 0xBD, 0xF0, 0xB5, 0xB5, 0x4B, 0xB6, 
+	0x4A, 0x05, 0x46, 0x19, 0x78, 0x90, 0x78, 0x0C, 0x46, 0x87, 0xB0, 0x04, 0x43, 0x02, 0xD1, 0xD0, 
+	0x70, 0x07, 0xB0, 0xF0, 0xBD, 0x2C, 0x46, 0xFF, 0x34, 0xE5, 0x34, 0x26, 0x46, 0x0B, 0x36, 0x03, 
+	0x96, 0x0B, 0x36, 0x01, 0x96, 0x00, 0x26, 0xAC, 0x4A, 0x0B, 0x27, 0xD6, 0x80, 0x56, 0x81, 0x04, 
+	0x91, 0x31, 0x46, 0x0E, 0x26, 0x0A, 0x46, 0x72, 0x43, 0xA8, 0x4E, 0x1E, 0x23, 0x92, 0x19, 0xD3, 
+	0x72, 0x03, 0x9A, 0x57, 0x54, 
+	0x00, 0x01, 0x99, 0x00, 0x80, 0x49, 0x1C, 0xC9, 0xB2, 0x0B, 0x29, 0xF2, 0xD3, 0xA2, 0x4E, 0x01, 
+	0x28, 0x06, 0xD1, 0x04, 0x99, 0x01, 0x29, 0x05, 0xD1, 0x03, 0x98, 0x00, 0x21, 0x01, 0x70, 0x36, 
+	0xE0, 0x00, 0x28, 0x34, 0xD0, 0x04, 0x99, 0x00, 0x29, 0x31, 0xD0, 0x81, 0x42, 0x00, 0x95, 0x18, 
+	0xD9, 0x01, 0x46, 0x9A, 0x4A, 0x9A, 0x4B, 0x04, 0x98, 0xFF, 0xF7, 0x92, 0xFF, 0x01, 0x9A, 0x00, 
+	0x92, 0x2B, 0x46, 0x22, 0x46, 0xB1, 0x78, 0x04, 0x98, 0xFF, 0xF7, 0xD9, 0xFD, 0x00, 0x20, 0xB1, 
+	0x78, 0x04, 0xE0, 0x03, 0x9B, 0x22, 0x5C, 0x1A, 0x54, 0x40, 0x1C, 0xC0, 0xB2, 0x88, 0x42, 0xF8, 
+	0xD3, 0x15, 0xE0, 0x8F, 0x4A, 0x8D, 0x4B, 0xFF, 0xF7, 0x7B, 0xFF, 0x01, 0x9A, 0x00, 0x92, 0x2B, 
+	0x46, 0x22, 0x46, 0xB0, 0x78, 0x04, 0x99, 0xFF, 0xF7, 0xC2, 0xFD, 0x00, 0x20, 0x04, 0xE0, 0x22, 
+	0x56, 0x03, 0x99, 0x88, 0x54, 
+	0x00, 0x01, 0x9A, 0x00, 0x80, 0x40, 0x1C, 0xC0, 0xB2, 0x04, 0x99, 0x88, 0x42, 0xF7, 0xD3, 0x00, 
+	0x27, 0x83, 0x4D, 0x38, 0x46, 0x2C, 0x46, 0x05, 0x97, 0x81, 0xE0, 0x05, 0x9A, 0x03, 0x99, 0xE0, 
+	0x7A, 0x89, 0x5C, 0x0B, 0x29, 0x5D, 0xD0, 0x0E, 0x22, 0x51, 0x43, 0x7C, 0x4A, 0x8E, 0x18, 0x71, 
+	0x88, 0x62, 0x88, 0x89, 0x1A, 0x00, 0xD5, 0x49, 0x42, 0xB2, 0x88, 0xA3, 0x88, 0xD2, 0x1A, 0x00, 
+	0xD5, 0x52, 0x42, 0x94, 0x46, 0x72, 0x46, 0x01, 0x2A, 0x0F, 0xD1, 0x04, 0x9A, 0x01, 0x2A, 0x0C, 
+	0xD1, 0x71, 0x4A, 0x13, 0x8A, 0xCB, 0x1A, 0x00, 0xD5, 0x5B, 0x42, 0x9E, 0x46, 0x52, 0x8A, 0x63, 
+	0x46, 0x9A, 0x1A, 0x00, 0xD5, 0x52, 0x42, 0x13, 0x46, 0x01, 0xE0, 0x8E, 0x46, 0x63, 0x46, 0x6A, 
+	0x4A, 0x11, 0x82, 0x61, 0x46, 0x51, 0x82, 0xD2, 0x89, 0x96, 0x45, 0x08, 0xDC, 0x93, 0x42, 0x06, 
+	0xDC, 0x71, 0x46, 0xC9, 0x18, 
+	0x00, 0x01, 0x9B, 0x00, 0x80, 0x0B, 0x23, 0x5A, 0x43, 0xD2, 0x08, 0x91, 0x42, 0x03, 0xDD, 0x62, 
+	0x49, 0xC9, 0x78, 0x00, 0x29, 0x25, 0xD1, 0x0E, 0x28, 0x09, 0xD8, 0x5F, 0x4A, 0x01, 0x21, 0xD3, 
+	0x88, 0x81, 0x40, 0x19, 0x43, 0xD1, 0x80, 0x21, 0x88, 0x49, 0x1C, 0x31, 0x80, 0x07, 0xE0, 0xA1, 
+	0x7A, 0x00, 0x29, 0x0A, 0xD1, 0xFF, 0xF7, 0x4F, 0xFD, 0x00, 0x21, 0x31, 0x80, 0xE0, 0x72, 0xF0, 
+	0x72, 0x55, 0x48, 0x31, 0x46, 0x00, 0x79, 0xB0, 0x72, 0x1E, 0xE0, 0x42, 0x06, 0x52, 0x0E, 0x01, 
+	0x21, 0x91, 0x40, 0x51, 0x4A, 0x53, 0x89, 0x19, 0x43, 0x51, 0x81, 0xF0, 0x72, 0xA0, 0x7A, 0xB0, 
+	0x72, 0x18, 0xE0, 0x0E, 0x28, 0x16, 0xD8, 0xA1, 0x7A, 0x00, 0x29, 0x13, 0xD0, 0x01, 0x22, 0x82, 
+	0x40, 0x49, 0x48, 0x49, 0x1E, 0xC3, 0x88, 0x1A, 0x43, 0xC2, 0x80, 0x20, 0x88, 0x40, 0x1C, 0x20, 
+	0x80, 0xA1, 0x72, 0xAC, 0x42, 
+	0x00, 0x01, 0x9C, 0x00, 0x80, 0x03, 0xD0, 0x21, 0x46, 0x28, 0x46, 0xF6, 0xF7, 0xF3, 0xFD, 0x7F, 
+	0x1C, 0xFF, 0xB2, 0x0E, 0x35, 0x05, 0x98, 0x40, 0x1C, 0xC0, 0xB2, 0x0E, 0x34, 0x05, 0x90, 0x01, 
+	0x46, 0x3D, 0x48, 0x80, 0x78, 0x86, 0x46, 0x81, 0x42, 0x00, 0xD2, 0x76, 0xE7, 0x00, 0x20, 0x3E, 
+	0x46, 0x3A, 0x4C, 0x02, 0x95, 0x06, 0x90, 0x55, 0xE0, 0xE0, 0x7A, 0x1E, 0x28, 0x3D, 0xD1, 0xA0, 
+	0x7A, 0x84, 0x46, 0x00, 0x28, 0x1C, 0xD1, 0x0B, 0x2E, 0x0A, 0xD2, 0x02, 0x98, 0x85, 0x42, 0x02, 
+	0xD0, 0x29, 0x46, 0xF6, 0xF7, 0xCF, 0xFD, 0x02, 0x98, 0x76, 0x1C, 0x0E, 0x30, 0xF6, 0xB2, 0x02, 
+	0x90, 0xFF, 0xF7, 0xF9, 0xFC, 0xE0, 0x72, 0x00, 0x20, 0x20, 0x80, 0x2B, 0x48, 0x21, 0x46, 0x00, 
+	0x79, 0xA0, 0x72, 0x28, 0x46, 0xF6, 0xF7, 0xBE, 0xFD, 0x7F, 0x1C, 0xFF, 0xB2, 0x0E, 0x35, 0x2C, 
+	0xE0, 0x0B, 0x2E, 0x2A, 0xD2, 
+	0x00, 0x01, 0x9D, 0x00, 0x80, 0x24, 0x48, 0x81, 0x89, 0x43, 0x89, 0x19, 0x43, 0x00, 0x20, 0xCA, 
+	0x07, 0x0B, 0xD1, 0x80, 0x22, 0x01, 0x46, 0x91, 0x43, 0x01, 0x22, 0x8A, 0x40, 0x1E, 0x49, 0x1A, 
+	0x43, 0x4A, 0x81, 0x80, 0x21, 0x08, 0x43, 0xC0, 0xB2, 0x04, 0xE0, 0x40, 0x1C, 0x49, 0x08, 0x0E, 
+	0x28, 0xED, 0xD9, 0x1E, 0x20, 0xE0, 0x72, 0x60, 0x46, 0x04, 0xE0, 0x00, 0x06, 0x0D, 0xD5, 0x0B, 
+	0x2E, 0x0B, 0xD2, 0xA0, 0x7A, 0x21, 0x46, 0x40, 0x1E, 0xA0, 0x72, 0x02, 0x98, 0xF6, 0xF7, 0x92, 
+	0xFD, 0x76, 0x1C, 0x02, 0x98, 0xF6, 0xB2, 0x0E, 0x30, 0x02, 0x90, 0x06, 0x98, 0x40, 0x1C, 0xC0, 
+	0xB2, 0x0E, 0x34, 0x06, 0x90, 0x04, 0x99, 0x88, 0x42, 0x01, 0xD2, 0x0B, 0x2F, 0xA4, 0xD3, 0x09, 
+	0x48, 0x09, 0x4C, 0x07, 0x70, 0xA1, 0x78, 0xE1, 0x70, 0xA6, 0x70, 0x02, 0x78, 0x0E, 0x20, 0x42, 
+	0x43, 0x07, 0x49, 0x06, 0x48, 
+	0x00, 0x01, 0x9E, 0x00, 0x80, 0x00, 0xF0, 0x3E, 0xFA, 0xE0, 0x88, 0x20, 0x81, 0x60, 0x89, 0xA0, 
+	0x81, 0x9E, 0xE6, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x20, 0xDA, 0x02, 0x00, 0x20, 0x6A, 0x05, 0x00, 
+	0x20, 0x44, 0x18, 0x00, 0x20, 0x10, 0xB5, 0x00, 0x23, 0x17, 0x48, 0x17, 0x4A, 0x83, 0x75, 0xFF, 
+	0x21, 0xC3, 0x75, 0x4C, 0x32, 0x01, 0x76, 0x14, 0x46, 0x18, 0x46, 0x08, 0x34, 0x11, 0x54, 0x23, 
+	0x54, 0x40, 0x1C, 0x08, 0x28, 0xFA, 0xD3, 0x10, 0xBD, 0x0F, 0x49, 0x00, 0x20, 0xC8, 0x63, 0xC8, 
+	0x71, 0x08, 0x72, 0x08, 0x64, 0x48, 0x72, 0x48, 0x64, 0x88, 0x72, 0xC8, 0x72, 0xC8, 0x77, 0x88, 
+	0x64, 0x08, 0x75, 0x48, 0x75, 0x88, 0x71, 0xDD, 0xE7, 0x10, 0xB5, 0x07, 0x4C, 0x20, 0x78, 0x00, 
+	0x28, 0x03, 0xD1, 0xFF, 0xF7, 0xE9, 0xFF, 0x01, 0x20, 0x20, 0x70, 0x10, 0xBD, 0x10, 0xB5, 0x00, 
+	0x24, 0xF4, 0xF7, 0xFD, 0xFC, 
+	0x00, 0x01, 0x9F, 0x00, 0x80, 0x20, 0x46, 0x10, 0xBD, 0xF0, 0x02, 0x00, 0x20, 0x70, 0x47, 0x00, 
+	0x00, 0x68, 0x49, 0x00, 0x20, 0x88, 0x70, 0x70, 0x47, 0x10, 0xB5, 0xFF, 0xF7, 0x13, 0xFB, 0x66, 
+	0x48, 0x00, 0x68, 0xF5, 0xF7, 0xFC, 0xFF, 0xF8, 0xF7, 0x99, 0xFF, 0x62, 0x49, 0x01, 0x20, 0x08, 
+	0x70, 0x48, 0x70, 0x10, 0xBD, 0xF8, 0xB5, 0x5F, 0x4C, 0x07, 0x46, 0x00, 0x25, 0x60, 0x78, 0x2E, 
+	0x46, 0x00, 0x28, 0x09, 0xD1, 0x5D, 0x49, 0x60, 0x68, 0x09, 0x6A, 0x38, 0x1A, 0x88, 0x42, 0x48, 
+	0xD9, 0xFF, 0xF7, 0x6B, 0xFB, 0x00, 0x28, 0x44, 0xD1, 0x00, 0x20, 0x67, 0x60, 0x60, 0x70, 0x58, 
+	0x48, 0x87, 0x6A, 0x40, 0x30, 0x00, 0x6A, 0x55, 0x4C, 0x00, 0x90, 0x60, 0x34, 0x02, 0x28, 0x01, 
+	0xD0, 0x03, 0x28, 0x18, 0xD1, 0x00, 0x20, 0x53, 0x4B, 0x0B, 0xE0, 0x41, 0x00, 0x00, 0x22, 0x59, 
+	0x5E, 0xA2, 0x5E, 0x91, 0x42, 
+	0x00, 0x01, 0xA0, 0x00, 0x80, 0x03, 0xDC, 0x02, 0x22, 0xA2, 0x5E, 0x91, 0x42, 0x00, 0xDA, 0x6D, 
+	0x1C, 0x40, 0x1C, 0xB8, 0x42, 0xF1, 0xD3, 0x00, 0x2D, 0x05, 0xD0, 0xFD, 0xF7, 0xD3, 0xFE, 0x4A, 
+	0x49, 0x08, 0x70, 0xF8, 0xF7, 0x5B, 0xFF, 0x00, 0x98, 0x01, 0x28, 0x01, 0xD0, 0x03, 0x28, 0x18, 
+	0xD1, 0x00, 0x20, 0x46, 0x4A, 0x0B, 0xE0, 0x41, 0x00, 0x04, 0x23, 0x51, 0x5E, 0xE3, 0x5E, 0x99, 
+	0x42, 0x03, 0xDC, 0x06, 0x23, 0xE3, 0x5E, 0x99, 0x42, 0x00, 0xDA, 0x76, 0x1C, 0x40, 0x1C, 0xB8, 
+	0x42, 0xF1, 0xD3, 0x00, 0x2E, 0x05, 0xD0, 0xFD, 0xF7, 0xC5, 0xFE, 0x3D, 0x49, 0x08, 0x70, 0xF8, 
+	0xF7, 0x3D, 0xFF, 0xF8, 0xBD, 0xF1, 0xB5, 0x82, 0xB0, 0xF9, 0xF7, 0x7C, 0xFC, 0x01, 0x90, 0x33, 
+	0x49, 0x01, 0x20, 0x60, 0x31, 0x0A, 0x7C, 0x92, 0x07, 0x0D, 0xD0, 0x09, 0x7C, 0x89, 0x07, 0x89, 
+	0x0F, 0x02, 0x29, 0x08, 0xD1, 
+	0x00, 0x01, 0xA1, 0x00, 0x80, 0x33, 0x49, 0x09, 0x78, 0x00, 0x29, 0x04, 0xD0, 0x32, 0x49, 0x09, 
+	0x88, 0xC9, 0x06, 0x00, 0xD5, 0x00, 0x20, 0x01, 0x26, 0xF6, 0x07, 0x00, 0x28, 0x40, 0xD0, 0x25, 
+	0x4F, 0x01, 0x25, 0x62, 0xB6, 0x38, 0x78, 0x01, 0x28, 0x15, 0xD0, 0x02, 0x28, 0x1F, 0xD0, 0x03, 
+	0x28, 0x32, 0xD1, 0x21, 0x48, 0x00, 0x68, 0xF8, 0xF7, 0xF3, 0xFC, 0xF8, 0xF7, 0x7F, 0xFF, 0xFF, 
+	0xF7, 0x89, 0xFA, 0x1E, 0x48, 0x3D, 0x70, 0xC0, 0x69, 0x01, 0x28, 0x02, 0xD1, 0x02, 0x98, 0xFF, 
+	0xF7, 0x71, 0xFF, 0x00, 0x24, 0x15, 0xE0, 0x18, 0x48, 0x00, 0x68, 0xF5, 0xF7, 0x60, 0xFF, 0xF5, 
+	0xF7, 0x23, 0xFA, 0xF5, 0xF7, 0x8E, 0xFD, 0x02, 0x20, 0x38, 0x70, 0x2C, 0x46, 0x09, 0xE0, 0x01, 
+	0x24, 0xF5, 0xF7, 0x00, 0xFE, 0x01, 0x28, 0x04, 0xD1, 0xF4, 0xF7, 0x89, 0xFF, 0x03, 0x20, 0x38, 
+	0x70, 0x34, 0x46, 0x72, 0xB6, 
+	0x00, 0x01, 0xA2, 0x00, 0x80, 0xE0, 0x07, 0x04, 0xD0, 0xF5, 0xF7, 0xF4, 0xFD, 0x01, 0x28, 0x00, 
+	0xD1, 0x34, 0x43, 0x00, 0x2C, 0xC5, 0xDB, 0x06, 0xE0, 0xF4, 0xF7, 0x95, 0xFF, 0x3D, 0x70, 0xD8, 
+	0xE7, 0xFF, 0xF7, 0x54, 0xFA, 0x34, 0x46, 0x01, 0x98, 0xC0, 0xB2, 0xF9, 0xF7, 0x1F, 0xFC, 0x20, 
+	0x46, 0xFE, 0xBD, 0x00, 0x00, 0x4C, 0x03, 0x00, 0x20, 0xC0, 0x02, 0x00, 0x20, 0x78, 0xDC, 0x00, 
+	0x00, 0x98, 0xDF, 0x00, 0x00, 0x8C, 0x01, 0x00, 0x20, 0x73, 0x02, 0x00, 0x20, 0x94, 0x01, 0x00, 
+	0x20, 0x74, 0x02, 0x00, 0x20, 0xFF, 0x00, 0x00, 0x20, 0x96, 0x02, 0x00, 0x20, 0x0C, 0x49, 0xCA, 
+	0x68, 0x03, 0x23, 0x1B, 0x02, 0x9A, 0x43, 0x00, 0x02, 0x02, 0x43, 0xCA, 0x60, 0x70, 0x47, 0x08, 
+	0x49, 0x4A, 0x69, 0x0F, 0x23, 0x1B, 0x04, 0x9A, 0x43, 0x00, 0x04, 0x02, 0x43, 0x4A, 0x61, 0x70, 
+	0x47, 0x03, 0x49, 0x8A, 0x69, 
+	0x00, 0x01, 0xA3, 0x00, 0x80, 0x10, 0x23, 0x9A, 0x43, 0x00, 0x01, 0x02, 0x43, 0x8A, 0x61, 0x70, 
+	0x47, 0x00, 0x00, 0x14, 0x40, 0x70, 0xB5, 0xC0, 0x21, 0x02, 0x78, 0xCC, 0x68, 0x2C, 0x49, 0x2D, 
+	0x4D, 0x40, 0x78, 0x01, 0x2A, 0x1A, 0xD1, 0x40, 0x00, 0x08, 0x62, 0x48, 0x69, 0x30, 0x22, 0x90, 
+	0x43, 0x02, 0x22, 0x10, 0x43, 0x48, 0x61, 0x01, 0x20, 0x00, 0xF0, 0xBA, 0xF8, 0x01, 0x20, 0x00, 
+	0xF0, 0xA3, 0xF8, 0x04, 0x20, 0x00, 0xF0, 0xBD, 0xF8, 0x04, 0x20, 0x00, 0xF0, 0xA6, 0xF8, 0x22, 
+	0x48, 0xC4, 0x61, 0x28, 0x68, 0x80, 0x08, 0x80, 0x00, 0x40, 0x1C, 0x15, 0xE0, 0x4A, 0x69, 0x32, 
+	0x23, 0x9A, 0x43, 0x00, 0x01, 0x02, 0x43, 0x4A, 0x61, 0x01, 0x20, 0x00, 0xF0, 0xAA, 0xF8, 0x01, 
+	0x20, 0x00, 0xF0, 0x93, 0xF8, 0x06, 0x20, 0x00, 0xF0, 0xB9, 0xF8, 0x01, 0x20, 0x00, 0xF0, 0xAA, 
+	0xF8, 0x28, 0x68, 0x80, 0x08, 
+	0x00, 0x01, 0xA4, 0x00, 0x80, 0x80, 0x00, 0x80, 0x1C, 0x28, 0x60, 0x70, 0xBD, 0x10, 0xB5, 0x10, 
+	0x48, 0x41, 0x69, 0x41, 0x61, 0x02, 0x21, 0x41, 0x62, 0x00, 0x21, 0xC1, 0x62, 0x81, 0x62, 0xFF, 
+	0x21, 0xC1, 0x60, 0x01, 0x21, 0x01, 0x61, 0x03, 0x20, 0xF9, 0xF7, 0xD7, 0xFB, 0x03, 0x21, 0x08, 
+	0x46, 0xF9, 0xF7, 0xBC, 0xFB, 0x09, 0x49, 0x03, 0x20, 0xF9, 0xF7, 0xAE, 0xFB, 0x03, 0x20, 0xF9, 
+	0xF7, 0xC5, 0xFB, 0x10, 0xBD, 0x06, 0x4A, 0x80, 0x00, 0x80, 0x18, 0x01, 0x60, 0x70, 0x47, 0xFE, 
+	0xE7, 0x00, 0x00, 0x12, 0x40, 0x00, 0x20, 0x14, 0x40, 0x00, 0x00, 0x14, 0x40, 0xA1, 0xD2, 0x00, 
+	0x00, 0x00, 0x10, 0x12, 0x40, 0x0E, 0x4A, 0x11, 0x68, 0xEF, 0x23, 0xC0, 0x07, 0x19, 0x40, 0xC0, 
+	0x0E, 0x08, 0x43, 0x10, 0x60, 0x70, 0x47, 0x0A, 0x49, 0x8A, 0x68, 0x07, 0x23, 0x1B, 0x03, 0x9A, 
+	0x43, 0x00, 0x03, 0x02, 0x43, 
+	0x00, 0x01, 0xA5, 0x00, 0x80, 0x8A, 0x60, 0x70, 0x47, 0x05, 0x48, 0x40, 0x68, 0xC0, 0x06, 0xC0, 
+	0x0F, 0x70, 0x47, 0x03, 0x49, 0x08, 0x69, 0x10, 0x22, 0x10, 0x40, 0x08, 0x61, 0x00, 0x09, 0x70, 
+	0x47, 0x00, 0x00, 0x14, 0x40, 0x70, 0xB5, 0x15, 0x49, 0xC8, 0x68, 0x15, 0x4D, 0xC8, 0x60, 0x09, 
+	0x69, 0x14, 0x4C, 0x01, 0x40, 0x29, 0x60, 0x88, 0x07, 0x01, 0xD5, 0x20, 0x68, 0x80, 0x47, 0x28, 
+	0x68, 0x40, 0x07, 0x01, 0xD5, 0x60, 0x68, 0x80, 0x47, 0x28, 0x68, 0x00, 0x07, 0x01, 0xD5, 0xA0, 
+	0x68, 0x80, 0x47, 0x28, 0x68, 0xC0, 0x06, 0x01, 0xD5, 0xE0, 0x68, 0x80, 0x47, 0x28, 0x68, 0x80, 
+	0x06, 0x01, 0xD5, 0x20, 0x69, 0x80, 0x47, 0x28, 0x68, 0x40, 0x06, 0x01, 0xD5, 0x60, 0x69, 0x80, 
+	0x47, 0x28, 0x68, 0x00, 0x06, 0x01, 0xD5, 0xA0, 0x69, 0x80, 0x47, 0x70, 0xBD, 0x00, 0x00, 0x12, 
+	0x40, 0x54, 0x03, 0x00, 0x20, 
+	0x00, 0x01, 0xA6, 0x00, 0x80, 0x9C, 0xDA, 0x00, 0x00, 0x08, 0x4A, 0x11, 0x68, 0xFD, 0x23, 0xC0, 
+	0x07, 0x19, 0x40, 0x80, 0x0F, 0x08, 0x43, 0x10, 0x60, 0x70, 0x47, 0x04, 0x49, 0x8A, 0x68, 0x38, 
+	0x23, 0x9A, 0x43, 0xC0, 0x00, 0x02, 0x43, 0x8A, 0x60, 0x70, 0x47, 0x00, 0x00, 0x00, 0x00, 0x14, 
+	0x40, 0x07, 0x4A, 0x11, 0x68, 0xFE, 0x23, 0xC0, 0x07, 0x19, 0x40, 0xC0, 0x0F, 0x08, 0x43, 0x10, 
+	0x60, 0x70, 0x47, 0x03, 0x49, 0x8A, 0x68, 0xD2, 0x08, 0xD2, 0x00, 0x02, 0x43, 0x8A, 0x60, 0x70, 
+	0x47, 0x00, 0x00, 0x14, 0x40, 0x04, 0x49, 0x8A, 0x68, 0x07, 0x23, 0x5B, 0x02, 0x9A, 0x43, 0x40, 
+	0x02, 0x02, 0x43, 0x8A, 0x60, 0x70, 0x47, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40, 0x04, 0x49, 0x8A, 
+	0x68, 0xFF, 0x23, 0xC1, 0x33, 0x9A, 0x43, 0x80, 0x01, 0x02, 0x43, 0x8A, 0x60, 0x70, 0x47, 0x00, 
+	0x00, 0x00, 0x00, 0x14, 0x40, 
+	0x00, 0x01, 0xA7, 0x00, 0x80, 0xF8, 0xB5, 0x04, 0x2A, 0x2C, 0xD3, 0x83, 0x07, 0x12, 0xD0, 0x0B, 
+	0x78, 0x49, 0x1C, 0x03, 0x70, 0x40, 0x1C, 0x52, 0x1E, 0x83, 0x07, 0x0B, 0xD0, 0x0B, 0x78, 0x49, 
+	0x1C, 0x03, 0x70, 0x40, 0x1C, 0x52, 0x1E, 0x83, 0x07, 0x04, 0xD0, 0x0B, 0x78, 0x49, 0x1C, 0x03, 
+	0x70, 0x40, 0x1C, 0x52, 0x1E, 0x8B, 0x07, 0x9B, 0x0F, 0x02, 0xD1, 0xF3, 0xF7, 0xBD, 0xFF, 0xF8, 
+	0xBD, 0xC9, 0x1A, 0xDE, 0x00, 0x20, 0x23, 0x9D, 0x1B, 0x08, 0xC9, 0x07, 0xE0, 0xF3, 0x40, 0x1C, 
+	0x46, 0x08, 0xC9, 0x1F, 0x46, 0xAF, 0x40, 0x27, 0x43, 0x80, 0xC0, 0x12, 0x1F, 0x04, 0x2A, 0xF5, 
+	0xD2, 0xEB, 0x08, 0xC9, 0x1A, 0x52, 0x1E, 0xEA, 0xD4, 0x0B, 0x78, 0x49, 0x1C, 0x03, 0x70, 0x40, 
+	0x1C, 0x52, 0x1E, 0xE4, 0xD4, 0x0B, 0x78, 0x49, 0x1C, 0x03, 0x70, 0x40, 0x1C, 0x52, 0x1E, 0xDE, 
+	0xD4, 0x09, 0x78, 0x01, 0x70, 
+	0x00, 0x01, 0xA8, 0x00, 0x80, 0xF8, 0xBD, 0x01, 0xE0, 0x04, 0xC0, 0x09, 0x1F, 0x04, 0x29, 0xFB, 
+	0xD2, 0x8B, 0x07, 0x01, 0xD5, 0x02, 0x80, 0x80, 0x1C, 0xC9, 0x07, 0x00, 0xD0, 0x02, 0x70, 0x70, 
+	0x47, 0x00, 0x29, 0x0B, 0xD0, 0xC3, 0x07, 0x02, 0xD0, 0x02, 0x70, 0x40, 0x1C, 0x49, 0x1E, 0x02, 
+	0x29, 0x04, 0xD3, 0x83, 0x07, 0x02, 0xD5, 0x02, 0x80, 0x80, 0x1C, 0x89, 0x1E, 0xE3, 0xE7, 0x00, 
+	0x22, 0xEE, 0xE7, 0x00, 0x22, 0xDF, 0xE7, 0x82, 0x08, 0x81, 0x07, 0x92, 0x00, 0xC9, 0x0E, 0x0C, 
+	0xCA, 0xC0, 0x78, 0xCA, 0x40, 0x49, 0x42, 0x20, 0x31, 0x8B, 0x40, 0x1A, 0x43, 0x11, 0x02, 0x09, 
+	0x0A, 0x00, 0x06, 0x08, 0x43, 0x70, 0x47, 0x00, 0x22, 0x03, 0x09, 0x8B, 0x42, 0x2C, 0xD3, 0x03, 
+	0x0A, 0x8B, 0x42, 0x11, 0xD3, 0x00, 0x23, 0x9C, 0x46, 0x4E, 0xE0, 0x03, 0x46, 0x0B, 0x43, 0x3C, 
+	0xD4, 0x00, 0x22, 0x43, 0x08, 
+	0x00, 0x01, 0xA9, 0x00, 0x80, 0x8B, 0x42, 0x31, 0xD3, 0x03, 0x09, 0x8B, 0x42, 0x1C, 0xD3, 0x03, 
+	0x0A, 0x8B, 0x42, 0x01, 0xD3, 0x94, 0x46, 0x3F, 0xE0, 0xC3, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 
+	0x01, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x01, 0xC0, 0x1A, 0x52, 
+	0x41, 0x43, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0x03, 0x09, 0x8B, 
+	0x42, 0x01, 0xD3, 0x0B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0xC3, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 
+	0x00, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x8B, 0x00, 0xC0, 0x1A, 0x52, 
+	0x41, 0x43, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0x41, 0x1A, 0x00, 
+	0xD2, 0x01, 0x46, 0x52, 0x41, 0x10, 0x46, 0x70, 0x47, 0x5D, 0xE0, 0xCA, 0x0F, 0x00, 0xD0, 0x49, 
+	0x42, 0x03, 0x10, 0x00, 0xD3, 
+	0x00, 0x01, 0xAA, 0x00, 0x80, 0x40, 0x42, 0x53, 0x40, 0x00, 0x22, 0x9C, 0x46, 0x03, 0x09, 0x8B, 
+	0x42, 0x2D, 0xD3, 0x03, 0x0A, 0x8B, 0x42, 0x12, 0xD3, 0xFC, 0x22, 0x89, 0x01, 0x12, 0xBA, 0x03, 
+	0x0A, 0x8B, 0x42, 0x0C, 0xD3, 0x89, 0x01, 0x92, 0x11, 0x8B, 0x42, 0x08, 0xD3, 0x89, 0x01, 0x92, 
+	0x11, 0x8B, 0x42, 0x04, 0xD3, 0x89, 0x01, 0x3A, 0xD0, 0x92, 0x11, 0x00, 0xE0, 0x89, 0x09, 0xC3, 
+	0x09, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x09, 0x8B, 0x42, 0x01, 
+	0xD3, 0x8B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0x43, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 0x01, 0xC0, 
+	0x1A, 0x52, 0x41, 0x03, 0x09, 0x8B, 0x42, 0x01, 0xD3, 0x0B, 0x01, 0xC0, 0x1A, 0x52, 0x41, 0xC3, 
+	0x08, 0x8B, 0x42, 0x01, 0xD3, 0xCB, 0x00, 0xC0, 0x1A, 0x52, 0x41, 0x83, 0x08, 0x8B, 0x42, 0x01, 
+	0xD3, 0x8B, 0x00, 0xC0, 0x1A, 
+	0x00, 0x01, 0xAB, 0x00, 0x80, 0x52, 0x41, 0xD9, 0xD2, 0x43, 0x08, 0x8B, 0x42, 0x01, 0xD3, 0x4B, 
+	0x00, 0xC0, 0x1A, 0x52, 0x41, 0x41, 0x1A, 0x00, 0xD2, 0x01, 0x46, 0x63, 0x46, 0x52, 0x41, 0x5B, 
+	0x10, 0x10, 0x46, 0x01, 0xD3, 0x40, 0x42, 0x00, 0x2B, 0x00, 0xD5, 0x49, 0x42, 0x70, 0x47, 0x63, 
+	0x46, 0x5B, 0x10, 0x00, 0xD3, 0x40, 0x42, 0x01, 0xB5, 0x00, 0x20, 0xC0, 0x46, 0xC0, 0x46, 0x02, 
+	0xBD, 0x04, 0x46, 0xC0, 0x46, 0xC0, 0x46, 0x20, 0x46, 0xF3, 0xF7, 0xAA, 0xFE, 0x02, 0x48, 0x03, 
+	0x49, 0xAB, 0xBE, 0x70, 0x47, 0x0D, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x26, 0x00, 0x02, 
+	0x00, 0x70, 0x47, 0x70, 0xB5, 0x8C, 0x18, 0x05, 0x78, 0x40, 0x1C, 0x6B, 0x07, 0x5B, 0x0F, 0x01, 
+	0xD1, 0x03, 0x78, 0x40, 0x1C, 0x2A, 0x11, 0x06, 0xD1, 0x02, 0x78, 0x40, 0x1C, 0x03, 0xE0, 0x06, 
+	0x78, 0x40, 0x1C, 0x0E, 0x70, 
+	0x00, 0x01, 0xAC, 0x00, 0x80, 0x49, 0x1C, 0x5B, 0x1E, 0xF9, 0xD1, 0x2B, 0x07, 0x06, 0xD4, 0x00, 
+	0x23, 0x01, 0xE0, 0x0B, 0x70, 0x49, 0x1C, 0x52, 0x1E, 0xFB, 0xD5, 0x0A, 0xE0, 0x03, 0x78, 0x40, 
+	0x1C, 0xCB, 0x1A, 0x92, 0x1C, 0x03, 0xE0, 0x1D, 0x78, 0x5B, 0x1C, 0x0D, 0x70, 0x49, 0x1C, 0x52, 
+	0x1E, 0xF9, 0xD5, 0xA1, 0x42, 0xD7, 0xD3, 0x00, 0x20, 0x70, 0xBD, 0x30, 0xB4, 0x74, 0x46, 0x64, 
+	0x1E, 0x25, 0x78, 0x64, 0x1C, 0xAB, 0x42, 0x00, 0xD2, 0x1D, 0x46, 0x63, 0x5D, 0x5B, 0x00, 0xE3, 
+	0x18, 0x30, 0xBC, 0x18, 0x47, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 
+	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
+	0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
+	0x00, 0x02, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xAD, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
+	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x6F, 0x53, 
+	0xB2, 0x01, 0x6F, 0x57, 0xB2, 0x01, 0x6F, 0x4B, 0xB2, 0x01, 0x6F, 0x4B, 0xB8, 0x01, 0x79, 0x43, 
+	0xB2, 0x01, 0x68, 0x43, 0xB2, 0x01, 0x7E, 0x4B, 0xB2, 0xFF, 0xFB, 0xED, 0xD5, 0xB5, 0x00, 0x31, 
+	0x61, 0x8E, 0xB5, 0x00, 0x00, 0x00, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
+	0x00, 0x33, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 
+	0x00, 0x02, 0x01, 0x00, 0x00, 0x01, 0x60, 0x13, 0x40, 0x00, 0x30, 0x13, 0x40, 0x00, 0x04, 0x00, 
+	0x40, 0x13, 0x40, 0x00, 0x02, 
+	0x00, 0x01, 0xAE, 0x00, 0x80, 0xA5, 0x01, 0x02, 0x03, 0xFF, 0xFE, 0xFD, 0x5A, 0x54, 0x53, 0x47, 
+	0x34, 0x20, 0x44, 0x46, 0x54, 0x24, 0x06, 0x00, 0x20, 0x31, 0x02, 0x00, 0x00, 0xDC, 0x0B, 0x00, 
+	0x20, 0x31, 0x02, 0x00, 0x00, 0x6C, 0x09, 0x00, 0x20, 0x31, 0x02, 0x00, 0x00, 0x64, 0x08, 0x00, 
+	0x20, 0x32, 0x01, 0x00, 0x00, 0x1C, 0x0E, 0x00, 0x20, 0x31, 0x01, 0x00, 0x00, 0xAC, 0x0B, 0x00, 
+	0x20, 0x31, 0x01, 0x00, 0x00, 0xAA, 0x0E, 0x00, 0x20, 0x32, 0x01, 0x00, 0x00, 0xCA, 0x0F, 0x00, 
+	0x20, 0x31, 0x01, 0x00, 0x00, 0x6A, 0x0F, 0x00, 0x20, 0x31, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 
+	0xC1, 0x04, 0x00, 0x05, 0x10, 0x06, 0x00, 0x07, 0x32, 0x08, 0x00, 0x09, 0x34, 0x0A, 0x00, 0x0B, 
+	0x41, 0x0C, 0x00, 0x0D, 0x61, 0x0E, 0x00, 0x0F, 0x81, 0x10, 0x00, 0x11, 0x02, 0x12, 0x01, 0x13, 
+	0x01, 0x18, 0x00, 0x19, 0x06, 
+	0x00, 0x01, 0xAF, 0x00, 0x80, 0x1A, 0x17, 0x1B, 0xC4, 0x22, 0x08, 0x2F, 0x02, 0x30, 0x03, 0x31, 
+	0x01, 0x3E, 0x00, 0x3F, 0xFF, 0x41, 0x02, 0x42, 0x09, 0x49, 0x09, 0x4A, 0x00, 0x4B, 0x0E, 0x4C, 
+	0x02, 0x4D, 0x0E, 0x4E, 0x04, 0x4F, 0x08, 0x50, 0x05, 0x51, 0x05, 0x52, 0xA5, 0x53, 0x02, 0x58, 
+	0x01, 0x59, 0x00, 0x5A, 0x08, 0x5B, 0x06, 0x5C, 0x08, 0x5D, 0x07, 0x5E, 0x08, 0x5F, 0x08, 0x60, 
+	0x08, 0x4A, 0x01, 0x00, 0x00, 0xBE, 0x01, 0x00, 0x20, 0x4B, 0x01, 0x00, 0x00, 0xC4, 0x01, 0x00, 
+	0x20, 0x4C, 0x02, 0x00, 0x00, 0xCE, 0x01, 0x00, 0x20, 0x4D, 0x01, 0x00, 0x00, 0xBC, 0x01, 0x00, 
+	0x20, 0x4E, 0x02, 0x00, 0x00, 0xCC, 0x01, 0x00, 0x20, 0x4F, 0x01, 0x00, 0x00, 0xBD, 0x01, 0x00, 
+	0x20, 0x50, 0x01, 0x00, 0x00, 0xBF, 0x01, 0x00, 0x20, 0x51, 0x01, 0x00, 0x00, 0x80, 0x02, 0x00, 
+	0x20, 0x52, 0x02, 0x00, 0x00, 
+	0x00, 0x01, 0xB0, 0x00, 0x80, 0x52, 0x02, 0x00, 0x20, 0x53, 0x01, 0x00, 0x00, 0x8A, 0x00, 0x00, 
+	0x20, 0x80, 0x01, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x20, 0x81, 0x01, 0x00, 0x00, 0xFE, 0x00, 0x00, 
+	0x20, 0x28, 0x00, 0x2C, 0x00, 0x30, 0x00, 0x34, 0x00, 0x38, 0x00, 0x3C, 0x00, 0x40, 0x00, 0x44, 
+	0x00, 0x4C, 0x00, 0x54, 0x00, 0x5C, 0x00, 0x64, 0x00, 0x70, 0x00, 0x7C, 0x00, 0x88, 0x00, 0x98, 
+	0x00, 0xA8, 0x00, 0xBC, 0x00, 0xD0, 0x00, 0xE8, 0x00, 0x00, 0x01, 0x1C, 0x01, 0x3C, 0x01, 0x60, 
+	0x01, 0x88, 0x01, 0xB4, 0x01, 0xE8, 0x01, 0x20, 0x02, 0x60, 0x02, 0xA8, 0x02, 0xF8, 0x02, 0x50, 
+	0x03, 0xC6, 0x08, 0x27, 0x09, 0x58, 0x09, 0x89, 0x09, 0xEB, 0x09, 0x4C, 0x0A, 0xAE, 0x0A, 0x10, 
+	0x0B, 0x71, 0x0B, 0xD3, 0x0B, 0x35, 0x0C, 0x96, 0x0C, 0xF8, 0x0C, 0x59, 0x0D, 0xBB, 0x0D, 0x1D, 
+	0x0E, 0x19, 0x1B, 0x1C, 0x1D, 
+	0x00, 0x01, 0xB1, 0x00, 0x80, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x25, 0x26, 0x27, 0x28, 0x29, 
+	0x2A, 0x2B, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
+	0x00, 0x33, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 
+	0x00, 0x00, 0x01, 0x00, 0x00, 0xB9, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 
+	0x00, 0x26, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 
+	0x00, 0x52, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x09, 0x21, 0x47, 0x74, 0xA3, 0xCD, 0xED, 0xFE, 0xFE, 0xED, 0xCD, 0xA3, 0x74, 0x47, 0x21, 
+	0x09, 0x0A, 0x25, 0x4F, 0x80, 
+	0x00, 0x01, 0xB2, 0x00, 0x80, 0xB1, 0xDB, 0xF6, 0xFF, 0xF6, 0xDB, 0xB1, 0x80, 0x4F, 0x25, 0x0A, 
+	0x0B, 0x2A, 0x58, 0x8D, 0xC0, 0xE8, 0xFD, 0xFD, 0xE8, 0xC0, 0x8D, 0x58, 0x2A, 0x0B, 0x0D, 0x30, 
+	0x64, 0x9C, 0xD0, 0xF3, 0xFF, 0xF3, 0xD0, 0x9C, 0x64, 0x30, 0x0D, 0x0F, 0x37, 0x71, 0xAD, 0xE0, 
+	0xFC, 0xFC, 0xE0, 0xAD, 0x71, 0x37, 0x0F, 0x11, 0x40, 0x80, 0xC0, 0xEF, 0xFF, 0xEF, 0xC0, 0x80, 
+	0x40, 0x11, 0x14, 0x4B, 0x92, 0xD4, 0xFB, 0xFB, 0xD4, 0x92, 0x4B, 0x14, 0x18, 0x58, 0xA8, 0xE8, 
+	0xFF, 0xE8, 0xA8, 0x58, 0x18, 0x1E, 0x6A, 0xC0, 0xF8, 0xF8, 0xC0, 0x6A, 0x1E, 0x64, 0x5B, 0x51, 
+	0x46, 0x3A, 0x2D, 0x1F, 0x10, 0x00, 0x00, 0xC7, 0x01, 0xCD, 0x01, 0xD1, 0x01, 0xD5, 0x01, 0xD9, 
+	0x01, 0xDB, 0x01, 0xDE, 0x01, 0xE0, 0x01, 0xE2, 0x01, 0x91, 0xB5, 0x00, 0x00, 0xC3, 0xB5, 0x00, 
+	0x00, 0x99, 0xB6, 0x00, 0x00, 
+	0x00, 0x01, 0xB3, 0x00, 0x80, 0xCD, 0xB6, 0x00, 0x00, 0xF1, 0xB6, 0x00, 0x00, 0x0B, 0xB6, 0x00, 
+	0x00, 0xD9, 0xB7, 0x00, 0x00, 0x3D, 0xBA, 0x00, 0x00, 0xEB, 0xBA, 0x00, 0x00, 0xF5, 0xBA, 0x00, 
+	0x00, 0x37, 0xBB, 0x00, 0x00, 0x7F, 0xBB, 0x00, 0x00, 0x0D, 0xBC, 0x00, 0x00, 0xD5, 0xBC, 0x00, 
+	0x00, 0x2B, 0xBD, 0x00, 0x00, 0x8D, 0xBD, 0x00, 0x00, 0xC7, 0xBD, 0x00, 0x00, 0x1B, 0xBE, 0x00, 
+	0x00, 0x15, 0xBF, 0x00, 0x00, 0x79, 0xBF, 0x00, 0x00, 0xA1, 0xBF, 0x00, 0x00, 0x51, 0xC0, 0x00, 
+	0x00, 0x25, 0xC1, 0x00, 0x00, 0xEA, 0x03, 0xEA, 0x03, 0xEA, 0x03, 0xEA, 0x03, 0x6A, 0x03, 0x6A, 
+	0x03, 0x6A, 0x03, 0x6A, 0x03, 0x0A, 0x03, 0x00, 0x00, 0x0A, 0x03, 0x00, 0x00, 0x0A, 0x01, 0x0A, 
+	0x01, 0x0A, 0x01, 0x0A, 0x01, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x64, 0x03, 0x64, 
+	0x03, 0x64, 0x03, 0x64, 0x03, 
+	0x00, 0x01, 0xB4, 0x00, 0x80, 0x04, 0x03, 0x04, 0x03, 0x04, 0x03, 0x04, 0x03, 0x04, 0x01, 0x04, 
+	0x01, 0x04, 0x01, 0x04, 0x01, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x62, 0x03, 0x62, 
+	0x03, 0x62, 0x03, 0x62, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x01, 0x02, 
+	0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0A, 0x03, 0x0A, 
+	0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x03, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x03, 0x0A, 0x03, 0xEA, 
+	0x03, 0x0A, 0x03, 0x00, 0x00, 0x02, 0x00, 0x02, 0x03, 0x6A, 0x03, 0x0A, 0x03, 0x0A, 0x03, 0x0A, 
+	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x0A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6A, 
+	0x03, 0xEA, 0x03, 0xEA, 0x03, 
+	0x00, 0x01, 0xB5, 0x00, 0x80, 0x02, 0x00, 0x04, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 
+	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x03, 0x0A, 
+	0x03, 0x4B, 0xD2, 0x00, 0x00, 0x4B, 0xD2, 0x00, 0x00, 0x4B, 0xD2, 0x00, 0x00, 0x4B, 0xD2, 0x00, 
+	0x00, 0x4B, 0xD2, 0x00, 0x00, 0x4B, 0xD2, 0x00, 0x00, 0x4B, 0xD2, 0x00, 0x00, 0xE8, 0xDA, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0xC4, 0x12, 0x00, 0x00, 0x68, 0xDB, 0x00, 
+	0x00, 0x84, 0x00, 0x00, 0x20, 0xD4, 0x02, 0x00, 0x00, 0xDE, 0xD5, 0x00, 0x00, 0xD4, 0xDB, 0x00, 
+	0x00, 0x58, 0x03, 0x00, 0x20, 0x88, 0x15, 0x00, 0x00, 0xE0, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xB6, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x03, 
+	0x3E, 0x01, 0x24, 0x4B, 0x7D, 0x1D, 0x04, 0x01, 0x1C, 0x03, 0x2F, 0x2C, 0xDD, 0xA2, 0x01, 0x13, 
+	0xC5, 0x08, 0x1B, 0x20, 0xC6, 
+	0x00, 0x01, 0xB7, 0x00, 0x80, 0x04, 0x1A, 0xC4, 0x04, 0x1A, 0xEF, 0x04, 0x1A, 0xF0, 0x04, 0x1A, 
+	0xEE, 0x04, 0x13, 0x19, 0x09, 0x1B, 0x20, 0x1A, 0x04, 0x1A, 0x18, 0x04, 0x1A, 0x43, 0x04, 0x1A, 
+	0x44, 0x04, 0x1A, 0x42, 0x04, 0x03, 0x36, 0x08, 0xDE, 0x42, 0x24, 0x46, 0x51, 0x25, 0x02, 0xA0, 
+	0x8C, 0x6B, 0x50, 0x46, 0x83, 0x99, 0x8B, 0x01, 0x1D, 0x1A, 0xFF, 0x01, 0x39, 0x08, 0x0A, 0x2E, 
+	0x07, 0x02, 0x09, 0x1E, 0x58, 0x09, 0x1C, 0xB4, 0x05, 0x20, 0xD0, 0xF1, 0xFF, 0x0F, 0x03, 0x2A, 
+	0x80, 0xE2, 0x29, 0xC8, 0x69, 0xCC, 0x01, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xB8, 0x00, 0x80, 0xFC, 0x05, 0xFC, 0x05, 0x4C, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 
+	0x30, 0xEC, 0x13, 0xB0, 0x1D, 0x14, 0x02, 0x00, 0x08, 0x0F, 0x00, 0x0A, 0x00, 0xD0, 0x07, 0x01, 
+	0x00, 0x32, 0x08, 0xF4, 0x01, 0xF5, 0x01, 0x1E, 0x00, 0x00, 0x00, 0x88, 0x13, 0x96, 0x00, 0x96, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x23, 0x0A, 0x0A, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 
+	0x00, 0x64, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xB9, 0x00, 0x80, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 
+	0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xF4, 0x01, 0x00, 
+	0x00, 0x64, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0xA6, 0xFF, 0xFF, 0xFF, 0x0E, 0x00, 0x00, 
+	0x00, 0xC8, 0x00, 0x00, 0x00, 0x06, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 
+	0x00, 0x0A, 0x00, 0x00, 0x00, 0xF4, 0x01, 0x00, 0x00, 0x01, 0x00, 0xC4, 0xFF, 0x96, 0x00, 0xB0, 
+	0xFF, 0xA0, 0x00, 0xC4, 0xFF, 0x28, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x02, 0x56, 0x2B, 0x64, 0x0F, 0x02, 0x45, 0x2B, 0x64, 0x0F, 
+	0x02, 0x2A, 0x01, 0x12, 0x12, 
+	0x00, 0x01, 0xBA, 0x00, 0x80, 0x12, 0x23, 0x23, 0x50, 0x02, 0x03, 0x02, 0x0A, 0x14, 0x02, 0x28, 
+	0x00, 0x32, 0x1E, 0x1E, 0x00, 0xC8, 0x00, 0x14, 0x00, 0xC8, 0x00, 0x14, 0x00, 0xC8, 0x00, 0x14, 
+	0x00, 0xF0, 0x28, 0x29, 0x30, 0x3F, 0x48, 0x49, 0x90, 0x9F, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 
+	0x00, 0xF0, 0x02, 0x01, 0x1E, 0x05, 0x01, 0x00, 0x00, 0xF0, 0x02, 0x02, 0x3C, 0x1E, 0x01, 0x00, 
+	0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x00, 0xC8, 0x00, 0x00, 0x01, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 
+	0x00, 0xFF, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xBB, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x12, 0x05, 0x0C, 0x0E, 0x0F, 0xE0, 0x01, 0x20, 0x03, 0x00, 
+	0xC8, 0x03, 0x32, 0x03, 0x00, 0x00, 0xFA, 0x14, 0x96, 0x01, 0x10, 0x1E, 0x10, 0x03, 0x03, 0x16, 
+	0x10, 0x03, 0x50, 0x0E, 0x50, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x70, 0x00, 0x97, 
+	0x00, 0x6E, 0xFF, 0xC2, 0x01, 0xD7, 0xFF, 0xCF, 0xFF, 0x9C, 0xFF, 0xD9, 0xFF, 0xDC, 0xFF, 0xDC, 
+	0xFF, 0x4F, 0xFF, 0x07, 0x00, 0x91, 0xFF, 0x14, 0xFF, 0xB3, 0x00, 0x01, 0x02, 0x01, 0x00, 0x00, 
+	0x00, 0x02, 0x1E, 0x1E, 0x0A, 0x0B, 0x05, 0x0A, 0x0A, 0x05, 0x0A, 0x11, 0x00, 0x0B, 0x00, 0x00, 
+	0x00, 0x23, 0x00, 0x1E, 0x00, 0x64, 0x00, 0x64, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x64, 
+	0x00, 0x64, 0x00, 0x64, 0x00, 
+	0x00, 0x01, 0xBC, 0x00, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x77, 0x77, 0x00, 
+	0x08, 0x00, 0x08, 0x08, 0x14, 0x0C, 0x0C, 0x19, 0x23, 0x0C, 0x0C, 0x77, 0x77, 0x01, 0x0F, 0x01, 
+	0x07, 0x19, 0x14, 0x0D, 0x07, 0x19, 0x1E, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x14, 0x19, 0x05, 0x05, 0x03, 0x0A, 0x07, 
+	0x0A, 0x0A, 0x0A, 0x10, 0x0A, 0x50, 0x50, 0x50, 0x50, 0x50, 0x0C, 0x03, 0xF2, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0xB8, 0x01, 0x00, 
+	0x00, 0x05, 0x04, 0xFF, 0x81, 0x02, 0x04, 0x00, 0x00, 0xFF, 0x02, 0xAF, 0xC0, 0xFF, 0xFF, 0xB0, 
+	0x00, 0x22, 0x02, 0x7F, 0x81, 0x7F, 0x72, 0x01, 0x80, 0x0F, 0xA1, 0x1F, 0x01, 0x5E, 0x19, 0x4B, 
+	0x19, 0x12, 0x01, 0x01, 0x00, 
+	0x00, 0x01, 0xBD, 0x00, 0x80, 0x04, 0x01, 0x08, 0x10, 0x01, 0x04, 0x00, 0x00, 0x44, 0x01, 0x02, 
+	0x80, 0x01, 0x01, 0x00, 0x00, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 
+	0x90, 0x80, 0x00, 0xFE, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7A, 0xA0, 0x00, 
+	0xD0, 0x00, 0x00, 0x00, 0x00, 0x05, 0x04, 0xFF, 0x81, 0x03, 0x14, 0x00, 0x00, 0xFF, 0x03, 0xAF, 
+	0xC0, 0xFF, 0xFF, 0xD0, 0x00, 0x22, 0x02, 0x7F, 0x81, 0x7F, 0x72, 0x01, 0x80, 0x0F, 0x01, 0x1F, 
+	0x01, 0x47, 0x37, 0x4B, 0x37, 0x12, 0x01, 0x01, 0x00, 0x04, 0x01, 0x08, 0x10, 0x01, 0x04, 0x00, 
+	0x00, 0x44, 0x01, 0x02, 0x80, 0x01, 0x01, 0x00, 0x00, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0x01, 0x00, 0x90, 0x80, 0x00, 0xFE, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x7A, 0xA6, 0x00, 0xD0, 
+	0x00, 0x01, 0xBE, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x05, 0x04, 0xFF, 0x80, 0x03, 0x20, 0x00, 
+	0x00, 0xAF, 0x08, 0xAF, 0xC0, 0xFF, 0xFF, 0xB0, 0x00, 0x22, 0x02, 0x7F, 0x81, 0x7F, 0x72, 0x01, 
+	0x80, 0x01, 0x81, 0x40, 0x04, 0x96, 0x0F, 0x96, 0x0F, 0x12, 0x01, 0x01, 0x00, 0x04, 0x01, 0x08, 
+	0x10, 0x01, 0x04, 0x00, 0x00, 0x44, 0x01, 0x02, 0x80, 0x01, 0x01, 0x00, 0x00, 0x80, 0x00, 0x01, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x90, 0x80, 0x00, 0xFE, 0x0B, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x3A, 0xA0, 0x00, 0xD0, 0x05, 0x04, 0xFF, 0x80, 0x02, 0x3C, 0x00, 
+	0x00, 0xC0, 0x00, 0xAF, 0xC0, 0xFF, 0xFF, 0xB0, 0x00, 0x22, 0x02, 0x7F, 0x81, 0x7F, 0x72, 0x01, 
+	0x80, 0x0F, 0x01, 0x1F, 0x01, 0x73, 0x19, 0x73, 0x19, 0x12, 0x01, 0x01, 0x00, 0x04, 0x01, 0x08, 
+	0x10, 0x01, 0x04, 0x00, 0x00, 
+	0x00, 0x01, 0xBF, 0x00, 0x80, 0x44, 0x01, 0x02, 0x80, 0x01, 0x01, 0x00, 0x00, 0x80, 0x00, 0x01, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x90, 0x80, 0x00, 0xFE, 0x0B, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x7A, 0xA0, 0x00, 0xD0, 0x08, 0x04, 0x00, 0x00, 0x3F, 0x00, 0x30, 
+	0x30, 0x40, 0x03, 0x07, 0x40, 0x1A, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 
+	0x00, 0xA0, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
+	0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 
+	0x00, 0xAF, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
+	0x00, 0x04, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xC0, 0x00, 0x80, 0x0A, 0x05, 0x32, 0x00, 0x04, 0x00, 0x06, 0x02, 0x00, 0x01, 0x0F, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x08, 0x64, 0x64, 0x0A, 0x05, 0x00, 
+	0x33, 0x00, 0x0A, 0x00, 0x0A, 0x05, 0x05, 0x00, 0x00, 0xF0, 0x02, 0x01, 0xFF, 0xFF, 0x01, 0x00, 
+	0x00, 0x05, 0x05, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
+	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
+	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD8, 0xFF, 0xFF, 
+	0xFF, 0xD8, 0xFF, 0xFF, 0xFF, 
+	0x00, 0x01, 0xC1, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0xF6, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 
+	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x1C, 0x1B, 0x1A, 
+	0x19, 0x18, 0x17, 0x16, 0x15, 0x3F, 0x40, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x0E, 0x0F, 0x10, 
+	0x11, 0x12, 0x13, 0x3E, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x37, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 
+	0x14, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x01, 0xC2, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x05, 0x3F, 0x05, 0x2B, 0x2B, 0x2B, 
+	0x2B, 0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 
+	0xE0, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x7F, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0xFF, 0x00, 0x08, 0x2B, 0x01, 0x0B, 0x07, 0x09, 0x05, 0x0F, 0x03, 0x0D, 0x00, 0x0B, 0x0B, 
+	0x0B, 0x0B, 0x0B, 0x0A, 0x0B, 0x0A, 0x0F, 0xFF, 0x00, 0x08, 0x2B, 0x0C, 0x00, 0x0A, 0x06, 0x08, 
+	0x04, 0x0E, 0x02, 0x00, 0x0B, 0x0B, 0x0B, 0x0A, 0x0A, 0x0B, 0x0A, 0x0B, 0x0F, 0xFF, 0x00, 0x08, 
+	0x2B, 0x11, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x10, 0x00, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 
+	0x09, 0x0B, 0x0F, 0xFF, 0x00, 0x08, 0x2B, 0x12, 0x1B, 0x1C, 0x1D, 0x20, 0x1F, 0x1E, 0x19, 0x00, 
+	0x0B, 0x0B, 0x0A, 0x09, 0x0B, 
+	0x00, 0x01, 0xC3, 0x00, 0x80, 0x0A, 0x0A, 0x0A, 0x0F, 0xFF, 0x00, 0x08, 0x3F, 0x1A, 0x23, 0x22, 
+	0x21, 0x28, 0x27, 0x26, 0x25, 0x00, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0A, 0x0A, 0x0F, 0x09, 
+	0x00, 0x02, 0x3F, 0x24, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x0F, 0x0F, 0x0B, 
+	0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x14, 0x00, 0x02, 0x19, 0x00, 0x00, 0x2A, 0x00, 0x2B, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0xB3, 0x8D, 0x00, 0x00, 
+	0x00, 0x01, 0xC4, 0x00, 0x80, 0x24, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x59, 0x45, 0x4C, 0x03, 0x06, 0x00, 0x06, 
+	0x02, 0x10, 0x1A, 0x01, 0xE0, 0x03, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x66, 0xAC, 
+	0x00, 0x01, 0xFF, 0x00, 0x80, 0x3C, 0x00, 0x3C, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0xCA, 0xA5, 
+	0x59, 0x81, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0xBC, 0x3E, 0x00, 0x00, 0x8F, 0x25, 0x13, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0xC0, 0xED, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 
+
+};
diff -Naur ./arch/arm/mach-exynos/cyttsp4_params.h ../../HK_JB/Kernel/arch/arm/mach-exynos/cyttsp4_params.h
--- ./arch/arm/mach-exynos/cyttsp4_params.h	2012-12-08 20:40:46.121821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/cyttsp4_params.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,1529 +0,0 @@
-//*****************************************************************************
-//*****************************************************************************
-//  FILENAME: Driver.h
-//  TrueTouch Host Emulator Version Information: 2.1.613
-//  TrueTouch Firmware Version Information: 1.1.360995
-//
-//  DESCRIPTION: This file contains configuration values.
-//-----------------------------------------------------------------------------
-//  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
-//*****************************************************************************
-//*****************************************************************************
-//-----------------------------------------------------------------------------
-/* Touchscreen Parameters Endianess (Endianess: 0:Little; 1:Big)*/
-static const uint8_t cyttsp4_param_endianess = 0;
-
-/* Touchscreen Parameters */
-static const uint8_t cyttsp4_param_regs[] = {
-/*	Value	Name	*/
-	0xFC, 0x05,  /* CONFIG_DATA_SIZE */
-	0xFC, 0x05,  /* CONFIG_DATA_MAX_SIZE */
-	0x4C, 0x00, 0x00, 0x00,  /* SDK_CTRL_CFG_SIZE */
-	0x01, 0x00,  /* CONFIG_VER */
-	0x01,  /* PANELID_ENABLE */
-	0x30,  /* IMO_FREQ_MHZ */
-	0xEC, 0x13,  /* X_LEN_PHY */
-	0xB0, 0x1D,  /* Y_LEN_PHY */
-	0x10,  /* HST_MODE0 */
-	0x07,  /* ACT_DIST0 */
-	0x00,  /* SCAN_TYP0 */
-	0x0A,  /* ACT_INTRVL0 */
-	0x03,  /* ACT_LFT_INTRVL0 */
-	0x00,  /* Reserved21 */
-	0x32, 0x00,  /* LP_INTRVL0 */
-	0xB8, 0x0B,  /* TCH_TMOUT0 */
-	0x01,  /* PWR_CFG */
-	0x00,  /* Reserved27 */
-	0x32,  /* INT_PULSE_DATA */
-	0x08,  /* OPMODE_CFG */
-	0xF4, 0x01,  /* HANDSHAKE_TIMEOUT */
-	0xF4, 0x01,  /* ESD_COUNTER_CFG */
-	0x1E,  /* TIMER_CAL_INTERVAL */
-	0x00,  /* Reserved35 */
-	0x00, 0x00,  /* RP2P_MIN */
-	0x88, 0x13,  /* ILEAK_MAX */
-	0x96, 0x00,  /* RFB_P2P */
-	0x96, 0x00,  /* RFB_EXT */
-	0x00,  /* IDACOPEN_LOW */
-	0x00,  /* IDACOPEN_HIGH */
-	0x00,  /* IDACOPEN_BUTTON_LOW */
-	0x00,  /* IDACOPEN_BUTTON_HIGH */
-	0x00,  /* GIDAC_OPEN */
-	0x00,  /* GAIN_OPEN */
-	0x00,  /* GIDAC_BUTTON_OPEN */
-	0x00,  /* GAIN_BUTTON_OPEN */
-	0x00,  /* POST_CFG */
-	0x00,  /* GESTURE_CFG */
-	0x00,  /* GEST_EN0 */
-	0x00,  /* GEST_EN1 */
-	0x00,  /* GEST_EN2 */
-	0x00,  /* GEST_EN3 */
-	0x00,  /* GEST_EN4 */
-	0x00,  /* GEST_EN5 */
-	0x00,  /* GEST_EN6 */
-	0x00,  /* GEST_EN7 */
-	0x00,  /* GEST_EN8 */
-	0x00,  /* GEST_EN9 */
-	0x00,  /* GEST_EN10 */
-	0x00,  /* GEST_EN11 */
-	0x00,  /* GEST_EN12 */
-	0x00,  /* GEST_EN13 */
-	0x00,  /* GEST_EN14 */
-	0x00,  /* GEST_EN15 */
-	0x00,  /* GEST_EN16 */
-	0x00,  /* GEST_EN17 */
-	0x00,  /* GEST_EN18 */
-	0x00,  /* GEST_EN19 */
-	0x00,  /* GEST_EN20 */
-	0x00,  /* GEST_EN21 */
-	0x00,  /* GEST_EN22 */
-	0x00,  /* GEST_EN23 */
-	0x00,  /* GEST_EN24 */
-	0x00,  /* GEST_EN25 */
-	0x00,  /* GEST_EN26 */
-	0x00,  /* GEST_EN27 */
-	0x00,  /* GEST_EN28 */
-	0x00,  /* GEST_EN29 */
-	0x00,  /* GEST_EN30 */
-	0x00,  /* GEST_EN31 */
-	0x01,  /* ACT_DIST2 */
-	0x00,  /* EXTERN_SYNC */
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,  /* Reserved88 */
-	0x18, 0x00, 0x00, 0x00,  /* GRIP_CFG_SIZE */
-	0x00, 0x00,  /* GRIP_XEDG_A */
-	0x00, 0x00,  /* GRIP_XEDG_B */
-	0x00, 0x00,  /* GRIP_XEXC_A */
-	0x00, 0x00,  /* GRIP_XEXC_B */
-	0x00, 0x00,  /* GRIP_YEDG_A */
-	0x00, 0x00,  /* GRIP_YEDG_B */
-	0x00, 0x00,  /* GRIP_YEXC_A */
-	0x00, 0x00,  /* GRIP_YEXC_B */
-	0x00,  /* GRIP_FIRST_EXC */
-	0x00,  /* GRIP_EXC_EDGE_ORIGIN */
-	0x00, 0x00,  /* Reserved118 */
-	0x70, 0x00, 0x00, 0x00,  /* TRUETOUCH_CFG_SIZE */
-	0x64, 0x00, 0x00, 0x00,  /* MAX_SELF_SCAN_INTERVAL */
-	0x64, 0x00, 0x00, 0x00,  /* MAX_MUTUAL_SCAN_INTERVAL */
-	0x64, 0x00, 0x00, 0x00,  /* MAX_BALANCED_SCAN_INTERVAL */
-	0x02, 0x00, 0x00, 0x00,  /* SELF_Z_THRSH */
-	0x01, 0x00, 0x00, 0x00,  /* SELF_Z_MODE */
-	0x00, 0x00, 0x00, 0x00,  /* SMART_SCAN_ENABLE */
-	0x00, 0x00, 0x00, 0x00,  /* T_COMP_ENABLE */
-	0xD0, 0x07, 0x00, 0x00,  /* T_COMP_INTERVAL */
-	0x32, 0x00, 0x00, 0x00,  /* T_COMP_RECAL_MUTUAL_SENSOR_LIMIT */
-	0x64, 0x00, 0x00, 0x00,  /* T_COMP_RECAL_MUTUAL_HIGH */
-	0xD8, 0xFF, 0xFF, 0xFF,  /* T_COMP_RECAL_MUTUAL_LOW */
-	0x0A, 0x00, 0x00, 0x00,  /* T_COMP_RECAL_SELF_SENSOR_LIMIT */
-	0x8C, 0x00, 0x00, 0x00,  /* T_COMP_RECAL_SELF_HIGH */
-	0xD8, 0xFF, 0xFF, 0xFF,  /* T_COMP_RECAL_SELF_LOW */
-	0x01, 0x00, 0x00, 0x00,  /* CHARGER_ARMOR_ENABLE */
-	0x00, 0x00, 0x00, 0x00,  /* AFH_ENABLE */
-	0x08, 0x00, 0x00, 0x00,  /* AFH_LISTENING_SCAN_COUNT */
-	0x06, 0x00, 0x00, 0x00,  /* AFH_LISTEN_SCAN_CYCLE_REPEATS */
-	0xFA, 0x00, 0x00, 0x00,  /* CA_BLOCK_NOISE_THRESHOLD */
-	0x03, 0x00, 0x00, 0x00,  /* CA_BLOCK_NOISE_HYSTERESIS */
-	0xB8, 0x0B, 0x00, 0x00,  /* CA_DEFAULT_REVERT_TIME */
-	0x00, 0x00,  /* CA_SMART_H2O_REJECT */
-	0x00, 0x00,  /* CA_HOST_CONTROLLED_CHARGER */
-	0xA0, 0x00,  /* T_COMP_BUTTON_MUTUAL_HIGH */
-	0xC4, 0xFF,  /* T_COMP_BUTTON_MUTUAL_LOW */
-	0xA0, 0x00,  /* T_COMP_BUTTON_SELF_HIGH */
-	0xC4, 0xFF,  /* T_COMP_BUTTON_SELF_LOW */
-	0x08, 0x00, 0x00, 0x00,  /* CA_NUM_SUB_CONV_BASE_SELF */
-	0x10, 0x00, 0x00, 0x00,  /* CA_ALT_NUM_SUB_CONV_SELF */
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,  /* Reserved228 */
-	0x0C,  /* CA_ALT_NUM_SUB_CONV_MUTUAL */
-	0x02,  /* CA_ALT_ACQUISITION_FLAGS */
-	0x45,  /* AFH_ALT_TX_PERIOD1 */
-	0x2D,  /* AFH_ALT_TX_PERIOD1_MUTUAL_SCALE_FACTOR */
-	0x0F,  /* AFH_ALT_TX_PERIOD1_MUTUAL_TX_VOLTAGE */
-	0x02,  /* AFH_ALT_TX_PULSES1 */
-	0x56,  /* AFH_ALT_TX_PERIOD2 */
-	0x2D,  /* AFH_ALT_TX_PERIOD2_MUTUAL_SCALE_FACTOR */
-	0x0F,  /* AFH_ALT_TX_PERIOD2_MUTUAL_TX_VOLTAGE */
-	0x02,  /* AFH_ALT_TX_PULSES2 */
-	0x00, 0x00,  /* Reserved250 */
-	0x2A,  /* GEST_CFG_SIZE */
-	0x01,  /* PAN_ACT_DSTX */
-	0x12,  /* PAN_ACT_DSTY */
-	0x12,  /* ZOOM_ACT_DSTX */
-	0x12,  /* ZOOM_ACT_DSTY */
-	0x23,  /* FLICK_ACT_DISTX */
-	0x23,  /* FLICK_ACT_DISTY */
-	0x50,  /* FLICK_TIME */
-	0x02,  /* ST_DEBOUNCE */
-	0x03,  /* MT_DEBOUNCE_PAN */
-	0x02,  /* MT_DEBOUNCE_ZOOM */
-	0x0A,  /* MT_DEBOUNCE_P2Z */
-	0x14,  /* ROT_DEBOUNCE */
-	0x02,  /* COMPL_DEBOUNCE */
-	0x28, 0x00,  /* MT_TIMEOUT */
-	0x32,  /* ST_DBLCLK_RMAX */
-	0x1E,  /* ST_CLICK_DISTX */
-	0x1E,  /* ST_CLICK_DISTY */
-	0x00,  /* Reserved271 */
-	0xC8, 0x00,  /* MT_CLICK_TMAX */
-	0x14, 0x00,  /* MT_CLICK_TMIN */
-	0xC8, 0x00,  /* ST_CLICK_TMAX */
-	0x14, 0x00,  /* ST_CLICK_TMIN */
-	0xC8, 0x00,  /* ST_DBLCLK_TMAX */
-	0x14, 0x00,  /* ST_DBLCLK_TMIN */
-	0xF0,  /* GESTURE_GROUP_MASK */
-	0x28,  /* GESTURE_GROUP1_START */
-	0x29,  /* GESTURE_GROUP1_END */
-	0x30,  /* GESTURE_GROUP2_START */
-	0x3F,  /* GESTURE_GROUP2_END */
-	0x48,  /* GESTURE_GROUP3_START */
-	0x49,  /* GESTURE_GROUP3_END */
-	0x90,  /* GESTURE_GROUP4_START */
-	0x9F,  /* GESTURE_GROUP4_END */
-	0x00, 0x00, 0x00,  /* Reserved293 */
-	0x1C, 0x00, 0x00, 0x00,  /* XY_FILT_CFG_SIZE */
-	0xF0, 0x00, 0x00, 0x00,  /* XY_FILTER_MASK */
-	0x01, 0x00, 0x00, 0x00,  /* XY_FILT_IIR_COEFF */
-	0x01, 0x00, 0x00, 0x00,  /* XY_FILT_Z_IIR_COEFF */
-	0x00,  /* XY_FILT_XY_FAST_THR */
-	0x00,  /* XY_FILT_XY_SLOW_THR */
-	0x01,  /* XY_FILT_IIR_FAST_COEFF */
-	0x00,  /* Reserved315 */
-	0xF0, 0x00, 0x00, 0x00,  /* XY_FILTER_MASK_CA */
-	0x01, 0x00, 0x00, 0x00,  /* XY_FILT_IIR_COEFF_CA */
-	0x02, 0x00, 0x00, 0x00,  /* XY_FILT_Z_IIR_COEFF_CA */
-	0x00,  /* XY_FILT_XY_FAST_THR_CA */
-	0x00,  /* XY_FILT_XY_SLOW_THR_CA */
-	0x01,  /* XY_FILT_IIR_FAST_COEFF_CA */
-	0x00,  /* Reserved331 */
-	0x00,  /* XY_FILT_ADAPTIVE_IIR_FILTER */
-	0x0C,  /* XY_FILT_ADAPTIVE_IIR_FILTER_DISTANCE */
-	0x00,  /* XY_FILT_TOUCH_SIZE_IIR_COEFF */
-	0x00,  /* XY_FILT_TOUCH_SIZE_HYST */
-	0x00,  /* XY_FILT_TOUCH_ORIENTATION_IIR_COEFF */
-	0x00,  /* XY_FILT_TOUCH_ORIENTATION_HYST */
-	0x01,  /* XY_FILT_TOUCH_SCALLOPING_ENABLE */
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00,  /* Reserved339 */
-	0x08, 0x00, 0x00, 0x00,  /* FINGER_ID_CFG_SIZE */
-	0x00, 0x00, 0x00, 0x00,  /* Reserved352 */
-	0xA0, 0x86, 0x01, 0x00,  /* FINGER_ID_MAX_FINGER_VELOCITY2 */
-	0x02,  /* LIFTOFF_DEBOUNCE */
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00,  /* Reserved361 */
-	0x18, 0x00, 0x00, 0x00,  /* CENTROID_SH_CFG_SIZE */
-	0x14, 0x00, 0x00, 0x00,  /* STYLUS_THRSH */
-	0x05, 0x00, 0x00, 0x00,  /* STYLUS_HYST */
-	0xFF, 0x00, 0x00, 0x00,  /* S2F_THRESHOLD */
-	0x00, 0x00, 0x00, 0x00,  /* HOVER_THRSH */
-	0x00, 0x00, 0x00, 0x00,  /* HOVER_HYST */
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,  /* Reserved392 */
-	0x20, 0x00, 0x00, 0x00,  /* ID_COORDS_CFG_SIZE */
-	0x02,  /* LRG_OBJ_CFG */
-	0x4B,  /* MAX_FAT_FINGER_SIZE */
-	0x0F,  /* MIN_FAT_FINGER_SIZE */
-	0x0D,  /* FINGER_THRESH_MUTUAL */
-	0x0F, 0x00,  /* FINGER_THRESH_SELF */
-	0x0F,  /* INNER_EDGE_GAIN */
-	0x09,  /* OUTER_EDGE_GAIN */
-	0xE0, 0x01, 0x00, 0x00,  /* X_RESOLUTION */
-	0x20, 0x03, 0x00, 0x00,  /* Y_RESOLUTION */
-	0x00, 0x00, 0x00, 0x00,  /* SENSOR_ASSIGNMENT */
-	0x80, 0x00, 0x00, 0x00,  /* Z_SCALING */
-	0x00,  /* RX_LINE_FILTER */
-	0x01,  /* BYPASS_THRESHOLD_GAIN */
-	0x01,  /* BYPASS_THRESHOLD_EDGE_GAIN */
-	0x02,  /* FINGER_THR_MUT_HYST */
-	0x03,  /* MAX_FAT_FINGER_SIZE_HYST */
-	0x03,  /* MIN_FAT_FINGER_SIZE_HYST */
-	0x0A,  /* MULTI_TOUCH_DEBOUNCE */
-	0x19,  /* CA_FINGER_THRESHOLD_MUTUAL */
-	0x20,  /* FAT_FINGER_THRESHOLD_COEFF */
-	0x03,  /* SIZE_ORIENTATION_ENABLE */
-	0x50,  /* MAJOR_AXIS_OFFSET */
-	0x0E,  /* MAJOR_AXIS_SCALE */
-	0x50,  /* MINOR_AXIS_OFFSET */
-	0x0E,  /* MINOR_AXIS_SCALE */
-	0x02,  /* RX_LINE_FILTER_DEBOUNCE */
-	0x00,  /* CLIPPING_X_LOW */
-	0x00,  /* CLIPPING_X_HIGH */
-	0x00,  /* CLIPPING_Y_LOW */
-	0x00,  /* CLIPPING_Y_HIGH */
-	0x05,  /* COEF_EDGE_ATTRACTION */
-	0x00, 0x00,  /* WIDTH_CORNER_DIAG1 */
-	0x00, 0x00,  /* WIDTH_CORNER_DIAG2 */
-	0x00, 0x00,  /* WIDTH_CORNER_DIAG3 */
-	0x00, 0x00,  /* WIDTH_CORNER_DIAG4 */
-	0x00, 0x00,  /* WIDTH_CORNER_DIAG5 */
-	0x00, 0x00,  /* WIDTH_CORNER_DIAG6 */
-	0x00, 0x00,  /* WIDTH_CORNER_DIAG7 */
-	0x00, 0x00,  /* WIDTH_CORNER_DIAG8 */
-	0x00, 0x00,  /* WIDTH_CORNER_DIAG9 */
-	0x00, 0x00,  /* WIDTH_CORNER_DIAG10 */
-	0x00, 0x00,  /* WIDTH_CORNER_DIAG11 */
-	0x00, 0x00,  /* WIDTH_CORNER_PERP1 */
-	0x00, 0x00,  /* WIDTH_CORNER_PERP2 */
-	0x00, 0x00,  /* WIDTH_CORNER_PERP3 */
-	0x00, 0x00,  /* WIDTH_CORNER_PERP4 */
-	0x32,  /* RX_LINE_FILTER_THRESHOLD */
-	0x00,  /* NOISE_REJECTION_3x3_FILTER_SCALE */
-	0x01,  /* NOISE_REJECTION_3x3_FILTER_SCALE_CA */
-	0x00,  /* DIRECT_XY_ENABLE */
-	0x00, 0x00,  /* Reserved482 */
-	0x0B, 0x00, 0x00, 0x00,  /* BTN_CFG_SIZE */
-	0x19, 0x00,  /* BTN_THRSH_MUT_0 */
-	0x19, 0x00,  /* BTN_THRSH_MUT_1 */
-	0x19, 0x00,  /* BTN_THRSH_MUT_2 */
-	0x19, 0x00,  /* BTN_THRSH_MUT_3 */
-	0x00,  /* BTN_HYST_MUT */
-	0x00,  /* Reserved497 */
-	0x00,  /* Reserved498 */
-	0x00,  /* Reserved499 */
-	0x14, 0x00,  /* BTN_THRSH_SELF */
-	0x14, 0x00,  /* BTN_THRSH_SELF_1 */
-	0x14, 0x00,  /* BTN_THRSH_SELF_2 */
-	0x14, 0x00,  /* BTN_THRSH_SELF_3 */
-	0x00,  /* BTN_HYST_SELF */
-	0x00,  /* Reserved509 */
-	0x00,  /* Reserved510 */
-	0x00,  /* Reserved511 */
-	0x1A, 0x00, 0x00, 0x00,  /* RAW_PROC_CFG_SIZE */
-	0x37, 0x77,  /* RAW_FILTER_MASK */
-	0x00,  /* RAW_FILT_IIR_COEFF_MUTUAL */
-	0x05,  /* RAW_FILT_IIR_THRESHOLD_MUTUAL */
-	0x00,  /* RAW_FILT_IIR_COEFF_SELF */
-	0x05,  /* RAW_FILT_IIR_THRESHOLD_SELF */
-	0x00,  /* RAW_FILT_IIR_COEFF_BALANCED */
-	0x14,  /* RAW_FILT_IIR_THRESHOLD_BALANCED */
-	0x00,  /* RAW_FILT_IIR_COEFF_BUTTONS */
-	0x14,  /* RAW_FILT_IIR_THRESHOLD_BUTTONS */
-	0x00, 0x00,  /* Reserved526 */
-	0x37, 0x77,  /* RAW_FILTER_MASK_CA */
-	0x00,  /* RAW_FILT_IIR_COEFF_MUTUAL_CA */
-	0x28,  /* RAW_FILT_IIR_THRESHOLD_MUTUAL_CA */
-	0x00,  /* RAW_FILT_IIR_COEFF_SELF_CA */
-	0x0F,  /* RAW_FILT_IIR_THRESHOLD_SELF_CA */
-	0x01,  /* RAW_FILT_IIR_COEFF_BALANCED_CA */
-	0x14,  /* RAW_FILT_IIR_THRESHOLD_BALANCED_CA */
-	0x01,  /* RAW_FILT_IIR_COEFF_BUTTONS_CA */
-	0x14,  /* RAW_FILT_IIR_THRESHOLD_BUTTONS_CA */
-	0x00, 0x00,  /* Reserved538 */
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,  /* Reserved540 */
-	0x02,  /* BL_DELAY_MUT */
-	0x02,  /* BL_DELAY_SELF */
-	0x02,  /* BL_DELAY_BAL */
-	0x14,  /* BL_DELAY_BTN */
-	0x0B,  /* BL_THR_MUT */
-	0x02,  /* BL_THR_SELF */
-	0x02,  /* BL_THR_BAL */
-	0x17,  /* BL_THR_BTN_MUT */
-	0x02,  /* BL_THR_BTN_SELF */
-	0x14,  /* BL_MUT_SIG_THRESHOLD_CA */
-	0x50,  /* BL_FILT_MUT */
-	0x50,  /* BL_FILT_SELF */
-	0x50,  /* BL_FILT_BAL */
-	0x50,  /* BL_FILT_BTN_MUT */
-	0x50,  /* BL_FILT_BTN_SELF */
-	0x0E,  /* CMF_THR_MUT */
-	0x0C,  /* CMF_THR_SELF */
-	0x0C,  /* CMF_THR_BAL */
-	0x0C,  /* CMF_THR_BTN_MUT */
-	0x0C,  /* CMF_THR_BTN_SELF */
-	0x00, 0x00, 0x00, 0x00,  /* Reserved572 */
-	0x08, 0x00, 0x00, 0x00,  /* H2OREJECTION_SIZE */
-	0x00,  /* BL_H20_RJCT */
-	0x00,  /* BL_H20_SNS_WIDTH */
-	0x00, 0x00,  /* Reserved582 */
-	0xB4, 0x01, 0x00, 0x00,  /* CDC_CFG_SIZE */
-	0x00, 0x00, 0xFF, 0x81,  /* TSS_CONTROL_MUT */
-	0x03, 0x06, 0x00, 0x00,  /* TSS_LENGTH_MUT */
-	0xFF, 0x00, 0xAF, 0xC0,  /* TSS_TX_CONFIG_MUT */
-	0xFF, 0xFF, 0xB0, 0x00,  /* TSS_TX_CONTROL_MUT */
-	0x22, 0x02, 0x7F, 0x81,  /* TSS_SEQ_CONFIG1_MUT */
-	0x7F, 0x72, 0x01, 0x80,  /* TSS_SEQ_CONFIG2_MUT */
-	0x06, 0x01, 0x48, 0x04,  /* TSS_SEQ_CONFIG3_MUT */
-	0x43, 0x28, 0x3C, 0x28,  /* TSS_SEQ_CONFIG4_MUT */
-	0x12, 0x01, 0x01, 0x00,  /* TSS_SEQ_CONFIG5_MUT */
-	0x04, 0x01, 0x08, 0x10,  /* TSS_SEQ_CONFIG6_MUT */
-	0x01, 0x04, 0x00, 0x00,  /* TSS_SEQ_CONFIG7_MUT */
-	0x44, 0x01, 0x02, 0x80,  /* TSS_SEQ_CONFIG8_MUT */
-	0x01, 0x01, 0x00, 0x00,  /* TSS_EXT_CONFIG1_MUT */
-	0x80, 0x00, 0x01, 0x00,  /* TSS_EXT_CONFIG2_MUT */
-	0x00, 0x00, 0x00, 0x00,  /* TSS_EXT_INTERVAL_MUT */
-	0x01, 0x01, 0x00, 0x90,  /* TSS_INT_CONFIG1_MUT */
-	0x80, 0x00, 0xFE, 0x0B,  /* TSS_INT_CONFIG2_MUT */
-	0x00, 0x00, 0x00, 0x00,  /* TSS_INT_INTERVAL_MUT */
-	0x00, 0x00, 0x00, 0x00,  /* TSS_MCS_CONFIG_MUT */
-	0x7A, 0xA0, 0x00, 0xD0,  /* TSS_RX_CONFIG_MUT */
-	0x00, 0x00, 0x00, 0x00,  /* Reserved668 */
-	0x05, 0x04, 0xFF, 0x81,  /* TSS_CONTROL_SELF */
-	0x04, 0x0C, 0x00, 0x00,  /* TSS_LENGTH_SELF */
-	0xFF, 0x02, 0xAF, 0xC0,  /* TSS_TX_CONFIG_SELF */
-	0xFF, 0xFF, 0xD0, 0x00,  /* TSS_TX_CONTROL_SELF */
-	0x22, 0x02, 0x7F, 0x81,  /* TSS_SEQ_CONFIG1_SELF */
-	0x7F, 0x72, 0x01, 0x80,  /* TSS_SEQ_CONFIG2_SELF */
-	0x01, 0x81, 0x40, 0x04,  /* TSS_SEQ_CONFIG3_SELF */
-	0x31, 0x0F, 0x31, 0x0F,  /* TSS_SEQ_CONFIG4_SELF */
-	0x12, 0x01, 0x01, 0x00,  /* TSS_SEQ_CONFIG5_SELF */
-	0x04, 0x01, 0x08, 0x10,  /* TSS_SEQ_CONFIG6_SELF */
-	0x01, 0x04, 0x00, 0x00,  /* TSS_SEQ_CONFIG7_SELF */
-	0x44, 0x01, 0x02, 0x80,  /* TSS_SEQ_CONFIG8_SELF */
-	0x01, 0x01, 0x00, 0x00,  /* TSS_EXT_CONFIG1_SELF */
-	0x80, 0x00, 0x01, 0x00,  /* TSS_EXT_CONFIG2_SELF */
-	0x00, 0x00, 0x00, 0x00,  /* TSS_EXT_INTERVAL_SELF */
-	0x01, 0x01, 0x00, 0x90,  /* TSS_INT_CONFIG1_SELF */
-	0x80, 0x00, 0xFE, 0x0B,  /* TSS_INT_CONFIG2_SELF */
-	0x00, 0x00, 0x00, 0x00,  /* TSS_INT_INTERVAL_SELF */
-	0x00, 0x00, 0x00, 0x00,  /* TSS_MCS_CONFIG_SELF */
-	0x3A, 0xA6, 0x00, 0xD0,  /* TSS_RX_CONFIG_SELF */
-	0x00, 0x00, 0x00, 0x00,  /* Reserved752 */
-	0x05, 0x04, 0xFF, 0x80,  /* TSS_CONTROL_BAL */
-	0x03, 0x20, 0x00, 0x00,  /* TSS_LENGTH_BAL */
-	0xAF, 0x08, 0xAF, 0xC0,  /* TSS_TX_CONFIG_BAL */
-	0xFF, 0xFF, 0xB0, 0x00,  /* TSS_TX_CONTROL_BAL */
-	0x22, 0x02, 0x7F, 0x81,  /* TSS_SEQ_CONFIG1_BAL */
-	0x7F, 0x72, 0x01, 0x80,  /* TSS_SEQ_CONFIG2_BAL */
-	0x01, 0x81, 0x40, 0x04,  /* TSS_SEQ_CONFIG3_BAL */
-	0x96, 0x0F, 0x96, 0x0F,  /* TSS_SEQ_CONFIG4_BAL */
-	0x12, 0x01, 0x01, 0x00,  /* TSS_SEQ_CONFIG5_BAL */
-	0x04, 0x01, 0x08, 0x10,  /* TSS_SEQ_CONFIG6_BAL */
-	0x01, 0x04, 0x00, 0x00,  /* TSS_SEQ_CONFIG7_BAL */
-	0x44, 0x01, 0x02, 0x80,  /* TSS_SEQ_CONFIG8_BAL */
-	0x01, 0x01, 0x00, 0x00,  /* TSS_EXT_CONFIG1_BAL */
-	0x80, 0x00, 0x01, 0x00,  /* TSS_EXT_CONFIG2_BAL */
-	0x00, 0x00, 0x00, 0x00,  /* TSS_EXT_INTERVAL_BAL */
-	0x01, 0x01, 0x00, 0x90,  /* TSS_INT_CONFIG1_BAL */
-	0x80, 0x00, 0xFE, 0x0B,  /* TSS_INT_CONFIG2_BAL */
-	0x00, 0x00, 0x00, 0x00,  /* TSS_INT_INTERVAL_BAL */
-	0x00, 0x00, 0x00, 0x00,  /* TSS_MCS_CONFIG_BAL */
-	0x3A, 0xA0, 0x00, 0xD0,  /* TSS_RX_CONFIG_BAL */
-	0x05, 0x04, 0xFF, 0x80,  /* TSS_CONTROL_BTN */
-	0x03, 0x24, 0x00, 0x00,  /* TSS_LENGTH_BTN_MUT */
-	0xFF, 0x00, 0xAF, 0xC0,  /* TSS_TX_CONFIG_BTN */
-	0xFF, 0xFF, 0xB0, 0x00,  /* TSS_TX_CONTROL_BTN */
-	0x22, 0x02, 0x7F, 0x81,  /* TSS_SEQ_CONFIG1_BTN */
-	0x7F, 0x72, 0x01, 0x80,  /* TSS_SEQ_CONFIG2_BTN */
-	0x06, 0x01, 0x48, 0x04,  /* TSS_SEQ_CONFIG3_BTN */
-	0x31, 0x23, 0x31, 0x23,  /* TSS_SEQ_CONFIG4_BTN */
-	0x12, 0x01, 0x01, 0x00,  /* TSS_SEQ_CONFIG5_BTN */
-	0x04, 0x01, 0x08, 0x10,  /* TSS_SEQ_CONFIG6_BTN */
-	0x01, 0x04, 0x00, 0x00,  /* TSS_SEQ_CONFIG7_BTN */
-	0x44, 0x01, 0x02, 0x80,  /* TSS_SEQ_CONFIG8_BTN */
-	0x01, 0x01, 0x00, 0x00,  /* TSS_EXT_CONFIG1_BTN */
-	0x80, 0x00, 0x01, 0x00,  /* TSS_EXT_CONFIG2_BTN */
-	0x00, 0x00, 0x00, 0x00,  /* TSS_EXT_INTERVAL_BTN */
-	0x01, 0x01, 0x00, 0x90,  /* TSS_INT_CONFIG1_BTN */
-	0x80, 0x00, 0xFE, 0x0B,  /* TSS_INT_CONFIG2_BTN */
-	0x00, 0x00, 0x00, 0x00,  /* TSS_INT_INTERVAL_BTN */
-	0x00, 0x00, 0x00, 0x00,  /* TSS_MCS_CONFIG_BTN */
-	0x7A, 0xA0, 0x00, 0xD0,  /* TSS_RX_CONFIG_BTN */
-	0x03, 0x08, 0x00, 0x00,  /* TSS_LENGTH_BTN_SELF */
-	0x00, 0x00, 0x30, 0x30,  /* TSS_RX_VREF */
-	0x40, 0x03, 0x07, 0x40,  /* TSS_RX_LX_CONFIG */
-	0x15, 0x00, 0x00, 0x00,  /* TX_NUM */
-	0x0D, 0x00, 0x00, 0x00,  /* RX_NUM */
-	0x22, 0x00, 0x00, 0x00,  /* SENS_NUM */
-	0x11, 0x01, 0x00, 0x00,  /* CROSS_NUM */
-	0x02, 0x00, 0x00, 0x00,  /* BUTTON_NUM */
-	0x02, 0x00, 0x00, 0x00,  /* SLOTS_MUT */
-	0x02, 0x00, 0x00, 0x00,  /* SLOTS_SELF_RX */
-	0x03, 0x00, 0x00, 0x00,  /* SLOTS_SELF_TX */
-	0x05, 0x00, 0x00, 0x00,  /* SLOTS_SELF */
-	0x0A, 0x00, 0x00, 0x00,  /* SLOTS_BAL */
-	0x2D, 0x00, 0x00, 0x00,  /* SCALE_MUT */
-	0x64, 0x00, 0x00, 0x00,  /* SCALE_SELF */
-	0x64, 0x00, 0x00, 0x00,  /* SCALE_BAL */
-	0x2D, 0x00, 0x00, 0x00,  /* SCALE_BUTTON */
-	0x00, 0x00, 0x00, 0x00,  /* LX_MODE */
-	0x50, 0x00, 0x00, 0x00,  /* LX_SCALE */
-	0x01, 0x00, 0x00, 0x00,  /* ABSOLUTE_CR_CORRECTION_ENABLE */
-	0x02, 0x00, 0x00, 0x00,  /* SCANNING_MODE_MUTUAL */
-	0x02, 0x00, 0x00, 0x00,  /* SCANNING_MODE_BUTTON */
-	0x0F, 0x00,  /* DETECT_CHARGER_THRESHOLD */
-	0x01,  /* CA_LX_SCAN_MODE */
-	0x00,  /* SUB_SLOT_SCAN */
-	0x0F,  /* NOISE_METRIC1_THRESHOLD */
-	0x0F,  /* NOISE_METRIC2_THRESHOLD */
-	0x32,  /* NOISE_METRIC3_THRESHOLD */
-	0x00,  /* AFH_DYNAMIC_THRSH_ENABLE */
-	0x04,  /* ADC_CONFIG */
-	0x00,  /* Reserved1013 */
-	0x04,  /* TSS_LDO_PROG */
-	0x02,  /* TX_PERIOD_DUMMY_SCAN */
-	0x01,  /* SINGLE_ENDED_LISTEN_SCAN */
-	0x01,  /* SPREAD_MTX */
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00,  /* Reserved1018 */
-	0x34, 0x00, 0x00, 0x00,  /* CALIBRATION_PARAM_SIZE */
-	0x01, 0x00, 0x00, 0x00,  /* Reserved1112 */
-	0x01, 0x00, 0x00, 0x00,  /* Reserved1116 */
-	0x01, 0x00, 0x00, 0x00,  /* Reserved1120 */
-	0x01, 0x00, 0x00, 0x00,  /* Reserved1124 */
-	0x01, 0x00, 0x00, 0x00,  /* GLOBAL_IDAC_LSB_MUTUAL */
-	0x01, 0x00, 0x00, 0x00,  /* GLOBAL_IDAC_LSB_SELF */
-	0x01, 0x00, 0x00, 0x00,  /* GLOBAL_IDAC_LSB_BALANCED */
-	0x01, 0x00, 0x00, 0x00,  /* GLOBAL_IDAC_LSB_BUTTON */
-	0x00, 0x00, 0x00, 0x00,  /* TARGET_LEVEL_MUTUAL */
-	0x00, 0x00, 0x00, 0x00,  /* TARGET_LEVEL_SELF */
-	0x00, 0x00, 0x00, 0x00,  /* TARGET_LEVEL_BALANCED */
-	0xCE, 0xFF, 0xFF, 0xFF,  /* TARGET_LEVEL_BUTTON */
-	0x01, 0x00, 0x00, 0x00,  /* GAIN_MUTUAL */
-	0x01, 0x00, 0x00, 0x00,  /* GAIN_SELF */
-	0x01, 0x00, 0x00, 0x00,  /* GAIN_BALANCED */
-	0x01, 0x00, 0x00, 0x00,  /* GAIN_BTN_MUTUAL */
-	0x01, 0x00, 0x00, 0x00,  /* GAIN_BTN_SELF */
-	0x00, 0x00, 0x00, 0x00,  /* Reserved1180 */
-	0x08, 0x00, 0x00, 0x00,  /* SPREADER_CFG_SIZE */
-	0x00, 0x00, 0x00, 0x00,  /* CLK_IMO_SPREAD */
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,  /* Reserved1192 */
-	0x11, 0x12, 0x13, 0x14,
-	0x15, 0x16, 0x17, 0x18,
-	0x19, 0x22, 0x23, 0x24,
-	0x25, 0x38, 0x37, 0x36,
-	0x2D, 0x2C, 0x2B, 0x2A,
-	0x29, 0x28, 0x27, 0x3B,
-	0x3A, 0x39, 0x01, 0x02,
-	0x03, 0x04, 0x05, 0x0E,
-	0x0F, 0x10, 0x10, 0x27,
-	0x26, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00,  /* CDC_PIN_INDEX_TABLE */
-	0x00, 0x00, 0x00,  /* Reserved1281 */
-	0x38, 0x2B, 0x38, 0x2B,
-	0x10, 0x10, 0x10, 0x10,
-	0x10, 0x10, 0x13, 0x13,
-	0x00, 0x00,  /* CDC_BALANCED_LX_TABLE */
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00,  /* Reserved1298 */
-	0x80, 0x1F, 0x00, 0xFF,
-	0x03, 0x00, 0x00, 0x00,
-	0x00, 0x07, 0xFC, 0x03,
-	0xE0, 0x03, 0x00, 0x00,
-	0x00, 0x00,  /* CDC_BALANCED_TX_PATTERNS */
-	0x00, 0x00,  /* Reserved1322 */
-	0x7E, 0x00, 0x06, 0x10,
-	0x00, 0x00, 0x01, 0x02,
-	0x03, 0x04, 0x05, 0x00,
-	0x00, 0x0F, 0x0B, 0x0A,
-	0x09, 0x09, 0x0A, 0x0A,
-	0x0F, 0x0F, 0xBF, 0x00,
-	0x07, 0x10, 0x07, 0x08,
-	0x09, 0x0A, 0x0B, 0x0C,
-	0x00, 0x06, 0x00, 0x0B,
-	0x0B, 0x0B, 0x0A, 0x0B,
-	0x0B, 0x0F, 0x0A, 0x0F,
-	0xFF, 0x00, 0x08, 0x38,
-	0x21, 0x14, 0x13, 0x12,
-	0x1D, 0x1E, 0x1F, 0x20,
-	0x00, 0x0B, 0x0B, 0x0B,
-	0x0B, 0x0A, 0x0A, 0x09,
-	0x0A, 0x0F, 0x8F, 0x00,
-	0x05, 0x10, 0x15, 0x19,
-	0x18, 0x17, 0x00, 0x00,
-	0x00, 0x16, 0x00, 0x0B,
-	0x0B, 0x0B, 0x0B, 0x0F,
-	0x0F, 0x0F, 0x0B, 0x0F,
-	0xFF, 0x00, 0x08, 0x10,
-	0x0D, 0x1A, 0x1B, 0x1C,
-	0x11, 0x10, 0x0F, 0x0E,
-	0x00, 0x0A, 0x0A, 0x0A,
-	0x0A, 0x0B, 0x0B, 0x0A,
-	0x0A, 0x0F, 0x81, 0x00,
-	0x02, 0x14, 0x22, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x23, 0x00, 0x0B,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x0B, 0x00,
-	0x11, 0x00, 0x02, 0x14,
-	0x23, 0x00, 0x00, 0x00,
-	0x22, 0x00, 0x00, 0x00,
-	0x00, 0x0B, 0x00, 0x00,
-	0x00, 0x09, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,  /* CDC_SLOT_TABLE */
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00,  /* Reserved1500 */
-	0xC4, 0x12,  /* CONFIG_CRC */
-};
-
-/* Touchscreen Parameters Field Sizes (Writable: 0:Readonly; 1:Writable) */
-static const uint16_t cyttsp4_param_size[] = {
-/*	Size	Name	*/
-	2, /* CONFIG_DATA_SIZE */
-	2, /* CONFIG_DATA_MAX_SIZE */
-	4, /* SDK_CTRL_CFG_SIZE */
-	2, /* CONFIG_VER */
-	1, /* PANELID_ENABLE */
-	1, /* IMO_FREQ_MHZ */
-	2, /* X_LEN_PHY */
-	2, /* Y_LEN_PHY */
-	1, /* HST_MODE0 */
-	1, /* ACT_DIST0 */
-	1, /* SCAN_TYP0 */
-	1, /* ACT_INTRVL0 */
-	1, /* ACT_LFT_INTRVL0 */
-	1, /* Reserved21 */
-	2, /* LP_INTRVL0 */
-	2, /* TCH_TMOUT0 */
-	1, /* PWR_CFG */
-	1, /* Reserved27 */
-	1, /* INT_PULSE_DATA */
-	1, /* OPMODE_CFG */
-	2, /* HANDSHAKE_TIMEOUT */
-	2, /* ESD_COUNTER_CFG */
-	1, /* TIMER_CAL_INTERVAL */
-	1, /* Reserved35 */
-	2, /* RP2P_MIN */
-	2, /* ILEAK_MAX */
-	2, /* RFB_P2P */
-	2, /* RFB_EXT */
-	1, /* IDACOPEN_LOW */
-	1, /* IDACOPEN_HIGH */
-	1, /* IDACOPEN_BUTTON_LOW */
-	1, /* IDACOPEN_BUTTON_HIGH */
-	1, /* GIDAC_OPEN */
-	1, /* GAIN_OPEN */
-	1, /* GIDAC_BUTTON_OPEN */
-	1, /* GAIN_BUTTON_OPEN */
-	1, /* POST_CFG */
-	1, /* GESTURE_CFG */
-	1, /* GEST_EN0 */
-	1, /* GEST_EN1 */
-	1, /* GEST_EN2 */
-	1, /* GEST_EN3 */
-	1, /* GEST_EN4 */
-	1, /* GEST_EN5 */
-	1, /* GEST_EN6 */
-	1, /* GEST_EN7 */
-	1, /* GEST_EN8 */
-	1, /* GEST_EN9 */
-	1, /* GEST_EN10 */
-	1, /* GEST_EN11 */
-	1, /* GEST_EN12 */
-	1, /* GEST_EN13 */
-	1, /* GEST_EN14 */
-	1, /* GEST_EN15 */
-	1, /* GEST_EN16 */
-	1, /* GEST_EN17 */
-	1, /* GEST_EN18 */
-	1, /* GEST_EN19 */
-	1, /* GEST_EN20 */
-	1, /* GEST_EN21 */
-	1, /* GEST_EN22 */
-	1, /* GEST_EN23 */
-	1, /* GEST_EN24 */
-	1, /* GEST_EN25 */
-	1, /* GEST_EN26 */
-	1, /* GEST_EN27 */
-	1, /* GEST_EN28 */
-	1, /* GEST_EN29 */
-	1, /* GEST_EN30 */
-	1, /* GEST_EN31 */
-	1, /* ACT_DIST2 */
-	1, /* EXTERN_SYNC */
-	8, /* Reserved88 */
-	4, /* GRIP_CFG_SIZE */
-	2, /* GRIP_XEDG_A */
-	2, /* GRIP_XEDG_B */
-	2, /* GRIP_XEXC_A */
-	2, /* GRIP_XEXC_B */
-	2, /* GRIP_YEDG_A */
-	2, /* GRIP_YEDG_B */
-	2, /* GRIP_YEXC_A */
-	2, /* GRIP_YEXC_B */
-	1, /* GRIP_FIRST_EXC */
-	1, /* GRIP_EXC_EDGE_ORIGIN */
-	2, /* Reserved118 */
-	4, /* TRUETOUCH_CFG_SIZE */
-	4, /* MAX_SELF_SCAN_INTERVAL */
-	4, /* MAX_MUTUAL_SCAN_INTERVAL */
-	4, /* MAX_BALANCED_SCAN_INTERVAL */
-	4, /* SELF_Z_THRSH */
-	4, /* SELF_Z_MODE */
-	4, /* SMART_SCAN_ENABLE */
-	4, /* T_COMP_ENABLE */
-	4, /* T_COMP_INTERVAL */
-	4, /* T_COMP_RECAL_MUTUAL_SENSOR_LIMIT */
-	4, /* T_COMP_RECAL_MUTUAL_HIGH */
-	4, /* T_COMP_RECAL_MUTUAL_LOW */
-	4, /* T_COMP_RECAL_SELF_SENSOR_LIMIT */
-	4, /* T_COMP_RECAL_SELF_HIGH */
-	4, /* T_COMP_RECAL_SELF_LOW */
-	4, /* CHARGER_ARMOR_ENABLE */
-	4, /* AFH_ENABLE */
-	4, /* AFH_LISTENING_SCAN_COUNT */
-	4, /* AFH_LISTEN_SCAN_CYCLE_REPEATS */
-	4, /* CA_BLOCK_NOISE_THRESHOLD */
-	4, /* CA_BLOCK_NOISE_HYSTERESIS */
-	4, /* CA_DEFAULT_REVERT_TIME */
-	2, /* CA_SMART_H2O_REJECT */
-	2, /* CA_HOST_CONTROLLED_CHARGER */
-	2, /* T_COMP_BUTTON_MUTUAL_HIGH */
-	2, /* T_COMP_BUTTON_MUTUAL_LOW */
-	2, /* T_COMP_BUTTON_SELF_HIGH */
-	2, /* T_COMP_BUTTON_SELF_LOW */
-	4, /* CA_NUM_SUB_CONV_BASE_SELF */
-	4, /* CA_ALT_NUM_SUB_CONV_SELF */
-	12, /* Reserved228 */
-	1, /* CA_ALT_NUM_SUB_CONV_MUTUAL */
-	1, /* CA_ALT_ACQUISITION_FLAGS */
-	1, /* AFH_ALT_TX_PERIOD1 */
-	1, /* AFH_ALT_TX_PERIOD1_MUTUAL_SCALE_FACTOR */
-	1, /* AFH_ALT_TX_PERIOD1_MUTUAL_TX_VOLTAGE */
-	1, /* AFH_ALT_TX_PULSES1 */
-	1, /* AFH_ALT_TX_PERIOD2 */
-	1, /* AFH_ALT_TX_PERIOD2_MUTUAL_SCALE_FACTOR */
-	1, /* AFH_ALT_TX_PERIOD2_MUTUAL_TX_VOLTAGE */
-	1, /* AFH_ALT_TX_PULSES2 */
-	2, /* Reserved250 */
-	1, /* GEST_CFG_SIZE */
-	1, /* PAN_ACT_DSTX */
-	1, /* PAN_ACT_DSTY */
-	1, /* ZOOM_ACT_DSTX */
-	1, /* ZOOM_ACT_DSTY */
-	1, /* FLICK_ACT_DISTX */
-	1, /* FLICK_ACT_DISTY */
-	1, /* FLICK_TIME */
-	1, /* ST_DEBOUNCE */
-	1, /* MT_DEBOUNCE_PAN */
-	1, /* MT_DEBOUNCE_ZOOM */
-	1, /* MT_DEBOUNCE_P2Z */
-	1, /* ROT_DEBOUNCE */
-	1, /* COMPL_DEBOUNCE */
-	2, /* MT_TIMEOUT */
-	1, /* ST_DBLCLK_RMAX */
-	1, /* ST_CLICK_DISTX */
-	1, /* ST_CLICK_DISTY */
-	1, /* Reserved271 */
-	2, /* MT_CLICK_TMAX */
-	2, /* MT_CLICK_TMIN */
-	2, /* ST_CLICK_TMAX */
-	2, /* ST_CLICK_TMIN */
-	2, /* ST_DBLCLK_TMAX */
-	2, /* ST_DBLCLK_TMIN */
-	1, /* GESTURE_GROUP_MASK */
-	1, /* GESTURE_GROUP1_START */
-	1, /* GESTURE_GROUP1_END */
-	1, /* GESTURE_GROUP2_START */
-	1, /* GESTURE_GROUP2_END */
-	1, /* GESTURE_GROUP3_START */
-	1, /* GESTURE_GROUP3_END */
-	1, /* GESTURE_GROUP4_START */
-	1, /* GESTURE_GROUP4_END */
-	3, /* Reserved293 */
-	4, /* XY_FILT_CFG_SIZE */
-	4, /* XY_FILTER_MASK */
-	4, /* XY_FILT_IIR_COEFF */
-	4, /* XY_FILT_Z_IIR_COEFF */
-	1, /* XY_FILT_XY_FAST_THR */
-	1, /* XY_FILT_XY_SLOW_THR */
-	1, /* XY_FILT_IIR_FAST_COEFF */
-	1, /* Reserved315 */
-	4, /* XY_FILTER_MASK_CA */
-	4, /* XY_FILT_IIR_COEFF_CA */
-	4, /* XY_FILT_Z_IIR_COEFF_CA */
-	1, /* XY_FILT_XY_FAST_THR_CA */
-	1, /* XY_FILT_XY_SLOW_THR_CA */
-	1, /* XY_FILT_IIR_FAST_COEFF_CA */
-	1, /* Reserved331 */
-	1, /* XY_FILT_ADAPTIVE_IIR_FILTER */
-	1, /* XY_FILT_ADAPTIVE_IIR_FILTER_DISTANCE */
-	1, /* XY_FILT_TOUCH_SIZE_IIR_COEFF */
-	1, /* XY_FILT_TOUCH_SIZE_HYST */
-	1, /* XY_FILT_TOUCH_ORIENTATION_IIR_COEFF */
-	1, /* XY_FILT_TOUCH_ORIENTATION_HYST */
-	1, /* XY_FILT_TOUCH_SCALLOPING_ENABLE */
-	9, /* Reserved339 */
-	4, /* FINGER_ID_CFG_SIZE */
-	4, /* Reserved352 */
-	4, /* FINGER_ID_MAX_FINGER_VELOCITY2 */
-	1, /* LIFTOFF_DEBOUNCE */
-	7, /* Reserved361 */
-	4, /* CENTROID_SH_CFG_SIZE */
-	4, /* STYLUS_THRSH */
-	4, /* STYLUS_HYST */
-	4, /* S2F_THRESHOLD */
-	4, /* HOVER_THRSH */
-	4, /* HOVER_HYST */
-	8, /* Reserved392 */
-	4, /* ID_COORDS_CFG_SIZE */
-	1, /* LRG_OBJ_CFG */
-	1, /* MAX_FAT_FINGER_SIZE */
-	1, /* MIN_FAT_FINGER_SIZE */
-	1, /* FINGER_THRESH_MUTUAL */
-	2, /* FINGER_THRESH_SELF */
-	1, /* INNER_EDGE_GAIN */
-	1, /* OUTER_EDGE_GAIN */
-	4, /* X_RESOLUTION */
-	4, /* Y_RESOLUTION */
-	4, /* SENSOR_ASSIGNMENT */
-	4, /* Z_SCALING */
-	1, /* RX_LINE_FILTER */
-	1, /* BYPASS_THRESHOLD_GAIN */
-	1, /* BYPASS_THRESHOLD_EDGE_GAIN */
-	1, /* FINGER_THR_MUT_HYST */
-	1, /* MAX_FAT_FINGER_SIZE_HYST */
-	1, /* MIN_FAT_FINGER_SIZE_HYST */
-	1, /* MULTI_TOUCH_DEBOUNCE */
-	1, /* CA_FINGER_THRESHOLD_MUTUAL */
-	1, /* FAT_FINGER_THRESHOLD_COEFF */
-	1, /* SIZE_ORIENTATION_ENABLE */
-	1, /* MAJOR_AXIS_OFFSET */
-	1, /* MAJOR_AXIS_SCALE */
-	1, /* MINOR_AXIS_OFFSET */
-	1, /* MINOR_AXIS_SCALE */
-	1, /* RX_LINE_FILTER_DEBOUNCE */
-	1, /* CLIPPING_X_LOW */
-	1, /* CLIPPING_X_HIGH */
-	1, /* CLIPPING_Y_LOW */
-	1, /* CLIPPING_Y_HIGH */
-	1, /* COEF_EDGE_ATTRACTION */
-	2, /* WIDTH_CORNER_DIAG1 */
-	2, /* WIDTH_CORNER_DIAG2 */
-	2, /* WIDTH_CORNER_DIAG3 */
-	2, /* WIDTH_CORNER_DIAG4 */
-	2, /* WIDTH_CORNER_DIAG5 */
-	2, /* WIDTH_CORNER_DIAG6 */
-	2, /* WIDTH_CORNER_DIAG7 */
-	2, /* WIDTH_CORNER_DIAG8 */
-	2, /* WIDTH_CORNER_DIAG9 */
-	2, /* WIDTH_CORNER_DIAG10 */
-	2, /* WIDTH_CORNER_DIAG11 */
-	2, /* WIDTH_CORNER_PERP1 */
-	2, /* WIDTH_CORNER_PERP2 */
-	2, /* WIDTH_CORNER_PERP3 */
-	2, /* WIDTH_CORNER_PERP4 */
-	1, /* RX_LINE_FILTER_THRESHOLD */
-	1, /* NOISE_REJECTION_3x3_FILTER_SCALE */
-	1, /* NOISE_REJECTION_3x3_FILTER_SCALE_CA */
-	1, /* DIRECT_XY_ENABLE */
-	2, /* Reserved482 */
-	4, /* BTN_CFG_SIZE */
-	2, /* BTN_THRSH_MUT_0 */
-	2, /* BTN_THRSH_MUT_1 */
-	2, /* BTN_THRSH_MUT_2 */
-	2, /* BTN_THRSH_MUT_3 */
-	1, /* BTN_HYST_MUT */
-	1, /* Reserved497 */
-	1, /* Reserved498 */
-	1, /* Reserved499 */
-	2, /* BTN_THRSH_SELF */
-	2, /* BTN_THRSH_SELF_1 */
-	2, /* BTN_THRSH_SELF_2 */
-	2, /* BTN_THRSH_SELF_3 */
-	1, /* BTN_HYST_SELF */
-	1, /* Reserved509 */
-	1, /* Reserved510 */
-	1, /* Reserved511 */
-	4, /* RAW_PROC_CFG_SIZE */
-	2, /* RAW_FILTER_MASK */
-	1, /* RAW_FILT_IIR_COEFF_MUTUAL */
-	1, /* RAW_FILT_IIR_THRESHOLD_MUTUAL */
-	1, /* RAW_FILT_IIR_COEFF_SELF */
-	1, /* RAW_FILT_IIR_THRESHOLD_SELF */
-	1, /* RAW_FILT_IIR_COEFF_BALANCED */
-	1, /* RAW_FILT_IIR_THRESHOLD_BALANCED */
-	1, /* RAW_FILT_IIR_COEFF_BUTTONS */
-	1, /* RAW_FILT_IIR_THRESHOLD_BUTTONS */
-	2, /* Reserved526 */
-	2, /* RAW_FILTER_MASK_CA */
-	1, /* RAW_FILT_IIR_COEFF_MUTUAL_CA */
-	1, /* RAW_FILT_IIR_THRESHOLD_MUTUAL_CA */
-	1, /* RAW_FILT_IIR_COEFF_SELF_CA */
-	1, /* RAW_FILT_IIR_THRESHOLD_SELF_CA */
-	1, /* RAW_FILT_IIR_COEFF_BALANCED_CA */
-	1, /* RAW_FILT_IIR_THRESHOLD_BALANCED_CA */
-	1, /* RAW_FILT_IIR_COEFF_BUTTONS_CA */
-	1, /* RAW_FILT_IIR_THRESHOLD_BUTTONS_CA */
-	2, /* Reserved538 */
-	12, /* Reserved540 */
-	1, /* BL_DELAY_MUT */
-	1, /* BL_DELAY_SELF */
-	1, /* BL_DELAY_BAL */
-	1, /* BL_DELAY_BTN */
-	1, /* BL_THR_MUT */
-	1, /* BL_THR_SELF */
-	1, /* BL_THR_BAL */
-	1, /* BL_THR_BTN_MUT */
-	1, /* BL_THR_BTN_SELF */
-	1, /* BL_MUT_SIG_THRESHOLD_CA */
-	1, /* BL_FILT_MUT */
-	1, /* BL_FILT_SELF */
-	1, /* BL_FILT_BAL */
-	1, /* BL_FILT_BTN_MUT */
-	1, /* BL_FILT_BTN_SELF */
-	1, /* CMF_THR_MUT */
-	1, /* CMF_THR_SELF */
-	1, /* CMF_THR_BAL */
-	1, /* CMF_THR_BTN_MUT */
-	1, /* CMF_THR_BTN_SELF */
-	4, /* Reserved572 */
-	4, /* H2OREJECTION_SIZE */
-	1, /* BL_H20_RJCT */
-	1, /* BL_H20_SNS_WIDTH */
-	2, /* Reserved582 */
-	4, /* CDC_CFG_SIZE */
-	4, /* TSS_CONTROL_MUT */
-	4, /* TSS_LENGTH_MUT */
-	4, /* TSS_TX_CONFIG_MUT */
-	4, /* TSS_TX_CONTROL_MUT */
-	4, /* TSS_SEQ_CONFIG1_MUT */
-	4, /* TSS_SEQ_CONFIG2_MUT */
-	4, /* TSS_SEQ_CONFIG3_MUT */
-	4, /* TSS_SEQ_CONFIG4_MUT */
-	4, /* TSS_SEQ_CONFIG5_MUT */
-	4, /* TSS_SEQ_CONFIG6_MUT */
-	4, /* TSS_SEQ_CONFIG7_MUT */
-	4, /* TSS_SEQ_CONFIG8_MUT */
-	4, /* TSS_EXT_CONFIG1_MUT */
-	4, /* TSS_EXT_CONFIG2_MUT */
-	4, /* TSS_EXT_INTERVAL_MUT */
-	4, /* TSS_INT_CONFIG1_MUT */
-	4, /* TSS_INT_CONFIG2_MUT */
-	4, /* TSS_INT_INTERVAL_MUT */
-	4, /* TSS_MCS_CONFIG_MUT */
-	4, /* TSS_RX_CONFIG_MUT */
-	4, /* Reserved668 */
-	4, /* TSS_CONTROL_SELF */
-	4, /* TSS_LENGTH_SELF */
-	4, /* TSS_TX_CONFIG_SELF */
-	4, /* TSS_TX_CONTROL_SELF */
-	4, /* TSS_SEQ_CONFIG1_SELF */
-	4, /* TSS_SEQ_CONFIG2_SELF */
-	4, /* TSS_SEQ_CONFIG3_SELF */
-	4, /* TSS_SEQ_CONFIG4_SELF */
-	4, /* TSS_SEQ_CONFIG5_SELF */
-	4, /* TSS_SEQ_CONFIG6_SELF */
-	4, /* TSS_SEQ_CONFIG7_SELF */
-	4, /* TSS_SEQ_CONFIG8_SELF */
-	4, /* TSS_EXT_CONFIG1_SELF */
-	4, /* TSS_EXT_CONFIG2_SELF */
-	4, /* TSS_EXT_INTERVAL_SELF */
-	4, /* TSS_INT_CONFIG1_SELF */
-	4, /* TSS_INT_CONFIG2_SELF */
-	4, /* TSS_INT_INTERVAL_SELF */
-	4, /* TSS_MCS_CONFIG_SELF */
-	4, /* TSS_RX_CONFIG_SELF */
-	4, /* Reserved752 */
-	4, /* TSS_CONTROL_BAL */
-	4, /* TSS_LENGTH_BAL */
-	4, /* TSS_TX_CONFIG_BAL */
-	4, /* TSS_TX_CONTROL_BAL */
-	4, /* TSS_SEQ_CONFIG1_BAL */
-	4, /* TSS_SEQ_CONFIG2_BAL */
-	4, /* TSS_SEQ_CONFIG3_BAL */
-	4, /* TSS_SEQ_CONFIG4_BAL */
-	4, /* TSS_SEQ_CONFIG5_BAL */
-	4, /* TSS_SEQ_CONFIG6_BAL */
-	4, /* TSS_SEQ_CONFIG7_BAL */
-	4, /* TSS_SEQ_CONFIG8_BAL */
-	4, /* TSS_EXT_CONFIG1_BAL */
-	4, /* TSS_EXT_CONFIG2_BAL */
-	4, /* TSS_EXT_INTERVAL_BAL */
-	4, /* TSS_INT_CONFIG1_BAL */
-	4, /* TSS_INT_CONFIG2_BAL */
-	4, /* TSS_INT_INTERVAL_BAL */
-	4, /* TSS_MCS_CONFIG_BAL */
-	4, /* TSS_RX_CONFIG_BAL */
-	4, /* TSS_CONTROL_BTN */
-	4, /* TSS_LENGTH_BTN_MUT */
-	4, /* TSS_TX_CONFIG_BTN */
-	4, /* TSS_TX_CONTROL_BTN */
-	4, /* TSS_SEQ_CONFIG1_BTN */
-	4, /* TSS_SEQ_CONFIG2_BTN */
-	4, /* TSS_SEQ_CONFIG3_BTN */
-	4, /* TSS_SEQ_CONFIG4_BTN */
-	4, /* TSS_SEQ_CONFIG5_BTN */
-	4, /* TSS_SEQ_CONFIG6_BTN */
-	4, /* TSS_SEQ_CONFIG7_BTN */
-	4, /* TSS_SEQ_CONFIG8_BTN */
-	4, /* TSS_EXT_CONFIG1_BTN */
-	4, /* TSS_EXT_CONFIG2_BTN */
-	4, /* TSS_EXT_INTERVAL_BTN */
-	4, /* TSS_INT_CONFIG1_BTN */
-	4, /* TSS_INT_CONFIG2_BTN */
-	4, /* TSS_INT_INTERVAL_BTN */
-	4, /* TSS_MCS_CONFIG_BTN */
-	4, /* TSS_RX_CONFIG_BTN */
-	4, /* TSS_LENGTH_BTN_SELF */
-	4, /* TSS_RX_VREF */
-	4, /* TSS_RX_LX_CONFIG */
-	4, /* TX_NUM */
-	4, /* RX_NUM */
-	4, /* SENS_NUM */
-	4, /* CROSS_NUM */
-	4, /* BUTTON_NUM */
-	4, /* SLOTS_MUT */
-	4, /* SLOTS_SELF_RX */
-	4, /* SLOTS_SELF_TX */
-	4, /* SLOTS_SELF */
-	4, /* SLOTS_BAL */
-	4, /* SCALE_MUT */
-	4, /* SCALE_SELF */
-	4, /* SCALE_BAL */
-	4, /* SCALE_BUTTON */
-	4, /* LX_MODE */
-	4, /* LX_SCALE */
-	4, /* ABSOLUTE_CR_CORRECTION_ENABLE */
-	4, /* SCANNING_MODE_MUTUAL */
-	4, /* SCANNING_MODE_BUTTON */
-	2, /* DETECT_CHARGER_THRESHOLD */
-	1, /* CA_LX_SCAN_MODE */
-	1, /* SUB_SLOT_SCAN */
-	1, /* NOISE_METRIC1_THRESHOLD */
-	1, /* NOISE_METRIC2_THRESHOLD */
-	1, /* NOISE_METRIC3_THRESHOLD */
-	1, /* AFH_DYNAMIC_THRSH_ENABLE */
-	1, /* ADC_CONFIG */
-	1, /* Reserved1013 */
-	1, /* TSS_LDO_PROG */
-	1, /* TX_PERIOD_DUMMY_SCAN */
-	1, /* SINGLE_ENDED_LISTEN_SCAN */
-	1, /* SPREAD_MTX */
-	90, /* Reserved1018 */
-	4, /* CALIBRATION_PARAM_SIZE */
-	4, /* Reserved1112 */
-	4, /* Reserved1116 */
-	4, /* Reserved1120 */
-	4, /* Reserved1124 */
-	4, /* GLOBAL_IDAC_LSB_MUTUAL */
-	4, /* GLOBAL_IDAC_LSB_SELF */
-	4, /* GLOBAL_IDAC_LSB_BALANCED */
-	4, /* GLOBAL_IDAC_LSB_BUTTON */
-	4, /* TARGET_LEVEL_MUTUAL */
-	4, /* TARGET_LEVEL_SELF */
-	4, /* TARGET_LEVEL_BALANCED */
-	4, /* TARGET_LEVEL_BUTTON */
-	4, /* GAIN_MUTUAL */
-	4, /* GAIN_SELF */
-	4, /* GAIN_BALANCED */
-	4, /* GAIN_BTN_MUTUAL */
-	4, /* GAIN_BTN_SELF */
-	4, /* Reserved1180 */
-	4, /* SPREADER_CFG_SIZE */
-	4, /* CLK_IMO_SPREAD */
-	24, /* Reserved1192 */
-	65, /* CDC_PIN_INDEX_TABLE */
-	3, /* Reserved1281 */
-	14, /* CDC_BALANCED_LX_TABLE */
-	6, /* Reserved1298 */
-	18, /* CDC_BALANCED_TX_PATTERNS */
-	2, /* Reserved1322 */
-	176, /* CDC_SLOT_TABLE */
-	32, /* Reserved1500 */
-	2, /* CONFIG_CRC */
-};
-
-/* Touchscreen Parameters Field Address*/
-static const uint8_t cyttsp4_param_addr[] = {
-/*	Address	Name	*/
-	0xDC, 0x00, /* CONFIG_DATA_SIZE */
-	0xDC, 0x02, /* CONFIG_DATA_MAX_SIZE */
-	0xDC, 0x04, /* SDK_CTRL_CFG_SIZE */
-	0xDC, 0x08, /* CONFIG_VER */
-	0xDC, 0x0A, /* PANELID_ENABLE */
-	0xDC, 0x0B, /* IMO_FREQ_MHZ */
-	0xDC, 0x0C, /* X_LEN_PHY */
-	0xDC, 0x0E, /* Y_LEN_PHY */
-	0xDC, 0x10, /* HST_MODE0 */
-	0xDC, 0x11, /* ACT_DIST0 */
-	0xDC, 0x12, /* SCAN_TYP0 */
-	0xDC, 0x13, /* ACT_INTRVL0 */
-	0xDC, 0x14, /* ACT_LFT_INTRVL0 */
-	0xDC, 0x15, /* Reserved21 */
-	0xDC, 0x16, /* LP_INTRVL0 */
-	0xDC, 0x18, /* TCH_TMOUT0 */
-	0xDC, 0x1A, /* PWR_CFG */
-	0xDC, 0x1B, /* Reserved27 */
-	0xDC, 0x1C, /* INT_PULSE_DATA */
-	0xDC, 0x1D, /* OPMODE_CFG */
-	0xDC, 0x1E, /* HANDSHAKE_TIMEOUT */
-	0xDC, 0x20, /* ESD_COUNTER_CFG */
-	0xDC, 0x22, /* TIMER_CAL_INTERVAL */
-	0xDC, 0x23, /* Reserved35 */
-	0xDC, 0x24, /* RP2P_MIN */
-	0xDC, 0x26, /* ILEAK_MAX */
-	0xDC, 0x28, /* RFB_P2P */
-	0xDC, 0x2A, /* RFB_EXT */
-	0xDC, 0x2C, /* IDACOPEN_LOW */
-	0xDC, 0x2D, /* IDACOPEN_HIGH */
-	0xDC, 0x2E, /* IDACOPEN_BUTTON_LOW */
-	0xDC, 0x2F, /* IDACOPEN_BUTTON_HIGH */
-	0xDC, 0x30, /* GIDAC_OPEN */
-	0xDC, 0x31, /* GAIN_OPEN */
-	0xDC, 0x32, /* GIDAC_BUTTON_OPEN */
-	0xDC, 0x33, /* GAIN_BUTTON_OPEN */
-	0xDC, 0x34, /* POST_CFG */
-	0xDC, 0x35, /* GESTURE_CFG */
-	0xDC, 0x36, /* GEST_EN0 */
-	0xDC, 0x37, /* GEST_EN1 */
-	0xDC, 0x38, /* GEST_EN2 */
-	0xDC, 0x39, /* GEST_EN3 */
-	0xDC, 0x3A, /* GEST_EN4 */
-	0xDC, 0x3B, /* GEST_EN5 */
-	0xDC, 0x3C, /* GEST_EN6 */
-	0xDC, 0x3D, /* GEST_EN7 */
-	0xDC, 0x3E, /* GEST_EN8 */
-	0xDC, 0x3F, /* GEST_EN9 */
-	0xDC, 0x40, /* GEST_EN10 */
-	0xDC, 0x41, /* GEST_EN11 */
-	0xDC, 0x42, /* GEST_EN12 */
-	0xDC, 0x43, /* GEST_EN13 */
-	0xDC, 0x44, /* GEST_EN14 */
-	0xDC, 0x45, /* GEST_EN15 */
-	0xDC, 0x46, /* GEST_EN16 */
-	0xDC, 0x47, /* GEST_EN17 */
-	0xDC, 0x48, /* GEST_EN18 */
-	0xDC, 0x49, /* GEST_EN19 */
-	0xDC, 0x4A, /* GEST_EN20 */
-	0xDC, 0x4B, /* GEST_EN21 */
-	0xDC, 0x4C, /* GEST_EN22 */
-	0xDC, 0x4D, /* GEST_EN23 */
-	0xDC, 0x4E, /* GEST_EN24 */
-	0xDC, 0x4F, /* GEST_EN25 */
-	0xDC, 0x50, /* GEST_EN26 */
-	0xDC, 0x51, /* GEST_EN27 */
-	0xDC, 0x52, /* GEST_EN28 */
-	0xDC, 0x53, /* GEST_EN29 */
-	0xDC, 0x54, /* GEST_EN30 */
-	0xDC, 0x55, /* GEST_EN31 */
-	0xDC, 0x56, /* ACT_DIST2 */
-	0xDC, 0x57, /* EXTERN_SYNC */
-	0xDC, 0x58, /* Reserved88 */
-	0xDC, 0x60, /* GRIP_CFG_SIZE */
-	0xDC, 0x64, /* GRIP_XEDG_A */
-	0xDC, 0x66, /* GRIP_XEDG_B */
-	0xDC, 0x68, /* GRIP_XEXC_A */
-	0xDC, 0x6A, /* GRIP_XEXC_B */
-	0xDC, 0x6C, /* GRIP_YEDG_A */
-	0xDC, 0x6E, /* GRIP_YEDG_B */
-	0xDC, 0x70, /* GRIP_YEXC_A */
-	0xDC, 0x72, /* GRIP_YEXC_B */
-	0xDC, 0x74, /* GRIP_FIRST_EXC */
-	0xDC, 0x75, /* GRIP_EXC_EDGE_ORIGIN */
-	0xDC, 0x76, /* Reserved118 */
-	0xDC, 0x78, /* TRUETOUCH_CFG_SIZE */
-	0xDC, 0x7C, /* MAX_SELF_SCAN_INTERVAL */
-	0xDC, 0x80, /* MAX_MUTUAL_SCAN_INTERVAL */
-	0xDC, 0x84, /* MAX_BALANCED_SCAN_INTERVAL */
-	0xDC, 0x88, /* SELF_Z_THRSH */
-	0xDC, 0x8C, /* SELF_Z_MODE */
-	0xDC, 0x90, /* SMART_SCAN_ENABLE */
-	0xDC, 0x94, /* T_COMP_ENABLE */
-	0xDC, 0x98, /* T_COMP_INTERVAL */
-	0xDC, 0x9C, /* T_COMP_RECAL_MUTUAL_SENSOR_LIMIT */
-	0xDC, 0xA0, /* T_COMP_RECAL_MUTUAL_HIGH */
-	0xDC, 0xA4, /* T_COMP_RECAL_MUTUAL_LOW */
-	0xDC, 0xA8, /* T_COMP_RECAL_SELF_SENSOR_LIMIT */
-	0xDC, 0xAC, /* T_COMP_RECAL_SELF_HIGH */
-	0xDC, 0xB0, /* T_COMP_RECAL_SELF_LOW */
-	0xDC, 0xB4, /* CHARGER_ARMOR_ENABLE */
-	0xDC, 0xB8, /* AFH_ENABLE */
-	0xDC, 0xBC, /* AFH_LISTENING_SCAN_COUNT */
-	0xDC, 0xC0, /* AFH_LISTEN_SCAN_CYCLE_REPEATS */
-	0xDC, 0xC4, /* CA_BLOCK_NOISE_THRESHOLD */
-	0xDC, 0xC8, /* CA_BLOCK_NOISE_HYSTERESIS */
-	0xDC, 0xCC, /* CA_DEFAULT_REVERT_TIME */
-	0xDC, 0xD0, /* CA_SMART_H2O_REJECT */
-	0xDC, 0xD2, /* CA_HOST_CONTROLLED_CHARGER */
-	0xDC, 0xD4, /* T_COMP_BUTTON_MUTUAL_HIGH */
-	0xDC, 0xD6, /* T_COMP_BUTTON_MUTUAL_LOW */
-	0xDC, 0xD8, /* T_COMP_BUTTON_SELF_HIGH */
-	0xDC, 0xDA, /* T_COMP_BUTTON_SELF_LOW */
-	0xDC, 0xDC, /* CA_NUM_SUB_CONV_BASE_SELF */
-	0xDC, 0xE0, /* CA_ALT_NUM_SUB_CONV_SELF */
-	0xDC, 0xE4, /* Reserved228 */
-	0xDC, 0xF0, /* CA_ALT_NUM_SUB_CONV_MUTUAL */
-	0xDC, 0xF1, /* CA_ALT_ACQUISITION_FLAGS */
-	0xDC, 0xF2, /* AFH_ALT_TX_PERIOD1 */
-	0xDC, 0xF3, /* AFH_ALT_TX_PERIOD1_MUTUAL_SCALE_FACTOR */
-	0xDC, 0xF4, /* AFH_ALT_TX_PERIOD1_MUTUAL_TX_VOLTAGE */
-	0xDC, 0xF5, /* AFH_ALT_TX_PULSES1 */
-	0xDC, 0xF6, /* AFH_ALT_TX_PERIOD2 */
-	0xDC, 0xF7, /* AFH_ALT_TX_PERIOD2_MUTUAL_SCALE_FACTOR */
-	0xDC, 0xF8, /* AFH_ALT_TX_PERIOD2_MUTUAL_TX_VOLTAGE */
-	0xDC, 0xF9, /* AFH_ALT_TX_PULSES2 */
-	0xDC, 0xFA, /* Reserved250 */
-	0xDC, 0xFC, /* GEST_CFG_SIZE */
-	0xDC, 0xFD, /* PAN_ACT_DSTX */
-	0xDC, 0xFE, /* PAN_ACT_DSTY */
-	0xDC, 0xFF, /* ZOOM_ACT_DSTX */
-	0xDD, 0x00, /* ZOOM_ACT_DSTY */
-	0xDD, 0x01, /* FLICK_ACT_DISTX */
-	0xDD, 0x02, /* FLICK_ACT_DISTY */
-	0xDD, 0x03, /* FLICK_TIME */
-	0xDD, 0x04, /* ST_DEBOUNCE */
-	0xDD, 0x05, /* MT_DEBOUNCE_PAN */
-	0xDD, 0x06, /* MT_DEBOUNCE_ZOOM */
-	0xDD, 0x07, /* MT_DEBOUNCE_P2Z */
-	0xDD, 0x08, /* ROT_DEBOUNCE */
-	0xDD, 0x09, /* COMPL_DEBOUNCE */
-	0xDD, 0x0A, /* MT_TIMEOUT */
-	0xDD, 0x0C, /* ST_DBLCLK_RMAX */
-	0xDD, 0x0D, /* ST_CLICK_DISTX */
-	0xDD, 0x0E, /* ST_CLICK_DISTY */
-	0xDD, 0x0F, /* Reserved271 */
-	0xDD, 0x10, /* MT_CLICK_TMAX */
-	0xDD, 0x12, /* MT_CLICK_TMIN */
-	0xDD, 0x14, /* ST_CLICK_TMAX */
-	0xDD, 0x16, /* ST_CLICK_TMIN */
-	0xDD, 0x18, /* ST_DBLCLK_TMAX */
-	0xDD, 0x1A, /* ST_DBLCLK_TMIN */
-	0xDD, 0x1C, /* GESTURE_GROUP_MASK */
-	0xDD, 0x1D, /* GESTURE_GROUP1_START */
-	0xDD, 0x1E, /* GESTURE_GROUP1_END */
-	0xDD, 0x1F, /* GESTURE_GROUP2_START */
-	0xDD, 0x20, /* GESTURE_GROUP2_END */
-	0xDD, 0x21, /* GESTURE_GROUP3_START */
-	0xDD, 0x22, /* GESTURE_GROUP3_END */
-	0xDD, 0x23, /* GESTURE_GROUP4_START */
-	0xDD, 0x24, /* GESTURE_GROUP4_END */
-	0xDD, 0x25, /* Reserved293 */
-	0xDD, 0x28, /* XY_FILT_CFG_SIZE */
-	0xDD, 0x2C, /* XY_FILTER_MASK */
-	0xDD, 0x30, /* XY_FILT_IIR_COEFF */
-	0xDD, 0x34, /* XY_FILT_Z_IIR_COEFF */
-	0xDD, 0x38, /* XY_FILT_XY_FAST_THR */
-	0xDD, 0x39, /* XY_FILT_XY_SLOW_THR */
-	0xDD, 0x3A, /* XY_FILT_IIR_FAST_COEFF */
-	0xDD, 0x3B, /* Reserved315 */
-	0xDD, 0x3C, /* XY_FILTER_MASK_CA */
-	0xDD, 0x40, /* XY_FILT_IIR_COEFF_CA */
-	0xDD, 0x44, /* XY_FILT_Z_IIR_COEFF_CA */
-	0xDD, 0x48, /* XY_FILT_XY_FAST_THR_CA */
-	0xDD, 0x49, /* XY_FILT_XY_SLOW_THR_CA */
-	0xDD, 0x4A, /* XY_FILT_IIR_FAST_COEFF_CA */
-	0xDD, 0x4B, /* Reserved331 */
-	0xDD, 0x4C, /* XY_FILT_ADAPTIVE_IIR_FILTER */
-	0xDD, 0x4D, /* XY_FILT_ADAPTIVE_IIR_FILTER_DISTANCE */
-	0xDD, 0x4E, /* XY_FILT_TOUCH_SIZE_IIR_COEFF */
-	0xDD, 0x4F, /* XY_FILT_TOUCH_SIZE_HYST */
-	0xDD, 0x50, /* XY_FILT_TOUCH_ORIENTATION_IIR_COEFF */
-	0xDD, 0x51, /* XY_FILT_TOUCH_ORIENTATION_HYST */
-	0xDD, 0x52, /* XY_FILT_TOUCH_SCALLOPING_ENABLE */
-	0xDD, 0x53, /* Reserved339 */
-	0xDD, 0x5C, /* FINGER_ID_CFG_SIZE */
-	0xDD, 0x60, /* Reserved352 */
-	0xDD, 0x64, /* FINGER_ID_MAX_FINGER_VELOCITY2 */
-	0xDD, 0x68, /* LIFTOFF_DEBOUNCE */
-	0xDD, 0x69, /* Reserved361 */
-	0xDD, 0x70, /* CENTROID_SH_CFG_SIZE */
-	0xDD, 0x74, /* STYLUS_THRSH */
-	0xDD, 0x78, /* STYLUS_HYST */
-	0xDD, 0x7C, /* S2F_THRESHOLD */
-	0xDD, 0x80, /* HOVER_THRSH */
-	0xDD, 0x84, /* HOVER_HYST */
-	0xDD, 0x88, /* Reserved392 */
-	0xDD, 0x90, /* ID_COORDS_CFG_SIZE */
-	0xDD, 0x94, /* LRG_OBJ_CFG */
-	0xDD, 0x95, /* MAX_FAT_FINGER_SIZE */
-	0xDD, 0x96, /* MIN_FAT_FINGER_SIZE */
-	0xDD, 0x97, /* FINGER_THRESH_MUTUAL */
-	0xDD, 0x98, /* FINGER_THRESH_SELF */
-	0xDD, 0x9A, /* INNER_EDGE_GAIN */
-	0xDD, 0x9B, /* OUTER_EDGE_GAIN */
-	0xDD, 0x9C, /* X_RESOLUTION */
-	0xDD, 0xA0, /* Y_RESOLUTION */
-	0xDD, 0xA4, /* SENSOR_ASSIGNMENT */
-	0xDD, 0xA8, /* Z_SCALING */
-	0xDD, 0xAC, /* RX_LINE_FILTER */
-	0xDD, 0xAD, /* BYPASS_THRESHOLD_GAIN */
-	0xDD, 0xAE, /* BYPASS_THRESHOLD_EDGE_GAIN */
-	0xDD, 0xAF, /* FINGER_THR_MUT_HYST */
-	0xDD, 0xB0, /* MAX_FAT_FINGER_SIZE_HYST */
-	0xDD, 0xB1, /* MIN_FAT_FINGER_SIZE_HYST */
-	0xDD, 0xB2, /* MULTI_TOUCH_DEBOUNCE */
-	0xDD, 0xB3, /* CA_FINGER_THRESHOLD_MUTUAL */
-	0xDD, 0xB4, /* FAT_FINGER_THRESHOLD_COEFF */
-	0xDD, 0xB5, /* SIZE_ORIENTATION_ENABLE */
-	0xDD, 0xB6, /* MAJOR_AXIS_OFFSET */
-	0xDD, 0xB7, /* MAJOR_AXIS_SCALE */
-	0xDD, 0xB8, /* MINOR_AXIS_OFFSET */
-	0xDD, 0xB9, /* MINOR_AXIS_SCALE */
-	0xDD, 0xBA, /* RX_LINE_FILTER_DEBOUNCE */
-	0xDD, 0xBB, /* CLIPPING_X_LOW */
-	0xDD, 0xBC, /* CLIPPING_X_HIGH */
-	0xDD, 0xBD, /* CLIPPING_Y_LOW */
-	0xDD, 0xBE, /* CLIPPING_Y_HIGH */
-	0xDD, 0xBF, /* COEF_EDGE_ATTRACTION */
-	0xDD, 0xC0, /* WIDTH_CORNER_DIAG1 */
-	0xDD, 0xC2, /* WIDTH_CORNER_DIAG2 */
-	0xDD, 0xC4, /* WIDTH_CORNER_DIAG3 */
-	0xDD, 0xC6, /* WIDTH_CORNER_DIAG4 */
-	0xDD, 0xC8, /* WIDTH_CORNER_DIAG5 */
-	0xDD, 0xCA, /* WIDTH_CORNER_DIAG6 */
-	0xDD, 0xCC, /* WIDTH_CORNER_DIAG7 */
-	0xDD, 0xCE, /* WIDTH_CORNER_DIAG8 */
-	0xDD, 0xD0, /* WIDTH_CORNER_DIAG9 */
-	0xDD, 0xD2, /* WIDTH_CORNER_DIAG10 */
-	0xDD, 0xD4, /* WIDTH_CORNER_DIAG11 */
-	0xDD, 0xD6, /* WIDTH_CORNER_PERP1 */
-	0xDD, 0xD8, /* WIDTH_CORNER_PERP2 */
-	0xDD, 0xDA, /* WIDTH_CORNER_PERP3 */
-	0xDD, 0xDC, /* WIDTH_CORNER_PERP4 */
-	0xDD, 0xDE, /* RX_LINE_FILTER_THRESHOLD */
-	0xDD, 0xDF, /* NOISE_REJECTION_3x3_FILTER_SCALE */
-	0xDD, 0xE0, /* NOISE_REJECTION_3x3_FILTER_SCALE_CA */
-	0xDD, 0xE1, /* DIRECT_XY_ENABLE */
-	0xDD, 0xE2, /* Reserved482 */
-	0xDD, 0xE4, /* BTN_CFG_SIZE */
-	0xDD, 0xE8, /* BTN_THRSH_MUT_0 */
-	0xDD, 0xEA, /* BTN_THRSH_MUT_1 */
-	0xDD, 0xEC, /* BTN_THRSH_MUT_2 */
-	0xDD, 0xEE, /* BTN_THRSH_MUT_3 */
-	0xDD, 0xF0, /* BTN_HYST_MUT */
-	0xDD, 0xF1, /* Reserved497 */
-	0xDD, 0xF2, /* Reserved498 */
-	0xDD, 0xF3, /* Reserved499 */
-	0xDD, 0xF4, /* BTN_THRSH_SELF */
-	0xDD, 0xF6, /* BTN_THRSH_SELF_1 */
-	0xDD, 0xF8, /* BTN_THRSH_SELF_2 */
-	0xDD, 0xFA, /* BTN_THRSH_SELF_3 */
-	0xDD, 0xFC, /* BTN_HYST_SELF */
-	0xDD, 0xFD, /* Reserved509 */
-	0xDD, 0xFE, /* Reserved510 */
-	0xDD, 0xFF, /* Reserved511 */
-	0xDE, 0x00, /* RAW_PROC_CFG_SIZE */
-	0xDE, 0x04, /* RAW_FILTER_MASK */
-	0xDE, 0x06, /* RAW_FILT_IIR_COEFF_MUTUAL */
-	0xDE, 0x07, /* RAW_FILT_IIR_THRESHOLD_MUTUAL */
-	0xDE, 0x08, /* RAW_FILT_IIR_COEFF_SELF */
-	0xDE, 0x09, /* RAW_FILT_IIR_THRESHOLD_SELF */
-	0xDE, 0x0A, /* RAW_FILT_IIR_COEFF_BALANCED */
-	0xDE, 0x0B, /* RAW_FILT_IIR_THRESHOLD_BALANCED */
-	0xDE, 0x0C, /* RAW_FILT_IIR_COEFF_BUTTONS */
-	0xDE, 0x0D, /* RAW_FILT_IIR_THRESHOLD_BUTTONS */
-	0xDE, 0x0E, /* Reserved526 */
-	0xDE, 0x10, /* RAW_FILTER_MASK_CA */
-	0xDE, 0x12, /* RAW_FILT_IIR_COEFF_MUTUAL_CA */
-	0xDE, 0x13, /* RAW_FILT_IIR_THRESHOLD_MUTUAL_CA */
-	0xDE, 0x14, /* RAW_FILT_IIR_COEFF_SELF_CA */
-	0xDE, 0x15, /* RAW_FILT_IIR_THRESHOLD_SELF_CA */
-	0xDE, 0x16, /* RAW_FILT_IIR_COEFF_BALANCED_CA */
-	0xDE, 0x17, /* RAW_FILT_IIR_THRESHOLD_BALANCED_CA */
-	0xDE, 0x18, /* RAW_FILT_IIR_COEFF_BUTTONS_CA */
-	0xDE, 0x19, /* RAW_FILT_IIR_THRESHOLD_BUTTONS_CA */
-	0xDE, 0x1A, /* Reserved538 */
-	0xDE, 0x1C, /* Reserved540 */
-	0xDE, 0x28, /* BL_DELAY_MUT */
-	0xDE, 0x29, /* BL_DELAY_SELF */
-	0xDE, 0x2A, /* BL_DELAY_BAL */
-	0xDE, 0x2B, /* BL_DELAY_BTN */
-	0xDE, 0x2C, /* BL_THR_MUT */
-	0xDE, 0x2D, /* BL_THR_SELF */
-	0xDE, 0x2E, /* BL_THR_BAL */
-	0xDE, 0x2F, /* BL_THR_BTN_MUT */
-	0xDE, 0x30, /* BL_THR_BTN_SELF */
-	0xDE, 0x31, /* BL_MUT_SIG_THRESHOLD_CA */
-	0xDE, 0x32, /* BL_FILT_MUT */
-	0xDE, 0x33, /* BL_FILT_SELF */
-	0xDE, 0x34, /* BL_FILT_BAL */
-	0xDE, 0x35, /* BL_FILT_BTN_MUT */
-	0xDE, 0x36, /* BL_FILT_BTN_SELF */
-	0xDE, 0x37, /* CMF_THR_MUT */
-	0xDE, 0x38, /* CMF_THR_SELF */
-	0xDE, 0x39, /* CMF_THR_BAL */
-	0xDE, 0x3A, /* CMF_THR_BTN_MUT */
-	0xDE, 0x3B, /* CMF_THR_BTN_SELF */
-	0xDE, 0x3C, /* Reserved572 */
-	0xDE, 0x40, /* H2OREJECTION_SIZE */
-	0xDE, 0x44, /* BL_H20_RJCT */
-	0xDE, 0x45, /* BL_H20_SNS_WIDTH */
-	0xDE, 0x46, /* Reserved582 */
-	0xDE, 0x48, /* CDC_CFG_SIZE */
-	0xDE, 0x4C, /* TSS_CONTROL_MUT */
-	0xDE, 0x50, /* TSS_LENGTH_MUT */
-	0xDE, 0x54, /* TSS_TX_CONFIG_MUT */
-	0xDE, 0x58, /* TSS_TX_CONTROL_MUT */
-	0xDE, 0x5C, /* TSS_SEQ_CONFIG1_MUT */
-	0xDE, 0x60, /* TSS_SEQ_CONFIG2_MUT */
-	0xDE, 0x64, /* TSS_SEQ_CONFIG3_MUT */
-	0xDE, 0x68, /* TSS_SEQ_CONFIG4_MUT */
-	0xDE, 0x6C, /* TSS_SEQ_CONFIG5_MUT */
-	0xDE, 0x70, /* TSS_SEQ_CONFIG6_MUT */
-	0xDE, 0x74, /* TSS_SEQ_CONFIG7_MUT */
-	0xDE, 0x78, /* TSS_SEQ_CONFIG8_MUT */
-	0xDE, 0x7C, /* TSS_EXT_CONFIG1_MUT */
-	0xDE, 0x80, /* TSS_EXT_CONFIG2_MUT */
-	0xDE, 0x84, /* TSS_EXT_INTERVAL_MUT */
-	0xDE, 0x88, /* TSS_INT_CONFIG1_MUT */
-	0xDE, 0x8C, /* TSS_INT_CONFIG2_MUT */
-	0xDE, 0x90, /* TSS_INT_INTERVAL_MUT */
-	0xDE, 0x94, /* TSS_MCS_CONFIG_MUT */
-	0xDE, 0x98, /* TSS_RX_CONFIG_MUT */
-	0xDE, 0x9C, /* Reserved668 */
-	0xDE, 0xA0, /* TSS_CONTROL_SELF */
-	0xDE, 0xA4, /* TSS_LENGTH_SELF */
-	0xDE, 0xA8, /* TSS_TX_CONFIG_SELF */
-	0xDE, 0xAC, /* TSS_TX_CONTROL_SELF */
-	0xDE, 0xB0, /* TSS_SEQ_CONFIG1_SELF */
-	0xDE, 0xB4, /* TSS_SEQ_CONFIG2_SELF */
-	0xDE, 0xB8, /* TSS_SEQ_CONFIG3_SELF */
-	0xDE, 0xBC, /* TSS_SEQ_CONFIG4_SELF */
-	0xDE, 0xC0, /* TSS_SEQ_CONFIG5_SELF */
-	0xDE, 0xC4, /* TSS_SEQ_CONFIG6_SELF */
-	0xDE, 0xC8, /* TSS_SEQ_CONFIG7_SELF */
-	0xDE, 0xCC, /* TSS_SEQ_CONFIG8_SELF */
-	0xDE, 0xD0, /* TSS_EXT_CONFIG1_SELF */
-	0xDE, 0xD4, /* TSS_EXT_CONFIG2_SELF */
-	0xDE, 0xD8, /* TSS_EXT_INTERVAL_SELF */
-	0xDE, 0xDC, /* TSS_INT_CONFIG1_SELF */
-	0xDE, 0xE0, /* TSS_INT_CONFIG2_SELF */
-	0xDE, 0xE4, /* TSS_INT_INTERVAL_SELF */
-	0xDE, 0xE8, /* TSS_MCS_CONFIG_SELF */
-	0xDE, 0xEC, /* TSS_RX_CONFIG_SELF */
-	0xDE, 0xF0, /* Reserved752 */
-	0xDE, 0xF4, /* TSS_CONTROL_BAL */
-	0xDE, 0xF8, /* TSS_LENGTH_BAL */
-	0xDE, 0xFC, /* TSS_TX_CONFIG_BAL */
-	0xDF, 0x00, /* TSS_TX_CONTROL_BAL */
-	0xDF, 0x04, /* TSS_SEQ_CONFIG1_BAL */
-	0xDF, 0x08, /* TSS_SEQ_CONFIG2_BAL */
-	0xDF, 0x0C, /* TSS_SEQ_CONFIG3_BAL */
-	0xDF, 0x10, /* TSS_SEQ_CONFIG4_BAL */
-	0xDF, 0x14, /* TSS_SEQ_CONFIG5_BAL */
-	0xDF, 0x18, /* TSS_SEQ_CONFIG6_BAL */
-	0xDF, 0x1C, /* TSS_SEQ_CONFIG7_BAL */
-	0xDF, 0x20, /* TSS_SEQ_CONFIG8_BAL */
-	0xDF, 0x24, /* TSS_EXT_CONFIG1_BAL */
-	0xDF, 0x28, /* TSS_EXT_CONFIG2_BAL */
-	0xDF, 0x2C, /* TSS_EXT_INTERVAL_BAL */
-	0xDF, 0x30, /* TSS_INT_CONFIG1_BAL */
-	0xDF, 0x34, /* TSS_INT_CONFIG2_BAL */
-	0xDF, 0x38, /* TSS_INT_INTERVAL_BAL */
-	0xDF, 0x3C, /* TSS_MCS_CONFIG_BAL */
-	0xDF, 0x40, /* TSS_RX_CONFIG_BAL */
-	0xDF, 0x44, /* TSS_CONTROL_BTN */
-	0xDF, 0x48, /* TSS_LENGTH_BTN_MUT */
-	0xDF, 0x4C, /* TSS_TX_CONFIG_BTN */
-	0xDF, 0x50, /* TSS_TX_CONTROL_BTN */
-	0xDF, 0x54, /* TSS_SEQ_CONFIG1_BTN */
-	0xDF, 0x58, /* TSS_SEQ_CONFIG2_BTN */
-	0xDF, 0x5C, /* TSS_SEQ_CONFIG3_BTN */
-	0xDF, 0x60, /* TSS_SEQ_CONFIG4_BTN */
-	0xDF, 0x64, /* TSS_SEQ_CONFIG5_BTN */
-	0xDF, 0x68, /* TSS_SEQ_CONFIG6_BTN */
-	0xDF, 0x6C, /* TSS_SEQ_CONFIG7_BTN */
-	0xDF, 0x70, /* TSS_SEQ_CONFIG8_BTN */
-	0xDF, 0x74, /* TSS_EXT_CONFIG1_BTN */
-	0xDF, 0x78, /* TSS_EXT_CONFIG2_BTN */
-	0xDF, 0x7C, /* TSS_EXT_INTERVAL_BTN */
-	0xDF, 0x80, /* TSS_INT_CONFIG1_BTN */
-	0xDF, 0x84, /* TSS_INT_CONFIG2_BTN */
-	0xDF, 0x88, /* TSS_INT_INTERVAL_BTN */
-	0xDF, 0x8C, /* TSS_MCS_CONFIG_BTN */
-	0xDF, 0x90, /* TSS_RX_CONFIG_BTN */
-	0xDF, 0x94, /* TSS_LENGTH_BTN_SELF */
-	0xDF, 0x98, /* TSS_RX_VREF */
-	0xDF, 0x9C, /* TSS_RX_LX_CONFIG */
-	0xDF, 0xA0, /* TX_NUM */
-	0xDF, 0xA4, /* RX_NUM */
-	0xDF, 0xA8, /* SENS_NUM */
-	0xDF, 0xAC, /* CROSS_NUM */
-	0xDF, 0xB0, /* BUTTON_NUM */
-	0xDF, 0xB4, /* SLOTS_MUT */
-	0xDF, 0xB8, /* SLOTS_SELF_RX */
-	0xDF, 0xBC, /* SLOTS_SELF_TX */
-	0xDF, 0xC0, /* SLOTS_SELF */
-	0xDF, 0xC4, /* SLOTS_BAL */
-	0xDF, 0xC8, /* SCALE_MUT */
-	0xDF, 0xCC, /* SCALE_SELF */
-	0xDF, 0xD0, /* SCALE_BAL */
-	0xDF, 0xD4, /* SCALE_BUTTON */
-	0xDF, 0xD8, /* LX_MODE */
-	0xDF, 0xDC, /* LX_SCALE */
-	0xDF, 0xE0, /* ABSOLUTE_CR_CORRECTION_ENABLE */
-	0xDF, 0xE4, /* SCANNING_MODE_MUTUAL */
-	0xDF, 0xE8, /* SCANNING_MODE_BUTTON */
-	0xDF, 0xEC, /* DETECT_CHARGER_THRESHOLD */
-	0xDF, 0xEE, /* CA_LX_SCAN_MODE */
-	0xDF, 0xEF, /* SUB_SLOT_SCAN */
-	0xDF, 0xF0, /* NOISE_METRIC1_THRESHOLD */
-	0xDF, 0xF1, /* NOISE_METRIC2_THRESHOLD */
-	0xDF, 0xF2, /* NOISE_METRIC3_THRESHOLD */
-	0xDF, 0xF3, /* AFH_DYNAMIC_THRSH_ENABLE */
-	0xDF, 0xF4, /* ADC_CONFIG */
-	0xDF, 0xF5, /* Reserved1013 */
-	0xDF, 0xF6, /* TSS_LDO_PROG */
-	0xDF, 0xF7, /* TX_PERIOD_DUMMY_SCAN */
-	0xDF, 0xF8, /* SINGLE_ENDED_LISTEN_SCAN */
-	0xDF, 0xF9, /* SPREAD_MTX */
-	0xDF, 0xFA, /* Reserved1018 */
-	0xE0, 0x54, /* CALIBRATION_PARAM_SIZE */
-	0xE0, 0x58, /* Reserved1112 */
-	0xE0, 0x5C, /* Reserved1116 */
-	0xE0, 0x60, /* Reserved1120 */
-	0xE0, 0x64, /* Reserved1124 */
-	0xE0, 0x68, /* GLOBAL_IDAC_LSB_MUTUAL */
-	0xE0, 0x6C, /* GLOBAL_IDAC_LSB_SELF */
-	0xE0, 0x70, /* GLOBAL_IDAC_LSB_BALANCED */
-	0xE0, 0x74, /* GLOBAL_IDAC_LSB_BUTTON */
-	0xE0, 0x78, /* TARGET_LEVEL_MUTUAL */
-	0xE0, 0x7C, /* TARGET_LEVEL_SELF */
-	0xE0, 0x80, /* TARGET_LEVEL_BALANCED */
-	0xE0, 0x84, /* TARGET_LEVEL_BUTTON */
-	0xE0, 0x88, /* GAIN_MUTUAL */
-	0xE0, 0x8C, /* GAIN_SELF */
-	0xE0, 0x90, /* GAIN_BALANCED */
-	0xE0, 0x94, /* GAIN_BTN_MUTUAL */
-	0xE0, 0x98, /* GAIN_BTN_SELF */
-	0xE0, 0x9C, /* Reserved1180 */
-	0xE0, 0xA0, /* SPREADER_CFG_SIZE */
-	0xE0, 0xA4, /* CLK_IMO_SPREAD */
-	0xE0, 0xA8, /* Reserved1192 */
-	0xE0, 0xC0, /* CDC_PIN_INDEX_TABLE */
-	0xE1, 0x01, /* Reserved1281 */
-	0xE1, 0x04, /* CDC_BALANCED_LX_TABLE */
-	0xE1, 0x12, /* Reserved1298 */
-	0xE1, 0x18, /* CDC_BALANCED_TX_PATTERNS */
-	0xE1, 0x2A, /* Reserved1322 */
-	0xE1, 0x2C, /* CDC_SLOT_TABLE */
-	0xE1, 0xDC, /* Reserved1500 */
-	0xE1, 0xFC, /* CONFIG_CRC */
-};
-
diff -Naur ./arch/arm/mach-exynos/dev-slp.c ../../HK_JB/Kernel/arch/arm/mach-exynos/dev-slp.c
--- ./arch/arm/mach-exynos/dev-slp.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/dev-slp.c	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,178 @@
+/* arch/arm/mach-exynos/dev-slp.c
+ *
+ * Copyright (c) 2012 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com/
+ *	MyungJoo Ham <myungjoo.ham@samsung.com>
+ *
+ * Wrapper functions for legacy/obsolete kernel hacks to get QoS.
+ * Supported hacks:
+ * - exynos4_busfreq_lock/exynso4_busfreq_lock_free from busfreq
+ * - dev_lock/dev_unlock from busfreq_opp with dev.c
+ * Please note that PM QoS is the standard method to address QoS issues.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/slab.h>
+#include <linux/err.h>
+#include <linux/device.h>
+#include <linux/list.h>
+#include <linux/pm_qos_params.h>
+#include <mach/cpufreq.h>
+#include <mach/dev.h>
+
+static struct pm_qos_request_list qos_wrapper[DVFS_LOCK_ID_END];
+
+/* Wrappers for obsolete legacy kernel hack (busfreq_lock/lock_free) */
+int exynos4_busfreq_lock(unsigned int nId, enum busfreq_level_request lvl)
+{
+	s32 qos_value;
+
+	if (WARN(nId >= DVFS_LOCK_ID_END, "incorrect nId."))
+		return -EINVAL;
+	if (WARN(lvl >= BUS_LEVEL_END, "incorrect level."))
+		return -EINVAL;
+
+	switch (lvl) {
+	case BUS_L0:
+		qos_value = 400266;
+		break;
+	case BUS_L1:
+		qos_value = 400200;
+		break;
+	case BUS_L2:
+		qos_value = 267200;
+		break;
+	case BUS_L3:
+		qos_value = 267160;
+		break;
+	case BUS_L4:
+		qos_value = 160160;
+		break;
+	case BUS_L5:
+		qos_value = 133133;
+		break;
+	case BUS_L6:
+		qos_value = 100100;
+		break;
+	default:
+		qos_value = 0;
+	}
+
+	if (qos_wrapper[nId].pm_qos_class == 0) {
+		pm_qos_add_request(&qos_wrapper[nId],
+				   PM_QOS_BUS_DMA_THROUGHPUT, qos_value);
+	} else {
+		pm_qos_update_request(&qos_wrapper[nId], qos_value);
+	}
+
+	return 0;
+}
+void exynos4_busfreq_lock_free(unsigned int nId)
+{
+	if (WARN(nId >= DVFS_LOCK_ID_END, "incorrect nId."))
+		return;
+
+	if (qos_wrapper[nId].pm_qos_class)
+		pm_qos_update_request(&qos_wrapper[nId],
+				      PM_QOS_BUS_DMA_THROUGHPUT_DEFAULT_VALUE);
+}
+
+/* Wrappers for busfreq_opp style kernel hacks */
+#define BUSFREQ_DUMMY_DEV_LOCK	0xBED4E4BC;
+static struct device *busfreq_dummy = (void *) BUSFREQ_DUMMY_DEV_LOCK;
+
+static LIST_HEAD(dev_lock_list_head);
+struct dev_lock_entry {
+	struct pm_qos_request_list qos;
+	struct device *dev;
+	struct list_head node;
+};
+static DEFINE_MUTEX(dev_lock_lock);
+
+int dev_add(struct device_domain *domain, struct device *device)
+{
+	WARN(true, "dev_add is not supported with wrappers. "
+		   "Please use PM QoS at the QoS-server side.\n");
+	return -EINVAL;
+}
+
+struct device *dev_get(const char *name)
+{
+	if (!strcmp(name, "exynos-busfreq"))
+		return busfreq_dummy;
+
+	WARN(true, "dev_get() supports exynos-busfreq only\n");
+
+	return ERR_PTR(-EINVAL);
+}
+
+void dev_put(const char *name)
+{
+	return;
+}
+
+unsigned long dev_max_freq(struct device *device)
+{
+	if (device != busfreq_dummy)
+		return 0;
+
+	return 400000;
+}
+
+int dev_lock(struct device *dummy, struct device *dev, unsigned long freq)
+{
+	struct dev_lock_entry *pos;
+	struct list_head *head;
+
+	if (dummy != busfreq_dummy)
+		return -EINVAL;
+
+	head = &dev_lock_list_head;
+
+	mutex_lock(&dev_lock_lock);
+
+	list_for_each_entry(pos, head, node) {
+		if (pos->dev == dev)
+			goto found;
+	}
+	pos = kzalloc(sizeof(struct dev_lock_entry), GFP_KERNEL);
+	pos->dev = dev;
+	pm_qos_add_request(&pos->qos, PM_QOS_BUS_DMA_THROUGHPUT,
+			   PM_QOS_BUS_DMA_THROUGHPUT_DEFAULT_VALUE);
+	list_add_tail(&pos->node, &dev_lock_list_head);
+found:
+	pm_qos_update_request(&pos->qos, freq);
+
+	mutex_unlock(&dev_lock_lock);
+
+	return 0;
+}
+
+int dev_unlock(struct device *dummy, struct device *dev)
+{
+	return dev_lock(dummy, dev, 0);
+}
+
+int dev_lock_list(struct device *device, char *buf)
+{
+	int count = 0;
+	struct dev_lock_entry *pos;
+	struct list_head *head;
+
+	head = &dev_lock_list_head;
+	count = sprintf(buf, "Lock List\n");
+	mutex_lock(&dev_lock_lock);
+	list_for_each_entry(pos, head, node) {
+		count  += sprintf(buf + count, "%s : %d\n",
+				  dev_name(pos->dev),
+				  pos->qos.list.prio);
+	}
+	mutex_unlock(&dev_lock_lock);
+
+	return count;
+}
+
diff -Naur ./arch/arm/mach-exynos/dev-slp-tmu.c ../../HK_JB/Kernel/arch/arm/mach-exynos/dev-slp-tmu.c
--- ./arch/arm/mach-exynos/dev-slp-tmu.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/dev-slp-tmu.c	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,66 @@
+/* linux/arch/arm/mach-exynos4/dev-tmu.c
+ *
+ * Copyright 2011 by SAMSUNG
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/kernel.h>
+#include <linux/string.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <linux/platform_data/exynos4_tmu.h>
+#include <asm/irq.h>
+
+#include <mach/irqs.h>
+#include <mach/map.h>
+#include <plat/devs.h>
+
+static struct resource exynos4_tmu_resource[] = {
+	[0] = {
+		.start	= EXYNOS4_PA_TMU,
+		.end	= EXYNOS4_PA_TMU + 0xFFFF - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= IRQ_TMU,
+		.end	= IRQ_TMU,
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct exynos4_tmu_platform_data default_tmu_data = {
+	.threshold = 78,
+	.trigger_levels[0] = 2,   /* 80 degree Celsius */
+	.trigger_levels[1] = 25,  /* 103 degree Celsius */
+	.trigger_levels[2] = 32,  /* 110 degree Celsius */
+	.trigger_levels[3] = 42,  /* 120 degree Celsius */
+	.trigger_level0_en = 1,
+	.trigger_level1_en = 1,
+	.trigger_level2_en = 1,
+	.trigger_level3_en = 1,
+	.gain = 0x8,
+	.reference_voltage = 0x10,
+	.cal_type = TYPE_ONE_POINT_TRIMMING,
+	.freq_tab[0] = {
+		/* Around 800MHz for trigger_level[0] */
+		.freq_clip_pctg[0] = 42,
+	},
+	.freq_tab[1] = {
+		/* Around 200MHz for trigger_level[1] */
+		.freq_clip_pctg[0] = 85,
+	},
+	.freq_tab_count = 2,
+};
+
+struct platform_device exynos4_device_tmu = {
+	.name		= "exynos4x12-tmu",
+	.id		= -1,
+	.num_resources	= ARRAY_SIZE(exynos4_tmu_resource),
+	.resource	= exynos4_tmu_resource,
+	.dev	= {
+		.platform_data	= &default_tmu_data,
+	},
+};
diff -Naur ./arch/arm/mach-exynos/dvfs-hotplug.c ../../HK_JB/Kernel/arch/arm/mach-exynos/dvfs-hotplug.c
--- ./arch/arm/mach-exynos/dvfs-hotplug.c	2012-12-08 20:40:46.121821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/dvfs-hotplug.c	2012-11-22 09:13:15.000000000 +0100
@@ -18,7 +18,6 @@
 #include <linux/reboot.h>
 #include <linux/suspend.h>
 #include <linux/io.h>
-#include <linux/earlysuspend.h>
 
 #include <plat/cpu.h>
 
@@ -32,15 +31,9 @@
 
 static unsigned int can_hotplug;
 
-static bool screen_off;
-
 static void exynos4_integrated_dvfs_hotplug(unsigned int freq_old,
 					unsigned int freq_new)
 {
-	if (screen_off)
-		if (!cpu_online(1))
-			return; // if screen off and only 1-core then don't hotplug
-		
 	total_num_target_freq++;
 	freq_in_trg = 800000;
 
@@ -145,22 +138,6 @@
 	.notifier_call = hotplug_pm_transition,
 };
 
-static void hotplug_early_suspend(struct early_suspend *handler)
-{
-	screen_off = true;
-}
-
-static void hotplug_late_resume(struct early_suspend *handler)
-{
-	screen_off = false;
-}
-
-static struct early_suspend hotplug_early_suspend_notifier = {
-	.suspend = hotplug_early_suspend,
-	.resume = hotplug_late_resume,
-	.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN,
-};
-
 /*
  * Note : This function should be called after intialization of CPUFreq
  * driver for exynos4. The cpufreq_frequency_table for exynos4 should be
@@ -196,8 +173,6 @@
 
 	register_pm_notifier(&pm_hotplug);
 
-	register_early_suspend(&hotplug_early_suspend_notifier);
-
 	return cpufreq_register_notifier(&dvfs_hotplug,
 					 CPUFREQ_TRANSITION_NOTIFIER);
 }
diff -Naur ./arch/arm/mach-exynos/gc1-gpio.c ../../HK_JB/Kernel/arch/arm/mach-exynos/gc1-gpio.c
--- ./arch/arm/mach-exynos/gc1-gpio.c	2012-12-08 20:40:46.121821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/gc1-gpio.c	2012-11-22 09:13:15.000000000 +0100
@@ -53,8 +53,14 @@
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
 	{EXYNOS4_GPX0(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
+#if defined(CONFIG_MACH_GC1_KOR_SKT) || defined(CONFIG_MACH_GC1_KOR_KT) ||\
+	defined(CONFIG_MACH_GC1_KOR_LGT)
+	{EXYNOS4_GPX0(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* NC */
+#else
 	{EXYNOS4_GPX0(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+#endif
 	{EXYNOS4_GPX0(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
 	{EXYNOS4_GPX0(7), S3C_GPIO_SFN(0xF), S3C_GPIO_SETPIN_NONE,
@@ -78,10 +84,18 @@
 
 	{EXYNOS4_GPX3(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* BT_WAKE */
+#if defined(CONFIG_MACH_GC1_KOR_SKT) || defined(CONFIG_MACH_GC1_KOR_KT) ||\
+	defined(CONFIG_MACH_GC1_KOR_LGT)
+	/* GPIO_AP2MDM_HSIC_PORT_ACTIVE */
+	{EXYNOS4_GPX3(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
+#endif
 	{EXYNOS4_GPX3(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* WIDE_KEY */
 	{EXYNOS4_GPX3(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* T_FLASH_DETECT */
+	{EXYNOS4_GPX3(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* SIM_DETECT */
 
 	{EXYNOS4_GPK3(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* WLAN_SDIO_CMD */
@@ -120,8 +134,15 @@
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
 	{EXYNOS4_GPY2(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+#if defined(CONFIG_MACH_GC1_USA_VZW) || defined(CONFIG_MACH_GC1_KOR_SKT) ||\
+	defined(CONFIG_MACH_GC1_KOR_KT) || defined(CONFIG_MACH_GC1_KOR_LGT)
+	/* GPIO_AP2MDM_PMIC_RESET_N */
+	{EXYNOS4_GPY2(3), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_UP, S5P_GPIO_DRVSTR_LV4},
+#else
 	{EXYNOS4_GPY2(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+#endif
 
 	{EXYNOS4212_GPJ0(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_ZERO,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV4}, /* WLAN_EN */
@@ -141,10 +162,10 @@
 	{EXYNOS4_GPA0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPA0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPA0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
-	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
-	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
 	{EXYNOS4_GPA0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 
 	{EXYNOS4_GPA1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPA1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
@@ -206,7 +227,13 @@
 	{EXYNOS4_GPF0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 
 	{EXYNOS4_GPF1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-	{EXYNOS4_GPF1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#if defined(CONFIG_MACH_GC1_USA_VZW) || defined(CONFIG_MACH_GC1_KOR_SKT) ||\
+	defined(CONFIG_MACH_GC1_KOR_KT) || defined(CONFIG_MACH_GC1_KOR_LGT)
+	/* MDM2AP_HSIC_READY */
+	{EXYNOS4_GPF1(1),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
+#else
+	{EXYNOS4_GPF1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+#endif
 	{EXYNOS4_GPF1(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPF1(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPF1(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
@@ -214,6 +241,11 @@
 #ifdef CONFIG_SEC_MODEM_M0
 	/* GPF1(6) M0, C1 PDA_ACTIVE, let cp know AP sleep status*/
 	{EXYNOS4_GPF1(6),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
+#elif defined(CONFIG_MACH_GC1_USA_VZW) || defined(CONFIG_MACH_GC1_KOR_SKT) ||\
+	defined(CONFIG_MACH_GC1_KOR_KT) || defined(CONFIG_MACH_GC1_KOR_LGT)
+	/* GPF1(6) T0 LTE prev level, if not mdm notice it as crash  */
+	/* AP2MDM_STATUS */
+	{EXYNOS4_GPF1(6),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
 #else
 	{EXYNOS4_GPF1(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 #endif
@@ -221,9 +253,19 @@
 
 	{EXYNOS4_GPF2(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPF2(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-	{EXYNOS4_GPF2(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#if defined(CONFIG_MACH_GC1_USA_VZW) || defined(CONFIG_MACH_GC1_KOR_SKT) ||\
+	defined(CONFIG_MACH_GC1_KOR_KT) || defined(CONFIG_MACH_GC1_KOR_LGT)
+	/* MDM2AP_HSIC_PWR_ACTIVE */
+	{EXYNOS4_GPF2(2),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
+	/* WCN_PRIORITY */
+	{EXYNOS4_GPF2(3),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
+	/* MDM_LTE_FRAME_SYNC */
+	{EXYNOS4_GPF2(4),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
+#else
+	{EXYNOS4_GPF2(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPF2(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPF2(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#endif
 	{EXYNOS4_GPF2(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPF2(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPF2(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
@@ -285,7 +327,13 @@
 	{EXYNOS4_GPL2(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPL2(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPL2(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-	{EXYNOS4_GPL2(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#if defined(CONFIG_MACH_GC1_USA_VZW) || defined(CONFIG_MACH_GC1_KOR_SKT) ||\
+	defined(CONFIG_MACH_GC1_KOR_KT) || defined(CONFIG_MACH_GC1_KOR_LGT)
+	/* AP2MDM_PON_RESET_N */
+	{EXYNOS4_GPL2(5),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
+#else
+	{EXYNOS4_GPL2(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CP_ON */
+#endif
 	{EXYNOS4_GPL2(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPL2(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 
@@ -304,7 +352,13 @@
 	{EXYNOS4_GPY2(0),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPY2(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPY2(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#if defined(CONFIG_MACH_GC1_USA_VZW) || defined(CONFIG_MACH_GC1_KOR_SKT) ||\
+	defined(CONFIG_MACH_GC1_KOR_KT) || defined(CONFIG_MACH_GC1_KOR_LGT)
+	/* AP2MDM_PMIC_RESET_N */
+	{EXYNOS4_GPY2(3),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
+#else
 	{EXYNOS4_GPY2(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#endif
 	{EXYNOS4_GPY2(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPY2(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 
@@ -354,9 +408,15 @@
 
 	/* Exynos4212 specific gpio */
 	{EXYNOS4212_GPJ0(0),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
-	{EXYNOS4212_GPJ0(1),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_DOWN}, /* NC */
+#if defined(CONFIG_MACH_GC1_USA_VZW) || defined(CONFIG_MACH_GC1_KOR_SKT) ||\
+	defined(CONFIG_MACH_GC1_KOR_KT) || defined(CONFIG_MACH_GC1_KOR_LGT)
+	/*AP2MDM_ERR_FATAL*/
+	{EXYNOS4212_GPJ0(1),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
+#else
+	{EXYNOS4212_GPJ0(1),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_DOWN},
+#endif
 	{EXYNOS4212_GPJ0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
-	{EXYNOS4212_GPJ0(3),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
+	{EXYNOS4212_GPJ0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	/* EAR_MICBIAS_EN */
 
 	{EXYNOS4212_GPJ0(4),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
@@ -391,8 +451,8 @@
 	{EXYNOS4212_GPM2(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4212_GPM2(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4212_GPM2(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-	{EXYNOS4212_GPM2(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
-
+	/* AP2MDM_WAKEUP */
+	{EXYNOS4212_GPM2(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4212_GPM3(0),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
 	{EXYNOS4212_GPM3(1),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
 	{EXYNOS4212_GPM3(2),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
diff -Naur ./arch/arm/mach-exynos/gc1-power.c ../../HK_JB/Kernel/arch/arm/mach-exynos/gc1-power.c
--- ./arch/arm/mach-exynos/gc1-power.c	2012-12-08 20:40:46.121821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/gc1-power.c	2012-11-22 09:13:15.000000000 +0100
@@ -418,7 +418,7 @@
 		.always_on	= 0,
 		.boot_on	= 0,
 		.state_mem	= {
-			.disabled = 1,
+			.enabled = 1,
 		},
 	},
 	.num_consumer_supplies	= ARRAY_SIZE(safeout2_supply),
@@ -464,7 +464,11 @@
 static struct regulator_consumer_supply s5m_ldo4_supply[] = {
 	REGULATOR_SUPPLY("vddq_pre_1.8v", NULL),
 };
-
+#if defined(CONFIG_MACH_GC1_USA_ATT) || defined(CONFIG_MACH_GC1_USA_VZW)
+static struct regulator_consumer_supply s5m_ldo5_supply[] = {
+	REGULATOR_SUPPLY("vcc_adc_1.8v", NULL),
+};
+#endif
 static struct regulator_consumer_supply s5m_ldo8_supply[] = {
 	REGULATOR_SUPPLY("vmipi_1.0v", NULL),
 	REGULATOR_SUPPLY("VDD10", "s5p-mipi-dsim.0"),
@@ -583,38 +587,42 @@
 	};
 
 S5M_REGULATOR_INIT(s5m_ldo3, "VCC_1.8V_AP", 1800000, 1800000, 1, 0, 0);
+#if defined(CONFIG_MACH_GC1_USA_ATT) || defined(CONFIG_MACH_GC1_USA_VZW)
+S5M_REGULATOR_INIT(s5m_ldo5, "VCC_ADC_1.8V", 1800000, 1800000, 0,
+		REGULATOR_CHANGE_STATUS, 1);
+#endif
 S5M_REGULATOR_INIT(s5m_ldo8, "VMIPI_1.0V", 1000000, 1000000, 1,
-	       REGULATOR_CHANGE_STATUS, 0);
+		REGULATOR_CHANGE_STATUS, 0);
 S5M_REGULATOR_INIT(s5m_ldo9, "CAM_ISP_1.8V", 1800000, 1800000, 0,
-	       REGULATOR_CHANGE_STATUS, 1);
+		REGULATOR_CHANGE_STATUS, 1);
 S5M_REGULATOR_INIT(s5m_ldo10, "VMIPI_1.8V", 1800000, 1800000, 1,
-	       REGULATOR_CHANGE_STATUS, 0);
+		REGULATOR_CHANGE_STATUS, 0);
 S5M_REGULATOR_INIT(s5m_ldo11, "VABB1_1.95V", 1950000, 1950000, 1,
-	       REGULATOR_CHANGE_STATUS, 1);
+		REGULATOR_CHANGE_STATUS, 1);
 S5M_REGULATOR_INIT(s5m_ldo12, "VUOTG_3.0V", 3000000, 3000000, 1,
-	       REGULATOR_CHANGE_STATUS, 0);
+		REGULATOR_CHANGE_STATUS, 0);
 S5M_REGULATOR_INIT(s5m_ldo14, "VABB2_1.95V", 1950000, 1950000, 1,
-	       REGULATOR_CHANGE_STATUS, 1);
+		REGULATOR_CHANGE_STATUS, 1);
 S5M_REGULATOR_INIT(s5m_ldo19, "LCD_IO_1.8V", 1800000, 1800000, 0,
-	       REGULATOR_CHANGE_STATUS, 1);
+		REGULATOR_CHANGE_STATUS, 1);
 S5M_REGULATOR_INIT(s5m_ldo20, "TSP_AVDD_3.3V", 3300000, 3300000, 0,
-	       REGULATOR_CHANGE_STATUS, 1);
+		REGULATOR_CHANGE_STATUS, 1);
 S5M_REGULATOR_INIT(s5m_ldo21, "MOT_3.3V", 3300000, 3300000, 0,
-	       REGULATOR_CHANGE_STATUS, 1);
+		REGULATOR_CHANGE_STATUS, 1);
 S5M_REGULATOR_INIT(s5m_ldo22, "CAM_SENSOR_2.8V", 2800000, 2800000, 0,
-	       REGULATOR_CHANGE_STATUS, 1);
+		REGULATOR_CHANGE_STATUS, 1);
 S5M_REGULATOR_INIT(s5m_ldo23, "VTF_2.8V", 2800000, 2800000, 0,
-	       REGULATOR_CHANGE_STATUS, 1);
+		REGULATOR_CHANGE_STATUS, 1);
 S5M_REGULATOR_INIT(s5m_ldo24, "LED_3.3V", 3000000, 3000000, 0,
-	       REGULATOR_CHANGE_STATUS, 1);
+		REGULATOR_CHANGE_STATUS, 1);
 S5M_REGULATOR_INIT(s5m_ldo25, "CAM_SENSOR_CORE_1.2V", 1200000, 1200000, 0,
-	       REGULATOR_CHANGE_STATUS, 1);
+		REGULATOR_CHANGE_STATUS, 1);
 S5M_REGULATOR_INIT(s5m_ldo26, "CAM_SENSOR_1.8V", 1800000, 1800000, 0,
-	       REGULATOR_CHANGE_STATUS, 1);
+		REGULATOR_CHANGE_STATUS, 1);
 S5M_REGULATOR_INIT(s5m_ldo27, "OIS_1.5V", 1500000, 1500000, 0,
-	       REGULATOR_CHANGE_STATUS, 1);
+		REGULATOR_CHANGE_STATUS, 1);
 S5M_REGULATOR_INIT(s5m_ldo28, "TSP_VDD_1.8V", 1800000, 1800000, 0,
-	       REGULATOR_CHANGE_STATUS, 1);
+		REGULATOR_CHANGE_STATUS, 1);
 
 
 static struct regulator_init_data s5m8767_buck1_data = {
@@ -706,6 +714,9 @@
 	{S5M8767_BUCK4, &s5m8767_buck4_data,},
 	{S5M8767_BUCK6, &s5m8767_buck6_data,},
 	{S5M8767_LDO3, &s5m_ldo3_init_data,},
+#if defined(CONFIG_MACH_GC1_USA_ATT) || defined(CONFIG_MACH_GC1_USA_VZW)
+	{S5M8767_LDO5, &s5m_ldo5_init_data,},
+#endif
 	{S5M8767_LDO8, &s5m_ldo8_init_data,},
 	{S5M8767_LDO9, &s5m_ldo9_init_data,},
 	{S5M8767_LDO10, &s5m_ldo10_init_data,},
@@ -738,6 +749,19 @@
 	[S5M8767_LDO19] = {S5M8767_LDO19, S5M_OPMODE_STANDBY},
 };
 
+#if defined(CONFIG_MACH_GC1_USA_VZW) || defined(CONFIG_MACH_GC1_KOR_SKT) || \
+	defined(CONFIG_MACH_GC1_KOR_KT) || defined(CONFIG_MACH_GC1_KOR_LGT)
+struct s5m_wtsr_smpl wtsr_smpl_data = {
+	.wtsr_en = true,
+	.smpl_en = false,
+};
+#else
+struct s5m_wtsr_smpl wtsr_smpl_data = {
+	.wtsr_en = true,
+	.smpl_en = true,
+};
+#endif
+
 struct s5m_platform_data exynos4_s5m8767_info = {
 	.device_type	= S5M8767X,
 	.num_regulators = ARRAY_SIZE(s5m8767_regulators),
@@ -750,7 +774,7 @@
 	.wakeup		= 1,
 
 	.opmode_data = s5m8767_opmode_data,
-	.wtsr_smpl		= 1,
+	.wtsr_smpl	= &wtsr_smpl_data,
 
 	.buck2_voltage[0] = 1100000,	/* 1.1V */
 	.buck2_voltage[1] = 1100000,	/* 1.1V */
diff -Naur ./arch/arm/mach-exynos/hotplug.c ../../HK_JB/Kernel/arch/arm/mach-exynos/hotplug.c
--- ./arch/arm/mach-exynos/hotplug.c	2012-12-08 20:40:46.121821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/hotplug.c	2012-11-22 09:13:15.000000000 +0100
@@ -17,8 +17,6 @@
 #include <linux/io.h>
 
 #include <asm/cacheflush.h>
-#include <asm/cp15.h>
-#include <asm/smp_plat.h>
 
 #include <plat/cpu.h>
 #include <mach/regs-pmu.h>
@@ -29,8 +27,7 @@
 {
 	unsigned int v;
 
-	flush_cache_louis();
-
+	flush_cache_all();
 	asm volatile(
 	"	mcr	p15, 0, %1, c7, c5, 0\n"
 	"	mcr	p15, 0, %1, c7, c10, 4\n"
@@ -60,7 +57,7 @@
 	  : "Ir" (CR_C)
 	  : "cc");
 
-	flush_cache_louis();
+	flush_cache_all();
 
 	asm volatile(
 	/*
diff -Naur ./arch/arm/mach-exynos/idle-exynos5.S ../../HK_JB/Kernel/arch/arm/mach-exynos/idle-exynos5.S
--- ./arch/arm/mach-exynos/idle-exynos5.S	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/idle-exynos5.S	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,210 @@
+/* linux/arch/arm/mach-exynos/idle-exynos5.S
+ *
+ * Copyright (c) 2011 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com
+ *
+ * EXYNOS5 AFTR/LPA idle support
+ * Based on S3C2410 sleep code by:
+ *	Ben Dooks, (c) 2004 Simtec Electronics
+ *
+ * Based on PXA/SA1100 sleep code by:
+ *	Nicolas Pitre, (c) 2002 Monta Vista Software Inc
+ *	Cliff Brake, (c) 2001
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+#include <linux/linkage.h>
+#include <asm/assembler.h>
+#include <asm/memory.h>
+#include <plat/map-base.h>
+#include <plat/map-s5p.h>
+#include <mach/smc.h>
+
+	.text
+
+	/*
+	 * exynos5_enter_lp
+	 *
+	 * entry:
+	 *	r1 = v:p offset
+	 */
+
+ENTRY(exynos5_enter_lp)
+	stmfd	sp!, { r3 - r12, lr }
+
+	adr	r0, sleep_save_misc
+
+#ifdef CONFIG_ARM_TRUSTZONE
+	mrc	p15, 0, r2, c1, c0, 1	@ read aux control register
+	str	r2, [r0], #4
+#endif
+	mrc	p15, 1, r2, c9, c0, 2	@ read l2 control register
+	str	r2, [r0], #4
+	mrc	p15, 1, r2, c15, c0, 3	@ read l2 prefetch register
+	str	r2, [r0], #4
+
+	ldr	r3, =resume_with_mmu
+	bl	cpu_suspend
+
+	bl	exynos5_L1_dcache_flush
+
+	adr	r0, sys_pwr_conf_addr
+	ldr	r1, [r0]
+	ldr	r2, [r1]
+	bic	r2, r2, #(1<<16)
+	str	r2, [r1]
+
+#ifdef CONFIG_ARM_TRUSTZONE
+        ldr     r0, =SMC_CMD_CPU0AFTR
+        mov     r1, #0
+        mov     r2, #0
+        mov     r3, #0
+        smc     0
+#else
+	dsb
+	wfi
+#endif
+
+	/* Restore original sp */
+	mov	r0, sp
+	add	r0, r0, #4
+	ldr	sp, [r0]
+
+	mov	r0, #0
+	b	early_wakeup
+
+resume_with_mmu:
+	adr	r4, sleep_save_misc
+
+#ifdef CONFIG_ARM_TRUSTZONE
+        mov	r3, #0
+
+        ldr	r0, =SMC_CMD_REG
+	ldr	r1, =SMC_REG_ID_CP15(1, 0, 0, 1)	@ aux control register
+	ldr	r2, [r4], #4
+	smc	0
+        ldr	r0, =SMC_CMD_REG
+	ldr	r1, =SMC_REG_ID_CP15(9, 1, 0, 2)	@ L2 control register
+	ldr	r2, [r4], #4
+	smc	0
+        ldr	r0, =SMC_CMD_REG
+	ldr	r1, =SMC_REG_ID_CP15(15, 1, 0, 3)	@ L2 prefetch register
+	ldr	r2, [r4], #4
+	smc	0
+#else
+	ldr	r2, [r4], #4
+	mcr	p15, 1, r2, c9, c0, 2			@ L2 control register
+	ldr	r2, [r4], #4
+	mcr	p15, 1, r2, c15, c0, 3			@ L2 prefetch register
+#endif
+	mov	r0, #1
+early_wakeup:
+
+	ldmfd	sp!, { r3 - r12, pc }
+
+	.ltorg
+
+	/*
+	 * sleep magic, to allow the bootloader to check for an valid
+	 * image to resume to. Must be the first word before the
+	 * s3c_cpu_resume entry.
+	 */
+
+	.word	0x2bedf00d
+
+sleep_save_misc:
+	.long	0
+	.long	0
+	.long	0
+
+	.global sys_pwr_conf_addr
+sys_pwr_conf_addr:
+	.long	0
+
+	/*
+	 * exynos5_L1_dcache_flush
+	 *
+	 * L1 only dcache flush function
+	 *
+	 * When enter lowpower cpuidle mode, It is need to L1 only flush function.
+	 */
+ENTRY(exynos5_L1_dcache_flush)
+	dmb					@ ensure ordering with previous memory accesses
+	mrc	p15, 1, r0, c0, c0, 1		@ read clidr
+	ands	r3, r0, #0x7000000		@ extract loc from clidr
+	mov	r3, r3, lsr #23			@ left align loc bit field
+	beq	skip				@ if loc is 0, then no need to clean
+	mov	r10, #0				@ start clean at cache level 0
+loop1:
+	add	r2, r10, r10, lsr #1		@ work out 3x current cache level
+	mov	r1, r0, lsr r2			@ extract cache type bits from clidr
+	and	r1, r1, #7			@ mask of the bits for current cache only
+	cmp	r1, #2				@ see what cache we have at this level
+	blt	skip				@ skip if no cache, or just i-cache
+	mcr	p15, 2, r10, c0, c0, 0		@ select current cache level in cssr
+	isb					@ isb to sych the new cssr&csidr
+	mrc	p15, 1, r1, c0, c0, 0		@ read the new csidr
+	and	r2, r1, #7			@ extract the length of the cache lines
+	add	r2, r2, #4			@ add 4 (line length offset)
+	ldr	r4, =0x3ff
+	ands	r4, r4, r1, lsr #3		@ find maximum number on the way size
+	clz	r5, r4				@ find bit position of way size increment
+	ldr	r7, =0x7fff
+	ands	r7, r7, r1, lsr #13		@ extract max number of the index size
+loop2:
+	mov	r9, r4				@ create working copy of max way size
+loop3:
+ ARM(	orr	r11, r10, r9, lsl r5	)	@ factor way and cache number into r11
+ THUMB(	lsl	r6, r9, r5		)
+ THUMB(	orr	r11, r10, r6		)	@ factor way and cache number into r11
+ ARM(	orr	r11, r11, r7, lsl r2	)	@ factor index number into r11
+ THUMB(	lsl	r6, r7, r2		)
+ THUMB(	orr	r11, r11, r6		)	@ factor index number into r11
+	mcr	p15, 0, r11, c7, c14, 2		@ clean & invalidate by set/way
+	subs	r9, r9, #1			@ decrement the way
+	bge	loop3
+	subs	r7, r7, #1			@ decrement the index
+	bge	loop2
+skip:
+	mov	r10, #0				@ swith back to cache level 0
+	mcr	p15, 2, r10, c0, c0, 0		@ select current cache level in cssr
+	dsb
+	isb
+	mov	pc, lr
+ENDPROC(exynos5_L1_dcache_flush)
+
+	/*
+	 * exynos5_idle_resume
+	 *
+	 * resume code entry for IROM to call
+	 *
+	 * we must put this code here in the data segment as we have no
+	 * other way of restoring the stack pointer after sleep, and we
+	 * must not write to the code segment (code is read-only)
+	 */
+
+ENTRY(exynos5_idle_resume)
+	/*
+	 * To use JTEG after wakeup from power mode
+	 * Set DBGEN, NIDEN, SPIDEN, SPNIDEN on TZPC1
+	 */
+	ldr	r0, =0x10110810
+	mov	r1, #0xf
+	str	r1, [r0]
+	dsb
+	isb
+
+	b	cpu_resume
diff -Naur ./arch/arm/mach-exynos/include/mach/busfreq_exynos5.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/busfreq_exynos5.h
--- ./arch/arm/mach-exynos/include/mach/busfreq_exynos5.h	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/busfreq_exynos5.h	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,93 @@
+/* linux/arch/arm/mach-exynos/include/mach/busfreq_exynos5.h
+ *
+ * Copyright (c) 2010 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com
+ *
+ * EXYNOS4 - BUSFreq support
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+*/
+
+#ifndef __ASM_ARCH_BUSFREQ_H
+#define __ASM_ARCH_BUSFREQ_H __FILE__
+
+#include <linux/notifier.h>
+#include <linux/earlysuspend.h>
+
+#include <mach/ppmu.h>
+
+#define MAX_LOAD		100
+#define LOAD_HISTORY_SIZE	5
+#define DIVIDING_FACTOR		10000
+
+#define TIMINGROW_OFFSET	0x34
+
+enum busfreq_level_idx {
+	LV_0,
+	LV_1,
+	LV_2,
+	LV_3,
+	LV_INT_END,
+	LV_MIF_END = LV_3,
+};
+
+struct opp;
+struct device;
+struct busfreq_table;
+
+struct busfreq_data {
+	bool use;
+	struct device *dev[PPMU_TYPE_END];
+	struct delayed_work worker;
+	unsigned long curr_freq[PPMU_TYPE_END];
+	unsigned long max_freq[PPMU_TYPE_END];
+	unsigned long min_freq[PPMU_TYPE_END];
+	struct regulator *vdd_reg[PPMU_TYPE_END];
+	unsigned int sampling_rate;
+	struct kobject *busfreq_kobject;
+	struct busfreq_table *table[PPMU_TYPE_END];
+	unsigned long long time_in_state[PPMU_TYPE_END][LV_INT_END];
+	unsigned long long last_time[PPMU_TYPE_END];
+	unsigned int load_history[PPMU_END][LOAD_HISTORY_SIZE];
+	int index;
+
+	struct notifier_block exynos_buspm_notifier;
+	struct notifier_block exynos_reboot_notifier;
+	struct notifier_block exynos_request_notifier;
+	struct early_suspend busfreq_early_suspend_handler;
+	struct attribute_group busfreq_attr_group;
+	int (*init)	(struct device *dev, struct busfreq_data *data);
+	void (*monitor) (struct busfreq_data *data, struct opp **mif_opp,
+			struct opp **int_opp);
+	void (*target)	(struct busfreq_data *data, enum ppmu_type type, int index);
+	unsigned int (*get_int_volt) (unsigned long freq);
+	int (*get_table_index) (unsigned long freq, enum ppmu_type type);
+	void (*busfreq_prepare) (int index);
+	void (*busfreq_post) (int index);
+	void (*busfreq_suspend) (void);
+	void (*busfreq_resume) (void);
+
+	/* Dividers calculated at boot/probe-time */
+	unsigned int lex_divtable[LV_INT_END];
+	unsigned int r0x_divtable[LV_INT_END];
+	unsigned int r1x_divtable[LV_INT_END];
+	unsigned int cdrex_divtable[LV_MIF_END];
+	unsigned int cdrex2_divtable[LV_MIF_END];
+};
+
+struct busfreq_table {
+	unsigned int idx;
+	unsigned int mem_clk;
+	unsigned int volt;
+	unsigned int clk_topdiv;
+	unsigned int clk_dmc0div;
+	unsigned int clk_dmc1div;
+};
+
+void exynos_request_apply(unsigned long freq);
+unsigned long step_down(struct busfreq_data *data, enum ppmu_type type, int step);
+
+int exynos5250_init(struct device *dev, struct busfreq_data *data);
+#endif /* __ASM_ARCH_BUSFREQ_H */
diff -Naur ./arch/arm/mach-exynos/include/mach/c2c.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/c2c.h
--- ./arch/arm/mach-exynos/include/mach/c2c.h	2012-12-08 20:40:46.121821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/c2c.h	2012-11-22 09:13:15.000000000 +0100
@@ -1,5 +1,4 @@
-/* linux/arch/arm/mach-exynos/include/mach/c2c.h
- *
+/*
  * Copyright 2011 Samsung Electronics Co., Ltd.
  *		http://www.samsung.com/
  *
@@ -9,10 +8,42 @@
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
 */
-#ifndef __ASM_PLAT_C2C_H
-#define __ASM_PLAT_C2C_H __FILE__
+#ifndef __MACH_C2C_H__
+#define __MACH_C2C_H__ __FILE__
+
+#define C2C_SHAREDMEM_BASE	0x60000000
+#define C2C_SHAREDMEM_SIZE	SZ_64M
 
-#define C2C_SHAREDMEM_BASE 0x60000000
+#define C2C_CP_RGN_BASE		C2C_SHAREDMEM_BASE
+#ifdef CONFIG_C2C_IPC_ENABLE
+#define C2C_CP_RGN_SIZE		(60 * SZ_1M)
+#else
+#define C2C_CP_RGN_SIZE		SZ_64M
+#endif
+
+#define C2C_SH_RGN_BASE		(C2C_CP_RGN_BASE + C2C_CP_RGN_SIZE)
+#define C2C_SH_RGN_SIZE		(C2C_SHAREDMEM_SIZE - C2C_CP_RGN_SIZE)
+
+#ifdef CONFIG_C2C_IPC_ENABLE
+extern void __iomem *c2c_request_cp_region(unsigned int cp_addr,
+		unsigned int size);
+extern void __iomem *c2c_request_sh_region(unsigned int sh_addr,
+		unsigned int size);
+extern void c2c_release_cp_region(void *rgn);
+extern void c2c_release_sh_region(void *rgn);
+
+extern int c2c_register_handler(void (*handler)(void *), void *data);
+extern int c2c_unregister_handler(void (*handler)(void *));
+extern void c2c_send_interrupt(u32 cmd);
+extern void c2c_reset_interrupt(void);
+extern u32 c2c_read_interrupt(void);
+extern u32 c2c_read_link(void);
+
+struct c2c_ipc_handler {
+	void *data;
+	void (*handler)(void *);
+};
+#endif
 
 enum c2c_opp_mode {
 	C2C_OPP0 = 0,
@@ -39,7 +70,8 @@
 };
 
 struct exynos_c2c_platdata {
-	void (*setup_gpio)(enum c2c_buswidth rx_width, enum c2c_buswidth tx_width);
+	void (*setup_gpio)(enum c2c_buswidth rx_width,
+			enum c2c_buswidth tx_width);
 	void (*set_cprst)(void);
 	void (*clear_cprst)(void);
 	u32 (*get_c2c_state)(void);
@@ -57,12 +89,16 @@
 	u32 clk_opp25;	/* clock of OPP25 */
 	enum c2c_opp_mode default_opp_mode;
 
-	void __iomem *c2c_sysreg;	/* System Register address for C2C */
+	/* System Register address for C2C */
+	void __iomem *c2c_sysreg;
+
 	char *c2c_clk;
 };
 
 void exynos_c2c_set_platdata(struct exynos_c2c_platdata *pd);
-extern void exynos_c2c_cfg_gpio(enum c2c_buswidth rx_width, enum c2c_buswidth tx_width);
+extern void exynos_c2c_cfg_gpio(enum c2c_buswidth rx_width,
+				enum c2c_buswidth tx_width);
 extern void exynos_c2c_set_cprst(void);
 extern void exynos_c2c_clear_cprst(void);
-#endif /*__ASM_PLAT_C2C_H */
+#endif /*__MACH_C2C_H__*/
+
diff -Naur ./arch/arm/mach-exynos/include/mach/entry-macro.S ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/entry-macro.S
--- ./arch/arm/mach-exynos/include/mach/entry-macro.S	2012-12-08 20:40:46.121821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/entry-macro.S	2012-11-22 09:13:15.000000000 +0100
@@ -76,7 +76,7 @@
 
 		bic     \irqnr, \irqstat, #0x1c00
 
-		cmp     \irqnr, #15
+		cmp     \irqnr, #29
 		cmpcc	\irqnr, \irqnr
 		cmpne	\irqnr, \tmp
 		cmpcs	\irqnr, \irqnr
@@ -116,12 +116,11 @@
 
 		/* As above, this assumes that irqstat and base are preserved.. */
 
-#		.macro test_for_ltirq, irqnr, irqstat, base, tmp
-#		bic     \irqnr, \irqstat, #0x1c00
-#		mov     \tmp, #0
-#		cmp     \irqnr, #28
-#		moveq   \tmp, #1
-#		streq   \irqstat, [\base, #GIC_CPU_EOI]
-#		cmp     \tmp, #0
-#		.endm
-
+		.macro test_for_ltirq, irqnr, irqstat, base, tmp
+		bic     \irqnr, \irqstat, #0x1c00
+		mov     \tmp, #0
+		cmp     \irqnr, #28
+		moveq   \tmp, #1
+		streq   \irqstat, [\base, #GIC_CPU_EOI]
+		cmp     \tmp, #0
+		.endm
diff -Naur ./arch/arm/mach-exynos/include/mach/gpio-midas.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-midas.h
--- ./arch/arm/mach-exynos/include/mach/gpio-midas.h	2012-12-08 20:40:46.125821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-midas.h	2012-11-22 09:13:15.000000000 +0100
@@ -39,6 +39,8 @@
 #include "gpio-rev00-naples.h"
 #elif defined(CONFIG_MACH_P4NOTE)
 #include "gpio-rev00-p4notepq.h"
+#elif defined(CONFIG_MACH_KONA)
+#include "gpio-rev00-kona.h"
 #elif defined(CONFIG_MACH_GC1)
 #include "gpio-rev00-gc1.h"
 #elif defined(CONFIG_MACH_T0_CHN_CTC)
diff -Naur ./arch/arm/mach-exynos/include/mach/gpio-rev00-baffin.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-rev00-baffin.h
--- ./arch/arm/mach-exynos/include/mach/gpio-rev00-baffin.h	2012-12-08 20:40:46.125821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-rev00-baffin.h	2012-11-22 09:13:15.000000000 +0100
@@ -48,8 +48,8 @@
 
 /* Sensors & NFC*/
 #define GPIO_PS_ALS_EN		EXYNOS4212_GPJ0(5)
-#define GPIO_PS_ALS_SDA_28V	EXYNOS4_GPK1(1)
-#define GPIO_PS_ALS_SCL_28V	EXYNOS4_GPK2(2)
+#define GPIO_PS_ALS_SDA_28V	EXYNOS4_GPF0(0)
+#define GPIO_PS_ALS_SCL_28V	EXYNOS4_GPF0(1)
 #define GPIO_PS_ALS_INT		EXYNOS4_GPX0(2)
 
 #define GPIO_ACC_INT		EXYNOS4_GPX0(0)
@@ -326,6 +326,7 @@
 
 #if defined(CONFIG_TDMB) || defined(CONFIG_TDMB_MODULE)
 #define GPIO_TDMB_EN		EXYNOS4_GPC0(0)
+#define GPIO_TDMB_RST_N		EXYNOS4_GPF0(7)
 #define GPIO_TDMB_INT		EXYNOS4_GPC0(4)
 #define GPIO_TDMB_IRQ		gpio_to_irq(GPIO_TDMB_INT)
 #define GPIO_TDMB_INT_AF	0xf
@@ -335,4 +336,9 @@
 #define GPIO_TDMB_SPI_MOSI	EXYNOS4_GPC1(4)
 #endif
 
+#define GPIO_LED_VDD_EN		EXYNOS4212_GPM0(0)
+#define GPIO_KEY_LED_CTRL	EXYNOS4_GPF2(6)
+#define GPIO_MSENSE_RST_N	EXYNOS4_GPY2(1)
+
+#define GPIO_LINEOUT_EN		EXYNOS4_GPL0(3)
 #endif /* __MACH_GPIO_BAFFIN_H */
diff -Naur ./arch/arm/mach-exynos/include/mach/gpio-rev00-gc1.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-rev00-gc1.h
--- ./arch/arm/mach-exynos/include/mach/gpio-rev00-gc1.h	2012-12-08 20:40:46.125821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-rev00-gc1.h	2012-11-22 09:13:15.000000000 +0100
@@ -230,6 +230,9 @@
 #define GPIO_OK_KEY		EXYNOS4_GPX3(5)
 
 #define GPIO_FUEL_ALERT		EXYNOS4_GPX2(3)
+#if defined(CONFIG_TARGET_LOCALE_USA)/* att: rev0.3A ~, vwz: rev0.0 ~ */
+#define GPIO_BATT_PRESENT_N_INT	EXYNOS4_GPX1(3)
+#endif
 
 #define GPIO_V_BUS_INT		EXYNOS4_GPX2(4)	/* rev0.9 ~ */
 #define GPIO_WPC_INT		EXYNOS4_GPX3(0)
@@ -312,6 +315,8 @@
 #define GPIO_FAST_TELE_KEY	EXYNOS4_GPX1(4)
 #define GPIO_FAST_WIDE_KEY	EXYNOS4_GPX0(4)
 
+#define STR_PU_DET_18V		EXYNOS4_GPF0(5)		/*Strobe Open/Close*/
+
 #define GPIO_FM_INT_REV15	EXYNOS4_GPX1(4)
 #define GPIO_FM_INT_REV07	EXYNOS4_GPX1(3)
 #define GPIO_FM_INT		EXYNOS4_GPX1(3)
@@ -328,4 +333,28 @@
 #define GPIO_TDMB_SPI_MOSI	EXYNOS4_GPC1(4)
 #endif
 
+#if defined(CONFIG_QC_MODEM)
+/* Modem Interface GPIOs - MDM */
+#define GPIO_MDM2AP_HSIC_READY		EXYNOS4_GPF1(1)
+#define GPIO_AP2MDM_STATUS		EXYNOS4_GPF1(6)
+/* AP2MDM_IPC2 */
+#define GPIO_MDM2AP_HSIC_PWR_ACTIVE	EXYNOS4_GPF2(2)
+#define GPIO_WCN_PRIORITY		EXYNOS4_GPF2(3)
+#define GPIO_MDM_LTE_FRAME_SYNC		EXYNOS4_GPF2(4)
+#define GPIO_AP2MDM_ERR_FATAL		EXYNOS4212_GPJ0(1)
+#define GPIO_AP2MDM_PON_RESET_N		EXYNOS4_GPL2(5)
+#define GPIO_AP2MDM_WAKEUP		EXYNOS4212_GPM2(4)
+#define GPIO_AP2MDM_SOFT_RESET		EXYNOS4212_GPM3(3)
+#define GPIO_MDM2AP_STATUS		EXYNOS4_GPX0(5)
+/* AP2MDM_IPC2 */
+#define GPIO_MDM2AP_HSIC_RESUME_REQ	EXYNOS4_GPX0(6)
+#define GPIO_AP2MDM_VDDMIN		EXYNOS4_GPX1(0)
+#define GPIO_MDM2AP_VDDMIN		EXYNOS4_GPX1(1)
+#define GPIO_MDM2AP_ERR_FATAL		EXYNOS4_GPX1(2)
+#define GPIO_MDM_LTE_ACTIVE		EXYNOS4_GPX1(6)
+/* AP2MDM_IPC2 */
+#define GPIO_AP2MDM_HSIC_PORT_ACTIVE	EXYNOS4_GPX3(2)
+#define GPIO_AP2MDM_PMIC_RESET_N	EXYNOS4_GPY2(3)
+#endif
+
 #endif /* __MACH_GPIO_MIDAS_H */
diff -Naur ./arch/arm/mach-exynos/include/mach/gpio-rev00-kona.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-rev00-kona.h
--- ./arch/arm/mach-exynos/include/mach/gpio-rev00-kona.h	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-rev00-kona.h	2012-11-22 09:13:16.000000000 +0100
@@ -0,0 +1,377 @@
+#ifndef __MACH_GPIO_MIDAS_H
+#define __MACH_GPIO_MIDAS_H __FILE__
+
+#include <mach/gpio.h>
+
+extern void midas_config_gpio_table(void);
+extern void midas_config_sleep_gpio_table(void);
+
+#define GPIO_eMMC_EN		EXYNOS4_GPK0(2)
+
+#define GPIO_BOOT_MODE		EXYNOS4_GPX0(3)
+
+#define GPIO_FM_I2S_CLK		EXYSNO4_GPC0(0)
+#define GPIO_FM_I2S_SYNC	EXYSNO4_GPC0(2)
+#define GPIO_FM_I2S_DI		EXYSNO4_GPC0(3)
+#define GPIO_FM_I2S_DO		EXYSNO4_GPC0(4)
+
+#define GPIO_IF_PMIC_SDA	EXYNOS4212_GPM2(0)
+#define GPIO_IF_PMIC_SCL	EXYNOS4212_GPM2(1)
+#define GPIO_PMIC_SDA		EXYNOS4_GPB(2)
+#define GPIO_PMIC_SCL		EXYNOS4_GPB(3)
+
+/* Camera */
+#define GPIO_CAM_SPI_SCLK	EXYNOS4_GPB(4)
+#define GPIO_CAM_SPI_SSN	EXYNOS4_GPB(5)
+#define GPIO_CAM_SPI_MISO	EXYNOS4_GPB(6)
+#define GPIO_CAM_SPI_MOSI	EXYNOS4_GPB(7)
+#define GPIO_VT_CAM_nSTBY	EXYNOS4_GPF2(1)
+
+#define GPIO_CAM_MCLK		EXYNOS4212_GPJ1(3)
+#define GPIO_VTCAM_MCLK		EXYNOS4212_GPM2(2)
+
+#define GPIO_5M_nRST		EXYNOS4_GPL1(1)
+
+#define GPIO_ISP_STANDBY	EXYNOS4212_GPM0(1)
+#define GPIO_CAM_IO_EN		EXYNOS4212_GPM0(2)
+#define GPIO_ISP_CORE_EN	EXYNOS4212_GPM0(3)
+#define GPIO_CAM_AF_EN		EXYNOS4212_GPM0(4)
+#ifdef CONFIG_VIDEO_ISX012
+#define GPIO_CAM_EN2		EXYNOS4212_GPJ0(5)
+#define GPIO_CAM_EN1		EXYNOS4212_GPJ0(6)
+#define GPIO_5M_nSTBY		EXYNOS4212_GPJ0(7)
+#else
+#endif
+
+#define GPIO_VT_CAM_nRST	EXYNOS4212_GPJ1(0)
+#define GPIO_CAM_MOVIE_EN	EXYNOS4212_GPM3(6)
+#define GPIO_CAM_FLASH_EN	EXYNOS4212_GPM3(7)
+
+/*
+#define GPIO_8M_CAM_SCL_18V	EXYNOS4212_GPM4(0)
+#define GPIO_8M_CAM_SDA_18V	EXYNOS4212_GPM4(1)
+#define GPIO_8M_CAM_SCL_18V_00	EXYNOS4_GPD1(0)
+#define GPIO_8M_CAM_SDA_18V_00	EXYNOS4_GPD1(1)
+*/
+#define GPIO_VT_CAM_SCL_18V	EXYNOS4212_GPM4(2)
+#define GPIO_2M_nSTBY		EXYNOS4212_GPM4(3)
+#define GPIO_VT_CAM_ID			EXYNOS4_GPF1(2)
+
+/* 30pin Accessory */
+#define GPIO_ACCESSORY_EN		EXYNOS4_GPL2(6)
+#define GPIO_ACCESSORY_OUT_5V	EXYNOS4_GPX3(5)
+#define GPIO_ACCESSORY_INT		EXYNOS4_GPX1(3)
+#define GPIO_DOCK_INT			EXYNOS4_GPX0(4)
+
+/* Sensors*/
+#define GPIO_PS_ALS_SDA_28V	EXYNOS4_GPL0(2)
+#define GPIO_PS_ALS_SCL_28V	EXYNOS4_GPL0(1)
+
+#define GPIO_GYRO_DE		EXYNOS4_GPL2(0)
+#if !defined(CONFIG_QC_MODEM)
+#define GPIO_GPS_nRST		EXYNOS4_GPL2(1)
+#define GPIO_GPS_PWR_EN		EXYNOS4_GPL2(2)
+#endif
+#define GPIO_GYRO_INT		EXYNOS4_GPX0(6)
+
+#define GPIO_GSENSE_SDA_18V	EXYNOS4_GPD1(2)
+#define GPIO_GSENSE_SCL_18V	EXYNOS4_GPD1(3)
+#define GPIO_ACC_INT		EXYNOS4_GPX0(0)
+
+#define GPIO_MSENSOR_INT	EXYNOS4212_GPM4(7)
+#define GPIO_MSENSOR_SDA_18V	EXYNOS4_GPY2(4)
+#define GPIO_MSENSOR_SCL_18V	EXYNOS4_GPY2(5)
+/* Sensors*/
+
+#define GPIO_TF_EN		EXYNOS4_GPY2(0)
+#define GPIO_DET_35		EXYNOS4_GPX0(3)
+
+#define GPIO_MIC_BIAS_EN	EXYNOS4212_GPM0(0)
+#define GPIO_SUB_MIC_BIAS_EN	EXYNOS4_GPF2(0)
+#define GPIO_EAR_MIC_BIAS_EN	EXYNOS4212_GPJ0(3)
+#define GPIO_EAR_SEND_END	EXYNOS4_GPX3(6)
+#define GPIO_LINEOUT_EN		EXYNOS4212_GPJ1(2)
+
+#define GPIO_PMU_RST		EXYNOS4_GPX3(2)
+
+#define GPIO_PMIC_IRQ		EXYNOS4_GPX0(7)
+#define GPIO_IF_PMIC_IRQ	EXYNOS4_GPX1(5)
+
+#define GPIO_BT_EN		EXYNOS4_GPL0(6)
+#define GPIO_BT_WAKE		EXYNOS4_GPX3(1)
+#define GPIO_BT_HOST_WAKE	EXYNOS4_GPX2(6)
+#define IRQ_BT_HOST_WAKE	IRQ_EINT(22)
+
+#define GPIO_BT_RXD		EXYNOS4_GPA0(0)
+#define GPIO_BT_RXD_AF		2
+
+#define GPIO_BT_TXD		EXYNOS4_GPA0(1)
+#define GPIO_BT_TXD_AF		2
+
+#define GPIO_BT_CTS		EXYNOS4_GPA0(2)
+#define GPIO_BT_CTS_AF		2
+
+#define GPIO_BT_RTS		EXYNOS4_GPA0(3)
+#define GPIO_BT_RTS_AF		2
+
+#define GPIO_GPS_RXD		EXYNOS4_GPA0(4)
+#define GPIO_GPS_RXD_AF		2
+
+#define GPIO_GPS_TXD		EXYNOS4_GPA0(5)
+#define GPIO_GPS_TXD_AF		2
+
+#define GPIO_GPS_CTS		EXYNOS4_GPA0(6)
+#define GPIO_GPS_CTS_AF		2
+
+#define GPIO_GPS_RTS		EXYNOS4_GPA0(7)
+#define GPIO_GPS_RTS_AF		2
+
+#define GPIO_FLM_RXD		EXYNOS4_GPA1(4)
+#define GPIO_FLM_RXD_AF		2
+
+#define GPIO_FLM_TXD		EXYNOS4_GPA1(5)
+#define GPIO_FLM_TXD_AF		2
+
+#define GPIO_HDMI_EN		EXYNOS4_GPL0(4)
+
+#define GPIO_PWM0		EXYNOS4_GPD0(0)
+#define GPIO_PWM1		EXYNOS4_GPD0(1)
+#define GPIO_PWM2		EXYNOS4_GPD0(2)
+#define GPIO_PWM3		EXYNOS4_GPD0(3)
+
+#define GPIO_TSP_INT		EXYNOS4212_GPM2(3)
+#define GPIO_TSP_SDA_18V	EXYNOS4_GPA1(2)
+#define GPIO_TSP_SCL_18V	EXYNOS4_GPA1(3)
+#define GPIO_TSP_LDO_ON	EXYNOS4212_GPM4(5)
+#define GPIO_TSP_RST		EXYNOS4212_GPM0(4)
+#define GPIO_TSP_LDO_ON1	EXYNOS4_GPB(5)
+#define GPIO_TSP_LDO_ON2	EXYNOS4_GPB(7)
+
+#define GPIO_PEN_PDCT		EXYNOS4_GPC1(0)
+#define GPIO_PEN_LDO_EN		EXYNOS4_GPC1(1)
+#define GPIO_PEN_IRQ		EXYNOS4_GPC1(2)
+#define GPIO_PEN_SDA		EXYNOS4_GPC1(3)
+#define GPIO_PEN_SCL		EXYNOS4_GPC1(4)
+#define GPIO_PEN_DETECT		EXYNOS4_GPX1(5)
+#define GPIO_PEN_FWE1		EXYNOS4_GPY1(3)
+
+#define GPIO_nPOWER		EXYNOS4_GPX2(7)
+#define GPIO_VOL_DOWN		EXYNOS4_GPX2(2)
+#define GPIO_VOL_UP		EXYNOS4_GPX3(3)
+
+#define GPIO_VIBTONE_PWM	GPIO_PWM0
+#define GPIO_MOTOR_EN		EXYNOS4_GPL2(4)
+#define GPIO_MOTOR_SDA	EXYNOS4212_GPM1(0)
+#define GPIO_MOTOR_SCL	EXYNOS4212_GPM1(1)
+
+#define GPIO_WLAN_EN		EXYNOS4212_GPM3(5)
+#define GPIO_WLAN_EN_AF		1
+#define GPIO_WLAN_HOST_WAKE	EXYNOS4_GPX2(5)
+#define GPIO_WLAN_HOST_WAKE_AF	0xF
+#define GPIO_WLAN_SDIO_CLK	EXYNOS4_GPK3(0)
+#define GPIO_WLAN_SDIO_CLK_AF	2
+#define GPIO_WLAN_SDIO_CMD	EXYNOS4_GPK3(1)
+#define GPIO_WLAN_SDIO_CMD_AF	2
+#define GPIO_WLAN_SDIO_D0	EXYNOS4_GPK3(3)
+#define GPIO_WLAN_SDIO_D0_AF	2
+#define GPIO_WLAN_SDIO_D1	EXYNOS4_GPK3(4)
+#define GPIO_WLAN_SDIO_D1_AF	2
+#define GPIO_WLAN_SDIO_D2	EXYNOS4_GPK3(5)
+#define GPIO_WLAN_SDIO_D2_AF	2
+#define GPIO_WLAN_SDIO_D3	EXYNOS4_GPK3(6)
+#define GPIO_WLAN_SDIO_D3_AF	2
+
+#define GPIO_ISP_TXD		EXYNOS4212_GPM4(5)
+#define GPIO_ISP_RXD		EXYNOS4212_GPM4(6)
+
+#if defined(CONFIG_IR_REMOCON_GPIO)
+#define GPIO_IRDA_CONTROL	EXYNOS4_GPL0(3)
+#elif defined(CONFIG_IR_REMOCON_MC96)
+#define GPIO_IRDA_WAKE		EXYNOS4_GPL0(3)
+#define GPIO_IRDA_IRQ		EXYNOS4212_GPM0(6)
+#define GPIO_IRDA_SDA		EXYNOS4_GPY0(0)
+#define GPIO_IRDA_SCL		EXYNOS4_GPY0(1)
+#endif
+
+#define GPIO_MHL_SDA_1_8V	EXYNOS4_GPY2(2)
+#define GPIO_MHL_SCL_1_8V	EXYNOS4_GPY2(3)
+#define GPIO_MHL_SDA_1_8V_00	EXYNOS4_GPB(2)
+#define GPIO_MHL_SCL_1_8V_00	EXYNOS4_GPB(3)
+
+#define GPIO_OTG_EN		EXYNOS4_GPF0(7)
+
+/* USB/UART switch */
+#define GPIO_USB_SEL0		EXYNOS4_GPY0(4)
+#define GPIO_USB_SEL1		EXYNOS4_GPY0(5)
+#define GPIO_USB_SEL_CP		EXYNOS4212_GPM0(7)
+#define GPIO_UART_SEL		EXYNOS4_GPL2(7)
+#if (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2)
+#define GPIO_UART_SEL2		EXYNOS4_GPY2(1)
+#endif
+
+/* charger */
+#define GPIO_CHG_SDA		EXYNOS4212_GPM2(0)
+#define GPIO_CHG_SCL		EXYNOS4212_GPM2(1)
+#define GPIO_TA_EN		EXYNOS4212_GPM4(2)
+#define GPIO_TA_nCHG		EXYNOS4212_GPM0(3)
+#define GPIO_TA_nCONNECTED	EXYNOS4_GPX1(4)
+
+/* adc */
+#define GPIO_ADC_SCL		EXYNOS4212_GPM4(0)
+#define GPIO_ADC_SDA		EXYNOS4212_GPM4(1)
+#define GPIO_ADC_INT		EXYNOS4_GPX0(1)
+
+/* fuelgauge */
+#define GPIO_FUEL_SCL		EXYNOS4_GPY0(3)
+#define GPIO_FUEL_SDA		EXYNOS4_GPY0(2)
+#define GPIO_FUEL_ALERT		EXYNOS4_GPX2(3)
+#define GPIO_IF_CON_SENSE	EXYNOS4_GPX3(0)
+
+#define GPIO_OLED_ID		EXYNOS4_GPF1(0)
+#define GPIO_ISP_RESET		EXYNOS4_GPF1(3)
+
+#define GPIO_S_LED_I2C_SCL	EXYNOS4_GPF2(6)
+#define GPIO_S_LED_I2C_SDA	EXYNOS4_GPF2(7)
+
+#define GPIO_PMIC_DVS1		EXYNOS4212_GPM3(0)
+#define GPIO_PMIC_DVS2		EXYNOS4212_GPM3(1)
+
+/* Definitions for Sii 9244B0 */
+#define GPIO_PMIC_DVS3		EXYNOS4212_GPM3(2)
+#if !defined(CONFIG_QC_MODEM)
+#define GPIO_BUCK2_SEL		EXYNOS4_GPX2(4)
+#define GPIO_BUCK3_SEL		EXYNOS4_GPX2(0)
+#define GPIO_BUCK4_SEL		EXYNOS4_GPX2(1)
+#else
+#define GPIO_BUCK2_SEL		EXYNOS4_GPL2(1)
+#define GPIO_BUCK3_SEL		EXYNOS4_GPL2(2)
+#define GPIO_BUCK4_SEL		EXYNOS4_GPX2(4)
+#endif
+#define GPIO_MHL_RST		EXYNOS4_GPF3(4)
+#define GPIO_MHL_INT		EXYNOS4_GPF3(5)
+#define GPIO_MHL_INT_AF		S3C_GPIO_SFN(0xF)
+#define GPIO_MHL_WAKE_UP	EXYNOS4212_GPJ1(4)
+
+#define GPIO_CAM_SW_EN		EXYNOS4212_GPJ1(0)
+#define GPIO_TORCH_EN		EXYNOS4212_GPJ1(1)
+#define GPIO_TORCH_SET		EXYNOS4212_GPJ1(2)
+
+#define GPIO_MHL_DSCL_2_8V	EXYNOS4_GPK1(0)
+#define GPIO_MHL_DSDA_2_8V	EXYNOS4_GPK1(2)
+
+#define MHL_INT_IRQ		gpio_to_irq(GPIO_MHL_INT)
+#define MHL_WAKEUP_IRQ		gpio_to_irq(GPIO_MHL_WAKE_UP)
+
+#define GPIO_HDMI_CEC		EXYNOS4_GPX3(6)
+#define GPIO_HDMI_HPD		EXYNOS4_GPX3(7)
+
+#define GPIO_CODEC_SDA_18V	EXYNOS4_GPD0(2)
+#define GPIO_CODEC_SCL_18V	EXYNOS4_GPD0(3)
+#define GPIO_CODEC_SDA_18V_00		EXYNOS4_GPB(0)
+#define GPIO_CODEC_SCL_18V_00		EXYNOS4_GPB(1)
+
+
+#define GPIO_CODEC_LDO_EN	EXYNOS4212_GPM4(4)
+#define GPIO_WM8994_LDO		EXYNOS4212_GPM4(4)
+
+/* Modem Interface GPIOs - M0 HSIC */
+#if !defined(CONFIG_SEC_MODEM_M0_TD)
+#define GPIO_ACTIVE_STATE	EXYNOS4_GPL0(0)
+#define GPIO_PDA_ACTIVE		EXYNOS4_GPL1(0)
+#define GPIO_PHONE_ON		EXYNOS4_GPL2(5)
+#define GPIO_SUSPEND_REQUEST	EXYNOS4212_GPM2(4)
+#define GPIO_CP_REQ_RESET	EXYNOS4212_GPM3(3)
+#define GPIO_GPS_CNTL		EXYNOS4212_GPM3(4)
+#define GPIO_IPC_SLAVE_WAKEUP	EXYNOS4_GPX1(0)
+#define GPIO_IPC_HOST_WAKEUP	EXYNOS4_GPX1(1)
+#define GPIO_CP_DUMP_INT	EXYNOS4212_GPM3(6)
+#define GPIO_PHONE_ACTIVE	EXYNOS4_GPX1(6)
+#define GPIO_CP_RST		EXYNOS4_GPX3(2)
+#define GPIO_SIM_DETECT		EXYNOS4_GPX1(7)
+#define GPIO_FM_RST EXYNOS4_GPC1(1)
+#define GPIO_AP_DUMP_INT	EXYNOS4212_GPM3(4)
+#else
+
+/* Modem Interface GPIOs - M0 SPI */
+#define GPIO_PDA_ACTIVE	EXYNOS4_GPF1(6)
+#define GPIO_PHONE_ON	EXYNOS4_GPL2(5)
+#define GPIO_PHONE_ACTIVE	EXYNOS4_GPX1(6)
+#define GPIO_AP_CP_INT1	EXYNOS4_GPX0(5)
+#define GPIO_AP_CP_INT2	EXYNOS4_GPX3(5)
+#define GPIO_CP_DUMP_INT	EXYNOS4212_GPM3(6)
+#define GPIO_IPC_MRDY	EXYNOS4_GPX0(4)
+#define GPIO_IPC_SRDY	EXYNOS4_GPX1(0)
+#define GPIO_IPC_SUB_MRDY	EXYNOS4_GPX3(2)
+#define GPIO_IPC_SUB_SRDY	EXYNOS4_GPX1(1)
+
+#define GPIO_CP_RST	EXYNOS4_GPF1(1)
+#define GPIO_CP_REQ_RESET	EXYNOS4_GPF1(1)
+#define GPIO_IPC_SLAVE_WAKEUP	EXYNOS4_GPX2(0)
+#define GPIO_IPC_HOST_WAKEUP	EXYNOS4_GPX2(0)
+#define GPIO_SUSPEND_REQUEST	EXYNOS4_GPF1(1)
+#define GPIO_ISP_INT		EXYNOS4_GPF1(1)
+#define GPIO_ACTIVE_STATE	EXYNOS4_GPF1(1)
+
+#define GPIO_FM_RST	EXYNOS4_GPC1(0)
+
+#define IRQ_IPC_SRDY		IRQ_EINT8
+#define IRQ_PHONE_ACTIVE	IRQ_EINT14
+#define IRQ_IPC_SRDY		IRQ_EINT8
+#define IRQ_IPC_SUB_SRDY	IRQ_EINT9
+#define IRQ_CP_DUMP_INT	IRQ_EINT10
+#endif
+
+#define GPIO_OK_KEY_ANDROID	EXYNOS4_GPX1(2)
+#define GPIO_FM_INT_REV15	EXYNOS4_GPX1(4)
+#define GPIO_FM_INT_REV07	EXYNOS4_GPX1(3)
+#define GPIO_FM_INT		EXYNOS4_GPX1(3)
+
+#if defined(CONFIG_TDMB) || defined(CONFIG_TDMB_MODULE)
+#define GPIO_TDMB_EN		EXYNOS4_GPL0(0)
+#define GPIO_TDMB_INT		EXYNOS4_GPF0(2)
+#define GPIO_TDMB_IRQ		gpio_to_irq(GPIO_TDMB_INT)
+#define GPIO_TDMB_INT_AF	0xf
+#define GPIO_TDMB_SPI_CLK	EXYNOS4_GPC1(1)
+#define GPIO_TDMB_SPI_CS	EXYNOS4_GPC1(2)
+#define GPIO_TDMB_SPI_MISO	EXYNOS4_GPC1(3)
+#define GPIO_TDMB_SPI_MOSI	EXYNOS4_GPC1(4)
+#endif
+
+#if defined(CONFIG_FB_S5P_NT71391)
+#define GPIO_LCD_EN		EXYNOS4_GPC0(1)
+#define GPIO_LCD_22V_EN_00	EXYNOS4_GPC0(1)
+#define GPIO_LCD_FREQ_SCL	EXYNOS4_GPF0(4)
+#define GPIO_LCD_FREQ_SDA	EXYNOS4_GPF0(5)
+#define GPIO_LED_BACKLIGHT_PWM	EXYNOS4_GPD0(1)
+#define GPIO_LED_BACKLIGHT_RESET	EXYNOS4212_GPM0(1)
+#define GPIO_LED_BACKLIGHT_SDA	EXYNOS4212_GPM1(0)
+#define GPIO_LED_BACKLIGHT_SCL	EXYNOS4212_GPM1(1)
+#endif
+
+
+#if defined(CONFIG_QC_MODEM)
+/* Modem Interface GPIOs - MDM */
+#define GPIO_MODEM_BOOT_MODE		EXYNOS4_GPD0(1)
+#define GPIO_MDM2AP_HSIC_READY		EXYNOS4_GPL0(0)
+#define GPIO_AP2MDM_STATUS		EXYNOS4_GPL1(0)
+#define GPIO_MDM2AP_HSIC_PWR_ACTIVE	EXYNOS4_GPC0(2)	/* AP2MDM_IPC2 */
+#define GPIO_WCN_PRIORITY		EXYNOS4_GPC0(0)
+#define GPIO_MDM_LTE_FRAME_SYNC		EXYNOS4_GPC0(4)
+#define GPIO_AP2MDM_ERR_FATAL		EXYNOS4_GPC0(3)
+#define GPIO_AP2MDM_PON_RESET_N		EXYNOS4_GPL2(5)
+#define GPIO_AP2MDM_WAKEUP		EXYNOS4212_GPM2(4)
+#define GPIO_AP2MDM_SOFT_RESET		EXYNOS4212_GPM3(3)
+#define GPIO_AP2MDM_PMIC_RESET_N		EXYNOS4212_GPM3(4)
+#define GPIO_MDM2AP_STATUS		EXYNOS4_GPX2(0)
+#define GPIO_MDM2AP_HSIC_RESUME_REQ	EXYNOS4_GPX2(1)	/* AP2MDM_IPC3 */
+#define GPIO_AP2MDM_VDDMIN		EXYNOS4_GPX1(0)
+#define GPIO_MDM2AP_VDDMIN		EXYNOS4_GPX1(1)
+#define GPIO_MDM2AP_ERR_FATAL		EXYNOS4_GPX1(2)
+#define GPIO_MDM_LTE_ACTIVE		EXYNOS4_GPX1(6)
+#define GPIO_AP2MDM_HSIC_PORT_ACTIVE	EXYNOS4_GPX3(2)	/* AP2MDM_IPC1 */
+#ifdef CONFIG_SIM_DETECT
+#define GPIO_SIM_DETECT			EXYNOS4_GPX1(7) /* sim detect */
+#endif
+#endif
+
+#endif /* __MACH_GPIO_MIDAS_H */
diff -Naur ./arch/arm/mach-exynos/include/mach/gpio-rev00-m0ctc.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-rev00-m0ctc.h
--- ./arch/arm/mach-exynos/include/mach/gpio-rev00-m0ctc.h	2012-12-08 20:40:46.125821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-rev00-m0ctc.h	2012-11-22 09:13:15.000000000 +0100
@@ -327,6 +327,10 @@
 #define ESC_PHONE_ACTIVE_IRQ	IRQ_EINT(12)
 #define GPIO_ESC_DPRAM_INT		EXYNOS4_GPX3(5)
 #define ESC_DPRAM_INT_IRQ		IRQ_EINT(29)
+
+#if defined(CONFIG_SIM_SLOT_SWITCH)
+#define GPIO_UIM_SIM_SEL	EXYNOS4212_GPM0(7)
+#endif
 #endif
 
 #endif /* __MACH_GPIO_C1_H */
diff -Naur ./arch/arm/mach-exynos/include/mach/gpio-rev00-m3.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-rev00-m3.h
--- ./arch/arm/mach-exynos/include/mach/gpio-rev00-m3.h	2012-12-08 20:40:46.125821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-rev00-m3.h	2012-11-22 09:13:15.000000000 +0100
@@ -13,13 +13,8 @@
 #define GPIO_BT_CTS			EXYNOS4_GPA0(2)
 #define GPIO_BT_RTS			EXYNOS4_GPA0(3)
 
-#if defined(CONFIG_MACH_M3_JPN_DCM)
-#define GPIO_MSENSOR_SDA_18V		EXYNOS4_GPA0(6)
-#define GPIO_MSENSOR_SCL_18V		EXYNOS4_GPA0(7)
-#else
 #define GPIO_NFC_SDA_18V		EXYNOS4_GPA0(6)
 #define GPIO_NFC_SCL_18V		EXYNOS4_GPA0(7)
-#endif
 
 #define GPIO_AP_RXD_18V			EXYNOS4_GPA1(0)
 #define GPIO_AP_TXD_18V			EXYNOS4_GPA1(1)
@@ -50,11 +45,19 @@
 
 #define GPIO_RGB_SDA_1_8V		EXYNOS4_GPF0(0)
 #define GPIO_RGB_SCL_1_8V		EXYNOS4_GPF0(1)
+#if defined(CONFIG_MACH_M3_USA_TMO)
+#define GPIO_PS_ALS_SDA_28V	EXYNOS4_GPF0(0)
+#define GPIO_PS_ALS_SCL_28V	EXYNOS4_GPF0(1)
+#endif
 #define GPIO_GYRO_INT			EXYNOS4_GPF0(3)
 #define GPIO_MHL_SDA_1_8V		EXYNOS4_GPF0(4)
+#if !defined(CONFIG_MACH_M3_USA_TMO)
 #define GPIO_BARO_INT			EXYNOS4_GPF0(5)
+#endif
 #define GPIO_MHL_SCL_1_8V		EXYNOS4_GPF0(6)
+#if !defined(CONFIG_MACH_M3_USA_TMO)
 #define GPIO_OTG_EN			EXYNOS4_GPF0(7)
+#endif
 
 #define GPIO_MDM2AP_HSIC_READY		EXYNOS4_GPF1(1)
 #define GPIO_VT_CAM_ID			EXYNOS4_GPF1(2)
@@ -122,7 +125,7 @@
 
 #define GPIO_3_TOUCH_SCL		EXYNOS4_GPL0(1)
 #define GPIO_3_TOUCH_SDA		EXYNOS4_GPL0(2)
-#ifdef CONFIG_TARGET_LOCALE_EUR
+#if defined(CONFIG_TARGET_LOCALE_EUR) || defined(CONFIG_MACH_M3_USA_TMO)
 #define GPIO_VPS_SOUND_EN		EXYNOS4_GPL0(3)
 #endif
 #define GPIO_HDMI_EN			EXYNOS4_GPL0(4)
@@ -133,21 +136,12 @@
 #define GPIO_NFC_EN			EXYNOS4_GPL2(6)
 #define GPIO_NFC_FIRMWARE		EXYNOS4_GPL2(7)
 
-#if defined(CONFIG_MACH_M3_JPN_DCM)
-#define GPIO_LED_VDD_EN		EXYNOS4212_GPM0(5)
-#define GPIO_3_TOUCH_EN		GPIO_LED_VDD_EN
-#define GPIO_ISP_STANDBY		EXYNOS4212_GPM0(6)
-#define GPIO_CAM_IO_EN			EXYNOS4212_GPM0(7)
-#define GPIO_ISP_CORE_EN		EXYNOS4212_GPM1(0)
-#define GPIO_CAM_AF_EN			EXYNOS4212_GPM1(1)
-#else
 #define GPIO_LED_VDD_EN			EXYNOS4212_GPM0(0)
 #define GPIO_3_TOUCH_EN			GPIO_LED_VDD_EN
 #define GPIO_ISP_STANDBY		EXYNOS4212_GPM0(1)
 #define GPIO_CAM_IO_EN			EXYNOS4212_GPM0(2)
 #define GPIO_ISP_CORE_EN		EXYNOS4212_GPM0(3)
 #define GPIO_CAM_AF_EN			EXYNOS4212_GPM0(4)
-#endif
 
 #define GPIO_HW_REV0			EXYNOS4212_GPM1(2)
 #define GPIO_HW_REV1			EXYNOS4212_GPM1(3)
@@ -166,6 +160,10 @@
 #define GPIO_PMIC_DVS3			EXYNOS4212_GPM3(2)
 #define GPIO_AP2MDM_SOFT_RESET		EXYNOS4212_GPM3(3)
 
+#if defined(CONFIG_MACH_M3_USA_TMO)
+#define GPIO_CAM_SENSOR_CORE_EN		EXYNOS4212_GPM4(1)
+#define GPIO_BATT_PRESENT_N_INT		EXYNOS4_GPX1(3)
+#endif
 #define GPIO_VT_CAM_SCL_18V		EXYNOS4212_GPM4(2)
 #define GPIO_VT_CAM_SDA_18V		EXYNOS4212_GPM4(3)
 
@@ -185,20 +183,21 @@
 #define GPIO_MDM_LTE_ACTIVE		EXYNOS4_GPX1(6)
 #define GPIO_NFC_IRQ			EXYNOS4_GPX1(7)
 
+#define GPIO_VOL_UP_00			EXYNOS4_GPX3(3)
+#define GPIO_VOL_DOWN_00		EXYNOS4_GPX2(2)
+
 #define GPIO_VOL_UP			EXYNOS4_GPX2(2)
 #define GPIO_FUEL_ALERT			EXYNOS4_GPX2(3)
 
-#if defined(CONFIG_MACH_M3_JPN_DCM)
-#define GPIO_V_BUS_INT			EXYNOS4_GPX1(4)
-#else
 #define GPIO_V_BUS_INT			EXYNOS4_GPX2(4)
-#endif
 
 #define GPIO_WLAN_HOST_WAKE		EXYNOS4_GPX2(5)
 #define GPIO_BT_HOST_WAKE		EXYNOS4_GPX2(6)
 #define GPIO_nPOWER			EXYNOS4_GPX2(7)
 
+#if !defined(CONFIG_MACH_M3_USA_TMO)
 #define GPIO_WPC_INT			EXYNOS4_GPX3(0)
+#endif
 #define GPIO_BT_WAKE			EXYNOS4_GPX3(1)
 #define GPIO_AP2MDM_HSIC_PORT_ACTIVE	EXYNOS4_GPX3(2)
 #define GPIO_VOL_DOWN			EXYNOS4_GPX3(3)
@@ -206,25 +205,28 @@
 #define GPIO_EAR_SEND_END		EXYNOS4_GPX3(6)
 #define GPIO_HDMI_HPD			EXYNOS4_GPX3(7)
 
+#if !defined(CONFIG_MACH_M3_USA_TMO)
 #define GPIO_BSENSE_SDA_18V		EXYNOS4_GPY1(0)
 #define GPIO_BENSE_SCL_18V		EXYNOS4_GPY1(1)
+#endif
+
+#ifdef	CONFIG_MACH_M3_USA_TMO
+#define GPIO_HDMI_HPD_EN		EXYNOS4_GPY1(3)
+#endif
 
 #define GPIO_TF_EN			EXYNOS4_GPY2(0)
+#if defined(CONFIG_MACH_M3_USA_TMO)
+#define GPIO_MSENSE_RST_N		EXYNOS4_GPY2(2)
+#endif
 #define GPIO_AP2MDM_PMIC_RESET_N	EXYNOS4_GPY2(3)
 
-#if defined(CONFIG_MACH_M3_JPN_DCM)
-#define GPIO_NFC_SDA_18V		EXYNOS4_GPY2(4)
-#define GPIO_NFC_SCL_18V		EXYNOS4_GPY2(5)
-#else
 #define GPIO_MSENSOR_SDA_18V		EXYNOS4_GPY2(4)
 #define GPIO_MSENSOR_SCL_18V		EXYNOS4_GPY2(5)
-#endif
 
 #define	GPIO_MM_I2S_CLK			EXYNOS5_GPZ(0)
 #define	GPIO_MM_I2S_SYNC		EXYNOS5_GPZ(2)
-#define	GPIO_MM_I2S_DI			EXYNOS5_GPZ(3)
-#define	GPIO_MM_I2S_DO			EXYNOS5_GPZ(4)
-
+#define GPIO_MM_I2S_DI			EXYNOS5_GPZ(3)
+#define GPIO_MM_I2S_DO			EXYNOS5_GPZ(4)
 
 #define GPIO_MHL_INT_AF			S3C_GPIO_SFN(0xF)
 #define GPIO_WLAN_EN_AF			1
@@ -240,25 +242,39 @@
 #define MHL_INT_IRQ			gpio_to_irq(GPIO_MHL_INT)
 #define MHL_WAKEUP_IRQ			gpio_to_irq(GPIO_MHL_WAKE_UP)
 
+#if defined(CONFIG_MACH_M3_JPN_DCM)
+#define GPIO_MSENSOR_SDA_18V_R1		EXYNOS4_GPA0(6)
+#define GPIO_MSENSOR_SCL_18V_R1		EXYNOS4_GPA0(7)
+#define GPIO_3_TOUCH_EN_R1		EXYNOS4212_GPM0(5)
+#define GPIO_ISP_STANDBY_R1		EXYNOS4212_GPM0(6)
+#define GPIO_CAM_IO_EN_R1		EXYNOS4212_GPM0(7)
+#define GPIO_ISP_CORE_EN_R1		EXYNOS4212_GPM1(0)
+#define GPIO_CAM_AF_EN_R1		EXYNOS4212_GPM1(1)
+#define GPIO_V_BUS_INT_R1		EXYNOS4_GPX1(4)
+#define FELICA_GPIO_I2C_SDA_R1		EXYNOS4_GPY2(4)
+#define FELICA_GPIO_I2C_SCL_R1		EXYNOS4_GPY2(5)
+#endif
+
 #if defined(CONFIG_FELICA)
-#define  FELICA_GPIO_I2C_SDA   EXYNOS4_GPY2(4)
-#define  FELICA_GPIO_I2C_SCL   EXYNOS4_GPY2(5)
-#define  FELICA_UART3RX        EXYNOS4_GPA1(4)
-#define  FELICA_GPIO_RFS       EXYNOS4_GPL2(6)
-#define  FELICA_GPIO_PON       EXYNOS4_GPL2(7)
-#define  FELICA_GPIO_INT       EXYNOS4_GPX1(7)
+#define FELICA_GPIO_I2C_SDA		EXYNOS4_GPA0(6)
+#define FELICA_GPIO_I2C_SCL		EXYNOS4_GPA0(7)
+#define FELICA_UART3RX			EXYNOS4_GPA1(4)
+#define FELICA_GPIO_RFS			EXYNOS4_GPL2(6)
+#define FELICA_GPIO_PON			EXYNOS4_GPL2(7)
+#define FELICA_GPIO_INT			EXYNOS4_GPX1(7)
 #endif
 
 #if defined(CONFIG_ISDBT)
-#define GPIO_ISDBT_RST_N    EXYNOS4_GPC0(0)
-#define GPIO_ISDBT_EN       EXYNOS4_GPC0(2)
-#define GPIO_ISDBT_INT      EXYNOS4_GPC0(4)
-#define GPIO_ISDBT_IRQ      gpio_to_irq(GPIO_ISDBT_INT)
-#define GPIO_ISDBT_INT_AF   0xf
-#define GPIO_ISDBT_SPI_CLK  EXYNOS4_GPC1(1)
-#define GPIO_ISDBT_SPI_CS   EXYNOS4_GPC1(2)
-#define GPIO_ISDBT_SPI_MISO EXYNOS4_GPC1(3)
-#define GPIO_ISDBT_SPI_MOSI EXYNOS4_GPC1(4)
+#define GPIO_ISDBT_RST_N		EXYNOS4_GPC0(0)
+#define GPIO_ISDBT_EN			EXYNOS4_GPC0(2)
+#define GPIO_ISDBT_INT			EXYNOS4_GPC0(4)
+#define GPIO_ISDBT_IRQ			gpio_to_irq(GPIO_ISDBT_INT)
+#define GPIO_ISDBT_INT_AF		0xf
+#define GPIO_ISDBT_SPI_CLK		EXYNOS4_GPC1(1)
+#define GPIO_ISDBT_SPI_CS		EXYNOS4_GPC1(2)
+#define GPIO_ISDBT_SPI_MISO		EXYNOS4_GPC1(3)
+#define GPIO_ISDBT_SPI_MOSI		EXYNOS4_GPC1(4)
 #endif
 
+
 #endif /* __MACH_GPIO_C2_H */
diff -Naur ./arch/arm/mach-exynos/include/mach/gpio-rev00-p4notepq.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-rev00-p4notepq.h
--- ./arch/arm/mach-exynos/include/mach/gpio-rev00-p4notepq.h	2012-12-08 20:40:46.125821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-rev00-p4notepq.h	2012-11-22 09:13:15.000000000 +0100
@@ -43,7 +43,6 @@
 #define GPIO_CAM_EN1		EXYNOS4212_GPJ0(6)
 #define GPIO_5M_nSTBY		EXYNOS4212_GPJ0(7)
 #else
-#define GPIO_3M_nSTBY		EXYNOS4212_GPM0(6)
 #endif
 #ifdef CONFIG_VIDEO_S5K5CCGX_COMMON
 #define GPIO_2M_nRST		EXYNOS4212_GPM1(6)
@@ -199,7 +198,7 @@
 #define GPIO_IRDA_CONTROL	EXYNOS4_GPL0(3)
 #elif defined(CONFIG_IR_REMOCON_MC96)
 #define GPIO_IRDA_WAKE		EXYNOS4_GPL0(3)
-#define GPIO_IRDA_IRQ		EXYNOS4_GPM0(6)
+#define GPIO_IRDA_IRQ		EXYNOS4212_GPM0(6)
 #define GPIO_IRDA_SDA		EXYNOS4_GPY0(0)
 #define GPIO_IRDA_SCL		EXYNOS4_GPY0(1)
 #endif
@@ -357,6 +356,7 @@
 #define GPIO_LVDS_NSHDN		EXYNOS4212_GPM0(5)
 #endif
 
+
 #if defined(CONFIG_QC_MODEM)
 /* Modem Interface GPIOs - MDM */
 #define GPIO_MODEM_BOOT_MODE		EXYNOS4_GPD0(1)
@@ -377,6 +377,9 @@
 #define GPIO_MDM2AP_ERR_FATAL		EXYNOS4_GPX1(2)
 #define GPIO_MDM_LTE_ACTIVE		EXYNOS4_GPX1(6)
 #define GPIO_AP2MDM_HSIC_PORT_ACTIVE	EXYNOS4_GPX3(2)	/* AP2MDM_IPC1 */
+#ifdef CONFIG_SIM_DETECT
+#define GPIO_SIM_DETECT			EXYNOS4_GPX1(7) /* sim detect */
+#endif
 #endif
 
 #endif /* __MACH_GPIO_MIDAS_H */
diff -Naur ./arch/arm/mach-exynos/include/mach/gpio-rev00-t0ctc.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-rev00-t0ctc.h
--- ./arch/arm/mach-exynos/include/mach/gpio-rev00-t0ctc.h	2012-12-08 20:40:46.125821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-rev00-t0ctc.h	2012-11-22 09:13:15.000000000 +0100
@@ -144,10 +144,9 @@
 #define GPIO_MHL_WAKE_UP	EXYNOS4212_GPJ1(4)
 #define MHL_INT_IRQ		gpio_to_irq(GPIO_MHL_INT)
 #define MHL_WAKEUP_IRQ		gpio_to_irq(GPIO_MHL_WAKE_UP)
-#endif
-
 #define GPIO_HDMI_EN		EXYNOS4_GPL0(4)
 #define GPIO_HDMI_HPD		EXYNOS4_GPX3(7)
+#endif
 
 /* Touch key */
 #define GPIO_3_TOUCH_SCL	EXYNOS4_GPL0(1)
@@ -192,9 +191,6 @@
 #endif
 
 /* Others */
-#define GPIO_LCD_18V_EN		EXYNOS4_GPC0(1)
-#define GPIO_LCD_22V_EN_00	EXYNOS4_GPC0(1) /* obsoleted */
-
 #define GPIO_OTG_EN		EXYNOS4_GPF0(7)
 
 #define GPIO_OLED_ID		EXYNOS4_GPF1(0)
@@ -227,7 +223,6 @@
 /* rev0.0 */
 #define GPIO_TSP_LDO_EN		EXYNOS4212_GPJ0(6)
 /* GPIO_MHL_SEL			EXYNOS4212_GPJ0(5)	*/
-/* GPIO_LCD_22V_EN		EXYNOS4_GPC0(1)		*/
 
 
 #if !defined(CONFIG_MACH_T0_CHN_CTC)
@@ -343,13 +338,13 @@
 #define GPIO_USB_BOOT_EN_REV06	EXYNOS4_GPF2(2)
 #define GPIO_BOOT_SW_SEL_REV06	EXYNOS4_GPF3(4)
 
-#define GPIO_IPC_SLAVE_WAKEUP	EXYNOS4_GPC0(3)
+#define GPIO_IPC_SLAVE_WAKEUP	EXYNOS4_GPC0(0)
 #define GPIO_IPC_HOST_WAKEUP	EXYNOS4_GPC0(0)
 #define GPIO_CP_DUMP_INT		EXYNOS4_GPX1(2)
 
 #define GPIO_CP_MSM_PWRON		EXYNOS4_GPL2(5)
 #define GPIO_CP_MSM_RST			EXYNOS4_GPL2(1)
-#define GPIO_CP_MSM_PMU_RST		EXYNOS4_GPC0(0)
+#define GPIO_CP_MSM_PMU_RST		EXYNOS4_GPC0(3)
 #define GPIO_CP_MSM_DUMP		EXYNOS4_GPX1(2)
 
 #define GPIO_MSM_PHONE_ACTIVE	EXYNOS4_GPX1(6)
diff -Naur ./arch/arm/mach-exynos/include/mach/gpio-rev00-t0cu-duos.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-rev00-t0cu-duos.h
--- ./arch/arm/mach-exynos/include/mach/gpio-rev00-t0cu-duos.h	2012-12-08 20:40:46.125821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-rev00-t0cu-duos.h	2012-11-22 09:13:15.000000000 +0100
@@ -185,9 +185,6 @@
 #endif
 
 /* Others */
-#define GPIO_LCD_18V_EN		EXYNOS4_GPC0(1)
-#define GPIO_LCD_22V_EN_00	EXYNOS4_GPC0(1) /* obsoleted */
-
 #define GPIO_OTG_EN		EXYNOS4_GPF0(7)
 
 #define GPIO_OLED_ID		EXYNOS4_GPF1(0)
@@ -227,7 +224,6 @@
 /* rev0.0 */
 #define GPIO_TSP_LDO_EN		EXYNOS4212_GPJ0(6)
 /* GPIO_MHL_SEL			EXYNOS4212_GPJ0(5)	*/
-/* GPIO_LCD_22V_EN		EXYNOS4_GPC0(1)		*/
 
 
 /* Modem Interface GPIOs - M0 HSIC */
diff -Naur ./arch/arm/mach-exynos/include/mach/gpio-rev00-t0.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-rev00-t0.h
--- ./arch/arm/mach-exynos/include/mach/gpio-rev00-t0.h	2012-12-08 20:40:46.125821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-rev00-t0.h	2012-11-22 09:13:15.000000000 +0100
@@ -192,9 +192,6 @@
 #endif
 
 /* Others */
-#define GPIO_LCD_18V_EN		EXYNOS4_GPC0(1)
-#define GPIO_LCD_22V_EN_00	EXYNOS4_GPC0(1) /* obsoleted */
-
 #define GPIO_OTG_EN		EXYNOS4_GPF0(7)
 
 #define GPIO_OLED_ID		EXYNOS4_GPF1(0)
@@ -240,7 +237,6 @@
 /* rev0.0 */
 #define GPIO_TSP_LDO_EN		EXYNOS4212_GPJ0(6)
 /* GPIO_MHL_SEL			EXYNOS4212_GPJ0(5)	*/
-/* GPIO_LCD_22V_EN		EXYNOS4_GPC0(1)		*/
 
 
 /* Modem Interface GPIOs - M0 HSIC */
@@ -340,6 +336,14 @@
 #define GPIO_ISDBT_SPI_CS	EXYNOS4_GPC1(2)
 #define GPIO_ISDBT_SPI_MISO	EXYNOS4_GPC1(3)
 #define GPIO_ISDBT_SPI_MOSI	EXYNOS4_GPC1(4)
+
+#if defined(CONFIG_ISDBT_ANT_DET)
+#define GPIO_ISDBT_ANT_DET		EXYNOS4_GPL2(4)
+#define GPIO_ISDBT_IRQ_ANT_DET		gpio_to_irq(GPIO_ISDBT_ANT_DET)
+#define GPIO_ISDBT_ANT_DET_REV08	EXYNOS4_GPX1(3)
+#define GPIO_ISDBT_IRQ_ANT_DET_REV08	gpio_to_irq(GPIO_ISDBT_ANT_DET_REV08)
+#endif
+
 #endif
 
 /*BARCODE_EMUL*/
diff -Naur ./arch/arm/mach-exynos/include/mach/gpio-u1.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-u1.h
--- ./arch/arm/mach-exynos/include/mach/gpio-u1.h	2012-12-08 20:40:46.125821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpio-u1.h	2012-11-22 09:13:15.000000000 +0100
@@ -93,7 +93,6 @@
 #define GPIO_GPS_PWR_EN_SPI	EXYNOS4210_GPE0(3)
 #define GPIO_GPS_nRST		EXYNOS4210_GPE0(4)
 #else
-#define GPIO_GPS_PWR_EN_NTT	EXYNOS4210_GPE2(3)
 #define GPIO_GPS_PWR_EN		EXYNOS4210_GPE0(3)
 #define GPIO_GPS_nRST		EXYNOS4210_GPE0(4)
 #endif
@@ -235,6 +234,41 @@
 #define GPIO_USB_I2C_SCL        EXYNOS4_GPY1(0)
 #endif /* CONFIG_USBHUB_USB3803 */
 
+/* GPIOs for IDPRAM driver of U1_NA_SPR(Gaudi) */
+#if defined(CONFIG_MACH_U1_NA_SPR)
+#define S5PV310_GPE0_0_MDM_WEn          EXYNOS4210_GPE0(0)
+#define S5PV310_GPE0_1_MDM_CSn          EXYNOS4210_GPE0(1)
+#define S5PV310_GPE0_2_MDM_Rn           EXYNOS4210_GPE0(2)
+#define S5PV310_GPE0_3_MDM_IRQn         EXYNOS4210_GPE0(3)
+#define S5PV310_GPE0_4_MDM_ADVN         EXYNOS4210_GPE0(4)
+
+#define S5PV310_GPE3_0_MDM_DATA_0       EXYNOS4210_GPE3(0)
+#define S5PV310_GPE3_1_MDM_DATA_1       EXYNOS4210_GPE3(1)
+#define S5PV310_GPE3_2_MDM_DATA_2       EXYNOS4210_GPE3(2)
+#define S5PV310_GPE3_3_MDM_DATA_3       EXYNOS4210_GPE3(3)
+#define S5PV310_GPE3_4_MDM_DATA_4       EXYNOS4210_GPE3(4)
+#define S5PV310_GPE3_5_MDM_DATA_5       EXYNOS4210_GPE3(5)
+#define S5PV310_GPE3_6_MDM_DATA_6       EXYNOS4210_GPE3(6)
+#define S5PV310_GPE3_7_MDM_DATA_7       EXYNOS4210_GPE3(7)
+
+#define S5PV310_GPE4_0_MDM_DATA_8       EXYNOS4210_GPE4(0)
+#define S5PV310_GPE4_1_MDM_DATA_9       EXYNOS4210_GPE4(1)
+#define S5PV310_GPE4_2_MDM_DATA_10      EXYNOS4210_GPE4(2)
+#define S5PV310_GPE4_3_MDM_DATA_11      EXYNOS4210_GPE4(3)
+#define S5PV310_GPE4_4_MDM_DATA_12      EXYNOS4210_GPE4(4)
+#define S5PV310_GPE4_5_MDM_DATA_13      EXYNOS4210_GPE4(5)
+#define S5PV310_GPE4_6_MDM_DATA_14      EXYNOS4210_GPE4(6)
+#define S5PV310_GPE4_7_MDM_DATA_15      EXYNOS4210_GPE4(7)
+
+#define GPIO_QSC_PHONE_ON               EXYNOS4_GPC1(1)
+#define GPIO_QSC_PHONE_RST              EXYNOS4_GPX1(4)
+#define GPIO_QSC_PHONE_ACTIVE           EXYNOS4_GPX1(6)
+#define IRQ_QSC_PHONE_ACTIVE		GPIO_QSC_PHONE_ACTIVE
+#define GPIO_C210_DPRAM_INT_N           EXYNOS4_GPX1(0)
+#define GPIO_DPRAM_INT_CP_N		S5PV310_GPE0_3_MDM_IRQn
+
+#endif
+/* End */
 
 #define GPIO_WLAN_EN		EXYNOS4_GPL1(2)
 #define GPIO_WLAN_EN_AF		1
@@ -369,6 +403,7 @@
 #define GPIO_DPRAM_WEN		EXYNOS4_GPY0(5)
 #define GPIO_DPRAM_LBN		EXYNOS4_GPY1(0)
 #define GPIO_DPRAM_UBN		EXYNOS4_GPY1(1)
+#define GPIO_DPRAM_BUSY		EXYNOS4_GPY1(2)
 #endif
 
 #if defined(CONFIG_TARGET_LOCALE_NA) && defined(CONFIG_WIMAX_CMC)
diff -Naur ./arch/arm/mach-exynos/include/mach/gpufreq.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpufreq.h
--- ./arch/arm/mach-exynos/include/mach/gpufreq.h	2012-12-08 20:40:46.125821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/gpufreq.h	2012-11-22 09:13:15.000000000 +0100
@@ -15,7 +15,7 @@
 extern int mali_dvfs_bottom_lock_push(void);
 extern int mali_dvfs_bottom_lock_pop(void);
 
-static inline int exynos_gpufreq_lock(void)
+static inline int exynos_gpufreq_lock(int dummy_val)
 {
 	return mali_dvfs_bottom_lock_push();
 }
@@ -25,6 +25,18 @@
 	return mali_dvfs_bottom_lock_pop();
 }
 
+#elif defined(CONFIG_CPU_EXYNOS4412)
+extern int mali_dvfs_bottom_lock_push(int lock_step);
+extern int mali_dvfs_bottom_lock_pop(void);
+
+static inline int exynos_gpufreq_lock(int lock_step)
+{
+	return mali_dvfs_bottom_lock_push(lock_step);
+}
+static inline int exynos_gpufreq_unlock(void)
+{
+	return mali_dvfs_bottom_lock_pop();
+}
 #else
 static inline int exynos_gpufreq_lock(void)
 {
diff -Naur ./arch/arm/mach-exynos/include/mach/kona-input.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/kona-input.h
--- ./arch/arm/mach-exynos/include/mach/kona-input.h	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/kona-input.h	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,20 @@
+/*
+ *  arch/arm/mach-exynos/include/mach/p4-input.h
+ *
+ * Copyright (c) 2012 Samsung Electronics Co., Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef __kona_INPUT_H
+#define __kona_INPUT_H __FILE__
+
+void kona_tsp_init(u32 system_rev);
+void kona_key_init(void);
+#if defined(CONFIG_TOUCHSCREEN_SYNAPTICS_S7301)
+extern void synaptics_ts_charger_infom(bool en);
+#endif
+
+#endif /* __kona_INPUT_H */
diff -Naur ./arch/arm/mach-exynos/include/mach/map-exynos5.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/map-exynos5.h
--- ./arch/arm/mach-exynos/include/mach/map-exynos5.h	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/map-exynos5.h	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,295 @@
+/* linux/arch/arm/mach-exynos/include/mach/map-exynos5.h
+ *
+ * Copyright (c) 2011 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com/
+ *
+ * EXYNOS5 - Memory map definitions
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+*/
+
+#ifndef __ASM_ARCH_MAP_EXYNOS5_H
+#define __ASM_ARCH_MAP_EXYNOS5_H __FILE__
+
+#define EXYNOS5_PA_SYSRAM		0x02020000
+#define EXYNOS5_PA_SYSRAM_NS            0x0204F000
+
+#define EXYNOS5_PA_CHIPID		0x10000000
+
+#define EXYNOS5_PA_CMU			0x10010000
+
+#define EXYNOS5_PA_PMU			0x10040000
+
+#define EXYNOS5_PA_HDMI_CEC		0x101B0000
+#define EXYNOS5_PA_SYSTIMER		0x101C0000
+#define EXYNOS5_PA_WATCHDOG		0x101D0000
+#define EXYNOS5_PA_RTC			0x101E0000
+
+#define EXYNOS5_PA_COMBINER		0x10440000
+
+#define EXYNOS5250_REV0_PA_GIC_CPU	0x10480000
+#define EXYNOS5250_REV0_PA_GIC_DIST	0x10490000
+#define EXYNOS5250_REV1_PA_GIC_CPU	0x10482000
+#define EXYNOS5250_REV1_PA_GIC_DIST	0x10481000
+
+#define EXYNOS5_PA_SYSCON		0x10050000
+#define EXYNOS5_PA_TMU			0x10060000
+#define EXYNOS5_PA_ACE			0x10830000
+
+#define EXYNOS5_PA_DMC_PHY0		0x10C00000
+#define EXYNOS5_PA_DMC_PHY1		0x10C10000
+#define EXYNOS5_PA_DMC			0x10DD0000
+
+#define EXYNOS5_PA_PPMU_DDR_C		0x10C40000
+#define EXYNOS5_PA_PPMU_DDR_R1		0x10C50000
+#define EXYNOS5_PA_PPMU_CPU		0x10C60000
+#define EXYNOS5_PA_PPMU_DDR_L		0x10CB0000
+#define EXYNOS5_PA_PPMU_RIGHT0_BUS      0x13660000
+
+#define EXYNOS5_PA_C2C			0x10E00000
+#define EXYNOS5_PA_C2C_CP		0x10E40000
+
+#define EXYNOS5_PA_SYSMMU_MDMA1		0x10A40000
+#define EXYNOS5_PA_SYSMMU_SSS		0x10A50000
+#define EXYNOS5_PA_SYSMMU_2D		0x10A60000
+#define EXYNOS5_PA_SYSMMU_MFC_R		0x11200000
+#define EXYNOS5_PA_SYSMMU_MFC_L		0x11210000
+#define EXYNOS5_PA_SYSMMU_ROTATOR	0x11D40000
+#define EXYNOS5_PA_SYSMMU_MDMA2		0x11D50000
+#define EXYNOS5_PA_SYSMMU_JPEG		0x11F20000
+#define EXYNOS5_PA_SYSMMU_IOP		0x12360000
+#define EXYNOS5_PA_SYSMMU_RTIC		0x12370000
+#define EXYNOS5_PA_SYSMMU_GPS		0x12630000
+#define EXYNOS5_PA_SYSMMU_ISP		0x13260000
+#define EXYNOS5_PA_SYSMMU_DRC		0x13270000
+#define EXYNOS5_PA_SYSMMU_SCALERC	0x13280000
+#define EXYNOS5_PA_SYSMMU_SCALERP	0x13290000
+#define EXYNOS5_PA_SYSMMU_FD		0x132A0000
+#define EXYNOS5_PA_SYSMMU_ISPCPU	0x132B0000
+#define EXYNOS5_PA_SYSMMU_ODC		0x132C0000
+#define EXYNOS5_PA_SYSMMU_DIS0		0x132D0000
+#define EXYNOS5_PA_SYSMMU_DIS1		0x132E0000
+#define EXYNOS5_PA_SYSMMU_3DNR		0x132F0000
+#define EXYNOS5_PA_SYSMMU_LITE0		0x13C40000
+#define EXYNOS5_PA_SYSMMU_LITE1		0x13C50000
+#define EXYNOS5_PA_SYSMMU_LITE2		0x13CA0000
+#define EXYNOS5_PA_SYSMMU_GSC0		0x13E80000
+#define EXYNOS5_PA_SYSMMU_GSC1		0x13E90000
+#define EXYNOS5_PA_SYSMMU_GSC2		0x13EA0000
+#define EXYNOS5_PA_SYSMMU_GSC3		0x13EB0000
+#define EXYNOS5_PA_SYSMMU_FIMD1		0x14640000
+#define EXYNOS5_PA_SYSMMU_TV		0x14650000
+
+#define EXYNOS5_PA_FIMG2D		0x10850000
+#define EXYNOS5_PA_MFC			0x11000000
+
+#define EXYNOS5_PA_GPIO1		0x11400000
+#define EXYNOS5_PA_GPIO2		0x13400000
+#define EXYNOS5_PA_GPIO3		0x10D10000
+#define EXYNOS5_PA_GPIO4		0x03860000
+
+#define EXYNOS5_PA_G3D			0x11800000
+
+#define EXYNOS5_PA_HSMMC(x)		(0x12200000 + ((x) * 0x10000))
+#define EXYNOS5_PA_DWMCI		0x12240000
+
+#define EXYNOS5_PA_SS_UDC		0x1200C100
+#define EXYNOS5_PA_SS_DRD		0x12000000
+#define EXYNOS5_PA_SS_PHY		0x12100000
+#define EXYNOS5_PA_EHCI			0x12110000
+#define EXYNOS5_PA_OHCI			0x12120000
+#define EXYNOS5_PA_HSPHY		0x12130000
+#define EXYNOS5_PA_HSOTG		0x12140000
+
+#define EXYNOS5_PA_SATA_PHY_CTRL	0x12170000
+#define EXYNOS5_PA_SATA_PHY_I2C		0x121D0000
+#define EXYNOS5_PA_SATA_BASE		0x122F0000
+
+#define EXYNOS5_PA_SROMC		0x12250000
+#define EXYNOS4_PA_SROM_BANK(x)		(0x04000000 + ((x) * 0x01000000))
+
+#define EXYNOS5_PA_UART			0x12C00000
+
+#define EXYNOS5_PA_IIC(x)		(0x12C60000 + ((x) * 0x10000))
+#define EXYNOS5_PA_IIC_HDMIPHY		0x12CE0000
+
+#define EXYNOS5_PA_ADC			0x12D10000
+
+#define EXYNOS5_PA_SPI0			0x12D20000
+#define EXYNOS5_PA_SPI1			0x12D30000
+#define EXYNOS5_PA_SPI2			0x12D40000
+
+#define EXYNOS5_PA_TIMER		0x12DD0000
+
+#define EXYNOS5_PA_FIMD0		0x13800000
+#define EXYNOS5_PA_FIMD1		0x14400000
+#define EXYNOS5_PA_MIXER		0x14450000
+#define EXYNOS5_PA_DSIM0		0x14500000
+#define EXYNOS5_PA_DP			0x145B0000
+#define EXYNOS5_PA_HDMI			0x14530000
+
+#define EXYNOS5_PA_FIMC_IS		0x13000000
+
+#define EXYNOS5_PA_FIMC_LITE0		0x13C00000
+#define EXYNOS5_PA_FIMC_LITE1		0x13C10000
+#define EXYNOS5_PA_FIMC_LITE2		0x13C90000
+
+#define EXYNOS5_PA_MIPI_CSIS0		0x13C20000
+#define EXYNOS5_PA_MIPI_CSIS1		0x13C30000
+
+#define EXYNOS5_PA_GSC0 		0x13E00000
+#define EXYNOS5_PA_GSC1 		0x13E10000
+#define EXYNOS5_PA_GSC2 		0x13E20000
+#define EXYNOS5_PA_GSC3 		0x13E30000
+
+#define EXYNOS5_PA_ROTATOR		0x11c00000
+
+#define EXYNOS5_PA_SDRAM		0x40000000
+
+#define EXYNOS5_PA_NS_MDMA0		0x10800000
+#define EXYNOS5_PA_NS_MDMA1		0x11c10000
+#define EXYNOS5_PA_PDMA0		0x121a0000
+#define EXYNOS5_PA_PDMA1		0x121b0000
+
+#define EXYNOS5_PA_AUDSS		0x03810000
+#define EXYNOS5_PA_I2S0			0x03830000
+#define EXYNOS5_PA_I2S1			0x12D60000
+#define EXYNOS5_PA_I2S2			0x12D70000
+
+#define EXYNOS5_PA_PCM0			0x03840000
+#define EXYNOS5_PA_PCM1			0x12D80000
+#define EXYNOS5_PA_PCM2			0x12D90000
+
+#define EXYNOS5_PA_AC97			0x12DA0000
+
+#define EXYNOS5_PA_SPDIF		0x12DB0000
+#define EXYNOS4_PA_JPEG		0x11E00000
+
+#define EXYNOS5_PA_BTS_CPU		0x10C80000
+#define EXYNOS5_PA_BTS_G3D_ACP		0x10EA0000
+#define EXYNOS5_PA_BTS_MFC0		0x11220000
+#define EXYNOS5_PA_BTS_MFC1		0x11230000
+#define EXYNOS5_PA_BTS_ROTATOR		0x11D60000
+#define EXYNOS5_PA_BTS_MDMA1		0x11D70000
+#define EXYNOS5_PA_BTS_JPEG		0x11F40000
+#define EXYNOS5_PA_BTS_GSCL0		0x13EC0000
+#define EXYNOS5_PA_BTS_GSCL1		0x13ED0000
+#define EXYNOS5_PA_BTS_GSCL2		0x13EE0000
+#define EXYNOS5_PA_BTS_GSCL3		0x13EF0000
+#define EXYNOS5_PA_BTS_DISP10		0x14660000
+#define EXYNOS5_PA_BTS_DISP11		0x14670000
+#define EXYNOS5_PA_BTS_TV0		0x14690000
+#define EXYNOS5_PA_BTS_TV1		0x146A0000
+#define EXYNOS5_PA_BTS_C2C		0x10c90000
+#define EXYNOS5_PA_FBM_DDR_R1		0x10c30000
+#define EXYNOS5_PA_FBM_DDR_R0		0x10dc0000
+#define EXYNOS5_PA_BTS_FIMC_ISP		0x13300000
+#define EXYNOS5_PA_BTS_FIMC_SCALER_C	0x13320000
+#define EXYNOS5_PA_BTS_FIMC_SCALER_P	0x13330000
+#define EXYNOS5_PA_BTS_FIMC_FD		0x13340000
+#define EXYNOS5_PA_BTS_FIMC_ODC		0x13370000
+#define EXYNOS5_PA_BTS_FIMC_DIS0	0x13380000
+#define EXYNOS5_PA_BTS_FIMC_DIS1	0x13390000
+#define EXYNOS5_PA_BTS_FIMC_3DNR	0x133A0000
+
+/* Compatibiltiy Defines */
+
+#define EXYNOS_PA_DWMCI			EXYNOS5_PA_DWMCI
+
+#define EXYNOS_PA_SPI0			EXYNOS5_PA_SPI0
+#define EXYNOS_PA_SPI1			EXYNOS5_PA_SPI1
+#define EXYNOS_PA_SPI2			EXYNOS5_PA_SPI2
+
+#define S5P_PA_HDMI_CEC			EXYNOS5_PA_HDMI_CEC
+
+#define S3C_PA_HSMMC0			EXYNOS5_PA_HSMMC(0)
+#define S3C_PA_HSMMC1			EXYNOS5_PA_HSMMC(1)
+#define S3C_PA_HSMMC2			EXYNOS5_PA_HSMMC(2)
+#define S3C_PA_HSMMC3			EXYNOS5_PA_HSMMC(3)
+
+#define EXYNOS_PA_AUDSS			EXYNOS5_PA_AUDSS
+#define EXYNOS_PA_I2S0			EXYNOS5_PA_I2S0
+#define EXYNOS_PA_I2S1			EXYNOS5_PA_I2S1
+#define EXYNOS_PA_I2S2			EXYNOS5_PA_I2S2
+
+#define EXYNOS_PA_PCM0			EXYNOS5_PA_PCM0
+#define EXYNOS_PA_PCM1			EXYNOS5_PA_PCM1
+#define EXYNOS_PA_PCM2			EXYNOS5_PA_PCM2
+
+#define EXYNOS_PA_AC97			EXYNOS5_PA_AC97
+
+#define EXYNOS_PA_SPDIF			EXYNOS5_PA_SPDIF
+
+#define EXYNOS_PA_FIMC_LITE0		EXYNOS5_PA_FIMC_LITE0
+#define EXYNOS_PA_FIMC_LITE1		EXYNOS5_PA_FIMC_LITE1
+#define EXYNOS_PA_FIMC_LITE2		EXYNOS5_PA_FIMC_LITE2
+
+#define EXYNOS_PA_ROTATOR		EXYNOS5_PA_ROTATOR
+
+#define EXYNOS_PA_C2C		EXYNOS5_PA_C2C
+#define EXYNOS_PA_C2C_CP		EXYNOS5_PA_C2C_CP
+
+#define S3C_PA_IIC			EXYNOS5_PA_IIC(0)
+#define S3C_PA_IIC1			EXYNOS5_PA_IIC(1)
+#define S3C_PA_IIC2			EXYNOS5_PA_IIC(2)
+#define S3C_PA_IIC3			EXYNOS5_PA_IIC(3)
+#define S3C_PA_IIC4			EXYNOS5_PA_IIC(4)
+#define S3C_PA_IIC5			EXYNOS5_PA_IIC(5)
+#define S3C_PA_IIC6			EXYNOS5_PA_IIC(6)
+#define S3C_PA_IIC7			EXYNOS5_PA_IIC(7)
+#define SAMSUNG_PA_ADC			EXYNOS5_PA_ADC
+#define S5P_PA_IIC_HDMIPHY		EXYNOS5_PA_IIC_HDMIPHY
+#define S3C_PA_WDT			EXYNOS5_PA_WATCHDOG
+#define S3C_PA_RTC			EXYNOS5_PA_RTC
+#define S5P_PA_CHIPID			EXYNOS5_PA_CHIPID
+#define S5P_PA_SYSCON			EXYNOS5_PA_SYSCON
+#define S5P_PA_SROMC			EXYNOS5_PA_SROMC
+#define S5P_PA_TIMER			EXYNOS5_PA_TIMER
+#define S5P_PA_HSOTG			EXYNOS5_PA_HSOTG
+#define S5P_PA_MFC			EXYNOS5_PA_MFC
+#define S5P_PA_HSPHY			EXYNOS5_PA_HSPHY
+#define S5P_PA_EHCI			EXYNOS5_PA_EHCI
+#define S5P_PA_OHCI			EXYNOS5_PA_OHCI
+#define S5P_PA_FIMD0			EXYNOS5_PA_FIMD0
+#define S5P_PA_FIMD1			EXYNOS5_PA_FIMD1
+#define S5P_PA_MIXER			EXYNOS5_PA_MIXER
+#define S5P_PA_DP			EXYNOS5_PA_DP
+#define S5P_PA_HDMI			EXYNOS5_PA_HDMI
+#define S5P_PA_SDRAM			EXYNOS5_PA_SDRAM
+#define S5P_PA_FIMG2D			EXYNOS5_PA_FIMG2D
+
+#define S5P_PA_MDMA0			EXYNOS5_PA_NS_MDMA0
+#define S5P_PA_MDMA1			EXYNOS5_PA_NS_MDMA1
+#define S5P_PA_PDMA0			EXYNOS5_PA_PDMA0
+#define S5P_PA_PDMA1			EXYNOS5_PA_PDMA1
+#define S5P_PA_DSIM0			EXYNOS5_PA_DSIM0
+#define S5P_PA_JPEG			EXYNOS4_PA_JPEG
+#define S5P_PA_MIPI_CSIS0		EXYNOS5_PA_MIPI_CSIS0
+#define S5P_PA_MIPI_CSIS1		EXYNOS5_PA_MIPI_CSIS1
+
+#define S5P_PA_ACE			EXYNOS5_PA_ACE
+#define S5P_PA_TMU			EXYNOS5_PA_TMU
+/* UART */
+
+#define S3C_VA_UARTx(x)			(S3C_VA_UART + ((x) * S3C_UART_OFFSET))
+
+#define S3C_PA_UART			EXYNOS5_PA_UART
+
+#define S5P_PA_UART(x)			(S3C_PA_UART + ((x) * S3C_UART_OFFSET))
+#define S5P_PA_UART0			S5P_PA_UART(0)
+#define S5P_PA_UART1			S5P_PA_UART(1)
+#define S5P_PA_UART2			S5P_PA_UART(2)
+#define S5P_PA_UART3			S5P_PA_UART(3)
+#define S5P_PA_UART4			S5P_PA_UART(4)
+
+#define S5P_SZ_HDMI_CEC			SZ_64K
+
+#define S5P_SZ_UART			SZ_256
+
+#define S5P_SZ_MIXER			SZ_64K
+#define S5P_SZ_HDMI			SZ_1M
+#define S5P_SZ_IIC_HDMIPHY		SZ_64K
+
+#endif /* __ASM_ARCH_MAP_EXYNOS5_H */
diff -Naur ./arch/arm/mach-exynos/include/mach/mdm2.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/mdm2.h
--- ./arch/arm/mach-exynos/include/mach/mdm2.h	2012-12-08 20:40:46.137821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/mdm2.h	2012-11-22 09:13:15.000000000 +0100
@@ -32,6 +32,11 @@
 	struct platform_device *peripheral_platform_device_ehci;
 	struct platform_device *peripheral_platform_device_ohci;
 	const unsigned int ramdump_timeout_ms;
+#ifdef CONFIG_SIM_DETECT
+	bool sim_polarity;
+#endif
+
+	void (*modem_complete)(struct device *dev);
 };
 
 struct mdm_hsic_pm_platform_data {
@@ -43,5 +48,8 @@
 	struct device *dev;
 };
 
+#ifdef CONFIG_FAST_BOOT
+extern bool fake_shut_down;
+#endif
 #endif
 
diff -Naur ./arch/arm/mach-exynos/include/mach/midas-thermistor.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/midas-thermistor.h
--- ./arch/arm/mach-exynos/include/mach/midas-thermistor.h	2012-12-08 20:40:46.137821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/midas-thermistor.h	2012-11-22 09:13:15.000000000 +0100
@@ -54,6 +54,9 @@
 #ifdef CONFIG_SEC_THERMISTOR
 extern struct platform_device sec_device_thermistor;
 #endif
+#ifdef CONFIG_SEC_SUBTHERMISTOR
+extern struct platform_device sec_device_subthermistor;
+#endif
 
 #endif /* __MIDAS_THERMISTOR_H */
 
diff -Naur ./arch/arm/mach-exynos/include/mach/midas-tsp.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/midas-tsp.h
--- ./arch/arm/mach-exynos/include/mach/midas-tsp.h	2012-12-08 20:40:46.137821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/midas-tsp.h	2012-11-22 09:13:15.000000000 +0100
@@ -13,8 +13,6 @@
 
 #if defined(CONFIG_TOUCHSCREEN_MELFAS)
 #include <linux/platform_data/mms_ts.h>
-#elif defined(CONFIG_TOUCHSCREEN_CYTTSP4)
-#include <linux/platform_data/cypress_cyttsp4.h>
 #else
 #include <linux/melfas_ts.h>
 #endif
@@ -22,24 +20,16 @@
 extern int melfas_power(int on);
 void melfas_set_touch_i2c(void);
 void melfas_set_touch_i2c_to_gpio(void);
-#if defined(CONFIG_TOUCHSCREEN_CYTTSP4)
-int cyttsp4_hw_reset(void);
-int cyttsp4_hw_power(int on);
-int cyttsp4_hw_recov(int on);
-int cyttsp4_irq_stat(void);
-void midas_tsp_set_platdata(struct touch_platform_data *pdata);
-#else
 void midas_tsp_set_platdata(struct melfas_tsi_platform_data *pdata);
-#endif
 void midas_tsp_init(void);
 int is_melfas_vdd_on(void);
 int melfas_mux_fw_flash(bool to_gpios);
 void midas_tsp_set_lcdtype(int lcd_type);
 
-//#ifdef CONFIG_CPU_FREQ_GOV_ONDEMAND_FLEXRATE
+#ifdef CONFIG_CPU_FREQ_GOV_ONDEMAND_FLEXRATE
 extern void midas_tsp_request_qos(void *data);
-//#else
-//#define midas_tsp_request_qos	NULL
-//#endif
+#else
+#define midas_tsp_request_qos	NULL
+#endif
 
 #endif /* __MIDAS_TSP_H */
diff -Naur ./arch/arm/mach-exynos/include/mach/regs-c2c.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/regs-c2c.h
--- ./arch/arm/mach-exynos/include/mach/regs-c2c.h	2012-12-08 20:40:46.137821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/regs-c2c.h	2012-11-22 09:13:16.000000000 +0100
@@ -70,4 +70,8 @@
 #define C2C_GENIO_OPP_MODE1	(29)
 #define C2C_GENIO_LATENCY0	(30)
 #define C2C_GENIO_LATENCY1	(31)
+
+#define C2C_GENIO_MBOX_INT	7	/* Mailbox interrupt for C2C IPC */
+#define C2C_GENIO_MBOX_EXT_INT	15	/* Mailbox ext. interrupt for C2C IPC */
+
 #endif /* __ASM_ARM_REGS_S5P_C2C_H */
diff -Naur ./arch/arm/mach-exynos/include/mach/regs-pmu-4212.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/regs-pmu-4212.h
--- ./arch/arm/mach-exynos/include/mach/regs-pmu-4212.h	2012-12-08 20:40:46.141821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/regs-pmu-4212.h	2012-11-22 09:13:15.000000000 +0100
@@ -109,6 +109,7 @@
 #define S5P_CMU_SYSCLK_ISP_SYS			S5P_PMUREG(0x13B8)
 #define S5P_CMU_SYSCLK_GPS_SYS			S5P_PMUREG(0x13BC)
 #define S5P_LPDDR_PHY_DLL_LOCK_SYS		S5P_PMUREG(0x13C0)
+#define S5P_LOGIC_RESET_DURATION3		S5P_PMUREG(0x2D1C)
 
 /* OPTION registers */
 #define S5P_ISP_ARM_OPTION			S5P_PMUREG(0x2288)
diff -Naur ./arch/arm/mach-exynos/include/mach/regs-pmu5.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/regs-pmu5.h
--- ./arch/arm/mach-exynos/include/mach/regs-pmu5.h	2012-12-08 20:40:46.141821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/regs-pmu5.h	2012-11-22 09:13:15.000000000 +0100
@@ -74,6 +74,7 @@
 #define EXYNOS5_WAKEUP_MASK					S5P_PMUREG(0x0608)
 
 #define EXYNOS5_DEFAULT_WAKEUP_MACK				(0xF << 16)
+#define EXYNOS5_MASK_EINT					(1 << 0)
 #define EXYNOS5_MASK_RTC_ALARM					(1 << 1)
 #define EXYNOS5_MASK_RTC_TICK					(1 << 2)
 #define EXYNOS5_MASK_KEY					(1 << 5)
diff -Naur ./arch/arm/mach-exynos/include/mach/s5p-idpram.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/s5p-idpram.h
--- ./arch/arm/mach-exynos/include/mach/s5p-idpram.h	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/s5p-idpram.h	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,167 @@
+/*
+ * arch/arm/mach-exynos/s5p_idpram.h
+ * (Header for internal DPRAM in S.LSI S5P-family AP)
+ */
+
+#ifndef __S5P_IDPRAM_H__
+#define __S5P_IDPRAM_H__
+
+#include <linux/clk.h>
+#include <plat/gpio-cfg.h>
+#include <plat/regs-srom.h>
+#include <mach/gpio.h>
+#include <mach/regs-mem.h>
+
+#define IDPRAM_SIZE		0x4000
+#define IDPRAM_PHYS_ADDR	0x13A00000
+#define IDPRAM_PHYS_END		(IDPRAM_PHYS_ADDR + IDPRAM_SIZE)
+
+#define IDPRAM_SFR_SIZE		0x1C
+#define IDPRAM_SFR_PHYS_ADDR	0x13A08000
+
+/* For S5P Interanl DPRAM GPIO configuration */
+#define GPIO_IDPRAM_WEn		EXYNOS4210_GPE0(0)
+#define GPIO_IDPRAM_CSn		EXYNOS4210_GPE0(1)
+#define GPIO_IDPRAM_REn		EXYNOS4210_GPE0(2)
+#define GPIO_IDPRAM_INT2CP	EXYNOS4210_GPE0(3)
+#define GPIO_IDPRAM_ADVn	EXYNOS4210_GPE0(4)	/* only for MUX mode */
+
+#define GPIO_IDPRAM_ADDR_BUS_L	EXYNOS4210_GPE1(0)
+#define GPIO_IDPRAM_ADDR_BUS_H	EXYNOS4210_GPE2(0)
+#define GPIO_IDPRAM_DATA_BUS_L	EXYNOS4210_GPE3(0)
+#define GPIO_IDPRAM_DATA_BUS_H	EXYNOS4210_GPE4(0)
+
+/* S5P Interanl DPRAM SFR (Special Function Register) fields */
+#define IDPRAM_MIFCON_INT2APEN		(1<<2)
+#define IDPRAM_MIFCON_INT2MSMEN		(1<<3)
+#define IDPRAM_MIFCON_DMATXREQEN_0	(1<<16)
+#define IDPRAM_MIFCON_DMATXREQEN_1	(1<<17)
+#define IDPRAM_MIFCON_DMARXREQEN_0	(1<<18)
+#define IDPRAM_MIFCON_DMARXREQEN_1	(1<<19)
+#define IDPRAM_MIFCON_FIXBIT		(1<<20)
+
+#define IDPRAM_MIFPCON_ADM_MODE		(1<<6)	/* MUX/DEMUX mode */
+
+struct s5p_idpram_sfr {
+	unsigned int2ap;
+	unsigned int2msm;
+	unsigned mifcon;
+	unsigned mifpcon;
+	unsigned msmintclr;
+	unsigned dma_tx_adr;
+	unsigned dma_rx_adr;
+};
+
+static struct s5p_idpram_sfr __iomem *ap_idpram_sfr;
+
+/**
+ * idpram_config_demux_gpio
+ *
+ * Configures GPIO pins for CSn, REn, WEn, INT2CP, address bus, and data bus
+ * as demux mode
+ */
+static void idpram_config_demux_gpio(void)
+{
+	/* Configure CSn */
+	s3c_gpio_cfgpin(GPIO_IDPRAM_CSn, GPIO_IDPRAM_SFN);
+	s3c_gpio_setpull(GPIO_IDPRAM_CSn, S3C_GPIO_PULL_NONE);
+
+	/* Configure REn */
+	s3c_gpio_cfgpin(GPIO_IDPRAM_REn, GPIO_IDPRAM_SFN);
+	s3c_gpio_setpull(GPIO_IDPRAM_REn, S3C_GPIO_PULL_NONE);
+
+	/* Configure WEn */
+	s3c_gpio_cfgpin(GPIO_IDPRAM_WEn, GPIO_IDPRAM_SFN);
+	s3c_gpio_setpull(GPIO_IDPRAM_WEn, S3C_GPIO_PULL_NONE);
+
+	/* Configure INT2CP */
+	s3c_gpio_cfgpin(GPIO_IDPRAM_INT2CP, GPIO_IDPRAM_SFN);
+	s3c_gpio_setpull(GPIO_IDPRAM_INT2CP, S3C_GPIO_PULL_UP);
+
+	/* Address bus (8 bits + 6 bits = 14 bits) */
+	s3c_gpio_cfgrange_nopull(GPIO_IDPRAM_ADDR_BUS_L, 8, GPIO_IDPRAM_SFN);
+	s3c_gpio_cfgrange_nopull(GPIO_IDPRAM_ADDR_BUS_H, 6, GPIO_IDPRAM_SFN);
+
+	/* Data bus (8 bits + 8 bits = 16 bits)*/
+	s3c_gpio_cfgrange_nopull(GPIO_IDPRAM_DATA_BUS_L, 8, GPIO_IDPRAM_SFN);
+	s3c_gpio_cfgrange_nopull(GPIO_IDPRAM_DATA_BUS_H, 8, GPIO_IDPRAM_SFN);
+}
+
+/**
+ * idpram_config_mux_gpio
+ *
+ * Configures GPIO pins for CSn, REn, WEn, INT2CP, ADVn, and ADM bus as mux mode
+ */
+static void idpram_config_mux_gpio(void)
+{
+	/* Configure CSn */
+	s3c_gpio_cfgpin(GPIO_IDPRAM_CSn, GPIO_IDPRAM_SFN);
+	s3c_gpio_setpull(GPIO_IDPRAM_CSn, S3C_GPIO_PULL_NONE);
+
+	/* Configure REn */
+	s3c_gpio_cfgpin(GPIO_IDPRAM_REn, GPIO_IDPRAM_SFN);
+	s3c_gpio_setpull(GPIO_IDPRAM_REn, S3C_GPIO_PULL_NONE);
+
+	/* Configure WEn */
+	s3c_gpio_cfgpin(GPIO_IDPRAM_WEn, GPIO_IDPRAM_SFN);
+	s3c_gpio_setpull(GPIO_IDPRAM_WEn, S3C_GPIO_PULL_NONE);
+
+	/* Configure INT2CP */
+	s3c_gpio_cfgpin(GPIO_IDPRAM_INT2CP, GPIO_IDPRAM_SFN);
+	s3c_gpio_setpull(GPIO_IDPRAM_INT2CP, S3C_GPIO_PULL_UP);
+
+	/* Configure ADVn */
+	s3c_gpio_cfgpin(GPIO_IDPRAM_ADVn, GPIO_IDPRAM_SFN);
+	s3c_gpio_setpull(GPIO_IDPRAM_ADVn, S3C_GPIO_PULL_NONE);
+
+	/* Address and data mux bus (8 bits + 8 bits = 16 bits)*/
+	s3c_gpio_cfgrange_nopull(GPIO_IDPRAM_DATA_BUS_L, 8, GPIO_IDPRAM_SFN);
+	s3c_gpio_cfgrange_nopull(GPIO_IDPRAM_DATA_BUS_H, 8, GPIO_IDPRAM_SFN);
+}
+
+static int idpram_init_sfr(void)
+{
+	ap_idpram_sfr = ioremap_nocache(IDPRAM_SFR_PHYS_ADDR, IDPRAM_SFR_SIZE);
+	if (!ap_idpram_sfr) {
+		pr_err("mif: %s: ioremap fail\n", __func__);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static void idpram_init_demux_mode(void)
+{
+	ap_idpram_sfr->mifcon = IDPRAM_MIFCON_FIXBIT | IDPRAM_MIFCON_INT2APEN |
+				IDPRAM_MIFCON_INT2MSMEN;
+}
+
+static void idpram_init_mux_mode(void)
+{
+	ap_idpram_sfr->mifcon = IDPRAM_MIFCON_FIXBIT | IDPRAM_MIFCON_INT2APEN |
+				IDPRAM_MIFCON_INT2MSMEN;
+	ap_idpram_sfr->mifpcon = IDPRAM_MIFPCON_ADM_MODE;
+}
+
+static int idpram_enable(void)
+{
+	struct clk *clk;
+
+	/* enable internal DPRAM clock (modem I/F) */
+	clk = clk_get(NULL, "modem");
+	if (!clk) {
+		pr_err("mif: %s: ERR! IDPRAM clock gate fail\n", __func__);
+		return -EINVAL;
+	}
+
+	clk_enable(clk);
+	return 0;
+}
+
+static void idpram_clr_intr(void)
+{
+	ap_idpram_sfr->msmintclr = 0xFF;
+}
+
+#endif
+
diff -Naur ./arch/arm/mach-exynos/include/mach/sec_debug.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/sec_debug.h
--- ./arch/arm/mach-exynos/include/mach/sec_debug.h	2012-12-08 20:40:46.141821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/sec_debug.h	2012-11-22 09:13:15.000000000 +0100
@@ -195,6 +195,7 @@
 
 enum sec_debug_aux_log_idx {
 	SEC_DEBUG_AUXLOG_CPU_BUS_CLOCK_CHANGE,
+	SEC_DEBUG_AUXLOG_CMA_RBTREE_CHANGE,
 	SEC_DEBUG_AUXLOG_ITEM_MAX,
 };
 
diff -Naur ./arch/arm/mach-exynos/include/mach/sromc-exynos4.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/sromc-exynos4.h
--- ./arch/arm/mach-exynos/include/mach/sromc-exynos4.h	2012-12-08 20:40:46.141821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/sromc-exynos4.h	2012-11-22 09:13:15.000000000 +0100
@@ -12,23 +12,22 @@
 #include <mach/gpio-exynos4.h>
 #include <mach/regs-mem.h>
 
+#define SROM_WIDTH		0x01000000	/* 16 MB */
 #define SROM_CS0_BASE		0x04000000
 #define SROM_CS1_BASE		0x05000000
 #define SROM_CS2_BASE		0x06000000
 #define SROM_CS3_BASE		0x07000000
-#define SROM_WIDTH		0x01000000
 
-#define GPIO_SFN_SROMC		S3C_GPIO_SFN(2)
-
-#define GPIO_SROMC_CSN		EXYNOS4_GPY0(0)
-#define GPIO_SROMC_CSN0		EXYNOS4_GPY0(0)
-#define GPIO_SROMC_CSN1		EXYNOS4_GPY0(1)
-#define GPIO_SROMC_CSN2		EXYNOS4_GPY0(2)
-#define GPIO_SROMC_CSN3		EXYNOS4_GPY0(3)
-#define GPIO_SROMC_REN		EXYNOS4_GPY0(4)
-#define GPIO_SROMC_WEN		EXYNOS4_GPY0(5)
-#define GPIO_SROMC_LBN		EXYNOS4_GPY1(0)
-#define GPIO_SROMC_UBN		EXYNOS4_GPY1(1)
+#define GPIO_SROMC_CSn		EXYNOS4_GPY0(0)
+#define GPIO_SROMC_CSn0		EXYNOS4_GPY0(0)
+#define GPIO_SROMC_CSn1		EXYNOS4_GPY0(1)
+#define GPIO_SROMC_CSn2		EXYNOS4_GPY0(2)
+#define GPIO_SROMC_CSn3		EXYNOS4_GPY0(3)
+#define GPIO_SROMC_REn		EXYNOS4_GPY0(4)
+#define GPIO_SROMC_WEn		EXYNOS4_GPY0(5)
+#define GPIO_SROMC_LBn		EXYNOS4_GPY1(0)
+#define GPIO_SROMC_UBn		EXYNOS4_GPY1(1)
+#define GPIO_SROMC_WAITn	EXYNOS4_GPY1(2)
 #define GPIO_SROMC_ADDR_BUS_L	EXYNOS4_GPY3(0)
 #define GPIO_SROMC_ADDR_BUS_H	EXYNOS4_GPY4(0)
 #define GPIO_SROMC_DATA_BUS_L	EXYNOS4_GPY5(0)
@@ -39,6 +38,7 @@
 	unsigned addr_bits;	/* Width of address bus	in bits	*/
 	unsigned data_bits;	/* Width of data bus in bits	*/
 	unsigned byte_acc;	/* Byte access			*/
+	unsigned busy_ctrl;	/* BUSY control			*/
 };
 
 /* SROMC bank attributes in BW (Bus width and Wait control) register */
@@ -69,7 +69,7 @@
 	u32 pmc;		/* Page Mode config			*/
 };
 
-static unsigned int sfn = GPIO_SFN_SROMC;
+static unsigned int srom_sfn = S3C_GPIO_SFN(2);
 
 /**
  * sromc_enable
@@ -107,23 +107,24 @@
 	unsigned int addr_bits = bc->addr_bits;
 	unsigned int data_bits = bc->data_bits;
 	unsigned int byte_acc = bc->byte_acc;
+	unsigned int busy_ctrl = bc->busy_ctrl;
 	unsigned int bits;
 
-	pr_err("[SROMC] %s: addr_bits %d, data_bits %d, byte_acc %d\n",
-		__func__, addr_bits, data_bits, byte_acc);
+	pr_err("[SROMC] %s: addr_bits %d, data_bits %d, byte_acc %d, busy %d\n",
+		__func__, addr_bits, data_bits, byte_acc, busy_ctrl);
 
 	/* Configure address bus */
 	switch (addr_bits) {
 	case 1 ... EXYNOS4_GPIO_Y3_NR:
 		bits = addr_bits;
-		s3c_gpio_cfgrange_nopull(GPIO_SROMC_ADDR_BUS_L, bits, sfn);
+		s3c_gpio_cfgrange_nopull(GPIO_SROMC_ADDR_BUS_L, bits, srom_sfn);
 		break;
 
 	case (EXYNOS4_GPIO_Y3_NR + 1) ... 16:
 		bits = EXYNOS4_GPIO_Y3_NR;
-		s3c_gpio_cfgrange_nopull(GPIO_SROMC_ADDR_BUS_L, bits, sfn);
+		s3c_gpio_cfgrange_nopull(GPIO_SROMC_ADDR_BUS_L, bits, srom_sfn);
 		bits = (addr_bits - EXYNOS4_GPIO_Y3_NR);
-		s3c_gpio_cfgrange_nopull(GPIO_SROMC_ADDR_BUS_H, bits, sfn);
+		s3c_gpio_cfgrange_nopull(GPIO_SROMC_ADDR_BUS_H, bits, srom_sfn);
 		break;
 
 	default:
@@ -135,12 +136,12 @@
 	/* Configure data bus (8 or 16 bits) */
 	switch (data_bits) {
 	case 8:
-		s3c_gpio_cfgrange_nopull(GPIO_SROMC_DATA_BUS_L, 8, sfn);
+		s3c_gpio_cfgrange_nopull(GPIO_SROMC_DATA_BUS_L, 8, srom_sfn);
 		break;
 
 	case 16:
-		s3c_gpio_cfgrange_nopull(GPIO_SROMC_DATA_BUS_L, 8, sfn);
-		s3c_gpio_cfgrange_nopull(GPIO_SROMC_DATA_BUS_H, 8, sfn);
+		s3c_gpio_cfgrange_nopull(GPIO_SROMC_DATA_BUS_L, 8, srom_sfn);
+		s3c_gpio_cfgrange_nopull(GPIO_SROMC_DATA_BUS_H, 8, srom_sfn);
 		break;
 
 	default:
@@ -150,19 +151,25 @@
 	}
 
 	/* Configure REn */
-	s3c_gpio_cfgpin(GPIO_SROMC_REN, sfn);
-	s3c_gpio_setpull(GPIO_SROMC_REN, S3C_GPIO_PULL_NONE);
+	s3c_gpio_cfgpin(GPIO_SROMC_REn, srom_sfn);
+	s3c_gpio_setpull(GPIO_SROMC_REn, S3C_GPIO_PULL_NONE);
 
 	/* Configure WEn */
-	s3c_gpio_cfgpin(GPIO_SROMC_WEN, sfn);
-	s3c_gpio_setpull(GPIO_SROMC_WEN, S3C_GPIO_PULL_NONE);
+	s3c_gpio_cfgpin(GPIO_SROMC_WEn, srom_sfn);
+	s3c_gpio_setpull(GPIO_SROMC_WEn, S3C_GPIO_PULL_NONE);
 
 	/* Configure LBn, UBn */
 	if (byte_acc) {
-		s3c_gpio_cfgpin(GPIO_SROMC_LBN, sfn);
-		s3c_gpio_setpull(GPIO_SROMC_LBN, S3C_GPIO_PULL_NONE);
-		s3c_gpio_cfgpin(GPIO_SROMC_UBN, sfn);
-		s3c_gpio_setpull(GPIO_SROMC_UBN, S3C_GPIO_PULL_NONE);
+		s3c_gpio_cfgpin(GPIO_SROMC_LBn, srom_sfn);
+		s3c_gpio_setpull(GPIO_SROMC_LBn, S3C_GPIO_PULL_NONE);
+		s3c_gpio_cfgpin(GPIO_SROMC_UBn, srom_sfn);
+		s3c_gpio_setpull(GPIO_SROMC_UBn, S3C_GPIO_PULL_NONE);
+	}
+
+	/* Configure WAITn */
+	if (busy_ctrl) {
+		s3c_gpio_cfgpin(GPIO_SROMC_WAITn, srom_sfn);
+		s3c_gpio_setpull(GPIO_SROMC_WAITn, S3C_GPIO_PULL_NONE);
 	}
 
 	return 0;
@@ -179,7 +186,7 @@
  */
 static int sromc_config_csn_gpio(unsigned int csn)
 {
-	unsigned int pin = GPIO_SROMC_CSN + csn;
+	unsigned int pin = GPIO_SROMC_CSn + csn;
 
 	pr_err("[SROMC] %s: for CSn%d\n", __func__, csn);
 
@@ -189,7 +196,7 @@
 	}
 
 	/* Configure CSn GPIO pin */
-	s3c_gpio_cfgpin(pin, sfn);
+	s3c_gpio_cfgpin(pin, srom_sfn);
 	s3c_gpio_setpull(pin, S3C_GPIO_PULL_NONE);
 
 	return 0;
diff -Naur ./arch/arm/mach-exynos/include/mach/usb_switch.h ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/usb_switch.h
--- ./arch/arm/mach-exynos/include/mach/usb_switch.h	2012-12-08 20:40:46.141821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/include/mach/usb_switch.h	2012-11-22 09:13:15.000000000 +0100
@@ -8,7 +8,7 @@
 	USB_PATH_ADCCHECK = (1 << 28),
 	USB_PATH_TA = (1 << 24),
 	USB_PATH_CP = (1 << 20),
-#if defined(CONFIG_MACH_P4NOTE)
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
 	USB_PATH_AP = (1 << 16),
 #else
 	USB_PATH_OTG = (1 << 16),
diff -Naur ./arch/arm/mach-exynos/Kconfig ../../HK_JB/Kernel/arch/arm/mach-exynos/Kconfig
--- ./arch/arm/mach-exynos/Kconfig	2012-12-08 20:40:46.109821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/Kconfig	2012-11-22 09:13:14.000000000 +0100
@@ -633,6 +633,15 @@
 	 U1 has two thermistors. this device driver use one of those
 	 to check system temperature.
 
+config SEC_SUBTHERMISTOR
+	bool "Use sub thermistor"
+	depends on SAMSUNG_DEV_ADC
+	default n
+	help
+	  Use sub thermistor driver.
+	  This device driver use only Japan model.
+	  Japan model has sub thermistors.
+
 config EXYNOS_SYSREG_PM
 	bool "PM Support for System Registers"
 	depends on CPU_EXYNOS4210 || CPU_EXYNOS4412 || CPU_EXYNOS4212
@@ -871,6 +880,9 @@
 	bool "Q1 Board"
 
 endchoice
+config TARGET_LOCALE_NAATT_TEMP
+        bool "Support North America GSM ATT Board"
+        default n
 
 config MACH_PX
 	bool "PX board"
@@ -952,7 +964,7 @@
 
 endchoice
 
-if MACH_U1 || MACH_C1 || MACH_M3 || MACH_M0 || MACH_P4 || MACH_P2 || MACH_P4NOTE || MACH_T0 || MACH_TRATS || MACH_GRANDE || MACH_GC1 || MACH_BAFFIN
+if MACH_U1 || MACH_C1 || MACH_M3 || MACH_M0 || MACH_P4 || MACH_P2 || MACH_P4NOTE || MACH_T0 || MACH_TRATS || MACH_GRANDE || MACH_GC1 || MACH_BAFFIN || MACH_P8 || MACH_KONA
 source "arch/arm/mach-exynos/Kconfig.local"
 endif
 
@@ -1076,7 +1088,6 @@
 config MACH_GC1
 	bool "Galuxy Camera board"
 	select S3C_DEV_I2C4
-	select S3C_DEV_I2C5
 	select GC1_00_BD
 
 config MACH_T0
@@ -1086,6 +1097,12 @@
 	select S3C_DEV_I2C4
 	select S3C_DEV_I2C5
 
+config MACH_KONA
+	bool "KONA Note8 board"
+	select S3C_DEV_I2C4
+	select S3C_DEV_I2C5
+	select KONA_00_BD
+
 config MACH_IRON
 	bool "Iron board"
 	select S3C_DEV_I2C4
@@ -1121,16 +1138,30 @@
 	bool "T0 Revison 00 board"
 	default n
 
+config KONA_00_BD
+	bool "KONA note8 common Board"
+	default n
+
 config T0_04_BD
 	bool "T0 Revison 04 board"
 	default n
 
+config MACH_T0_GODIVA_LTE
+	bool "Godiva LTE"
+	default n
+
+config MACH_T0_VOLTE_Q
+	bool "Volte Qualcomm"
+	default n
+
 config IRON_BD
 	bool "Iron common Board"
 
 config GRANDE_BD
 	bool "Grande common Board"
 
+source "arch/arm/mach-exynos/Kconfig.slp"
+
 config WRITEBACK_ENABLED
 	bool "Samsung Writeback Enable"
 	help
@@ -1712,10 +1743,29 @@
 	select TDSCDMA_MODEM_SPRD8803
 	select LINK_DEVICE_SPI
 
+config SEC_MODEM_U1_SPR
+        bool "U1 with qsc6085"
+        select CDMA_MODEM_QSC6085
+        select LINK_DEVICE_DPRAM
+        select INTERNAL_MODEM_IF
+
+config SEC_MODEM_GODIVA2
+	bool "T0 with SS222 and CBP8.2"
+#	select LTE_VIA_SWITCH
+	select CDMA_MODEM_CBP82
+	select UMTS_MODEM_SS222
+	select LINK_DEVICE_DPRAM
+	select LINK_DEVICE_C2C
+
 endchoice
 
 endif
 
+comment "Connectivity Feature"
+config GPS_BRCM_475X
+	bool "BRCM_475X_CHIPSET"
+	default n
+
 if BT
 config BT_CSR8811
 	bool "Enable CSR8811 driver"
@@ -1765,6 +1815,10 @@
 	bool "unsuspected emi error recovery on HUB"
 	default n
 
+config SIM_DETECT
+	bool "support sim detect"
+	default n
+
 if QC_MODEM
 choice
 	prompt "QC MODEM CONFIG"
@@ -1804,3 +1858,8 @@
 	help
 	  Turns on ETM tracing by default. Otherwise, tracing is
 	  disabled by default but can be enabled by other means.
+
+config CPU_FREQ_TETHERING
+	bool "Lock cpu freq & bus clock when tethering mode turn on"
+	depends on QC_MODEM
+	default n
diff -Naur ./arch/arm/mach-exynos/Kconfig.local ../../HK_JB/Kernel/arch/arm/mach-exynos/Kconfig.local
--- ./arch/arm/mach-exynos/Kconfig.local	2012-12-08 20:40:46.109821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/Kconfig.local	2012-11-22 09:13:14.000000000 +0100
@@ -53,20 +53,15 @@
 endchoice
 
 choice
-	prompt "C2 USA Target Carrier"
-	depends on MACH_M3 && \
-		(TARGET_LOCALE_USA || TARGET_LOCALE_JPN)
-	default MACH_M3_USA_VZW
+	prompt "M3 Target Carrier"
+	depends on MACH_M3 && (TARGET_LOCALE_USA || TARGET_LOCALE_JPN)
+	default MACH_M3_USA_TMO
 
-config MACH_M3_USA_VZW
-	bool "C2 Verizon"
-
-config MACH_M3_USA_SPR
-	bool "C2 Sprint"
+config MACH_M3_USA_TMO
+	bool "M3 T-Mobile (Stretto)"
 
 config MACH_M3_JPN_DCM
 	bool "M3 JPN DCM"
-
 endchoice
 
 choice
@@ -174,6 +169,58 @@
 endchoice
 
 choice
+	prompt "CAMERA LTE KOR Target Carrier"
+	depends on MACH_GC1 && TARGET_LOCALE_KOR
+	default MACH_GC1_KOR_SKT
+
+config MACH_GC1_KOR_SKT
+	bool "SKT"
+
+config MACH_GC1_KOR_KT
+	bool "KT"
+
+config MACH_GC1_KOR_LGT
+	bool "LG U+"
+endchoice
+
+choice
+	prompt "S USA Target Carrier"
+	depends on MACH_GC1 && TARGET_LOCALE_USA
+	default MACH_GC1_USA_ATT
+
+config MACH_GC1_USA_ATT
+	bool "S USA ATT Board"
+
+config MACH_GC1_USA_VZW
+	bool "S USA VZW Board"
+endchoice
+
+choice
+        prompt "P4 LTE USA Target Carrier"
+        depends on MACH_P4NOTE && TARGET_LOCALE_USA
+        default MACH_P4NOTE_USA_ANY
+
+config MACH_P4NOTELTE_USA_VZW
+        bool "P4NOTE LTE USA VZW"
+
+config MACH_P4NOTELTE_USA_ATT
+        bool "P4NOTE LTE USA ATT"
+
+config MACH_P4NOTELTE_USA_TMO
+        bool "P4NOTE LTE USA TMO"
+
+config MACH_P4NOTELTE_USA_SPR
+        bool "P4NOTE LTE USA SPR"
+
+config MACH_P4NOTELTE_USA_USCC
+        bool "P4NOTE LTE USA USCC"
+
+config MACH_P4NOTELTE_USA_ANY
+        bool "P4NOTE LTE USA ANY"
+
+endchoice
+
+choice
 	prompt "P4 KOR Target Carrier"
 	depends on MACH_P4NOTE && TARGET_LOCALE_KOR
 	default MACH_P4NOTE_KOR_ANY
@@ -235,6 +282,9 @@
 
 config MACH_BAFFIN_KOR_LGT
 	bool "LG U+"
+
+config MACH_SUPERIOR_KOR_SKT
+	bool "SUPERIOR SKT"
 endchoice
 
 menu "M0 CTC based models"
@@ -246,4 +296,13 @@
 config MACH_M0_DUOSCTC
 	bool "M0 CHN DUOS CTC board"
 
+choice
+	prompt "KONA Note8 Target Carrier"
+	depends on MACH_KONA && TARGET_LOCALE_EUR
+	default MACH_KONA_EUR_OPEN
+
+config MACH_KONA_EUR_ANY
+	bool "KONA Note8 EUR ANY"
+endchoice
+
 endmenu
diff -Naur ./arch/arm/mach-exynos/Kconfig.slp ../../HK_JB/Kernel/arch/arm/mach-exynos/Kconfig.slp
--- ./arch/arm/mach-exynos/Kconfig.slp	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/Kconfig.slp	2012-11-22 09:13:14.000000000 +0100
@@ -0,0 +1,547 @@
+config SLP
+	bool "Enable SLP Boards"
+	help
+	 Support SLP(Samsung Linux Platform) dedicated features that do not
+	 depend on Hardware.
+	 New patches will be followed by security, lowmemory manager, stopwatch,
+	 etc.
+	 Please do not select if do not know about SLP.
+
+config MACH_SLP_MIDAS
+	bool
+	select CPU_EXYNOS4212
+	select CPU_EXYNOS4412
+	select S3C_DEV_WDT
+	select S3C_DEV_RTC
+	select S3C_DEV_HSMMC2
+	select S3C_DEV_HSMMC3
+	select S5P_DEV_USB_EHCI
+	select S3C_DEV_I2C1
+	select S3C_DEV_I2C3
+	select S3C_DEV_I2C4
+	select S3C_DEV_I2C5
+	select S3C_DEV_I2C7
+	select S5P_DEV_USBGADGET
+	select S5P_DEV_DSIM02
+	select S5P_DEV_FIMD0
+	select S5P_DEV_MFC
+	select EXYNOS4_DEV_MSHC
+	select EXYNOS4_SETUP_MSHCI
+	select EXYNOS4_MSHC_MPLL_40MHZ
+	select EXYNOS4_MSHC_DDR
+	select EXYNOS4_MSHC_8BIT
+	select EXYNOS4_SETUP_SDHCI
+	select EXYNOS4_SETUP_I2C1
+	select EXYNOS4_SETUP_I2C3
+	select EXYNOS4_SETUP_I2C4
+	select EXYNOS4_SETUP_I2C5
+	select EXYNOS4_SETUP_I2C7
+	select EXYNOS4_SETUP_USB_PHY
+	select EXYNOS4_SETUP_MFC
+	select S5P_SETUP_MIPIPHY
+	select S5P_GPIO_INT
+	select SAMSUNG_DEV_PWM
+	select EXYNOS_DEV_PD
+	select MIDAS_COMMON
+	select SLP_WIP
+	select BT_BCM4334
+	select GPS_BCM47511
+	select S3C64XX_DEV_SPI
+	select CONFIG_VIDEO_FIMC_MIPI
+	select EXYNOS_SYSREG_PM
+	select EXYNOS4_DEV_FIMC_LITE
+	select CPU_FREQ_GOV_ONDEMAND_FLEXRATE if CPU_FREQ_GOV_ONDEMAND
+	help
+	  Machine support for Samsung SLP midas board
+
+choice
+	prompt "SLP EXYNOS4212/4412 board"
+	depends on SLP
+	default MACH_SLP_MIDAS_D
+
+config MACH_SLP_MIDAS_D
+	bool "SLP Midas D (Yosemite-D) board"
+	select MACH_SLP_MIDAS
+	select GPIO_MIDAS_01_BD
+	select BATTERY_MAX17042
+
+config MACH_SLP_MIDAS_Q
+	bool "SLP Midas Q (Yosemite-Q) board"
+	select MACH_SLP_MIDAS
+	select GPIO_MIDAS_02_BD
+	select BATTERY_MAX17047_FUELGAUGE
+
+config MACH_SLP_PQ
+	bool "SLP Pegasus Q (M0-PROXIMA)"
+	select MACH_SLP_PQ_DEVS
+	select MIDAS_COMMON_BD
+	help
+	  Machine support for Samsung SLP Pegasus-Q (M0-PROXIMA) board.  The
+	  GPIO mapping is known to be same with M0 board. This board is not
+	  known to have Exynos4212; however, CPU_EXYNOS4212 config is included
+	  because of Kconfig issues that does not allow to compile board files
+	  with CPU_EXYNOS4412 enabled without CPU_EXYNOS4212.
+
+config MACH_SLP_PQ_LTE
+	bool "SLP Pegasus Q LTE(CMC221)"
+	select MACH_SLP_PQ_LTE_DEVS
+	select MIDAS_COMMON_BD
+	help
+	  Machine support for Samsung SLP Pegasus-Q LTE board.
+	  The GPIO mapping is known to be same with C1 board.
+	  PQ_LTE board is not known to have Exynos4212; however,
+	  CPU_EXYNOS4212 config is included because of Kconfig
+	  issues that does not allow to compile board files
+	  with CPU_EXYNOS4412 enabled without CPU_EXYNOS4212.
+
+config MACH_SLP_T0_LTE
+	bool "SLP Pegasus Q LTE(T0-DOCOMO)"
+	select MACH_SLP_T0_LTE_DEVS
+	select MIDAS_COMMON_BD
+	help
+	  Machine support for Samsung SLP Pegasus-Q (T0-DOCOMO) board.  The
+	  GPIO mapping is known to be same with T0 board. This board is not
+	  known to have Exynos4212; however, CPU_EXYNOS4212 config is included
+	  because of Kconfig issues that does not allow to compile board files
+	  with CPU_EXYNOS4412 enabled without CPU_EXYNOS4212.
+
+config MACH_SLP_NAPLES
+	bool "SLP Naples (Naples) board"
+	select MACH_SLP_NAPLES_DEVS
+	select GPIO_NAPLES_00_BD
+
+config MACH_TRATS
+	bool "Samsung TRATS board"
+	select MACH_U1_BD
+	select CPU_EXYNOS4210
+	select S5P_GPIO_INT
+	select S5P_DEV_DSIM02
+	select S5P_DEV_FIMD0
+	select S5P_DEV_FIMG2D
+	select S5P_DEV_MFC
+	select S5P_DEV_TV
+	select S5P_DEV_I2C_HDMIPHY
+	select S5P_DEV_USB_EHCI
+	select S5P_SYSTEM_MMU
+	select S5P_DEV_USBGADGET
+	select S3C_DEV_RTC
+	select S3C_DEV_WDT
+	select S3C_DEV_I2C1
+	select S3C_DEV_I2C3
+	select S3C_DEV_I2C5
+	select S3C_DEV_I2C6
+	select S3C_DEV_I2C7
+	select S3C_DEV_I2C8_EMUL
+	select S3C_DEV_I2C9_EMUL
+	select EXYNOS4_DEV_MSHC
+	select EXYNOS4_MSHC_MPLL_40MHZ
+	select EXYNOS4_MSHC_DDR
+	select EXYNOS4_MSHC_8BIT
+	select S3C_DEV_HSMMC2
+	select S3C_DEV_HSMMC3
+	select SAMSUNG_DEV_ADC
+	select SAMSUNG_DEV_TS
+	select SAMSUNG_DEV_TS1
+	select EXYNOS_DEV_PD
+	select S5P_SYSTEM_MMU
+	select EXYNOS4_SETUP_I2C1
+	select EXYNOS4_SETUP_I2C3
+	select EXYNOS4_SETUP_I2C5
+	select EXYNOS4_SETUP_I2C6
+	select EXYNOS4_SETUP_I2C7
+	select EXYNOS4_SETUP_SDHCI
+	select EXYNOS4_SETUP_HDMI
+	select EXYNOS4_SETUP_MSHCI
+	select EXYNOS4_SETUP_MFC
+	select EXYNOS4_SETUP_USB_PHY
+	select EXYNOS4_SETUP_THERMAL
+	select GPS_GSD4T
+	help
+	  Machine support for Samsung Mobile TRATS Board.
+	  TRATS is one of Samsung mobile division product based on ARM SOC but
+	  it is not for sale, just released for internal development and outer
+	  developer for Tizen project.
+
+endchoice
+
+config MACH_REDWOOD
+	bool "Samsung REDWOOD board"
+	select CPU_EXYNOS4212
+	select CPU_EXYNOS4412
+	select S3C_DEV_WDT
+	select S3C_DEV_RTC
+	select S3C_DEV_HSMMC2
+	select S3C_DEV_HSMMC3
+	select S5P_DEV_USB_EHCI
+	select S3C_DEV_I2C1
+	select S3C_DEV_I2C3
+	select S3C_DEV_I2C4
+	select S3C_DEV_I2C5
+	select S3C_DEV_I2C7
+	select S5P_DEV_USBGADGET
+	select S5P_DEV_DSIM02
+	select S5P_DEV_FIMD0
+	select S5P_DEV_FIMG2D
+	select S5P_DEV_MFC
+	select S5P_DEV_TV
+	select S5P_DEV_I2C_HDMIPHY
+	select EXYNOS4_DEV_MSHC
+	select EXYNOS4_SETUP_MSHCI
+	select EXYNOS4_MSHC_MPLL_40MHZ
+	select EXYNOS4_MSHC_DDR
+	select EXYNOS4_MSHC_8BIT
+	select EXYNOS4_SETUP_SDHCI
+	select EXYNOS4_SETUP_HDMI
+	select EXYNOS4_SETUP_I2C1
+	select EXYNOS4_SETUP_I2C3
+	select EXYNOS4_SETUP_I2C4
+	select EXYNOS4_SETUP_I2C5
+	select EXYNOS4_SETUP_I2C7
+	select EXYNOS4_SETUP_USB_PHY
+	select EXYNOS4_SETUP_MFC
+	select S5P_SETUP_MIPIPHY
+	select S5P_GPIO_INT
+	select SAMSUNG_DEV_PWM
+	select EXYNOS_DEV_PD
+	select MIDAS_COMMON
+	select SLP_WIP
+	select BT_BCM4334
+	select GPS_BCM47511
+	select GPS_BCM4752
+	select S3C64XX_DEV_SPI
+	select CONFIG_VIDEO_FIMC_MIPI
+	select S3C_ADC
+	select SAMSUNG_DEV_ADC
+	select EXYNOS_SYSREG_PM
+	select BATTERY_MAX17047_FUELGAUGE
+	select MFD_MAX77693
+	select MFD_MAX77686
+	select EXYNOS4_DEV_FIMC_LITE
+	select UART_SELECT
+	select USB_HOST_NOTIFY
+	select EXTCON
+	select EXYNOS4_DEV_TMU
+	select THERMAL
+	select CPU_THERMAL
+	select SAMSUNG_THERMAL_INTERFACE
+	select SENSORS_EXYNOS4_TMU
+	select MIDAS_COMMON_BD
+	help
+	  Machine support for Samsung SLP REDWOOD board.
+	  The GPIO mapping is known to be same with M0 board.
+	  REDWOOD board is not known to have Exynos4212; however,
+	  CPU_EXYNOS4212 config is included because of Kconfig
+	  issues that does not allow to compile board files
+	  with CPU_EXYNOS4412 enabled without CPU_EXYNOS4212.
+
+config MACH_SLP_PQ_DEVS
+	bool
+	select CPU_EXYNOS4212
+	select CPU_EXYNOS4412
+	select S3C_DEV_WDT
+	select S3C_DEV_RTC
+	select S3C_DEV_HSMMC2
+	select S3C_DEV_HSMMC3
+	select S5P_DEV_USB_EHCI
+	select S3C_DEV_I2C1
+	select S3C_DEV_I2C3
+	select S3C_DEV_I2C4
+	select S3C_DEV_I2C5
+	select S3C_DEV_I2C7
+	select S5P_DEV_USBGADGET
+	select S5P_DEV_DSIM02
+	select S5P_DEV_FIMD0
+	select S5P_DEV_FIMG2D
+	select S5P_DEV_MFC
+	select S5P_DEV_TV
+	select S5P_DEV_I2C_HDMIPHY
+	select EXYNOS4_DEV_MSHC
+	select EXYNOS4_SETUP_MSHCI
+	select EXYNOS4_MSHC_MPLL_40MHZ
+	select EXYNOS4_MSHC_DDR
+	select EXYNOS4_MSHC_8BIT
+	select EXYNOS4_SETUP_SDHCI
+	select EXYNOS4_SETUP_HDMI
+	select EXYNOS4_SETUP_I2C1
+	select EXYNOS4_SETUP_I2C3
+	select EXYNOS4_SETUP_I2C4
+	select EXYNOS4_SETUP_I2C5
+	select EXYNOS4_SETUP_I2C7
+	select EXYNOS4_SETUP_USB_PHY
+	select EXYNOS4_SETUP_MFC
+	select S5P_SETUP_MIPIPHY
+	select S5P_GPIO_INT
+	select SAMSUNG_DEV_PWM
+	select EXYNOS_DEV_PD
+	select MIDAS_COMMON
+	select SLP_WIP
+	select BT_BCM4334
+	select GPS_BCM47511
+	select S3C64XX_DEV_SPI
+	select CONFIG_VIDEO_FIMC_MIPI
+	select S3C_ADC
+	select SAMSUNG_DEV_ADC
+	select EXYNOS_SYSREG_PM
+	select BATTERY_MAX17047_FUELGAUGE
+	select MFD_MAX77693
+	select MFD_MAX77686
+	select EXYNOS4_DEV_FIMC_LITE
+	select UART_SELECT
+	select USB_HOST_NOTIFY
+	select EXTCON
+	select EXYNOS4_DEV_TMU
+	select THERMAL
+	select CPU_THERMAL
+	select SAMSUNG_THERMAL_INTERFACE
+	select SENSORS_EXYNOS4_TMU
+
+config MACH_SLP_PQ_LTE_DEVS
+	bool
+	select CPU_EXYNOS4212
+	select CPU_EXYNOS4412
+	select S3C_DEV_WDT
+	select S3C_DEV_RTC
+	select S3C_DEV_HSMMC2
+	select S3C_DEV_HSMMC3
+	select S5P_DEV_USB_EHCI
+	select S3C_DEV_I2C1
+	select S3C_DEV_I2C3
+	select S3C_DEV_I2C4
+	select S3C_DEV_I2C5
+	select S3C_DEV_I2C7
+	select S5P_DEV_USBGADGET
+	select S5P_DEV_DSIM02
+	select S5P_DEV_FIMD0
+	select S5P_DEV_FIMG2D
+	select S5P_DEV_MFC
+	select S5P_DEV_TV
+	select S5P_DEV_I2C_HDMIPHY
+	select EXYNOS4_DEV_MSHC
+	select EXYNOS4_SETUP_MSHCI
+	select EXYNOS4_MSHC_MPLL_40MHZ
+	select EXYNOS4_MSHC_DDR
+	select EXYNOS4_MSHC_8BIT
+	select EXYNOS4_SETUP_SDHCI
+	select EXYNOS4_SETUP_HDMI
+	select EXYNOS4_SETUP_I2C1
+	select EXYNOS4_SETUP_I2C3
+	select EXYNOS4_SETUP_I2C4
+	select EXYNOS4_SETUP_I2C5
+	select EXYNOS4_SETUP_I2C7
+	select EXYNOS4_SETUP_USB_PHY
+	select EXYNOS4_SETUP_MFC
+	select S5P_SETUP_MIPIPHY
+	select S5P_GPIO_INT
+	select SAMSUNG_DEV_PWM
+	select EXYNOS_DEV_PD
+	select MIDAS_COMMON
+	select SLP_WIP
+	select BT_BCM4334
+	select S3C64XX_DEV_SPI
+	select CONFIG_VIDEO_FIMC_MIPI
+	select S3C_ADC
+	select SAMSUNG_DEV_ADC
+	select EXYNOS_SYSREG_PM
+	select BATTERY_MAX17047_FUELGAUGE
+	select MFD_MAX77693
+	select MFD_MAX77686
+	select EXYNOS4_DEV_FIMC_LITE
+	select UART_SELECT
+	select CPU_FREQ_GOV_ONDEMAND_FLEXRATE if CPU_FREQ_GOV_ONDEMAND
+	select USB_HOST_NOTIFY
+	select EXTCON
+	select THERMAL
+	select CPU_THERMAL
+	select SAMSUNG_THERMAL_INTERFACE
+	select EXYNOS4_DEV_TMU
+	select SENSORS_EXYNOS4_TMU
+
+config MACH_SLP_T0_LTE_DEVS
+	bool
+	select CPU_EXYNOS4212
+	select CPU_EXYNOS4412
+	select S3C_DEV_WDT
+	select S3C_DEV_RTC
+	select S3C_DEV_HSMMC2
+	select S3C_DEV_HSMMC3
+	select S5P_DEV_USB_EHCI
+	select S3C_DEV_I2C1
+	select S3C_DEV_I2C3
+	select S3C_DEV_I2C4
+	select S3C_DEV_I2C5
+	select S3C_DEV_I2C7
+	select S5P_DEV_USBGADGET
+	select S5P_DEV_DSIM02
+	select S5P_DEV_FIMD0
+	select S5P_DEV_FIMG2D
+	select S5P_DEV_MFC
+	select S5P_DEV_TV
+	select S5P_DEV_I2C_HDMIPHY
+	select EXYNOS4_DEV_MSHC
+	select EXYNOS4_SETUP_MSHCI
+	select EXYNOS4_MSHC_MPLL_40MHZ
+	select EXYNOS4_MSHC_DDR
+	select EXYNOS4_MSHC_8BIT
+	select EXYNOS4_SETUP_SDHCI
+	select EXYNOS4_SETUP_HDMI
+	select EXYNOS4_SETUP_I2C1
+	select EXYNOS4_SETUP_I2C3
+	select EXYNOS4_SETUP_I2C4
+	select EXYNOS4_SETUP_I2C5
+	select EXYNOS4_SETUP_I2C7
+	select EXYNOS4_SETUP_USB_PHY
+	select EXYNOS4_SETUP_MFC
+	select S5P_SETUP_MIPIPHY
+	select S5P_GPIO_INT
+	select SAMSUNG_DEV_PWM
+	select EXYNOS_DEV_PD
+	select MIDAS_COMMON
+	select SLP_WIP
+	select BT_BCM4334
+	select GPS_BCM47511
+	select S3C64XX_DEV_SPI
+	select CONFIG_VIDEO_FIMC_MIPI
+	select S3C_ADC
+	select SAMSUNG_DEV_ADC
+	select EXYNOS_SYSREG_PM
+	select BATTERY_MAX17047_FUELGAUGE
+	select MFD_MAX77693
+	select MFD_MAX77686
+	select EXYNOS4_DEV_FIMC_LITE
+	select UART_SELECT
+	select USB_HOST_NOTIFY
+	select EXTCON
+	select EXYNOS4_DEV_TMU
+	select THERMAL
+	select CPU_THERMAL
+	select SAMSUNG_THERMAL_INTERFACE
+	select SENSORS_EXYNOS4_TMU
+
+config GPS_BCM47511
+	bool
+	default n
+	help
+	  Add BCM4751x GPS driver for Broadcom BCM4751x chipset.
+	  This driver do nothing else but only provide rfkill container and
+	  control 32KHz clock. But SLP daemon(like location manager) can use
+	  rfkill to select proper device API.
+
+config GPS_BCM4752
+	bool
+	default n
+	help
+	  Add BCM4752 GPS driver for Broadcom BCM4752 chipset.
+	  This driver do nothing else but only provide rfkill container and
+	  control 32KHz clock. But SLP daemon(like location manager) can use
+	  rfkill to select proper device API.
+
+config GPS_GSD4T
+	bool
+	default n
+	help
+	  Add GSD4T GPS driver for CSR GSD4T chipset.
+	  This driver do nothing else but only provide rfkill container and
+	  control 32KHz clock. But SLP daemon(like location manager) can use
+	  rfkill to select proper device API.
+
+config NAPLES_COMMON
+	bool
+	help
+	  Support common devices of NAPLES board.
+	  Naples board is different from Midas board.
+	  It has same AP and PMIC but specific HW devices are different.
+	  Camera, LCD, Touch, and several sensors are diffenent.
+
+config GPIO_NAPLES_00_BD
+	bool "GPIO configuration for Naples 00 BD"
+
+config MACH_SLP_NAPLES_DEVS
+	bool
+	select CPU_EXYNOS4212
+	select CPU_EXYNOS4412
+	select S3C_DEV_WDT
+	select S3C_DEV_RTC
+	select S3C_DEV_HSMMC2
+	select S3C_DEV_HSMMC3
+	select S5P_DEV_USB_EHCI
+	select S3C_DEV_I2C1
+	select S3C_DEV_I2C3
+	select S3C_DEV_I2C4
+	select S3C_DEV_I2C5
+	select S3C_DEV_I2C7
+	select S5P_DEV_USBGADGET
+	select S5P_DEV_DSIM02
+	select S5P_DEV_FIMD0
+	select S5P_DEV_MFC
+	select EXYNOS4_DEV_MSHC
+	select EXYNOS4_SETUP_MSHCI
+	select EXYNOS4_MSHC_MPLL_40MHZ
+	select EXYNOS4_MSHC_DDR
+	select EXYNOS4_MSHC_8BIT
+	select EXYNOS4_SETUP_SDHCI
+	select EXYNOS4_SETUP_I2C1
+	select EXYNOS4_SETUP_I2C3
+	select EXYNOS4_SETUP_I2C4
+	select EXYNOS4_SETUP_I2C5
+	select EXYNOS4_SETUP_I2C7
+	select EXYNOS4_SETUP_USB_PHY
+	select EXYNOS4_SETUP_MFC
+	select S5P_SETUP_MIPIPHY
+	select S5P_GPIO_INT
+	select SAMSUNG_DEV_PWM
+	select EXYNOS_DEV_PD
+	select NAPLES_COMMON
+	select SLP_WIP
+	select BT_BCM4334
+	select GPS_BCM47511
+	select CONFIG_VIDEO_FIMC_MIPI
+	select CHARGER_MANAGER
+	select EXYNOS_SYSREG_PM
+	select BATTERY_MAX17047_FUELGAUGE
+	select MFD_MAX77693
+	select UART_SELECT
+	select CPU_FREQ_GOV_ONDEMAND_FLEXRATE if CPU_FREQ_GOV_ONDEMAND
+	select USB_HOST_NOTIFY
+	select EXTCON
+
+config SLP_WIP
+	bool
+	help
+	  Please remove it later
+
+config SLP_DISP_DEBUG
+	bool "Display debug support"
+	help
+	  Support display sub part register debugging in console.
+	  If you enable this config option, you can see display sub part register.
+	  display sub part is composed FIMD, DSIM, mDNIe, FIMD-Lite(ielcd).
+	  also support FIMC, GSC for IPP.
+
+config EXYNOS4_DEV_TMU
+	bool "Exynos4 tmu device support"
+	default n
+	depends on ARCH_EXYNOS4
+	help
+	  Compile in platform device definitions for TMU. This macro also
+	  enables compilation hwmon base TMU driver and also allows compilation
+	  of the platform device files. The platform data in this case is trip
+	  temperature and some tmu h/w configurations related parameter.
+
+config BUSFREQ_LOCK_WRAPPER
+	bool "BUSFREQ_LOCK Wrapper support for legacy kernel hack"
+	depends on ARM_EXYNOS4_BUS_DEVFREQ && SLP
+	default n
+	help
+	  busfreq_lock() and busfreq_lock_free() are not supported in
+	  busfreq with devfreq framework. However, enabling this adds
+	  wrappers to support these two legacy kernel hack to sustain
+	  minimum bus/memory frequency.
+	  In addition, this supports dev_lock/unlock for memory bus.
+
+if BT
+config BT_TIZEN
+	bool "Bluetooth Tizen"
+	default n
+	help
+	  This is for bluetooth Tizen
+endif
diff -Naur ./arch/arm/mach-exynos/kona-gpio.c ../../HK_JB/Kernel/arch/arm/mach-exynos/kona-gpio.c
--- ./arch/arm/mach-exynos/kona-gpio.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/kona-gpio.c	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,653 @@
+/*
+ *  linux/arch/arm/mach-exynos/midas-gpio.c
+ *
+ * Copyright (c) 2010 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com/
+ *
+ * EXYNOS - GPIO setting in set board
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/gpio.h>
+#include <linux/serial_core.h>
+#include <plat/devs.h>
+#include <plat/gpio-cfg.h>
+#include <plat/regs-serial.h>
+#include <mach/gpio-midas.h>
+#include <plat/cpu.h>
+#include <mach/pmu.h>
+
+struct gpio_init_data {
+	uint num;
+	uint cfg;
+	uint val;
+	uint pud;
+	uint drv;
+};
+
+extern int s3c_gpio_slp_cfgpin(unsigned int pin, unsigned int config);
+extern int s3c_gpio_slp_setpull_updown(unsigned int pin, unsigned int config);
+
+#ifdef CONFIG_MIDAS_COMMON
+/*
+ * P4NOTE GPIO Init Table
+ */
+static struct gpio_init_data p4note_init_gpios[] = {
+#if defined(CONFIG_QC_MODEM)
+	{EXYNOS4_GPA0(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+	{EXYNOS4_GPA0(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+	{EXYNOS4_GPA0(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+#endif
+
+#if defined(CONFIG_SEC_MODEM)
+	{EXYNOS4_GPA1(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+	{EXYNOS4_GPA1(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+#endif
+
+	{EXYNOS4_GPD0(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
+	{EXYNOS4_GPD0(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
+	{EXYNOS4_GPD1(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
+	{EXYNOS4_GPD1(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
+	{EXYNOS4_GPD1(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* GSENSE_SDA_1.8V */
+	{EXYNOS4_GPD1(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* GSENSE_SCL_1.8V */
+
+#if defined(CONFIG_QC_MODEM)
+	{EXYNOS4_GPL2(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* BUCK2_SEL */
+	{EXYNOS4_GPL2(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* BUCK3_SEL */
+#endif
+
+	{EXYNOS4_GPX0(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* ADC_IC_INT */
+	{EXYNOS4_GPX0(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* PS_ALS_INT */
+	{EXYNOS4_GPX0(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* DET_3.5 */
+	{EXYNOS4_GPX0(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* DOCK_INT */
+	{EXYNOS4_GPX0(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* REMOTE_SENSE_IRQ */
+	{EXYNOS4_GPX0(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* GYRO_INT */
+
+	{EXYNOS4_GPX0(7), S3C_GPIO_SFN(0xF), S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* AP_PMIC_IRQ */
+
+	{EXYNOS4_GPX1(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* ACCESSORY_INT */
+	{EXYNOS4_GPX1(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* TA_INT */
+	{EXYNOS4_GPX1(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* OVP_FLAG */
+#if defined(CONFIG_SEC_MODEM) || defined(CONFIG_QC_MODEM)
+	{EXYNOS4_GPX1(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* SIM_DETECT */
+#endif
+
+#if !defined(CONFIG_QC_MODEM)
+	{EXYNOS4_GPX2(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
+	{EXYNOS4_GPX2(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
+#endif
+	{EXYNOS4_GPX2(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* FUEL_ALERT */
+#if defined(CONFIG_QC_MODEM)
+	{EXYNOS4_GPX2(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
+#endif
+	{EXYNOS4_GPX2(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* BT_HOST_WAKEUP */
+	{EXYNOS4_GPX2(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* nPower */
+
+	{EXYNOS4_GPX3(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* IF_CON_SENSE */
+	{EXYNOS4_GPX3(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* BT_WAKE */
+#if defined(CONFIG_SEC_MODEM)
+	{EXYNOS4_GPX3(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* CP_PMU_RST */
+#endif
+	{EXYNOS4_GPX3(5), S3C_GPIO_SFN(0xF), S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* V_ACCESSORY_5V */
+
+	{EXYNOS4_GPK1(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+	{EXYNOS4_GPK1(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+	{EXYNOS4_GPK1(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+
+	{EXYNOS4_GPK3(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* WLAN_SDIO_CMD */
+	{EXYNOS4_GPK3(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* WLAN_SDIO_D(0) */
+	{EXYNOS4_GPK3(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* WLAN_SDIO_D(1) */
+	{EXYNOS4_GPK3(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* WLAN_SDIO_D(2) */
+	{EXYNOS4_GPK3(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* WLAN_SDIO_D(3) */
+
+#if !defined(CONFIG_SEC_MODEM) && !defined(CONFIG_QC_MODEM)
+	{EXYNOS4212_GPM0(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+#endif
+	{EXYNOS4212_GPM3(0), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_ZERO,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* PMIC_DVS1 */
+
+	{EXYNOS4_GPY0(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+	{EXYNOS4_GPY0(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+	{EXYNOS4_GPY1(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+	{EXYNOS4_GPY1(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+	{EXYNOS4_GPY1(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+	{EXYNOS4_GPY1(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+
+	{EXYNOS4212_GPJ1(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* CAM_MCLK */
+	{EXYNOS4212_GPM2(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* VTCAM_MCLK */
+#if defined(CONFIG_QC_MODEM)
+	{EXYNOS4212_GPM3(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_UP, S5P_GPIO_DRVSTR_LV1}, /* AP2MDM_PMIC_RESET_N */
+#endif
+};
+
+/*
+ * P4NOTE GPIO Sleep Table
+ */
+static unsigned int p4note_sleep_gpio_table[][3] = {
+	{EXYNOS4_GPA0(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPA0(1),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPA0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPA0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+#if !defined(CONFIG_QC_MODEM)
+	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPA0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+#else
+	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* AP_PEN_FWE0 */
+	{EXYNOS4_GPA0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#endif
+
+	{EXYNOS4_GPA1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPA1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPA1(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPA1(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+#if defined(CONFIG_SEC_MODEM) || defined(CONFIG_QC_MODEM)
+	{EXYNOS4_GPA1(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC(IPC_RXD) */
+	{EXYNOS4_GPA1(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC(IPC_TXD) */
+#else
+	{EXYNOS4_GPA1(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* IPC_RXD */
+	/*
+	 * UART3-TXD : It should be pulled up during sleep, if this uart is
+	 * used for PC connection like a factory command program.
+	 * Otherwise, a PC might get null characters like noise.
+	 * In addition, LPA mode is also applied to this comment, because
+	 * LPA mode invokes this GPIO sleep configuration.
+	 */
+	{EXYNOS4_GPA1(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /* IPC_TXD */
+#endif
+
+	{EXYNOS4_GPB(0),   S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPB(1),   S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPB(2),   S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPB(3),   S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPB(4),   S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPB(5),   S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4_GPB(6),   S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPB(7),   S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+
+#if !defined(CONFIG_QC_MODEM)
+	{EXYNOS4_GPC0(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* REC_PCM_CLK(NC) */
+	{EXYNOS4_GPC0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* LCD_EN */
+	{EXYNOS4_GPC0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* REC_PCM_SYNC(NC) */
+	{EXYNOS4_GPC0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* REC_PCM_IN(NC) */
+	{EXYNOS4_GPC0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* REC_PCM_OUT(NC) */
+#else
+	{EXYNOS4_GPC0(0),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* WCN_PRIORITY */
+	{EXYNOS4_GPC0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* LCD_EN */
+	{EXYNOS4_GPC0(2),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* AP2MDM_HOST_READY */
+	{EXYNOS4_GPC0(3),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /*AP2MDM_ERR_FATAL*/
+	{EXYNOS4_GPC0(4),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* MDM_LTE_FRAME_SYNC */
+#endif
+#if defined(CONFIG_SEC_MODEM_M0_TD)
+	{EXYNOS4_GPC1(0), S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
+#else
+	{EXYNOS4_GPC1(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /* PEN_PDCT */
+#endif
+	{EXYNOS4_GPC1(1),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* PEN_LDO_EN */
+
+	{EXYNOS4_GPC1(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /* PEN_IRQ_1.8V */
+	{EXYNOS4_GPC1(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /* PEN_SDA_1.8V */
+	{EXYNOS4_GPC1(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /* PEN_SCL_1.8V */
+
+	{EXYNOS4_GPD0(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4_GPD0(1),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LED_BACKLIGHT_PWM */
+	{EXYNOS4_GPD0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPD0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+
+	{EXYNOS4_GPD1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* 3M_SDA_1.8V */
+	{EXYNOS4_GPD1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* 3M_SCL_1.8V */
+	{EXYNOS4_GPD1(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPD1(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+
+	{EXYNOS4_GPF0(0),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_HSYNC */
+	{EXYNOS4_GPF0(1),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_VSYNC */
+	{EXYNOS4_GPF0(2),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_DE */
+	{EXYNOS4_GPF0(3),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_PCLK */
+	{EXYNOS4_GPF0(4),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF0(5),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF0(6),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF0(7),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+
+	{EXYNOS4_GPF1(0),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF1(1),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF1(2),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF1(3),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF1(4),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF1(5),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF1(6),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF1(7),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+
+	{EXYNOS4_GPF2(0),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF2(1),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF2(2),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF2(3),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF2(4),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF2(5),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF2(6),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF2(7),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+
+	{EXYNOS4_GPF3(0),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF3(1),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF3(2),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF3(3),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LCD_D */
+	{EXYNOS4_GPF3(4),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* MHL_RST */
+	{EXYNOS4_GPF3(5),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* MHL_INT */
+
+	{EXYNOS4_GPK0(0),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* NAND_CLK */
+	{EXYNOS4_GPK0(1),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* NAND_CMD */
+	{EXYNOS4_GPK0(2),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* eMMC_EN */
+	{EXYNOS4_GPK0(3),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* NAND_D(0) */
+	{EXYNOS4_GPK0(4),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* NAND_D(1) */
+	{EXYNOS4_GPK0(5),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* NAND_D(2) */
+	{EXYNOS4_GPK0(6),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* NAND_D(3) */
+
+	{EXYNOS4_GPK1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPK1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4_GPK1(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPK1(3),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* NAND_D(4) */
+	{EXYNOS4_GPK1(4),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* NAND_D(5) */
+	{EXYNOS4_GPK1(5),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* NAND_D(6) */
+	{EXYNOS4_GPK1(6),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* NAND_D(7) */
+
+	{EXYNOS4_GPK2(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPK2(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPK2(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4_GPK2(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPK2(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPK2(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPK2(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+
+	{EXYNOS4_GPK3(0),  S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPK3(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPK3(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4_GPK3(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPK3(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPK3(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPK3(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+
+#if defined(CONFIG_SEC_MODEM)
+	{EXYNOS4_GPL0(0),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* ACTIVE_STATE_HSIC */
+#elif defined(CONFIG_QC_MODEM)
+	{EXYNOS4_GPL0(0),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* MDM2AP_HSIC_READY */
+#else
+	{EXYNOS4_GPL0(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#endif
+	{EXYNOS4_GPL0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* PS_ALS_SCL_1.8V */
+	{EXYNOS4_GPL0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* PS_ALS_SDA_1.8V */
+	{EXYNOS4_GPL0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC(IRDA_CONTROL) */
+	{EXYNOS4_GPL0(4),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* HDMI_EN */
+	{EXYNOS4_GPL0(6),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
+
+#if defined(CONFIG_SEC_MODEM)
+	{EXYNOS4_GPL1(0),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* PDA_ACTIVE */
+#elif defined(CONFIG_QC_MODEM)
+	{EXYNOS4_GPL1(0), S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* AP2MDM_STATUS */
+#else
+	{EXYNOS4_GPL1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#endif
+	{EXYNOS4_GPL1(1),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* 3M_nRST */
+
+	{EXYNOS4_GPL2(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+#if !defined(CONFIG_QC_MODEM)
+	{EXYNOS4_GPL2(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4_GPL2(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#else
+	{EXYNOS4_GPL2(1),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* BUCK2_SEL */
+	{EXYNOS4_GPL2(2),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* BUCK3_SEL */
+#endif
+	{EXYNOS4_GPL2(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+#if defined(CONFIG_MACH_C1) || defined(CONFIG_MACH_M3)
+	/* GLP2(4) CMC_CPU_RESET, hold high */
+	{EXYNOS4_GPL2(4),  S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE}, /* NC */
+#else
+	{EXYNOS4_GPL2(4),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* MOTOR_EN */
+#endif
+#if !defined(CONFIG_QC_MODEM)
+	{EXYNOS4_GPL2(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CP_ON(NC) */
+#else
+	{EXYNOS4_GPL2(5),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* AP2MDM_PON_RESET_N */
+#endif
+	{EXYNOS4_GPL2(6),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPL2(7),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* UART_SEL */
+
+	{EXYNOS4_GPY0(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* NC */
+	{EXYNOS4_GPY0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* NC */
+	{EXYNOS4_GPY0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* USB_SEL0 */
+	{EXYNOS4_GPY0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* USB_SEL1 */
+
+	{EXYNOS4_GPY1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4_GPY1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4_GPY1(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS4_GPY1(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4_GPY2(0),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* TF_EN */
+#if (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2)
+	{EXYNOS4_GPY2(1),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* UART_SEL2 */
+#endif /* (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2) */
+	{EXYNOS4_GPY2(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPY2(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPY2(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPY2(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+
+	{EXYNOS4_GPY3(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY3(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY3(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY3(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY3(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY3(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY3(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY3(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+
+	{EXYNOS4_GPY4(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY4(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY4(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY4(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY4(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY4(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY4(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY4(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+
+	{EXYNOS4_GPY5(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY5(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY5(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY5(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY5(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY5(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY5(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY5(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+
+	{EXYNOS4_GPY6(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY6(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY6(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY6(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY6(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY6(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY6(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPY6(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+
+	{EXYNOS4_GPZ(0),   S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPZ(1),   S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4_GPZ(2),   S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPZ(3),   S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPZ(4),   S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPZ(5),   S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4_GPZ(6),   S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+
+	/* Exynos4212 specific gpio */
+	{EXYNOS4212_GPJ0(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CAM_PCLK */
+	{EXYNOS4212_GPJ0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CAM_VSYNC */
+	{EXYNOS4212_GPJ0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CAM_HSYNC */
+	{EXYNOS4212_GPJ0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CAM_D */
+	{EXYNOS4212_GPJ0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CAM_D */
+	{EXYNOS4212_GPJ0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CAM_D */
+	{EXYNOS4212_GPJ0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CAM_D */
+	{EXYNOS4212_GPJ0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CAM_D */
+
+	{EXYNOS4212_GPJ1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CAM_D */
+	{EXYNOS4212_GPJ1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CAM_D */
+	{EXYNOS4212_GPJ1(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CAM_D */
+	{EXYNOS4212_GPJ1(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CAM_MCLK */
+	{EXYNOS4212_GPJ1(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+
+	{EXYNOS4212_GPM0(0),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* MICBIAS_EN */
+	{EXYNOS4212_GPM0(1),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LED_BACKLIGHT_RESET */
+	{EXYNOS4212_GPM0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4212_GPM0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* TA_nCHG */
+	{EXYNOS4212_GPM0(4),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* TSP_RST */
+	{EXYNOS4212_GPM0(5),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LVDS_nSHDN */
+	{EXYNOS4212_GPM0(6),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* 3M_nSTBY */
+#if defined(CONFIG_SEC_MODEM) || defined(CONFIG_QC_MODEM)
+	{EXYNOS4212_GPM0(7),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* USB_SEL_CP */
+#else
+	{EXYNOS4212_GPM0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#endif
+
+	{EXYNOS4212_GPM1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* MOTOR_I2C_SDA */
+	{EXYNOS4212_GPM1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* MOTOR_I2C_SCL */
+	{EXYNOS4212_GPM1(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* HW_REV0 */
+	{EXYNOS4212_GPM1(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* HW_REV1 */
+	{EXYNOS4212_GPM1(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* HW_REV2 */
+	{EXYNOS4212_GPM1(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* HW_REV3 */
+	{EXYNOS4212_GPM1(6),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* 2M_nRST */
+
+	{EXYNOS4212_GPM2(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* NC */
+	{EXYNOS4212_GPM2(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* NC */
+	{EXYNOS4212_GPM2(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPM2(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	 /*  SUSPEND_REQUEST_HSIC for 3G, AP2MDM_WAKEUP for LTE, NC */
+	{EXYNOS4212_GPM2(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+
+	{EXYNOS4212_GPM3(0),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* PMIC_DVS1 */
+	{EXYNOS4212_GPM3(1),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* PMIC_DVS2 */
+	{EXYNOS4212_GPM3(2),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* PMIC_DVS3 */
+#if defined(CONFIG_SEC_MODEM)
+	{EXYNOS4212_GPM3(3),  S3C_GPIO_SLP_OUT1, S3C_GPIO_PULL_NONE}, /* RESET_REQ_N */
+	{EXYNOS4212_GPM3(4),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_DOWN}, /* AP_DUMP_INT */
+#elif defined(CONFIG_QC_MODEM)
+	{EXYNOS4212_GPM3(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* AP2MDM_SOFT_RESET */
+	{EXYNOS4212_GPM3(4),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* AP2MDM_PMIC_RESET_N */
+#else
+	{EXYNOS4212_GPM3(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4212_GPM3(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#endif
+	{EXYNOS4212_GPM3(5),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* WLAN_EN */
+	{EXYNOS4212_GPM3(6),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* CAM_MOVIE_EN */
+	{EXYNOS4212_GPM3(7),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* CAM_FLASH_EN */
+
+	{EXYNOS4212_GPM4(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* ADC_I2C_SCL_1.8V */
+	{EXYNOS4212_GPM4(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* ADC_I2C_SDA_1.8V */
+	{EXYNOS4212_GPM4(2),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* TA_ENABLE */
+	{EXYNOS4212_GPM4(3),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* 2M_nSTBY */
+	{EXYNOS4212_GPM4(4),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /* CODEC_LDO_EN */
+	{EXYNOS4212_GPM4(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4212_GPM4(6),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* USB_OTG_EN */
+	{EXYNOS4212_GPM4(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* MSENSE_INT */
+
+	{EXYNOS4212_GPV0(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+
+	{EXYNOS4212_GPV1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV1(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV1(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV1(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV1(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV1(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV1(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+
+	{EXYNOS4212_GPV2(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV2(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV2(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV2(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV2(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV2(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV2(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV2(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+
+	{EXYNOS4212_GPV3(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV3(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV3(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV3(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV3(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV3(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV3(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV3(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+
+	{EXYNOS4212_GPV4(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4212_GPV4(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+}; /* p4note_sleep_gpio_table */
+
+/*
+ * P4NOTE Rev0.9 GPIO Sleep Table
+ */
+static unsigned int p4note_sleep_gpio_table_rev09[][3] = {
+	{EXYNOS4212_GPJ0(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4212_GPJ0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4212_GPJ0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4212_GPJ0(3),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* EAR_MICBIAS_EN */
+	{EXYNOS4212_GPJ0(4),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* TA_ENABLE */
+	{EXYNOS4212_GPJ0(5),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* CAM_EN2 */
+	{EXYNOS4212_GPJ0(6),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* CAM_EN1 */
+	{EXYNOS4212_GPJ0(7),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* 5M_nSTBY */
+
+	{EXYNOS4212_GPJ1(0),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* VT_CAM_nRST */
+	{EXYNOS4212_GPJ1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4212_GPJ1(2),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* LINEOUT_EN */
+	{EXYNOS4212_GPJ1(3),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* 5M_MCLK */
+
+	{EXYNOS4212_GPM0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4212_GPM1(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4212_GPM2(2),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* VT_CAM_MCLK */
+	{EXYNOS4212_GPM4(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* VT_CAM_SCL_1.8V */
+	{EXYNOS4212_GPM4(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* VT_CAM_SDA_1.8V */
+	{EXYNOS4212_GPM4(5),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* TSP_LDO_ON */
+};
+
+struct p4note_sleep_table {
+	unsigned int (*ptr)[3];
+	int size;
+};
+
+#define GPIO_TABLE(_ptr) \
+	{.ptr = _ptr, \
+	.size = ARRAY_SIZE(_ptr)} \
+
+ #define GPIO_TABLE_NULL \
+	{.ptr = NULL, \
+	.size = 0} \
+
+static struct p4note_sleep_table p4note_sleep_table[] = {
+	GPIO_TABLE(p4note_sleep_gpio_table),		/* Rev0.8(0x0) */
+	GPIO_TABLE(p4note_sleep_gpio_table_rev09),	/* Rev0.9(0x1) */
+	GPIO_TABLE_NULL,
+	GPIO_TABLE_NULL,
+	GPIO_TABLE_NULL,
+	GPIO_TABLE_NULL,
+	GPIO_TABLE_NULL,
+	GPIO_TABLE_NULL,
+	GPIO_TABLE_NULL,
+	GPIO_TABLE_NULL,
+	GPIO_TABLE_NULL,
+	GPIO_TABLE_NULL,
+};
+#endif /* CONFIG_MIDAS_COMMON */
+
+static void config_sleep_gpio_table(int array_size,
+				    unsigned int (*gpio_table)[3])
+{
+	u32 i, gpio;
+
+	for (i = 0; i < array_size; i++) {
+		gpio = gpio_table[i][0];
+		s3c_gpio_slp_cfgpin(gpio, gpio_table[i][1]);
+		s3c_gpio_slp_setpull_updown(gpio, gpio_table[i][2]);
+	}
+}
+
+#ifdef CONFIG_MIDAS_COMMON
+void p4note_config_sleep_gpio_table(void)
+{
+	int i;
+	int index = min(ARRAY_SIZE(p4note_sleep_table), system_rev + 1);
+
+	for (i = 0; i < index; i++) {
+		if (p4note_sleep_table[i].ptr == NULL)
+			continue;
+
+		config_sleep_gpio_table(p4note_sleep_table[i].size,
+				p4note_sleep_table[i].ptr);
+	}
+}
+#endif
+
+/* To save power consumption, gpio pin set before enterling sleep */
+void midas_config_sleep_gpio_table(void)
+{
+	p4note_config_sleep_gpio_table();
+}
+
+/* Intialize gpio set in midas board */
+void midas_config_gpio_table(void)
+{
+	u32 i, gpio;
+
+	printk(KERN_DEBUG "%s\n", __func__);
+
+	for (i = 0; i < ARRAY_SIZE(p4note_init_gpios); i++) {
+		gpio = p4note_init_gpios[i].num;
+		if (gpio <= EXYNOS4212_GPV4(1)) {
+			s3c_gpio_cfgpin(gpio, p4note_init_gpios[i].cfg);
+			s3c_gpio_setpull(gpio, p4note_init_gpios[i].pud);
+
+			if (p4note_init_gpios[i].val != S3C_GPIO_SETPIN_NONE)
+				gpio_set_value(gpio, p4note_init_gpios[i].val);
+
+			s5p_gpio_set_drvstr(gpio, p4note_init_gpios[i].drv);
+		}
+	}
+}
diff -Naur ./arch/arm/mach-exynos/kona-input.c ../../HK_JB/Kernel/arch/arm/mach-exynos/kona-input.c
--- ./arch/arm/mach-exynos/kona-input.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/kona-input.c	2012-11-22 09:13:16.000000000 +0100
@@ -0,0 +1,194 @@
+/*
+ *  arch/arm/mach-exynos/p4-input.c
+ *
+ * Copyright (c) 2012 Samsung Electronics Co., Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/i2c.h>
+#include <linux/err.h>
+#include <linux/gpio.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <plat/gpio-cfg.h>
+#include <plat/iic.h>
+#include <linux/regulator/consumer.h>
+
+#if defined(CONFIG_TOUCHSCREEN_SYNAPTICS_S7301)
+#include <linux/synaptics_s7301.h>
+static bool have_tsp_ldo;
+static struct charger_callbacks *charger_callbacks;
+
+void synaptics_ts_charger_infom(bool en)
+{
+	if (charger_callbacks && charger_callbacks->inform_charger)
+		charger_callbacks->inform_charger(charger_callbacks, en);
+}
+
+static void synaptics_ts_register_callback(struct charger_callbacks *cb)
+{
+	charger_callbacks = cb;
+	printk(KERN_DEBUG "[TSP] %s\n", __func__);
+}
+
+static int synaptics_ts_set_power(bool en)
+{
+	struct regulator *regulator;
+
+	if (!have_tsp_ldo)
+		return -1;
+	printk(KERN_DEBUG "[TSP] %s(%d)\n", __func__, en);
+
+	regulator = regulator_get(NULL, "tsp_3.3v");
+	if (IS_ERR(regulator))
+		return PTR_ERR(regulator);
+
+	if (en) {
+		s3c_gpio_cfgpin(GPIO_TSP_SDA_18V, S3C_GPIO_SFN(0x3));
+		s3c_gpio_setpull(GPIO_TSP_SDA_18V, S3C_GPIO_PULL_UP);
+		s3c_gpio_cfgpin(GPIO_TSP_SCL_18V, S3C_GPIO_SFN(0x3));
+		s3c_gpio_setpull(GPIO_TSP_SCL_18V, S3C_GPIO_PULL_UP);
+		s3c_gpio_cfgpin(GPIO_TSP_LDO_ON, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_TSP_LDO_ON, S3C_GPIO_PULL_NONE);
+		gpio_set_value(GPIO_TSP_LDO_ON, 1);
+
+		regulator_enable(regulator);
+
+		s3c_gpio_setpull(GPIO_TSP_INT, S3C_GPIO_PULL_NONE);
+		s3c_gpio_cfgpin(GPIO_TSP_INT, S3C_GPIO_SFN(0xf));
+	} else {
+		s3c_gpio_cfgpin(GPIO_TSP_SDA_18V, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_TSP_SDA_18V, S3C_GPIO_PULL_NONE);
+		gpio_set_value(GPIO_TSP_SDA_18V, 0);
+		s3c_gpio_cfgpin(GPIO_TSP_SCL_18V, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_TSP_SCL_18V, S3C_GPIO_PULL_NONE);
+		gpio_set_value(GPIO_TSP_SCL_18V, 0);
+		s3c_gpio_cfgpin(GPIO_TSP_INT, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_TSP_INT, S3C_GPIO_PULL_NONE);
+		gpio_set_value(GPIO_TSP_INT, 0);
+		s3c_gpio_cfgpin(GPIO_TSP_LDO_ON, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_TSP_LDO_ON, S3C_GPIO_PULL_NONE);
+		gpio_set_value(GPIO_TSP_LDO_ON, 0);
+
+		if (regulator_is_enabled(regulator))
+			regulator_disable(regulator);
+	}
+
+	regulator_put(regulator);
+	return 0;
+}
+
+static void synaptics_ts_reset(void)
+{
+	printk(KERN_DEBUG "[TSP] %s\n", __func__);
+	synaptics_ts_set_power(false);
+	msleep(100);
+	synaptics_ts_set_power(true);
+}
+
+static struct synaptics_platform_data synaptics_ts_pdata = {
+	.gpio_attn = GPIO_TSP_INT,
+	.max_x = 1279,
+	.max_y = 799,
+	.max_pressure = 255,
+	.max_width = 100,
+	.x_line = 26,
+	.y_line = 41,
+	.swap_xy = true,
+	.invert_x = false,
+	.invert_y = true,
+#if defined(CONFIG_SEC_TOUCHSCREEN_SURFACE_TOUCH)
+	.palm_threshold = 28,
+#endif
+	.set_power = synaptics_ts_set_power,
+	.hw_reset = synaptics_ts_reset,
+	.register_cb = synaptics_ts_register_callback,
+};
+
+static struct i2c_board_info i2c_synaptics[] __initdata = {
+	{
+		I2C_BOARD_INFO(SYNAPTICS_TS_NAME,
+			SYNAPTICS_TS_ADDR),
+		.platform_data = &synaptics_ts_pdata,
+	},
+};
+#endif	/* CONFIG_TOUCHSCREEN_SYNAPTICS_S7301 */
+static u32 hw_rev;
+void __init kona_tsp_init(u32 system_rev)
+{
+	int gpio = 0, irq = 0;
+	hw_rev = system_rev;
+
+	printk(KERN_DEBUG "[TSP] %s rev : %u\n",
+		__func__, hw_rev);
+
+	gpio = GPIO_TSP_LDO_ON;
+	gpio_request(gpio, "TSP_LDO_ON");
+	gpio_direction_output(gpio, 1);
+	gpio_export(gpio, 0);
+
+	have_tsp_ldo = true;
+
+	gpio = GPIO_TSP_INT;
+	gpio_request(gpio, "TSP_INT");
+	s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(0xf));
+	s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+	s5p_register_gpio_interrupt(gpio);
+	irq = gpio_to_irq(gpio);
+
+#ifdef CONFIG_S3C_DEV_I2C3
+	s3c_i2c3_set_platdata(NULL);
+	i2c_synaptics[0].irq = irq;
+	i2c_register_board_info(3, i2c_synaptics,
+		ARRAY_SIZE(i2c_synaptics));
+#endif	/* CONFIG_S3C_DEV_I2C3 */
+
+}
+
+#if defined(CONFIG_KEYBOARD_GPIO)
+#include <mach/sec_debug.h>
+#include <linux/gpio_keys.h>
+#define GPIO_KEYS(_code, _gpio, _active_low, _iswake, _hook)	\
+{							\
+	.code = _code,					\
+	.gpio = _gpio,					\
+	.active_low = _active_low,			\
+	.type = EV_KEY,					\
+	.wakeup = _iswake,				\
+	.debounce_interval = 10,			\
+	.isr_hook = _hook,				\
+	.value = 1					\
+}
+
+struct gpio_keys_button kona_buttons[] = {
+	GPIO_KEYS(KEY_VOLUMEUP, GPIO_VOL_UP,
+		  1, 1, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_VOLUMEDOWN, GPIO_VOL_DOWN,
+		  1, 1, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_POWER, GPIO_nPOWER,
+		  1, 1, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_HOMEPAGE, GPIO_OK_KEY_ANDROID,
+		  1, 1, sec_debug_check_crash_key),
+};
+
+struct gpio_keys_platform_data kona_gpiokeys_platform_data = {
+	kona_buttons,
+	ARRAY_SIZE(kona_buttons),
+};
+
+static struct platform_device kona_keypad = {
+	.name	= "gpio-keys",
+	.dev	= {
+		.platform_data = &kona_gpiokeys_platform_data,
+	},
+};
+#endif
+void __init kona_key_init(void)
+{
+#if defined(CONFIG_KEYBOARD_GPIO)
+	platform_device_register(&kona_keypad);
+#endif
+}
diff -Naur ./arch/arm/mach-exynos/kona-jack.c ../../HK_JB/Kernel/arch/arm/mach-exynos/kona-jack.c
--- ./arch/arm/mach-exynos/kona-jack.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/kona-jack.c	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,176 @@
+/* arch/arm/mach-exynos/p4note-jack.c
+ *
+ * Copyright (C) 2012 Samsung Electronics Co, Ltd
+ *
+ * Based on mach-exynos/mach-p4notepq.c
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <mach/gpio-midas.h>
+#include <linux/input.h>
+#include <linux/platform_device.h>
+#include <linux/sec_jack.h>
+
+static void sec_set_jack_micbias(bool on)
+{
+	gpio_set_value(GPIO_EAR_MIC_BIAS_EN, on);
+}
+
+#ifdef CONFIG_TARGET_LOCALE_KOR
+static struct sec_jack_zone sec_jack_zones[] = {
+	{
+		/* adc == 0, unstable zone, default to 3pole if it stays
+		 * in this range for 300ms (15ms delays, 20 samples)
+		 */
+		.adc_high = 0,
+		.delay_ms = 10,
+		.check_count = 10,
+		.jack_type = SEC_HEADSET_3POLE,
+	},
+	{
+		/* 0 < adc <= 1200, unstable zone, default to 3pole if it stays
+		 * in this range for 300ms (15ms delays, 20 samples)
+		 */
+		.adc_high = 1200,
+		.delay_ms = 10,
+		.check_count = 10,
+		.jack_type = SEC_HEADSET_3POLE,
+	},
+	{
+		/* 1200 < adc <= 2600, unstable zone, default to 4pole if it
+		 * stays in this range for 100ms (10ms delays, 80 samples)
+		 */
+		.adc_high = 2600,
+		.delay_ms = 10,
+		.check_count = 10,
+		.jack_type = SEC_HEADSET_4POLE,
+	},
+	{
+		/* 2600 < adc <= 3800, 4 pole zone, default to 4pole if it
+		 * stays in this range for 100ms (10ms delays, 10 samples)
+		 */
+		.adc_high = 3800,
+		.delay_ms = 10,
+		.check_count = 5,
+		.jack_type = SEC_HEADSET_4POLE,
+	},
+	{
+		/* adc > 3800, unstable zone, default to 3pole if it stays
+		 * in this range for two seconds (10ms delays, 200 samples)
+		 */
+		.adc_high = 0x7fffffff,
+		.delay_ms = 10,
+		.check_count = 200,
+		.jack_type = SEC_HEADSET_3POLE,
+	},
+};
+#else
+static struct sec_jack_zone sec_jack_zones[] = {
+	{
+		/* adc == 0, unstable zone, default to 3pole if it stays
+		 * in this range for 300ms (15ms delays, 20 samples)
+		 */
+		.adc_high = 0,
+		.delay_ms = 10,
+		.check_count = 5,
+		.jack_type = SEC_HEADSET_3POLE,
+	},
+	{
+		/* 0 < adc <= 1200, unstable zone, default to 3pole if it stays
+		 * in this range for 300ms (15ms delays, 20 samples)
+		 */
+		.adc_high = 1200,
+		.delay_ms = 10,
+		.check_count = 5,
+		.jack_type = SEC_HEADSET_3POLE,
+	},
+	{
+		/* 1200 < adc <= 2600, unstable zone, default to 4pole if it
+		 * stays in this range for 800ms (10ms delays, 80 samples)
+		 */
+		.adc_high = 2600,
+		.delay_ms = 10,
+		.check_count = 10,
+		.jack_type = SEC_HEADSET_4POLE,
+	},
+	{
+		/* 2600 < adc <= 3800, 3 pole zone, default to 3pole if it
+		 * stays in this range for 100ms (10ms delays, 10 samples)
+		 */
+		.adc_high = 3800,
+		.delay_ms = 10,
+		.check_count = 5,
+		.jack_type = SEC_HEADSET_4POLE,
+	},
+	{
+		/* adc > 3800, unstable zone, default to 3pole if it stays
+		 * in this range for two seconds (10ms delays, 200 samples)
+		 */
+		.adc_high = 0x7fffffff,
+		.delay_ms = 10,
+		.check_count = 200,
+		.jack_type = SEC_HEADSET_3POLE,
+	},
+};
+#endif
+
+/* To support 3-buttons earjack */
+static struct sec_jack_buttons_zone sec_jack_buttons_zones[] = {
+	{
+		/* 0 <= adc <=190, stable zone */
+		.code = KEY_MEDIA,
+		.adc_low = 0,
+		.adc_high = 190,
+	},
+	{
+		/* 191 <= adc <= 420, stable zone */
+		.code = KEY_VOLUMEUP,
+		.adc_low = 191,
+		.adc_high = 420,
+	},
+	{
+		/* 421 <= adc <= 860, stable zone */
+		.code = KEY_VOLUMEDOWN,
+		.adc_low = 421,
+		.adc_high = 860,
+	},
+};
+
+static struct sec_jack_platform_data sec_jack_data = {
+	.set_micbias_state = sec_set_jack_micbias,
+	.zones = sec_jack_zones,
+	.num_zones = ARRAY_SIZE(sec_jack_zones),
+	.buttons_zones = sec_jack_buttons_zones,
+	.num_buttons_zones = ARRAY_SIZE(sec_jack_buttons_zones),
+	.det_gpio = GPIO_DET_35,
+	.send_end_gpio = GPIO_EAR_SEND_END,
+};
+
+static struct platform_device sec_device_jack = {
+	.name = "sec_jack",
+	.id = 1,		/* will be used also for gpio_event id */
+	.dev.platform_data = &sec_jack_data,
+};
+void __init p4note_jack_init(void)
+{
+	/* Ear Microphone BIAS */
+	int err;
+	err = gpio_request(GPIO_EAR_MIC_BIAS_EN, "EAR MIC");
+	if (err) {
+		pr_err(KERN_ERR "GPIO_EAR_MIC_BIAS_EN GPIO set error!\n");
+		return;
+	}
+	gpio_direction_output(GPIO_EAR_MIC_BIAS_EN, 1);
+	gpio_set_value(GPIO_EAR_MIC_BIAS_EN, 0);
+	gpio_free(GPIO_EAR_MIC_BIAS_EN);
+
+	platform_device_register(&sec_device_jack);
+}
diff -Naur ./arch/arm/mach-exynos/kona-power.c ../../HK_JB/Kernel/arch/arm/mach-exynos/kona-power.c
--- ./arch/arm/mach-exynos/kona-power.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/kona-power.c	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,1121 @@
+/*
+ * midas-power.c - Power Management of MIDAS Project
+ *
+ *  Copyright (C) 2011 Samsung Electrnoics
+ *  Chiwoong Byun <woong.byun@samsung.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include <linux/i2c.h>
+#include <linux/regulator/machine.h>
+#include <plat/gpio-cfg.h>
+#include <mach/gpio-midas.h>
+#include <mach/irqs.h>
+
+#include <linux/mfd/max8997.h>
+#include <linux/mfd/max77686.h>
+#include <linux/mfd/max77693.h>
+
+#if defined(CONFIG_REGULATOR_S5M8767)
+#include <linux/mfd/s5m87xx/s5m-pmic.h>
+#include <linux/mfd/s5m87xx/s5m-core.h>
+#endif
+
+#ifdef CONFIG_REGULATOR_MAX8997
+/* MOTOR */
+#ifdef CONFIG_VIBETONZ
+static void max8997_motor_init(void)
+{
+	gpio_request(GPIO_VIBTONE_EN, "VIBTONE_EN");
+	s3c_gpio_cfgpin(GPIO_VIBTONE_EN, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_VIBTONE_EN, S3C_GPIO_PULL_NONE);
+}
+
+static void max8997_motor_en(bool en)
+{
+	gpio_direction_output(GPIO_VIBTONE_EN, en);
+}
+
+static struct max8997_motor_data max8997_motor = {
+	.max_timeout = 10000,
+	.duty = 44000,
+	.period = 44642,
+	.reg2 = MOTOR_LRA | EXT_PWM | DIVIDER_128,
+	.init_hw = max8997_motor_init,
+	.motor_en = max8997_motor_en,
+	.pwm_id = 1,
+};
+#endif
+
+/* max8997 */
+static struct regulator_consumer_supply ldo1_supply[] = {
+	REGULATOR_SUPPLY("vmipi_1.8v", NULL),
+	REGULATOR_SUPPLY("VDD18", "s5p-mipi-dsim"),
+};
+
+#ifdef CONFIG_SND_SOC_WM8994
+static struct regulator_consumer_supply ldo6_supply[] = {
+	REGULATOR_SUPPLY("AVDD2", NULL),
+	REGULATOR_SUPPLY("CPVDD", NULL),
+	REGULATOR_SUPPLY("DBVDD1", NULL),
+	REGULATOR_SUPPLY("DBVDD2", NULL),
+	REGULATOR_SUPPLY("DBVDD3", NULL),
+};
+#endif
+
+static struct regulator_consumer_supply ldo7_supply[] = {
+	REGULATOR_SUPPLY("cam_sensor_core_1.2v", NULL),
+};
+
+static struct regulator_consumer_supply ldo8_supply[] = {
+	REGULATOR_SUPPLY("votg_3.0v", NULL),
+};
+
+static struct regulator_consumer_supply ldo11_supply[] = {
+	REGULATOR_SUPPLY("vmipi_1.0v", NULL),
+	REGULATOR_SUPPLY("VDD10", "s5p-mipi-dsim"),
+};
+
+static struct regulator_consumer_supply ldo13_supply[] = {
+	REGULATOR_SUPPLY("vlcd_3.3v", NULL),
+	REGULATOR_SUPPLY("VCI", "s6e8aa0"),
+};
+
+static struct regulator_consumer_supply ldo14_supply[] = {
+	REGULATOR_SUPPLY("vcc_1.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo15_supply[] = {
+	REGULATOR_SUPPLY("vlcd_2.2v", NULL),
+	REGULATOR_SUPPLY("VDD3", "s6e8aa0"),
+};
+
+static struct regulator_consumer_supply ldo12_supply[] = {
+	REGULATOR_SUPPLY("vt_cam_1.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo16_supply[] = {
+	REGULATOR_SUPPLY("cam_isp_sensor_1.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo17_supply[] = {
+	REGULATOR_SUPPLY("cam_af_2.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo18_supply[] = {
+	REGULATOR_SUPPLY("touch", NULL),
+};
+
+static struct regulator_consumer_supply max8997_buck1 =
+	REGULATOR_SUPPLY("vdd_arm", NULL);
+
+static struct regulator_consumer_supply max8997_buck2[] = {
+	REGULATOR_SUPPLY("vdd_int", NULL),
+	REGULATOR_SUPPLY("vdd_int", "exynos4412-busfreq"),
+};
+
+static struct regulator_consumer_supply max8997_buck3 =
+	REGULATOR_SUPPLY("vdd_g3d", NULL);
+
+static struct regulator_consumer_supply max8997_buck4 =
+	REGULATOR_SUPPLY("cam_isp_core_1.2v", NULL);
+
+#define REGULATOR_INIT(_ldo, _name, _min_uV, _max_uV, _always_on, _ops_mask, \
+		       _disabled)					\
+	static struct regulator_init_data _ldo##_init_data = {		\
+		.constraints = {					\
+			.name	= _name,				\
+			.min_uV = _min_uV,				\
+			.max_uV = _max_uV,				\
+			.always_on	= _always_on,			\
+			.boot_on	= _always_on,			\
+			.apply_uV	= 1,				\
+			.valid_ops_mask = _ops_mask,			\
+			.state_mem = {					\
+				.disabled	= _disabled,		\
+				.enabled	= !(_disabled),		\
+			}						\
+		},							\
+		.num_consumer_supplies = ARRAY_SIZE(_ldo##_supply),	\
+		.consumer_supplies = &_ldo##_supply[0],			\
+	};
+
+REGULATOR_INIT(ldo1, "VMIPI_1.8V", 1800000, 1800000, 1,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo6, "VCC_1.8V_AP", 1800000, 1800000, 1, 0, 0);
+REGULATOR_INIT(ldo7, "CAM_SENSOR_CORE_1.2V", 1200000, 1200000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo8, "VUOTG_3.0V", 3000000, 3000000, 1,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo11, "VMIPI_1.0V", 1000000, 1000000, 1,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo12, "VT_CAM_1.8V", 1800000, 1800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo13, "VCC_3.3V_LCD", 3300000, 3300000, 1,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo14, "VCC_1.8V_IO", 1800000, 1800000, 1,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo15, "VDD_2.2V_LCD", 2200000, 2200000, 1,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo16, "CAM_ISP_SENSOR_1.8V", 1800000, 1800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo17, "CAM_AF_2.8V", 2800000, 2800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo18, "TSP_AVDD_3.3V", 3300000, 3300000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+
+static struct regulator_init_data max8997_buck1_data = {
+	.constraints	= {
+		.name	= "vdd_arm range",
+		.min_uV	= 950000,
+		.max_uV	= 1100000,
+		.always_on = 1,
+		.boot_on = 1,
+		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE,
+		.state_mem = {
+			.disabled = 1,
+		},
+	},
+	.num_consumer_supplies = 1,
+	.consumer_supplies = &max8997_buck1,
+};
+
+static struct regulator_init_data max8997_buck2_data = {
+	.constraints	= {
+		.name	= "vdd_int range",
+		.min_uV	= 900000,
+		.max_uV	= 1100000,
+		.always_on = 1,
+		.boot_on = 1,
+		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE,
+		.state_mem = {
+			.disabled = 1,
+		},
+	},
+	.num_consumer_supplies = ARRAY_SIZE(max8997_buck2),
+	.consumer_supplies = max8997_buck2,
+};
+
+static struct regulator_init_data max8997_buck3_data = {
+	.constraints	= {
+		.name	= "vdd_g3d range",
+		.min_uV	= 950000,
+		.max_uV	= 1150000,
+		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE |
+		REGULATOR_CHANGE_STATUS,
+		.state_mem = {
+			.disabled = 1,
+		},
+	},
+	.num_consumer_supplies = 1,
+	.consumer_supplies = &max8997_buck3,
+};
+
+static struct regulator_init_data max8997_buck4_data = {
+	.constraints	= {
+		.name	= "CAM_ISP_CORE_1.2V",
+		.min_uV	= 1200000,
+		.max_uV	= 1200000,
+		.valid_ops_mask = REGULATOR_CHANGE_STATUS,
+		.state_mem = {
+			.disabled = 1,
+		},
+	},
+	.num_consumer_supplies = 1,
+	.consumer_supplies = &max8997_buck4,
+};
+
+static struct max8997_regulator_data max8997_regulators[] = {
+	{ MAX8997_BUCK1, &max8997_buck1_data, },
+	{ MAX8997_BUCK2, &max8997_buck2_data, },
+	{ MAX8997_BUCK3, &max8997_buck3_data, },
+	{ MAX8997_BUCK4, &max8997_buck4_data, },
+	{ MAX8997_LDO1, &ldo1_init_data, },
+	{ MAX8997_LDO6, &ldo6_init_data, },
+	{ MAX8997_LDO7, &ldo7_init_data, },
+	{ MAX8997_LDO8, &ldo8_init_data, },
+	{ MAX8997_LDO11, &ldo11_init_data, },
+	{ MAX8997_LDO12, &ldo12_init_data, },
+	{ MAX8997_LDO13, &ldo13_init_data, },
+	{ MAX8997_LDO14, &ldo14_init_data, },
+	{ MAX8997_LDO15, &ldo15_init_data, },
+	{ MAX8997_LDO16, &ldo16_init_data, },
+	{ MAX8997_LDO17, &ldo17_init_data, },
+	{ MAX8997_LDO18, &ldo18_init_data, },
+};
+
+struct max8997_platform_data exynos4_max8997_info = {
+	.irq_base = IRQ_BOARD_PMIC_START,
+	.num_regulators = ARRAY_SIZE(max8997_regulators),
+	.regulators = max8997_regulators,
+	.buck1_max_vol = 1100000,
+	.buck2_max_vol = 1100000,
+	.buck5_max_vol = 1100000,
+	.buck_set1 = EXYNOS4212_GPJ1(1),
+	.buck_set2 = EXYNOS4212_GPJ1(2),
+	.buck_set3 = EXYNOS4_GPL0(0),
+#ifdef CONFIG_VIBETONZ
+	.motor = &max8997_motor,
+#endif
+};
+#elif defined(CONFIG_REGULATOR_MAX77686)
+/* max77686 */
+
+#ifdef CONFIG_SND_SOC_WM8994
+static struct regulator_consumer_supply ldo3_supply[] = {
+	REGULATOR_SUPPLY("AVDD2", NULL),
+	REGULATOR_SUPPLY("CPVDD", NULL),
+	REGULATOR_SUPPLY("DBVDD1", NULL),
+	REGULATOR_SUPPLY("DBVDD2", NULL),
+	REGULATOR_SUPPLY("DBVDD3", NULL),
+};
+#else
+static struct regulator_consumer_supply ldo3_supply[] = {};
+#endif
+
+static struct regulator_consumer_supply ldo5_supply[] = {
+	REGULATOR_SUPPLY("vcc_1.8v", NULL),
+	REGULATOR_SUPPLY("touchkey", NULL), /*touchkey*/
+};
+
+static struct regulator_consumer_supply ldo8_supply[] = {
+	REGULATOR_SUPPLY("vmipi_1.0v", NULL),
+	REGULATOR_SUPPLY("VDD10", "s5p-mipi-dsim.0"),
+	REGULATOR_SUPPLY("vdd", "exynos4-hdmi"),
+	REGULATOR_SUPPLY("vdd_pll", "exynos4-hdmi"),
+};
+
+static struct regulator_consumer_supply ldo9_supply[] = {
+	REGULATOR_SUPPLY("vled_ic_1.9v", NULL),
+};
+
+static struct regulator_consumer_supply ldo10_supply[] = {
+	REGULATOR_SUPPLY("vmipi_1.8v", NULL),
+	REGULATOR_SUPPLY("VDD18", "s5p-mipi-dsim.0"),
+	REGULATOR_SUPPLY("vdd_osc", "exynos4-hdmi"),
+};
+
+static struct regulator_consumer_supply ldo11_supply[] = {
+	REGULATOR_SUPPLY("vabb1_1.9v", NULL),
+};
+
+static struct regulator_consumer_supply ldo12_supply[] = {
+	REGULATOR_SUPPLY("votg_3.0v", NULL),
+};
+
+#if defined(CONFIG_MACH_C1_KOR_SKT) || defined(CONFIG_MACH_C1_KOR_KT) || \
+	defined(CONFIG_MACH_C1_KOR_LGT)
+static struct regulator_consumer_supply ldo13_supply[] = {
+	REGULATOR_SUPPLY("vusbhub_osc_1.8v", NULL),
+};
+#endif
+
+static struct regulator_consumer_supply ldo14_supply[] = {
+	REGULATOR_SUPPLY("vabb2_1.9v", NULL),
+};
+
+static struct regulator_consumer_supply ldo18_supply[] = {
+	REGULATOR_SUPPLY("cam_io_1.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo19_supply[] = {
+	REGULATOR_SUPPLY("vt_core_1.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo21_supply[] = {
+	REGULATOR_SUPPLY("vtf_2.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo23_supply[] = {
+	REGULATOR_SUPPLY("vdd_adc_3.3v", NULL),
+};
+
+static struct regulator_consumer_supply ldo24_supply[] = {
+	REGULATOR_SUPPLY("cam_a2.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo25_supply[] = {
+#if defined(CONFIG_MACH_KONA)
+	REGULATOR_SUPPLY("tsp_3.3v", NULL),
+#else
+	REGULATOR_SUPPLY("vled_3.3v", NULL),
+	REGULATOR_SUPPLY("VCI", "s6e8aa0"),
+#endif
+};
+
+static struct regulator_consumer_supply ldo26_supply[] = {
+	REGULATOR_SUPPLY("3mp_af_2.8v", NULL),
+};
+
+static struct regulator_consumer_supply max77686_buck1[] = {
+	REGULATOR_SUPPLY("vdd_mif", NULL),
+	REGULATOR_SUPPLY("vdd_mif", "exynos4412-busfreq"),
+};
+
+static struct regulator_consumer_supply max77686_buck2 =
+	REGULATOR_SUPPLY("vdd_arm", NULL);
+
+static struct regulator_consumer_supply max77686_buck3[] = {
+	REGULATOR_SUPPLY("vdd_int", NULL),
+	REGULATOR_SUPPLY("vdd_int", "exynoss4412-busfreq"),
+};
+
+static struct regulator_consumer_supply max77686_buck4[] = {
+	REGULATOR_SUPPLY("vdd_g3d", NULL),
+	REGULATOR_SUPPLY("vdd_g3d", "mali_dev.0"),
+};
+
+static struct regulator_consumer_supply max77686_buck9 =
+	REGULATOR_SUPPLY("3mp_core_1.2v", NULL);
+
+static struct regulator_consumer_supply max77686_enp32khz[] = {
+	REGULATOR_SUPPLY("lpo_in", "bcm47511"),
+	REGULATOR_SUPPLY("lpo", "bcm4334_bluetooth"),
+};
+
+#define REGULATOR_INIT(_ldo, _name, _min_uV, _max_uV, _always_on, _ops_mask, \
+		       _disabled)					\
+	static struct regulator_init_data _ldo##_init_data = {		\
+		.constraints = {					\
+			.name = _name,					\
+			.min_uV = _min_uV,				\
+			.max_uV = _max_uV,				\
+			.always_on	= _always_on,			\
+			.boot_on	= _always_on,			\
+			.apply_uV	= 1,				\
+			.valid_ops_mask = _ops_mask,			\
+			.state_mem = {					\
+				.disabled	= _disabled,		\
+				.enabled	= !(_disabled),		\
+			}						\
+		},							\
+		.num_consumer_supplies = ARRAY_SIZE(_ldo##_supply),	\
+		.consumer_supplies = &_ldo##_supply[0],			\
+	};
+
+REGULATOR_INIT(ldo3, "VCC_1.8V_AP", 1800000, 1800000, 1, 0, 0);
+REGULATOR_INIT(ldo5, "VCC_1.8V_IO", 1800000, 1800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo8, "VMIPI_1.0V", 1000000, 1000000, 1,
+	       REGULATOR_CHANGE_STATUS, 0);
+#if defined(CONFIG_IR_REMOCON_MC96)
+REGULATOR_INIT(ldo9, "VLED_IC_1.9V", 1950000, 1950000, 1,
+	       REGULATOR_CHANGE_STATUS, 1);
+#else
+REGULATOR_INIT(ldo9, "VLED_IC_1.9V", 1950000, 1950000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+#endif
+REGULATOR_INIT(ldo10, "VMIPI_1.8V", 1800000, 1800000, 1,
+	       REGULATOR_CHANGE_STATUS, 0);
+REGULATOR_INIT(ldo11, "VABB1_1.9V", 1950000, 1950000, 1,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo12, "VUOTG_3.0V", 3000000, 3000000, 1,
+	       REGULATOR_CHANGE_STATUS, 0);
+#if defined(CONFIG_MACH_C1_KOR_SKT) || defined(CONFIG_MACH_C1_KOR_KT) || \
+	defined(CONFIG_MACH_C1_KOR_LGT)
+REGULATOR_INIT(ldo13, "VUSBHUB_OSC_1.8V", 1800000, 1800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+#endif
+REGULATOR_INIT(ldo14, "VABB2_1.9V", 1950000, 1950000, 1,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo18, "CAM_IO_1.8V", 1800000, 1800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo19, "VT_CORE_1.8V", 1800000, 1800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo21, "VTF_2.8V", 2800000, 2800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo23, "VDD_ADC_3.3V", 3300000, 3300000, 1,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo24, "CAM_A2.8V", 2800000, 2800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+#if defined(CONFIG_TARGET_LOCALE_USA)
+REGULATOR_INIT(ldo25, "VLED_3.3V", 3300000, 3300000, 1,
+	       REGULATOR_CHANGE_STATUS, 1);
+#else
+#if defined(CONFIG_MACH_KONA)
+REGULATOR_INIT(ldo25, "TSP_3.3V", 3300000, 3300000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+#else
+REGULATOR_INIT(ldo25, "VLED_3.3V", 3300000, 3300000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+#endif
+#endif
+REGULATOR_INIT(ldo26, "3MP_AF_2.8V", 2800000, 2800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+
+#if defined(CONFIG_MACH_SLP_PQ)
+static struct regulator_init_data ldo24_pq11_init_data = {
+	.constraints = {
+		.name = "VDD_1.8V_TSP",
+		.min_uV = 1800000,
+		.max_uV = 1800000,
+		.always_on = 0,
+		.boot_on = 0,
+		.apply_uV = 1,
+		.valid_ops_mask = REGULATOR_CHANGE_STATUS,
+		.state_mem = {
+			.enabled	= 0,
+			.disabled	= 1,
+		}
+	},
+	.num_consumer_supplies = 1,
+	.consumer_supplies = ldo24_supply,
+};
+#endif
+
+static struct regulator_init_data max77686_buck1_data = {
+	.constraints = {
+		.name = "vdd_mif range",
+		.min_uV = 850000,
+#ifdef CONFIG_SLP
+		.max_uV = 1100000,
+#else
+		.max_uV = 1050000,
+#endif
+		.always_on = 1,
+		.boot_on = 1,
+		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(max77686_buck1),
+	.consumer_supplies = max77686_buck1,
+};
+
+static struct regulator_init_data max77686_buck2_data = {
+	.constraints = {
+		.name = "vdd_arm range",
+		.min_uV = 850000,
+		.max_uV = 1500000,
+		.apply_uV = 1,
+		.always_on = 1,
+		.boot_on = 1,
+		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE,
+	},
+	.num_consumer_supplies = 1,
+	.consumer_supplies = &max77686_buck2,
+};
+
+static struct regulator_init_data max77686_buck3_data = {
+	.constraints = {
+		.name = "vdd_int range",
+		.min_uV = 850000,
+#ifdef CONFIG_SLP
+		.max_uV = 1150000,
+#else
+		.max_uV = 1100000,
+#endif
+		.always_on = 1,
+		.boot_on = 1,
+		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(max77686_buck3),
+	.consumer_supplies = max77686_buck3,
+};
+
+static struct regulator_init_data max77686_buck4_data = {
+	.constraints = {
+		.name = "vdd_g3d range",
+		.min_uV = 850000,
+#ifdef CONFIG_SLP
+		.max_uV = 1100000,
+#else
+		.max_uV = 1075000,
+#endif
+		.boot_on = 1,
+		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE |
+		REGULATOR_CHANGE_STATUS,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(max77686_buck4),
+	.consumer_supplies = max77686_buck4,
+};
+
+static struct regulator_init_data max77686_buck9_data = {
+	.constraints = {
+		.name = "3MP_CORE_1.2V",
+		.min_uV = 1200000,
+		.max_uV = 1200000,
+		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE |
+		REGULATOR_CHANGE_STATUS,
+		.state_mem = {
+			.disabled = 1,
+		},
+	},
+	.num_consumer_supplies = 1,
+	.consumer_supplies = &max77686_buck9,
+};
+
+static struct regulator_init_data max77686_enp32khz_data = {
+	.constraints = {
+		.name = "32KHZ_PMIC",
+		.always_on	= 1,
+		.valid_ops_mask = REGULATOR_CHANGE_STATUS,
+		.state_mem = {
+			.enabled	= 1,
+			.disabled	= 0,
+		},
+	},
+	.num_consumer_supplies = ARRAY_SIZE(max77686_enp32khz),
+	.consumer_supplies = max77686_enp32khz,
+};
+
+static struct max77686_regulator_data max77686_regulators[] = {
+	{MAX77686_BUCK1, &max77686_buck1_data,},
+	{MAX77686_BUCK2, &max77686_buck2_data,},
+	{MAX77686_BUCK3, &max77686_buck3_data,},
+	{MAX77686_BUCK4, &max77686_buck4_data,},
+	{MAX77686_BUCK9, &max77686_buck9_data,},
+	{MAX77686_LDO3, &ldo3_init_data,},
+	{MAX77686_LDO5, &ldo5_init_data,},
+	{MAX77686_LDO8, &ldo8_init_data,},
+	{MAX77686_LDO9, &ldo9_init_data,},
+	{MAX77686_LDO10, &ldo10_init_data,},
+	{MAX77686_LDO11, &ldo11_init_data,},
+	{MAX77686_LDO12, &ldo12_init_data,},
+#if defined(CONFIG_MACH_C1_KOR_SKT) || defined(CONFIG_MACH_C1_KOR_KT) || \
+	defined(CONFIG_MACH_C1_KOR_LGT)
+	{MAX77686_LDO13, &ldo13_init_data,},
+#endif
+	{MAX77686_LDO14, &ldo14_init_data,},
+	{MAX77686_LDO18, &ldo18_init_data,},
+	{MAX77686_LDO19, &ldo19_init_data,},
+	{MAX77686_LDO21, &ldo21_init_data,},
+	{MAX77686_LDO23, &ldo23_init_data,},
+	{MAX77686_LDO24, &ldo24_init_data,},
+	{MAX77686_LDO25, &ldo25_init_data,},
+	{MAX77686_LDO26, &ldo26_init_data,},
+	{MAX77686_P32KH, &max77686_enp32khz_data,},
+};
+
+struct max77686_opmode_data max77686_opmode_data[MAX77686_REG_MAX] = {
+	[MAX77686_LDO3] = {MAX77686_LDO3, MAX77686_OPMODE_NORMAL},
+	[MAX77686_LDO8] = {MAX77686_LDO8, MAX77686_OPMODE_STANDBY},
+	[MAX77686_LDO10] = {MAX77686_LDO10, MAX77686_OPMODE_STANDBY},
+	[MAX77686_LDO11] = {MAX77686_LDO11, MAX77686_OPMODE_STANDBY},
+	[MAX77686_LDO12] = {MAX77686_LDO12, MAX77686_OPMODE_STANDBY},
+#if defined(CONFIG_MACH_C1_KOR_SKT) || defined(CONFIG_MACH_C1_KOR_KT) || \
+	defined(CONFIG_MACH_C1_KOR_LGT)
+	[MAX77686_LDO13] = {MAX77686_LDO13, MAX77686_OPMODE_NORMAL},
+#endif
+	[MAX77686_LDO14] = {MAX77686_LDO14, MAX77686_OPMODE_STANDBY},
+	[MAX77686_BUCK1] = {MAX77686_BUCK1, MAX77686_OPMODE_STANDBY},
+	[MAX77686_BUCK2] = {MAX77686_BUCK2, MAX77686_OPMODE_STANDBY},
+	[MAX77686_BUCK3] = {MAX77686_BUCK3, MAX77686_OPMODE_STANDBY},
+	[MAX77686_BUCK4] = {MAX77686_BUCK4, MAX77686_OPMODE_STANDBY},
+};
+
+struct max77686_platform_data exynos4_max77686_info = {
+	.num_regulators = ARRAY_SIZE(max77686_regulators),
+	.regulators = max77686_regulators,
+	.irq_gpio	= GPIO_PMIC_IRQ,
+	.irq_base	= IRQ_BOARD_PMIC_START,
+	.wakeup		= 1,
+
+	.opmode_data = max77686_opmode_data,
+	.ramp_rate = MAX77686_RAMP_RATE_27MV,
+
+	.buck234_gpio_dvs = {
+		/* Use DVS2 register of each bucks to supply stable power
+		 * after sudden reset */
+		{GPIO_PMIC_DVS1, 1},
+		{GPIO_PMIC_DVS2, 0},
+		{GPIO_PMIC_DVS3, 0},
+	},
+	.buck234_gpio_selb = {
+		GPIO_BUCK2_SEL,
+		GPIO_BUCK3_SEL,
+		GPIO_BUCK4_SEL,
+	},
+	.buck2_voltage[0] = 1100000,	/* 1.1V */
+	.buck2_voltage[1] = 1100000,	/* 1.1V */
+	.buck2_voltage[2] = 1100000,	/* 1.1V */
+	.buck2_voltage[3] = 1100000,	/* 1.1V */
+	.buck2_voltage[4] = 1100000,	/* 1.1V */
+	.buck2_voltage[5] = 1100000,	/* 1.1V */
+	.buck2_voltage[6] = 1100000,	/* 1.1V */
+	.buck2_voltage[7] = 1100000,	/* 1.1V */
+
+	.buck3_voltage[0] = 1100000,	/* 1.1V */
+	.buck3_voltage[1] = 1000000,	/* 1.0V */
+	.buck3_voltage[2] = 1100000,	/* 1.1V */
+	.buck3_voltage[3] = 1100000,	/* 1.1V */
+	.buck3_voltage[4] = 1100000,	/* 1.1V */
+	.buck3_voltage[5] = 1100000,	/* 1.1V */
+	.buck3_voltage[6] = 1100000,	/* 1.1V */
+	.buck3_voltage[7] = 1100000,	/* 1.1V */
+
+	.buck4_voltage[0] = 1100000,	/* 1.1V */
+	.buck4_voltage[1] = 1000000,	/* 1.0V */
+	.buck4_voltage[2] = 1100000,	/* 1.1V */
+	.buck4_voltage[3] = 1100000,	/* 1.1V */
+	.buck4_voltage[4] = 1100000,	/* 1.1V */
+	.buck4_voltage[5] = 1100000,	/* 1.1V */
+	.buck4_voltage[6] = 1100000,	/* 1.1V */
+	.buck4_voltage[7] = 1100000,	/* 1.1V */
+};
+
+void midas_power_init(void)
+{
+	printk(KERN_INFO "%s\n", __func__);
+
+#if defined(CONFIG_C1_KOR_SKT) || defined(CONFIG_C1_KOR_KT) || \
+	defined(CONFIG_C1_KOR_LGT)
+	if (system_rev >= 0x6)
+		ldo13_init_data.constraints.always_on = 1;
+#endif
+}
+#endif /* CONFIG_REGULATOR_MAX77686 */
+
+void midas_power_set_muic_pdata(void *pdata, int gpio)
+{
+	gpio_request(gpio, "AP_PMIC_IRQ");
+	s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(0xf));
+	s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+
+#ifdef CONFIG_REGULATOR_MAX8997
+	exynos4_max8997_info.muic = pdata;
+#endif
+}
+
+void midas_power_gpio_init(void)
+{
+#ifdef CONFIG_REGULATOR_MAX8997
+	int gpio;
+
+	gpio = EXYNOS4212_GPJ1(1);
+	gpio_request(gpio, "BUCK_SET1");
+	s3c_gpio_cfgpin(gpio, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+
+	gpio = EXYNOS4212_GPJ1(2);
+	gpio_request(gpio, "BUCK_SET2");
+	s3c_gpio_cfgpin(gpio, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+
+	gpio = EXYNOS4_GPL0(0);
+	gpio_request(gpio, "BUCK_SET3");
+	s3c_gpio_cfgpin(gpio, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+#endif
+}
+
+#ifdef CONFIG_MFD_MAX77693
+static struct regulator_consumer_supply safeout1_supply[] = {
+	REGULATOR_SUPPLY("safeout1", NULL),
+};
+
+static struct regulator_consumer_supply safeout2_supply[] = {
+	REGULATOR_SUPPLY("safeout2", NULL),
+};
+
+static struct regulator_consumer_supply charger_supply[] = {
+	REGULATOR_SUPPLY("vinchg1", "charger-manager.0"),
+	REGULATOR_SUPPLY("vinchg1", NULL),
+};
+
+static struct regulator_init_data safeout1_init_data = {
+	.constraints	= {
+		.name		= "safeout1 range",
+		.valid_ops_mask = REGULATOR_CHANGE_STATUS,
+		.always_on	= 0,
+		.boot_on	= 1,
+		.state_mem	= {
+			.enabled = 1,
+		},
+	},
+	.num_consumer_supplies	= ARRAY_SIZE(safeout1_supply),
+	.consumer_supplies	= safeout1_supply,
+};
+
+static struct regulator_init_data safeout2_init_data = {
+	.constraints	= {
+		.name		= "safeout2 range",
+		.valid_ops_mask = REGULATOR_CHANGE_STATUS,
+		.always_on	= 0,
+		.boot_on	= 0,
+		.state_mem	= {
+			.enabled = 1,
+		},
+	},
+	.num_consumer_supplies	= ARRAY_SIZE(safeout2_supply),
+	.consumer_supplies	= safeout2_supply,
+};
+
+static struct regulator_init_data charger_init_data = {
+	.constraints	= {
+		.name		= "CHARGER",
+		.valid_ops_mask = REGULATOR_CHANGE_STATUS |
+		REGULATOR_CHANGE_CURRENT,
+		.boot_on	= 1,
+		.min_uA		= 60000,
+		.max_uA		= 2580000,
+	},
+	.num_consumer_supplies	= ARRAY_SIZE(charger_supply),
+	.consumer_supplies	= charger_supply,
+};
+
+struct max77693_regulator_data max77693_regulators[] = {
+	{MAX77693_ESAFEOUT1, &safeout1_init_data,},
+	{MAX77693_ESAFEOUT2, &safeout2_init_data,},
+	{MAX77693_CHARGER, &charger_init_data,},
+};
+
+#if defined(CONFIG_MACH_SLP_PQ)
+/* this initcall replace ldo24 from VDD 2.2 to VDD 1.8 for evt1.1 board. */
+static int __init regulator_init_with_rev(void)
+{
+	/* SLP PQ Promixa evt1.1 */
+	if (system_rev != 3) {
+		ldo24_supply[0].supply = "touch_1.8v";
+		ldo24_supply[0].dev_name = NULL;
+
+		memcpy(&ldo24_init_data, &ldo24_pq11_init_data,
+		       sizeof(struct regulator_init_data));
+	}
+	return 0;
+}
+
+postcore_initcall(regulator_init_with_rev);
+#endif /* CONFIG_MACH_SLP_PQ */
+#endif /* CONFIG_MFD_MAX77693 */
+
+#if defined(CONFIG_REGULATOR_S5M8767)
+/* S5M8767 Regulator */
+
+#ifdef CONFIG_SND_SOC_WM8994
+static struct regulator_consumer_supply ldo3_supply[] = {
+	REGULATOR_SUPPLY("AVDD2", NULL),
+	REGULATOR_SUPPLY("CPVDD", NULL),
+	REGULATOR_SUPPLY("DBVDD1", NULL),
+	REGULATOR_SUPPLY("DBVDD2", NULL),
+	REGULATOR_SUPPLY("DBVDD3", NULL),
+};
+#endif
+
+static struct regulator_consumer_supply ldo8_supply[] = {
+	REGULATOR_SUPPLY("vmipi_1.0v", NULL),
+	REGULATOR_SUPPLY("VDD10", "s5p-mipi-dsim.0"),
+};
+
+static struct regulator_consumer_supply ldo9_supply[] = {
+	REGULATOR_SUPPLY("cam_isp_1.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo10_supply[] = {
+	REGULATOR_SUPPLY("vt_cam_dvdd_1.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo13_supply[] = {
+	REGULATOR_SUPPLY("vmipi_1.8v", NULL),
+	REGULATOR_SUPPLY("VDD18", "s5p-mipi-dsim.0"),
+};
+
+static struct regulator_consumer_supply ldo19_supply[] = {
+	REGULATOR_SUPPLY("cam_af_2.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo20_supply[] = {
+	REGULATOR_SUPPLY("vlcd_3.0v", NULL),
+	REGULATOR_SUPPLY("VCI", "s6e8aa0"),
+};
+
+static struct regulator_consumer_supply ldo21_supply[] = {
+	REGULATOR_SUPPLY("vmotor", NULL),
+};
+
+static struct regulator_consumer_supply ldo22_supply[] = {
+	REGULATOR_SUPPLY("cam_sensor_a2.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo23_supply[] = {
+	REGULATOR_SUPPLY("vtf_2.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo24_supply[] = {
+	REGULATOR_SUPPLY("touch", NULL),
+};
+
+static struct regulator_consumer_supply ldo25_supply[] = {
+	REGULATOR_SUPPLY("cam_sensor_core_1.2v", NULL),
+};
+
+static struct regulator_consumer_supply ldo26_supply[] = {
+	REGULATOR_SUPPLY("cam_isp_sensor_1.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo27_supply[] = {
+	REGULATOR_SUPPLY("vt_cam_1.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo28_supply[] = {
+	REGULATOR_SUPPLY("3_touch_1.8v", NULL),
+};
+
+static struct regulator_consumer_supply s5m8767_buck1[] = {
+	REGULATOR_SUPPLY("vdd_mif", NULL),
+	REGULATOR_SUPPLY("vdd_mif", "exynos4212-busfreq"),
+};
+
+static struct regulator_consumer_supply s5m8767_buck2 =
+	REGULATOR_SUPPLY("vdd_arm", NULL);
+
+static struct regulator_consumer_supply s5m8767_buck3[] = {
+	REGULATOR_SUPPLY("vdd_int", NULL),
+	REGULATOR_SUPPLY("vdd_int", "exynos4212-busfreq"),
+};
+
+static struct regulator_consumer_supply s5m8767_buck4[] = {
+	REGULATOR_SUPPLY("vdd_g3d", NULL),
+	REGULATOR_SUPPLY("vdd_g3d", "mali_dev.0"),
+};
+
+static struct regulator_consumer_supply s5m8767_buck6 =
+	REGULATOR_SUPPLY("cam_isp_core_1.2v", NULL);
+
+static struct regulator_consumer_supply s5m8767_enp32khz[] = {
+	REGULATOR_SUPPLY("lpo_in", "bcm47511"),
+	REGULATOR_SUPPLY("lpo", "bcm4334_bluetooth"),
+};
+
+#define REGULATOR_INIT(_ldo, _name, _min_uV, _max_uV, _always_on, _ops_mask, \
+		       _disabled)					\
+	static struct regulator_init_data _ldo##_init_data = {		\
+		.constraints = {					\
+			.name = _name,					\
+			.min_uV = _min_uV,				\
+			.max_uV = _max_uV,				\
+			.always_on	= _always_on,			\
+			.boot_on	= _always_on,			\
+			.apply_uV	= 1,				\
+			.valid_ops_mask = _ops_mask,			\
+			.state_mem = {					\
+				.disabled	= _disabled,		\
+				.enabled	= !(_disabled),		\
+			}						\
+		},							\
+		.num_consumer_supplies = ARRAY_SIZE(_ldo##_supply),	\
+		.consumer_supplies = &_ldo##_supply[0],			\
+	};
+
+REGULATOR_INIT(ldo3, "VCC_1.8V_AP", 1800000, 1800000, 1, 0, 0);
+REGULATOR_INIT(ldo8, "VMIPI_1.0V", 1000000, 1000000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo9, "CAM_ISP_1.8V", 1800000, 1800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo10, "VT_CAM_DVDD_1.8V", 1800000, 1800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo13, "VMIPI_1.8V", 1800000, 1800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo19, "CAM_AF_2.8V", 2800000, 2800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo20, "VCC_3.0V_LCD", 3000000, 3000000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo21, "VCC_MOTOR_3.0V", 3000000, 3000000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo22, "CAM_SENSOR_A2.8V", 2800000, 2800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo23, "VTF_2.8V", 2800000, 2800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo24, "TSP_AVDD_3.3V", 3300000, 3300000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo25, "CAM_SENSOR_CORE_1.2V", 1200000, 1200000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo26, "CAM_ISP_SENSOR_1.8V", 1800000, 1800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo27, "VT_CAM_1.8V", 1800000, 1800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo28, "3_TOUCH_1.8V", 1800000, 1800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
+
+static struct regulator_init_data s5m8767_buck1_data = {
+	.constraints = {
+		.name = "vdd_mif range",
+		.min_uV = 850000,
+		.max_uV = 1100000,
+		.boot_on = 1,
+		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(s5m8767_buck1),
+	.consumer_supplies = s5m8767_buck1,
+};
+
+static struct regulator_init_data s5m8767_buck2_data = {
+	.constraints = {
+		.name = "vdd_arm range",
+		.min_uV = 850000,
+		.max_uV = 1500000,
+		.apply_uV = 1,
+		.boot_on = 1,
+		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE,
+	},
+	.num_consumer_supplies = 1,
+	.consumer_supplies = &s5m8767_buck2,
+};
+
+static struct regulator_init_data s5m8767_buck3_data = {
+	.constraints = {
+		.name = "vdd_int range",
+		.min_uV = 850000,
+		.max_uV = 1300000,
+		.boot_on = 1,
+		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(s5m8767_buck3),
+	.consumer_supplies = s5m8767_buck3,
+};
+
+static struct regulator_init_data s5m8767_buck4_data = {
+	.constraints = {
+		.name = "vdd_g3d range",
+		.min_uV = 850000,
+		.max_uV = 1150000,
+		.boot_on = 1,
+		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE |
+		REGULATOR_CHANGE_STATUS,
+	},
+	.num_consumer_supplies = ARRAY_SIZE(s5m8767_buck4),
+	.consumer_supplies = s5m8767_buck4,
+};
+
+static struct regulator_init_data s5m8767_buck6_data = {
+	.constraints = {
+		.name = "CAM_ISP_CORE_1.2V",
+		.min_uV = 1000000,
+		.max_uV = 1200000,
+		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE |
+		REGULATOR_CHANGE_STATUS,
+		.state_mem = {
+			.disabled = 1,
+		},
+	},
+	.num_consumer_supplies = 1,
+	.consumer_supplies = &s5m8767_buck6,
+};
+
+static struct regulator_init_data s5m8767_enp32khz_data = {
+	.constraints = {
+		.name = "32KHZ_PMIC",
+		.always_on	= 1,
+		.valid_ops_mask = REGULATOR_CHANGE_STATUS,
+		.state_mem = {
+			.enabled	= 1,
+			.disabled	= 0,
+		},
+	},
+	.num_consumer_supplies = ARRAY_SIZE(s5m8767_enp32khz),
+	.consumer_supplies = s5m8767_enp32khz,
+};
+
+static struct s5m_regulator_data s5m8767_regulators[] = {
+	{S5M8767_BUCK1, &s5m8767_buck1_data,},
+	{S5M8767_BUCK2, &s5m8767_buck2_data,},
+	{S5M8767_BUCK3, &s5m8767_buck3_data,},
+	{S5M8767_BUCK4, &s5m8767_buck4_data,},
+	{S5M8767_BUCK6, &s5m8767_buck6_data,},
+	{S5M8767_LDO3, &ldo3_init_data,},
+	{S5M8767_LDO8, &ldo8_init_data,},
+	{S5M8767_LDO9, &ldo9_init_data,},
+	{S5M8767_LDO10, &ldo10_init_data,},
+	{S5M8767_LDO13, &ldo13_init_data,},
+	{S5M8767_LDO19, &ldo19_init_data,},
+	{S5M8767_LDO20, &ldo20_init_data,},
+	{S5M8767_LDO21, &ldo21_init_data,},
+	{S5M8767_LDO22, &ldo22_init_data,},
+	{S5M8767_LDO23, &ldo23_init_data,},
+	{S5M8767_LDO24, &ldo24_init_data,},
+	{S5M8767_LDO25, &ldo25_init_data,},
+	{S5M8767_LDO26, &ldo26_init_data,},
+	{S5M8767_LDO27, &ldo27_init_data,},
+	{S5M8767_LDO28, &ldo28_init_data,},
+};
+
+struct s5m_opmode_data s5m8767_opmode_data[S5M8767_REG_MAX] = {
+	[S5M8767_BUCK1] = {S5M8767_BUCK1, S5M_OPMODE_STANDBY},
+	[S5M8767_BUCK2] = {S5M8767_BUCK2, S5M_OPMODE_STANDBY},
+	[S5M8767_BUCK3] = {S5M8767_BUCK3, S5M_OPMODE_STANDBY},
+	[S5M8767_BUCK4] = {S5M8767_BUCK4, S5M_OPMODE_STANDBY},
+	[S5M8767_BUCK6] = {S5M8767_BUCK6, S5M_OPMODE_STANDBY},
+	[S5M8767_LDO3] = {S5M8767_LDO3, S5M_OPMODE_NORMAL},
+	[S5M8767_LDO8] = {S5M8767_LDO8, S5M_OPMODE_NORMAL},
+	[S5M8767_LDO9] = {S5M8767_LDO9, S5M_OPMODE_NORMAL},
+	[S5M8767_LDO10] = {S5M8767_LDO10, S5M_OPMODE_NORMAL},
+	[S5M8767_LDO19] = {S5M8767_LDO19, S5M_OPMODE_NORMAL},
+	[S5M8767_LDO20] = {S5M8767_LDO20, S5M_OPMODE_NORMAL},
+	[S5M8767_LDO21] = {S5M8767_LDO21, S5M_OPMODE_NORMAL},
+	[S5M8767_LDO22] = {S5M8767_LDO22, S5M_OPMODE_NORMAL},
+	[S5M8767_LDO23] = {S5M8767_LDO23, S5M_OPMODE_STANDBY},
+	[S5M8767_LDO24] = {S5M8767_LDO24, S5M_OPMODE_NORMAL},
+	[S5M8767_LDO25] = {S5M8767_LDO25, S5M_OPMODE_NORMAL},
+	[S5M8767_LDO26] = {S5M8767_LDO26, S5M_OPMODE_NORMAL},
+	[S5M8767_LDO27] = {S5M8767_LDO27, S5M_OPMODE_NORMAL},
+	[S5M8767_LDO28] = {S5M8767_LDO28, S5M_OPMODE_NORMAL},
+};
+
+struct s5m_platform_data exynos4_s5m8767_info = {
+	.device_type	= S5M8767X,
+	.num_regulators = ARRAY_SIZE(s5m8767_regulators),
+	.regulators = s5m8767_regulators,
+	.buck2_ramp_enable	= true,
+	.buck3_ramp_enable	= true,
+	.buck4_ramp_enable	= true,
+	.irq_gpio	= GPIO_PMIC_IRQ,
+	.irq_base	= IRQ_BOARD_PMIC_START,
+	.wakeup		= 1,
+
+	.opmode_data = s5m8767_opmode_data,
+	.wtsr_smpl		= 1,
+
+	.buck2_voltage[0] = 1100000,	/* 1.1V */
+	.buck2_voltage[1] = 1100000,	/* 1.1V */
+	.buck2_voltage[2] = 1100000,	/* 1.1V */
+	.buck2_voltage[3] = 1100000,	/* 1.1V */
+	.buck2_voltage[4] = 1100000,	/* 1.1V */
+	.buck2_voltage[5] = 1100000,	/* 1.1V */
+	.buck2_voltage[6] = 1100000,	/* 1.1V */
+	.buck2_voltage[7] = 1100000,	/* 1.1V */
+
+	.buck3_voltage[0] = 1100000,	/* 1.1V */
+	.buck3_voltage[1] = 1100000,	/* 1.1V */
+	.buck3_voltage[2] = 1100000,	/* 1.1V */
+	.buck3_voltage[3] = 1100000,	/* 1.1V */
+	.buck3_voltage[4] = 1100000,	/* 1.1V */
+	.buck3_voltage[5] = 1100000,	/* 1.1V */
+	.buck3_voltage[6] = 1100000,	/* 1.1V */
+	.buck3_voltage[7] = 1100000,	/* 1.1V */
+
+	.buck4_voltage[0] = 1100000,	/* 1.1V */
+	.buck4_voltage[1] = 1100000,	/* 1.1V */
+	.buck4_voltage[2] = 1100000,	/* 1.1V */
+	.buck4_voltage[3] = 1100000,	/* 1.1V */
+	.buck4_voltage[4] = 1100000,	/* 1.1V */
+	.buck4_voltage[5] = 1100000,	/* 1.1V */
+	.buck4_voltage[6] = 1100000,	/* 1.1V */
+	.buck4_voltage[7] = 1100000,	/* 1.1V */
+
+	.buck_ramp_delay = 10,
+	.buck_default_idx	= 3,
+
+	.buck_gpios[0]		= GPIO_BUCK2_SEL,
+	.buck_gpios[1]		= GPIO_BUCK3_SEL,
+	.buck_gpios[2]		= GPIO_BUCK4_SEL,
+};
+
+void midas_power_init(void)
+{
+	ldo8_init_data.constraints.always_on = 1;
+	ldo10_init_data.constraints.always_on = 1;
+}
+
+/* End of S5M8767 */
+#endif
diff -Naur ./arch/arm/mach-exynos/m3-gpio.c ../../HK_JB/Kernel/arch/arm/mach-exynos/m3-gpio.c
--- ./arch/arm/mach-exynos/m3-gpio.c	2012-12-08 20:40:46.145821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/m3-gpio.c	2012-11-22 09:13:15.000000000 +0100
@@ -31,7 +31,7 @@
 	uint drv;
 };
 
-static struct gpio_init_data c2_init_gpios[] = {
+static struct gpio_init_data m3_init_gpios[] = {
 	{GPIO_GSENSE_SDA_18V,
 	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
 	{GPIO_GSENSE_SCL_18V,
@@ -40,6 +40,12 @@
 	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
 	{GPIO_NFC_SCL_18V,
 	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
+	{GPIO_PS_ALS_SDA_28V,
+	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
+	{GPIO_PS_ALS_SCL_28V,
+	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
+	{GPIO_PS_ALS_INT,
+	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
 
 	{GPIO_PMIC_SDA,
 	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
@@ -86,14 +92,25 @@
 
 	{GPIO_V_BUS_INT,
 	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
+
+#if !defined(CONFIG_MACH_M3_USA_TMO)
+#if defined(CONFIG_MACH_M3_JPN_DCM)
+	{GPIO_WPC_INT,
+	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
+#else
 	{GPIO_WPC_INT,
 	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
-
+#endif
+#endif
 	{GPIO_CAM_MCLK,
 	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV3},
 	{GPIO_VTCAM_MCLK,
 	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV3},
 
+#if defined(CONFIG_MACH_M3_USA_TMO)
+	{EXYNOS4_GPX1(3),
+	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
+#endif
 	/* NC */
 	{EXYNOS4_GPA0(4),
 	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
@@ -116,6 +133,12 @@
 	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
 	{EXYNOS4_GPY0(5),
 	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
+#if defined(CONFIG_MACH_M3_USA_TMO)
+	{EXYNOS4_GPY1(0),
+	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
+	{EXYNOS4_GPY1(1),
+	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
+#endif
 	{EXYNOS4_GPY1(2),
 	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
 	{EXYNOS4_GPY1(3),
@@ -125,16 +148,16 @@
 	{EXYNOS4_GPY2(2),
 	 S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
 	/* GPIO_AP2MDM_PMIC_RESET_N */
-	{EXYNOS4_GPY2(3), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_NONE,
-		S3C_GPIO_PULL_UP, S5P_GPIO_DRVSTR_LV4},
+	{EXYNOS4_GPY2(3),
+	 S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_NONE, S3C_GPIO_PULL_UP, S5P_GPIO_DRVSTR_LV4},
 };
 
 
-static unsigned int c2_sleep_gpio_table[][3] = {
+static unsigned int m3_sleep_gpio_table[][3] = {
 	{EXYNOS4_GPA0(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPA0(1), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPA0(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
-	{EXYNOS4_GPA0(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPA0(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP  },
 	{EXYNOS4_GPA0(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPA0(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPA0(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
@@ -152,7 +175,7 @@
 	{EXYNOS4_GPB(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPB(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPB(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-	{EXYNOS4_GPB(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPB(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP  },
 	{EXYNOS4_GPB(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPB(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 
@@ -178,8 +201,8 @@
 	{EXYNOS4_GPD1(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPD1(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 
-	{EXYNOS4_GPF0(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
-	{EXYNOS4_GPF0(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPF0(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* PS_ALS_SDA_28V */
+	{EXYNOS4_GPF0(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* PS_ALS_SCL_28V */
 	{EXYNOS4_GPF0(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPF0(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPF0(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
@@ -194,12 +217,15 @@
 	{EXYNOS4_GPF1(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPF1(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	/* GPF1(6) T0 LTE prev level, if not mdm notice it as crash  */
-	{EXYNOS4_GPF1(6),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPF1(6), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPF1(7), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
-
+#if defined(CONFIG_MACH_M3_USA_TMO)
+	{EXYNOS4_GPF2(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#else
 	{EXYNOS4_GPF2(0), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
+#endif
 	{EXYNOS4_GPF2(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-	{EXYNOS4_GPF2(2),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* NC */
+	{EXYNOS4_GPF2(2), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /* NC */
 	{EXYNOS4_GPF2(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPF2(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPF2(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
@@ -248,7 +274,7 @@
 	{EXYNOS4_GPL0(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPL0(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPL0(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-	{EXYNOS4_GPL0(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4_GPL0(3), S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_DOWN}, /* VPS_SOUND */
 	{EXYNOS4_GPL0(4), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPL0(6), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
 
@@ -260,15 +286,21 @@
 	{EXYNOS4_GPL2(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPL2(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPL2(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
-	{EXYNOS4_GPL2(5),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPL2(5), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPL2(6), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPL2(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+#if defined(CONFIG_MACH_M3_USA_TMO)
+	{EXYNOS4_GPX0(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* PS_ALS_INT */
+#endif
 	/* GPX1(0) VDDMIN (pda active) set to low at Sleep */
-	{EXYNOS4_GPX1(0),  S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPX1(0), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_DOWN},
+#if defined(CONFIG_MACH_M3_JPN_DCM)
+	{EXYNOS4_GPX3(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#endif
 	/* GPX3(2) T0 LTE HOST PORT PWR, hold previous level */
-	{EXYNOS4_GPX3(2),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
+	{EXYNOS4_GPX3(2), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
 #ifdef CONFIG_TARGET_LOCALE_EUR
-	{EXYNOS4_GPX1(4),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* FM_RST */
+	{EXYNOS4_GPX1(4), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /* FM_RST */
 #endif
 	{EXYNOS4_GPY0(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPY0(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
@@ -286,8 +318,7 @@
 	{EXYNOS4_GPY2(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPY2(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	/* AP2MDM_PMIC_RESET_N */
-	{EXYNOS4_GPY2(3),  S3C_GPIO_SLP_PREV,
-						S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPY2(3), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_UP},
 	{EXYNOS4_GPY2(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPY2(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 
@@ -344,10 +375,15 @@
 	{EXYNOS4212_GPJ0(5), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
 	{EXYNOS4212_GPJ0(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4212_GPJ0(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-
+#if defined(CONFIG_MACH_M3_USA_TMO)
+	{EXYNOS4212_GPJ1(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4212_GPJ1(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+	{EXYNOS4212_GPJ1(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#else
 	{EXYNOS4212_GPJ1(0), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
 	{EXYNOS4212_GPJ1(1), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
 	{EXYNOS4212_GPJ1(2), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
+#endif
 	{EXYNOS4212_GPJ1(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4212_GPJ1(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 
@@ -433,7 +469,7 @@
 	{EXYNOS4212_GPV4(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 };
 
-static unsigned int c2_sleep_gpio_table_rev01[][3] = {
+static unsigned int m3_sleep_gpio_table_rev01[][3] = {
   /* */
 };
 
@@ -455,9 +491,9 @@
 	.size = 0 \
 } \
 
-static struct sleep_table c2_sleep_table[] = {
-	GPIO_TABLE(c2_sleep_gpio_table),	/* Rev0.0(0x0) */
-	GPIO_TABLE(c2_sleep_gpio_table_rev01),	/* Rev0.0(0x1) */
+static struct sleep_table m3_sleep_table[] = {
+	GPIO_TABLE(m3_sleep_gpio_table),	/* Rev0.0(0x0) */
+	GPIO_TABLE(m3_sleep_gpio_table_rev01),	/* Rev0.0(0x1) */
 };
 
 
@@ -476,14 +512,14 @@
 static void c2_config_sleep_gpio_table(void)
 {
 	int i;
-	int index = min(ARRAY_SIZE(c2_sleep_table), system_rev + 1);
+	int index = min(ARRAY_SIZE(m3_sleep_table), system_rev + 1);
 
 	for (i = 0; i < index; i++) {
-		if (c2_sleep_table[i].ptr == NULL)
+		if (m3_sleep_table[i].ptr == NULL)
 			continue;
 
-		config_sleep_gpio_table(c2_sleep_table[i].size,
-					c2_sleep_table[i].ptr);
+		config_sleep_gpio_table(m3_sleep_table[i].size,
+					m3_sleep_table[i].ptr);
 	}
 }
 
@@ -501,16 +537,16 @@
 
 	printk(KERN_DEBUG "%s\n", __func__);
 
-	for (i = 0; i < ARRAY_SIZE(c2_init_gpios); i++) {
-		gpio = c2_init_gpios[i].num;
+	for (i = 0; i < ARRAY_SIZE(m3_init_gpios); i++) {
+		gpio = m3_init_gpios[i].num;
 		if (gpio <= EXYNOS4212_GPV4(1)) {
-			s3c_gpio_cfgpin(gpio, c2_init_gpios[i].cfg);
-			s3c_gpio_setpull(gpio, c2_init_gpios[i].pud);
+			s3c_gpio_cfgpin(gpio, m3_init_gpios[i].cfg);
+			s3c_gpio_setpull(gpio, m3_init_gpios[i].pud);
 
-			if (c2_init_gpios[i].val != S3C_GPIO_SETPIN_NONE)
-				gpio_set_value(gpio, c2_init_gpios[i].val);
+			if (m3_init_gpios[i].val != S3C_GPIO_SETPIN_NONE)
+				gpio_set_value(gpio, m3_init_gpios[i].val);
 
-			s5p_gpio_set_drvstr(gpio, c2_init_gpios[i].drv);
+			s5p_gpio_set_drvstr(gpio, m3_init_gpios[i].drv);
 		}
 	}
 }
diff -Naur ./arch/arm/mach-exynos/mach-kona.c ../../HK_JB/Kernel/arch/arm/mach-exynos/mach-kona.c
--- ./arch/arm/mach-exynos/mach-kona.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/mach-kona.c	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,2963 @@
+/* linux/arch/arm/mach-exynos/mach-smdk4212.c
+ *
+ * Copyright (c) 2011 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/platform_device.h>
+#include <linux/serial_core.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/spi_gpio.h>
+#include <linux/clk.h>
+#include <linux/gpio.h>
+#include <linux/gpio_event.h>
+#include <linux/i2c.h>
+#include <linux/i2c-gpio.h>
+#include <linux/pwm_backlight.h>
+#include <linux/input.h>
+#include <linux/mmc/host.h>
+#include <linux/regulator/machine.h>
+#include <linux/regulator/max8649.h>
+#include <linux/regulator/fixed.h>
+#ifdef CONFIG_LEDS_AAT1290A
+#include <linux/leds-aat1290a.h>
+#endif
+
+#ifdef CONFIG_MFD_MAX77693
+#include <linux/mfd/max77693.h>
+#include <linux/mfd/max77693-private.h>
+#include <linux/leds-max77693.h>
+#endif
+
+#ifdef CONFIG_BACKLIGHT_LP855X
+#include <linux/platform_data/lp855x.h>
+#endif
+#ifdef CONFIG_BATTERY_MAX17042_FUELGAUGE_PX
+#include <linux/power/max17042_fuelgauge_px.h>
+#endif
+#ifdef CONFIG_SMB347_CHARGER
+#include <linux/power/smb347_charger.h>
+#endif
+#ifdef CONFIG_BATTERY_SEC_PX
+#include <linux/power/sec_battery_px.h>
+#endif
+#include <linux/power_supply.h>
+#ifdef CONFIG_STMPE811_ADC
+#include <linux/stmpe811-adc.h>
+#endif
+#include <linux/v4l2-mediabus.h>
+#include <linux/memblock.h>
+#include <linux/delay.h>
+#include <linux/bootmem.h>
+
+#include <asm/mach/arch.h>
+#include <asm/mach-types.h>
+
+#include <plat/regs-serial.h>
+#include <plat/exynos4.h>
+#include <plat/cpu.h>
+#include <plat/clock.h>
+#include <plat/keypad.h>
+#include <plat/devs.h>
+#include <plat/fb-s5p.h>
+#include <plat/fb-core.h>
+#include <plat/regs-fb-v4.h>
+#include <plat/backlight.h>
+#include <plat/gpio-cfg.h>
+#include <plat/iic.h>
+#include <plat/pd.h>
+#include <plat/sdhci.h>
+#include <plat/mshci.h>
+#include <plat/ehci.h>
+#include <plat/usbgadget.h>
+#include <plat/s3c64xx-spi.h>
+#include <plat/tvout.h>
+#include <plat/csis.h>
+#include <plat/media.h>
+#include <plat/adc.h>
+#include <media/exynos_fimc_is.h>
+#include <mach/exynos-ion.h>
+
+#if defined(CONFIG_TDMB) || defined(CONFIG_TDMB_MODULE)
+#include <mach/tdmb_pdata.h>
+#endif
+
+#include <mach/map.h>
+#include <mach/spi-clocks.h>
+
+#include <mach/dev.h>
+#include <mach/ppmu.h>
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+#include <plat/s5p-tmu.h>
+#include <mach/regs-tmu.h>
+#endif
+
+#ifdef CONFIG_EXYNOS_C2C
+#include <mach/c2c.h>
+#endif
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC) || defined(CONFIG_VIDEO_MFC5X)
+#include <plat/s5p-mfc.h>
+#endif
+
+#include <plat/fb-s5p.h>
+
+#ifdef CONFIG_FB_S5P_EXTDSP
+struct s3cfb_extdsp_lcd {
+	int	width;
+	int	height;
+	int	bpp;
+};
+#endif
+#include <mach/dev-sysmmu.h>
+
+#ifdef CONFIG_VIDEO_JPEG_V2X
+#include <plat/jpeg.h>
+#endif
+
+#include <plat/fimg2d.h>
+#include <plat/s5p-sysmmu.h>
+
+#include <mach/sec_debug.h>
+
+#include <mach/kona-input.h>
+#include <mach/midas-wacom.h>
+
+#include <mach/midas-power.h>
+#ifdef CONFIG_SEC_THERMISTOR
+#include <mach/sec_thermistor.h>
+#endif
+#include <mach/midas-thermistor.h>
+#include <mach/midas-tsp.h>
+#include <mach/regs-clock.h>
+
+#include <mach/midas-lcd.h>
+#include <mach/midas-sound.h>
+#if defined(CONFIG_SEC_DEV_JACK)
+#include <mach/p4note-jack.h>
+#endif
+#ifdef CONFIG_USB_HOST_NOTIFY
+#include <linux/host_notify.h>
+#include <linux/pm_runtime.h>
+#include <linux/usb.h>
+#include <linux/usb/hcd.h>
+#include <mach/usb_switch.h>
+#endif
+
+#if defined(CONFIG_PHONE_IPC_SPI)
+#include <linux/phone_svn/ipc_spi.h>
+#include <linux/irq.h>
+#endif
+
+#ifdef CONFIG_30PIN_CONN
+#include <linux/30pin_con.h>
+#endif
+
+#ifdef CONFIG_MOTOR_DRV_DRV2603
+#include <linux/drv2603_vibrator.h>
+#endif
+
+#include "board-mobile.h"
+
+#ifdef CONFIG_IR_REMOCON_MC96
+#include <linux/ir_remote_con_mc96.h>
+#endif
+
+extern int s6c1372_panel_gpio_init(void);
+
+/* cable state */
+bool is_cable_attached;
+bool is_usb_lpm_enter;
+
+/* Following are default values for UCON, ULCON and UFCON UART registers */
+#define SMDK4212_UCON_DEFAULT	(S3C2410_UCON_TXILEVEL |	\
+				 S3C2410_UCON_RXILEVEL |	\
+				 S3C2410_UCON_TXIRQMODE |	\
+				 S3C2410_UCON_RXIRQMODE |	\
+				 S3C2410_UCON_RXFIFO_TOI |	\
+				 S3C2443_UCON_RXERR_IRQEN)
+
+#define SMDK4212_ULCON_DEFAULT	S3C2410_LCON_CS8
+
+#define SMDK4212_UFCON_DEFAULT	(S3C2410_UFCON_FIFOMODE |	\
+				 S5PV210_UFCON_TXTRIG4 |	\
+				 S5PV210_UFCON_RXTRIG4)
+
+#define SMDK4212_UFCON_GPS	(S3C2410_UFCON_FIFOMODE |	\
+				S5PV210_UFCON_TXTRIG8 |  \
+				S5PV210_UFCON_RXTRIG32)
+
+static struct s3c2410_uartcfg smdk4212_uartcfgs[] __initdata = {
+	[0] = {
+		.hwport		= 0,
+		.flags		= 0,
+		.ucon		= SMDK4212_UCON_DEFAULT,
+		.ulcon		= SMDK4212_ULCON_DEFAULT,
+		.ufcon		= SMDK4212_UFCON_DEFAULT,
+	},
+	[1] = {
+		.hwport		= 1,
+		.flags		= 0,
+		.ucon		= SMDK4212_UCON_DEFAULT,
+		.ulcon		= SMDK4212_ULCON_DEFAULT,
+		.ufcon		= SMDK4212_UFCON_GPS,
+		.set_runstate	= set_gps_uart_op,
+	},
+	[2] = {
+		.hwport		= 2,
+		.flags		= 0,
+		.ucon		= SMDK4212_UCON_DEFAULT,
+		.ulcon		= SMDK4212_ULCON_DEFAULT,
+		.ufcon		= SMDK4212_UFCON_DEFAULT,
+	},
+	[3] = {
+		.hwport		= 3,
+		.flags		= 0,
+		.ucon		= SMDK4212_UCON_DEFAULT,
+		.ulcon		= SMDK4212_ULCON_DEFAULT,
+		.ufcon		= SMDK4212_UFCON_DEFAULT,
+	},
+};
+
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+#if defined(CONFIG_VIDEO_S5C73M3_SPI)
+
+static struct s3c64xx_spi_csinfo spi1_csi[] = {
+	[0] = {
+		.line = EXYNOS4_GPB(5),
+		.set_level = gpio_set_value,
+		.fb_delay = 0x2,
+	},
+};
+
+static struct spi_board_info spi1_board_info[] __initdata = {
+	{
+		.modalias = "s5c73m3_spi",
+		.platform_data = NULL,
+		.max_speed_hz = 50000000,
+		.bus_num = 1,
+		.chip_select = 0,
+		.mode = SPI_MODE_0,
+		.controller_data = &spi1_csi[0],
+	}
+};
+#endif
+
+#if defined(CONFIG_PHONE_IPC_SPI) \
+	|| defined(CONFIG_TDMB) || defined(CONFIG_TDMB_MODULE)
+static struct s3c64xx_spi_csinfo spi2_csi[] = {
+	[0] = {
+		.line = EXYNOS4_GPC1(2),
+		.set_level = gpio_set_value,
+	},
+};
+
+static struct spi_board_info spi2_board_info[] __initdata = {
+#if defined(CONFIG_TDMB) || defined(CONFIG_TDMB_MODULE)
+	{
+		.modalias = "tdmbspi",
+		.platform_data = NULL,
+		.max_speed_hz = 5000000,
+		.bus_num = 2,
+		.chip_select = 0,
+		.mode = SPI_MODE_0,
+		.controller_data = &spi2_csi[0],
+	},
+#else
+	{
+		.modalias = "ipc_spi",
+		.platform_data = NULL,
+		.bus_num = 2,
+		.chip_select = 0,
+		.max_speed_hz = 12*1000*1000,
+		.mode = SPI_MODE_1,
+		.controller_data = &spi2_csi[0],
+	}
+#endif
+};
+#endif
+#endif
+
+
+#if defined(CONFIG_TDMB) || defined(CONFIG_TDMB_MODULE)
+static void tdmb_set_config_poweron(void)
+{
+	s3c_gpio_cfgpin(GPIO_TDMB_EN, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_TDMB_EN, S3C_GPIO_PULL_NONE);
+	gpio_set_value(GPIO_TDMB_EN, GPIO_LEVEL_LOW);
+
+	s3c_gpio_cfgpin(GPIO_TDMB_INT, S3C_GPIO_SFN(GPIO_TDMB_INT_AF));
+	s3c_gpio_setpull(GPIO_TDMB_INT, S3C_GPIO_PULL_NONE);
+}
+static void tdmb_set_config_poweroff(void)
+{
+	s3c_gpio_cfgpin(GPIO_TDMB_EN, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_TDMB_EN, S3C_GPIO_PULL_NONE);
+	gpio_set_value(GPIO_TDMB_EN, GPIO_LEVEL_LOW);
+
+	s3c_gpio_cfgpin(GPIO_TDMB_INT, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_TDMB_INT, S3C_GPIO_PULL_NONE);
+	gpio_set_value(GPIO_TDMB_INT, GPIO_LEVEL_LOW);
+}
+
+static void tdmb_gpio_on(void)
+{
+	printk(KERN_DEBUG "tdmb_gpio_on\n");
+
+	tdmb_set_config_poweron();
+
+	gpio_set_value(GPIO_TDMB_EN, GPIO_LEVEL_LOW);
+	usleep_range(1000, 1000);
+	gpio_set_value(GPIO_TDMB_EN, GPIO_LEVEL_HIGH);
+}
+
+static void tdmb_gpio_off(void)
+{
+	printk(KERN_DEBUG "tdmb_gpio_off\n");
+
+	tdmb_set_config_poweroff();
+
+	gpio_set_value(GPIO_TDMB_EN, GPIO_LEVEL_LOW);
+}
+
+static struct tdmb_platform_data tdmb_pdata = {
+	.gpio_on = tdmb_gpio_on,
+	.gpio_off = tdmb_gpio_off,
+};
+
+static struct platform_device tdmb_device = {
+	.name			= "tdmb",
+	.id				= -1,
+	.dev			= {
+		.platform_data = &tdmb_pdata,
+	},
+};
+
+static int __init tdmb_dev_init(void)
+{
+	tdmb_set_config_poweroff();
+	s5p_register_gpio_interrupt(GPIO_TDMB_INT);
+	tdmb_pdata.irq = GPIO_TDMB_IRQ;
+	platform_device_register(&tdmb_device);
+
+	return 0;
+}
+#endif
+
+#if defined(CONFIG_PHONE_IPC_SPI)
+static void ipc_spi_cfg_gpio(void);
+
+static struct ipc_spi_platform_data ipc_spi_data = {
+	.gpio_ipc_mrdy = GPIO_IPC_MRDY,
+	.gpio_ipc_srdy = GPIO_IPC_SRDY,
+	.gpio_ipc_sub_mrdy = GPIO_IPC_SUB_MRDY,
+	.gpio_ipc_sub_srdy = GPIO_IPC_SUB_SRDY,
+
+	.cfg_gpio = ipc_spi_cfg_gpio,
+};
+
+static struct resource ipc_spi_res[] = {
+	[0] = {
+		.start = IRQ_IPC_SRDY,
+		.end = IRQ_IPC_SRDY,
+		.flags = IORESOURCE_IRQ,
+	},
+};
+
+static struct platform_device ipc_spi_device = {
+	.name = "onedram",
+	.id = -1,
+	.num_resources = ARRAY_SIZE(ipc_spi_res),
+	.resource = ipc_spi_res,
+	.dev = {
+		.platform_data = &ipc_spi_data,
+	},
+};
+
+static void ipc_spi_cfg_gpio(void)
+{
+	int err = 0;
+
+	unsigned gpio_ipc_mrdy = ipc_spi_data.gpio_ipc_mrdy;
+	unsigned gpio_ipc_srdy = ipc_spi_data.gpio_ipc_srdy;
+	unsigned gpio_ipc_sub_mrdy = ipc_spi_data.gpio_ipc_sub_mrdy;
+	unsigned gpio_ipc_sub_srdy = ipc_spi_data.gpio_ipc_sub_srdy;
+
+	err = gpio_request(gpio_ipc_mrdy, "IPC_MRDY");
+	if (err) {
+		printk(KERN_ERR "ipc_spi_cfg_gpio - fail to request gpio %s : %d\n",
+			"IPC_MRDY", err);
+	} else {
+		gpio_direction_output(gpio_ipc_mrdy, 0);
+		s3c_gpio_setpull(gpio_ipc_mrdy, S3C_GPIO_PULL_DOWN);
+	}
+
+	err = gpio_request(gpio_ipc_srdy, "IPC_SRDY");
+	if (err) {
+		printk(KERN_ERR "ipc_spi_cfg_gpio - fail to request gpio %s : %d\n",
+			"IPC_SRDY", err);
+	} else {
+		gpio_direction_input(gpio_ipc_srdy);
+		s3c_gpio_cfgpin(gpio_ipc_srdy, S3C_GPIO_SFN(0xF));
+		s3c_gpio_setpull(gpio_ipc_srdy, S3C_GPIO_PULL_NONE);
+	}
+
+	err = gpio_request(gpio_ipc_sub_mrdy, "IPC_SUB_MRDY");
+	if (err) {
+		printk(KERN_ERR "ipc_spi_cfg_gpio - fail to request gpio %s : %d\n",
+			"IPC_SUB_MRDY", err);
+	} else {
+		gpio_direction_output(gpio_ipc_sub_mrdy, 0);
+		s3c_gpio_setpull(gpio_ipc_sub_mrdy, S3C_GPIO_PULL_DOWN);
+	}
+
+	err = gpio_request(gpio_ipc_sub_srdy, "IPC_SUB_SRDY");
+	if (err) {
+		printk(KERN_ERR "ipc_spi_cfg_gpio - fail to request gpio %s : %d\n",
+			"IPC_SUB_SRDY", err);
+	} else {
+		gpio_direction_input(gpio_ipc_sub_srdy);
+		s3c_gpio_cfgpin(gpio_ipc_sub_srdy, S3C_GPIO_SFN(0xF));
+		s3c_gpio_setpull(gpio_ipc_sub_srdy, S3C_GPIO_PULL_NONE);
+	}
+
+	irq_set_irq_type(gpio_to_irq(GPIO_IPC_SRDY), IRQ_TYPE_EDGE_RISING);
+	irq_set_irq_type(gpio_to_irq(GPIO_IPC_SUB_SRDY), IRQ_TYPE_EDGE_RISING);
+}
+#endif
+
+#ifdef CONFIG_LEDS_AAT1290A
+static int aat1290a_initGpio(void)
+{
+	int err;
+
+	err = gpio_request(GPIO_CAM_SW_EN, "CAM_SW_EN");
+	if (err) {
+		printk(KERN_ERR "failed to request CAM_SW_EN\n");
+		return -EPERM;
+	}
+	gpio_direction_output(GPIO_CAM_SW_EN, 1);
+	gpio_set_value(GPIO_CAM_SW_EN, 1);
+
+	return 0;
+}
+
+static void aat1290a_switch(int enable)
+{
+	gpio_set_value(GPIO_CAM_SW_EN, enable);
+}
+
+static int aat1290a_setGpio(void)
+{
+	int err;
+
+	err = gpio_request(GPIO_TORCH_EN, "TORCH_EN");
+	if (err) {
+		printk(KERN_ERR "failed to request TORCH_EN\n");
+		return -EPERM;
+	}
+	gpio_direction_output(GPIO_TORCH_EN, 1);
+	err = gpio_request(GPIO_TORCH_SET, "TORCH_SET");
+	if (err) {
+		printk(KERN_ERR "failed to request TORCH_SET\n");
+		gpio_free(GPIO_TORCH_EN);
+		return -EPERM;
+	}
+	gpio_direction_output(GPIO_TORCH_SET, 1);
+	gpio_set_value(GPIO_TORCH_EN, 0);
+	gpio_set_value(GPIO_TORCH_SET, 0);
+
+	return 0;
+}
+
+static int aat1290a_freeGpio(void)
+{
+	gpio_free(GPIO_TORCH_EN);
+	gpio_free(GPIO_TORCH_SET);
+
+	return 0;
+}
+
+static void aat1290a_torch_en(int onoff)
+{
+	gpio_set_value(GPIO_TORCH_EN, onoff);
+}
+
+static void aat1290a_torch_set(int onoff)
+{
+	gpio_set_value(GPIO_TORCH_SET, onoff);
+}
+
+static struct aat1290a_led_platform_data aat1290a_led_data = {
+	.brightness = TORCH_BRIGHTNESS_50,
+	.status	= STATUS_UNAVAILABLE,
+	.switch_sel = aat1290a_switch,
+	.initGpio = aat1290a_initGpio,
+	.setGpio = aat1290a_setGpio,
+	.freeGpio = aat1290a_freeGpio,
+	.torch_en = aat1290a_torch_en,
+	.torch_set = aat1290a_torch_set,
+};
+
+static struct platform_device s3c_device_aat1290a_led = {
+	.name	= "aat1290a-led",
+	.id	= -1,
+	.dev	= {
+		.platform_data	= &aat1290a_led_data,
+	},
+};
+#endif
+
+static DEFINE_MUTEX(notify_lock);
+
+#define DEFINE_MMC_CARD_NOTIFIER(num) \
+static void (*hsmmc##num##_notify_func)(struct platform_device *, int state); \
+static int ext_cd_init_hsmmc##num(void (*notify_func)( \
+			struct platform_device *, int state)) \
+{ \
+	mutex_lock(&notify_lock); \
+	WARN_ON(hsmmc##num##_notify_func); \
+	hsmmc##num##_notify_func = notify_func; \
+	mutex_unlock(&notify_lock); \
+	return 0; \
+} \
+static int ext_cd_cleanup_hsmmc##num(void (*notify_func)( \
+			struct platform_device *, int state)) \
+{ \
+	mutex_lock(&notify_lock); \
+	WARN_ON(hsmmc##num##_notify_func != notify_func); \
+	hsmmc##num##_notify_func = NULL; \
+	mutex_unlock(&notify_lock); \
+	return 0; \
+}
+
+#ifdef CONFIG_S3C_DEV_HSMMC3
+	DEFINE_MMC_CARD_NOTIFIER(3)
+#endif
+
+/*
+ * call this when you need sd stack to recognize insertion or removal of card
+ * that can't be told by SDHCI regs
+ */
+void mmc_force_presence_change(struct platform_device *pdev)
+{
+	void (*notify_func)(struct platform_device *, int state) = NULL;
+	mutex_lock(&notify_lock);
+#ifdef CONFIG_S3C_DEV_HSMMC3
+	if (pdev == &s3c_device_hsmmc3)
+		notify_func = hsmmc3_notify_func;
+#endif
+
+	if (notify_func)
+		notify_func(pdev, 1);
+	else
+		pr_warn("%s: called for device with no notifier\n", __func__);
+	mutex_unlock(&notify_lock);
+}
+EXPORT_SYMBOL_GPL(mmc_force_presence_change);
+
+#ifdef CONFIG_S3C_DEV_HSMMC
+static struct s3c_sdhci_platdata smdk4212_hsmmc0_pdata __initdata = {
+	.cd_type		= S3C_MSHCI_CD_PERMANENT,
+	.clk_type		= S3C_SDHCI_CLK_DIV_EXTERNAL,
+#ifdef CONFIG_EXYNOS4_SDHCI_CH0_8BIT
+	.max_width		= 8,
+	.host_caps		= MMC_CAP_8_BIT_DATA,
+#endif
+};
+#endif
+
+#ifdef CONFIG_S3C_DEV_HSMMC1
+static struct s3c_sdhci_platdata smdk4212_hsmmc1_pdata __initdata = {
+	.cd_type		= S3C_SDHCI_CD_INTERNAL,
+	.clk_type		= S3C_SDHCI_CLK_DIV_EXTERNAL,
+};
+#endif
+
+#ifdef CONFIG_S3C_DEV_HSMMC2
+static struct s3c_sdhci_platdata smdk4212_hsmmc2_pdata __initdata = {
+	.cd_type		= S3C_SDHCI_CD_GPIO,
+	.ext_cd_gpio		= EXYNOS4_GPX3(4),
+	.ext_cd_gpio_invert	= true,
+	.clk_type		= S3C_SDHCI_CLK_DIV_EXTERNAL,
+	.vmmc_name		= "vtf_2.8v"
+#ifdef CONFIG_EXYNOS4_SDHCI_CH2_8BIT
+	.max_width		= 8,
+	.host_caps		= MMC_CAP_8_BIT_DATA,
+#endif
+};
+#endif
+
+#ifdef CONFIG_S3C_DEV_HSMMC3
+static struct s3c_sdhci_platdata smdk4212_hsmmc3_pdata __initdata = {
+/* new code for brm4334 */
+	.cd_type		= S3C_SDHCI_CD_EXTERNAL,
+
+	.clk_type		= S3C_SDHCI_CLK_DIV_EXTERNAL,
+	.pm_flags = S3C_SDHCI_PM_IGNORE_SUSPEND_RESUME,
+	.ext_cd_init = ext_cd_init_hsmmc3,
+	.ext_cd_cleanup = ext_cd_cleanup_hsmmc3,
+};
+#endif
+
+#ifdef CONFIG_EXYNOS4_DEV_MSHC
+static struct s3c_mshci_platdata exynos4_mshc_pdata __initdata = {
+	.cd_type		= S3C_MSHCI_CD_PERMANENT,
+	.fifo_depth		= 0x80,
+#if defined(CONFIG_EXYNOS4_MSHC_8BIT) && \
+	defined(CONFIG_EXYNOS4_MSHC_DDR)
+	.max_width		= 8,
+	.host_caps		= MMC_CAP_8_BIT_DATA | MMC_CAP_1_8V_DDR |
+				  MMC_CAP_UHS_DDR50 | MMC_CAP_CMD23,
+	.host_caps2		= MMC_CAP2_PACKED_CMD,
+#elif defined(CONFIG_EXYNOS4_MSHC_8BIT)
+	.max_width		= 8,
+	.host_caps		= MMC_CAP_8_BIT_DATA | MMC_CAP_CMD23,
+#elif defined(CONFIG_EXYNOS4_MSHC_DDR)
+	.host_caps		= MMC_CAP_1_8V_DDR | MMC_CAP_UHS_DDR50 |
+				  MMC_CAP_CMD23,
+#endif
+	.int_power_gpio		= GPIO_eMMC_EN,
+};
+#endif
+
+#ifdef CONFIG_USB_EHCI_S5P
+static struct s5p_ehci_platdata smdk4212_ehci_pdata;
+
+static void __init smdk4212_ehci_init(void)
+{
+	struct s5p_ehci_platdata *pdata = &smdk4212_ehci_pdata;
+
+	s5p_ehci_set_platdata(pdata);
+}
+#endif
+
+#ifdef CONFIG_USB_OHCI_S5P
+static struct s5p_ohci_platdata smdk4212_ohci_pdata;
+
+static void __init smdk4212_ohci_init(void)
+{
+	struct s5p_ohci_platdata *pdata = &smdk4212_ohci_pdata;
+
+	s5p_ohci_set_platdata(pdata);
+}
+#endif
+
+/* USB GADGET */
+#ifdef CONFIG_USB_GADGET
+static struct s5p_usbgadget_platdata smdk4212_usbgadget_pdata;
+
+#include <linux/usb/android_composite.h>
+static void __init smdk4212_usbgadget_init(void)
+{
+	struct s5p_usbgadget_platdata *pdata = &smdk4212_usbgadget_pdata;
+	struct android_usb_platform_data *android_pdata =
+		s3c_device_android_usb.dev.platform_data;
+	if (android_pdata) {
+		unsigned int newluns = 0;
+		unsigned int cdfs = 1;
+
+		printk(KERN_DEBUG "usb: %s: default luns=%d, new luns=%d\n",
+				__func__, android_pdata->nluns, newluns);
+		android_pdata->nluns = newluns;
+		android_pdata->cdfs_support = cdfs;
+	} else {
+		printk(KERN_DEBUG "usb: %s android_pdata is not available\n",
+				__func__);
+	}
+
+	s5p_usbgadget_set_platdata(pdata);
+
+#if defined(CONFIG_MACH_C1_KOR_SKT) || defined(CONFIG_MACH_C1_KOR_KT) || \
+	defined(CONFIG_MACH_C1_KOR_LGT)
+	pdata = s3c_device_usbgadget.dev.platform_data;
+	if (pdata) {
+		/* Squelch Threshold Tune [13:11] (111 : -20%) */
+		pdata->phy_tune_mask |= (0x7 << 11);
+		pdata->phy_tune |= (0x7 << 11);
+		printk(KERN_DEBUG "usb: %s tune_mask=0x%x, tune=0x%x\n",
+			__func__, pdata->phy_tune_mask, pdata->phy_tune);
+	}
+#endif
+
+}
+#endif
+
+/* I2C0 */
+static struct i2c_board_info i2c_devs0[] __initdata = {
+};
+
+/* I2C1 */
+static struct i2c_board_info i2c_devs1[] __initdata = {
+};
+
+#ifdef CONFIG_S3C_DEV_I2C5
+static struct i2c_board_info i2c_devs5[] __initdata = {
+#ifdef CONFIG_REGULATOR_MAX8997
+	{
+		I2C_BOARD_INFO("max8997", (0xcc >> 1)),
+		.platform_data = &exynos4_max8997_info,
+	},
+#endif
+#if defined(CONFIG_REGULATOR_MAX77686)
+	/* max77686 on i2c5 other than M1 board */
+	{
+		I2C_BOARD_INFO("max77686", (0x12 >> 1)),
+		.platform_data	= &exynos4_max77686_info,
+	},
+#endif
+};
+#endif
+
+static struct i2c_board_info i2c_devs7[] __initdata = {
+#if defined(CONFIG_REGULATOR_MAX77686) /* max77686 on i2c7 with M1 board */
+	{
+		I2C_BOARD_INFO("max77686", (0x12 >> 1)),
+		.platform_data	= &exynos4_max77686_info,
+	},
+#endif
+
+#if defined(CONFIG_REGULATOR_S5M8767)
+	{
+		I2C_BOARD_INFO("s5m87xx", 0xCC >> 1),
+		.platform_data = &exynos4_s5m8767_info,
+		.irq	= IRQ_EINT(7),
+	},
+#endif
+};
+
+/* Bluetooth */
+#ifdef CONFIG_BT_BCM4334
+static struct platform_device bcm4334_bluetooth_device = {
+	.name = "bcm4334_bluetooth",
+	.id = -1,
+};
+#endif
+
+/* I2C9 */
+static struct i2c_board_info i2c_devs9_emul[] __initdata = {
+};
+
+/* I2C10 */
+static struct i2c_board_info i2c_devs10_emul[] __initdata = {
+};
+
+/* I2C11 */
+static struct i2c_board_info i2c_devs11_emul[] __initdata = {
+};
+
+#ifdef CONFIG_SMB347_CHARGER
+struct smb_charger_callbacks *smb_callbacks;
+
+static void smb_charger_register_callbacks(struct smb_charger_callbacks *ptr)
+{
+	smb_callbacks = ptr;
+}
+
+static void smb_charger_unregister_callbacks(void)
+{
+	smb_callbacks = NULL;
+}
+
+static struct smb_charger_data smb_charger_pdata = {
+	.register_callbacks = smb_charger_register_callbacks,
+	.unregister_callbacks = smb_charger_unregister_callbacks,
+	.enable = GPIO_TA_EN,
+	.stat = GPIO_TA_nCHG,
+	.ta_nconnected = GPIO_TA_nCONNECTED,
+};
+
+/* I2C13 */
+static struct i2c_board_info i2c_devs13_emul[] __initdata = {
+	{
+		I2C_BOARD_INFO("smb347-charger", 0x0C >> 1),
+		.platform_data = &smb_charger_pdata,
+	},
+};
+
+static void __init smb_gpio_init(void)
+{
+	s3c_gpio_cfgpin(GPIO_TA_nCHG, S3C_GPIO_SFN(0xf));
+	/* external pull up */
+	s3c_gpio_setpull(GPIO_TA_nCHG, S3C_GPIO_PULL_NONE);
+	i2c_devs13_emul[0].irq = gpio_to_irq(GPIO_TA_nCHG);
+}
+
+static struct i2c_gpio_platform_data gpio_i2c_data13 = {
+	.sda_pin = GPIO_CHG_SDA,
+	.scl_pin = GPIO_CHG_SCL,
+};
+
+struct platform_device s3c_device_i2c13 = {
+	.name = "i2c-gpio",
+	.id = 13,
+	.dev.platform_data = &gpio_i2c_data13,
+};
+
+static void sec_bat_set_charging_state(int enable, int cable_status)
+{
+	if (smb_callbacks && smb_callbacks->set_charging_state)
+		smb_callbacks->set_charging_state(enable, cable_status);
+}
+
+static int sec_bat_get_charging_state(void)
+{
+	if (smb_callbacks && smb_callbacks->get_charging_state)
+		return smb_callbacks->get_charging_state();
+	else
+		return 0;
+}
+
+static void sec_bat_set_charging_current(int set_current)
+{
+	if (smb_callbacks && smb_callbacks->set_charging_current)
+		smb_callbacks->set_charging_current(set_current);
+}
+
+static int sec_bat_get_charging_current(void)
+{
+	if (smb_callbacks && smb_callbacks->get_charging_current)
+		return smb_callbacks->get_charging_current();
+	else
+		return 0;
+}
+
+static int sec_bat_get_charger_is_full(void)
+{
+	if (smb_callbacks && smb_callbacks->get_charger_is_full)
+		return smb_callbacks->get_charger_is_full();
+	else
+		return 0;
+}
+
+static int sec_bat_get_aicl_current(void)
+{
+	if (smb_callbacks && smb_callbacks->get_aicl_current)
+		return smb_callbacks->get_aicl_current();
+	else
+		return 0;
+}
+
+static int sec_bat_get_input_current(void)
+{
+	if (smb_callbacks && smb_callbacks->get_input_current)
+		return smb_callbacks->get_input_current();
+	else
+		return 0;
+
+}
+
+#endif
+
+static int check_bootmode(void)
+{
+	int inform2;
+
+	inform2 = __raw_readl(S5P_INFORM2);
+	if (inform2 == 0x1)
+		return 1;
+	else
+		return 0;
+}
+
+static int check_jig_on(void)
+{
+	/* check GPIO_IF_CON_SENSE pin */
+	if (system_rev >= 1)
+		return !gpio_get_value(GPIO_IF_CON_SENSE);
+	else
+		return 0;
+}
+
+/* I2C14 */
+#ifdef CONFIG_BATTERY_MAX17042_FUELGAUGE_PX
+static struct i2c_gpio_platform_data gpio_i2c_data14 = {
+	.sda_pin = GPIO_FUEL_SDA,
+	.scl_pin = GPIO_FUEL_SCL,
+};
+
+struct platform_device s3c_device_i2c14 = {
+	.name = "i2c-gpio",
+	.id = 14,
+	.dev.platform_data = &gpio_i2c_data14,
+};
+
+static struct max17042_platform_data max17042_pdata = {
+	.sdi_capacity = 0x3730,
+	.sdi_vfcapacity = 0x4996,
+	.sdi_low_bat_comp_start_vol = 3600,
+	.atl_capacity = 0x3022,
+	.atl_vfcapacity = 0x4024,
+	.atl_low_bat_comp_start_vol = 3450,
+	.byd_capacity = 0x36B0,
+	.byd_vfcapacity = 0x48EA,
+	.byd_low_bat_comp_start_vol = 3600,
+	.fuel_alert_line = GPIO_FUEL_ALERT,
+	.check_jig_status = check_jig_on
+};
+
+static struct i2c_board_info i2c_devs14_emul[] __initdata = {
+	{
+		I2C_BOARD_INFO("fuelgauge", 0x36),
+		.platform_data = &max17042_pdata,
+	},
+};
+#endif
+
+/* I2C15 */
+static struct i2c_gpio_platform_data gpio_i2c_data15 = {
+	.sda_pin = GPIO_MHL_SDA_1_8V,
+	.scl_pin = GPIO_MHL_SCL_1_8V,
+	.udelay = 3,
+	.timeout = 0,
+};
+
+struct platform_device s3c_device_i2c15 = {
+	.name = "i2c-gpio",
+	.id = 15,
+	.dev = {
+		.platform_data = &gpio_i2c_data15,
+	}
+};
+
+static struct i2c_board_info i2c_devs15_emul[] __initdata = {
+};
+
+/* I2C16 */
+static struct i2c_gpio_platform_data gpio_i2c_data16 = {
+	.sda_pin = GPIO_MHL_DSDA_2_8V,
+	.scl_pin = GPIO_MHL_DSCL_2_8V,
+};
+
+struct platform_device s3c_device_i2c16 = {
+	.name = "i2c-gpio",
+	.id = 16,
+	.dev.platform_data = &gpio_i2c_data16,
+};
+
+static struct i2c_board_info i2c_devs16_emul[] __initdata = {
+};
+
+#if 0
+static struct i2c_gpio_platform_data i2c18_platdata = {
+	.sda_pin		= GPIO_8M_CAM_SDA_18V,
+	.scl_pin		= GPIO_8M_CAM_SCL_18V,
+	.udelay			= 2, /* 250 kHz */
+	.sda_is_open_drain	= 0,
+	.scl_is_open_drain	= 0,
+	.scl_is_output_only = 0,
+};
+
+static struct platform_device s3c_device_i2c18 = {
+	.name	= "i2c-gpio",
+	.id	= 18,
+	.dev.platform_data	= &i2c18_platdata,
+};
+
+/* I2C18 */
+/* No explicit i2c client array here. The channel number 18 is passed
+   to camera driver from midas-camera.c instead. */
+#endif
+
+#if defined(CONFIG_STMPE811_ADC) || defined(CONFIG_FM_SI4709_MODULE) \
+	|| defined(CONFIG_FM_SI4705_MODULE)
+static struct i2c_gpio_platform_data gpio_i2c_data19 = {
+	.sda_pin = GPIO_ADC_SDA,
+	.scl_pin = GPIO_ADC_SCL,
+};
+
+struct platform_device s3c_device_i2c19 = {
+	.name = "i2c-gpio",
+	.id = 19,
+	.dev.platform_data = &gpio_i2c_data19,
+};
+
+
+/* I2C19 */
+static struct i2c_board_info i2c_devs19_emul[] __initdata = {
+#if defined(CONFIG_STMPE811_ADC)
+	{
+		I2C_BOARD_INFO("stmpe811-adc", (0x82 >> 1)),
+		.platform_data	= &stmpe811_pdata,
+	},
+#endif
+#ifdef CONFIG_FM_SI4705_MODULE
+	{
+		I2C_BOARD_INFO("Si4709", (0x22 >> 1)),
+	},
+#endif
+#ifdef CONFIG_FM_SI4709_MODULE
+	{
+		I2C_BOARD_INFO("Si4709", (0x20 >> 1)),
+	},
+#endif
+
+};
+#endif
+
+/* I2C21 */
+#ifdef CONFIG_LEDS_AN30259A
+static struct i2c_gpio_platform_data gpio_i2c_data21 = {
+	.scl_pin = GPIO_S_LED_I2C_SCL,
+	.sda_pin = GPIO_S_LED_I2C_SDA,
+};
+
+struct platform_device s3c_device_i2c21 = {
+	.name = "i2c-gpio",
+	.id = 21,
+	.dev.platform_data = &gpio_i2c_data21,
+};
+#endif
+
+/* I2C21 */
+static struct i2c_board_info i2c_devs21_emul[] __initdata = {
+#ifdef CONFIG_LEDS_AN30259A
+	{
+		I2C_BOARD_INFO("an30259a", 0x30),
+	},
+#endif
+};
+
+
+/* I2C22 */
+#ifdef CONFIG_IR_REMOCON_MC96
+static void irda_wake_en(bool onoff)
+{
+	gpio_direction_output(GPIO_IRDA_WAKE, onoff);
+#if 0
+	printk(KERN_ERR "%s: irda_wake_en : %d\n", __func__, onoff);
+#endif
+}
+
+static void irda_device_init(void)
+{
+	int ret;
+
+	printk(KERN_ERR "%s called!\n", __func__);
+
+	ret = gpio_request(GPIO_IRDA_WAKE, "irda_wake");
+	if (ret) {
+		printk(KERN_ERR "%s: gpio_request fail[%d], ret = %d\n",
+				__func__, GPIO_IRDA_WAKE, ret);
+		return;
+	}
+	gpio_direction_output(GPIO_IRDA_WAKE, 0);
+
+	s3c_gpio_cfgpin(GPIO_IRDA_IRQ, S3C_GPIO_INPUT);
+	s3c_gpio_setpull(GPIO_IRDA_IRQ, S3C_GPIO_PULL_UP);
+	gpio_direction_input(GPIO_IRDA_IRQ);
+
+	return;
+}
+
+static int vled_ic_onoff;
+
+static void irda_vdd_onoff(bool onoff)
+{
+	static struct regulator *vled_ic;
+
+	if (onoff) {
+		vled_ic = regulator_get(NULL, "vled_ic_1.9v");
+		if (IS_ERR(vled_ic)) {
+			pr_err("could not get regulator vled_ic_1.9v\n");
+			return;
+		}
+		regulator_enable(vled_ic);
+		vled_ic_onoff = 1;
+	} else if (vled_ic_onoff == 1) {
+		regulator_force_disable(vled_ic);
+		regulator_put(vled_ic);
+		vled_ic_onoff = 0;
+	}
+}
+
+static struct i2c_gpio_platform_data gpio_i2c_data22 = {
+	.sda_pin = GPIO_IRDA_SDA,
+	.scl_pin = GPIO_IRDA_SCL,
+	.udelay = 2,
+	.sda_is_open_drain = 0,
+	.scl_is_open_drain = 0,
+	.scl_is_output_only = 0,
+};
+
+struct platform_device s3c_device_i2c22 = {
+	.name = "i2c-gpio",
+	.id = 22,
+	.dev.platform_data = &gpio_i2c_data22,
+};
+
+static struct mc96_platform_data mc96_pdata = {
+	.ir_wake_en = irda_wake_en,
+	.ir_vdd_onoff = irda_vdd_onoff,
+};
+
+static struct i2c_board_info i2c_devs22_emul[] __initdata = {
+	{
+		I2C_BOARD_INFO("mc96", (0XA0 >> 1)),
+		.platform_data = &mc96_pdata,
+	},
+};
+#endif
+
+#ifdef CONFIG_FB_S5P_NT71391
+static struct i2c_gpio_platform_data gpio_i2c_data23 = {
+	.scl_pin = GPIO_LCD_FREQ_SCL,
+	.sda_pin = GPIO_LCD_FREQ_SDA,
+};
+
+struct platform_device s3c_device_i2c23 = {
+	.name = "i2c-gpio",
+	.id = 23,
+	.dev.platform_data = &gpio_i2c_data23,
+};
+#endif
+
+#ifdef CONFIG_BACKLIGHT_LP855X
+static struct i2c_gpio_platform_data gpio_i2c_data24 = {
+	.scl_pin = GPIO_LED_BACKLIGHT_SCL,
+	.sda_pin = GPIO_LED_BACKLIGHT_SDA,
+};
+
+struct platform_device s3c_device_i2c24 = {
+	.name = "i2c-gpio",
+	.id = 24,
+	.dev.platform_data = &gpio_i2c_data24,
+};
+
+static int lp8556_bl_set_power(int on)
+{
+	pr_info("lp8556_bl : power : %d\n", on);
+
+	if (on)
+		gpio_set_value(GPIO_LED_BACKLIGHT_RESET, GPIO_LEVEL_HIGH);
+	else
+		gpio_set_value(GPIO_LED_BACKLIGHT_RESET, GPIO_LEVEL_LOW);
+
+	return 0;
+}
+
+static struct lp855x_pdata lp8856_bl_pdata = {
+	.ps_mode	= PS_MODE_4_4,
+	.brt_mode	= BRT_MODE_PWM,
+	.set_power	= lp8556_bl_set_power,
+};
+
+static struct i2c_board_info i2c_devs24_emul[] __initdata = {
+	{
+		I2C_BOARD_INFO("lp8556", (0x58 >> 1)),
+		.platform_data	= &lp8856_bl_pdata,
+	},
+};
+#endif
+
+
+#ifdef CONFIG_ANDROID_RAM_CONSOLE
+static struct resource ram_console_resource[] = {
+	{
+		.flags = IORESOURCE_MEM,
+	}
+};
+
+static struct platform_device ram_console_device = {
+	.name = "ram_console",
+	.id = -1,
+	.num_resources = ARRAY_SIZE(ram_console_resource),
+	.resource = ram_console_resource,
+};
+
+static int __init setup_ram_console_mem(char *str)
+{
+	unsigned size = memparse(str, &str);
+
+	if (size && (*str == '@')) {
+		unsigned long long base = 0;
+
+		base = simple_strtoul(++str, &str, 0);
+		if (reserve_bootmem(base, size, BOOTMEM_EXCLUSIVE)) {
+			pr_err("%s: failed reserving size %d "
+			       "at base 0x%llx\n", __func__, size, base);
+			return -1;
+		}
+
+		ram_console_resource[0].start = base;
+		ram_console_resource[0].end = base + size - 1;
+		pr_err("%s: %x at %llx\n", __func__, size, base);
+	}
+	return 0;
+}
+
+__setup("ram_console=", setup_ram_console_mem);
+#endif
+
+#ifdef CONFIG_BATTERY_SEC_PX
+void sec_bat_gpio_init(void)
+{
+
+	s3c_gpio_cfgpin(GPIO_TA_nCONNECTED, S3C_GPIO_INPUT);
+	s3c_gpio_setpull(GPIO_TA_nCONNECTED, S3C_GPIO_PULL_NONE);
+
+	s3c_gpio_cfgpin(GPIO_TA_nCHG, S3C_GPIO_INPUT);
+	s3c_gpio_setpull(GPIO_TA_nCHG, S3C_GPIO_PULL_UP);
+
+	s3c_gpio_cfgpin(GPIO_TA_EN, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_TA_EN, S3C_GPIO_PULL_NONE);
+	gpio_set_value(GPIO_TA_EN, 0);
+
+	gpio_request(GPIO_TA_nCHG, "TA_nCHG");
+	s5p_register_gpio_interrupt(GPIO_TA_nCHG);
+
+	pr_info("BAT : Battery GPIO initialized.\n");
+}
+
+static void  sec_charger_cb(int set_cable_type, int cable_sub_type)
+{
+	struct usb_gadget *gadget = platform_get_drvdata(&s3c_device_usbgadget);
+	bool cable_state_to_tsp;
+	bool cable_state_to_usb;
+	enum usb_path_t usb_path;
+
+	switch (set_cable_type) {
+	case CHARGER_USB:
+		cable_state_to_tsp = true;
+		cable_state_to_usb = true;
+		is_cable_attached = true;
+		is_usb_lpm_enter = false;
+		break;
+	case CHARGER_DOCK:
+		switch (cable_sub_type) {
+		case ONLINE_SUB_TYPE_KBD:
+			cable_state_to_tsp = true;
+			cable_state_to_usb = false;
+			is_cable_attached = true;
+			is_usb_lpm_enter = true;
+			pr_info("%s: key dock is detected\n", __func__);
+			break;
+		case ONLINE_SUB_TYPE_UNKNOWN:
+		case ONLINE_SUB_TYPE_MHL:
+		case ONLINE_SUB_TYPE_AUDIO:
+		case ONLINE_SUB_TYPE_DESK:
+		case ONLINE_SUB_TYPE_SMART_NOTG:
+		case ONLINE_SUB_TYPE_SMART_OTG:
+		default:
+			cable_state_to_tsp = true;
+			cable_state_to_usb = false;
+			is_cable_attached = true;
+			is_usb_lpm_enter = true;
+
+			usb_path = usb_switch_get_path();
+			if (usb_path != USB_PATH_AP) {
+				usb_switch_lock();
+				usb_switch_set_path(USB_PATH_TA);
+				usb_switch_unlock();
+			} else {
+				pr_info("%s: sub cx is detected and ap path\n",
+					__func__);
+			}
+			break;
+		}
+		break;
+	case CHARGER_AC:
+	case CHARGER_MISC:
+		cable_state_to_tsp = true;
+		cable_state_to_usb = false;
+		is_cable_attached = true;
+		is_usb_lpm_enter = true;
+
+		usb_path = usb_switch_get_path();
+		if (usb_path != USB_PATH_AP) {
+			usb_switch_lock();
+			usb_switch_set_path(USB_PATH_TA);
+			usb_switch_unlock();
+		} else {
+			pr_info("%s: charger is detected and ap path\n",
+								__func__);
+		}
+		break;
+	case CHARGER_BATTERY:
+	case CHARGER_DISCHARGE:
+	default:
+		cable_state_to_tsp = false;
+		cable_state_to_usb = false;
+		is_cable_attached = false;
+		is_usb_lpm_enter = true;
+		usb_switch_lock();
+		usb_switch_clr_path(USB_PATH_TA);
+		usb_switch_unlock();
+		break;
+	}
+	pr_info("%s:cable_type=%d,tsp(%d),usb(%d),attached(%d),usblpm(%d)\n",
+		__func__, set_cable_type, cable_state_to_tsp,
+		cable_state_to_usb, is_cable_attached, is_usb_lpm_enter);
+
+#if defined(CONFIG_TOUCHSCREEN_SYNAPTICS_S7301)
+	synaptics_ts_charger_infom(is_cable_attached);
+#endif
+
+/* Send charger state to px-switch. px-switch needs cable type what USB or not */
+	set_usb_connection_state(!is_usb_lpm_enter);
+
+#ifdef CONFIG_TARGET_LOCALE_KOR
+	if (px_switch_get_usb_lock_state()) {
+		pr_info("%s: usb locked by mdm\n", __func__);
+		return;
+	}
+#endif
+
+/* Send charger state to USB. USB needs cable type what USB data or not */
+	if (gadget) {
+		if (cable_state_to_usb)
+			usb_gadget_vbus_connect(gadget);
+		else
+			usb_gadget_vbus_disconnect(gadget);
+	}
+
+	pr_info("%s\n", __func__);
+}
+
+static struct sec_battery_platform_data sec_battery_platform = {
+	.charger = {
+		.enable_line = GPIO_TA_EN,
+		.connect_line = GPIO_TA_nCONNECTED,
+		.fullcharge_line = GPIO_TA_nCHG,
+		.accessory_line = GPIO_ACCESSORY_INT,
+	},
+#if defined(CONFIG_SMB347_CHARGER)
+	.set_charging_state = sec_bat_set_charging_state,
+	.get_charging_state = sec_bat_get_charging_state,
+	.set_charging_current = sec_bat_set_charging_current,
+	.get_charging_current = sec_bat_get_charging_current,
+	.get_charger_is_full = sec_bat_get_charger_is_full,
+	.get_aicl_current = sec_bat_get_aicl_current,
+	.get_input_current = sec_bat_get_input_current,
+#endif
+	.init_charger_gpio = sec_bat_gpio_init,
+	.inform_charger_connection = sec_charger_cb,
+
+#if defined(CONFIG_TARGET_LOCALE_USA)
+#if defined(CONFIG_MACH_P4NOTELTE_USA_SPR)
+	.temp_event_threshold = 70000,		/* 62c */
+	.temp_high_threshold = 48000,		/* 45c */
+	.temp_high_recovery = 43200,		/* 42c */
+	.temp_low_recovery = 0,			/* 0c */
+	.temp_low_threshold = -5000,		/* -5c */
+
+	.temp_lpm_high_threshold = 48000,	/* 45c */
+	.temp_lpm_high_recovery = 43500,	/* 42c */
+	.temp_lpm_low_recovery = 0,		/* 0c */
+	.temp_lpm_low_threshold = -3700,	/* -5c */
+#elif defined(CONFIG_MACH_P4NOTELTE_USA_VZW)
+	.temp_event_threshold = 62000,		/* 62c */
+	.temp_high_threshold = 45000,		/* 45c */
+	.temp_high_recovery = 42000,		/* 42c */
+	.temp_low_recovery = 0,			/* 0c */
+	.temp_low_threshold = -5000,		/* -5c */
+
+	.temp_lpm_high_threshold = 45000,	/* 45c */
+	.temp_lpm_high_recovery = 42000,	/* 42c */
+	.temp_lpm_low_recovery = 0,		/* 0c */
+	.temp_lpm_low_threshold = -5000,	/* -5c */
+#else
+	.temp_event_threshold = 61000,          /* 62c */
+	.temp_high_threshold = 61000,		/* 62c */
+	.temp_high_recovery = 43000,		/* 42c */
+	.temp_low_recovery = 0,			/* 0c */
+	.temp_low_threshold = -5000,		/* -5c */
+
+	.temp_lpm_high_threshold = 61000,	/* 62c */
+	.temp_lpm_high_recovery = 43000,	/* 42c */
+	.temp_lpm_low_recovery = 0,		/* 0c */
+	.temp_lpm_low_threshold = -5000,	/* -5c */
+#endif
+#elif defined(CONFIG_TARGET_LOCALE_KOR)
+#if defined(CONFIG_MACH_P4NOTELTE_KOR_SKT) || \
+	defined(CONFIG_MACH_P4NOTELTE_KOR_KT) || \
+	defined(CONFIG_MACH_P4NOTELTE_KOR_LGT)
+	.temp_high_threshold = 63000,	/* 62c */
+	.temp_high_recovery = 43000,	/* 42c */
+	.temp_low_recovery = -1000,		/* 0c */
+	.temp_low_threshold = -4000,	/* -5c */
+#else
+	.temp_high_threshold = 61400,	/* 65c */
+	.temp_high_recovery = 43500,	/* 42c */
+	.temp_low_recovery = 0,			/* 0c */
+	.temp_low_threshold = -5000,	/* -5c */
+#endif
+#else
+	.temp_high_threshold = 50000,	/* 50c */
+	.temp_high_recovery = 42000,	/* 42c */
+	.temp_low_recovery = 0,			/* 0c */
+	.temp_low_threshold = -5000,	/* -5c */
+#endif
+	.recharge_voltage = 4150,	/*4.15V */
+
+	.charge_duration = 10*60*60,	/* 10 hour */
+	.recharge_duration = 1.5*60*60,	/* 1.5 hour */
+	.check_lp_charging_boot = check_bootmode,
+	.check_jig_status = check_jig_on
+};
+
+static struct platform_device sec_battery_device = {
+	.name = "sec-battery",
+	.id = -1,
+	.dev = {
+		.platform_data = &sec_battery_platform,
+	},
+};
+#endif /* CONFIG_BATTERY_SEC_PX */
+
+#ifdef CONFIG_USB_HOST_NOTIFY
+static void px_usb_otg_power(int active);
+#define HOST_NOTIFIER_BOOSTER	px_usb_otg_power
+#define HOST_NOTIFIER_GPIO		GPIO_ACCESSORY_OUT_5V
+#define RETRY_CNT_LIMIT 100
+
+struct host_notifier_platform_data host_notifier_pdata = {
+	.ndev.name	= "usb_otg",
+	.gpio		= HOST_NOTIFIER_GPIO,
+	.booster	= HOST_NOTIFIER_BOOSTER,
+	.irq_enable = 1,
+};
+
+struct platform_device host_notifier_device = {
+	.name = "host_notifier",
+	.dev.platform_data = &host_notifier_pdata,
+};
+
+static void __init acc_chk_gpio_init(void)
+{
+	gpio_request(GPIO_ACCESSORY_EN, "GPIO_USB_OTG_EN");
+	s3c_gpio_cfgpin(GPIO_ACCESSORY_EN, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_ACCESSORY_EN, S3C_GPIO_PULL_NONE);
+	gpio_direction_output(GPIO_ACCESSORY_EN, false);
+
+	gpio_request(GPIO_ACCESSORY_OUT_5V, "gpio_acc_5v");
+	s3c_gpio_cfgpin(GPIO_ACCESSORY_OUT_5V, S3C_GPIO_SFN(0xf));
+	s3c_gpio_setpull(GPIO_ACCESSORY_OUT_5V, S3C_GPIO_PULL_NONE);
+	gpio_direction_input(GPIO_ACCESSORY_OUT_5V);
+}
+#endif
+
+#ifdef CONFIG_30PIN_CONN
+static void smdk_accessory_gpio_init(void)
+{
+	gpio_request(GPIO_ACCESSORY_INT, "accessory");
+	s3c_gpio_cfgpin(GPIO_ACCESSORY_INT, S3C_GPIO_SFN(0xf));
+	s3c_gpio_setpull(GPIO_ACCESSORY_INT, S3C_GPIO_PULL_NONE);
+	gpio_direction_input(GPIO_ACCESSORY_INT);
+
+	gpio_request(GPIO_DOCK_INT, "dock");
+	s3c_gpio_cfgpin(GPIO_DOCK_INT, S3C_GPIO_SFN(0xf));
+	s3c_gpio_setpull(GPIO_DOCK_INT, S3C_GPIO_PULL_NONE);
+	gpio_direction_input(GPIO_DOCK_INT);
+}
+
+void smdk_accessory_power(u8 token, bool active)
+{
+	int gpio_acc_en = 0;
+	int try_cnt = 0;
+	int gpio_acc_5v = 0;
+	static bool enable;
+	static u8 acc_en_token;
+
+	/*
+		token info
+		0 : power off,
+		1 : Keyboard dock
+		2 : USB
+	*/
+	gpio_acc_en = GPIO_ACCESSORY_EN;
+	gpio_acc_5v = GPIO_ACCESSORY_OUT_5V;
+
+	gpio_request(gpio_acc_en, "GPIO_ACCESSORY_EN");
+	s3c_gpio_cfgpin(gpio_acc_en, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(gpio_acc_en, S3C_GPIO_PULL_NONE);
+
+	if (active) {
+		if (acc_en_token) {
+			pr_info("Board : Keyboard dock is connected.\n");
+			gpio_direction_output(gpio_acc_en, 0);
+			msleep(100);
+		}
+
+		acc_en_token |= (1 << token);
+		enable = true;
+		gpio_direction_output(gpio_acc_en, 1);
+		usleep_range(2000, 2000);
+		if (0 != gpio_acc_5v) {
+			/* prevent the overcurrent */
+			while (!gpio_get_value(gpio_acc_5v)) {
+				gpio_direction_output(gpio_acc_en, 0);
+				msleep(20);
+				gpio_direction_output(gpio_acc_en, 1);
+				if (try_cnt > 10) {
+					pr_err("[acc] failed to enable the accessory_en");
+					break;
+				} else
+					try_cnt++;
+			}
+
+		} else
+			pr_info("[ACC] gpio_acc_5v is not set\n");
+
+	} else {
+		if (0 == token) {
+			gpio_direction_output(gpio_acc_en, 0);
+			enable = false;
+		} else {
+			acc_en_token &= ~(1 << token);
+			if (0 == acc_en_token) {
+				gpio_direction_output(gpio_acc_en, 0);
+				enable = false;
+			}
+		}
+	}
+	gpio_free(gpio_acc_en);
+	pr_info("Board : %s (%d,%d) %s\n", __func__,
+		token, active, enable ? "on" : "off");
+}
+
+static int smdk_get_acc_state(void)
+{
+	return gpio_get_value(GPIO_DOCK_INT);
+}
+
+static int smdk_get_dock_state(void)
+{
+	return gpio_get_value(GPIO_ACCESSORY_INT);
+}
+
+#ifdef CONFIG_SEC_KEYBOARD_DOCK
+static struct sec_keyboard_callbacks *keyboard_callbacks;
+static int check_sec_keyboard_dock(bool attached)
+{
+	if (keyboard_callbacks && keyboard_callbacks->check_keyboard_dock)
+		return keyboard_callbacks->
+			check_keyboard_dock(keyboard_callbacks, attached);
+	return 0;
+}
+
+/* call 30pin func. from sec_keyboard */
+static struct sec_30pin_callbacks *s30pin_callbacks;
+static int noti_sec_univ_kbd_dock(unsigned int code)
+{
+	if (s30pin_callbacks && s30pin_callbacks->noti_univ_kdb_dock)
+		return s30pin_callbacks->
+			noti_univ_kdb_dock(s30pin_callbacks, code);
+	return 0;
+}
+
+static void check_uart_path(bool en)
+{
+	int gpio_uart_sel;
+#if (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2)
+	int gpio_uart_sel2;
+#endif /* (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2) */
+
+	gpio_uart_sel = GPIO_UART_SEL;
+#if (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2)
+	gpio_uart_sel2 = GPIO_UART_SEL2;
+
+	if (en) {
+		gpio_direction_output(gpio_uart_sel, 1);
+		gpio_direction_output(gpio_uart_sel2, 1);
+		printk(KERN_DEBUG "[Keyboard] uart_sel : 1, 1\n");
+	} else {
+		gpio_direction_output(gpio_uart_sel, 1);
+		gpio_direction_output(gpio_uart_sel2, 0);
+		printk(KERN_DEBUG "[Keyboard] uart_sel : 0, 0\n");
+	}
+#else /* (CONFIG_SAMSUNG_ANALOG_UART_SWITCH != 2) */
+	if (en)
+		gpio_direction_output(gpio_uart_sel, 1);
+	else
+		gpio_direction_output(gpio_uart_sel, 0);
+
+	printk(KERN_DEBUG "[Keyboard] uart_sel : %d\n",
+		gpio_get_value(gpio_uart_sel));
+#endif /* (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2) */
+}
+
+static void sec_30pin_register_cb(struct sec_30pin_callbacks *cb)
+{
+	s30pin_callbacks = cb;
+}
+
+static void sec_keyboard_register_cb(struct sec_keyboard_callbacks *cb)
+{
+	keyboard_callbacks = cb;
+}
+
+static struct sec_keyboard_platform_data kbd_pdata = {
+	.accessory_irq_gpio = GPIO_ACCESSORY_INT,
+	.acc_power = smdk_accessory_power,
+	.check_uart_path = check_uart_path,
+	.register_cb = sec_keyboard_register_cb,
+	.noti_univ_kbd_dock = noti_sec_univ_kbd_dock,
+	.wakeup_key = NULL,
+};
+
+static struct platform_device sec_keyboard = {
+	.name	= "sec_keyboard",
+	.id	= -1,
+	.dev = {
+		.platform_data = &kbd_pdata,
+	}
+};
+#endif
+
+#ifdef CONFIG_MOTOR_DRV_DRV2603
+static void drv2603_motor_init(void)
+{
+	gpio_request(GPIO_MOTOR_EN, "TSP_LDO_ON");
+	gpio_direction_output(GPIO_MOTOR_EN, 0);
+	gpio_export(GPIO_MOTOR_EN, 0);
+}
+
+static int drv2603_motor_en(bool en)
+{
+	return gpio_direction_output(GPIO_MOTOR_EN, en);
+}
+
+static struct drv2603_vibrator_platform_data motor_pdata = {
+	.gpio_en = drv2603_motor_en,
+	.max_timeout = 10000,
+	.pwm_id = 0,
+	.pwm_duty = 38000,
+	.pwm_period = 38100,
+};
+
+static struct platform_device sec_motor = {
+	.name	= "drv2603_vibrator",
+	.id	= -1,
+	.dev = {
+		.platform_data = &motor_pdata,
+	}
+};
+#endif
+
+#ifdef CONFIG_USB_HOST_NOTIFY
+static void px_usb_otg_power(int active)
+{
+	smdk_accessory_power(2, active);
+}
+
+static void px_usb_otg_en(int active)
+{
+	pr_info("otg %s : %d\n", __func__, active);
+
+	usb_switch_lock();
+
+	if (active) {
+
+#ifdef CONFIG_USB_EHCI_S5P
+		pm_runtime_get_sync(&s5p_device_ehci.dev);
+#endif
+#ifdef CONFIG_USB_OHCI_S5P
+		pm_runtime_get_sync(&s5p_device_ohci.dev);
+#endif
+		usb_switch_set_path(USB_PATH_AP);
+		px_usb_otg_power(1);
+
+		msleep(500);
+
+		host_notifier_pdata.ndev.mode = NOTIFY_HOST_MODE;
+		if (host_notifier_pdata.usbhostd_start)
+			host_notifier_pdata.usbhostd_start();
+	} else {
+
+#ifdef CONFIG_USB_OHCI_S5P
+		pm_runtime_put_sync(&s5p_device_ohci.dev);
+#endif
+#ifdef CONFIG_USB_EHCI_S5P
+		pm_runtime_put_sync(&s5p_device_ehci.dev);
+#endif
+
+		usb_switch_clr_path(USB_PATH_AP);
+		host_notifier_pdata.ndev.mode = NOTIFY_NONE_MODE;
+		if (host_notifier_pdata.usbhostd_stop)
+			host_notifier_pdata.usbhostd_stop();
+		px_usb_otg_power(0);
+	}
+
+	usb_switch_unlock();
+}
+#endif
+
+struct acc_con_platform_data acc_con_pdata = {
+	.otg_en = px_usb_otg_en,
+	.acc_power = smdk_accessory_power,
+	.usb_ldo_en = NULL,
+	.get_acc_state = smdk_get_acc_state,
+	.get_dock_state = smdk_get_dock_state,
+#ifdef CONFIG_SEC_KEYBOARD_DOCK
+	.check_keyboard = check_sec_keyboard_dock,
+#endif
+	.register_cb = sec_30pin_register_cb,
+	.accessory_irq_gpio = GPIO_ACCESSORY_INT,
+	.dock_irq_gpio = GPIO_DOCK_INT,
+#if defined(CONFIG_SAMSUNG_MHL_9290)
+	.mhl_irq_gpio = GPIO_MHL_INT,
+	.hdmi_hpd_gpio = GPIO_HDMI_HPD,
+#endif
+};
+struct platform_device sec_device_connector = {
+	.name = "acc_con",
+	.id = -1,
+	.dev.platform_data = &acc_con_pdata,
+};
+#endif
+
+#ifdef CONFIG_VIDEO_FIMG2D
+static struct fimg2d_platdata fimg2d_data __initdata = {
+	.hw_ver = 0x41,
+	.parent_clkname = "mout_g2d0",
+	.clkname = "sclk_fimg2d",
+	.gate_clkname = "fimg2d",
+	.clkrate = 199 * 1000000,	/* 160 Mhz */
+};
+#endif
+
+#ifdef CONFIG_EXYNOS_C2C
+struct exynos_c2c_platdata smdk4212_c2c_pdata = {
+	.setup_gpio	= NULL,
+	.shdmem_addr	= C2C_SHAREDMEM_BASE,
+	.shdmem_size	= C2C_MEMSIZE_64,
+	.ap_sscm_addr	= NULL,
+	.cp_sscm_addr	= NULL,
+	.rx_width	= C2C_BUSWIDTH_16,
+	.tx_width	= C2C_BUSWIDTH_16,
+	.clk_opp100	= 400,
+	.clk_opp50	= 266,
+	.clk_opp25	= 0,
+	.default_opp_mode	= C2C_OPP50,
+	.get_c2c_state	= NULL,
+};
+#endif
+/* BUSFREQ to control memory/bus */
+static struct device_domain busfreq;
+
+static struct platform_device exynos4_busfreq = {
+	.id = -1,
+	.name = "exynos-busfreq",
+};
+
+#if defined(CONFIG_SENSORS_BH1721) || defined(CONFIG_SENSORS_AL3201)
+static struct i2c_gpio_platform_data i2c9_platdata = {
+	.sda_pin	= GPIO_PS_ALS_SDA_28V,
+	.scl_pin	= GPIO_PS_ALS_SCL_28V,
+	.udelay	= 2, /* 250KHz */
+	.sda_is_open_drain	= 0,
+	.scl_is_open_drain	= 0,
+	.scl_is_output_only = 0,
+};
+
+static struct platform_device s3c_device_i2c9 = {
+	.name	= "i2c-gpio",
+	.id	= 9,
+	.dev.platform_data	= &i2c9_platdata,
+};
+#endif
+
+#ifdef CONFIG_SENSORS_AK8975C
+static struct i2c_gpio_platform_data i2c10_platdata = {
+	.sda_pin	= GPIO_MSENSOR_SDA_18V,
+	.scl_pin	= GPIO_MSENSOR_SCL_18V,
+	.udelay	= 2, /* 250KHz */
+	.sda_is_open_drain	= 0,
+	.scl_is_open_drain	= 0,
+	.scl_is_output_only = 0,
+};
+
+static struct platform_device s3c_device_i2c10 = {
+	.name	= "i2c-gpio",
+	.id	= 10,
+	.dev.platform_data	= &i2c10_platdata,
+};
+#endif
+
+#ifdef CONFIG_SENSORS_AK8963C
+static struct i2c_gpio_platform_data i2c10_platdata = {
+	.sda_pin	= GPIO_MSENSOR_SDA_18V,
+	.scl_pin	= GPIO_MSENSOR_SCL_18V,
+	.udelay	= 2, /* 250KHz */
+	.sda_is_open_drain	= 0,
+	.scl_is_open_drain	= 0,
+	.scl_is_output_only = 0,
+};
+
+static struct platform_device s3c_device_i2c10 = {
+	.name	= "i2c-gpio",
+	.id	= 10,
+	.dev.platform_data	= &i2c10_platdata,
+};
+#endif
+
+#ifdef CONFIG_SENSORS_LPS331
+static struct i2c_gpio_platform_data i2c11_platdata = {
+	.sda_pin	= GPIO_BSENSE_SDA_18V,
+	.scl_pin	= GPIO_BSENSE_SCL_18V,
+	.udelay	= 2, /* 250KHz */
+	.sda_is_open_drain	= 0,
+	.scl_is_open_drain	= 0,
+	.scl_is_output_only = 0,
+};
+
+static struct platform_device s3c_device_i2c11 = {
+	.name			= "i2c-gpio",
+	.id	= 11,
+	.dev.platform_data	= &i2c11_platdata,
+};
+#endif
+
+/* IR_LED */
+#ifdef CONFIG_IR_REMOCON_GPIO
+
+static struct platform_device ir_remote_device = {
+	.name = "ir_rc",
+	.id = 0,
+	.dev = {
+	},
+};
+
+static void ir_rc_init_hw(void)
+{
+	s3c_gpio_cfgpin(GPIO_IRDA_CONTROL, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_IRDA_CONTROL, S3C_GPIO_PULL_NONE);
+	gpio_set_value(GPIO_IRDA_CONTROL, 0);
+}
+
+#endif
+/* IR_LED */
+
+#ifdef CONFIG_SEC_WATCHDOG_RESET
+static struct platform_device watchdog_reset_device = {
+	.name = "watchdog-reset",
+	.id = -1,
+};
+#endif
+
+#ifdef CONFIG_CORESIGHT_ETM
+
+#define CORESIGHT_PHYS_BASE		0x10880000
+#define CORESIGHT_ETB_PHYS_BASE		(CORESIGHT_PHYS_BASE + 0x1000)
+#define CORESIGHT_TPIU_PHYS_BASE	(CORESIGHT_PHYS_BASE + 0x3000)
+#define CORESIGHT_FUNNEL_PHYS_BASE	(CORESIGHT_PHYS_BASE + 0x4000)
+#define CORESIGHT_ETM_PHYS_BASE		(CORESIGHT_PHYS_BASE + 0x1C000)
+
+static struct resource coresight_etb_resources[] = {
+	{
+		.start = CORESIGHT_ETB_PHYS_BASE,
+		.end   = CORESIGHT_ETB_PHYS_BASE + SZ_4K - 1,
+		.flags = IORESOURCE_MEM,
+	},
+};
+
+struct platform_device coresight_etb_device = {
+	.name          = "coresight_etb",
+	.id            = -1,
+	.num_resources = ARRAY_SIZE(coresight_etb_resources),
+	.resource      = coresight_etb_resources,
+};
+
+static struct resource coresight_tpiu_resources[] = {
+	{
+		.start = CORESIGHT_TPIU_PHYS_BASE,
+		.end   = CORESIGHT_TPIU_PHYS_BASE + SZ_4K - 1,
+		.flags = IORESOURCE_MEM,
+	},
+};
+
+struct platform_device coresight_tpiu_device = {
+	.name          = "coresight_tpiu",
+	.id            = -1,
+	.num_resources = ARRAY_SIZE(coresight_tpiu_resources),
+	.resource      = coresight_tpiu_resources,
+};
+
+static struct resource coresight_funnel_resources[] = {
+	{
+		.start = CORESIGHT_FUNNEL_PHYS_BASE,
+		.end   = CORESIGHT_FUNNEL_PHYS_BASE + SZ_4K - 1,
+		.flags = IORESOURCE_MEM,
+	},
+};
+
+struct platform_device coresight_funnel_device = {
+	.name          = "coresight_funnel",
+	.id            = -1,
+	.num_resources = ARRAY_SIZE(coresight_funnel_resources),
+	.resource      = coresight_funnel_resources,
+};
+
+static struct resource coresight_etm_resources[] = {
+	{
+		.start = CORESIGHT_ETM_PHYS_BASE,
+		.end   = CORESIGHT_ETM_PHYS_BASE + (SZ_4K * 4) - 1,
+		.flags = IORESOURCE_MEM,
+	},
+};
+
+struct platform_device coresight_etm_device = {
+	.name          = "coresight_etm",
+	.id            = -1,
+	.num_resources = ARRAY_SIZE(coresight_etm_resources),
+	.resource      = coresight_etm_resources,
+};
+
+#endif
+
+static struct platform_device *midas_devices[] __initdata = {
+#ifdef CONFIG_SEC_WATCHDOG_RESET
+	&watchdog_reset_device,
+#endif
+#ifdef CONFIG_ANDROID_RAM_CONSOLE
+	&ram_console_device,
+#endif
+	/* Samsung Power Domain */
+	&exynos4_device_pd[PD_MFC],
+	&exynos4_device_pd[PD_G3D],
+	&exynos4_device_pd[PD_LCD0],
+	&exynos4_device_pd[PD_CAM],
+	&exynos4_device_pd[PD_TV],
+	&exynos4_device_pd[PD_GPS],
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+	&exynos4_device_pd[PD_ISP],
+#endif
+	&exynos4_device_pd[PD_GPS_ALIVE],
+	/* legacy fimd */
+#ifdef CONFIG_FB_S5P
+	&s3c_device_fb,
+#ifdef CONFIG_FB_S5P_LMS501KF03
+	&s3c_device_spi_gpio,
+#endif
+#endif
+
+#ifdef CONFIG_FB_S5P_MDNIE
+	&mdnie_device,
+#endif
+
+#ifdef CONFIG_HAVE_PWM
+	&s3c_device_timer[0],
+	&s3c_device_timer[1],
+	&s3c_device_timer[2],
+	&s3c_device_timer[3],
+#endif
+
+#ifdef CONFIG_BATTERY_SEC_PX
+	&sec_battery_device,
+#endif
+
+#ifdef CONFIG_SND_SOC_WM8994
+	&vbatt_device,
+#endif
+
+	&s3c_device_wdt,
+	&s3c_device_rtc,
+
+	&s3c_device_i2c0,
+	&s3c_device_i2c1,
+#ifdef CONFIG_S3C_DEV_I2C3
+	&s3c_device_i2c3,
+#endif
+#ifdef CONFIG_S3C_DEV_I2C4
+	&s3c_device_i2c4,
+#endif
+	/* &s3c_device_i2c5, */
+#ifdef CONFIG_S3C_DEV_I2C6
+	&s3c_device_i2c6,
+#endif
+	&s3c_device_i2c7,
+#ifdef CONFIG_S3C_DEV_I2C8
+	&s3c_device_i2c8,
+#endif
+	/* &s3c_device_i2c9, */
+#ifdef CONFIG_SENSORS_AK8975C
+	&s3c_device_i2c10,
+#endif
+#ifdef CONFIG_SENSORS_AK8963C
+	&s3c_device_i2c10,
+#endif
+#ifdef CONFIG_SENSORS_LPS331
+	&s3c_device_i2c11,
+#endif
+	/* &s3c_device_i2c12, */
+#ifdef CONFIG_SMB347_CHARGER
+	&s3c_device_i2c13,
+#endif
+#ifdef CONFIG_BATTERY_MAX17042_FUELGAUGE_PX
+	&s3c_device_i2c14,
+#endif
+
+#ifdef CONFIG_SAMSUNG_MHL
+	&s3c_device_i2c15,
+	&s3c_device_i2c16,
+#endif
+
+#ifdef CONFIG_LEDS_AN30259A
+	&s3c_device_i2c21,
+#endif
+
+#ifdef CONFIG_IR_REMOCON_MC96
+	&s3c_device_i2c22,
+#endif
+
+#ifdef CONFIG_FB_S5P_NT71391
+	&s3c_device_i2c23,
+#endif
+
+#ifdef CONFIG_BACKLIGHT_LP855X
+	&s3c_device_i2c24,
+#endif
+
+#if defined CONFIG_USB_EHCI_S5P && !defined CONFIG_LINK_DEVICE_HSIC
+	&s5p_device_ehci,
+#endif
+#if defined CONFIG_USB_OHCI_S5P && !defined CONFIG_LINK_DEVICE_HSIC
+	&s5p_device_ohci,
+#endif
+#ifdef CONFIG_USB_GADGET
+	&s3c_device_usbgadget,
+#endif
+#ifdef CONFIG_USB_ANDROID_RNDIS
+	&s3c_device_rndis,
+#endif
+#if defined(CONFIG_USB_ANDROID) || defined(CONFIG_USB_G_ANDROID)
+	&s3c_device_android_usb,
+	&s3c_device_usb_mass_storage,
+#endif
+#ifdef CONFIG_EXYNOS4_DEV_MSHC
+	&s3c_device_mshci,
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC
+	&s3c_device_hsmmc0,
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC1
+	&s3c_device_hsmmc1,
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC2
+	&s3c_device_hsmmc2,
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC3
+	&s3c_device_hsmmc3,
+#endif
+
+#ifdef CONFIG_SND_SAMSUNG_AC97
+	&exynos_device_ac97,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_I2S
+	&exynos_device_i2s0,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_PCM
+	&exynos_device_pcm0,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_SPDIF
+	&exynos_device_spdif,
+#endif
+#if defined(CONFIG_SND_SAMSUNG_RP) || defined(CONFIG_SND_SAMSUNG_ALP)
+	&exynos_device_srp,
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+	&exynos4_device_fimc_is,
+#endif
+#ifdef CONFIG_FB_S5P_LD9040
+	&ld9040_spi_gpio,
+#endif
+#ifdef CONFIG_VIDEO_TVOUT
+	&s5p_device_tvout,
+	&s5p_device_cec,
+	&s5p_device_hpd,
+#endif
+#ifdef CONFIG_FB_S5P_EXTDSP
+	&s3c_device_extdsp,
+#endif
+#ifdef CONFIG_VIDEO_FIMC
+	&s3c_device_fimc0,
+	&s3c_device_fimc1,
+	&s3c_device_fimc2,
+	&s3c_device_fimc3,
+/* CONFIG_VIDEO_SAMSUNG_S5P_FIMC is the feature for mainline */
+#elif defined(CONFIG_VIDEO_SAMSUNG_S5P_FIMC)
+	&s5p_device_fimc0,
+	&s5p_device_fimc1,
+	&s5p_device_fimc2,
+	&s5p_device_fimc3,
+#endif
+#if defined(CONFIG_VIDEO_FIMC_MIPI)
+	&s3c_device_csis0,
+	&s3c_device_csis1,
+#endif
+#if defined(CONFIG_VIDEO_MFC5X) || defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+	&s5p_device_mfc,
+#endif
+#ifdef CONFIG_S5P_SYSTEM_MMU
+	&SYSMMU_PLATDEV(g2d_acp),
+	&SYSMMU_PLATDEV(fimc0),
+	&SYSMMU_PLATDEV(fimc1),
+	&SYSMMU_PLATDEV(fimc2),
+	&SYSMMU_PLATDEV(fimc3),
+	&SYSMMU_PLATDEV(jpeg),
+	&SYSMMU_PLATDEV(mfc_l),
+	&SYSMMU_PLATDEV(mfc_r),
+	&SYSMMU_PLATDEV(tv),
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+	&SYSMMU_PLATDEV(is_isp),
+	&SYSMMU_PLATDEV(is_drc),
+	&SYSMMU_PLATDEV(is_fd),
+	&SYSMMU_PLATDEV(is_cpu),
+#endif
+#endif
+#ifdef CONFIG_ION_EXYNOS
+	&exynos_device_ion,
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_LITE
+	&exynos_device_flite0,
+	&exynos_device_flite1,
+#endif
+#ifdef CONFIG_VIDEO_FIMG2D
+	&s5p_device_fimg2d,
+#endif
+
+#ifdef CONFIG_VIDEO_JPEG_V2X
+	&s5p_device_jpeg,
+#endif
+	&samsung_asoc_dma,
+#ifndef CONFIG_SND_SOC_SAMSUNG_USE_DMA_WRAPPER
+	&samsung_asoc_idma,
+#endif
+#ifdef CONFIG_EXYNOS_C2C
+	&exynos_device_c2c,
+#endif
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+#if defined(CONFIG_VIDEO_S5C73M3_SPI)
+	&exynos_device_spi1,
+#endif
+#if defined(CONFIG_PHONE_IPC_SPI)
+	&exynos_device_spi2,
+	&ipc_spi_device,
+#elif defined(CONFIG_TDMB) || defined(CONFIG_TDMB_MODULE)
+	&exynos_device_spi2,
+#endif
+#endif
+
+#ifdef CONFIG_BT_BCM4334
+	&bcm4334_bluetooth_device,
+#endif
+#ifdef CONFIG_S5P_DEV_ACE
+	&s5p_device_ace,
+#endif
+	&exynos4_busfreq,
+#ifdef CONFIG_USB_HOST_NOTIFY
+	&host_notifier_device,
+#endif
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+	&s5p_device_tmu,
+#endif
+#ifdef CONFIG_30PIN_CONN
+	&sec_device_connector,
+#ifdef CONFIG_SEC_KEYBOARD_DOCK
+	&sec_keyboard,
+#endif
+#ifdef CONFIG_MOTOR_DRV_DRV2603
+	&sec_motor,
+#endif
+#endif
+#if defined(CONFIG_IR_REMOCON_GPIO)
+/* IR_LED */
+	&ir_remote_device,
+/* IR_LED */
+#endif
+
+#ifdef CONFIG_CORESIGHT_ETM
+	&coresight_etb_device,
+	&coresight_tpiu_device,
+	&coresight_funnel_device,
+	&coresight_etm_device,
+#endif
+};
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+/* below temperature base on the celcius degree */
+struct s5p_platform_tmu midas_tmu_data __initdata = {
+	.ts = {
+		.stop_1st_throttle  = 78,
+		.start_1st_throttle = 80,
+		.stop_2nd_throttle  = 87,
+		.start_2nd_throttle = 103,
+		.start_tripping	    = 110, /* temp to do tripping */
+		.start_emergency    = 120, /* To protect chip,forcely kernel panic */
+		.stop_mem_throttle  = 80,
+		.start_mem_throttle = 85,
+		.stop_tc  = 13,
+		.start_tc = 10,
+	},
+	.cpufreq = {
+		.limit_1st_throttle  = 800000, /* 800MHz in KHz order */
+		.limit_2nd_throttle  = 200000, /* 200MHz in KHz order */
+	},
+	.temp_compensate = {
+		.arm_volt = 925000, /* vdd_arm in uV for temp compensation */
+		.bus_volt = 900000, /* vdd_bus in uV for temp compensation */
+		.g3d_volt = 900000, /* vdd_g3d in uV for temp compensation */
+	},
+};
+#endif
+
+#if defined CONFIG_USB_OHCI_S5P && defined CONFIG_LINK_DEVICE_HSIC
+static int __init s5p_ohci_device_initcall(void)
+{
+	return platform_device_register(&s5p_device_ohci);
+}
+late_initcall(s5p_ohci_device_initcall);
+#endif
+#if defined CONFIG_USB_EHCI_S5P && defined CONFIG_LINK_DEVICE_HSIC
+static int __init s5p_ehci_device_initcall(void)
+{
+	return platform_device_register(&s5p_device_ehci);
+}
+late_initcall(s5p_ehci_device_initcall);
+#endif
+
+#if defined(CONFIG_VIDEO_TVOUT)
+static struct s5p_platform_hpd hdmi_hpd_data __initdata = {
+
+};
+static struct s5p_platform_cec hdmi_cec_data __initdata = {
+
+};
+#endif
+
+#if defined(CONFIG_CMA)
+static void __init exynos4_reserve_mem(void)
+{
+	static struct cma_region regions[] = {
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+		{
+			.name = "fimc_is",
+			.size = CONFIG_VIDEO_EXYNOS_MEMSIZE_FIMC_IS * SZ_1K,
+			{
+				.alignment = 1 << 26,
+			},
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMD
+		{
+			.name = "fimd",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMD * SZ_1K,
+			{
+				.alignment = 1 << 20,
+			},
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC0
+		{
+			.name = "fimc0",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC0 * SZ_1K,
+			.start = 0
+		},
+#endif
+#if !defined(CONFIG_EXYNOS_CONTENT_PATH_PROTECTION) && \
+	defined(CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC0)
+		{
+			.name = "mfc0",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC0 * SZ_1K,
+			{
+				.alignment = 1 << 17,
+			},
+			.start = 0,
+		},
+#endif
+#if !defined(CONFIG_EXYNOS_CONTENT_PATH_PROTECTION) && \
+	defined(CONFIG_ION_EXYNOS_CONTIGHEAP_SIZE)
+		{
+			.name	= "ion",
+			.size	= CONFIG_ION_EXYNOS_CONTIGHEAP_SIZE * SZ_1K,
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC
+		{
+			.name = "mfc",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC * SZ_1K,
+			{
+				.alignment = 1 << 17,
+			},
+			.start = 0
+		},
+#endif
+#if !defined(CONFIG_EXYNOS_CONTENT_PATH_PROTECTION) && \
+	defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+		{
+			.name		= "b2",
+			.size		= 32 << 20,
+			{ .alignment	= 128 << 10 },
+		},
+		{
+			.name		= "b1",
+			.size		= 32 << 20,
+			{ .alignment	= 128 << 10 },
+		},
+		{
+			.name		= "fw",
+			.size		= 1 << 20,
+			{ .alignment	= 128 << 10 },
+		},
+#endif
+#if (CONFIG_VIDEO_SAMSUNG_MEMSIZE_JPEG > 0)
+		{
+			.name = "jpeg",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_JPEG * SZ_1K,
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_AUDIO_SAMSUNG_MEMSIZE_SRP
+		{
+			.name = "srp",
+			.size = CONFIG_AUDIO_SAMSUNG_MEMSIZE_SRP * SZ_1K,
+			.start = 0,
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMG2D
+		{
+			.name = "fimg2d",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMG2D * SZ_1K,
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC1
+		{
+			.name = "fimc1",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC1 * SZ_1K,
+			.start = 0x65c00000,
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC1
+		{
+			.name = "mfc1",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC1 * SZ_1K,
+			{
+				.alignment = 1 << 26,
+			},
+			.start = 0x64000000,
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC_NORMAL
+		{
+			.name = "mfc-normal",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC_NORMAL * SZ_1K,
+			.start = 0x64000000,
+		},
+#endif
+		{
+			.size = 0
+		},
+	};
+#ifdef CONFIG_EXYNOS_CONTENT_PATH_PROTECTION
+	static struct cma_region regions_secure[] = {
+#ifdef CONFIG_ION_EXYNOS_CONTIGHEAP_SIZE
+		{
+			.name	= "ion",
+			.size	= CONFIG_ION_EXYNOS_CONTIGHEAP_SIZE * SZ_1K,
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC_SECURE
+		{
+			.name = "mfc-secure",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC_SECURE * SZ_1K,
+		},
+#endif
+		{
+			.name = "sectbl",
+			.size = SZ_1M,
+		},
+		{
+			.size = 0
+		},
+	};
+#else /* !CONFIG_EXYNOS_CONTENT_PATH_PROTECTION */
+	struct cma_region *regions_secure = NULL;
+#endif
+
+	static const char map[] __initconst =
+#ifdef CONFIG_EXYNOS_C2C
+		"samsung-c2c=c2c_shdmem;"
+#endif
+		"s3cfb.0=fimd;exynos4-fb.0=fimd;"
+		"s3c-fimc.0=fimc0;s3c-fimc.1=fimc1;s3c-fimc.2=fimc2;s3c-fimc.3=fimc3;"
+		"exynos4210-fimc.0=fimc0;exynos4210-fimc.1=fimc1;exynos4210-fimc.2=fimc2;exynos4210-fimc.3=fimc3;"
+#ifdef CONFIG_ION_EXYNOS
+		"ion-exynos=ion;"
+#endif
+#ifdef CONFIG_VIDEO_MFC5X
+		"s3c-mfc/A=mfc0,mfc-secure;"
+		"s3c-mfc/B=mfc1,mfc-normal;"
+		"s3c-mfc/AB=mfc;"
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_S5P_MFC
+		"s5p-mfc/f=fw;"
+		"s5p-mfc/a=b1;"
+		"s5p-mfc/b=b2;"
+#endif
+		"samsung-rp=srp;"
+#if (CONFIG_VIDEO_SAMSUNG_MEMSIZE_JPEG > 0)
+		"s5p-jpeg=jpeg;"
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+		"exynos4-fimc-is=fimc_is;"
+#endif
+		"s5p-fimg2d=fimg2d;"
+#ifdef CONFIG_EXYNOS_CONTENT_PATH_PROTECTION
+		"s5p-smem/sectbl=sectbl;"
+#endif
+		"s5p-smem/mfc=mfc-secure;"
+		"s5p-smem/fimc=ion;"
+		"s5p-smem/mfc-shm=mfc-normal;"
+		"s5p-smem/fimd=fimd;"
+		"s5p-smem/fimc0=fimc0;";
+
+		s5p_cma_region_reserve(regions, regions_secure, 0, map);
+}
+#else
+static inline void exynos4_reserve_mem(void)
+{
+}
+#endif
+
+#ifdef CONFIG_BACKLIGHT_PWM
+/* LCD Backlight data */
+static struct samsung_bl_gpio_info smdk4212_bl_gpio_info = {
+	.no = EXYNOS4_GPD0(1),
+	.func = S3C_GPIO_SFN(2),
+};
+
+static struct platform_pwm_backlight_data smdk4212_bl_data = {
+	.pwm_id = 1,
+#ifdef CONFIG_FB_S5P_LMS501KF03
+	.pwm_period_ns = 1000,
+#endif
+};
+#endif
+
+static void __init midas_map_io(void)
+{
+	clk_xusbxti.rate = 24000000;
+	s5p_init_io(NULL, 0, S5P_VA_CHIPID);
+	s3c24xx_init_clocks(24000000);
+	s3c24xx_init_uarts(smdk4212_uartcfgs, ARRAY_SIZE(smdk4212_uartcfgs));
+
+#if defined(CONFIG_S5P_MEM_CMA)
+	exynos4_reserve_mem();
+#endif
+
+	/* as soon as INFORM6 is visible, sec_debug is ready to run */
+	sec_debug_init();
+}
+
+static void __init exynos_sysmmu_init(void)
+{
+	ASSIGN_SYSMMU_POWERDOMAIN(fimc0, &exynos4_device_pd[PD_CAM].dev);
+	ASSIGN_SYSMMU_POWERDOMAIN(fimc1, &exynos4_device_pd[PD_CAM].dev);
+	ASSIGN_SYSMMU_POWERDOMAIN(fimc2, &exynos4_device_pd[PD_CAM].dev);
+	ASSIGN_SYSMMU_POWERDOMAIN(fimc3, &exynos4_device_pd[PD_CAM].dev);
+	ASSIGN_SYSMMU_POWERDOMAIN(jpeg, &exynos4_device_pd[PD_CAM].dev);
+
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC) || defined(CONFIG_VIDEO_MFC5X)
+	ASSIGN_SYSMMU_POWERDOMAIN(mfc_l, &exynos4_device_pd[PD_MFC].dev);
+	ASSIGN_SYSMMU_POWERDOMAIN(mfc_r, &exynos4_device_pd[PD_MFC].dev);
+#endif
+	ASSIGN_SYSMMU_POWERDOMAIN(tv, &exynos4_device_pd[PD_TV].dev);
+#ifdef CONFIG_VIDEO_FIMG2D
+	sysmmu_set_owner(&SYSMMU_PLATDEV(g2d_acp).dev, &s5p_device_fimg2d.dev);
+#endif
+#ifdef CONFIG_VIDEO_MFC5X
+	sysmmu_set_owner(&SYSMMU_PLATDEV(mfc_l).dev, &s5p_device_mfc.dev);
+	sysmmu_set_owner(&SYSMMU_PLATDEV(mfc_r).dev, &s5p_device_mfc.dev);
+#endif
+#ifdef CONFIG_VIDEO_FIMC
+	sysmmu_set_owner(&SYSMMU_PLATDEV(fimc0).dev, &s3c_device_fimc0.dev);
+	sysmmu_set_owner(&SYSMMU_PLATDEV(fimc1).dev, &s3c_device_fimc1.dev);
+	sysmmu_set_owner(&SYSMMU_PLATDEV(fimc2).dev, &s3c_device_fimc2.dev);
+	sysmmu_set_owner(&SYSMMU_PLATDEV(fimc3).dev, &s3c_device_fimc3.dev);
+#endif
+#ifdef CONFIG_VIDEO_TVOUT
+	sysmmu_set_owner(&SYSMMU_PLATDEV(tv).dev, &s5p_device_tvout.dev);
+#endif
+#ifdef CONFIG_VIDEO_JPEG_V2X
+	sysmmu_set_owner(&SYSMMU_PLATDEV(jpeg).dev, &s5p_device_jpeg.dev);
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+	ASSIGN_SYSMMU_POWERDOMAIN(is_isp, &exynos4_device_pd[PD_ISP].dev);
+	ASSIGN_SYSMMU_POWERDOMAIN(is_drc, &exynos4_device_pd[PD_ISP].dev);
+	ASSIGN_SYSMMU_POWERDOMAIN(is_fd, &exynos4_device_pd[PD_ISP].dev);
+	ASSIGN_SYSMMU_POWERDOMAIN(is_cpu, &exynos4_device_pd[PD_ISP].dev);
+
+	sysmmu_set_owner(&SYSMMU_PLATDEV(is_isp).dev,
+		&exynos4_device_fimc_is.dev);
+	sysmmu_set_owner(&SYSMMU_PLATDEV(is_drc).dev,
+		&exynos4_device_fimc_is.dev);
+	sysmmu_set_owner(&SYSMMU_PLATDEV(is_fd).dev,
+		&exynos4_device_fimc_is.dev);
+	sysmmu_set_owner(&SYSMMU_PLATDEV(is_cpu).dev,
+		&exynos4_device_fimc_is.dev);
+#endif
+}
+
+#ifdef CONFIG_FB_S5P_EXTDSP
+struct platform_device s3c_device_extdsp = {
+	.name		= "s3cfb_extdsp",
+	.id		= 0,
+};
+
+static struct s3cfb_extdsp_lcd dummy_buffer = {
+	.width = 1920,
+	.height = 1080,
+	.bpp = 16,
+};
+
+static struct s3c_platform_fb default_extdsp_data __initdata = {
+	.hw_ver		= 0x70,
+	.nr_wins	= 1,
+	.default_win	= 0,
+	.swap		= FB_SWAP_WORD | FB_SWAP_HWORD,
+	.lcd		= &dummy_buffer
+};
+
+void __init s3cfb_extdsp_set_platdata(struct s3c_platform_fb *pd)
+{
+	struct s3c_platform_fb *npd;
+	int i;
+
+	if (!pd)
+		pd = &default_extdsp_data;
+
+	npd = kmemdup(pd, sizeof(struct s3c_platform_fb), GFP_KERNEL);
+	if (!npd)
+		printk(KERN_ERR "%s: no memory for platform data\n", __func__);
+	else {
+		for (i = 0; i < npd->nr_wins; i++)
+			npd->nr_buffers[i] = 1;
+		s3c_device_extdsp.dev.platform_data = npd;
+	}
+}
+#endif
+
+static inline int need_i2c5(void)
+{
+	return 1; /* orig: system_rev != 3; */
+}
+
+static void __init midas_machine_init(void)
+{
+	struct clk *ppmu_clk = NULL;
+
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+#if defined(CONFIG_VIDEO_S5C73M3_SPI)
+	unsigned int gpio;
+	struct clk *sclk = NULL;
+	struct clk *prnt = NULL;
+	struct device *spi1_dev = &exynos_device_spi1.dev;
+#endif
+#if defined(CONFIG_PHONE_IPC_SPI) \
+	|| defined(CONFIG_TDMB) || defined(CONFIG_TDMB_MODULE)
+	struct device *spi2_dev = &exynos_device_spi2.dev;
+#endif
+#endif
+
+	/*
+	  * prevent 4x12 ISP power off problem
+	  * ISP_SYS Register has to be 0 before ISP block power off.
+	  */
+	__raw_writel(0x0, S5P_CMU_RESET_ISP_SYS);
+
+	/* initialise the gpios */
+	midas_config_gpio_table();
+	exynos4_sleep_gpio_table_set = midas_config_sleep_gpio_table;
+
+	midas_power_init();
+
+	s3c_i2c0_set_platdata(NULL);
+	i2c_register_board_info(0, i2c_devs0, ARRAY_SIZE(i2c_devs0));
+
+	s3c_i2c1_set_platdata(NULL);
+	i2c_register_board_info(1, i2c_devs1, ARRAY_SIZE(i2c_devs1));
+
+	kona_tsp_init(system_rev);
+	kona_key_init();
+
+#ifdef CONFIG_MOTOR_DRV_DRV2603
+	drv2603_motor_init();
+#endif
+
+#ifdef CONFIG_LEDS_AAT1290A
+	platform_device_register(&s3c_device_aat1290a_led);
+#endif
+	midas_sound_init();
+
+#ifdef CONFIG_S3C_DEV_I2C5
+	if (need_i2c5()) {
+		s3c_i2c5_set_platdata(NULL);
+		i2c_register_board_info(5, i2c_devs5,
+			ARRAY_SIZE(i2c_devs5));
+	}
+#endif
+
+#ifdef CONFIG_S3C_DEV_I2C6
+	s3c_i2c6_set_platdata(NULL);
+#endif
+#if defined(CONFIG_INPUT_WACOM)
+	midas_wacom_init();
+#endif
+
+	s3c_i2c7_set_platdata(NULL);
+	i2c_register_board_info(7, i2c_devs7, ARRAY_SIZE(i2c_devs7));
+
+	i2c_register_board_info(9, i2c_devs9_emul, ARRAY_SIZE(i2c_devs9_emul));
+
+	i2c_register_board_info(10, i2c_devs10_emul,
+				ARRAY_SIZE(i2c_devs10_emul));
+
+	i2c_register_board_info(11, i2c_devs11_emul,
+				ARRAY_SIZE(i2c_devs11_emul));
+
+#ifdef CONFIG_SMB347_CHARGER
+	/* smb347 charger */
+	i2c_register_board_info(13, i2c_devs13_emul,
+				ARRAY_SIZE(i2c_devs13_emul));
+#endif
+
+#ifdef CONFIG_BATTERY_MAX17042_FUELGAUGE_PX
+	/* max17042 fuelgauge */
+	i2c_register_board_info(14, i2c_devs14_emul,
+				ARRAY_SIZE(i2c_devs14_emul));
+#endif
+#ifdef CONFIG_SAMSUNG_MHL
+	printk(KERN_INFO "%s() register sii9234 driver\n", __func__);
+
+	i2c_register_board_info(15, i2c_devs15_emul,
+				ARRAY_SIZE(i2c_devs15_emul));
+	i2c_register_board_info(16, i2c_devs16_emul,
+				ARRAY_SIZE(i2c_devs16_emul));
+#endif
+
+#if defined(CONFIG_STMPE811_ADC) || defined(CONFIG_FM_SI4709_MODULE) \
+	|| defined(CONFIG_FM_SI4705_MODULE)
+	i2c_register_board_info(19, i2c_devs19_emul,
+				ARRAY_SIZE(i2c_devs19_emul));
+#endif
+
+#ifdef CONFIG_LEDS_AN30259A
+	i2c_register_board_info(21, i2c_devs21_emul,
+				ARRAY_SIZE(i2c_devs21_emul));
+#endif
+
+#ifdef CONFIG_IR_REMOCON_MC96
+	i2c_register_board_info(22, i2c_devs22_emul,
+				ARRAY_SIZE(i2c_devs22_emul));
+#endif
+
+#ifdef CONFIG_BACKLIGHT_LP855X
+	i2c_register_board_info(24, i2c_devs24_emul,
+				ARRAY_SIZE(i2c_devs24_emul));
+#endif
+
+#if defined(GPIO_OLED_DET)
+	gpio_request(GPIO_OLED_DET, "OLED_DET");
+	s5p_register_gpio_interrupt(GPIO_OLED_DET);
+	gpio_free(GPIO_OLED_DET);
+#endif
+#ifdef CONFIG_FB_S5P
+#ifdef CONFIG_FB_S5P_LMS501KF03
+	spi_register_board_info(spi_board_info, ARRAY_SIZE(spi_board_info));
+	s3cfb_set_platdata(&lms501kf03_data);
+#endif
+#if defined(CONFIG_FB_S5P_MIPI_DSIM)
+	mipi_fb_init();
+#elif defined(CONFIG_BACKLIGHT_PWM)
+	samsung_bl_set(&smdk4212_bl_gpio_info, &smdk4212_bl_data);
+#elif defined(CONFIG_FB_S5P_S6C1372)
+	s6c1372_panel_gpio_init();
+#endif
+	s3cfb_set_platdata(&fb_platform_data);
+#ifdef CONFIG_EXYNOS_DEV_PD
+	s3c_device_fb.dev.parent = &exynos4_device_pd[PD_LCD0].dev;
+#endif
+#endif
+#ifdef CONFIG_USB_EHCI_S5P
+	smdk4212_ehci_init();
+#endif
+#ifdef CONFIG_USB_OHCI_S5P
+	smdk4212_ohci_init();
+#endif
+#ifdef CONFIG_USB_GADGET
+	smdk4212_usbgadget_init();
+#endif
+
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
+	exynos4_fimc_is_set_platdata(NULL);
+#ifdef CONFIG_EXYNOS_DEV_PD
+	exynos4_device_fimc_is.dev.parent = &exynos4_device_pd[PD_ISP].dev;
+#endif
+#endif
+#ifdef CONFIG_EXYNOS4_DEV_MSHC
+	s3c_mshci_set_platdata(&exynos4_mshc_pdata);
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC
+	s3c_sdhci0_set_platdata(&smdk4212_hsmmc0_pdata);
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC1
+	s3c_sdhci1_set_platdata(&smdk4212_hsmmc1_pdata);
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC2
+	s3c_sdhci2_set_platdata(&smdk4212_hsmmc2_pdata);
+#endif
+#ifdef CONFIG_S3C_DEV_HSMMC3
+	s3c_sdhci3_set_platdata(&smdk4212_hsmmc3_pdata);
+#endif
+
+	midas_camera_init();
+
+#ifdef CONFIG_FB_S5P_EXTDSP
+	s3cfb_extdsp_set_platdata(&default_extdsp_data);
+#endif
+
+#if defined(CONFIG_VIDEO_TVOUT)
+	s5p_hdmi_hpd_set_platdata(&hdmi_hpd_data);
+	s5p_hdmi_cec_set_platdata(&hdmi_cec_data);
+#ifdef CONFIG_EXYNOS_DEV_PD
+	s5p_device_tvout.dev.parent = &exynos4_device_pd[PD_TV].dev;
+	exynos4_device_pd[PD_TV].dev.parent = &exynos4_device_pd[PD_LCD0].dev;
+#endif
+#endif
+
+#ifdef CONFIG_VIDEO_JPEG_V2X
+#ifdef CONFIG_EXYNOS_DEV_PD
+	s5p_device_jpeg.dev.parent = &exynos4_device_pd[PD_CAM].dev;
+	exynos4_jpeg_setup_clock(&s5p_device_jpeg.dev, 160000000);
+#endif
+#endif
+
+#ifdef CONFIG_ION_EXYNOS
+	exynos_ion_set_platdata();
+#endif
+
+#if defined(CONFIG_VIDEO_MFC5X) || defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+#ifdef CONFIG_EXYNOS_DEV_PD
+	s5p_device_mfc.dev.parent = &exynos4_device_pd[PD_MFC].dev;
+#endif
+	exynos4_mfc_setup_clock(&s5p_device_mfc.dev, 200 * MHZ);
+#endif
+
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+	dev_set_name(&s5p_device_mfc.dev, "s3c-mfc");
+	clk_add_alias("mfc", "s5p-mfc", "mfc", &s5p_device_mfc.dev);
+	s5p_mfc_setname(&s5p_device_mfc, "s5p-mfc");
+#endif
+#ifdef CONFIG_VIDEO_FIMG2D
+	s5p_fimg2d_set_platdata(&fimg2d_data);
+#endif
+#ifdef CONFIG_EXYNOS_C2C
+	exynos_c2c_set_platdata(&smdk4212_c2c_pdata);
+#endif
+
+	brcm_wlan_init();
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+	s5p_tmu_set_platdata(&midas_tmu_data);
+#endif
+
+	exynos_sysmmu_init();
+
+	platform_add_devices(midas_devices, ARRAY_SIZE(midas_devices));
+
+#ifdef CONFIG_S3C_ADC
+	platform_device_register(&s3c_device_adc);
+#endif
+#if defined(CONFIG_STMPE811_ADC) || defined(CONFIG_FM_SI4709_MODULE) \
+	|| defined(CONFIG_FM_SI4705_MODULE)
+	platform_device_register(&s3c_device_i2c19);
+#endif
+#ifdef CONFIG_SEC_THERMISTOR
+	platform_device_register(&sec_device_thermistor);
+#endif
+
+#if defined(CONFIG_S3C_DEV_I2C5)
+	if (need_i2c5())
+		platform_device_register(&s3c_device_i2c5);
+#endif
+
+#if defined(CONFIG_SENSORS_BH1721) || defined(CONFIG_SENSORS_AL3201)
+	platform_device_register(&s3c_device_i2c9);
+#endif
+
+#ifdef CONFIG_30PIN_CONN
+	smdk_accessory_gpio_init();
+#endif
+#ifdef CONFIG_USB_HOST_NOTIFY
+	acc_chk_gpio_init();
+#endif
+
+#if defined(CONFIG_SEC_DEV_JACK)
+	p4note_jack_init();
+#endif
+
+#if defined(CONFIG_S3C64XX_DEV_SPI)
+#if defined(CONFIG_VIDEO_S5C73M3_SPI)
+	sclk = clk_get(spi1_dev, "dout_spi1");
+	if (IS_ERR(sclk))
+		dev_err(spi1_dev, "failed to get sclk for SPI-1\n");
+	prnt = clk_get(spi1_dev, "mout_mpll_user");
+	if (IS_ERR(prnt))
+		dev_err(spi1_dev, "failed to get prnt\n");
+	if (clk_set_parent(sclk, prnt))
+		printk(KERN_ERR "Unable to set parent %s of clock %s.\n",
+		       prnt->name, sclk->name);
+
+	clk_set_rate(sclk, 800 * 1000 * 1000);
+	clk_put(sclk);
+	clk_put(prnt);
+
+	if (!gpio_request(EXYNOS4_GPB(5), "SPI_CS1")) {
+		gpio_direction_output(EXYNOS4_GPB(5), 1);
+		s3c_gpio_cfgpin(EXYNOS4_GPB(5), S3C_GPIO_SFN(1));
+		s3c_gpio_setpull(EXYNOS4_GPB(5), S3C_GPIO_PULL_UP);
+		exynos_spi_set_info(1, EXYNOS_SPI_SRCCLK_SCLK,
+				    ARRAY_SIZE(spi1_csi));
+	}
+
+	for (gpio = EXYNOS4_GPB(4); gpio < EXYNOS4_GPB(8); gpio++)
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV3);
+
+	spi_register_board_info(spi1_board_info, ARRAY_SIZE(spi1_board_info));
+#endif
+
+#if defined(CONFIG_PHONE_IPC_SPI) \
+	|| defined(CONFIG_TDMB) || defined(CONFIG_TDMB_MODULE)
+	sclk = NULL;
+	prnt = NULL;
+
+	sclk = clk_get(spi2_dev, "dout_spi2");
+	if (IS_ERR(sclk))
+		dev_err(spi2_dev, "failed to get sclk for SPI-2\n");
+	prnt = clk_get(spi2_dev, "mout_mpll_user");
+	if (IS_ERR(prnt))
+		dev_err(spi2_dev, "failed to get prnt\n");
+	if (clk_set_parent(sclk, prnt))
+		printk(KERN_ERR "Unable to set parent %s of clock %s.\n",
+		       prnt->name, sclk->name);
+
+	clk_put(sclk);
+	clk_put(prnt);
+
+	if (!gpio_request(EXYNOS4_GPC1(2), "SPI_CS2")) {
+		gpio_direction_output(EXYNOS4_GPC1(2), 1);
+		s3c_gpio_cfgpin(EXYNOS4_GPC1(2), S3C_GPIO_SFN(1));
+		s3c_gpio_setpull(EXYNOS4_GPC1(2), S3C_GPIO_PULL_UP);
+		exynos_spi_set_info(2, EXYNOS_SPI_SRCCLK_SCLK,
+			ARRAY_SIZE(spi2_csi));
+	}
+	for (gpio = EXYNOS4_GPC1(1); gpio < EXYNOS4_GPC1(5); gpio++)
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV3);
+
+	spi_register_board_info(spi2_board_info, ARRAY_SIZE(spi2_board_info));
+#endif
+
+#if defined(CONFIG_TDMB) || defined(CONFIG_TDMB_MODULE)
+	tdmb_dev_init();
+#endif
+#endif
+
+#ifdef CONFIG_BUSFREQ_OPP
+	dev_add(&busfreq, &exynos4_busfreq.dev);
+
+	/* PPMUs using for cpufreq get clk from clk_list */
+	ppmu_clk = clk_get(NULL, "ppmudmc0");
+	if (IS_ERR(ppmu_clk))
+		printk(KERN_ERR "failed to get ppmu_dmc0\n");
+	clk_enable(ppmu_clk);
+	clk_put(ppmu_clk);
+
+	ppmu_clk = clk_get(NULL, "ppmudmc1");
+	if (IS_ERR(ppmu_clk))
+		printk(KERN_ERR "failed to get ppmu_dmc1\n");
+	clk_enable(ppmu_clk);
+	clk_put(ppmu_clk);
+
+	ppmu_clk = clk_get(NULL, "ppmucpu");
+	if (IS_ERR(ppmu_clk))
+		printk(KERN_ERR "failed to get ppmu_cpu\n");
+	clk_enable(ppmu_clk);
+	clk_put(ppmu_clk);
+
+	ppmu_init(&exynos_ppmu[PPMU_DMC0], &exynos4_busfreq.dev);
+	ppmu_init(&exynos_ppmu[PPMU_DMC1], &exynos4_busfreq.dev);
+	ppmu_init(&exynos_ppmu[PPMU_CPU], &exynos4_busfreq.dev);
+#endif
+
+
+	/* 400 kHz for initialization of MMC Card  */
+	__raw_writel((__raw_readl(EXYNOS4_CLKDIV_FSYS3) & 0xfffffff0)
+		     | 0x9, EXYNOS4_CLKDIV_FSYS3);
+	__raw_writel((__raw_readl(EXYNOS4_CLKDIV_FSYS2) & 0xfff0fff0)
+		     | 0x80008, EXYNOS4_CLKDIV_FSYS2);
+	__raw_writel((__raw_readl(EXYNOS4_CLKDIV_FSYS1) & 0xfff0fff0)
+		     | 0x80008, EXYNOS4_CLKDIV_FSYS1);
+
+/* IR_LED */
+#if defined(CONFIG_IR_REMOCON_MC96)
+	irda_device_init();
+#elif defined(CONFIG_IR_REMOCON_GPIO)
+	ir_rc_init_hw();
+#endif
+/* IR_LED */
+}
+
+#ifdef CONFIG_EXYNOS_C2C
+static void __init exynos_c2c_reserve(void)
+{
+	static struct cma_region region = {
+			.name = "c2c_shdmem",
+			.size = 64 * SZ_1M,
+			{ .alignment	= 64 * SZ_1M },
+			.start = C2C_SHAREDMEM_BASE
+	};
+
+	BUG_ON(cma_early_region_register(&region));
+	BUG_ON(cma_early_region_reserve(&region));
+
+	pr_info("%s %10s %8x %8x\n", __func__,
+		region.name, region.start, region.size);
+}
+#endif
+
+static void __init exynos_init_reserve(void)
+{
+	sec_debug_magic_init();
+}
+
+MACHINE_START(SMDK4412, "SMDK4x12")
+	.boot_params	= S5P_PA_SDRAM + 0x100,
+	.init_irq	= exynos4_init_irq,
+	.map_io		= midas_map_io,
+	.init_machine	= midas_machine_init,
+	.timer		= &exynos4_timer,
+#ifdef CONFIG_EXYNOS_C2C
+	.reserve	= &exynos_c2c_reserve,
+#endif
+	.init_early	= &exynos_init_reserve,
+MACHINE_END
+
+MACHINE_START(SMDK4212, "SMDK4x12")
+	.boot_params	= S5P_PA_SDRAM + 0x100,
+	.init_irq	= exynos4_init_irq,
+	.map_io		= midas_map_io,
+	.init_machine	= midas_machine_init,
+	.timer		= &exynos4_timer,
+#ifdef CONFIG_EXYNOS_C2C
+	.reserve	= &exynos_c2c_reserve,
+#endif
+	.init_early	= &exynos_init_reserve,
+MACHINE_END
diff -Naur ./arch/arm/mach-exynos/mach-midas.c ../../HK_JB/Kernel/arch/arm/mach-exynos/mach-midas.c
--- ./arch/arm/mach-exynos/mach-midas.c	2012-12-08 20:40:46.145821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/mach-midas.c	2012-11-22 09:13:16.000000000 +0100
@@ -82,6 +82,7 @@
 #include <plat/adc.h>
 #include <media/exynos_fimc_is.h>
 #include <mach/exynos-ion.h>
+#include <mach/regs-gpio.h>
 
 #if defined(CONFIG_TDMB) || defined(CONFIG_TDMB_MODULE)
 #include <mach/tdmb_pdata.h>
@@ -103,6 +104,10 @@
 #ifdef CONFIG_EXYNOS_C2C
 #include <mach/c2c.h>
 #endif
+#ifdef CONFIG_SEC_MODEM
+#include <linux/platform_data/modem.h>
+#endif
+
 #if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC) || defined(CONFIG_VIDEO_MFC5X)
 #include <plat/s5p-mfc.h>
 #endif
@@ -314,8 +319,16 @@
 	defined(CONFIG_MACH_C1) || \
 	defined(CONFIG_MACH_M3) || \
 	defined(CONFIG_MACH_T0) || \
-	defined(CONFIG_MACH_BAFFIN)
+	defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+
+#if defined(CONFIG_MACH_M3_JPN_DCM)
+	if (system_rev < 3)
+		gpio_request(GPIO_3_TOUCH_EN_R1, "gpio_3_touch_en");
+	else
+		gpio_request(GPIO_3_TOUCH_EN, "gpio_3_touch_en");
+#else
 	gpio_request(GPIO_3_TOUCH_EN, "gpio_3_touch_en");
+#endif
 #if defined(CONFIG_MACH_C1_KOR_LGT)
 	gpio_request(GPIO_3_TOUCH_LDO_EN, "gpio_3_touch_ldo_en");
 #endif
@@ -337,12 +350,22 @@
 static int touchkey_suspend(void)
 {
 	struct regulator *regulator;
+#if defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	struct regulator *regulator_ldo17;
+#endif
 
 	regulator = regulator_get(NULL, TK_REGULATOR_NAME);
 	if (IS_ERR(regulator))
 		return 0;
 	if (regulator_is_enabled(regulator))
 		regulator_force_disable(regulator);
+#if defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	regulator_ldo17 = regulator_get(NULL, TK_VDD_REGULATOR);
+	if (IS_ERR(regulator_ldo17))
+		return 0;
+	if (regulator_is_enabled(regulator_ldo17))
+		regulator_force_disable(regulator_ldo17);
+#endif
 
 #if defined(CONFIG_MACH_C1_KOR_LGT)
 	gpio_request(GPIO_3_TOUCH_LDO_EN, "gpio_3_touch_ldo_en");
@@ -353,6 +376,9 @@
 	s3c_gpio_setpull(GPIO_3_TOUCH_SDA, S3C_GPIO_PULL_DOWN);
 
 	regulator_put(regulator);
+#if defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	regulator_put(regulator_ldo17);
+#endif
 
 	return 1;
 }
@@ -360,7 +386,16 @@
 static int touchkey_resume(void)
 {
 	struct regulator *regulator;
+#if defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	struct regulator *regulator_ldo17;
+#endif
 
+#if defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	regulator_ldo17 = regulator_get(NULL, TK_VDD_REGULATOR);
+	if (IS_ERR(regulator_ldo17))
+		return 0;
+	regulator_enable(regulator_ldo17);
+#endif
 	regulator = regulator_get(NULL, TK_REGULATOR_NAME);
 	if (IS_ERR(regulator))
 		return 0;
@@ -369,6 +404,9 @@
 	gpio_request(GPIO_3_TOUCH_LDO_EN, "gpio_3_touch_ldo_en");
 	gpio_direction_output(GPIO_3_TOUCH_LDO_EN, 1);
 	#endif
+#if defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	regulator_put(regulator_ldo17);
+#endif
 	regulator_put(regulator);
 
 	s3c_gpio_setpull(GPIO_3_TOUCH_SCL, S3C_GPIO_PULL_NONE);
@@ -383,17 +421,17 @@
 
 	if (on) {
 		gpio_direction_output(GPIO_3_TOUCH_INT, 1);
+
+		ret = touchkey_resume();
+
 		irq_set_irq_type(gpio_to_irq(GPIO_3_TOUCH_INT),
 			IRQF_TRIGGER_FALLING);
 		s3c_gpio_cfgpin(GPIO_3_TOUCH_INT, S3C_GPIO_SFN(0xf));
 		s3c_gpio_setpull(GPIO_3_TOUCH_INT, S3C_GPIO_PULL_NONE);
-	} else
+	} else {
 		gpio_direction_input(GPIO_3_TOUCH_INT);
-
-	if (on)
-		ret = touchkey_resume();
-	else
 		ret = touchkey_suspend();
+	}
 
 	return ret;
 }
@@ -401,10 +439,24 @@
 static int touchkey_led_power_on(bool on)
 {
 #if defined(LED_LDO_WITH_EN_PIN)
+#if defined(CONFIG_MACH_M3_JPN_DCM)
+	if (system_rev < 3) {
+		if (on)
+			gpio_direction_output(GPIO_3_TOUCH_EN_R1, 1);
+		else
+			gpio_direction_output(GPIO_3_TOUCH_EN_R1, 0);
+	} else {
+		if (on)
+			gpio_direction_output(GPIO_3_TOUCH_EN, 1);
+		else
+			gpio_direction_output(GPIO_3_TOUCH_EN, 0);
+	}
+#else
 	if (on)
 		gpio_direction_output(GPIO_3_TOUCH_EN, 1);
 	else
 		gpio_direction_output(GPIO_3_TOUCH_EN, 0);
+#endif
 #else
 	struct regulator *regulator;
 
@@ -445,7 +497,7 @@
 	s3c_gpio_cfgpin(GPIO_TDMB_EN, S3C_GPIO_OUTPUT);
 	s3c_gpio_setpull(GPIO_TDMB_EN, S3C_GPIO_PULL_NONE);
 	gpio_set_value(GPIO_TDMB_EN, GPIO_LEVEL_LOW);
-#if defined(CONFIG_MACH_T0)
+#if defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_BAFFIN)
 	s3c_gpio_cfgpin(GPIO_TDMB_RST_N, S3C_GPIO_OUTPUT);
 	s3c_gpio_setpull(GPIO_TDMB_RST_N, S3C_GPIO_PULL_NONE);
 	gpio_set_value(GPIO_TDMB_RST_N, GPIO_LEVEL_LOW);
@@ -466,7 +518,7 @@
 	s3c_gpio_setpull(GPIO_TDMB_EN, S3C_GPIO_PULL_NONE);
 	gpio_set_value(GPIO_TDMB_EN, GPIO_LEVEL_LOW);
 
-#if defined(CONFIG_MACH_T0)
+#if defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_BAFFIN)
 	s3c_gpio_cfgpin(GPIO_TDMB_RST_N, S3C_GPIO_OUTPUT);
 	s3c_gpio_setpull(GPIO_TDMB_RST_N, S3C_GPIO_PULL_NONE);
 	gpio_set_value(GPIO_TDMB_RST_N, GPIO_LEVEL_LOW);
@@ -487,7 +539,7 @@
 	usleep_range(1000, 1000);
 	gpio_set_value(GPIO_TDMB_EN, GPIO_LEVEL_HIGH);
 
-#if defined(CONFIG_MACH_T0)
+#if defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_BAFFIN)
 	usleep_range(1000, 1000);
 	gpio_set_value(GPIO_TDMB_RST_N, GPIO_LEVEL_LOW);
 	usleep_range(2000, 2000);
@@ -502,7 +554,7 @@
 	printk(KERN_DEBUG "tdmb_gpio_off\n");
 
 	tdmb_set_config_poweroff();
-#if defined(CONFIG_MACH_T0)
+#if defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_BAFFIN)
 	gpio_set_value(GPIO_TDMB_RST_N, GPIO_LEVEL_LOW);
 	usleep_range(1000, 1000);
 #endif
@@ -523,6 +575,9 @@
 	},
 };
 
+#if defined(CONFIG_MACH_BAFFIN_KOR_LGT) || defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+#define TDMB_VDD_REGULATOR "tdmb_1.8v"
+#endif
 static int __init tdmb_dev_init(void)
 {
 #if defined(CONFIG_MACH_T0) && defined(CONFIG_TDMB_ANT_DET)
@@ -547,6 +602,20 @@
 	tdmb_pdata.irq = GPIO_TDMB_IRQ;
 	platform_device_register(&tdmb_device);
 
+#if defined(CONFIG_MACH_BAFFIN_KOR_LGT) || defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+#if defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	if (system_rev >= 2) { /* 0010 */
+#else /* baffin */
+	if (system_rev >= 4) { /* 0100 */
+#endif
+		struct regulator *regulator_ldo13;
+		printk(KERN_INFO "[TDMB_PW] PMIC LDO13 Enable\n");
+		regulator_ldo13 = regulator_get(NULL, TDMB_VDD_REGULATOR);
+		if (IS_ERR(regulator_ldo13))
+			return 0;
+		regulator_enable(regulator_ldo13);
+	}
+#endif
 	return 0;
 }
 #elif defined(CONFIG_ISDBT)
@@ -634,6 +703,24 @@
 
 static int __init isdbt_dev_init(void)
 {
+#if defined(CONFIG_MACH_T0_JPN_LTE_DCM) && defined(CONFIG_ISDBT_ANT_DET)
+	unsigned int isdbt_ant_det_gpio;
+	unsigned int isdbt_ant_det_irq;
+
+	if (system_rev > 11) {
+		isdbt_ant_det_gpio = GPIO_ISDBT_ANT_DET_REV08;
+		isdbt_ant_det_irq = GPIO_ISDBT_IRQ_ANT_DET_REV08;
+	} else {
+		s5p_register_gpio_interrupt(GPIO_ISDBT_ANT_DET);
+		isdbt_ant_det_gpio = GPIO_ISDBT_ANT_DET;
+		isdbt_ant_det_irq = GPIO_ISDBT_IRQ_ANT_DET;
+	}
+
+	s3c_gpio_cfgpin(isdbt_ant_det_gpio, S3C_GPIO_SFN(0xf));
+	s3c_gpio_setpull(isdbt_ant_det_gpio, S3C_GPIO_PULL_NONE);
+	isdbt_pdata.gpio_ant_det = isdbt_ant_det_gpio;
+	isdbt_pdata.irq_ant_det = isdbt_ant_det_irq;
+#endif
 	isdbt_set_config_poweroff();
 	s5p_register_gpio_interrupt(GPIO_ISDBT_INT);
 	isdbt_pdata.irq = GPIO_ISDBT_IRQ;
@@ -876,7 +963,8 @@
 		s3c_device_android_usb.dev.platform_data;
 	if (android_pdata) {
 		unsigned int cdfs = 0;
-#if defined(CONFIG_MACH_M0_CTC) || defined(CONFIG_MACH_T0_CHN_CTC)
+#if defined(CONFIG_MACH_M0_CTC) || defined(CONFIG_MACH_T0_CHN_CTC) || \
+	defined(CONFIG_MACH_M0_DUOSCTC)
 		unsigned int newluns = 1;
 		cdfs = 1;   /* China CTC required CDFS */
 #elif defined(CONFIG_MACH_T0_USA_VZW)
@@ -897,7 +985,10 @@
 	s5p_usbgadget_set_platdata(pdata);
 
 #if defined(CONFIG_MACH_C1_KOR_SKT) || defined(CONFIG_MACH_C1_KOR_KT) || \
-	defined(CONFIG_MACH_C1_KOR_LGT) || defined(CONFIG_MACH_BAFFIN)
+	defined(CONFIG_MACH_C1_KOR_LGT) || defined(CONFIG_MACH_BAFFIN) || \
+	defined(CONFIG_MACH_GC1_KOR_SKT) || defined(CONFIG_MACH_GC1_KOR_KT) || \
+	defined(CONFIG_MACH_GC1_KOR_LGT) || defined(CONFIG_MACH_GC1_USA_VZW)
+
 	pdata = s3c_device_usbgadget.dev.platform_data;
 	if (pdata) {
 		/* Squelch Threshold Tune [13:11] (111 : -20%) */
@@ -932,12 +1023,13 @@
 #ifdef CONFIG_MACH_BAFFIN
 static void motor_en(bool enable)
 {
-	gpio_direction_output(EXYNOS4_GPD0(0), enable);
-	printk(KERN_DEBUG "[VIB] motor_enabled GPIO GPD0(0) : %d\n",
-	       gpio_get_value(EXYNOS4_GPD0(0)));
+	gpio_direction_output(EXYNOS4_GPY2(2), enable);
+	printk(KERN_DEBUG "[VIB] motor_enabled GPIO GPY2(2) : %d\n",
+	       gpio_get_value(EXYNOS4_GPY2(2)));
 }
 #endif
-#if defined(CONFIG_MACH_T0) && defined(CONFIG_TARGET_LOCALE_KOR)
+#if defined(CONFIG_MACH_T0) && defined(CONFIG_TARGET_LOCALE_KOR) || \
+	defined(CONFIG_MACH_T0_JPN_LTE_DCM)
 static void motor_en(bool enable)
 {
 	gpio_direction_output(EXYNOS4_GPC0(3), enable);
@@ -962,7 +1054,11 @@
 #endif
 	.max_timeout = 10000,
 	.duty = 35500,
+#if defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	.period = 38295,
+#else
 	.period = 37904,
+#endif
 	.regulator_name = "vmotor",
 };
 #endif
@@ -1022,7 +1118,7 @@
 {
 #if defined(CONFIG_MACH_M0_CTC)
 	return false;
-#endif
+#else
 #ifdef CONFIG_MACH_M0
 	if (system_rev == 5)
 		return true;
@@ -1032,6 +1128,7 @@
 		return true;
 #endif
 	return false;
+#endif
 }
 
 struct max77693_platform_data exynos4_max77693_info = {
@@ -1105,15 +1202,56 @@
 #endif
 #endif
 
-#ifdef CONFIG_S3C_DEV_I2C5
 #ifdef CONFIG_MACH_GC1
+static void s3c_i2c5_cfg_gpio_gc1(void)
+{
+	/* DDC_HDMI_SDA */
+	s3c_gpio_cfgpin(EXYNOS4_GPB(2), S3C_GPIO_SFN(0x0));
+	s3c_gpio_setpull(EXYNOS4_GPB(2), S3C_GPIO_PULL_NONE);
+
+	/* _SCL */
+	s3c_gpio_cfgpin(EXYNOS4_GPB(3), S3C_GPIO_SFN(0x1));
+	s3c_gpio_setpull(EXYNOS4_GPB(3), S3C_GPIO_PULL_NONE);
+
+	s3c_gpio_cfgall_range(EXYNOS4_GPB(2), 2,
+		S3C_GPIO_SFN(3), S3C_GPIO_PULL_NONE);
+	s5p_gpio_set_drvstr(EXYNOS4_GPB(2), S5P_GPIO_DRVSTR_LV4);
+	s5p_gpio_set_drvstr(EXYNOS4_GPB(3), S5P_GPIO_DRVSTR_LV4);
+
+	s3c_gpio_cfgpin(GPIO_HDMI_EN, S3C_GPIO_OUTPUT);	/* HDMI_EN */
+	s3c_gpio_setpull(GPIO_HDMI_EN, S3C_GPIO_PULL_NONE);
+}
+
+static struct i2c_gpio_platform_data gpio_i2c_data5 = {
+	.sda_pin = EXYNOS4_GPB(2),
+	.scl_pin = EXYNOS4_GPB(3),
+	.udelay = 25,
+	.timeout = 0,
+};
+
+struct platform_device s3c_device_i2c5 = {
+	.name = "i2c-gpio",
+	.id = 5,
+	.dev.platform_data = &gpio_i2c_data5,
+};
 static struct i2c_board_info i2c_devs5[] __initdata = {
 	/* HDMI */
 	{
 		I2C_BOARD_INFO("s5p_ddc", (0x74 >> 1)),
 	},
 };
-#elif !defined(CONFIG_MACH_T0_EUR_OPEN) || !defined(CONFIG_MACH_T0_CHN_OPEN)
+
+static void hdmi_ext_ic_control_gc1(bool ic_on)
+{
+	if (ic_on)
+		gpio_set_value(GPIO_HDMI_EN, GPIO_LEVEL_HIGH);
+	else
+		gpio_set_value(GPIO_HDMI_EN, GPIO_LEVEL_LOW);
+}
+#endif
+
+#ifdef CONFIG_S3C_DEV_I2C5
+#if !defined(CONFIG_MACH_T0_EUR_OPEN) && !defined(CONFIG_MACH_T0_CHN_OPEN)
 static struct i2c_board_info i2c_devs5[] __initdata = {
 #ifdef CONFIG_REGULATOR_MAX8997
 	{
@@ -1130,25 +1268,6 @@
 	},
 #endif
 };
-#endif /* CONFIG_MACH_GC1 */
-#ifdef CONFIG_MACH_GC1
-static void hdmi_ext_ic_control_gc1(bool ic_on)
-{
-	if (ic_on)
-		gpio_set_value(GPIO_HDMI_EN, GPIO_LEVEL_HIGH);
-	else
-		gpio_set_value(GPIO_HDMI_EN, GPIO_LEVEL_LOW);
-}
-
-static void s3c_i2c5_cfg_gpio_gc1(struct platform_device *dev)
-{
-	s3c_gpio_cfgall_range(EXYNOS4_GPB(2), 2,
-		S3C_GPIO_SFN(3), S3C_GPIO_PULL_NONE);
-	s5p_gpio_set_drvstr(EXYNOS4_GPB(2), S5P_GPIO_DRVSTR_LV4);
-	s5p_gpio_set_drvstr(EXYNOS4_GPB(3), S5P_GPIO_DRVSTR_LV4);
-	s3c_gpio_cfgpin(GPIO_HDMI_EN, S3C_GPIO_OUTPUT);	/* HDMI_EN */
-	s3c_gpio_setpull(GPIO_HDMI_EN, S3C_GPIO_PULL_NONE);
-}
 #endif
 struct s3c2410_platform_i2c default_i2c5_data __initdata = {
 	.bus_num        = 5,
@@ -1156,11 +1275,7 @@
 	.slave_addr     = 0x10,
 	.frequency      = 100*1000,
 	.sda_delay      = 100,
-#ifdef CONFIG_MACH_GC1
-	.cfg_gpio	= s3c_i2c5_cfg_gpio_gc1,
-#endif
 };
-
 #endif
 
 #ifdef CONFIG_S3C_DEV_I2C6
@@ -1510,9 +1625,19 @@
 	.voltage_min = 3400000,
 
 #if defined(CONFIG_MACH_GC1)
+#if defined(CONFIG_MACH_GC1_USA_ATT)
 	.in_curr_limit = 700,
 	.chg_curr_ta = 700,
 	.chg_curr_dock = 700,
+#elif defined(CONFIG_TARGET_LOCALE_KOR)
+	.in_curr_limit = 1000,
+	.chg_curr_ta = 1200,
+	.chg_curr_dock = 1000,
+#else
+	.in_curr_limit = 1000,
+	.chg_curr_ta = 1000,
+	.chg_curr_dock = 1000,
+#endif
 	.chg_curr_siop_lv1 = 475,
 	.chg_curr_siop_lv2 = 475,
 	.chg_curr_siop_lv3 = 475,
@@ -1523,6 +1648,22 @@
 	.chg_curr_siop_lv1 = 1000,
 	.chg_curr_siop_lv2 = 475,
 	.chg_curr_siop_lv3 = 1,	/* zero make charger off */
+#elif defined(CONFIG_MACH_BAFFIN_KOR_SKT) || \
+	defined(CONFIG_MACH_BAFFIN_KOR_KT) || \
+	defined(CONFIG_MACH_BAFFIN_KOR_LGT)
+	.in_curr_limit = 1000,
+	.chg_curr_ta = 1500,
+	.chg_curr_dock = 1000,
+	.chg_curr_siop_lv1 = 475,
+	.chg_curr_siop_lv2 = 475,
+	.chg_curr_siop_lv3 = 475,
+#elif defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	.in_curr_limit = 1000,
+	.chg_curr_ta = 1500,
+	.chg_curr_dock = 1000,
+	.chg_curr_siop_lv1 = 475,
+	.chg_curr_siop_lv2 = 475,
+	.chg_curr_siop_lv3 = 475,
 #else
 	.in_curr_limit = 1000,
 	.chg_curr_ta = 1000,
@@ -1557,10 +1698,18 @@
 
 #if defined(CONFIG_TARGET_LOCALE_KOR) || defined(CONFIG_MACH_M0_CTC) || \
 	defined(CONFIG_MACH_T0_USA_VZW) || defined(CONFIG_MACH_T0_USA_SPR) || \
-	defined(CONFIG_MACH_T0_USA_USCC)
+	defined(CONFIG_MACH_T0_USA_USCC) || defined(CONFIG_MACH_T0_CHN_CTC) || \
+	defined(CONFIG_MACH_GC1_USA_VZW)
+#if defined(CONFIG_MACH_GC1)
+	/* GC1-KOR, GC1-VZW - 1650mAh Battery : ABS Timer Spec(6hr / 2hr) */
+	.abstimer_charge_duration = 6 * 60 * 60,
+	.abstimer_charge_duration_wpc = 8 * 60 * 60,
+	.abstimer_recharge_duration = 2 * 60 * 60,
+#else
 	.abstimer_charge_duration = 8 * 60 * 60,
 	.abstimer_charge_duration_wpc = 8 * 60 * 60,
 	.abstimer_recharge_duration = 2 * 60 * 60,
+#endif
 #else
 	.abstimer_charge_duration = 6 * 60 * 60,
 	.abstimer_charge_duration_wpc = 8 * 60 * 60,
@@ -1586,10 +1735,31 @@
 	.freeze_recovery_temp = 30,
 #elif defined(CONFIG_MACH_T0_KOR_SKT) || defined(CONFIG_MACH_T0_KOR_KT) || \
 	defined(CONFIG_MACH_T0_KOR_LGT)
-	.overheat_stop_temp = 650,
+	.overheat_stop_temp = 660,
 	.overheat_recovery_temp = 425,
 	.freeze_stop_temp = -45,
 	.freeze_recovery_temp = 3,
+#elif defined(CONFIG_MACH_BAFFIN_KOR_SKT) || \
+	defined(CONFIG_MACH_BAFFIN_KOR_KT)
+	.overheat_stop_temp = 620,
+	.overheat_recovery_temp = 445,
+	.freeze_stop_temp = -50,
+	.freeze_recovery_temp = 13,
+#elif defined(CONFIG_MACH_BAFFIN_KOR_LGT)
+	.overheat_stop_temp = 620,
+	.overheat_recovery_temp = 445,
+	.freeze_stop_temp = -48,
+	.freeze_recovery_temp = 15,
+#elif defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	.overheat_stop_temp = 640,
+	.overheat_recovery_temp = 420,
+	.freeze_stop_temp = -49,
+	.freeze_recovery_temp = -11,
+#elif defined(CONFIG_MACH_GC1)
+	.overheat_stop_temp = 600,
+	.overheat_recovery_temp = 412,
+	.freeze_stop_temp = -30,
+	.freeze_recovery_temp = 3,
 #else
 	.overheat_stop_temp = 600,
 	.overheat_recovery_temp = 430,
@@ -1602,11 +1772,6 @@
 	.overheat_recovery_temp = 400,
 	.freeze_stop_temp = -50,
 	.freeze_recovery_temp = 0,
-#elif defined(CONFIG_MACH_M3_USA_VZW)
-	.overheat_stop_temp = 477,
-	.overheat_recovery_temp = 420,
-	.freeze_stop_temp = -50,
-	.freeze_recovery_temp = 0,
 #elif defined(CONFIG_MACH_T0_USA_ATT)
 	.overheat_stop_temp = 475,
 	.overheat_recovery_temp = 400,
@@ -1617,14 +1782,29 @@
 	.overheat_recovery_temp = 440,
 	.freeze_stop_temp = -50,
 	.freeze_recovery_temp = 0,
-#elif defined(CONFIG_MACH_T0_USA_SPR)
-	.overheat_stop_temp = 485,
-	.overheat_recovery_temp = 409,
+#elif defined(CONFIG_MACH_T0_USA_TMO)
+	.overheat_stop_temp = 475,
+	.overheat_recovery_temp = 400,
 	.freeze_stop_temp = -50,
 	.freeze_recovery_temp = 0,
+#elif defined(CONFIG_MACH_T0_USA_SPR)
+	.overheat_stop_temp = 515,
+	.overheat_recovery_temp = 420,
+	.freeze_stop_temp = -80,
+	.freeze_recovery_temp = -10,
 #elif defined(CONFIG_MACH_T0_USA_USCC)
-	.overheat_stop_temp = 600,
+	.overheat_stop_temp = 630,
+	.overheat_recovery_temp = 420,
+	.freeze_stop_temp = -50,
+	.freeze_recovery_temp = 30,
+#elif defined(CONFIG_MACH_GC1_USA_VZW)
+	.overheat_stop_temp = 470,
 	.overheat_recovery_temp = 400,
+	.freeze_stop_temp = -49,
+	.freeze_recovery_temp = 15,
+#elif defined(CONFIG_MACH_M3_USA_TMO)
+	.overheat_stop_temp = 460,
+	.overheat_recovery_temp = 430,
 	.freeze_stop_temp = -50,
 	.freeze_recovery_temp = 0,
 #else
@@ -1634,15 +1814,27 @@
 	.freeze_stop_temp = -50,
 	.freeze_recovery_temp = 0,
 #endif
+#elif defined(CONFIG_MACH_T0_CHN_CTC)
+	.overheat_stop_temp = 642,
+	.overheat_recovery_temp = 450,
+	.freeze_stop_temp = -40,
+	.freeze_recovery_temp = 20,
 #elif defined(CONFIG_MACH_M0_CTC)
+#if defined(CONFIG_MACH_M0_DUOSCTC)
+	.overheat_stop_temp = 660,
+	.overheat_recovery_temp = 440,
+	.freeze_stop_temp = -40,
+	.freeze_recovery_temp = 20,
+#else
 	.overheat_stop_temp = 640,
 	.overheat_recovery_temp = 430,
 	.freeze_stop_temp = -50,
 	.freeze_recovery_temp = 30,
+#endif
 #elif defined(CONFIG_MACH_GC1)
 	.overheat_stop_temp = 600,
 	.overheat_recovery_temp = 400,
-	.freeze_stop_temp = -30,
+	.freeze_stop_temp = -50,
 	.freeze_recovery_temp = 0,
 #else
 	/* M0 EUR */
@@ -1670,24 +1862,33 @@
 	.lpm_overheat_recovery_temp = 450,
 	.lpm_freeze_stop_temp = -50,
 	.lpm_freeze_recovery_temp = 0,
-#elif defined(CONFIG_MACH_M3_USA_VZW)
+#elif defined(CONFIG_MACH_T0_USA_VZW)
 	.event_overheat_stop_temp = 600,
-	.event_overheat_recovery_temp = 400,
+	.event_overheat_recovery_temp = 409,
 	.event_freeze_stop_temp = -50,
 	.event_freeze_recovery_temp = 0,
 	.lpm_overheat_stop_temp = 480,
 	.lpm_overheat_recovery_temp = 450,
 	.lpm_freeze_stop_temp = -50,
 	.lpm_freeze_recovery_temp = 0,
-#elif defined(CONFIG_MACH_T0_USA_VZW)
-	.event_overheat_stop_temp = 600,
-	.event_overheat_recovery_temp = 409,
+#elif defined(CONFIG_MACH_GC1_USA_VZW)
+	.event_overheat_stop_temp = 610,
+	.event_overheat_recovery_temp = 400,
 	.event_freeze_stop_temp = -50,
 	.event_freeze_recovery_temp = 0,
 	.lpm_overheat_stop_temp = 480,
 	.lpm_overheat_recovery_temp = 450,
 	.lpm_freeze_stop_temp = -50,
 	.lpm_freeze_recovery_temp = 0,
+#elif defined(CONFIG_MACH_M3_USA_TMO)
+	.event_overheat_stop_temp = 600,
+	.event_overheat_recovery_temp = 400,
+	.event_freeze_stop_temp = -50,
+	.event_freeze_recovery_temp = 0,
+	.lpm_overheat_stop_temp = 460,
+	.lpm_overheat_recovery_temp = 430,
+	.lpm_freeze_stop_temp = -40,
+	.lpm_freeze_recovery_temp = 10,
 #else
 	/* USA default */
 	.event_overheat_stop_temp = 600,
@@ -1710,19 +1911,25 @@
 	.covert_adc = convert_adc,
 #endif
 
-#if defined(CONFIG_MACH_M3_USA_VZW)
-	.vf_det_src = VF_DET_UNKNOWN,
-#else
-#if defined(CONFIG_MACH_T0) && defined(CONFIG_TARGET_LOCALE_USA)
+#if (defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_M3_USA_TMO)) && \
+	defined(CONFIG_TARGET_LOCALE_USA)
 	.vf_det_src = VF_DET_GPIO,	/* check H/W rev in battery probe */
+#elif defined(CONFIG_MACH_GC1) && defined(CONFIG_TARGET_LOCALE_USA)
+	.vf_det_src = VF_DET_ADC_GPIO,	/* check H/W rev in battery probe */
 #else
 	.vf_det_src = VF_DET_CHARGER,
 #endif
-#endif
 	.vf_det_ch = 0,	/* if src == VF_DET_ADC */
+#if defined(CONFIG_MACH_GC1)
+	.vf_det_th_l = 310,
+	.vf_det_th_h = 490,
+#else
 	.vf_det_th_l = 100,
-	.vf_det_th_h = 600,
-#if defined(CONFIG_MACH_T0) && defined(CONFIG_TARGET_LOCALE_USA)
+	.vf_det_th_h = 1500,
+#endif
+#if (defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_GC1) || \
+	defined(CONFIG_MACH_M3_USA_TMO)) && \
+	defined(CONFIG_TARGET_LOCALE_USA)
 	.batt_present_gpio = GPIO_BATT_PRESENT_N_INT,
 #endif
 
@@ -1813,8 +2020,7 @@
 #endif
 
 #if defined(CONFIG_TARGET_LOCALE_KOR) && \
-	(defined(CONFIG_MACH_M0) || defined(CONFIG_MACH_C1) ||\
-	defined(CONFIG_MACH_BAFFIN))
+	(defined(CONFIG_MACH_M0) || defined(CONFIG_MACH_C1))
 struct gpio_keys_button c1_rev04_buttons[] = {
 	GPIO_KEYS(KEY_VOLUMEUP, GPIO_VOL_UP_00,
 		  1, 0, sec_debug_check_crash_key),
@@ -1827,6 +2033,30 @@
 };
 #endif
 
+#if defined(CONFIG_TARGET_LOCALE_KOR) && \
+	defined(CONFIG_MACH_BAFFIN)
+struct gpio_keys_button baffin_kor_buttons[] = {
+	GPIO_KEYS(KEY_VOLUMEUP, GPIO_VOL_UP_00,
+		  1, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_VOLUMEDOWN, GPIO_VOL_DOWN_00,
+		  1, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_POWER, GPIO_nPOWER,
+		  1, 1, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_HOMEPAGE, GPIO_OK_KEY_ANDROID,
+		  1, 1, sec_debug_check_crash_key),
+};
+struct gpio_keys_button baffin_kor_rev06_buttons[] = {
+	GPIO_KEYS(KEY_VOLUMEUP, GPIO_VOL_UP_00,
+		  0, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_VOLUMEDOWN, GPIO_VOL_DOWN_00,
+		  0, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_POWER, GPIO_nPOWER,
+		  1, 1, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_HOMEPAGE, GPIO_OK_KEY_ANDROID,
+		  1, 1, sec_debug_check_crash_key),
+};
+#endif
+
 #if defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_M3)
 struct gpio_keys_button t0_buttons[] = {
 	GPIO_KEYS(KEY_VOLUMEUP, GPIO_VOL_UP,
@@ -1840,9 +2070,25 @@
 };
 #endif
 
+#if defined(CONFIG_MACH_M3_USA_TMO)
+struct gpio_keys_button m3_uas_tmo_00_buttons[] = {
+	GPIO_KEYS(KEY_VOLUMEUP, GPIO_VOL_UP_00,
+		  1, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_VOLUMEDOWN, GPIO_VOL_DOWN_00,
+		  1, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_POWER, GPIO_nPOWER,
+		  1, 1, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_HOMEPAGE, GPIO_OK_KEY,
+		  1, 1, sec_debug_check_crash_key),
+};
+#endif
+
 struct gpio_keys_platform_data midas_gpiokeys_platform_data = {
 	midas_buttons,
 	ARRAY_SIZE(midas_buttons),
+#ifdef CONFIG_MACH_GC1
+	.gpio_strobe_insert = STR_PU_DET_18V,
+#endif
 };
 
 static struct platform_device midas_keypad = {
@@ -1852,8 +2098,6 @@
 	},
 };
 
-
-
 #ifdef CONFIG_VIDEO_FIMG2D
 static struct fimg2d_platdata fimg2d_data __initdata = {
 	.hw_ver = 0x41,
@@ -1865,21 +2109,44 @@
 #endif
 
 #ifdef CONFIG_EXYNOS_C2C
-struct exynos_c2c_platdata smdk4212_c2c_pdata = {
-	.setup_gpio	= NULL,
-	.shdmem_addr	= C2C_SHAREDMEM_BASE,
-	.shdmem_size	= C2C_MEMSIZE_64,
-	.ap_sscm_addr	= NULL,
-	.cp_sscm_addr	= NULL,
-	.rx_width	= C2C_BUSWIDTH_16,
-	.tx_width	= C2C_BUSWIDTH_16,
-	.clk_opp100	= 400,
-	.clk_opp50	= 266,
-	.clk_opp25	= 0,
-	.default_opp_mode	= C2C_OPP50,
+#ifdef CONFIG_C2C_IPC_ONLY
+struct exynos_c2c_platdata smdk4412_c2c_pdata = {
+	.setup_gpio = NULL,
+	.shdmem_addr = C2C_SHAREDMEM_BASE,
+#if 0
+	.shdmem_size = C2C_MEMSIZE_4,
+#else
+	.shdmem_size = C2C_MEMSIZE_64,
+#endif
+	.ap_sscm_addr = NULL,
+	.cp_sscm_addr = NULL,
+	.rx_width = C2C_BUSWIDTH_8,
+	.tx_width = C2C_BUSWIDTH_8,
+	.clk_opp100 = 133,
+	.clk_opp50 = 66,
+	.clk_opp25 = 0,
+	.default_opp_mode = C2C_OPP100,
+	.get_c2c_state = NULL,
+	.c2c_sysreg = S5P_VA_CMU + 0x12000,
+};
+#else
+struct exynos_c2c_platdata smdk4412_c2c_pdata = {
+	.setup_gpio = NULL,
+	.shdmem_addr = C2C_SHAREDMEM_BASE,
+	.shdmem_size = C2C_MEMSIZE_64,
+	.ap_sscm_addr = NULL,
+	.cp_sscm_addr = NULL,
+	.rx_width = C2C_BUSWIDTH_16,
+	.tx_width = C2C_BUSWIDTH_16,
+	.clk_opp100 = 400,
+	.clk_opp50 = 266,
+	.clk_opp25 = 0,
+	.default_opp_mode = C2C_OPP50,
 	.get_c2c_state	= NULL,
 };
-#endif
+#endif /* CONFIG_C2C_IPC_ONLY */
+#endif /* CONFIG_EXYNOS_C2C */
+
 /* BUSFREQ to control memory/bus */
 static struct device_domain busfreq;
 
@@ -1898,6 +2165,9 @@
 #elif defined(CONFIG_SENSORS_CM36651)
 	.sda_pin	= GPIO_RGB_SDA_1_8V,
 	.scl_pin	= GPIO_RGB_SCL_1_8V,
+#elif defined(CONFIG_SENSORS_GP2A)
+	.sda_pin	= GPIO_PS_ALS_SDA_28V,
+	.scl_pin	= GPIO_PS_ALS_SCL_28V,
 #endif
 	.udelay	= 2, /* 250KHz */
 	.sda_is_open_drain	= 0,
@@ -1945,6 +2215,23 @@
 };
 #endif
 
+#ifdef CONFIG_SENSORS_AK8963
+static struct i2c_gpio_platform_data i2c10_platdata = {
+	.sda_pin	= GPIO_MSENSOR_SDA_18V,
+	.scl_pin	= GPIO_MSENSOR_SCL_18V,
+	.udelay	= 2, /* 250KHz */
+	.sda_is_open_drain	= 0,
+	.scl_is_open_drain	= 0,
+	.scl_is_output_only = 0,
+};
+
+static struct platform_device s3c_device_i2c10 = {
+	.name	= "i2c-gpio",
+	.id	= 10,
+	.dev.platform_data	= &i2c10_platdata,
+};
+#endif
+
 #ifdef CONFIG_SENSORS_LPS331
 static struct i2c_gpio_platform_data i2c11_platdata = {
 	.sda_pin	= GPIO_BSENSE_SDA_18V,
@@ -1988,12 +2275,13 @@
 
 	/* max77693 otg power control */
 	otg_control(enable);
-
+#if !defined(CONFIG_MACH_M3_USA_TMO)
 	err = gpio_request(GPIO_OTG_EN, "USB_OTG_EN");
 	if (err)
 		printk(KERN_ERR "failed to request USB_OTG_EN\n");
 	gpio_direction_output(GPIO_OTG_EN, on);
 	gpio_free(GPIO_OTG_EN);
+#endif
 	pr_info("%s: otg accessory power = %d\n", __func__, on);
 }
 
@@ -2096,52 +2384,6 @@
 
 #endif
 
-#ifdef CONFIG_CPUPOWER
-#include <linux/power/cpupower.h>
-static unsigned int table_default_power[1] = {
-	1024
-};
-
-static struct cputopo_power default_cpu_power = {
-	.max  = 1,
-	.step = 1,
-	.table = table_default_power,
-};
-
-static unsigned int table_ca9_power[18] = {
-/* freq< 
-    200  300  400  500
-    600  700  800  900
-   1000 1100 1200 1300
-   1400 1500 1600 1700
-   1800 other*/
-	8192, 8192, 8192, 8192,
-	8192, 1024, 1024, 1024,
-	1024, 1024, 1024, 1024,
-	1024, 1024, 1024, 1024,
-	1024, 1024,
-};
-
-static struct cputopo_power CA9_cpu_power = {
-	.max  = 18,
-	.step = 100000,
-	.table = table_ca9_power,
-};
-
-/* This table list all possible cpu power configuration */
-static struct cputopo_power *midas_cpupower_data[2] = {
-	&default_cpu_power,
-	&CA9_cpu_power,
-};
-
-static struct platform_device midas_cpupower_dev = {
-	.name = "cpupower",
-	.dev = {
-		.platform_data = midas_cpupower_data,
-	},
-};
-#endif
-
 static struct platform_device *midas_devices[] __initdata = {
 #ifdef CONFIG_SEC_WATCHDOG_RESET
 	&watchdog_reset_device,
@@ -2195,7 +2437,10 @@
 #ifdef CONFIG_S3C_DEV_I2C4
 	&s3c_device_i2c4,
 #endif
-	/* &s3c_device_i2c5, */
+
+#ifdef CONFIG_MACH_GC1
+	&s3c_device_i2c5,
+#endif
 
 #if defined(CONFIG_AUDIENCE_ES305) || defined(CONFIG_MACH_T0_EUR_OPEN) || defined(CONFIG_MACH_T0_CHN_OPEN)
 	&s3c_device_i2c6,
@@ -2209,6 +2454,9 @@
 #ifdef CONFIG_SENSORS_AK8963C
 	&s3c_device_i2c10,
 #endif
+#ifdef CONFIG_SENSORS_AK8963
+	&s3c_device_i2c10,
+#endif
 
 #ifdef CONFIG_SENSORS_LPS331
 	&s3c_device_i2c11,
@@ -2410,9 +2658,6 @@
 	&coresight_funnel_device,
 	&coresight_etm_device,
 #endif
-#ifdef CONFIG_CPUPOWER
-	&midas_cpupower_dev,
-#endif
 };
 
 #ifdef CONFIG_EXYNOS4_SETUP_THERMAL
@@ -2512,6 +2757,16 @@
 static void __init exynos4_reserve_mem(void)
 {
 	static struct cma_region regions[] = {
+#ifdef CONFIG_EXYNOS_C2C
+		{
+			.name = "c2c_shdmem",
+			.size = C2C_SHAREDMEM_SIZE,
+			{
+				.alignment = C2C_SHAREDMEM_SIZE,
+			},
+			.start = C2C_SHAREDMEM_BASE
+		},
+#endif
 #ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
 		{
 			.name = "fimc_is",
@@ -2608,7 +2863,7 @@
 			.name = "fimc1",
 			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC1 * SZ_1K,
 #if defined(CONFIG_MACH_GC1)
-			.start = 0x5ec00000,
+			.start = 0x5e800000,
 #else
 			.start = 0x65c00000,
 #endif
@@ -2644,9 +2899,10 @@
 			.size = 0
 		},
 	};
+
 #ifdef CONFIG_EXYNOS_CONTENT_PATH_PROTECTION
 	static struct cma_region regions_secure[] = {
-#ifndef CONFIG_DMA_CMA
+#if !defined(CONFIG_DMA_CMA)
 #ifdef CONFIG_ION_EXYNOS_CONTIGHEAP_SIZE
 		{
 			.name	= "ion",
@@ -2663,7 +2919,7 @@
 			.name = "sectbl",
 			.size = SZ_1M,
 		},
-#else
+#else /*defined(CONFIG_DMA_CMA)*/
 #if defined(CONFIG_USE_MFC_CMA) && defined(CONFIG_MACH_M0)
 #ifdef CONFIG_ION_EXYNOS_CONTIGHEAP_SIZE
 		{
@@ -2684,6 +2940,26 @@
 			.size = SZ_1M,
 			.start = 0x5C000000,
 		},
+#elif defined(CONFIG_USE_MFC_CMA) && defined(CONFIG_MACH_GC1)
+#ifdef CONFIG_ION_EXYNOS_CONTIGHEAP_SIZE
+		{
+			.name = "ion",
+			.size = CONFIG_ION_EXYNOS_CONTIGHEAP_SIZE * SZ_1K,
+			.start = 0x53300000,
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC_SECURE
+		{
+			.name = "mfc-secure",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC_SECURE * SZ_1K,
+			.start = 0x50200000,
+		},
+#endif
+		{
+			.name = "sectbl",
+			.size = SZ_1M,
+			.start = 0x50000000,
+		},
 #else
 #ifdef CONFIG_ION_EXYNOS_CONTIGHEAP_SIZE
 		{
@@ -2749,7 +3025,27 @@
 
 	s5p_cma_region_reserve(regions, regions_secure, 0, map);
 
-	if (!(fbmem_start && fbmem_size))
+	pr_err("[CMA] %s: regions\n", __func__);
+	for (i = 0; i < ARRAY_SIZE(regions); i++) {
+		if (regions[i].size == 0)
+			break;
+		pr_err("[CMA] %s: regions[%d] 0x%08X + 0x%07X (%s)\n",
+			__func__, i, regions[i].start, regions[i].size,
+			regions[i].name);
+	}
+
+#ifdef CONFIG_EXYNOS_CONTENT_PATH_PROTECTION
+	pr_err("[CMA] %s: regions_secure\n", __func__);
+	for (i = 0; i < ARRAY_SIZE(regions_secure); i++) {
+		if (regions_secure[i].size == 0)
+			break;
+		pr_err("[CMA] %s: regions_secure[%d] 0x%08X + 0x%07X (%s)\n",
+			__func__, i, regions_secure[i].start,
+			regions_secure[i].size, regions_secure[i].name);
+	}
+#endif
+
+	if (!fbmem_start || !fbmem_size)
 		return;
 
 	for (i = 0; i < ARRAY_SIZE(regions); i++) {
@@ -2900,6 +3196,29 @@
 #if defined(CONFIG_FELICA)
 static void felica_setup(void)
 {
+#if defined(CONFIG_MACH_M3_JPN_DCM)
+	if (system_rev < 3) {
+		/* I2C SDA GPY2[4] */
+		gpio_request(FELICA_GPIO_I2C_SDA_R1, FELICA_GPIO_I2C_SDA_NAME);
+		s3c_gpio_setpull(FELICA_GPIO_I2C_SDA_R1, S3C_GPIO_PULL_DOWN);
+		gpio_free(FELICA_GPIO_I2C_SDA_R1);
+
+		/* I2C SCL GPY2[5] */
+		gpio_request(FELICA_GPIO_I2C_SCL_R1, FELICA_GPIO_I2C_SCL_NAME);
+		s3c_gpio_setpull(FELICA_GPIO_I2C_SCL_R1, S3C_GPIO_PULL_DOWN);
+		gpio_free(FELICA_GPIO_I2C_SCL_R1);
+	} else {
+		/* I2C SDA GPY2[4] */
+		gpio_request(FELICA_GPIO_I2C_SDA, FELICA_GPIO_I2C_SDA_NAME);
+		s3c_gpio_setpull(FELICA_GPIO_I2C_SDA, S3C_GPIO_PULL_DOWN);
+		gpio_free(FELICA_GPIO_I2C_SDA);
+
+		/* I2C SCL GPY2[5] */
+		gpio_request(FELICA_GPIO_I2C_SCL, FELICA_GPIO_I2C_SCL_NAME);
+		s3c_gpio_setpull(FELICA_GPIO_I2C_SCL, S3C_GPIO_PULL_DOWN);
+		gpio_free(FELICA_GPIO_I2C_SCL);
+	}
+#elif defined(CONFIG_MACH_T0_JPN_LTE_DCM)
 	/* I2C SDA GPY2[4] */
 	gpio_request(FELICA_GPIO_I2C_SDA, FELICA_GPIO_I2C_SDA_NAME);
 	s3c_gpio_setpull(FELICA_GPIO_I2C_SDA, S3C_GPIO_PULL_DOWN);
@@ -2909,7 +3228,7 @@
 	gpio_request(FELICA_GPIO_I2C_SCL, FELICA_GPIO_I2C_SCL_NAME);
 	s3c_gpio_setpull(FELICA_GPIO_I2C_SCL, S3C_GPIO_PULL_DOWN);
 	gpio_free(FELICA_GPIO_I2C_SCL);
-
+#endif
 	/* PON GPL2[7] */
 	gpio_request(FELICA_GPIO_PON, FELICA_GPIO_PON_NAME);
 	s3c_gpio_setpull(FELICA_GPIO_PON, S3C_GPIO_PULL_DOWN);
@@ -2957,6 +3276,18 @@
 	  */
 	__raw_writel(0x0, S5P_CMU_RESET_ISP_SYS);
 
+#if defined(CONFIG_MACH_M3_JPN_DCM)
+	if (system_rev < 3) {
+		i2c10_platdata.sda_pin = GPIO_MSENSOR_SDA_18V_R1;
+		i2c10_platdata.scl_pin = GPIO_MSENSOR_SCL_18V_R1;
+#ifdef CONFIG_BATTERY_WPC_CHARGER
+		max77693_charger_pdata.vbus_irq_gpio = GPIO_V_BUS_INT_R1;
+#endif
+		i2c30_gpio_platdata.sda_pin = FELICA_GPIO_I2C_SDA_R1;
+		i2c30_gpio_platdata.scl_pin = FELICA_GPIO_I2C_SCL_R1;
+	}
+#endif
+
 	/* initialise the gpios */
 	midas_config_gpio_table();
 	exynos4_sleep_gpio_table_set = midas_config_sleep_gpio_table;
@@ -2981,15 +3312,18 @@
 	s3c_i2c3_set_platdata(NULL);
 	midas_tsp_init();
 #ifndef CONFIG_TOUCHSCREEN_MELFAS_GC
+#ifndef CONFIG_TOUCHSCREEN_CYPRESS_TMA46X
 	midas_tsp_set_lcdtype(lcdtype);
 #endif
+#endif
 
 #ifdef CONFIG_LEDS_AAT1290A
 	platform_device_register(&s3c_device_aat1290a_led);
 #endif
 
 #ifdef CONFIG_S3C_DEV_I2C4
-#if defined(CONFIG_MACH_T0)
+#if defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_M3) \
+	|| defined(CONFIG_MACH_BAFFIN)
 	s3c_i2c4_set_platdata(NULL);
 #else
 	s3c_i2c4_set_platdata(NULL);
@@ -3001,6 +3335,10 @@
 #endif /* CONFIG_S3C_DEV_I2C4 */
 	midas_sound_init();
 
+#ifdef CONFIG_MACH_GC1
+	i2c_register_board_info(5, i2c_devs5,
+			ARRAY_SIZE(i2c_devs5));
+#endif
 #ifdef CONFIG_S3C_DEV_I2C5
 #if defined(CONFIG_MACH_T0_EUR_OPEN) || defined(CONFIG_MACH_T0_CHN_OPEN)
 	s3c_i2c5_set_platdata(NULL);
@@ -3013,6 +3351,10 @@
 #endif
 #endif
 
+#ifdef CONFIG_MACH_GC1
+	s3c_i2c5_cfg_gpio_gc1();
+#endif
+
 #if defined(CONFIG_INPUT_WACOM)
 	midas_wacom_init();
 #endif
@@ -3082,7 +3424,14 @@
 	if (system_rev >= 9)
 		max77693_haptic_pdata.motor_en = motor_en;
 #endif
-#if defined(CONFIG_MACH_BAFFIN)
+#if defined(CONFIG_MACH_T0_JPN_LTE_DCM)
+	if (system_rev >= 12)
+		max77693_haptic_pdata.motor_en = motor_en;
+#endif
+#if defined(CONFIG_MACH_BAFFIN_KOR_SKT) || \
+	defined(CONFIG_MACH_BAFFIN_KOR_KT) || \
+	defined(CONFIG_MACH_BAFFIN_KOR_LGT)
+	if (system_rev >= 2)
 		max77693_haptic_pdata.motor_en = motor_en;
 #endif
 	i2c_register_board_info(17, i2c_devs17_emul,
@@ -3218,8 +3567,9 @@
 #ifdef CONFIG_VIDEO_FIMG2D
 	s5p_fimg2d_set_platdata(&fimg2d_data);
 #endif
+
 #ifdef CONFIG_EXYNOS_C2C
-	exynos_c2c_set_platdata(&smdk4212_c2c_pdata);
+	exynos_c2c_set_platdata(&smdk4412_c2c_pdata);
 #endif
 
 	brcm_wlan_init();
@@ -3233,7 +3583,10 @@
 	platform_add_devices(midas_devices, ARRAY_SIZE(midas_devices));
 
 #ifdef CONFIG_S3C_ADC
-#if defined(CONFIG_MACH_GC1) || defined(CONFIG_MACH_T0)
+#if defined(CONFIG_MACH_GC1) || \
+	defined(CONFIG_MACH_T0) || \
+	defined(CONFIG_MACH_M3) || \
+	defined(CONFIG_MACH_BAFFIN)
 	platform_device_register(&s3c_device_adc);
 #else
 	if (system_rev != 3)
@@ -3251,6 +3604,9 @@
 #ifdef CONFIG_SEC_THERMISTOR
 	platform_device_register(&sec_device_thermistor);
 #endif
+#ifdef CONFIG_SEC_SUBTHERMISTOR
+	platform_device_register(&sec_device_subthermistor);
+#endif
 #if defined(CONFIG_MACH_M0_CTC)
 	midas_gpiokeys_platform_data.buttons = m0_buttons;
 	midas_gpiokeys_platform_data.nbuttons = ARRAY_SIZE(m0_buttons);
@@ -3292,12 +3648,49 @@
 #elif defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_M3)
 	midas_gpiokeys_platform_data.buttons = t0_buttons;
 	midas_gpiokeys_platform_data.nbuttons = ARRAY_SIZE(t0_buttons);
-#elif defined(CONFIG_MACH_BAFFIN)
-	s3c_gpio_setpull(GPIO_OK_KEY_ANDROID, S3C_GPIO_PULL_NONE);
-	midas_gpiokeys_platform_data.buttons = c1_rev04_buttons;
+#if defined(CONFIG_MACH_M3_USA_TMO)
+	if (system_rev == 0) {
+		midas_gpiokeys_platform_data.buttons = m3_uas_tmo_00_buttons;
+		midas_gpiokeys_platform_data.nbuttons =
+				ARRAY_SIZE(m3_uas_tmo_00_buttons);
+	} else {
+		midas_gpiokeys_platform_data.buttons = t0_buttons;
+		midas_gpiokeys_platform_data.nbuttons = ARRAY_SIZE(t0_buttons);
+	}
+#endif
+
+#elif defined(CONFIG_MACH_BAFFIN_KOR_SKT) || \
+	defined(CONFIG_MACH_BAFFIN_KOR_KT)
+	if (system_rev >= 0x4) {
+		s3c_gpio_setpull(GPIO_OK_KEY_ANDROID, S3C_GPIO_PULL_UP);
+		midas_gpiokeys_platform_data.buttons = baffin_kor_rev06_buttons;
+		midas_gpiokeys_platform_data.nbuttons =
+			ARRAY_SIZE(baffin_kor_rev06_buttons);
+	} else {
+		s3c_gpio_setpull(GPIO_OK_KEY_ANDROID, S3C_GPIO_PULL_UP);
+		midas_gpiokeys_platform_data.buttons = baffin_kor_buttons;
+		midas_gpiokeys_platform_data.nbuttons =
+			ARRAY_SIZE(baffin_kor_buttons);
+	}
+#elif defined(CONFIG_MACH_BAFFIN_KOR_LGT)
+	if (system_rev >= 0x5) {
+		s3c_gpio_setpull(GPIO_OK_KEY_ANDROID, S3C_GPIO_PULL_UP);
+		midas_gpiokeys_platform_data.buttons = baffin_kor_rev06_buttons;
+		midas_gpiokeys_platform_data.nbuttons =
+			ARRAY_SIZE(baffin_kor_rev06_buttons);
+	} else {
+		s3c_gpio_setpull(GPIO_OK_KEY_ANDROID, S3C_GPIO_PULL_UP);
+		midas_gpiokeys_platform_data.buttons = baffin_kor_buttons;
+		midas_gpiokeys_platform_data.nbuttons =
+			ARRAY_SIZE(baffin_kor_buttons);
+	}
+#elif defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	s3c_gpio_setpull(GPIO_OK_KEY_ANDROID, S3C_GPIO_PULL_UP);
+	midas_gpiokeys_platform_data.buttons = baffin_kor_buttons;
 	midas_gpiokeys_platform_data.nbuttons =
-		ARRAY_SIZE(c1_rev04_buttons);
+		ARRAY_SIZE(baffin_kor_buttons);
 #endif
+
 #ifdef CONFIG_MACH_GC1
 	/*for emul type*/
 	if (system_rev < 2) {
@@ -3311,6 +3704,11 @@
 		midas_buttons[6].code = KEY_PLAY;
 		midas_buttons[6].gpio = GPIO_PLAY_KEY;
 	}
+	/*strobe open/close*/
+	gpio_request(STR_PU_DET_18V, "STR_PU_DET_18V");
+	s3c_gpio_cfgpin(STR_PU_DET_18V, S3C_GPIO_SFN(0xf));
+	s5p_register_gpio_interrupt(STR_PU_DET_18V);
+	gpio_direction_input(STR_PU_DET_18V);
 #endif
 	platform_device_register(&midas_keypad);
 
@@ -3425,7 +3823,7 @@
 	/* 400 kHz for initialization of MMC Card  */
 	__raw_writel((__raw_readl(EXYNOS4_CLKDIV_FSYS3) & 0xfffffff0)
 		     | 0x9, EXYNOS4_CLKDIV_FSYS3);
-#ifdef CONFIG_MACH_T0
+#if defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_M3_JPN_DCM)
 	__raw_writel((__raw_readl(EXYNOS4_CLKDIV_FSYS2) & 0xfff0fff0)
 		     | 0x90009, EXYNOS4_CLKDIV_FSYS2);
 #else
@@ -3434,25 +3832,11 @@
 #endif
 	__raw_writel((__raw_readl(EXYNOS4_CLKDIV_FSYS1) & 0xfff0fff0)
 		     | 0x80008, EXYNOS4_CLKDIV_FSYS1);
-}
-
-#ifdef CONFIG_EXYNOS_C2C
-static void __init exynos_c2c_reserve(void)
-{
-	static struct cma_region region = {
-			.name = "c2c_shdmem",
-			.size = 64 * SZ_1M,
-			{ .alignment	= 64 * SZ_1M },
-			.start = C2C_SHAREDMEM_BASE
-	};
-
-	BUG_ON(cma_early_region_register(&region));
-	BUG_ON(cma_early_region_reserve(&region));
-
-	pr_info("%s %10s %8x %8x\n", __func__,
-		region.name, region.start, region.size);
-}
+#if defined(CONFIG_MACH_SUPERIOR_KOR_SKT) || defined(CONFIG_MACH_BAFFIN)
+	__raw_writel((__raw_readl(S5P_EINT_FLTCON(7)) & 0xffffff00)
+		     | 0xff, S5P_EINT_FLTCON(7));
 #endif
+}
 
 #ifdef CONFIG_DMA_CMA
 static void __init exynos4_reserve(void)
@@ -3469,6 +3853,9 @@
 #if defined(CONFIG_USE_MFC_CMA) && defined(CONFIG_MACH_M0)
 	ret = dma_declare_contiguous(&s5p_device_mfc.dev,
 			0x02800000, 0x5C800000, 0);
+#elif defined(CONFIG_USE_MFC_CMA) && defined(CONFIG_MACH_GC1)
+	ret = dma_declare_contiguous(&s5p_device_mfc.dev,
+			0x02800000, 0x50800000, 0);
 #endif
 	if (ret != 0)
 		printk(KERN_ERR "%s Fail\n", __func__);
@@ -3486,9 +3873,7 @@
 	.map_io		= midas_map_io,
 	.init_machine	= midas_machine_init,
 	.timer		= &exynos4_timer,
-#if defined(CONFIG_EXYNOS_C2C)
-	.reserve	= &exynos_c2c_reserve,
-#elif defined(CONFIG_DMA_CMA)
+#if defined(CONFIG_DMA_CMA)
 	.reserve	= &exynos4_reserve,
 #endif
 	.init_early	= &exynos_init_reserve,
@@ -3500,9 +3885,7 @@
 	.map_io		= midas_map_io,
 	.init_machine	= midas_machine_init,
 	.timer		= &exynos4_timer,
-#if defined(CONFIG_EXYNOS_C2C)
-	.reserve	= &exynos_c2c_reserve,
-#elif defined(CONFIG_DMA_CMA)
+#if defined(CONFIG_DMA_CMA)
 	.reserve	= &exynos4_reserve,
 #endif
 	.init_early	= &exynos_init_reserve,
diff -Naur ./arch/arm/mach-exynos/mach-p10.c ../../HK_JB/Kernel/arch/arm/mach-exynos/mach-p10.c
--- ./arch/arm/mach-exynos/mach-p10.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/mach-p10.c	2012-11-22 09:13:15.000000000 +0100
@@ -0,0 +1,3123 @@
+/* linux/arch/arm/mach-exynos/mach-p10.c
+ *
+ * Copyright (c) 2011 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+*/
+
+#include <linux/platform_device.h>
+#include <linux/serial_core.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/spi_gpio.h>
+#include <linux/clk.h>
+#include <linux/gpio.h>
+#include <linux/gpio_event.h>
+#include <linux/gpio_keys.h>
+#include <linux/i2c.h>
+#include <linux/i2c-gpio.h>
+#include <linux/pwm_backlight.h>
+#include <linux/regulator/machine.h>
+#include <linux/regulator/fixed.h>
+#include <linux/mmc/host.h>
+#include <linux/memblock.h>
+#include <linux/fb.h>
+#include <linux/delay.h>
+#include <linux/notifier.h>
+#include <linux/reboot.h>
+
+#include <video/platform_lcd.h>
+#include <video/s5p-dp.h>
+
+#include <asm/mach/arch.h>
+#include <asm/mach-types.h>
+
+#include <media/exynos_gscaler.h>
+#include <media/exynos_flite.h>
+#include <media/exynos_fimc_is.h>
+#include <plat/gpio-cfg.h>
+#include <plat/adc.h>
+#include <plat/regs-serial.h>
+#include <plat/exynos5.h>
+#include <plat/cpu.h>
+#include <plat/clock.h>
+#include <plat/hwmon.h>
+#include <plat/devs.h>
+#include <plat/sdhci.h>
+
+#include <plat/fb.h>
+#include <plat/fb-s5p.h>
+#include <plat/fb-core.h>
+#include <plat/regs-fb-v4.h>
+#include <plat/iic.h>
+#include <plat/pd.h>
+#include <plat/ehci.h>
+#include <plat/s5p-mfc.h>
+#include <plat/dp.h>
+#include <plat/backlight.h>
+#include <plat/usbgadget.h>
+#include <plat/fimg2d.h>
+#include <plat/tv-core.h>
+#include <plat/s3c64xx-spi.h>
+
+#include <plat/mipi_csis.h>
+#include <mach/map.h>
+#include <mach/exynos-ion.h>
+#include <mach/sysmmu.h>
+#include <mach/spi-clocks.h>
+#include <mach/ppmu.h>
+#include <mach/dev.h>
+#include <mach/pmu.h>
+#include <mach/regs-pmu.h>
+#include <mach/dwmci.h>
+#ifdef CONFIG_VIDEO_JPEG_V2X
+#include <plat/jpeg.h>
+#endif
+
+#ifdef CONFIG_EXYNOS_C2C
+#include <mach/c2c.h>
+#endif
+
+#ifdef CONFIG_VIDEO_EXYNOS_TV
+#include <plat/tvout.h>
+#endif
+
+#ifdef CONFIG_MFD_MAX77686
+#include <linux/mfd/max77686.h>
+#endif
+
+#ifdef CONFIG_SENSORS_BH1721FVC
+#include <linux/bh1721fvc.h>
+#endif
+
+#include <mach/gpio-p10.h>
+#include <mach/regs-clock.h>
+#include <mach/regs-pmu5.h>
+#include <mach/midas-sound.h>
+
+#if defined(CONFIG_SEC_DEBUG)
+#include <mach/sec_debug.h>
+#endif
+
+#ifdef CONFIG_MPU_SENSORS_MPU6050
+#include <linux/mpu_411.h>
+#endif
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+#include <plat/s5p-tmu.h>
+#include <mach/regs-tmu.h>
+#endif
+#include <plat/media.h>
+
+#ifdef CONFIG_BATTERY_SAMSUNG_P1X
+#include <mach/p10-battery.h>
+#endif
+
+#ifdef CONFIG_STMPE811_ADC
+#include <linux/stmpe811-adc.h>
+struct stmpe811_platform_data stmpe811_pdata;
+#endif
+
+#include <mach/p10-input.h>
+#ifdef CONFIG_LEDS_SPFCW043
+#include <linux/leds-spfcw043.h>
+#endif
+
+#include "p10-wlan.h"
+
+#ifdef CONFIG_FB_S5P_EXTDSP
+struct s3cfb_extdsp_lcd {
+	int	width;
+	int	height;
+	int	bpp;
+};
+#endif
+
+#ifdef CONFIG_MPU_SENSORS_MPU6050
+	struct mpu_platform_data mpu6050_data = {
+	.int_config = 0x10,
+	.orientation = {0, 1, 0,
+			1, 0, 0,
+			0, 0, -1},
+	.enable_irq_handler = NULL,
+	};
+
+static struct ext_slave_platform_data mpu_ak8975_data = {
+	.bus		= EXT_SLAVE_BUS_PRIMARY,
+	.adapt_num	= 11,
+	.orientation = {1, 0, 0,
+			0, 1, 0,
+			0, 0, 1},
+	.address = 0x0C,
+	.irq = IRQ_EINT(18),
+	};
+
+static struct i2c_gpio_platform_data gpio_i2c_data11 = {
+	.sda_pin = GPIO_MSENSE_SDA,
+	.scl_pin = GPIO_MSENSE_SCL,
+};
+
+struct platform_device s3c_device_i2c11 = {
+	.name = "i2c-gpio",
+	.id = 11,
+	.dev.platform_data = &gpio_i2c_data11,
+};
+
+static struct i2c_board_info i2c_devs11[] __initdata = {
+	{
+		I2C_BOARD_INFO("ak8975_mod", 0x0C),
+		.irq = IRQ_EINT(18),
+		.platform_data = &mpu_ak8975_data,
+	},
+};
+
+static struct i2c_board_info i2c_devs1[] __initdata = {
+	{
+		I2C_BOARD_INFO("mpu6050",0x68),
+		.irq = IRQ_EINT(12),
+		.platform_data = &mpu6050_data,
+	},
+/*
+	{
+		I2C_BOARD_INFO("ak8975_mod",0x0C),
+		.irq = IRQ_EINT(18),
+		.platform_data = &mpu_ak8975_data,
+	},
+*/
+};
+
+void magnetic_init()
+{
+	pr_info("%s : AK8963C Init", __func__);
+	s3c_gpio_cfgpin(GPIO_MSENSE_RST, S3C_GPIO_SFN(S3C_GPIO_OUTPUT));
+	s3c_gpio_setpull(GPIO_MSENSE_RST, S3C_GPIO_PULL_UP);
+	gpio_set_value(GPIO_MSENSE_RST, 0);
+	usleep_range(20, 20);
+	gpio_set_value(GPIO_MSENSE_RST, 1);
+}
+
+#else
+static struct i2c_board_info i2c_devs1[] __initdata = {
+	{
+		I2C_BOARD_INFO("dummy", (0x10)),
+	}
+};
+#endif /* CONFIG_MPU_SENSORS_MPU6050 */
+
+
+#define REG_INFORM4	       (S5P_INFORM4)
+
+/* Following are default values for UCON, ULCON and UFCON UART registers */
+#define SMDK5250_UCON_DEFAULT	(S3C2410_UCON_TXILEVEL |	\
+				 S3C2410_UCON_RXILEVEL |	\
+				 S3C2410_UCON_TXIRQMODE |	\
+				 S3C2410_UCON_RXIRQMODE |	\
+				 S3C2410_UCON_RXFIFO_TOI |	\
+				 S3C2443_UCON_RXERR_IRQEN)
+
+#define SMDK5250_ULCON_DEFAULT	S3C2410_LCON_CS8
+
+#define SMDK5250_UFCON_DEFAULT	(S3C2410_UFCON_FIFOMODE |	\
+				 S5PV210_UFCON_TXTRIG4 |	\
+				 S5PV210_UFCON_RXTRIG4)
+
+#ifdef CONFIG_30PIN_CONN
+#include <linux/30pin_con.h>
+#endif
+
+#ifdef CONFIG_MOTOR_DRV_ISA1200
+#include <linux/isa1200_vibrator.h>
+#endif
+
+static struct s3c2410_uartcfg smdk5250_uartcfgs[] __initdata = {
+	[0] = {
+		.hwport		= 0,
+		.flags		= 0,
+		.ucon		= SMDK5250_UCON_DEFAULT,
+		.ulcon		= SMDK5250_ULCON_DEFAULT,
+		.ufcon		= SMDK5250_UFCON_DEFAULT,
+	},
+	[1] = {
+		.hwport		= 1,
+		.flags		= 0,
+		.ucon		= SMDK5250_UCON_DEFAULT,
+		.ulcon		= SMDK5250_ULCON_DEFAULT,
+		.ufcon		= SMDK5250_UFCON_DEFAULT,
+	},
+	[2] = {
+		.hwport		= 2,
+		.flags		= 0,
+		.ucon		= SMDK5250_UCON_DEFAULT,
+		.ulcon		= SMDK5250_ULCON_DEFAULT,
+		.ufcon		= SMDK5250_UFCON_DEFAULT,
+	},
+	[3] = {
+		.hwport		= 3,
+		.flags		= 0,
+		.ucon		= SMDK5250_UCON_DEFAULT,
+		.ulcon		= SMDK5250_ULCON_DEFAULT,
+		.ufcon		= SMDK5250_UFCON_DEFAULT,
+	},
+};
+
+#ifdef CONFIG_EXYNOS_MEDIA_DEVICE
+struct platform_device exynos_device_md0 = {
+	.name = "exynos-mdev",
+	.id = 0,
+};
+
+struct platform_device exynos_device_md1 = {
+	.name = "exynos-mdev",
+	.id = 1,
+};
+struct platform_device exynos_device_md2 = {
+	.name = "exynos-mdev",
+	.id = 2,
+};
+#endif
+
+#if defined(CONFIG_DP_40HZ_P10)
+#define FPS 40
+#elif defined(CONFIG_DP_60HZ_P10)
+#define FPS 60
+#endif
+#ifdef CONFIG_FB_S3C
+#if defined(CONFIG_MACH_P10_DP_01)
+
+static struct s3c_fb_pd_win p10_fb_win0 = {
+	.win_mode = {
+		.refresh	= FPS,
+		.left_margin	= 80,
+		.right_margin	= 48,
+		.upper_margin	= 37,
+		.lower_margin	= 3,
+		.hsync_len	= 32,
+		.vsync_len	= 6,
+		.xres		= 2560,
+		.yres		= 1600,
+	},
+	.virtual_x		= 2560,
+	.virtual_y		= 1640 * 2,
+	.max_bpp		= 32,
+	.default_bpp		= 24,
+};
+
+static struct s3c_fb_pd_win p10_fb_win1 = {
+	.win_mode = {
+		.refresh	= FPS,
+		.left_margin	= 80,
+		.right_margin	= 48,
+		.upper_margin	= 37,
+		.lower_margin	= 3,
+		.hsync_len	= 32,
+		.vsync_len	= 6,
+		.xres		= 2560,
+		.yres		= 1600,
+	},
+
+	.virtual_x		= 2560,
+	.virtual_y		= 1640 * 2,
+	.max_bpp		= 32,
+	.default_bpp		= 24,
+
+};
+
+static struct s3c_fb_pd_win p10_fb_win2 = {
+	.win_mode = {
+		.refresh	= FPS,
+		.left_margin	= 80,
+		.right_margin	= 48,
+		.upper_margin	= 37,
+		.lower_margin	= 3,
+		.hsync_len	= 32,
+		.vsync_len	= 6,
+		.xres		= 2560,
+		.yres		= 1600,
+	},
+
+	.virtual_x		= 2560,
+	.virtual_y		= 1640 * 2,
+	.max_bpp		= 32,
+	.default_bpp		= 24,
+
+};
+
+static struct s3c_fb_pd_win p10_fb_win3 = {
+	.win_mode = {
+		.refresh	= FPS,
+		.left_margin	= 80,
+		.right_margin	= 48,
+		.upper_margin	= 37,
+		.lower_margin	= 3,
+		.hsync_len	= 32,
+		.vsync_len	= 6,
+		.xres		= 2560,
+		.yres		= 1600,
+	},
+
+	.virtual_x		= 2560,
+	.virtual_y		= 1640 * 2,
+	.max_bpp		= 32,
+	.default_bpp		= 24,
+
+};
+
+static struct s3c_fb_pd_win p10_fb_win4 = {
+	.win_mode = {
+		.refresh	= FPS,
+		.left_margin	= 80,
+		.right_margin	= 48,
+		.upper_margin	= 37,
+		.lower_margin	= 3,
+		.hsync_len	= 32,
+		.vsync_len	= 6,
+		.xres		= 2560,
+		.yres		= 1600,
+	},
+
+	.virtual_x		= 2560,
+	.virtual_y		= 1640 * 2,
+	.max_bpp		= 32,
+	.default_bpp		= 24,
+
+};
+
+#elif defined(CONFIG_MACH_P10_DP_00)
+
+static struct s3c_fb_pd_win p10_fb_win0 = {
+	.win_mode = {
+		.refresh	= 20,
+		.left_margin	= 40,
+		.right_margin	= 24,
+		.upper_margin	= 20,
+		.lower_margin	= 3,
+		.hsync_len	= 16,
+		.vsync_len	= 6,
+		.xres		= 2560,
+		.yres		= 1600,
+	},
+	.virtual_x		= 2560,
+	.virtual_y		= 1640 * 2,
+	.max_bpp		= 32,
+	.default_bpp		= 24,
+};
+
+static struct s3c_fb_pd_win p10_fb_win1 = {
+	.win_mode = {
+		.refresh	= 20,
+		.left_margin	= 40,
+		.right_margin	= 24,
+		.upper_margin	= 20,
+		.lower_margin	= 3,
+		.hsync_len	= 16,
+		.vsync_len	= 6,
+		.xres		= 2560,
+		.yres		= 1600,
+
+	},
+	.virtual_x		= 2560,
+	.virtual_y		= 1640 * 2,
+	.max_bpp		= 32,
+	.default_bpp		= 24,
+
+};
+
+static struct s3c_fb_pd_win p10_fb_win2 = {
+	.win_mode = {
+		.refresh	= 20,
+		.left_margin	= 40,
+		.right_margin	= 24,
+		.upper_margin	= 20,
+		.lower_margin	= 3,
+		.hsync_len	= 16,
+		.vsync_len	= 6,
+		.xres		= 2560,
+		.yres		= 1600,
+
+	},
+	.virtual_x		= 2560,
+	.virtual_y		= 1640 * 2,
+	.max_bpp		= 32,
+	.default_bpp		= 24,
+
+};
+#endif
+static void exynos_fimd_gpio_setup_24bpp(void)
+{
+	unsigned int reg = 0;
+	unsigned int uRead = 0;
+
+#if defined(CONFIG_S5P_DP)
+		/* Set Hotplug detect for DP */
+		s3c_gpio_cfgpin(GPIO_DP_HPD, S3C_GPIO_SFN(3));
+#endif
+	/*
+	 * Set DISP1BLK_CFG register for Display path selection
+	 *
+	 * FIMD of DISP1_BLK Bypass selection : DISP1BLK_CFG[15]
+	 * ---------------------
+	 *  0 | MIE/MDNIE
+	 *  1 | FIMD : selected
+	 */
+	reg = __raw_readl(S3C_VA_SYS + 0x0214);
+	reg &= ~(1 << 15);	/* To save other reset values */
+	reg |= (1 << 15);
+	__raw_writel(reg, S3C_VA_SYS + 0x0214);
+#if defined(CONFIG_S5P_DP)
+#if defined(CONFIG_MACH_P10_DP_01)
+	// MPLL => FIMD Bus clock
+	uRead = __raw_readl(EXYNOS5_CLKSRC_TOP0);
+	uRead = (uRead & ~(0x3<<14)) | (0x0<<14);
+	__raw_writel(uRead, EXYNOS5_CLKSRC_TOP0);
+
+	uRead = __raw_readl(EXYNOS5_CLKDIV_TOP0);
+	uRead = (uRead & ~(0x7<<28)) | (0x2<<28);
+	__raw_writel(uRead,EXYNOS5_CLKDIV_TOP0);
+
+	/* Reference clcok selection for DPTX_PHY: pad_osc_clk_24M */
+	reg = __raw_readl(S3C_VA_SYS + 0x04d4);
+	reg = (reg & ~(0x1 << 0)) | (0x0 << 0);
+	__raw_writel(reg, S3C_VA_SYS + 0x04d4);
+
+	/* DPTX_PHY: XXTI */
+	reg = __raw_readl(S3C_VA_SYS + 0x04d8);
+	reg = (reg & ~(0x1 << 3)) | (0x0 << 3);
+	__raw_writel(reg, S3C_VA_SYS + 0x04d8);
+#elif defined(CONFIG_MACH_P10_DP_00)
+
+	reg = __raw_readl(S3C_VA_SYS + 0x04d4);
+	reg |= (1 << 0);
+	__raw_writel(reg, S3C_VA_SYS + 0x04d4);
+
+	/* DPTX_PHY: XXTI */
+	reg = __raw_readl(S3C_VA_SYS + 0x04d8);
+	reg &= ~(1 << 3);
+	__raw_writel(reg, S3C_VA_SYS + 0x04d8);
+#endif
+#endif
+}
+
+static struct s3c_fb_platdata p10_lcd1_pdata __initdata = {
+	.win[0]		= &p10_fb_win0,
+	.win[1]		= &p10_fb_win1,
+	.win[2]		= &p10_fb_win2,
+	.win[3]		= &p10_fb_win3,
+	.win[4]		= &p10_fb_win4,
+	.default_win	= 2,
+	.vidcon0	= VIDCON0_VIDOUT_RGB | VIDCON0_PNRMODE_RGB,
+	.vidcon1	= 0,
+	.setup_gpio	= exynos_fimd_gpio_setup_24bpp,
+};
+#endif
+
+#if defined CONFIG_VIDEO_EXYNOS5_FIMC_IS
+static struct exynos5_platform_fimc_is exynos5_fimc_is_data;
+
+#if defined CONFIG_VIDEO_S5K4E5
+static struct exynos5_fimc_is_sensor_info s5k4e5= {
+	.sensor_name = "S5K4E5",
+	.sensor_id = SENSOR_NAME_S5K4E5,
+#if defined CONFIG_S5K4E5_POSITION_FRONT
+	.sensor_position = SENSOR_POSITION_FRONT,
+#elif  defined CONFIG_S5K4E5_POSITION_REAR
+	.sensor_position = SENSOR_POSITION_REAR,
+#endif
+#if defined CONFIG_S5K4E5_CSI_C
+	.csi_id = CSI_ID_A,
+	.flite_id = FLITE_ID_A,
+	.i2c_channel = SENSOR_CONTROL_I2C0,
+#elif  defined CONFIG_S5K4E5_CSI_D
+	.csi_id = CSI_ID_B,
+	.flite_id = FLITE_ID_B,
+	.i2c_channel = SENSOR_CONTROL_I2C1,
+#endif
+
+	.max_width = 2560,
+	.max_height = 1920,
+	.max_frame_rate = 30,
+
+	.mipi_lanes = 2,
+	.mipi_settle = 12,
+	.mipi_align = 24,
+};
+#endif
+
+#if defined CONFIG_VIDEO_S5K6A3
+static struct exynos5_fimc_is_sensor_info s5k6a3= {
+	.sensor_name = "S5K6A3",
+	.sensor_id = SENSOR_NAME_S5K6A3,
+#if defined CONFIG_S5K6A3_POSITION_FRONT
+	.sensor_position = SENSOR_POSITION_FRONT,
+#elif  defined CONFIG_S5K6A3_POSITION_REAR
+	.sensor_position = SENSOR_POSITION_REAR,
+#endif
+#if defined CONFIG_S5K6A3_CSI_C
+	.csi_id = CSI_ID_A,
+	.flite_id = FLITE_ID_A,
+	.i2c_channel = SENSOR_CONTROL_I2C0,
+#elif  defined CONFIG_S5K6A3_CSI_D
+	.csi_id = CSI_ID_B,
+	.flite_id = FLITE_ID_B,
+	.i2c_channel = SENSOR_CONTROL_I2C1,
+#endif
+
+	.max_width = 1280,
+	.max_height = 720,
+	.max_frame_rate = 30,
+
+	.mipi_lanes = 1,
+	.mipi_settle = 12,
+	.mipi_align = 24,
+};
+#endif
+#endif
+
+#ifdef CONFIG_S5P_DP
+static void dp_lcd_set_power(struct plat_lcd_data *pd,
+				unsigned int power)
+{
+	if (power) {
+
+		/* LCD_PWM_IN_2.8V, AH21, XPWMOUT_0 => LCD_B_PWM */
+#ifndef CONFIG_BACKLIGHT_PWM
+		gpio_request_one(GPIO_LCD_PWM_IN_18V, GPIOF_OUT_INIT_LOW, "GPB2");
+#endif
+
+#ifdef CONFIG_MACH_P10_00_BD
+		/* LCD_APS_EN_2.8V, R6, XCI1RGB_2 => GPG0_2 */
+		gpio_request_one(GPIO_LCD_APS_EN_18V, GPIOF_OUT_INIT_LOW, "GPG0");
+#endif
+		/* LCD_EN , XMMC2CDN => GPC2_2 */
+		gpio_request_one(GPIO_LCD_EN, GPIOF_OUT_INIT_LOW, "GPC2");
+
+		/* LCD_EN , XMMC2CDN => GPC2_2 */
+		gpio_set_value(GPIO_LCD_EN, 1);
+
+#ifdef CONFIG_MACH_P10_00_BD
+		/* LCD_APS_EN_2.8V, R6, XCI1RGB_2 => GPG0_2 */
+		gpio_set_value(GPIO_LCD_APS_EN_18V, 1);
+#endif
+
+		udelay(1000);
+
+		/* LCD_PWM_IN_2.8V, AH21, XPWMOUT_0=> LCD_B_PWM */
+#ifndef CONFIG_BACKLIGHT_PWM
+		gpio_set_value(GPIO_LCD_PWM_IN_18V, 1);
+#endif
+	} else {
+		/* LCD_PWM_IN_2.8V, AH21, XPWMOUT_0=> LCD_B_PWM */
+#ifndef CONFIG_BACKLIGHT_PWM
+		gpio_set_value(GPIO_LCD_PWM_IN_18V, 0);
+#endif
+
+#ifdef CONFIG_MACH_P10_00_BD
+		/* LCD_APS_EN_2.8V, R6, XCI1RGB_2 => GPG0_2 */
+		gpio_set_value(GPIO_LCD_APS_EN_18V, 0);
+#endif
+
+		/* LCD_EN , XMMC2CDN => GPC2_2 */
+		gpio_set_value(GPIO_LCD_EN, 0);
+
+#ifdef CONFIG_MACH_P10_00_BD
+		/* LCD_APS_EN_2.8V, R6, XCI1RGB_2 => GPG0_2 */
+		gpio_free(GPIO_LCD_APS_EN_18V);
+#endif
+
+		/* LCD_EN , XMMC2CDN => GPC2_2 */
+		gpio_free(GPIO_LCD_EN);
+
+#ifndef CONFIG_BACKLIGHT_PWM
+		gpio_free(GPIO_LCD_PWM_IN_18V);
+#endif
+	}
+}
+
+static struct plat_lcd_data p10_dp_lcd_data = {
+	.set_power	= dp_lcd_set_power,
+};
+
+static struct platform_device p10_dp_lcd = {
+	.name		   = "platform-lcd",
+	.dev.parent	   = &s5p_device_fimd1.dev,
+	.dev.platform_data = &p10_dp_lcd_data,
+};
+
+static struct video_info p10_dp_config = {
+	.name			= "for p10 TEST",
+#if defined(CONFIG_MACH_P10_DP_01)
+	.h_sync_polarity	= 0,
+	.v_sync_polarity	= 0,
+	.interlaced		= 0,
+
+	.color_space		= COLOR_RGB,
+	.dynamic_range		= VESA,
+	.ycbcr_coeff		= COLOR_YCBCR601,
+	.color_depth		= COLOR_8,
+
+	.link_rate		= LINK_RATE_2_70GBPS,
+	.lane_count		= LANE_COUNT4,
+
+#elif defined(CONFIG_MACH_P10_DP_00)
+
+	.h_sync_polarity	= 0,
+	.v_sync_polarity	= 0,
+	.interlaced		= 0,
+
+	.color_space		= COLOR_RGB,
+	.dynamic_range		= VESA,
+	.ycbcr_coeff		= COLOR_YCBCR601,
+	.color_depth		= COLOR_8,
+
+	.link_rate		= LINK_RATE_1_62GBPS,
+	.lane_count		= LANE_COUNT4,
+#endif
+};
+
+static void s5p_dp_backlight_on(void)
+{
+	/* LED_BACKLIGHT_RESET: XCI1RGB_5 => GPG0_5 */
+	gpio_request_one(GPIO_LED_BACKLIGHT_RESET, GPIOF_OUT_INIT_LOW, "GPG0");
+
+	gpio_set_value(GPIO_LED_BACKLIGHT_RESET, 1);
+}
+
+static void s5p_dp_backlight_off(void)
+{
+	/* LED_BACKLIGHT_RESET: XCI1RGB_5 => GPG0_5 */
+	gpio_set_value(GPIO_LED_BACKLIGHT_RESET, 0);
+
+	gpio_free(GPIO_LED_BACKLIGHT_RESET);
+
+}
+
+static struct s5p_dp_platdata p10_dp_data __initdata = {
+	.video_info = &p10_dp_config,
+	.phy_init	= s5p_dp_phy_init,
+	.phy_exit	= s5p_dp_phy_exit,
+	.backlight_on	= s5p_dp_backlight_on,
+	.backlight_off	= s5p_dp_backlight_off,
+};
+#endif
+
+/* LCD Backlight data */
+#ifdef CONFIG_BACKLIGHT_PWM
+static struct samsung_bl_gpio_info p10_bl_gpio_info = {
+	.no = GPIO_LCD_PWM_IN_18V,
+	.func = S3C_GPIO_SFN(2),
+};
+
+static struct platform_pwm_backlight_data p10_bl_data = {
+	.pwm_id = 0,
+	.pwm_period_ns	= 10000,
+};
+#endif
+
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+static struct s5p_mfc_platdata smdk5250_mfc_pd = {
+	.clock_rate = 333000000,
+};
+#endif
+
+#ifdef CONFIG_EXYNOS_C2C
+struct exynos_c2c_platdata smdk5250_c2c_pdata = {
+	.setup_gpio	= NULL,
+	.shdmem_addr	= C2C_SHAREDMEM_BASE,
+	.shdmem_size	= C2C_MEMSIZE_64,
+	.ap_sscm_addr	= NULL,
+	.cp_sscm_addr	= NULL,
+	.rx_width	= C2C_BUSWIDTH_16,
+	.tx_width	= C2C_BUSWIDTH_16,
+	.clk_opp100	= 400,
+	.clk_opp50	= 200,
+	.clk_opp25	= 100,
+	.default_opp_mode	= C2C_OPP25,
+	.get_c2c_state	= NULL,
+	.c2c_sysreg	= S3C_VA_SYS + 0x0360,
+};
+#endif
+
+static int exynos5_notifier_call(struct notifier_block *this,
+					unsigned long code, void *_cmd)
+{
+	int mode = 0;
+
+	if ((code == SYS_RESTART) && _cmd)
+		if (!strcmp((char *)_cmd, "recovery"))
+			mode = 0xf;
+
+	__raw_writel(mode, REG_INFORM4);
+
+	return NOTIFY_DONE;
+}
+
+static struct notifier_block exynos5_reboot_notifier = {
+	.notifier_call = exynos5_notifier_call,
+};
+
+#ifdef CONFIG_EXYNOS4_DEV_DWMCI
+static void exynos_dwmci_cfg_gpio(int width)
+{
+	unsigned int gpio;
+
+	for (gpio = EXYNOS5_GPC0(0); gpio < EXYNOS5_GPC0(2); gpio++) {
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+	}
+
+	switch (width) {
+	case MMC_BUS_WIDTH_8:
+		for (gpio = EXYNOS5_GPC1(3); gpio <= EXYNOS5_GPC1(6); gpio++) {
+			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(4));
+			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+		}
+	case MMC_BUS_WIDTH_4:
+		for (gpio = EXYNOS5_GPC0(3); gpio <= EXYNOS5_GPC0(6); gpio++) {
+			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
+			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+		}
+		break;
+	case MMC_BUS_WIDTH_1:
+		gpio = EXYNOS5_GPC0(3);
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+	default:
+		break;
+	}
+}
+
+static struct dw_mci_board exynos_dwmci_pdata __initdata = {
+	.num_slots		= 1,
+	.quirks			= DW_MCI_QUIRK_BROKEN_CARD_DETECTION | DW_MCI_QUIRK_HIGHSPEED,
+	.bus_hz			= 66 * 1000 * 1000,
+	.caps			= MMC_CAP_UHS_DDR50 | MMC_CAP_1_8V_DDR |
+				  MMC_CAP_8_BIT_DATA | MMC_CAP_CMD23,
+	.fifo_depth             = 0x80,
+	.detect_delay_ms	= 200,
+	.hclk_name		= "dwmci",
+	.cclk_name		= "sclk_dwmci",
+	.cfg_gpio		= exynos_dwmci_cfg_gpio,
+};
+#endif
+
+static void exynos_dwmci0_cfg_gpio(int width)
+{
+	unsigned int gpio;
+
+	for (gpio = EXYNOS5_GPC0(0); gpio < EXYNOS5_GPC0(2); gpio++) {
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(2));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV4);
+	}
+
+	switch (width) {
+	case MMC_BUS_WIDTH_8:
+		for (gpio = EXYNOS5_GPC1(0); gpio <= EXYNOS5_GPC1(3); gpio++) {
+			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(2));
+			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV4);
+		}
+	case MMC_BUS_WIDTH_4:
+		for (gpio = EXYNOS5_GPC0(3); gpio <= EXYNOS5_GPC0(6); gpio++) {
+			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(2));
+			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV4);
+		}
+		break;
+	case MMC_BUS_WIDTH_1:
+		gpio = EXYNOS5_GPC0(3);
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(2));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV4);
+	default:
+		break;
+	}
+}
+
+static struct dw_mci_board exynos5_dwmci0_pdata __initdata = {
+	.num_slots		= 1,
+	.quirks			= DW_MCI_QUIRK_BROKEN_CARD_DETECTION | DW_MCI_QUIRK_HIGHSPEED,
+	.bus_hz			= 100 * 1000 * 1000,
+	.caps			= MMC_CAP_UHS_DDR50 | MMC_CAP_1_8V_DDR |
+				  MMC_CAP_8_BIT_DATA | MMC_CAP_CMD23,
+	.fifo_depth             = 0x80,
+	.detect_delay_ms	= 200,
+	.hclk_name		= "dwmci",
+	.cclk_name		= "sclk_dwmci",
+	.cfg_gpio		= exynos_dwmci0_cfg_gpio,
+};
+
+static void exynos_dwmci1_cfg_gpio(int width)
+{
+	unsigned int gpio;
+	for (gpio = EXYNOS5_GPC2(0); gpio < EXYNOS5_GPC2(2); gpio++) {
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(2));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV3);
+	}
+
+	switch (width) {
+	case MMC_BUS_WIDTH_4:
+		for (gpio = EXYNOS5_GPC2(3); gpio <= EXYNOS5_GPC2(6); gpio++) {
+			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(2));
+			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV3);
+		}
+		break;
+	case MMC_BUS_WIDTH_1:
+		gpio = EXYNOS5_GPC2(3);
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(2));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV3);
+	default:
+		break;
+	}
+}
+
+static void (*wlan_notify_func)(struct platform_device *dev, int state);
+static DEFINE_MUTEX(wlan_mutex_lock);
+
+static int ext_cd_init_wlan(void (*notify_func)(struct platform_device *dev, int state))
+{
+	mutex_lock(&wlan_mutex_lock);
+	WARN_ON(wlan_notify_func);
+
+	wlan_notify_func = notify_func;
+
+	if (wlan_notify_func) {
+		if (samsung_rev() >= EXYNOS5250_REV_1_0)
+			wlan_notify_func(&exynos_device_dwmci1, 1);
+		else
+			wlan_notify_func(&s3c_device_hsmmc3, 1);
+	}
+
+	mutex_unlock(&wlan_mutex_lock);
+
+	return 0;
+}
+
+static int ext_cd_cleanup_wlan(void (*notify_func)(struct platform_device *dev, int state))
+{
+	mutex_lock(&wlan_mutex_lock);
+	WARN_ON(wlan_notify_func);
+
+	if (wlan_notify_func) {
+		if (samsung_rev() >= EXYNOS5250_REV_1_0)
+			wlan_notify_func(&exynos_device_dwmci1, 0);
+		else
+			wlan_notify_func(&s3c_device_hsmmc3, 0);
+	}
+
+	wlan_notify_func = NULL;
+
+	mutex_unlock(&wlan_mutex_lock);
+
+	return 0;
+}
+
+static struct dw_mci_board exynos5_dwmci1_pdata __initdata = {
+	.num_slots              = 1,
+	.quirks                 = DW_MCI_QUIRK_BROKEN_CARD_DETECTION | DW_MCI_QUIRK_HIGHSPEED,
+	.bus_hz                 = 50 * 1000 * 1000,
+	.caps                   = MMC_CAP_UHS_DDR50 | MMC_CAP_1_8V_DDR |
+				  MMC_CAP_8_BIT_DATA | MMC_CAP_CMD23,
+	.fifo_depth             = 0x80,
+	.detect_delay_ms        = 200,
+	.hclk_name              = "dwmci",
+	.cclk_name              = "sclk_dwmci",
+	.cfg_gpio               = exynos_dwmci1_cfg_gpio,
+	.ext_cd_init 		= ext_cd_init_wlan,
+	.ext_cd_cleanup 	= ext_cd_cleanup_wlan,
+	.cd_type 		= DW_MCI_CD_EXTERNAL,
+};
+
+void mmc_force_presence_change(struct platform_device *pdev)
+{
+	void (*notify_func)(struct platform_device *, int state) = NULL;
+	mutex_lock(&wlan_mutex_lock);
+	if (samsung_rev() >= EXYNOS5250_REV_1_0) {
+		if (pdev == &exynos_device_dwmci1)
+			notify_func = wlan_notify_func;
+	} else {
+		if (pdev == &s3c_device_hsmmc3)
+			notify_func = wlan_notify_func;
+	}
+
+	if (notify_func)
+		notify_func(pdev, 1);
+	else
+		pr_warn("%s: called for device with no notifier\n", __func__);
+	mutex_unlock(&wlan_mutex_lock);
+}
+EXPORT_SYMBOL_GPL(mmc_force_presence_change);
+
+static int smdk5250_dwmci_get_ro(u32 slot_id)
+{
+	/* smdk5250 rev1.0 did not support SD/MMC card write pritect. */
+	return 0;
+}
+
+static void exynos_dwmci2_cfg_gpio(int width)
+{
+	unsigned int gpio;
+
+	for (gpio = EXYNOS5_GPC3(0); gpio <= EXYNOS5_GPC3(2); gpio++) {
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(2));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+	}
+
+	switch (width) {
+	case MMC_BUS_WIDTH_4:
+		for (gpio = EXYNOS5_GPC3(3); gpio <= EXYNOS5_GPC3(6); gpio++) {
+			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(2));
+			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+		}
+		break;
+	case MMC_BUS_WIDTH_1:
+		gpio = EXYNOS5_GPC3(3);
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(2));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+	default:
+		break;
+	}
+}
+
+static struct dw_mci_board exynos5_dwmci2_pdata __initdata = {
+	.num_slots		= 1,
+	.quirks			= DW_MCI_QUIRK_HIGHSPEED,
+	.bus_hz			= 22 * 1000 * 1000,
+	.caps			= MMC_CAP_CMD23,
+	.fifo_depth             = 0x80,
+	.detect_delay_ms	= 200,
+	.hclk_name		= "dwmci",
+	.cclk_name		= "sclk_dwmci",
+	.cfg_gpio		= exynos_dwmci2_cfg_gpio,
+	.get_ro		= smdk5250_dwmci_get_ro,
+};
+
+#ifdef CONFIG_VIDEO_FIMG2D
+static struct fimg2d_platdata fimg2d_data __initdata = {
+	.hw_ver		= 0x42,
+	.gate_clkname	= "fimg2d",
+};
+#endif
+
+#ifdef CONFIG_S3C_DEV_HSMMC
+static struct s3c_sdhci_platdata smdk5250_hsmmc0_pdata __initdata = {
+	.cd_type		= S3C_SDHCI_CD_PERMANENT,
+	.clk_type		= S3C_SDHCI_CLK_DIV_EXTERNAL,
+#ifdef CONFIG_EXYNOS4_SDHCI_CH0_8BIT
+	.max_width		= 8,
+	.host_caps		= MMC_CAP_8_BIT_DATA,
+#endif
+};
+#endif
+
+#ifdef CONFIG_S3C_DEV_HSMMC1
+static struct s3c_sdhci_platdata smdk5250_hsmmc1_pdata __initdata = {
+	.cd_type		= S3C_SDHCI_CD_INTERNAL,
+	.clk_type		= S3C_SDHCI_CLK_DIV_EXTERNAL,
+};
+#endif
+
+#ifdef CONFIG_S3C_DEV_HSMMC2
+static struct s3c_sdhci_platdata smdk5250_hsmmc2_pdata __initdata = {
+	.cd_type		= S3C_SDHCI_CD_GPIO,
+	.clk_type		= S3C_SDHCI_CLK_DIV_EXTERNAL,
+	.ext_cd_gpio		= GPIO_T_FLASH_DETECT,
+	.ext_cd_gpio_invert	= true,
+#ifdef CONFIG_EXYNOS4_SDHCI_CH2_8BIT
+	.max_width		= 8,
+	.host_caps		= MMC_CAP_8_BIT_DATA,
+#endif
+};
+#endif
+
+struct class *camera_class;
+EXPORT_SYMBOL(camera_class);
+
+#ifdef CONFIG_S3C_DEV_HSMMC3
+static struct s3c_sdhci_platdata smdk5250_hsmmc3_pdata __initdata = {
+	.cd_type		= S3C_SDHCI_CD_EXTERNAL,
+	.clk_type		= S3C_SDHCI_CLK_DIV_EXTERNAL,
+	.pm_flags		= S3C_SDHCI_PM_IGNORE_SUSPEND_RESUME,
+	/* ext_cd_xxx should be used in only .cd_type = S3C_SDHCI_CD_EXTERNAL */
+	.ext_cd_init		= ext_cd_init_wlan,
+	.ext_cd_cleanup		= ext_cd_cleanup_wlan,
+};
+#endif
+
+#ifdef CONFIG_S3C64XX_DEV_SPI
+static struct s3c64xx_spi_csinfo spi1_csi[] = {
+	[0] = {
+		.line = GPIO_5M_SPI_CS,
+		.set_level = gpio_set_value,
+		.fb_delay = 0x2,
+	},
+};
+
+static struct spi_board_info spi1_board_info[] __initdata = {
+	{
+		.modalias = "spidev",
+		.platform_data = NULL,
+		.max_speed_hz = 10*1000*1000,
+		.bus_num = 1,
+		.chip_select = 0,
+		.mode = SPI_MODE_0,
+		.controller_data = &spi1_csi[0],
+	}
+};
+#endif
+
+#ifdef CONFIG_LEDS_SPFCW043
+static int spfcw043_setGpio(void)
+{
+	int err;
+
+	err = gpio_request(GPIO_CAM_FLASH_EN, "TORCH_EN");
+	if (err) {
+		printk(KERN_ERR "failed to request TORCH_EN\n");
+		return -EPERM;
+	}
+	gpio_direction_output(GPIO_CAM_FLASH_EN, 1);
+	err = gpio_request(GPIO_CAM_FLASH_SET, "TORCH_SET");
+	if (err) {
+		printk(KERN_ERR "failed to request TORCH_SET\n");
+		gpio_free(GPIO_CAM_FLASH_EN);
+		return -EPERM;
+	}
+	gpio_direction_output(GPIO_CAM_FLASH_SET, 1);
+	gpio_set_value(GPIO_CAM_FLASH_EN, 0);
+	gpio_set_value(GPIO_CAM_FLASH_SET, 0);
+
+	return 0;
+}
+
+static int spfcw043_freeGpio(void)
+{
+	gpio_free(GPIO_CAM_FLASH_EN);
+	gpio_free(GPIO_CAM_FLASH_SET);
+
+	return 0;
+}
+
+static void spfcw043_torch_en(int onoff)
+{
+	gpio_set_value(GPIO_CAM_FLASH_EN, onoff);
+}
+
+static void spfcw043_torch_set(int onoff)
+{
+	gpio_set_value(GPIO_CAM_FLASH_SET, onoff);
+}
+
+static struct spfcw043_led_platform_data spfcw043_led_data = {
+	.brightness = TORCH_BRIGHTNESS_50,
+	.status	= STATUS_UNAVAILABLE,
+	.setGpio = spfcw043_setGpio,
+	.freeGpio = spfcw043_freeGpio,
+	.torch_en = spfcw043_torch_en,
+	.torch_set = spfcw043_torch_set,
+};
+
+static struct platform_device s3c_device_spfcw043_led = {
+	.name	= "spfcw043-led",
+	.id	= -1,
+	.dev	= {
+		.platform_data	= &spfcw043_led_data,
+	},
+};
+#endif
+
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_LITE
+#if defined(CONFIG_ITU_A)
+static int smdk5250_cam0_reset(int dummy)
+{
+	int err;
+	/* Camera A */
+	err = gpio_request(EXYNOS5_GPX1(2), "GPX1");
+	if (err)
+		printk(KERN_ERR "#### failed to request GPX1_2 ####\n");
+
+	s3c_gpio_setpull(EXYNOS5_GPX1(2), S3C_GPIO_PULL_NONE);
+	gpio_direction_output(EXYNOS5_GPX1(2), 0);
+	gpio_direction_output(EXYNOS5_GPX1(2), 1);
+	gpio_free(EXYNOS5_GPX1(2));
+
+	return 0;
+}
+#endif
+#if defined(CONFIG_ITU_B)
+static int smdk5250_cam1_reset(int dummy)
+{
+	int err;
+	/* Camera A */
+	err = gpio_request(EXYNOS5_GPX1(0), "GPX1");
+	if (err)
+		printk(KERN_ERR "#### failed to request GPX1_2 ####\n");
+
+	s3c_gpio_setpull(EXYNOS5_GPX1(0), S3C_GPIO_PULL_NONE);
+	gpio_direction_output(EXYNOS5_GPX1(0), 0);
+	gpio_direction_output(EXYNOS5_GPX1(0), 1);
+	gpio_free(EXYNOS5_GPX1(0));
+
+	return 0;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_S5K4BA
+static struct s5k4ba_mbus_platform_data s5k4ba_mbus_plat = {
+	.id		= 0,
+	.fmt = {
+		.width	= 1600,
+		.height	= 1200,
+		/* .code	= V4L2_MBUS_FMT_UYVY8_2X8, */
+		.code	= V4L2_MBUS_FMT_VYUY8_2X8,
+	},
+	.clk_rate	= 24000000UL,
+#ifdef CONFIG_ITU_A
+	.set_power	= smdk5250_cam0_reset,
+#endif
+#ifdef CONFIG_ITU_B
+	.set_power	= smdk5250_cam1_reset,
+#endif
+};
+
+static struct i2c_board_info s5k4ba_info = {
+	I2C_BOARD_INFO("S5K4BA", 0x2d),
+	.platform_data = &s5k4ba_mbus_plat,
+};
+#endif
+
+/* 1 MIPI Cameras */
+#ifdef CONFIG_VIDEO_M5MOLS
+static struct m5mols_platform_data m5mols_platdata = {
+#ifdef CONFIG_CSI_C
+	.gpio_rst = EXYNOS5_GPX1(2), /* ISP_RESET */
+#endif
+#ifdef CONFIG_CSI_D
+	.gpio_rst = EXYNOS5_GPX1(0), /* ISP_RESET */
+#endif
+	.enable_rst = true, /* positive reset */
+	.irq = IRQ_EINT(22),
+};
+
+static struct i2c_board_info m5mols_board_info = {
+	I2C_BOARD_INFO("M5MOLS", 0x1F),
+	.platform_data = &m5mols_platdata,
+};
+#endif
+#endif /* CONFIG_VIDEO_EXYNOS_FIMC_LITE */
+
+#ifdef CONFIG_VIDEO_EXYNOS_MIPI_CSIS
+static struct regulator_consumer_supply mipi_csi_fixed_voltage_supplies[] = {
+	REGULATOR_SUPPLY("mipi_csi", "s5p-mipi-csis.0"),
+	REGULATOR_SUPPLY("mipi_csi", "s5p-mipi-csis.1"),
+};
+
+static struct regulator_init_data mipi_csi_fixed_voltage_init_data = {
+	.constraints = {
+		.always_on = 1,
+	},
+	.num_consumer_supplies	= ARRAY_SIZE(mipi_csi_fixed_voltage_supplies),
+	.consumer_supplies	= mipi_csi_fixed_voltage_supplies,
+};
+
+static struct fixed_voltage_config mipi_csi_fixed_voltage_config = {
+	.supply_name	= "DC_5V",
+	.microvolts	= 5000000,
+	.gpio		= -EINVAL,
+	.init_data	= &mipi_csi_fixed_voltage_init_data,
+};
+
+static struct platform_device mipi_csi_fixed_voltage = {
+	.name		= "reg-fixed-voltage",
+	.id		= 3,
+	.dev		= {
+		.platform_data	= &mipi_csi_fixed_voltage_config,
+	},
+};
+#endif
+
+#ifdef CONFIG_VIDEO_M5MOLS
+static struct regulator_consumer_supply m5mols_fixed_voltage_supplies[] = {
+	REGULATOR_SUPPLY("core", NULL),
+	REGULATOR_SUPPLY("dig_18", NULL),
+	REGULATOR_SUPPLY("d_sensor", NULL),
+	REGULATOR_SUPPLY("dig_28", NULL),
+	REGULATOR_SUPPLY("a_sensor", NULL),
+	REGULATOR_SUPPLY("dig_12", NULL),
+};
+
+static struct regulator_init_data m5mols_fixed_voltage_init_data = {
+	.constraints = {
+		.always_on = 1,
+	},
+	.num_consumer_supplies	= ARRAY_SIZE(m5mols_fixed_voltage_supplies),
+	.consumer_supplies	= m5mols_fixed_voltage_supplies,
+};
+
+static struct fixed_voltage_config m5mols_fixed_voltage_config = {
+	.supply_name	= "CAM_SENSOR",
+	.microvolts	= 1800000,
+	.gpio		= -EINVAL,
+	.init_data	= &m5mols_fixed_voltage_init_data,
+};
+
+static struct platform_device m5mols_fixed_voltage = {
+	.name		= "reg-fixed-voltage",
+	.id		= 4,
+	.dev		= {
+		.platform_data	= &m5mols_fixed_voltage_config,
+	},
+};
+#endif
+
+#if defined(CONFIG_REGULATOR_MAX77686)
+/* max77686 */
+#ifdef CONFIG_SND_SOC_WM8994
+static struct regulator_consumer_supply ldo3_supply[] = {
+	REGULATOR_SUPPLY("vcc_1.8v", NULL),
+	REGULATOR_SUPPLY("AVDD2", NULL),
+	REGULATOR_SUPPLY("CPVDD", NULL),
+	REGULATOR_SUPPLY("DBVDD1", NULL),
+	REGULATOR_SUPPLY("DBVDD2", NULL),
+	REGULATOR_SUPPLY("DBVDD3", NULL)
+};
+#else
+static struct regulator_consumer_supply ldo3_supply[] = {
+	REGULATOR_SUPPLY("vcc_1.8v", NULL),
+};
+#endif
+
+static struct regulator_consumer_supply ldo4_supply[] = {
+	REGULATOR_SUPPLY("vcc_2.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo5_supply[] = {
+	REGULATOR_SUPPLY("cam_isp_mipi_1.2v", NULL),
+};
+
+static struct regulator_consumer_supply ldo8_supply[] = {
+	REGULATOR_SUPPLY("vmipi_1.0v", NULL),
+};
+
+static struct regulator_consumer_supply ldo9_supply[] = {
+	REGULATOR_SUPPLY("touch_vdd_1.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo10_supply[] = {
+	REGULATOR_SUPPLY("vmipi_1.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo11_supply[] = {
+	REGULATOR_SUPPLY("vabb1_1.9v", NULL),
+};
+
+static struct regulator_consumer_supply ldo12_supply[] = {
+	REGULATOR_SUPPLY("votg_3.0v", NULL),
+};
+
+static struct regulator_consumer_supply ldo14_supply[] = {
+	REGULATOR_SUPPLY("vabb02_1.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo15_supply[] = {
+	REGULATOR_SUPPLY("vhsic_1.0v", NULL),
+};
+
+static struct regulator_consumer_supply ldo16_supply[] = {
+	REGULATOR_SUPPLY("vhsic_1.8v", NULL),
+};
+
+#if defined(CONFIG_MACH_P10_LUNGO_01_BD) || \
+	defined(CONFIG_MACH_P10_LUNGO_WIFI_01_BD)
+static struct regulator_consumer_supply ldo17_supply[] = {
+	REGULATOR_SUPPLY("cam_core_1.8v", NULL),
+};
+#endif
+static struct regulator_consumer_supply ldo18_supply[] = {
+	REGULATOR_SUPPLY("cam_io_from_1.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo19_supply[] = {
+	REGULATOR_SUPPLY("vt_cam_1.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo20_supply[] = {
+	REGULATOR_SUPPLY("vmem_vdd_1.8v", NULL),
+};
+
+static struct regulator_consumer_supply ldo21_supply[] = {
+	REGULATOR_SUPPLY("vtf_2.8v", NULL),
+};
+
+#if defined(CONFIG_MACH_P10_LUNGO_01_BD) || \
+	defined(CONFIG_MACH_P10_LUNGO_WIFI_01_BD)
+static struct regulator_consumer_supply ldo22_supply[] = {
+	REGULATOR_SUPPLY("vcc_mmc_2.8v", NULL),
+};
+#else
+static struct regulator_consumer_supply ldo22_supply[] = {
+	REGULATOR_SUPPLY("cam_core_1.8v", NULL),
+};
+#endif
+static struct regulator_consumer_supply ldo23_supply[] = {
+	REGULATOR_SUPPLY("touch_avdd", NULL),
+};
+
+static struct regulator_consumer_supply ldo24_supply[] = {
+	REGULATOR_SUPPLY("cam_af_2.8v", NULL),
+};
+static struct regulator_consumer_supply ldo25_supply[] = {
+	REGULATOR_SUPPLY("vadc_3.3v", NULL),
+};
+
+static struct regulator_consumer_supply ldo26_supply[] = {
+	REGULATOR_SUPPLY("irda_3.3v", NULL),
+};
+
+static struct regulator_consumer_supply max77686_buck1 =
+	REGULATOR_SUPPLY("vdd_mif", NULL);
+static struct regulator_consumer_supply max77686_buck2 =
+	REGULATOR_SUPPLY("vdd_arm", NULL);
+
+static struct regulator_consumer_supply max77686_buck3 =
+	REGULATOR_SUPPLY("vdd_int", NULL);
+
+static struct regulator_consumer_supply max77686_buck4 =
+	REGULATOR_SUPPLY("vdd_g3d", NULL);
+
+static struct regulator_consumer_supply max77686_buck9 =
+	REGULATOR_SUPPLY("cam_isp_core", NULL);
+
+static struct regulator_consumer_supply max77686_enp32khz[] = {
+	REGULATOR_SUPPLY("lpo_in", "bcm47511"),
+	REGULATOR_SUPPLY("lpo", "bcm43241_bluetooth"),
+};
+
+#define REGULATOR_INIT(_ldo, _name, _min_uV, _max_uV, _always_on, _ops_mask,\
+	_disabled) \
+static struct regulator_init_data _ldo##_init_data = {		\
+	.constraints = {					\
+		.name	= _name,				\
+		.min_uV = _min_uV,				\
+		.max_uV = _max_uV,				\
+		.always_on	= _always_on,			\
+		.boot_on	= _always_on,			\
+		.apply_uV	= 1,				\
+		.valid_ops_mask = _ops_mask,			\
+		.state_mem	= {				\
+		.disabled	= _disabled,		\
+		.enabled	= !(_disabled),		\
+		}						\
+	    },							    \
+	    .num_consumer_supplies = ARRAY_SIZE(_ldo##_supply),	    \
+	    .consumer_supplies = &_ldo##_supply[0],		    \
+	       };
+
+REGULATOR_INIT(ldo3, "VCC_1.8V_AP", 1800000, 1800000, 1,
+	0, 0);
+REGULATOR_INIT(ldo4, "VCC_2.8V_AP", 2800000, 2800000, 1,
+	0, 0);
+REGULATOR_INIT(ldo5, "CAM_ISP_MIPI_1.2V", 1200000, 1200000, 0,
+	REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo8, "VMIPI_1.0V", 1000000, 1000000, 1,
+	REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo9, "TOUCH_VDD_1.8V", 1800000, 1800000, 0,
+	REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo10, "VMIPI_1.8V", 1800000, 1800000, 1,
+	REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo11, "VABB1_1.8V", 1800000, 1800000, 1,
+	REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo12, "VUOTG_3.0V", 3000000, 3000000, 1,
+	REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo14, "VABB02_1.8V", 1800000, 1800000, 0,
+	REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo15, "VHSIC_1.0V", 1000000, 1000000, 1,
+	REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo16, "VHSIC_1.8V", 1800000, 1800000, 0,
+	REGULATOR_CHANGE_STATUS, 1);
+#if defined(CONFIG_MACH_P10_LUNGO_01_BD) || \
+	defined(CONFIG_MACH_P10_LUNGO_WIFI_01_BD)
+REGULATOR_INIT(ldo17, "CAM_CORE_1.8v", 1800000, 1800000, 0,
+	REGULATOR_CHANGE_STATUS, 1);
+#endif
+REGULATOR_INIT(ldo18, "CAM_IO_FROM_1.8V", 1800000, 1800000, 0,
+	REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo19, "VT_CAM_1.8V", 1800000, 1800000, 0,
+	REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo20, "VMEM_VDD_1.8V", 1800000, 1800000, 0,
+	REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo21, "VTF_2.8V", 2800000, 2800000, 0,
+	REGULATOR_CHANGE_STATUS, 1);
+#if defined(CONFIG_MACH_P10_LUNGO_01_BD) || \
+	defined(CONFIG_MACH_P10_LUNGO_WIFI_01_BD)
+REGULATOR_INIT(ldo22, "VCC_MMC_2.8v", 2800000, 2800000, 0,
+	REGULATOR_CHANGE_STATUS, 1);
+#else
+REGULATOR_INIT(ldo22, "CAM_CORE_1.8v", 1800000, 1800000, 0,
+	REGULATOR_CHANGE_STATUS, 1);
+#endif
+REGULATOR_INIT(ldo23, "TSP_AVDD_2.8V", 2800000, 2800000, 0,
+	REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo24, "CAM_AF_2.8V", 2800000, 2800000, 0,
+	REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo25, "VADC_3.3V", 3300000, 3300000, 1,
+	REGULATOR_CHANGE_STATUS, 1);
+REGULATOR_INIT(ldo26, "IRDA_3.3V", 3300000, 3300000, 0,
+	REGULATOR_CHANGE_STATUS, 1);
+
+static struct regulator_init_data max77686_buck1_data = {
+	.constraints = {
+		.name = "vdd_mif range",
+		.min_uV = 900000,
+		.max_uV = 1300000,
+		.always_on = 1,
+		.boot_on = 1,
+		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE,
+	},
+	.num_consumer_supplies = 1,
+	.consumer_supplies = &max77686_buck1,
+};
+
+static struct regulator_init_data max77686_buck2_data = {
+	.constraints = {
+		.name = "vdd_arm range",
+		.min_uV = 800000,
+		.max_uV = 1500000,
+		.always_on = 1,
+		.boot_on = 1,
+		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE,
+	},
+	.num_consumer_supplies = 1,
+	.consumer_supplies = &max77686_buck2,
+};
+
+static struct regulator_init_data max77686_buck3_data = {
+	.constraints = {
+		.name = "vdd_int range",
+		.min_uV = 900000,
+		.max_uV = 1300000,
+		.always_on = 1,
+		.boot_on = 1,
+		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE,
+	},
+	.num_consumer_supplies = 1,
+	.consumer_supplies = &max77686_buck3,
+};
+
+static struct regulator_init_data max77686_buck4_data = {
+	 .constraints = {
+		 .name = "vdd_g3d range",
+		 .min_uV = 700000,
+		 .max_uV = 1300000,
+		 .boot_on = 1,
+		 .valid_ops_mask = REGULATOR_CHANGE_VOLTAGE |
+		 REGULATOR_CHANGE_STATUS,
+	 },
+	 .num_consumer_supplies = 1,
+	 .consumer_supplies = &max77686_buck4,
+};
+
+static struct regulator_init_data max77686_buck9_data = {
+	  .constraints = {
+		.name = "cam_isp_core",
+		.min_uV = 1000000,
+		.max_uV = 1200000,
+		.apply_uV = 1,
+		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE |
+			 REGULATOR_CHANGE_STATUS,
+		.state_mem = {
+		.disabled = 1,
+		},
+	 },
+	 .num_consumer_supplies = 1,
+	 .consumer_supplies = &max77686_buck9,
+};
+
+static struct regulator_init_data max77686_enp32khz_data = {
+	.constraints = {
+		.name = "32KHZ_PMIC",
+		.always_on	= 1,
+		.valid_ops_mask = REGULATOR_CHANGE_STATUS,
+		.state_mem = {
+			.enabled	= 1,
+			.disabled	= 0,
+		},
+	},
+	.num_consumer_supplies = ARRAY_SIZE(max77686_enp32khz),
+	.consumer_supplies = max77686_enp32khz,
+};
+
+static struct max77686_regulator_data max77686_regulators[] = {
+		{MAX77686_BUCK1, &max77686_buck1_data,},
+		{MAX77686_BUCK2, &max77686_buck2_data,},
+		{MAX77686_BUCK3, &max77686_buck3_data,},
+		{MAX77686_BUCK4, &max77686_buck4_data,},
+		{MAX77686_BUCK9, &max77686_buck9_data,},
+		{MAX77686_LDO3, &ldo3_init_data,},
+		{MAX77686_LDO4, &ldo4_init_data,},
+		{MAX77686_LDO5, &ldo5_init_data,},
+		{MAX77686_LDO8, &ldo8_init_data,},
+		{MAX77686_LDO9, &ldo9_init_data,},
+		{MAX77686_LDO10, &ldo10_init_data,},
+		{MAX77686_LDO11, &ldo11_init_data,},
+		{MAX77686_LDO12, &ldo12_init_data,},
+		{MAX77686_LDO14, &ldo14_init_data,},
+		{MAX77686_LDO15, &ldo15_init_data,},
+		{MAX77686_LDO16, &ldo16_init_data,},
+#if defined(CONFIG_MACH_P10_LUNGO_01_BD) || \
+	defined(CONFIG_MACH_P10_LUNGO_WIFI_01_BD)
+		{MAX77686_LDO17, &ldo17_init_data,},
+#endif
+		{MAX77686_LDO18, &ldo18_init_data,},
+		{MAX77686_LDO19, &ldo19_init_data,},
+		{MAX77686_LDO20, &ldo20_init_data,},
+		{MAX77686_LDO21, &ldo21_init_data,},
+		{MAX77686_LDO22, &ldo22_init_data,},
+		{MAX77686_LDO23, &ldo23_init_data,},
+		{MAX77686_LDO24, &ldo24_init_data,},
+		{MAX77686_LDO25, &ldo25_init_data,},
+		{MAX77686_LDO26, &ldo26_init_data,},
+		{MAX77686_P32KH, &max77686_enp32khz_data,},
+};
+
+struct max77686_opmode_data max77686_opmode_data[MAX77686_REG_MAX] = {
+		[MAX77686_LDO3] = {MAX77686_LDO3, MAX77686_OPMODE_NORMAL},
+		[MAX77686_LDO8] = {MAX77686_LDO8, MAX77686_OPMODE_STANDBY},
+		[MAX77686_LDO10] = {MAX77686_LDO10, MAX77686_OPMODE_STANDBY},
+		[MAX77686_LDO11] = {MAX77686_LDO11, MAX77686_OPMODE_STANDBY},
+		[MAX77686_LDO12] = {MAX77686_LDO12, MAX77686_OPMODE_STANDBY},
+		[MAX77686_LDO14] = {MAX77686_LDO14, MAX77686_OPMODE_STANDBY},
+		[MAX77686_LDO15] = {MAX77686_LDO15, MAX77686_OPMODE_STANDBY},
+		[MAX77686_LDO16] = {MAX77686_LDO16, MAX77686_OPMODE_STANDBY},
+		[MAX77686_BUCK1] = {MAX77686_BUCK1, MAX77686_OPMODE_STANDBY},
+		[MAX77686_BUCK2] = {MAX77686_BUCK2, MAX77686_OPMODE_STANDBY},
+		[MAX77686_BUCK3] = {MAX77686_BUCK3, MAX77686_OPMODE_STANDBY},
+		[MAX77686_BUCK4] = {MAX77686_BUCK4, MAX77686_OPMODE_STANDBY},
+};
+
+static struct max77686_platform_data exynos4_max77686_info = {
+		.num_regulators = ARRAY_SIZE(max77686_regulators),
+		.regulators = max77686_regulators,
+		.irq_gpio	= GPIO_PMIC_IRQ,
+		.irq_base	= IRQ_BOARD_PMIC_START,
+		.wakeup = 1,
+
+		.opmode_data = max77686_opmode_data,
+		.ramp_rate = MAX77686_RAMP_RATE_27MV,
+		.has_full_constraints = 1,
+
+		.buck234_gpio_dvs = {
+			GPIO_PMIC_DVS1,
+			GPIO_PMIC_DVS2,
+			GPIO_PMIC_DVS3,
+		},
+		.buck234_gpio_selb = {
+			GPIO_BUCK2_SEL,
+			GPIO_BUCK3_SEL,
+			GPIO_BUCK4_SEL,
+		},
+
+		/*for future work after DVS Table */
+		.buck2_voltage[0] = 1100000,	/* 1.1V */
+		.buck2_voltage[1] = 1100000,	/* 1.1V */
+		.buck2_voltage[2] = 1100000,	/* 1.1V */
+		.buck2_voltage[3] = 1100000,	/* 1.1V */
+		.buck2_voltage[4] = 1100000,	/* 1.1V */
+		.buck2_voltage[5] = 1100000,	/* 1.1V */
+		.buck2_voltage[6] = 1100000,	/* 1.1V */
+		.buck2_voltage[7] = 1100000,	/* 1.1V */
+
+		.buck3_voltage[0] = 1100000,	/* 1.1V */
+		.buck3_voltage[1] = 1100000,	/* 1.1V */
+		.buck3_voltage[2] = 1100000,	/* 1.1V */
+		.buck3_voltage[3] = 1100000,	/* 1.1V */
+		.buck3_voltage[4] = 1100000,	/* 1.1V */
+		.buck3_voltage[5] = 1100000,	/* 1.1V */
+		.buck3_voltage[6] = 1100000,	/* 1.1V */
+		.buck3_voltage[7] = 1100000,	/* 1.1V */
+
+		.buck4_voltage[0] = 1100000,	/* 1.1V */
+		.buck4_voltage[1] = 1100000,	/* 1.1V */
+		.buck4_voltage[2] = 1100000,	/* 1.1V */
+		.buck4_voltage[3] = 1100000,	/* 1.1V */
+		.buck4_voltage[4] = 1100000,	/* 1.1V */
+		.buck4_voltage[5] = 1100000,	/* 1.1V */
+		.buck4_voltage[6] = 1100000,	/* 1.1V */
+		.buck4_voltage[7] = 1100000,	/* 1.1V */
+};
+#endif /* CONFIG_REGULATOR_MAX77686 */
+
+static struct i2c_board_info i2c_devs0[] __initdata = {
+#ifdef CONFIG_VIDEO_EXYNOS_TV
+	{
+		I2C_BOARD_INFO("exynos_hdcp", (0x74 >> 1)),
+	}
+#endif
+};
+
+#ifdef CONFIG_S3C_DEV_HWMON
+static struct s3c_hwmon_pdata smdk5250_hwmon_pdata __initdata = {
+	/* Reference voltage (1.2V) */
+	.in[0] = &(struct s3c_hwmon_chcfg) {
+		.name		= "smdk:reference-voltage",
+		.mult		= 3300,
+		.div		= 4096,
+	},
+};
+#endif
+
+#if defined(CONFIG_REGULATOR_MAX77686)
+static struct i2c_board_info i2c_devs5[] __initdata = {
+	{
+		I2C_BOARD_INFO("max77686", (0x12 >> 1)),
+		.platform_data	= &exynos4_max77686_info,
+	}
+};
+#endif
+
+#ifdef CONFIG_SENSORS_BH1721FVC
+
+static struct i2c_gpio_platform_data gpio_i2c_data12 = {
+	.sda_pin = GPIO_PS_ALS_SDA,
+	.scl_pin = GPIO_PS_ALS_SCL,
+};
+
+struct platform_device s3c_device_i2c12 = {
+	.name = "i2c-gpio",
+	.id = 12,
+	.dev.platform_data = &gpio_i2c_data12,
+};
+
+static int light_sensor_init(void)
+{
+	int err;
+
+	printk(KERN_INFO"==============================\n");
+	printk(KERN_INFO"== BH1721 Light Sensor Init ==\n");
+	printk(KERN_INFO"==============================\n");
+	printk("%d %d\n", GPIO_PS_ALS_SDA, GPIO_PS_ALS_SCL);
+	err = gpio_request(GPIO_PS_VOUT, "LIGHT_SENSOR_RESET");
+	if (err) {
+		printk(KERN_INFO" bh1721fvc Failed to request the light "
+			" sensor gpio (%d)\n", err);
+		return err;
+	}
+
+	s3c_gpio_cfgpin(GPIO_PS_VOUT, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_PS_VOUT, S3C_GPIO_PULL_NONE);
+
+	err = gpio_direction_output(GPIO_PS_VOUT, 0);
+	udelay(2);
+	err = gpio_direction_output(GPIO_PS_VOUT, 1);
+	if (err) {
+		printk(KERN_INFO" bh1721fvc Failed to make the light sensor gpio(reset)"
+			" high (%d)\n", err);
+		return err;
+	}
+
+	return 0;
+}
+
+static int  bh1721fvc_light_sensor_reset(void)
+{
+	int err;
+
+	printk(KERN_INFO" bh1721fvc_light_sensor_reset\n");
+	err = gpio_direction_output(GPIO_PS_VOUT, 0);
+	if (err) {
+		printk(KERN_INFO" bh1721fvc Failed to make the light sensor gpio(reset)"
+			" low (%d)\n", err);
+		return err;
+	}
+
+	udelay(2);
+
+	err = gpio_direction_output(GPIO_PS_VOUT, 1);
+	if (err) {
+		printk(KERN_INFO" bh1721fvc Failed to make the light sensor gpio(reset)"
+			" high (%d)\n", err);
+		return err;
+	}
+	return 0;
+}
+
+static int  bh1721fvc_light_sensor_output(int value)
+{
+	int err;
+	int gpio_vout = GPIO_PS_VOUT;
+
+	err = gpio_direction_output(GPIO_PS_VOUT, value);
+	if (err) {
+		printk(KERN_INFO" bh1721fvc Failed to make the light sensor gpio(dvi)"
+			" low (%d)\n", err);
+		return err;
+	}
+	return 0;
+}
+
+static struct bh1721fvc_platform_data bh1721fvc_pdata = {
+	.reset = bh1721fvc_light_sensor_reset,
+	/* .output = bh1721fvc_light_sensor_output, */
+};
+
+static struct i2c_board_info i2c_bh1721_emul[] __initdata = {
+	{
+		I2C_BOARD_INFO("bh1721fvc", 0x23),
+		.platform_data = &bh1721fvc_pdata,
+	},
+};
+#endif
+
+#ifdef CONFIG_SENSORS_SHT21
+
+static struct i2c_gpio_platform_data gpio_i2c_data13 = {
+	.sda_pin = GPIO_HUM_SDA,
+	.scl_pin = GPIO_HUM_SCL,
+};
+
+struct platform_device s3c_device_i2c13 = {
+	.name = "i2c-gpio",
+	.id = 13,
+	.dev.platform_data = &gpio_i2c_data13,
+};
+
+static struct i2c_board_info i2c_devs13[] __initdata = {
+	{
+		I2C_BOARD_INFO("sht21", 0x40),
+	},
+};
+
+#endif
+
+#if defined(CONFIG_SAMSUNG_MHL)
+static struct i2c_board_info i2c_devs15_emul[] __initdata = {
+};
+
+/* i2c-gpio emulation platform_data */
+static struct i2c_gpio_platform_data i2c15_platdata = {
+	.sda_pin		= GPIO_MHL_SDA_18V,
+	.scl_pin		= GPIO_MHL_SCL_18V,
+	.udelay			= 2,	/* 250 kHz*/
+	.sda_is_open_drain	= 0,
+	.scl_is_open_drain	= 0,
+	.scl_is_output_only	= 0,
+};
+
+static struct platform_device s3c_device_i2c15 = {
+	.name			= "i2c-gpio",
+	.id			= 15,
+	.dev.platform_data	= &i2c15_platdata,
+};
+
+#endif
+
+#ifdef CONFIG_MOTOR_DRV_ISA1200
+
+static int isa1200_vdd_en(bool en)
+{
+	return gpio_direction_output(GPIO_MOTOR_EN, en);
+}
+
+static struct i2c_gpio_platform_data gpio_i2c_data17 = {
+	.sda_pin = GPIO_MOTOR_SDA_18V,
+	.scl_pin = GPIO_MOTOR_SCL_18V,
+};
+
+struct platform_device s3c_device_i2c17 = {
+	.name = "i2c-gpio",
+	.id = 17,
+	.dev.platform_data = &gpio_i2c_data17,
+};
+
+static struct isa1200_vibrator_platform_data isa1200_vibrator_pdata = {
+	.gpio_en = isa1200_vdd_en,
+	.max_timeout = 10000,
+	.ctrl0 = CTL0_DIVIDER128 | CTL0_PWM_INPUT,
+	.ctrl1 = CTL1_DEFAULT,
+	.ctrl2 = 0,
+	.ctrl4 = 0,
+	.pll = 0,
+	.duty = 0,
+	.period = 0,
+	.get_clk = NULL,
+	.pwm_id = 1,
+	.pwm_duty = 37000,
+	.pwm_period = 38675,/*38109*/
+};
+static struct i2c_board_info i2c_devs17[] = {
+	{
+		I2C_BOARD_INFO("isa1200_vibrator",  0x48),
+		.platform_data = &isa1200_vibrator_pdata,
+	},
+};
+
+static void isa1200_init(void)
+{
+	int gpio, ret;
+
+	gpio = GPIO_MOTOR_EN;
+	gpio_request(gpio, "MOTOR_EN");
+	gpio_direction_output(gpio, 1);
+	gpio_export(gpio, 0);
+}
+#endif	/* CONFIG_MOTOR_DRV_ISA1200 */
+
+#ifdef CONFIG_30PIN_CONN
+
+static void __init acc_con_gpio_init(void)
+{
+	s3c_gpio_cfgpin(GPIO_DOCK_INT, S3C_GPIO_INPUT);
+	s3c_gpio_setpull(GPIO_DOCK_INT, S3C_GPIO_PULL_NONE);
+
+	s3c_gpio_cfgpin(GPIO_ACCESSORY_INT, S3C_GPIO_INPUT);
+	s3c_gpio_setpull(GPIO_ACCESSORY_INT, S3C_GPIO_PULL_NONE);
+}
+
+static int acc_dock_con_state(void)
+{
+	/* From ACCESSROY_INT like desktop dock */
+
+	return gpio_get_value(GPIO_ACCESSORY_INT);
+}
+
+static int acc_accessory_con_state(void)
+{
+
+	/* From ACCESSORY_ID pin */
+	return gpio_get_value(GPIO_DOCK_INT);
+}
+
+struct acc_con_platform_data acc_con_pdata = {
+    /*
+	.otg_en =
+	.acc_power =
+	.usb_ldo_en =
+    */
+	.get_dock_state = acc_dock_con_state,
+	.get_acc_state = acc_accessory_con_state,
+	.accessory_irq_gpio = GPIO_ACCESSORY_INT,
+	.dock_irq_gpio = GPIO_DOCK_INT,
+	.mhl_irq_gpio = GPIO_MHL_INT,
+	.hdmi_hpd_gpio = GPIO_HDMI_HPD,
+};
+struct platform_device sec_device_connector = {
+	.name = "acc_con",
+	.id = -1,
+	.dev.platform_data = &acc_con_pdata,
+};
+#endif
+
+#ifdef CONFIG_USB_EHCI_S5P
+static struct s5p_ehci_platdata smdk5250_ehci_pdata;
+
+static void __init smdk5250_ehci_init(void)
+{
+	struct s5p_ehci_platdata *pdata = &smdk5250_ehci_pdata;
+
+#ifndef CONFIG_USB_EXYNOS_SWITCH
+	if (samsung_rev() >= EXYNOS5250_REV_1_0) {
+		if (gpio_request_one(EXYNOS5_GPX2(6), GPIOF_OUT_INIT_HIGH,
+			"HOST_VBUS_CONTROL"))
+			printk(KERN_ERR "failed to request gpio_host_vbus\n");
+		else {
+			s3c_gpio_setpull(EXYNOS5_GPX2(6), S3C_GPIO_PULL_NONE);
+			gpio_free(EXYNOS5_GPX2(6));
+		}
+	}
+#endif
+
+	s5p_ehci_set_platdata(pdata);
+}
+#endif
+
+#ifdef CONFIG_USB_OHCI_S5P
+static struct s5p_ohci_platdata smdk5250_ohci_pdata;
+
+static void __init smdk5250_ohci_init(void)
+{
+	struct s5p_ohci_platdata *pdata = &smdk5250_ohci_pdata;
+
+	s5p_ohci_set_platdata(pdata);
+}
+#endif
+
+#if defined(CONFIG_CPU_EXYNOS5250)
+static void set_usb3_en(int enable)
+{
+	int err;
+	/* XMMC2CDN(USB3.0_EN) for P10 H/W */
+	err = gpio_request(EXYNOS5_GPC2(2), "USB3_EN");
+	if (err)
+		printk(KERN_ERR "usb: failed to request XMMC2CDN GPIO ####\n");
+
+	s3c_gpio_setpull(EXYNOS5_GPC2(2), S3C_GPIO_PULL_NONE);
+	gpio_direction_output(EXYNOS5_GPC2(2), enable);
+	gpio_free(EXYNOS5_GPC2(2));
+	printk(KERN_INFO "usb: set usb3_en gpio (%d)\n", enable);
+}
+#endif
+
+/* USB GADGET */
+#ifdef CONFIG_USB_S3C_OTGD
+static struct s5p_usbgadget_platdata smdk5250_usbgadget_pdata;
+
+static void __init smdk5250_usbgadget_init(void)
+{
+	struct s5p_usbgadget_platdata *pdata = &smdk5250_usbgadget_pdata;
+
+	s5p_usbgadget_set_platdata(pdata);
+}
+#endif
+
+#ifdef CONFIG_EXYNOS_DEV_SS_UDC
+static struct exynos_usb3_drd_pdata smdk5250_ss_udc_pdata;
+
+static void __init smdk5250_ss_udc_init(void)
+{
+	struct exynos_usb3_drd_pdata *pdata = &smdk5250_ss_udc_pdata;
+
+	exynos_ss_udc_set_platdata(pdata);
+}
+#endif
+
+#ifdef CONFIG_USB_XHCI_EXYNOS
+static struct exynos_usb3_drd_pdata smdk5250_xhci_pdata;
+
+static void __init smdk5250_xhci_init(void)
+{
+	struct exynos_usb3_drd_pdata *pdata = &smdk5250_xhci_pdata;
+
+	exynos_xhci_set_platdata(pdata);
+}
+#endif
+
+#ifdef CONFIG_BATTERY_SAMSUNG
+static struct platform_device samsung_device_battery = {
+	.name	= "samsung-fake-battery",
+	.id	= -1,
+};
+#endif
+
+#if defined(CONFIG_STMPE811_ADC)
+static struct i2c_gpio_platform_data gpio_i2c_data19 = {
+	.sda_pin = GPIO_ADC_SDA_18V,
+	.scl_pin = GPIO_ADC_SCL_18V,
+};
+
+struct platform_device s3c_device_i2c19 = {
+	.name = "i2c-gpio",
+	.id = 19,
+	.dev.platform_data = &gpio_i2c_data19,
+};
+
+
+/* I2C19 */
+static struct i2c_board_info i2c_devs19_emul[] __initdata = {
+	{
+		I2C_BOARD_INFO("stmpe811-adc", (0x82 >> 1)),
+		.platform_data	= &stmpe811_pdata,
+	},
+};
+#endif
+
+#ifdef CONFIG_BUSFREQ_OPP
+/* BUSFREQ to control memory/bus*/
+static struct device_domain busfreq;
+
+static struct platform_device exynos5_busfreq = {
+	.id = -1,
+	.name = "exynos-busfreq",
+};
+#endif
+
+/* Bluetooth */
+#ifdef CONFIG_BT_BCM43241
+static struct platform_device bcm43241_bluetooth_device = {
+	.name = "bcm43241_bluetooth",
+	.id = -1,
+};
+#endif
+
+static struct platform_device *p10_devices[] __initdata = {
+	/* Samsung Power Domain */
+#ifdef CONFIG_EXYNOS_DEV_PD
+	&exynos5_device_pd[PD_MFC],
+	&exynos5_device_pd[PD_G3D],
+	&exynos5_device_pd[PD_ISP],
+	&exynos5_device_pd[PD_GSCL],
+	&exynos5_device_pd[PD_DISP1],
+#endif
+
+#ifdef CONFIG_S5P_DP
+	&s5p_device_dp,
+#endif
+
+#ifdef CONFIG_FB_S3C
+	&s5p_device_fimd1,
+#endif
+
+#ifdef CONFIG_S5P_DP
+	&p10_dp_lcd,
+#endif
+
+#ifdef CONFIG_FB_S5P_EXTDSP
+	&s3c_device_extdsp,
+#endif
+
+	&s3c_device_wdt,
+
+#ifdef CONFIG_S3C_DEV_HSMMC
+	&s3c_device_hsmmc0,
+#endif
+
+#ifdef CONFIG_S3C_DEV_HSMMC1
+	&s3c_device_hsmmc1,
+#endif
+
+#ifdef CONFIG_S3C_DEV_HSMMC2
+	&s3c_device_hsmmc2,
+#endif
+
+#ifdef CONFIG_S3C_DEV_HSMMC3
+	&s3c_device_hsmmc3,
+#endif
+
+#ifdef CONFIG_VIDEO_SAMSUNG_S5P_MFC
+	&s5p_device_mfc,
+#endif
+
+#ifdef CONFIG_VIDEO_JPEG_V2X
+	&s5p_device_jpeg,
+#endif
+
+#ifdef CONFIG_EXYNOS4_DEV_DWMCI
+	&exynos_device_dwmci,
+#endif
+	&exynos_device_dwmci0,
+	&exynos_device_dwmci1,
+	&exynos_device_dwmci2,
+#ifdef CONFIG_ION_EXYNOS
+	&exynos_device_ion,
+#endif
+
+#ifdef CONFIG_VIDEO_FIMG2D
+	&s5p_device_fimg2d,
+#endif
+
+#ifdef CONFIG_EXYNOS_MEDIA_DEVICE
+	&exynos_device_md0,
+	&exynos_device_md1,
+	&exynos_device_md2,
+#endif
+
+#ifdef CONFIG_VIDEO_EXYNOS5_FIMC_IS
+	&exynos5_device_fimc_is,
+#endif
+
+#ifdef CONFIG_VIDEO_EXYNOS_GSCALER
+	&exynos5_device_gsc0,
+	&exynos5_device_gsc1,
+	&exynos5_device_gsc2,
+	&exynos5_device_gsc3,
+#endif
+
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_LITE
+	&exynos_device_flite0,
+	&exynos_device_flite1,
+	&exynos_device_flite2,
+#endif
+
+#ifdef CONFIG_VIDEO_EXYNOS_MIPI_CSIS
+	&s5p_device_mipi_csis0,
+	&s5p_device_mipi_csis1,
+	&mipi_csi_fixed_voltage,
+#endif
+
+#ifdef CONFIG_VIDEO_M5MOLS
+	&m5mols_fixed_voltage,
+#endif
+
+	&s3c_device_rtc,
+
+#ifdef CONFIG_HAVE_PWM
+	&s3c_device_timer[1],
+#endif
+
+#ifdef CONFIG_VIDEO_EXYNOS_TV
+#ifdef CONFIG_VIDEO_EXYNOS_HDMI
+	&s5p_device_hdmi,
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_HDMIPHY
+	&s5p_device_i2c_hdmiphy,
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_MIXER
+	&s5p_device_mixer,
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_HDMI_CEC
+	&s5p_device_cec,
+#endif
+#endif
+	&s3c_device_i2c0,
+#ifdef CONFIG_MPU_SENSORS_MPU6050
+	&s3c_device_i2c1,
+#endif
+	&s3c_device_i2c3,
+	&s3c_device_i2c4,
+	&s3c_device_i2c5,
+	&s3c_device_i2c7,
+
+#ifdef CONFIG_USB_EHCI_S5P
+	&s5p_device_ehci,
+#endif
+
+#ifdef CONFIG_USB_OHCI_S5P
+	&s5p_device_ohci,
+#endif
+
+#ifdef CONFIG_USB_S3C_OTGD
+	&s3c_device_usbgadget,
+#endif
+
+#ifdef CONFIG_EXYNOS_DEV_SS_UDC
+	&exynos_device_ss_udc,
+#endif
+
+#ifdef CONFIG_USB_XHCI_EXYNOS
+	&exynos_device_xhci,
+#endif
+
+#ifdef CONFIG_BATTERY_SAMSUNG
+	&samsung_device_battery,
+#endif
+#ifdef CONFIG_MOTOR_DRV_ISA1200
+	&s3c_device_i2c17,
+#endif
+#if defined(CONFIG_STMPE811_ADC)
+	&s3c_device_i2c19,
+#endif
+#ifdef CONFIG_SND_SAMSUNG_I2S
+	&exynos_device_i2s0,
+#endif
+
+	&samsung_asoc_dma,
+	&samsung_asoc_idma,
+
+#ifdef CONFIG_SND_SAMSUNG_PCM
+	&exynos_device_pcm0,
+#endif
+
+#if defined(CONFIG_SND_SAMSUNG_RP) || defined(CONFIG_SND_SAMSUNG_ALP)
+	&exynos_device_srp,
+#endif
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+	&s5p_device_tmu,
+#endif
+
+#ifdef CONFIG_S5P_DEV_ACE
+	&s5p_device_ace,
+#endif
+
+#ifdef CONFIG_EXYNOS_C2C
+	&exynos_device_c2c,
+#endif
+
+#ifdef CONFIG_S3C64XX_DEV_SPI
+	&exynos_device_spi1,
+#endif
+
+#ifdef CONFIG_BUSFREQ_OPP
+	&exynos5_busfreq,
+#endif
+
+#ifdef CONFIG_MPU_SENSORS_MPU6050
+	&s3c_device_i2c11,
+#endif
+#ifdef CONFIG_SENSORS_BH1721FVC
+	&s3c_device_i2c12,
+#endif
+
+#ifdef CONFIG_SENSORS_SHT21
+	&s3c_device_i2c13,
+#endif
+
+#if defined(CONFIG_SAMSUNG_MHL)
+	&s3c_device_i2c15,	/* MHL */
+#endif
+
+#ifdef CONFIG_30PIN_CONN
+	&sec_device_connector,
+#endif
+
+#ifdef CONFIG_VIDEO_EXYNOS_ROTATOR
+	&exynos_device_rotator,
+#endif
+#ifdef CONFIG_BT_BCM43241
+	&bcm43241_bluetooth_device,
+#endif
+};
+
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+/* below temperature base on the celcius degree */
+struct s5p_platform_tmu exynos_tmu_data __initdata = {
+	.ts = {
+		.stop_1st_throttle  = 78,
+		.start_1st_throttle = 80,
+		.stop_2nd_throttle  = 87,
+		.start_2nd_throttle = 103,
+		.start_tripping = 110, /* temp to do tripping */
+		.start_emergency    = 120, /* To protect chip,forcely kernel panic */
+		.stop_mem_throttle  = 80,
+		.start_mem_throttle = 85,
+	},
+	.cpufreq = {
+		.limit_1st_throttle  = 800000, /* 800MHz in KHz order */
+		.limit_2nd_throttle  = 200000, /* 200MHz in KHz order */
+	},
+};
+
+#endif
+
+#ifdef CONFIG_VIDEO_EXYNOS_HDMI_CEC
+static struct s5p_platform_cec hdmi_cec_data __initdata = {
+
+};
+#endif
+
+#if defined(CONFIG_CMA)
+static unsigned long fbmem_start;
+static unsigned long fbmem_size;
+static int __init early_fbmem(char *p)
+{
+	char *endp;
+
+	if (!p)
+		return -EINVAL;
+
+	fbmem_size = memparse(p, &endp);
+	if (*endp == '@')
+		fbmem_start = memparse(endp + 1, &endp);
+
+	return endp > p ? 0 : -EINVAL;
+}
+early_param("fbmem", early_fbmem);
+
+static void __init exynos_reserve_mem(void)
+{
+	static struct cma_region regions[] = {
+		{
+			.name = "ion",
+			.size = 256 * SZ_1M,
+			.start = 0
+		},
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_GSC0
+		{
+			.name = "gsc0",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_GSC0 * SZ_1K,
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_GSC1
+		{
+			.name = "gsc1",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_GSC1 * SZ_1K,
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_GSC2
+		{
+			.name = "gsc2",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_GSC2 * SZ_1K,
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_GSC3
+		{
+			.name = "gsc3",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_GSC3 * SZ_1K,
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_FLITE0
+		{
+			.name = "flite0",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_FLITE0 * SZ_1K,
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_FLITE1
+		{
+			.name = "flite1",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_FLITE1 * SZ_1K,
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMD
+		{
+			.name = "fimd",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMD * SZ_1K,
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_AUDIO_SAMSUNG_MEMSIZE_SRP
+		{
+			.name = "srp",
+			.size = CONFIG_AUDIO_SAMSUNG_MEMSIZE_SRP * SZ_1K,
+			.start = 0,
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_S5P_MFC
+		{
+			.name		= "fw",
+			.size		= 2 << 20,
+			{ .alignment	= 128 << 10 },
+			.start		= 0x44000000,
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_TV
+		{
+			.name = "tv",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_TV * SZ_1K,
+			.start = 0
+		},
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_ROT
+		{
+			.name = "rot",
+			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_ROT * SZ_1K,
+			.start = 0,
+		},
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS5_FIMC_IS
+		{
+			.name = "fimc_is",
+			.size = CONFIG_VIDEO_EXYNOS_MEMSIZE_FIMC_IS * SZ_1K,
+			{
+				.alignment = 1 << 26,
+			},
+			.start = 0
+		},
+#endif
+		{
+			.size = 0
+		},
+	};
+	static const char map[] __initconst =
+#ifdef CONFIG_EXYNOS_C2C
+		"samsung-c2c=c2c_shdmem;"
+#endif
+		"s3cfb.0=fimd;"
+#ifdef CONFIG_AUDIO_SAMSUNG_MEMSIZE_SRP
+		"samsung-rp=srp;"
+#endif
+		"exynos-gsc.0=gsc0;exynos-gsc.1=gsc1;exynos-gsc.2=gsc2;exynos-gsc.3=gsc3;"
+		"exynos-fimc-lite.0=flite0;exynos-fimc-lite.1=flite1;"
+		"ion-exynos=ion,gsc0,gsc1,gsc2,gsc3,flite0,flite1,fimd,fw,rot;"
+		"exynos-rot=rot;"
+		"s5p-mfc-v6/f=fw;"
+		"s5p-mixer=tv;"
+		"exynos5-fimc-is=fimc_is;";
+
+	int i;
+
+	s5p_cma_region_reserve(regions, NULL, 0, map);
+
+	if (!(fbmem_start && fbmem_size))
+		return;
+
+	for (i = 0; i < ARRAY_SIZE(regions); i++) {
+		if (regions[i].name && !strcmp(regions[i].name, "fimd")) {
+			memcpy(phys_to_virt(regions[i].start), phys_to_virt(fbmem_start), fbmem_size * SZ_1K);
+			printk(KERN_INFO "Bootloader sent 'fbmem' : %08X\n", (u32)fbmem_start);
+			break;
+		}
+	}
+}
+#else /* !CONFIG_CMA */
+static inline void exynos_reserve_mem(void)
+{
+}
+#endif
+
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_LITE
+static void __init smdk5250_camera_gpio_cfg(void)
+{
+	/* CAM A port(b0010) : PCLK, VSYNC, HREF, CLK_OUT */
+	s3c_gpio_cfgrange_nopull(EXYNOS5_GPH0(0), 4, S3C_GPIO_SFN(2));
+	/* CAM A port(b0010) : DATA[0-7] */
+	s3c_gpio_cfgrange_nopull(EXYNOS5_GPH1(0), 8, S3C_GPIO_SFN(2));
+	/* CAM B port(b0010) : PCLK, BAY_RGB[0-6] */
+	s3c_gpio_cfgrange_nopull(EXYNOS5_GPG0(0), 8, S3C_GPIO_SFN(2));
+	/* CAM B port(b0010) : BAY_Vsync, BAY_RGB[7-13] */
+	s3c_gpio_cfgrange_nopull(EXYNOS5_GPG1(0), 8, S3C_GPIO_SFN(2));
+	/* CAM B port(b0010) : BAY_Hsync, BAY_MCLK */
+	s3c_gpio_cfgrange_nopull(EXYNOS5_GPG2(0), 2, S3C_GPIO_SFN(2));
+	/* This is externel interrupt for m5mo */
+#ifdef CONFIG_VIDEO_M5MOLS
+	s3c_gpio_cfgpin(EXYNOS5_GPX2(6), S3C_GPIO_SFN(0xF));
+	s3c_gpio_setpull(EXYNOS5_GPX2(6), S3C_GPIO_PULL_NONE);
+#endif
+}
+#endif
+
+#if defined(CONFIG_VIDEO_EXYNOS_GSCALER) && defined(CONFIG_VIDEO_EXYNOS_FIMC_LITE)
+#if defined(CONFIG_VIDEO_S5K4BA)
+static struct exynos_isp_info s5k4ba = {
+	.board_info	= &s5k4ba_info,
+	.cam_srclk_name	= "xxti",
+	.clk_frequency	= 24000000UL,
+	.bus_type	= CAM_TYPE_ITU,
+#ifdef CONFIG_ITU_A
+	.cam_clk_name	= "sclk_cam0",
+	.i2c_bus_num	= 4,
+	.cam_port	= CAM_PORT_A, /* A-Port : 0, B-Port : 1 */
+#endif
+#ifdef CONFIG_ITU_B
+	.cam_clk_name	= "sclk_cam1",
+	.i2c_bus_num	= 5,
+	.cam_port	= CAM_PORT_B, /* A-Port : 0, B-Port : 1 */
+#endif
+	.flags		= CAM_CLK_INV_VSYNC,
+};
+/* This is for platdata of fimc-lite */
+static struct s3c_platform_camera flite_s5k4ba = {
+	.type		= CAM_TYPE_MIPI,
+	.use_isp	= true,
+	.inv_pclk	= 1,
+	.inv_vsync	= 1,
+	.inv_href	= 0,
+	.inv_hsync	= 0,
+};
+#endif
+#if defined(CONFIG_VIDEO_M5MOLS)
+static struct exynos_isp_info m5mols = {
+	.board_info	= &m5mols_board_info,
+	.cam_srclk_name	= "xxti",
+	.clk_frequency	= 24000000UL,
+	.bus_type	= CAM_TYPE_MIPI,
+#ifdef CONFIG_CSI_C
+	.cam_clk_name	= "sclk_cam0",
+	.i2c_bus_num	= 4,
+	.cam_port	= CAM_PORT_A, /* A-Port : 0, B-Port : 1 */
+#endif
+#ifdef CONFIG_CSI_D
+	.cam_clk_name	= "sclk_cam1",
+	.i2c_bus_num	= 5,
+	.cam_port	= CAM_PORT_B, /* A-Port : 0, B-Port : 1 */
+#endif
+	.flags		= CAM_CLK_INV_PCLK | CAM_CLK_INV_VSYNC,
+	.csi_data_align = 32,
+};
+/* This is for platdata of fimc-lite */
+static struct s3c_platform_camera flite_m5mo = {
+	.type		= CAM_TYPE_MIPI,
+	.use_isp	= true,
+	.inv_pclk	= 1,
+	.inv_vsync	= 1,
+	.inv_href	= 0,
+	.inv_hsync	= 0,
+};
+#endif
+
+static void __set_gsc_camera_config(struct exynos_platform_gscaler *data,
+					u32 active_index, u32 preview,
+					u32 camcording, u32 max_cam)
+{
+	data->active_cam_index = active_index;
+	data->cam_preview = preview;
+	data->cam_camcording = camcording;
+	data->num_clients = max_cam;
+}
+
+static void __set_flite_camera_config(struct exynos_platform_flite *data,
+					u32 active_index, u32 max_cam)
+{
+	data->active_cam_index = active_index;
+	data->num_clients = max_cam;
+}
+
+static void __init smdk5250_set_camera_platdata(void)
+{
+	int gsc_cam_index = 0;
+	int flite0_cam_index = 0;
+	int flite1_cam_index = 0;
+#if defined(CONFIG_VIDEO_M5MOLS)
+	exynos_gsc0_default_data.isp_info[gsc_cam_index++] = &m5mols;
+#if defined(CONFIG_CSI_C)
+	exynos_flite0_default_data.cam[flite0_cam_index] = &flite_m5mo;
+	exynos_flite0_default_data.isp_info[flite0_cam_index] = &m5mols;
+	flite0_cam_index++;
+#endif
+#if defined(CONFIG_CSI_D)
+	exynos_flite1_default_data.cam[flite1_cam_index] = &flite_m5mo;
+	exynos_flite1_default_data.isp_info[flite1_cam_index] = &m5mols;
+	flite1_cam_index++;
+#endif
+#endif
+	/* flite platdata register */
+	__set_flite_camera_config(&exynos_flite0_default_data, 0, flite0_cam_index);
+	__set_flite_camera_config(&exynos_flite1_default_data, 0, flite1_cam_index);
+
+	/* gscaler platdata register */
+	/* GSC-0 */
+	__set_gsc_camera_config(&exynos_gsc0_default_data, 0, 1, 0, gsc_cam_index);
+
+	/* GSC-1 */
+	/* GSC-2 */
+	/* GSC-3 */
+}
+#endif /* CONFIG_VIDEO_EXYNOS_GSCALER */
+
+static void __init p10_map_io(void)
+{
+	s5p_init_io(NULL, 0, S5P_VA_CHIPID);
+	s3c24xx_init_clocks(24000000);
+	s3c24xx_init_uarts(smdk5250_uartcfgs, ARRAY_SIZE(smdk5250_uartcfgs));
+	exynos_reserve_mem();
+
+#if defined(CONFIG_SEC_DEBUG)
+	/* as soon as INFORM6 is visible, sec_debug is ready to run */
+	sec_debug_init();
+#endif
+}
+
+#ifdef CONFIG_EXYNOS_DEV_SYSMMU
+static void __init exynos_sysmmu_init(void)
+{
+#ifdef CONFIG_VIDEO_JPEG_V2X
+	platform_set_sysmmu(&SYSMMU_PLATDEV(jpeg).dev, &s5p_device_jpeg.dev);
+#endif
+#ifdef CONFIG_VIDEO_SAMSUNG_S5P_MFC
+	platform_set_sysmmu(&SYSMMU_PLATDEV(mfc_lr).dev, &s5p_device_mfc.dev);
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_TV
+	platform_set_sysmmu(&SYSMMU_PLATDEV(tv).dev, &s5p_device_mixer.dev);
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_GSCALER
+	platform_set_sysmmu(&SYSMMU_PLATDEV(gsc0).dev,
+						&exynos5_device_gsc0.dev);
+	platform_set_sysmmu(&SYSMMU_PLATDEV(gsc1).dev,
+						&exynos5_device_gsc1.dev);
+	platform_set_sysmmu(&SYSMMU_PLATDEV(gsc2).dev,
+						&exynos5_device_gsc2.dev);
+	platform_set_sysmmu(&SYSMMU_PLATDEV(gsc3).dev,
+						&exynos5_device_gsc3.dev);
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_LITE
+	platform_set_sysmmu(&SYSMMU_PLATDEV(camif0).dev,
+					   &exynos_device_flite0.dev);
+	platform_set_sysmmu(&SYSMMU_PLATDEV(camif1).dev,
+					   &exynos_device_flite1.dev);
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_ROTATOR
+	platform_set_sysmmu(&SYSMMU_PLATDEV(rot).dev,
+						&exynos_device_rotator.dev);
+#endif
+#ifdef CONFIG_VIDEO_FIMG2D
+	platform_set_sysmmu(&SYSMMU_PLATDEV(2d).dev, &s5p_device_fimg2d.dev);
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS5_FIMC_IS
+	platform_set_sysmmu(&SYSMMU_PLATDEV(isp).dev,
+						&exynos5_device_fimc_is.dev);
+#endif
+}
+#else /* !CONFIG_EXYNOS_DEV_SYSMMU */
+static inline void exynos_sysmmu_init(void)
+{
+}
+#endif
+
+static void p10_power_off(void)
+{
+	printk(KERN_EMERG "%s: set PS_HOLD low\n", __func__);
+
+	writel(readl(EXYNOS5_PS_HOLD_CONTROL) & 0xFFFFFEFF, EXYNOS5_PS_HOLD_CONTROL);
+	printk(KERN_EMERG "%s: Should not reach here\n", __func__);
+}
+
+#ifdef CONFIG_FB_S5P_EXTDSP
+struct platform_device s3c_device_extdsp = {
+	.name		= "s3cfb_extdsp",
+	.id		= 0,
+};
+
+static struct s3cfb_extdsp_lcd dummy_buffer = {
+	.width = 1920,
+	.height = 1080,
+	.bpp = 16,
+};
+
+static struct s3c_platform_fb default_extdsp_data __initdata = {
+	.hw_ver		= 0x70,
+	.nr_wins	= 1,
+	.default_win	= 0,
+	.swap		= FB_SWAP_WORD | FB_SWAP_HWORD,
+	.lcd		= &dummy_buffer
+};
+
+void __init s3cfb_extdsp_set_platdata(struct s3c_platform_fb *pd)
+{
+	struct s3c_platform_fb *npd;
+	int i;
+
+	if (!pd)
+		pd = &default_extdsp_data;
+
+	npd = kmemdup(pd, sizeof(struct s3c_platform_fb), GFP_KERNEL);
+	if (!npd)
+		printk(KERN_ERR "%s: no memory for platform data\n", __func__);
+	else {
+		for (i = 0; i < npd->nr_wins; i++)
+			npd->nr_buffers[i] = 1;
+		s3c_device_extdsp.dev.platform_data = npd;
+	}
+}
+#endif
+
+static void camera_init(void)
+{
+	camera_class = class_create(THIS_MODULE, "camera");
+
+	if (IS_ERR(camera_class))
+		pr_err("Failed to create class(camera)!\n");
+}
+
+static void __init p10_machine_init(void)
+{
+#ifdef CONFIG_S3C64XX_DEV_SPI
+	struct clk *sclk = NULL;
+	struct clk *prnt = NULL;
+	struct device *spi1_dev = &exynos_device_spi1.dev;
+#endif
+	pm_power_off = p10_power_off;
+
+	if (samsung_rev() >= EXYNOS5250_REV_1_0) {
+		exynos_dwmci_set_platdata(&exynos5_dwmci0_pdata, 0);
+		dev_set_name(&exynos_device_dwmci0.dev, "s3c-sdhci.0");
+		clk_add_alias("dwmci", "dw_mmc.0", "hsmmc",
+			&exynos_device_dwmci0.dev);
+		clk_add_alias("sclk_dwmci", "dw_mmc.0", "sclk_mmc",
+			&exynos_device_dwmci0.dev);
+
+		exynos_dwmci_set_platdata(&exynos5_dwmci1_pdata, 1);
+		dev_set_name(&exynos_device_dwmci1.dev, "s3c-sdhci.1");
+		clk_add_alias("dwmci", "dw_mmc.1", "hsmmc",
+			&exynos_device_dwmci1.dev);
+		clk_add_alias("sclk_dwmci", "dw_mmc.1", "sclk_mmc",
+			&exynos_device_dwmci1.dev);
+
+		exynos_dwmci_set_platdata(&exynos5_dwmci2_pdata, 2);
+		dev_set_name(&exynos_device_dwmci2.dev, "s3c-sdhci.2");
+		clk_add_alias("dwmci", "dw_mmc.2", "hsmmc",
+			&exynos_device_dwmci2.dev);
+		clk_add_alias("sclk_dwmci", "dw_mmc.2", "sclk_mmc",
+			&exynos_device_dwmci2.dev);
+	} else {
+#ifdef CONFIG_EXYNOS4_DEV_DWMCI
+	exynos_dwmci_set_platdata(&exynos_dwmci_pdata, 0);
+#endif
+
+#ifdef CONFIG_S3C_DEV_HSMMC
+	s3c_sdhci0_set_platdata(&smdk5250_hsmmc0_pdata);
+#endif
+
+#ifdef CONFIG_S3C_DEV_HSMMC1
+	s3c_sdhci1_set_platdata(&smdk5250_hsmmc1_pdata);
+#endif
+
+#ifdef CONFIG_S3C_DEV_HSMMC2
+	s3c_sdhci2_set_platdata(&smdk5250_hsmmc2_pdata);
+#endif
+
+#ifdef CONFIG_S3C_DEV_HSMMC3
+	s3c_sdhci3_set_platdata(&smdk5250_hsmmc3_pdata);
+#endif
+    }
+#ifdef CONFIG_ION_EXYNOS
+	exynos_ion_set_platdata();
+#endif
+
+#ifdef CONFIG_LEDS_SPFCW043
+	platform_device_register(&s3c_device_spfcw043_led);
+#endif
+
+#ifdef CONFIG_FB_S3C
+	dev_set_name(&s5p_device_fimd1.dev, "s3cfb.1");
+	clk_add_alias("lcd", "exynos5-fb.1", "lcd", &s5p_device_fimd1.dev);
+	clk_add_alias("sclk_fimd", "exynos5-fb.1", "sclk_fimd",
+			&s5p_device_fimd1.dev);
+	s5p_fb_setname(1, "exynos5-fb");
+
+	s5p_fimd1_set_platdata(&p10_lcd1_pdata);
+#endif
+
+#ifdef CONFIG_FB_S5P_EXTDSP
+	s3cfb_extdsp_set_platdata(&default_extdsp_data);
+#endif
+
+#ifdef CONFIG_BACKLIGHT_PWM
+	samsung_bl_set(&p10_bl_gpio_info, &p10_bl_data);
+#endif
+
+#ifdef CONFIG_USB_EHCI_S5P
+	smdk5250_ehci_init();
+#endif
+
+#ifdef CONFIG_USB_OHCI_S5P
+	smdk5250_ohci_init();
+#endif
+
+#if defined(CONFIG_CPU_EXYNOS5250)
+	set_usb3_en(1);
+#endif
+
+#ifdef CONFIG_USB_S3C_OTGD
+	smdk5250_usbgadget_init();
+#endif
+
+#ifdef CONFIG_EXYNOS_DEV_SS_UDC
+	smdk5250_ss_udc_init();
+#endif
+
+#ifdef CONFIG_USB_XHCI_EXYNOS
+	smdk5250_xhci_init();
+#endif
+
+#if defined(CONFIG_VIDEO_SAMSUNG_S5P_MFC)
+#if defined(CONFIG_EXYNOS_DEV_PD)
+	s5p_device_mfc.dev.parent = &exynos5_device_pd[PD_MFC].dev;
+#endif
+	s5p_mfc_set_platdata(&smdk5250_mfc_pd);
+
+	dev_set_name(&s5p_device_mfc.dev, "s3c-mfc");
+	clk_add_alias("mfc", "s5p-mfc-v6", "mfc", &s5p_device_mfc.dev);
+	s5p_mfc_setname(&s5p_device_mfc, "s5p-mfc-v6");
+#endif
+
+#ifdef CONFIG_FB_S3C
+	s5p_device_fimd1.dev.parent = &exynos5_device_pd[PD_DISP1].dev;
+#endif
+
+#ifdef CONFIG_S5P_DP
+	s5p_dp_set_platdata(&p10_dp_data);
+#endif
+
+#ifdef CONFIG_S3C_ADC
+	if (samsung_rev() >= EXYNOS5250_REV_1_0) {
+		platform_device_register(&s3c_device_adc);
+#ifdef CONFIG_S3C_DEV_HWMON
+		platform_device_register(&s3c_device_hwmon);
+#endif
+	}
+#endif
+
+#ifdef CONFIG_S3C_DEV_HWMON
+	if (samsung_rev() >= EXYNOS5250_REV_1_0)
+		s3c_hwmon_set_platdata(&smdk5250_hwmon_pdata);
+#endif
+
+#ifdef CONFIG_VIDEO_FIMG2D
+	s5p_fimg2d_set_platdata(&fimg2d_data);
+#endif
+
+	exynos_sysmmu_init();
+
+	p10_config_gpio_table();
+
+	exynos5_sleep_gpio_table_set = p10_config_sleep_gpio_table;
+
+	s3c_i2c0_set_platdata(NULL);
+	i2c_register_board_info(0, i2c_devs0, ARRAY_SIZE(i2c_devs0));
+
+#ifdef CONFIG_MPU_SENSORS_MPU6050
+	pr_info("MPU6050 I2C-1 Init\n");
+	//magnetic_init();
+	s3c_i2c1_set_platdata(NULL);
+	i2c_register_board_info(1, i2c_devs1, ARRAY_SIZE(i2c_devs1));
+#endif
+
+	p10_tsp_init();
+	p10_key_init();
+
+	s3c_i2c5_set_platdata(NULL);
+	i2c_register_board_info(5, i2c_devs5, ARRAY_SIZE(i2c_devs5));
+
+	midas_sound_init();
+
+#ifdef CONFIG_MPU_SENSORS_MPU6050
+	magnetic_init();
+	i2c_register_board_info(11, i2c_devs11, ARRAY_SIZE(i2c_devs11));
+#endif
+
+#ifdef CONFIG_SENSORS_BH1721FVC
+	light_sensor_init();
+	i2c_register_board_info(12, i2c_bh1721_emul, ARRAY_SIZE(i2c_bh1721_emul));
+#endif
+
+#ifdef CONFIG_SENSORS_SHT21
+	i2c_register_board_info(13, i2c_devs13, ARRAY_SIZE(i2c_devs13));
+#endif
+
+#if defined(CONFIG_SAMSUNG_MHL)
+	i2c_register_board_info(15, i2c_devs15_emul,
+			ARRAY_SIZE(i2c_devs15_emul));
+#endif
+
+#ifdef CONFIG_MOTOR_DRV_ISA1200
+	isa1200_init();
+	i2c_register_board_info(17, i2c_devs17,
+				ARRAY_SIZE(i2c_devs17));
+#endif
+
+#if defined(CONFIG_STMPE811_ADC)
+	i2c_register_board_info(19, i2c_devs19_emul,
+		ARRAY_SIZE(i2c_devs19_emul));
+#endif
+#if defined(CONFIG_BATTERY_SAMSUNG_P1X)
+	p10_battery_init();
+#endif
+
+	platform_device_register(&vbatt_device);
+
+	platform_add_devices(p10_devices, ARRAY_SIZE(p10_devices));
+
+#ifdef CONFIG_FB_S3C
+#if defined(CONFIG_MACH_P10_DP_01)
+#if defined(CONFIG_DP_40HZ_P10)
+	exynos4_fimd_setup_clock(&s5p_device_fimd1.dev, "sclk_fimd", "sclk_vpll",
+			180 * MHZ);
+#elif defined(CONFIG_DP_60HZ_P10)
+	exynos4_fimd_setup_clock(&s5p_device_fimd1.dev, "sclk_fimd", "sclk_vpll",
+		270 * MHZ);
+#endif
+#endif
+#endif
+
+#ifdef CONFIG_VIDEO_EXYNOS_MIPI_CSIS
+#if defined(CONFIG_EXYNOS_DEV_PD)
+	s5p_device_mipi_csis0.dev.parent = &exynos5_device_pd[PD_GSCL].dev;
+	s5p_device_mipi_csis1.dev.parent = &exynos5_device_pd[PD_GSCL].dev;
+#endif
+	s5p_mipi_csis0_default_data.clk_rate = fimc_clk_rate();
+	s5p_mipi_csis1_default_data.clk_rate = fimc_clk_rate();
+	s3c_set_platdata(&s5p_mipi_csis0_default_data,
+			sizeof(s5p_mipi_csis0_default_data), &s5p_device_mipi_csis0);
+	s3c_set_platdata(&s5p_mipi_csis1_default_data,
+			sizeof(s5p_mipi_csis1_default_data), &s5p_device_mipi_csis1);
+#endif
+
+#ifdef CONFIG_VIDEO_EXYNOS_FIMC_LITE
+#if defined(CONFIG_EXYNOS_DEV_PD)
+	exynos_device_flite0.dev.parent = &exynos5_device_pd[PD_GSCL].dev;
+	exynos_device_flite1.dev.parent = &exynos5_device_pd[PD_GSCL].dev;
+	exynos_device_flite2.dev.parent = &exynos5_device_pd[PD_GSCL].dev;
+#endif
+	smdk5250_camera_gpio_cfg();
+	smdk5250_set_camera_platdata();
+	s3c_set_platdata(&exynos_flite0_default_data,
+			sizeof(exynos_flite0_default_data), &exynos_device_flite0);
+	s3c_set_platdata(&exynos_flite1_default_data,
+			sizeof(exynos_flite1_default_data), &exynos_device_flite1);
+	s3c_set_platdata(&exynos_flite2_default_data,
+			sizeof(exynos_flite2_default_data), &exynos_device_flite2);
+
+/* In EVT0, for using camclk, gscaler clock should be enabled */
+	if (samsung_rev() < EXYNOS5250_REV_1_0) {
+		dev_set_name(&exynos_device_flite0.dev, "exynos-gsc.0");
+		clk_add_alias("gscl", "exynos-fimc-lite.0", "gscl",
+				&exynos_device_flite0.dev);
+		dev_set_name(&exynos_device_flite0.dev, "exynos-fimc-lite.0");
+
+		dev_set_name(&exynos_device_flite1.dev, "exynos-gsc.0");
+		clk_add_alias("gscl", "exynos-fimc-lite.1", "gscl",
+				&exynos_device_flite1.dev);
+		dev_set_name(&exynos_device_flite1.dev, "exynos-fimc-lite.1");
+	}
+#endif
+
+#if defined CONFIG_VIDEO_EXYNOS5_FIMC_IS
+	dev_set_name(&exynos5_device_fimc_is.dev, "s5p-mipi-csis.0");
+	clk_add_alias("gscl_wrap0", "exynos5-fimc-is", "gscl_wrap0", &exynos5_device_fimc_is.dev);
+	clk_add_alias("sclk_gscl_wrap0", "exynos5-fimc-is", "sclk_gscl_wrap0", &exynos5_device_fimc_is.dev);
+	dev_set_name(&exynos5_device_fimc_is.dev, "s5p-mipi-csis.1");
+	clk_add_alias("gscl_wrap1", "exynos5-fimc-is", "gscl_wrap1", &exynos5_device_fimc_is.dev);
+	clk_add_alias("sclk_gscl_wrap1", "exynos5-fimc-is", "sclk_gscl_wrap1", &exynos5_device_fimc_is.dev);
+	dev_set_name(&exynos5_device_fimc_is.dev, "exynos-gsc.0");
+	clk_add_alias("gscl", "exynos5-fimc-is", "gscl", &exynos5_device_fimc_is.dev);
+	dev_set_name(&exynos5_device_fimc_is.dev, "exynos5-fimc-is");
+
+#if defined CONFIG_VIDEO_S5K6A3
+	exynos5_fimc_is_data.sensor_info[s5k6a3.sensor_position] = &s5k6a3;
+	printk("add s5k6a3 sensor info(pos : %d)\n", s5k6a3.sensor_position);
+#endif
+#if defined CONFIG_VIDEO_S5K4E5
+	exynos5_fimc_is_data.sensor_info[s5k4e5.sensor_position] = &s5k4e5;
+	printk("add s5k4e5 sensor info(pos : %d)\n", s5k4e5.sensor_position);
+#endif
+
+	exynos5_fimc_is_set_platdata(&exynos5_fimc_is_data);
+#if defined(CONFIG_EXYNOS_DEV_PD)
+	exynos5_device_pd[PD_ISP].dev.parent = &exynos5_device_pd[PD_GSCL].dev;
+	exynos5_device_fimc_is.dev.parent = &exynos5_device_pd[PD_ISP].dev;
+#endif
+#endif
+#ifdef CONFIG_EXYNOS4_SETUP_THERMAL
+	s5p_tmu_set_platdata(&exynos_tmu_data);
+#endif
+#ifdef CONFIG_VIDEO_EXYNOS_GSCALER
+#if defined(CONFIG_EXYNOS_DEV_PD)
+	exynos5_device_gsc0.dev.parent = &exynos5_device_pd[PD_GSCL].dev;
+	exynos5_device_gsc1.dev.parent = &exynos5_device_pd[PD_GSCL].dev;
+	exynos5_device_gsc2.dev.parent = &exynos5_device_pd[PD_GSCL].dev;
+	exynos5_device_gsc3.dev.parent = &exynos5_device_pd[PD_GSCL].dev;
+#endif
+
+	if (samsung_rev() >= EXYNOS5250_REV_1_0) {
+		exynos5_gsc_set_pdev_name(0, "exynos5250-gsc");
+		exynos5_gsc_set_pdev_name(1, "exynos5250-gsc");
+		exynos5_gsc_set_pdev_name(2, "exynos5250-gsc");
+		exynos5_gsc_set_pdev_name(3, "exynos5250-gsc");
+	}
+
+	s3c_set_platdata(&exynos_gsc0_default_data, sizeof(exynos_gsc0_default_data),
+			&exynos5_device_gsc0);
+	s3c_set_platdata(&exynos_gsc1_default_data, sizeof(exynos_gsc1_default_data),
+			&exynos5_device_gsc1);
+	s3c_set_platdata(&exynos_gsc2_default_data, sizeof(exynos_gsc2_default_data),
+			&exynos5_device_gsc2);
+	s3c_set_platdata(&exynos_gsc3_default_data, sizeof(exynos_gsc3_default_data),
+			&exynos5_device_gsc3);
+	/* Gscaler can use MPLL(266MHz) or VPLL(300MHz).
+	In case of P10, Gscaler should use MPLL(266MHz) because FIMD uses VPLL(86MHz).
+	So mout_aclk_300_gscl_mid selects mout_mpll_user and then
+	mout_aclk_300_gscl_mid is set to 267MHz
+	even though the clock name(dout_aclk_300_gscl) implies and requires around 300MHz
+	*/
+	exynos5_gsc_set_parent_clock("mout_aclk_300_gscl_mid", "mout_mpll_user");
+	exynos5_gsc_set_parent_clock("mout_aclk_300_gscl", "mout_aclk_300_gscl_mid");
+	exynos5_gsc_set_parent_clock("aclk_300_gscl", "dout_aclk_300_gscl");
+	exynos5_gsc_set_clock_rate("dout_aclk_300_gscl", 267000000);
+#endif
+
+#ifdef CONFIG_EXYNOS_C2C
+	exynos_c2c_set_platdata(&smdk5250_c2c_pdata);
+#endif
+
+#ifdef CONFIG_VIDEO_JPEG_V2X
+	exynos5_jpeg_setup_clock(&s5p_device_jpeg.dev, 150000000);
+#endif
+
+#if defined(CONFIG_VIDEO_EXYNOS_TV) && defined(CONFIG_VIDEO_EXYNOS_HDMI)
+	dev_set_name(&s5p_device_hdmi.dev, "exynos5-hdmi");
+	clk_add_alias("hdmi", "s5p-hdmi", "hdmi", &s5p_device_hdmi.dev);
+	clk_add_alias("hdmiphy", "s5p-hdmi", "hdmiphy", &s5p_device_hdmi.dev);
+
+	s5p_tv_setup();
+
+/* setup dependencies between TV devices */
+	/* This will be added after power domain for exynos5 is developed */
+	s5p_device_hdmi.dev.parent = &exynos5_device_pd[PD_DISP1].dev;
+	s5p_device_mixer.dev.parent = &exynos5_device_pd[PD_DISP1].dev;
+
+	s5p_i2c_hdmiphy_set_platdata(NULL);
+#ifdef CONFIG_VIDEO_EXYNOS_HDMI_CEC
+	s5p_hdmi_cec_set_platdata(&hdmi_cec_data);
+#endif
+#endif
+
+#ifdef CONFIG_S3C64XX_DEV_SPI
+	sclk = clk_get(spi1_dev, "sclk_spi1");
+	if (IS_ERR(sclk))
+		dev_err(spi1_dev, "failed to get sclk for SPI-1\n");
+	prnt = clk_get(spi1_dev, "mout_mpll_user");
+	if (IS_ERR(prnt))
+		dev_err(spi1_dev, "failed to get prnt\n");
+	if (clk_set_parent(sclk, prnt))
+		printk(KERN_ERR "Unable to set parent %s of clock %s.\n",
+				prnt->name, sclk->name);
+
+	clk_set_rate(sclk, 800 * 1000 * 1000);
+	clk_put(sclk);
+	clk_put(prnt);
+
+	if (!gpio_request(GPIO_5M_SPI_CS, "SPI_CS1")) {
+		gpio_direction_output(GPIO_5M_SPI_CS, 1);
+		s3c_gpio_cfgpin(GPIO_5M_SPI_CS, S3C_GPIO_SFN(1));
+		s3c_gpio_setpull(GPIO_5M_SPI_CS, S3C_GPIO_PULL_UP);
+		exynos_spi_set_info(1, EXYNOS_SPI_SRCCLK_SCLK,
+			ARRAY_SIZE(spi1_csi));
+	}
+
+	spi_register_board_info(spi1_board_info, ARRAY_SIZE(spi1_board_info));
+#endif
+
+#ifdef CONFIG_BUSFREQ_OPP
+	dev_add(&busfreq, &exynos5_busfreq.dev);
+	ppmu_init(&exynos_ppmu[PPMU_CPU], &exynos5_busfreq.dev);
+	ppmu_init(&exynos_ppmu[PPMU_DDR_C], &exynos5_busfreq.dev);
+	ppmu_init(&exynos_ppmu[PPMU_DDR_R1], &exynos5_busfreq.dev);
+	ppmu_init(&exynos_ppmu[PPMU_DDR_L], &exynos5_busfreq.dev);
+	ppmu_init(&exynos_ppmu[PPMU_RIGHT0_BUS], &exynos5_busfreq.dev);
+#endif
+#ifdef CONFIG_30PIN_CONN
+	acc_con_gpio_init();
+#endif
+
+	/* for BRCM Wi-Fi */
+	brcm_wlan_init();
+
+	/* for camera*/
+	camera_init();
+
+	register_reboot_notifier(&exynos5_reboot_notifier);
+}
+
+#ifdef CONFIG_EXYNOS_C2C
+static void __init exynos_c2c_reserve(void)
+{
+	static struct cma_region regions[] = {
+		{
+			.name = "c2c_shdmem",
+			.size = 64 * SZ_1M,
+			{ .alignment	= 64 * SZ_1M },
+			.start = C2C_SHAREDMEM_BASE
+		}, {
+			.size = 0,
+		}
+	};
+
+	s5p_cma_region_reserve(regions, NULL, 0, map);
+}
+#endif
+
+#if defined(CONFIG_SEC_DEBUG)
+static void __init exynos_init_reserve(void)
+{
+	sec_debug_magic_init();
+}
+#endif
+
+MACHINE_START(SMDK5250, "SMDK5250")
+	.boot_params	= S5P_PA_SDRAM + 0x100,
+	.init_irq	= exynos5_init_irq,
+	.map_io		= p10_map_io,
+	.init_machine	= p10_machine_init,
+	.timer		= &exynos4_timer,
+#ifdef CONFIG_EXYNOS_C2C
+	.reserve	= &exynos_c2c_reserve,
+#endif
+#if defined(CONFIG_SEC_DEBUG)
+	.init_early	= &exynos_init_reserve,
+#endif
+MACHINE_END
diff -Naur ./arch/arm/mach-exynos/mach-p4notepq.c ../../HK_JB/Kernel/arch/arm/mach-exynos/mach-p4notepq.c
--- ./arch/arm/mach-exynos/mach-p4notepq.c	2012-12-08 20:40:46.149821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/mach-p4notepq.c	2012-11-22 09:13:15.000000000 +0100
@@ -654,10 +654,13 @@
 	struct android_usb_platform_data *android_pdata =
 		s3c_device_android_usb.dev.platform_data;
 	if (android_pdata) {
-		unsigned int newluns = 2;
+		unsigned int newluns = 0;
+		unsigned int cdfs = 1;
+
 		printk(KERN_DEBUG "usb: %s: default luns=%d, new luns=%d\n",
 				__func__, android_pdata->nluns, newluns);
 		android_pdata->nluns = newluns;
+		android_pdata->cdfs_support = cdfs;
 	} else {
 		printk(KERN_DEBUG "usb: %s android_pdata is not available\n",
 				__func__);
@@ -826,6 +829,30 @@
 	else
 		return 0;
 }
+
+static int sec_bat_get_aicl_current(void)
+{
+	if (smb_callbacks && smb_callbacks->get_aicl_current)
+		return smb_callbacks->get_aicl_current();
+	else
+		return 0;
+}
+
+static int sec_bat_get_input_current(void)
+{
+	if (smb_callbacks && smb_callbacks->get_input_current)
+		return smb_callbacks->get_input_current();
+	else
+		return 0;
+
+}
+
+static void sec_bat_set_aicl_state(int state)
+{
+	if (smb_callbacks && smb_callbacks->set_aicl_state)
+		smb_callbacks->set_aicl_state(state);
+}
+
 #endif
 
 static int check_bootmode(void)
@@ -1003,7 +1030,9 @@
 static void irda_wake_en(bool onoff)
 {
 	gpio_direction_output(GPIO_IRDA_WAKE, onoff);
+#if 0
 	printk(KERN_ERR "%s: irda_wake_en : %d\n", __func__, onoff);
+#endif
 }
 
 static void irda_device_init(void)
@@ -1020,6 +1049,10 @@
 	}
 	gpio_direction_output(GPIO_IRDA_WAKE, 0);
 
+	s3c_gpio_cfgpin(GPIO_IRDA_IRQ, S3C_GPIO_INPUT);
+	s3c_gpio_setpull(GPIO_IRDA_IRQ, S3C_GPIO_PULL_UP);
+	gpio_direction_input(GPIO_IRDA_IRQ);
+
 	return;
 }
 
@@ -1027,7 +1060,6 @@
 
 static void irda_vdd_onoff(bool onoff)
 {
-	int ret = 0;
 	static struct regulator *vled_ic;
 
 	if (onoff) {
@@ -1061,7 +1093,6 @@
 };
 
 static struct mc96_platform_data mc96_pdata = {
-	.ir_remote_init = irda_device_init,
 	.ir_wake_en = irda_wake_en,
 	.ir_vdd_onoff = irda_vdd_onoff,
 };
@@ -1182,7 +1213,7 @@
 	pr_info("BAT : Battery GPIO initialized.\n");
 }
 
-static void  sec_charger_cb(int set_cable_type)
+static void  sec_charger_cb(int set_cable_type, int cable_sub_type)
 {
 	struct usb_gadget *gadget = platform_get_drvdata(&s3c_device_usbgadget);
 	bool cable_state_to_tsp;
@@ -1196,8 +1227,40 @@
 		is_cable_attached = true;
 		is_usb_lpm_enter = false;
 		break;
-	case CHARGER_AC:
 	case CHARGER_DOCK:
+		switch (cable_sub_type) {
+		case ONLINE_SUB_TYPE_KBD:
+			cable_state_to_tsp = true;
+			cable_state_to_usb = false;
+			is_cable_attached = true;
+			is_usb_lpm_enter = true;
+			pr_info("%s: key dock is detected\n", __func__);
+			break;
+		case ONLINE_SUB_TYPE_UNKNOWN:
+		case ONLINE_SUB_TYPE_MHL:
+		case ONLINE_SUB_TYPE_AUDIO:
+		case ONLINE_SUB_TYPE_DESK:
+		case ONLINE_SUB_TYPE_SMART_NOTG:
+		case ONLINE_SUB_TYPE_SMART_OTG:
+		default:
+			cable_state_to_tsp = true;
+			cable_state_to_usb = false;
+			is_cable_attached = true;
+			is_usb_lpm_enter = true;
+
+			usb_path = usb_switch_get_path();
+			if (usb_path != USB_PATH_AP) {
+				usb_switch_lock();
+				usb_switch_set_path(USB_PATH_TA);
+				usb_switch_unlock();
+			} else {
+				pr_info("%s: sub cx is detected and ap path\n",
+					__func__);
+			}
+			break;
+		}
+		break;
+	case CHARGER_AC:
 	case CHARGER_MISC:
 		cable_state_to_tsp = true;
 		cable_state_to_usb = false;
@@ -1272,20 +1335,62 @@
 	.set_charging_current = sec_bat_set_charging_current,
 	.get_charging_current = sec_bat_get_charging_current,
 	.get_charger_is_full = sec_bat_get_charger_is_full,
+	.get_aicl_current = sec_bat_get_aicl_current,
+	.get_input_current = sec_bat_get_input_current,
+	.set_aicl_state = sec_bat_set_aicl_state,
 #endif
 	.init_charger_gpio = sec_bat_gpio_init,
 	.inform_charger_connection = sec_charger_cb,
 
 #if defined(CONFIG_TARGET_LOCALE_USA)
-	.temp_high_threshold = 50000,	/* 50c */
-	.temp_high_recovery = 42000,	/* 42c */
+#if defined(CONFIG_MACH_P4NOTELTE_USA_SPR)
+	.temp_event_threshold = 62000,		/* 62c */
+	.temp_high_threshold = 48000,		/* 48c */
+	.temp_high_recovery = 43200,		/* 43.2c */
 	.temp_low_recovery = 0,			/* 0c */
-	.temp_low_threshold = -5000,	/* -5c */
+	.temp_low_threshold = -5000,		/* -5c */
+
+	.temp_lpm_high_threshold = 48000,	/* 48c */
+	.temp_lpm_high_recovery = 43500,	/* 43.5c */
+	.temp_lpm_low_recovery = -2000,	/* -2c */
+	.temp_lpm_low_threshold = -3500,	/* -3.5c */
+#elif defined(CONFIG_MACH_P4NOTELTE_USA_VZW)
+	.temp_event_threshold = 62000,		/* 62c */
+	.temp_high_threshold = 47000,		/* 45c */
+	.temp_high_recovery = 44000,		/* 42c */
+	.temp_low_recovery = 0,			/* 0c */
+	.temp_low_threshold = -5000,		/* -5c */
+
+	.temp_lpm_high_threshold = 48000,	/* 48c */
+	.temp_lpm_high_recovery = 44000,	/* 44c */
+	.temp_lpm_low_recovery = 0,		/* 0c */
+	.temp_lpm_low_threshold = -5000,	/* -5c */
+#else
+	.temp_event_threshold = 61000,          /* 62c */
+	.temp_high_threshold = 61000,		/* 62c */
+	.temp_high_recovery = 43000,		/* 42c */
+	.temp_low_recovery = 0,			/* 0c */
+	.temp_low_threshold = -5000,		/* -5c */
+
+	.temp_lpm_high_threshold = 45000,	/* 62c */
+	.temp_lpm_high_recovery = 42000,	/* 42c */
+	.temp_lpm_low_recovery = 0,		/* 0c */
+	.temp_lpm_low_threshold = -5000,	/* -5c */
+#endif
 #elif defined(CONFIG_TARGET_LOCALE_KOR)
+#if defined(CONFIG_MACH_P4NOTELTE_KOR_SKT) || \
+	defined(CONFIG_MACH_P4NOTELTE_KOR_KT) || \
+	defined(CONFIG_MACH_P4NOTELTE_KOR_LGT)
+	.temp_high_threshold = 63000,	/* 62c */
+	.temp_high_recovery = 43000,	/* 42c */
+	.temp_low_recovery = -1000,		/* 0c */
+	.temp_low_threshold = -4000,	/* -5c */
+#else
 	.temp_high_threshold = 61400,	/* 65c */
 	.temp_high_recovery = 43500,	/* 42c */
 	.temp_low_recovery = 0,			/* 0c */
 	.temp_low_threshold = -5000,	/* -5c */
+#endif
 #else
 	.temp_high_threshold = 50000,	/* 50c */
 	.temp_high_recovery = 42000,	/* 42c */
@@ -1294,8 +1399,9 @@
 #endif
 	.recharge_voltage = 4150,	/*4.15V */
 
-	.charge_duration = 10*60*60,	/* 10 hour */
-	.recharge_duration = 1.5*60*60,	/* 1.5 hour */
+	.charge_duration = 10 * 60 * 60,	/* 10 hour */
+	.recharge_duration = 1.5 * 60 * 60,	/* 1.5 hour */
+
 	.check_lp_charging_boot = check_bootmode,
 	.check_jig_status = check_jig_on
 };
@@ -1386,7 +1492,7 @@
 		acc_en_token |= (1 << token);
 		enable = true;
 		gpio_direction_output(gpio_acc_en, 1);
-
+		usleep_range(2000, 2000);
 		if (0 != gpio_acc_5v) {
 			/* prevent the overcurrent */
 			while (!gpio_get_value(gpio_acc_5v)) {
@@ -1440,41 +1546,37 @@
 	return 0;
 }
 
+/* call 30pin func. from sec_keyboard */
+static struct sec_30pin_callbacks *s30pin_callbacks;
+static int noti_sec_univ_kbd_dock(unsigned int code)
+{
+	if (s30pin_callbacks && s30pin_callbacks->noti_univ_kdb_dock)
+		return s30pin_callbacks->
+			noti_univ_kdb_dock(s30pin_callbacks, code);
+	return 0;
+}
+
 static void check_uart_path(bool en)
 {
 	int gpio_uart_sel;
-#ifdef CONFIG_MACH_P8LTE
-	int gpio_uart_sel2;
-
-	gpio_uart_sel = GPIO_UART_SEL1;
-	gpio_uart_sel2 = GPIO_UART_SEL2;
-	if (en)
-		gpio_direction_output(gpio_uart_sel2, 1);
-	else
-		gpio_direction_output(gpio_uart_sel2, 0);
-	printk(KERN_DEBUG "[Keyboard] uart_sel2 : %d\n",
-		gpio_get_value(gpio_uart_sel2));
-#else
 #if (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2)
 	int gpio_uart_sel2;
+#endif /* (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2) */
+
 	gpio_uart_sel = GPIO_UART_SEL;
+#if (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2)
 	gpio_uart_sel2 = GPIO_UART_SEL2;
-#else
-	gpio_uart_sel = GPIO_UART_SEL;
-#endif
-#endif
 
-#if (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2)
 	if (en) {
 		gpio_direction_output(gpio_uart_sel, 1);
 		gpio_direction_output(gpio_uart_sel2, 1);
 		printk(KERN_DEBUG "[Keyboard] uart_sel : 1, 1\n");
 	} else {
-		gpio_direction_output(gpio_uart_sel, 0);
+		gpio_direction_output(gpio_uart_sel, 1);
 		gpio_direction_output(gpio_uart_sel2, 0);
 		printk(KERN_DEBUG "[Keyboard] uart_sel : 0, 0\n");
 	}
-#else
+#else /* (CONFIG_SAMSUNG_ANALOG_UART_SWITCH != 2) */
 	if (en)
 		gpio_direction_output(gpio_uart_sel, 1);
 	else
@@ -1482,7 +1584,12 @@
 
 	printk(KERN_DEBUG "[Keyboard] uart_sel : %d\n",
 		gpio_get_value(gpio_uart_sel));
-#endif
+#endif /* (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2) */
+}
+
+static void sec_30pin_register_cb(struct sec_30pin_callbacks *cb)
+{
+	s30pin_callbacks = cb;
 }
 
 static void sec_keyboard_register_cb(struct sec_keyboard_callbacks *cb)
@@ -1495,6 +1602,7 @@
 	.acc_power = smdk_accessory_power,
 	.check_uart_path = check_uart_path,
 	.register_cb = sec_keyboard_register_cb,
+	.noti_univ_kbd_dock = noti_sec_univ_kbd_dock,
 	.wakeup_key = NULL,
 };
 
@@ -1564,6 +1672,7 @@
 #ifdef CONFIG_SEC_KEYBOARD_DOCK
 	.check_keyboard = check_sec_keyboard_dock,
 #endif
+	.register_cb = sec_30pin_register_cb,
 	.accessory_irq_gpio = GPIO_ACCESSORY_INT,
 	.dock_irq_gpio = GPIO_DOCK_INT,
 #if defined(CONFIG_SAMSUNG_MHL_9290)
@@ -1646,10 +1755,27 @@
 };
 #endif
 
+#ifdef CONFIG_SENSORS_AK8963C
+static struct i2c_gpio_platform_data i2c10_platdata = {
+	.sda_pin	= GPIO_MSENSOR_SDA_18V,
+	.scl_pin	= GPIO_MSENSOR_SCL_18V,
+	.udelay	= 2, /* 250KHz */
+	.sda_is_open_drain	= 0,
+	.scl_is_open_drain	= 0,
+	.scl_is_output_only = 0,
+};
+
+static struct platform_device s3c_device_i2c10 = {
+	.name	= "i2c-gpio",
+	.id	= 10,
+	.dev.platform_data	= &i2c10_platdata,
+};
+#endif
+
 #ifdef CONFIG_SENSORS_LPS331
 static struct i2c_gpio_platform_data i2c11_platdata = {
 	.sda_pin	= GPIO_BSENSE_SDA_18V,
-	.scl_pin	= GPIO_BENSE_SCL_18V,
+	.scl_pin	= GPIO_BSENSE_SCL_18V,
 	.udelay	= 2, /* 250KHz */
 	.sda_is_open_drain	= 0,
 	.scl_is_open_drain	= 0,
@@ -1828,6 +1954,9 @@
 #ifdef CONFIG_SENSORS_AK8975C
 	&s3c_device_i2c10,
 #endif
+#ifdef CONFIG_SENSORS_AK8963C
+	&s3c_device_i2c10,
+#endif
 #ifdef CONFIG_SENSORS_LPS331
 	&s3c_device_i2c11,
 #endif
@@ -2259,7 +2388,8 @@
 		"s5p-smem/mfc=mfc-secure;"
 		"s5p-smem/fimc=ion;"
 		"s5p-smem/mfc-shm=mfc-normal;"
-		"s5p-smem/fimd=fimd;";
+		"s5p-smem/fimd=fimd;"
+		"s5p-smem/fimc0=fimc0;";
 
 		s5p_cma_region_reserve(regions, regions_secure, 0, map);
 }
@@ -2739,11 +2869,13 @@
 	__raw_writel((__raw_readl(EXYNOS4_CLKDIV_FSYS1) & 0xfff0fff0)
 		     | 0x80008, EXYNOS4_CLKDIV_FSYS1);
 
-#if defined(CONFIG_IR_REMOCON_GPIO)
 /* IR_LED */
+#if defined(CONFIG_IR_REMOCON_MC96)
+	irda_device_init();
+#elif defined(CONFIG_IR_REMOCON_GPIO)
 	ir_rc_init_hw();
-/* IR_LED */
 #endif
+/* IR_LED */
 }
 
 #ifdef CONFIG_EXYNOS_C2C
diff -Naur ./arch/arm/mach-exynos/mach-px.c ../../HK_JB/Kernel/arch/arm/mach-exynos/mach-px.c
--- ./arch/arm/mach-exynos/mach-px.c	2012-12-08 20:40:46.149821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/mach-px.c	2012-11-22 09:13:15.000000000 +0100
@@ -1520,6 +1520,7 @@
 	.freq = 24000000,
 	.is_mipi = 1,
 	.streamoff_delay = S5K5BAFX_STREAMOFF_DELAY,
+	.init_streamoff = false,
 	.dbg_level = CAMDBG_LEVEL_DEFAULT,
 };
 #define FRONT_CAM_PLAT		(s5k5bafx_plat)
@@ -2197,9 +2198,7 @@
 	.cd_type = S3C_SDHCI_CD_EXTERNAL,
 	.clk_type = S3C_SDHCI_CLK_DIV_EXTERNAL,
 	.host_caps = MMC_CAP_4_BIT_DATA,
-#if defined(CONFIG_MACH_P8LTE)
 	.pm_flags = S3C_SDHCI_PM_IGNORE_SUSPEND_RESUME,
-#endif
 #ifdef CONFIG_MACH_PX
 	.ext_cd_init = register_wlan_status_notify,
 	.ext_pdev = register_wlan_pdev
@@ -3049,16 +3048,16 @@
 	 * So X & Y are swapped and Y is negated.
 	 */
 #if defined(CONFIG_MACH_P8)
-	.orientation = {0, 1, 0,
-			1, 0, 0,
+	.orientation = {1, 0, 0,
+			0, -1, 0,
 			0, 0, -1},
 #elif defined(CONFIG_MACH_P8LTE)
 	.orientation = {0, -1, 0,
 			1, 0, 0,
 			0, 0, 1},
 #elif defined(CONFIG_MACH_P2)
-	.orientation = {0, 1, 0,
-			1, 0, 0,
+	.orientation = {1, 0, 0,
+			0, -1, 0,
 			0, 0, -1},
 #elif defined(CONFIG_MACH_P4)
 	.orientation = {1 , 0, 0,
@@ -3081,16 +3080,16 @@
 		 * So X & Y are both negated.
 		 */
 #if defined(CONFIG_MACH_P8)
-		.orientation = {0, 1, 0,
-				1, 0, 0,
+		.orientation = {1, 0, 0,
+				0, -1, 0,
 				0, 0, -1},
 #elif defined(CONFIG_MACH_P8LTE)
 		.orientation = {0, 1, 0,
 				-1, 0, 0,
 				0, 0, 1},
 #elif defined(CONFIG_MACH_P2)
-		.orientation = {0, 1, 0,
-				1, 0, 0,
+		.orientation = {1, 0, 0,
+				0, -1, 0,
 				0, 0, -1},
 #elif defined(CONFIG_MACH_P4)
 		.orientation = {0, -1, 0,
@@ -3113,8 +3112,8 @@
 		 * 90 degrees clockwise from natural orientation.
 		 * So X & Y are swapped and Y & Z are negated.
 		 */
-		.orientation = {0, -1, 0,
-				1, 0, 0,
+		.orientation = {1, 0, 0,
+				0, 1, 0,
 				0, 0, 1},
 	},
 
@@ -4327,7 +4326,7 @@
 };
 
 static u8 t9_config_e[] = { TOUCH_MULTITOUCHSCREEN_T9,
-	139, 0, 0, 24, 32, 0, 176, MXT768E_THRESHOLD_BATT, 2, 1,
+	139, 0, 0, 24, 32, 0, 176, MXT768E_THRESHOLD_BATT, 2, 2,
 	10, 10, 1, 13, MXT768E_MAX_MT_FINGERS, 20, 40, 20, 31, 3,
 	255, 4, MXT768E_XLOCLIP_BATT, MXT768E_XHICLIP_BATT,
 	MXT768E_YLOCLIP_BATT, MXT768E_YHICLIP_BATT,
@@ -4444,9 +4443,9 @@
 	.gpio_read_done = GPIO_TSP_INT_18V,
 	.config = mxt768e_config,
 	.min_x = 0,
-	.max_x = 1279,
+	.max_x = 799,
 	.min_y = 0,
-	.max_y = 799,
+	.max_y = 1279,
 	.min_z = 0,
 	.max_z = 255,
 	.min_w = 0,
@@ -6414,6 +6413,7 @@
 		acc_en_token |= (1 << token);
 		enable = true;
 		gpio_direction_output(gpio_acc_en, 1);
+		usleep_range(2000, 2000);
 
 		if (0 != gpio_acc_5v) {
 			gpio_request(gpio_acc_5v, "gpio_acc_5v");
@@ -6474,6 +6474,16 @@
 	return 0;
 }
 
+/* call 30pin func. from sec_keyboard */
+static struct sec_30pin_callbacks *s30pin_callbacks;
+static int noti_sec_univ_kbd_dock(unsigned int code)
+{
+	if (s30pin_callbacks && s30pin_callbacks->noti_univ_kdb_dock)
+		return s30pin_callbacks->
+			noti_univ_kdb_dock(s30pin_callbacks, code);
+	return 0;
+}
+
 static void check_uart_path(bool en)
 {
 	int gpio_uart_sel;
@@ -6501,6 +6511,11 @@
 		gpio_get_value(gpio_uart_sel));
 }
 
+static void sec_30pin_register_cb(struct sec_30pin_callbacks *cb)
+{
+	 s30pin_callbacks = cb;
+}
+
 static void sec_keyboard_register_cb(struct sec_keyboard_callbacks *cb)
 {
 	keyboard_callbacks = cb;
@@ -6511,6 +6526,7 @@
 	.acc_power = smdk_accessory_power,
 	.check_uart_path = check_uart_path,
 	.register_cb = sec_keyboard_register_cb,
+	.noti_univ_kbd_dock = noti_sec_univ_kbd_dock,
 	.wakeup_key = NULL,
 };
 
@@ -6636,6 +6652,7 @@
 #ifdef CONFIG_SEC_KEYBOARD_DOCK
 	.check_keyboard = check_sec_keyboard_dock,
 #endif
+	.register_cb = sec_30pin_register_cb,
 	.accessory_irq_gpio = GPIO_ACCESSORY_INT,
 	.dock_irq_gpio = GPIO_DOCK_INT,
 #ifdef CONFIG_MHL_SII9234
diff -Naur ./arch/arm/mach-exynos/mach-u1.c ../../HK_JB/Kernel/arch/arm/mach-exynos/mach-u1.c
--- ./arch/arm/mach-exynos/mach-u1.c	2012-12-08 20:40:46.153821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/mach-u1.c	2012-11-22 09:13:16.000000000 +0100
@@ -198,7 +198,7 @@
 static struct wacom_g5_callbacks *wacom_callbacks;
 #endif /* CONFIG_EPEN_WACOM_G5SP */
 
-#if defined (CONFIG_KEYBOARD_CYPRESS_GM) || defined(CONFIG_KEYBOARD_CYPRESS_AOKP) 
+#ifdef CONFIG_KEYBOARD_CYPRESS_TOUCH
 #include <linux/i2c/touchkey_i2c.h>
 #endif
 
@@ -280,6 +280,22 @@
  */
 
 #ifdef CONFIG_VIDEO_M5MO
+
+struct class *camera_class;
+
+static int __init camera_class_init(void)
+{
+	camera_class = class_create(THIS_MODULE, "camera");
+	if (IS_ERR(camera_class)) {
+		pr_err("Failed to create class(camera)!\n");
+		return PTR_ERR(camera_class);
+	}
+
+	return 0;
+}
+
+subsys_initcall(camera_class_init);
+
 #define CAM_CHECK_ERR_RET(x, msg)					\
 	if (unlikely((x) < 0)) {					\
 		printk(KERN_ERR "\nfail to %s: err = %d\n", msg, x);	\
@@ -305,7 +321,7 @@
 	struct regulator *regulator;
 	int ret = 0;
 
-	printk(KERN_DEBUG "%s: in\n", __func__);
+	printk(KERN_DEBUG "%s: in. hw=0x%X\n", __func__, system_rev);
 
 	ret = gpio_request(GPIO_CAM_VGA_nSTBY, "GPL2");
 	if (ret) {
@@ -359,7 +375,7 @@
 	ret = regulator_enable(regulator);
 	regulator_put(regulator);
 	CAM_CHECK_ERR_RET(ret, "enable cam_isp_core");
-	/* No delay */
+	udelay(15);
 
 	/* CAM_SENSOR_CORE_1.2V */
 	ret = gpio_direction_output(GPIO_CAM_SENSOR_CORE, 1);
@@ -1154,6 +1170,9 @@
 	.pixelformat = V4L2_PIX_FMT_UYVY,
 	.freq = 24000000,
 	.is_mipi = 1,
+	.streamoff_delay = S5K5BAFX_STREAMOFF_DELAY,
+	.init_streamoff = true,
+	.dbg_level = CAMDBG_LEVEL_DEFAULT,
 };
 
 static struct i2c_board_info s5k5bafx_i2c_info = {
@@ -3059,8 +3078,8 @@
 REGULATOR_INIT(ldo18, "TOUCH_LED_3.3V", 3300000, 3300000, 0,
 		REGULATOR_CHANGE_STATUS, 1);
 #else
-REGULATOR_INIT(ldo18, "TOUCH_LED_3.3V", 2500000, 3300000, 0,
-		REGULATOR_CHANGE_STATUS | REGULATOR_CHANGE_VOLTAGE, 1);
+REGULATOR_INIT(ldo18, "TOUCH_LED_3.3V", 3000000, 3300000, 0,
+	REGULATOR_CHANGE_STATUS | REGULATOR_CHANGE_VOLTAGE, 1);
 #endif
 REGULATOR_INIT(ldo21, "VDDQ_M1M2_1.2V", 1200000, 1200000, 1,
 		REGULATOR_CHANGE_STATUS, 1);
@@ -3107,8 +3126,8 @@
 static struct regulator_init_data buck3_init_data = {
 	.constraints	= {
 		.name		= "G3D_1.1V",
-		.min_uV		= 800000,
-		.max_uV		= 1400000,
+		.min_uV		= 900000,
+		.max_uV		= 1200000,
 		.always_on	= 0,
 		.boot_on	= 0,
 		.apply_uV	= 1,
@@ -3331,7 +3350,63 @@
 #endif
 #endif
 
-#ifdef CONFIG_MACH_U1_KOR_LGT
+#if defined(CONFIG_TARGET_LOCALE_NA)
+#define USB_PATH_AP	0
+#define USB_PATH_CP	       1
+#define USB_PATH_ALL	2
+extern int u1_get_usb_hub_path(void);
+static int max8997_muic_set_safeout(int path)
+{
+	struct regulator *regulator;
+	int hub_usb_path = u1_get_usb_hub_path();
+
+	if (hub_usb_path == USB_PATH_CP) {
+		regulator = regulator_get(NULL, "safeout1");
+		if (IS_ERR(regulator))
+			return -ENODEV;
+		if (regulator_is_enabled(regulator))
+			regulator_force_disable(regulator);
+		regulator_put(regulator);
+
+		regulator = regulator_get(NULL, "safeout2");
+		if (IS_ERR(regulator))
+			return -ENODEV;
+		if (!regulator_is_enabled(regulator))
+			regulator_enable(regulator);
+		regulator_put(regulator);
+	} else if (hub_usb_path == USB_PATH_AP) {
+		regulator = regulator_get(NULL, "safeout1");
+		if (IS_ERR(regulator))
+			return -ENODEV;
+		if (!regulator_is_enabled(regulator))
+			regulator_enable(regulator);
+		regulator_put(regulator);
+
+		regulator = regulator_get(NULL, "safeout2");
+		if (IS_ERR(regulator))
+			return -ENODEV;
+		if (regulator_is_enabled(regulator))
+			regulator_force_disable(regulator);
+		regulator_put(regulator);
+	} else if (hub_usb_path == USB_PATH_ALL) {
+		regulator = regulator_get(NULL, "safeout1");
+		if (IS_ERR(regulator))
+			return -ENODEV;
+		if (!regulator_is_enabled(regulator))
+			regulator_enable(regulator);
+		regulator_put(regulator);
+
+		regulator = regulator_get(NULL, "safeout2");
+		if (IS_ERR(regulator))
+			return -ENODEV;
+		if (!regulator_is_enabled(regulator))
+			regulator_enable(regulator);
+		regulator_put(regulator);
+	}
+
+	return 0;
+}
+#elif defined(CONFIG_MACH_U1_KOR_LGT)
 static int max8997_muic_set_safeout(int path)
 {
 	static int safeout2_enabled;
@@ -3868,6 +3943,10 @@
 		return;
 	}
 	gpio_direction_output(GPIO_MIC_BIAS_EN, 1);
+#ifdef CONFIG_TARGET_LOCALE_NA
+	s3c_gpio_setpull(GPIO_MIC_BIAS_EN, S3C_GPIO_PULL_NONE);
+#endif /* CONFIG_TARGET_LOCALE_NA */
+
 	gpio_set_value(GPIO_MIC_BIAS_EN, 0);
 	gpio_free(GPIO_MIC_BIAS_EN);
 
@@ -3877,6 +3956,10 @@
 		return;
 	}
 	gpio_direction_output(GPIO_EAR_MIC_BIAS_EN, 1);
+#ifdef CONFIG_TARGET_LOCALE_NA
+	s3c_gpio_setpull(GPIO_EAR_MIC_BIAS_EN, S3C_GPIO_PULL_NONE);
+#endif /* CONFIG_TARGET_LOCALE_NA */
+
 	gpio_set_value(GPIO_EAR_MIC_BIAS_EN, 0);
 	gpio_free(GPIO_EAR_MIC_BIAS_EN);
 
@@ -3898,6 +3981,10 @@
 			return;
 		}
 		gpio_direction_output(GPIO_SUB_MIC_BIAS_EN, 0);
+#ifdef CONFIG_TARGET_LOCALE_NA
+		s3c_gpio_setpull(GPIO_SUB_MIC_BIAS_EN, S3C_GPIO_PULL_NONE);
+#endif /* CONFIG_TARGET_LOCALE_NA */
+
 		gpio_free(GPIO_SUB_MIC_BIAS_EN);
 	}
 #endif /* #if defined(CONFIG_MACH_Q1_BD) */
@@ -4082,79 +4169,78 @@
 #ifdef CONFIG_TARGET_LOCALE_KOR
 /* temperature table for ADC 6 */
 static struct sec_bat_adc_table_data temper_table[] =  {
-	{  264,	 500 },
-	{  275,	 490 },
-	{  286,	 480 },
-	{  293,	 480 },
-	{  299,	 470 },
-	{  306,	 460 },
-	{  324,	 450 },
-	{  341,	 450 },
-	{  354,	 440 },
-	{  368,	 430 },
-	{  381,	 420 },
-	{  396,	 420 },
-	{  411,	 410 },
-	{  427,	 400 },
-	{  442,	 390 },
-	{  457,	 390 },
-	{  472,	 380 },
-	{  487,	 370 },
-	{  503,	 370 },
-	{  518,	 360 },
-	{  533,	 350 },
-	{  554,	 340 },
-	{  574,	 330 },
-	{  595,	 330 },
-	{  615,	 320 },
-	{  636,	 310 },
-	{  656,	 310 },
-	{  677,	 300 },
-	{  697,	 290 },
-	{  718,	 280 },
-	{  738,	 270 },
-	{  761,	 270 },
-	{  784,	 260 },
-	{  806,	 250 },
-	{  829,	 240 },
-	{  852,	 230 },
-	{  875,	 220 },
-	{  898,	 210 },
-	{  920,	 200 },
-	{  943,	 190 },
-	{  966,	 180 },
-	{  990,	 170 },
-	{ 1013,	 160 },
-	{ 1037,	 150 },
-	{ 1060,	 140 },
-	{ 1084,	 130 },
-	{ 1108,	 120 },
-	{ 1131,	 110 },
-	{ 1155,	 100 },
-	{ 1178,	  90 },
-	{ 1202,	  80 },
-	{ 1226,	  70 },
-	{ 1251,	  60 },
-	{ 1275,	  50 },
-	{ 1299,	  40 },
-	{ 1324,	  30 },
-	{ 1348,	  20 },
-	{ 1372,	  10 },
-	{ 1396,	   0 },
-	{ 1421,	 -10 },
-	{ 1445,	 -20 },
-	{ 1468,	 -30 },
-	{ 1491,	 -40 },
-	{ 1513,	 -50 },
-	{ 1536,	 -60 },
-	{ 1559,	 -70 },
-	{ 1577,	 -80 },
-	{ 1596,	 -90 },
-	{ 1614,	 -100 },
-	{ 1619,	 -110 },
-	{ 1632,	 -120 },
-	{ 1658,	 -130 },
-	{ 1667,	 -140 },
+	{ 264,    570 },
+	{ 282,    560 },
+	{ 301,    550 },
+	{ 319,    540 },
+	{ 338,    530 },
+	{ 356,    520 },
+	{ 375,    510 },
+	{ 394,    500 },
+	{ 413,    490 },
+	{ 432,    480 },
+	{ 451,    470 },
+	{ 470,    460 },
+	{ 489,    450 },
+	{ 508,    440 },
+	{ 527,    430 },
+	{ 546,    420 },
+	{ 565,    410 },
+	{ 584,    400 },
+	{ 603,    390 },
+	{ 622,    380 },
+	{ 641,    370 },
+	{ 666,    360 },
+	{ 692,    350 },
+	{ 718,    340 },
+	{ 744,    330 },
+	{ 770,    320 },
+	{ 796,    310 },
+	{ 822,    300 },
+	{ 848,    290 },
+	{ 874,    280 },
+	{ 900,    270 },
+	{ 926,    260 },
+	{ 952,    250 },
+	{ 978,    240 },
+	{ 1004,   230 },
+	{ 1030,   220 },
+	{ 1056,   210 },
+	{ 1082,   200 },
+	{ 1108,   190 },
+	{ 1131,   180 },
+	{ 1155,   170 },
+	{ 1178,   160 },
+	{ 1202,   150 },
+	{ 1226,   140 },
+	{ 1251,   130 },
+	{ 1275,   120 },
+	{ 1299,   110 },
+	{ 1324,   100 },
+	{ 1348,    90 },
+	{ 1372,    80 },
+	{ 1396,    70 },
+	{ 1421,    60 },
+	{ 1445,    50 },
+	{ 1468,    40 },
+	{ 1491,    30 },
+	{ 1513,    20 },
+	{ 1536,    10 },
+	{ 1559,     0 },
+	{ 1573,   -10 },
+	{ 1588,   -20 },
+	{ 1603,   -30 },
+	{ 1618,   -40 },
+	{ 1633,   -50 },
+	{ 1648,   -60 },
+	{ 1663,   -70 },
+	{ 1678,   -80 },
+	{ 1693,   -90 },
+	{ 1705,  -100 },
+	{ 1720,  -110 },
+	{ 1736,  -120 },
+	{ 1751,  -130 },
+	{ 1767,  -140 },
 };
 #elif defined(CONFIG_TARGET_LOCALE_NTT)
 /* temperature table for ADC 6 */
@@ -4607,6 +4693,7 @@
 };
 #endif
 
+#define ADC_CH_VF	2
 #define ADC_CH_TEMPERATURE_PMIC	6
 #define ADC_CH_TEMPERATURE_LCD	7
 
@@ -4653,6 +4740,10 @@
 	.adc_sub_table		= temper_table_ADC7,
 	.adc_sub_channel	= ADC_CH_TEMPERATURE_LCD,
 	.get_lpcharging_state	= sec_bat_get_lpcharging_state,
+#if defined(CONFIG_TARGET_LOCALE_NAATT) || \
+	defined(CONFIG_TARGET_LOCALE_NAATT_TEMP)
+	.adc_vf_channel = ADC_CH_VF,
+#endif
 #if defined(CONFIG_MACH_Q1_BD)
 	.initial_check		= sec_bat_initial_check,
 #else
@@ -4977,11 +5068,55 @@
 };
 #endif
 
+/* when the next level is same as prev, returns -1 */
+static int get_exynos4210_siop_level(int temp)
+{
+	static int prev_temp = 400;
+	static int prev_level;
+	int level = -1;
+
+	if (temp > prev_temp) {
+		if (temp >= 610)
+			level = 4;
+		else if (temp >= 590)
+			level = 3;
+		else if (temp >= 540)
+			level = 2;
+		else if (temp >= 510)
+			level = 1;
+		else
+			level = 0;
+	} else {
+		if (temp < 480)
+			level = 0;
+		else if (temp < 510)
+			level = 1;
+		else if (temp < 540)
+			level = 2;
+		else if (temp < 590)
+			level = 3;
+		else
+			level = 4;
+
+		if (level > prev_level)
+			level = prev_level;
+	}
+
+	prev_temp = temp;
+	if (prev_level == level)
+		return -1;
+
+	prev_level = level;
+
+	return level;
+}
+
 static struct sec_therm_platform_data sec_therm_pdata = {
 	.adc_channel	= 6,
 	.adc_arr_size	= ARRAY_SIZE(adc_ch6_table),
 	.adc_table	= adc_ch6_table,
 	.polling_interval = 30 * 1000, /* msecs */
+	.get_siop_level = get_exynos4210_siop_level,
 };
 
 static struct platform_device sec_device_thermistor = {
@@ -5022,7 +5157,7 @@
 	},			/* power key */
 #if !defined(CONFIG_MACH_U1_NA_SPR) && !defined(CONFIG_MACH_U1_NA_USCC)
 	{
-		.code = KEY_HOME,
+		.code = KEY_HOMEPAGE,
 		.gpio = GPIO_OK_KEY,
 		.active_low = 1,
 		.type = EV_KEY,
@@ -5293,20 +5428,12 @@
 	/* printk("mxt224_power_off is finished\n"); */
 }
 
-void mxt224_gpio_sleep_mode(bool enable)
-{
-	if (enable)
-		s3c_gpio_slp_cfgpin(GPIO_TSP_LDO_ON, S3C_GPIO_SLP_PREV);
-	else
-		s3c_gpio_slp_cfgpin(GPIO_TSP_LDO_ON, S3C_GPIO_SLP_OUT0);
-}
-
 /*
   Configuration for MXT224
 */
 #define MXT224_THRESHOLD_BATT		40
-#define MXT224_THRESHOLD_BATT_INIT		45
-#define MXT224_THRESHOLD_CHRG		55
+#define MXT224_THRESHOLD_BATT_INIT		55
+#define MXT224_THRESHOLD_CHRG		70
 #define MXT224_NOISE_THRESHOLD_BATT		30
 #define MXT224_NOISE_THRESHOLD_CHRG		40
 #if defined(CONFIG_MACH_U1_NA_SPR) || defined(CONFIG_MACH_U1_NA_USCC)
@@ -5331,7 +5458,7 @@
 static u8 t9_config[] = { TOUCH_MULTITOUCHSCREEN_T9,
 	131, 0, 0, 19, 11, 0, 32, MXT224_THRESHOLD_BATT, 2, 1,
 	0,
-	2,			/* MOVHYSTI */
+	15,			/* MOVHYSTI */
 	1, MXT224_MOVFILTER_BATT, MXT224_MAX_MT_FINGERS, 5, 40, 10, 31, 3,
 	223, 1, 0, 0, 0, 0, 143, 55, 143, 90, 18
 };
@@ -5383,13 +5510,14 @@
 #define MXT224E_BLEN_BATT		32
 #define MXT224E_T48_BLEN_BATT		0
 #define MXT224E_BLEN_CHRG		0
+#define MXT224E_T48_BLEN_CHRG		0
 #define MXT224E_MOVFILTER_BATT		14
 #define MXT224E_MOVFILTER_CHRG		46
 #define MXT224E_ACTVSYNCSPERX_NORMAL		29
 #define MXT224E_NEXTTCHDI_NORMAL		0
 #define MXT224E_NEXTTCHDI_CHRG		1
 #else
-#define MXT224E_THRESHOLD_BATT		40
+#define MXT224E_THRESHOLD_BATT		50
 #define MXT224E_T48_THRESHOLD_BATT		28
 #define MXT224E_THRESHOLD_CHRG		40
 #define MXT224E_CALCFG_BATT		0x42
@@ -5409,7 +5537,7 @@
 #define MXT224E_BLEN_CHRG		16
 #define MXT224E_T48_BLEN_BATT		0
 #define MXT224E_T48_BLEN_CHRG		0
-#define MXT224E_MOVFILTER_BATT		11
+#define MXT224E_MOVFILTER_BATT		13
 #define MXT224E_MOVFILTER_CHRG		46
 #define MXT224E_ACTVSYNCSPERX_NORMAL		32
 #define MXT224E_NEXTTCHDI_NORMAL		0
@@ -5430,7 +5558,7 @@
 static u8 t9_config_e[] = { TOUCH_MULTITOUCHSCREEN_T9,
 	139, 0, 0, 19, 11, 0, MXT224E_BLEN_BATT, MXT224E_THRESHOLD_BATT, 2, 1,
 	10,
-	2,			/* MOVHYSTI */
+	15,			/* MOVHYSTI */
 	1, MXT224E_MOVFILTER_BATT, MXT224_MAX_MT_FINGERS, 5, 40, 10, 31, 3,
 	223, 1, 10, 10, 10, 10, 143, 40, 143, 80,
 	18, 15, 50, 50, MXT224E_NEXTTCHDI_NORMAL
@@ -5488,7 +5616,7 @@
 	0, 0, 0, 6, 6, 0, 0, 64, 4, 64,
 	10, 0, 9, 5, 0, 15, 0, 20, 0, 0,
 	0, 0, 0, 0, MXT224E_BLEN_CHRG, MXT224E_THRESHOLD_CHRG, 2,
-	2,			/* MOVHYSTI */
+	15,			/* MOVHYSTI */
 	1, 47,
 	MXT224_MAX_MT_FINGERS, 5, 40, 235, 235, 10, 10, 160, 50, 143,
 	80, 18, 10, MXT224E_NEXTTCHDI_CHRG
@@ -5514,7 +5642,7 @@
 static u8 t9_config_e[] = { TOUCH_MULTITOUCHSCREEN_T9,
 	139, 0, 0, 19, 11, 0, MXT224E_BLEN_BATT, MXT224E_THRESHOLD_BATT, 2, 1,
 	10,
-	2,			/* MOVHYSTI */
+	10,			/* MOVHYSTI */
 	1, MXT224E_MOVFILTER_BATT, MXT224_MAX_MT_FINGERS, 5, 40, 10, 31, 3,
 	223, 1, 10, 10, 10, 10, 143, 40, 143, 80,
 	18, 15, 50, 50, 0
@@ -5523,7 +5651,7 @@
 static u8 t9_config_e[] = { TOUCH_MULTITOUCHSCREEN_T9,
 	139, 0, 0, 19, 11, 0, MXT224E_BLEN_BATT, MXT224E_THRESHOLD_BATT, 2, 1,
 	10,
-	2,			/* MOVHYSTI */
+	15,			/* MOVHYSTI */
 	1, MXT224E_MOVFILTER_BATT, MXT224_MAX_MT_FINGERS, 5, 40, 10, 31, 3,
 	223, 1, 10, 10, 10, 10, 143, 40, 143, 80,
 	18, 15, 50, 50, MXT224E_NEXTTCHDI_NORMAL
@@ -5573,7 +5701,7 @@
 	0, 0, 0, 6, 6, 0, 0, 64, 4, 64,
 	10, 0, 9, 5, 0, 15, 0, 20, 0, 0,
 	0, 0, 0, 0, MXT224E_T48_BLEN_CHRG, MXT224E_THRESHOLD_CHRG, 2,
-	2,			/* MOVHYSTI */
+	10,			/* MOVHYSTI */
 	1, 47,
 	MXT224_MAX_MT_FINGERS, 5, 40, 240, 245, 10, 10, 148, 50, 143,
 	80, 18, 10, 0
@@ -5595,7 +5723,7 @@
 	0, 0, 0, 6, 6, 0, 0, 64, 4, 64,
 	10, 0, 9, 5, 0, 15, 0, 20, 0, 0,
 	0, 0, 0, 0, 0, MXT224E_THRESHOLD_CHRG, 2,
-	2,			/* MOVHYSTI */
+	15,			/* MOVHYSTI */
 	1, 47,
 	MXT224_MAX_MT_FINGERS, 5, 40, 235, 235, 10, 10, 160, 50, 143,
 	80, 18, 10, 0
@@ -6005,7 +6133,7 @@
 #ifdef CONFIG_S3C_DEV_I2C8_EMUL
 static struct i2c_board_info i2c_devs8_emul[];
 #endif
-#if defined (CONFIG_KEYBOARD_CYPRESS_GM) || defined(CONFIG_KEYBOARD_CYPRESS_AOKP)
+#ifdef CONFIG_KEYBOARD_CYPRESS_TOUCH
 static void touchkey_init_hw(void)
 {
 	gpio_request(GPIO_3_TOUCH_INT, "3_TOUCH_INT");
@@ -6106,7 +6234,7 @@
 	.power_on = touchkey_power_on,
 	.led_power_on = touchkey_led_power_on,
 };
-#endif /*(CONFIG_KEYBOARD_CYPRESS_GM) || (KEYBOARD_CYPRESS_AOKP)*/
+#endif /*CONFIG_KEYBOARD_CYPRESS_TOUCH*/
 
 
 
@@ -6174,6 +6302,27 @@
 };
 #endif
 
+#if defined(CONFIG_WIMAX_CMC)
+static struct i2c_gpio_platform_data wmxeeprom_i2c_gpio_data = {
+	.sda_pin  = GPIO_CMC_SDA_18V,
+	.scl_pin  = GPIO_CMC_SCL_18V,
+	.udelay = 2,
+};
+static struct platform_device wmxeeprom_i2c_gpio_device = {
+	.name	= "i2c-gpio",
+	.id	= 18,
+	.dev	= {
+		.platform_data  = &wmxeeprom_i2c_gpio_data,
+	},
+};
+static struct i2c_board_info wmxeeprom_i2c_devices[] __initdata = {
+{
+	I2C_BOARD_INFO("wmxeeprom", 0x50),
+}
+};
+
+#endif /* CONFIG_WIMAX_CMC */
+
 #ifdef CONFIG_S3C_DEV_I2C5
 /* I2C5 */
 static struct i2c_board_info i2c_devs5[] __initdata = {
@@ -6259,7 +6408,7 @@
 
 /* I2C8 */
 static struct i2c_board_info i2c_devs8_emul[] = {
-#if defined (CONFIG_KEYBOARD_CYPRESS_GM) || defined(CONFIG_KEYBOARD_CYPRESS_AOKP)
+#ifdef CONFIG_KEYBOARD_CYPRESS_TOUCH
 	{
 		I2C_BOARD_INFO("sec_touchkey", 0x20),
 		.platform_data = &touchkey_pdata,
@@ -6342,7 +6491,7 @@
 #ifdef RECAL_SOC_FOR_MAXIM
 static bool max17042_need_soc_recal(void)
 {
-	pr_debug("%s: HW(0x%x)\n", __func__, system_rev);
+	pr_info("%s: HW(0x%x)\n", __func__, system_rev);
 
 	if (system_rev >= NO_NEED_RECAL_SOC_HW_REV)
 		return false;
@@ -6647,6 +6796,7 @@
 
 
 #ifdef CONFIG_S3C_DEV_I2C17_EMUL
+#ifdef CONFIG_USBHUB_USB3803
 /* I2C17_EMUL */
 static struct i2c_gpio_platform_data i2c17_platdata = {
 	.sda_pin = GPIO_USB_I2C_SDA,
@@ -6659,7 +6809,7 @@
 	.dev.platform_data = &i2c17_platdata,
 };
 
-
+#endif
 #endif /* CONFIG_S3C_DEV_I2C17_EMUL */
 
 #ifdef CONFIG_USBHUB_USB3803
@@ -7088,54 +7238,7 @@
 };
 #endif
 
-#ifdef CONFIG_CPUPOWER
-#include <linux/power/cpupower.h>
-static unsigned int table_default_power[1] = {
-	1024
-};
-
-static struct cputopo_power default_cpu_power = {
-	.max  = 1,
-	.step = 1,
-	.table = table_default_power,
-};
-
-static unsigned int table_ca9_power[18] = {
-/* freq< 
-    100  200  300  400  500
-    600  700  800  900
-   1000 1100 1200 1300
-   1400 1500 1600 other*/
-	8192, 8192, 8192, 8192, 8192,
-	8192, 1024, 1024, 1024,
-	1024, 1024, 1024, 1024,
-	1024, 1024, 1024, 1024,
-};
-
-static struct cputopo_power CA9_cpu_power = {
-	.max  = 16,
-	.step = 100000,
-	.table = table_ca9_power,
-};
-
-/* This table list all possible cpu power configuration */
-static struct cputopo_power *u1_cpupower_data[2] = {
-	&default_cpu_power,
-	&CA9_cpu_power,
-};
-
-static struct platform_device u1_cpupower_dev = {
-	.name = "cpupower",
-	.dev = {
-		.platform_data = u1_cpupower_data,
-	},
-};
-#endif
-
 static struct platform_device *smdkc210_devices[] __initdata = {
-#ifdef CONFIG_CPUPOWER
-	&u1_cpupower_dev,
-#endif
 #ifdef CONFIG_SEC_WATCHDOG_RESET
 	&watchdog_reset_device,
 #endif
@@ -7154,6 +7257,7 @@
 #ifdef CONFIG_BATTERY_SAMSUNG
 	&samsung_device_battery,
 #endif
+
 #ifdef CONFIG_FB_S5P
 	&s3c_device_fb,
 #endif
@@ -7211,14 +7315,20 @@
 #if defined(CONFIG_SMB136_CHARGER_Q1) || defined(CONFIG_SMB328_CHARGER)
 	&s3c_device_i2c19,	/* SMB136, SMB328 */
 #endif
+#if defined(CONFIG_USBHUB_USB3803)
 #if defined(CONFIG_S3C_DEV_I2C17_EMUL)
 	&s3c_device_i2c17,	/* USB HUB */
 #endif
 #endif
+#endif
 
 	/* consumer driver should resume after resuming i2c drivers */
 	&u1_regulator_consumer,
 
+#if defined(CONFIG_WIMAX_CMC)
+	&wmxeeprom_i2c_gpio_device,
+#endif
+
 #ifdef CONFIG_EXYNOS4_DEV_MSHC
 	&s3c_device_mshci,
 #endif
@@ -7457,6 +7567,17 @@
 			continue;
 
 		if (reg->start) {
+#if defined(CONFIG_USE_MFC_CMA) && defined(CONFIG_MACH_Q1_BD)
+			if (reg->start == 0x67200000) {
+				if (!memblock_is_region_reserved
+					(reg->start, 0x600000) &&
+					memblock_reserve(reg->start,
+						reg->size) >= 0)
+					reg->reserved = 1;
+			} else if (reg->start == 0x68400000)
+				reg->reserved = 1;
+			else
+#endif
 			if (!memblock_is_region_reserved(reg->start, reg->size)
 			    && memblock_reserve(reg->start, reg->size) >= 0)
 				reg->reserved = 1;
@@ -7468,6 +7589,10 @@
 				reg->reserved = 1;
 			}
 		}
+
+		if (reg->reserved)
+			pr_info("S5P/CMA: Reserved 0x%08x/0x%08x for '%s'\n",
+				reg->start, reg->size, reg->name);
 	}
 
 	if (regions_secure && regions_secure->size) {
@@ -7526,6 +7651,7 @@
 			.start = 0,
 		},
 #endif
+#ifndef CONFIG_ION_EXYNOS_CONTIGHEAP_SIZE
 #ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC1
 		{
 			.name = "fimc1",
@@ -7533,6 +7659,7 @@
 			.start = 0,
 		},
 #endif
+#endif
 #ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_FIMC2
 		{
 			.name = "fimc2",
@@ -7560,7 +7687,11 @@
 			{
 				.alignment = 1 << 17,
 			},
+#if defined(CONFIG_USE_MFC_CMA) && defined(CONFIG_MACH_Q1_BD)
+			.start = 0x68400000,
+#else
 			.start = 0,
+#endif
 		},
 #endif
 #ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC0
@@ -7570,7 +7701,11 @@
 			{
 				.alignment = 1 << 17,
 			},
+#if defined(CONFIG_USE_MFC_CMA) && defined(CONFIG_MACH_Q1_BD)
+			.start = 0x67200000,
+#else
 			.start = 0,
+#endif
 		},
 #endif
 #ifdef CONFIG_VIDEO_SAMSUNG_MEMSIZE_MFC
@@ -7608,7 +7743,12 @@
 		{
 			.name = "tvout",
 			.size = CONFIG_VIDEO_SAMSUNG_MEMSIZE_TVOUT * SZ_1K,
+#ifdef CONFIG_USE_TVOUT_CMA
+			.start = 0x65800000,
+			.reserved = 1,
+#else
 			.start = 0,
+#endif
 		},
 #endif
 		{
@@ -7644,6 +7784,25 @@
 }
 #endif
 
+static void __init exynos_reserve(void)
+{
+#ifdef CONFIG_USE_TVOUT_CMA
+	if (dma_declare_contiguous(&s5p_device_tvout.dev,
+			CONFIG_VIDEO_SAMSUNG_MEMSIZE_TVOUT * SZ_1K,
+			0x65800000, 0))
+		printk(KERN_ERR "%s: failed to reserve contiguous "
+			"memory region for TVOUT\n", __func__);
+#endif
+
+#ifdef CONFIG_USE_MFC_CMA
+	if (dma_declare_contiguous(&s5p_device_mfc.dev,
+			SZ_1M * 40, 0x67800000, 0))
+		printk(KERN_ERR "%s: failed to reserve contiguous "
+			"memory region for MFC0/1\n", __func__);
+#endif
+}
+
+
 static void __init exynos_sysmmu_init(void)
 {
 	ASSIGN_SYSMMU_POWERDOMAIN(fimc0, &exynos4_device_pd[PD_CAM].dev);
@@ -7699,6 +7858,7 @@
 #else
 	s5p_reserve_mem(S5P_RANGE_MFC);
 #endif
+
 	/* as soon as INFORM3 is visible, sec_debug is ready to run */
 	sec_debug_init();
 }
@@ -7833,7 +7993,7 @@
 			ARRAY_SIZE(tuna_i2c15_boardinfo));
 #endif
 #ifdef CONFIG_S3C_DEV_I2C8_EMUL
-#if defined (CONFIG_KEYBOARD_CYPRESS_GM) || defined(CONFIG_KEYBOARD_CYPRESS_AOKP)
+#ifdef CONFIG_KEYBOARD_CYPRESS_TOUCH
 	touchkey_init_hw();
 #endif
 	i2c_register_board_info(8, i2c_devs8_emul, ARRAY_SIZE(i2c_devs8_emul));
@@ -7870,10 +8030,17 @@
 						ARRAY_SIZE(i2c_devs19_emul));
 #endif
 #ifdef CONFIG_S3C_DEV_I2C17_EMUL
+#ifdef CONFIG_USBHUB_USB3803
 	i2c_register_board_info(17, i2c_devs17_emul,
 						ARRAY_SIZE(i2c_devs17_emul));
 #endif
 #endif
+#endif
+
+#if defined(CONFIG_WIMAX_CMC)
+	i2c_register_board_info(18, wmxeeprom_i2c_devices,
+			ARRAY_SIZE(wmxeeprom_i2c_devices));
+#endif
 
 
 	/* 400 kHz for initialization of MMC Card  */
@@ -8088,4 +8255,5 @@
 	.init_machine	= smdkc210_machine_init,
 	.timer		= &exynos4_timer,
 	.init_early	= &exynos_init_reserve,
+	.reserve	= &exynos_reserve,
 MACHINE_END
diff -Naur ./arch/arm/mach-exynos/Makefile ../../HK_JB/Kernel/arch/arm/mach-exynos/Makefile
--- ./arch/arm/mach-exynos/Makefile	2012-12-08 20:40:46.109821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/Makefile	2012-11-22 09:13:14.000000000 +0100
@@ -95,6 +95,9 @@
 ifeq ($(CONFIG_MACH_P4NOTE),y)
 obj-$(CONFIG_MACH_MIDAS)		+= mach-p4notepq.o px-switch.o p4note-jack.o
 else
+ifeq ($(CONFIG_MACH_KONA),y)
+obj-$(CONFIG_MACH_MIDAS)               += mach-kona.o px-switch.o kona-jack.o
+else
 ifeq ($(CONFIG_MACH_IRON),y)
 obj-$(CONFIG_MACH_MIDAS)		+= board-grande.o grande-jack.o
 else
@@ -105,6 +108,7 @@
 endif
 endif
 endif
+endif
 obj-$(CONFIG_MACH_SLP_MIDAS)		+= board-slp-midas.o midas-sensor.o
 obj-$(CONFIG_MACH_SLP_PQ)		+= board-slp-pq.o
 obj-$(CONFIG_MACH_REDWOOD)		+= board-redwood.o
@@ -124,6 +128,7 @@
 obj-$(CONFIG_MACH_SMDK5250)		+= board-smdk5250-spi.o
 
 obj-$(CONFIG_MACH_P4NOTE)		+= p4-input.o
+obj-$(CONFIG_MACH_KONA)			+= kona-input.o
 
 ifeq ($(CONFIG_MACH_GRANDE),y)
 obj-$(CONFIG_MIDAS_COMMON)		+= sec-common.o board-gps-bcm475x.o \
@@ -141,7 +146,12 @@
 obj-$(CONFIG_MIDAS_COMMON)		+= sec-common.o \
 					   midas-tsp.o board-midas-wlan.o \
 					   midas-camera.o midas-thermistor.o \
-					   midas-mhl.o midas-lcd.o midas-sound.o
+					   midas-mhl.o midas-lcd.o
+ifeq ($(CONFIG_MACH_M3_USA_TMO),y)
+obj-$(CONFIG_MIDAS_COMMON)		+= t0-sound.o
+else
+obj-$(CONFIG_MIDAS_COMMON)		+= midas-sound.o
+endif
 else
 ifeq ($(CONFIG_MACH_T0),y)
 obj-$(CONFIG_MIDAS_COMMON)		+= sec-common.o \
@@ -156,6 +166,16 @@
 					   midas-camera.o midas-thermistor.o \
 					   midas-mhl.o midas-lcd.o midas-sound.o
 obj-$(CONFIG_SEC_MODEM)			+= board-gps-bcm475x.o
+obj-$(CONFIG_GPS_BRCM_475X)		+= board-gps-bcm475x.o
+else
+ifeq ($(CONFIG_MACH_KONA),y)
+obj-$(CONFIG_MIDAS_COMMON)		+= sec-common.o\
+					   midas-tsp.o board-midas-wlan.o \
+					   midas-camera.o midas-thermistor.o \
+					   midas-mhl.o midas-lcd.o midas-sound.o \
+					   midas-wacom.o
+obj-$(CONFIG_SEC_MODEM)			+= board-gps-bcm475x.o
+obj-$(CONFIG_GPS_BRCM_475X)		+= board-gps-bcm475x.o
 else
 ifeq ($(CONFIG_MACH_SLP_T0_LTE),y)
 obj-$(CONFIG_MIDAS_COMMON)		+= sec-common.o \
@@ -180,9 +200,11 @@
 endif
 endif
 endif
+endif
 obj-$(CONFIG_IRON_BD)			+= board-iron-gpio.o board-grande-power.o
 obj-$(CONFIG_GRANDE_BD)			+= board-grande-gpio.o board-grande-power.o
 obj-$(CONFIG_P4NOTE_00_BD)		+= p4note-gpio.o p4note-power.o
+obj-$(CONFIG_KONA_00_BD)		+= kona-gpio.o kona-power.o
 obj-$(CONFIG_GC1_00_BD)			+= gc1-gpio.o gc1-power.o gc1-jack.o
 obj-$(CONFIG_MACH_T0)			+= t0-gpio.o t0-power.o
 obj-$(CONFIG_MACH_BAFFIN)			+= baffin-gpio.o baffin-power.o
@@ -281,14 +303,14 @@
 obj-$(CONFIG_SEC_MODEM_T0_CU_DUOS)	+= board-m0-modems.o board-t0cu-duos-modems.o
 obj-$(CONFIG_SEC_MODEM_T0_OPEN_DUOS)      += board-m0-modems.o board-t0cu-duos-modems.o
 obj-$(CONFIG_SEC_MODEM_IRON)		+= board-iron-modems.o
-#obj-$(CONFIG_SEC_MODEM_M1)		+= board-m1-modems.o
 obj-$(CONFIG_SEC_MODEM_GAIA)		+= board-gaia-modems.o
-obj-$(CONFIG_SEC_MODEM_M1)		+= board-c1-modems.o
 obj-$(CONFIG_SEC_MODEM_C1)		+= board-c1-modems.o
 obj-$(CONFIG_SEC_MODEM_C1_LGT)		+= board-c1lgt-modems.o
 obj-$(CONFIG_SEC_MODEM_U1)		+= board-u1-modems.o
+obj-$(CONFIG_SEC_MODEM_U1_SPR)		+= board-u1-spr-modems.o
 obj-$(CONFIG_SEC_MODEM_U1_LGT)		+= board-u1-lgt-modems.o
 obj-$(CONFIG_SEC_MODEM_P8LTE)		+= board-p8ltevzw-modems.o
+obj-$(CONFIG_SEC_MODEM_GODIVA2)		+= board-godiva2-modems.o
 obj-$(CONFIG_SEC_DEBUG)			+= sec_debug.o sec_getlog.o sec_gaf.o
 obj-$(CONFIG_SEC_WATCHDOG_RESET)	+= sec_watchdog.o
 obj-$(CONFIG_SEC_LOG)			+= sec_log.o
@@ -305,6 +327,7 @@
 obj-$(CONFIG_GPS_BCM4752)		+= bcm4752.o
 obj-$(CONFIG_GPS_GSD4T)			+= gsd4t.o
 obj-$(CONFIG_SEC_THERMISTOR)		+= sec_thermistor.o
+obj-$(CONFIG_SEC_SUBTHERMISTOR)		+= sec_subthermistor.o
 obj-$(CONFIG_EXYNOS_SYSREG_PM)		+= sysreg.o
 
 obj-$(CONFIG_EXYNOS4_DEV_TMU)           += dev-slp-tmu.o
diff -Naur ./arch/arm/mach-exynos/mct.c ../../HK_JB/Kernel/arch/arm/mach-exynos/mct.c
--- ./arch/arm/mach-exynos/mct.c	2012-12-08 20:40:46.153821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/mct.c	2012-11-22 09:13:15.000000000 +0100
@@ -431,7 +431,7 @@
 
 	exynos4_mct_write(TICK_BASE_CNT, mct_tick[cpu].base + MCT_L_TCNTB_OFFSET);
 
-//	if (mct_int_type == MCT_INT_SPI) {
+	if (mct_int_type == MCT_INT_SPI) {
 		if (cpu == 0) {
 			mct_tick0_event_irq.dev_id = &mct_tick[cpu];
 			setup_irq(IRQ_MCT_L0, &mct_tick0_event_irq);
@@ -440,9 +440,9 @@
 			setup_irq(IRQ_MCT_L1, &mct_tick1_event_irq);
 			irq_set_affinity(IRQ_MCT_L1, cpumask_of(1));
 		}
-//	} else {
-//		gic_enable_ppi(IRQ_PPI_MCT_L);
-//	}
+	} else {
+		gic_enable_ppi(IRQ_PPI_MCT_L);
+	}
 }
 
 /* Setup the local clock events for a CPU */
@@ -453,12 +453,10 @@
 	return 0;
 }
 
-int local_timer_stop(struct clock_event_device *evt)
+int local_timer_ack(void)
 {
 	unsigned int cpu = smp_processor_id();
 	struct mct_clock_event_device *mevt = &mct_tick[cpu];
-	evt->set_mode(CLOCK_EVT_MODE_UNUSED, evt);
-	disable_irq(evt->irq);
 
 	return exynos4_mct_tick_clear(mevt);
 }
diff -Naur ./arch/arm/mach-exynos/mdm2.c ../../HK_JB/Kernel/arch/arm/mach-exynos/mdm2.c
--- ./arch/arm/mach-exynos/mdm2.c	2012-12-08 20:40:46.153821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/mdm2.c	2012-11-22 09:13:15.000000000 +0100
@@ -289,8 +289,13 @@
 	if (value) {
 		mdm_peripheral_disconnect(mdm_drv);
 		mdm_peripheral_connect(mdm_drv);
-		if (mdm_drv->ap2mdm_wakeup_gpio > 0)
+		if (mdm_drv->ap2mdm_wakeup_gpio > 0) {
+			if (gpio_get_value(mdm_drv->ap2mdm_wakeup_gpio)) {
+				gpio_set_value(mdm_drv->ap2mdm_wakeup_gpio, 0);
+				mdelay(5);
+			}
 			gpio_direction_output(mdm_drv->ap2mdm_wakeup_gpio, 1);
+		}
 	}
 }
 
@@ -321,6 +326,25 @@
 	mdm_common_modem_shutdown(pdev);
 }
 
+#ifdef CONFIG_FAST_BOOT
+static void modem_complete(struct device *pdev)
+{
+	struct mdm_platform_data *pdata = pdev->platform_data;
+
+	if (!pdev || !pdata) {
+		pr_err("pdev or pdata is null!!\n");
+		return;
+	}
+
+	if (pdata->modem_complete)
+		pdata->modem_complete(pdev);
+}
+
+static const struct dev_pm_ops mdm2_pm_ops = {
+	.complete = modem_complete,
+};
+#endif
+
 static struct platform_driver mdm_modem_driver = {
 	.remove         = mdm_modem_remove,
 	/**
@@ -329,6 +353,9 @@
 	 */
 	.driver         = {
 		.name = "mdm2_modem",
+#ifdef CONFIG_FAST_BOOT
+		.pm = &mdm2_pm_ops,
+#endif
 		.owner = THIS_MODULE
 	},
 };
diff -Naur ./arch/arm/mach-exynos/mdm_common.c ../../HK_JB/Kernel/arch/arm/mach-exynos/mdm_common.c
--- ./arch/arm/mach-exynos/mdm_common.c	2012-12-08 20:40:46.153821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/mdm_common.c	2012-11-22 09:13:16.000000000 +0100
@@ -54,6 +54,14 @@
 #include <mach/gpio.h>
 #endif
 
+#ifdef CONFIG_SIM_DETECT
+#include <linux/poll.h>
+#endif
+
+#ifdef CONFIG_FAST_BOOT
+#include <linux/reboot.h>
+#endif
+
 #define MDM_MODEM_TIMEOUT	6000
 #define MDM_MODEM_DELTA	100
 #define MDM_BOOT_TIMEOUT	60000L
@@ -181,6 +189,20 @@
 	}
 }
 
+void print_mdm_gpio_state(void)
+{
+	pr_info("ap2mdm_status is %s\n",
+			gpio_get_value(mdm_drv->ap2mdm_status_gpio) ?
+				"high" : "low");
+	pr_info("mdm2ap_status is %s\n",
+			gpio_get_value(mdm_drv->mdm2ap_status_gpio) ?
+				"high" : "low");
+	pr_info("mdm2ap_errfatal is %s\n",
+			gpio_get_value(mdm_drv->mdm2ap_errfatal_gpio) ?
+				"high" : "low");
+}
+EXPORT_SYMBOL(print_mdm_gpio_state);
+
 static void mdm2ap_status_check(struct work_struct *work)
 {
 	/*
@@ -301,8 +323,15 @@
 
 	case GET_FORCE_RAMDUMP:
 		pr_info("%s: mdm get dump mode = %d\n", __func__, force_dump);
-		return force_dump;
+		mdm_force_fatal();
+		break;
 
+#ifdef CONFIG_SIM_DETECT
+	case GET_SIM_DETECT:
+		pr_info("%s: mdm get sim detect = %d\n", __func__,
+						mdm_drv->sim_state);
+		return mdm_drv->sim_state;
+#endif
 	default:
 		pr_err("%s: invalid ioctl cmd = %d\n", __func__, _IOC_NR(cmd));
 		ret = -EINVAL;
@@ -312,19 +341,6 @@
 	return ret;
 }
 
-/* temporary implemented, it should be removed at mass production */
-/* simply declare this function as extern at test point, and call it */
-void mdm_force_fatal(void)
-{
-	pr_info("%s: Reseting the mdm due to AP request\n", __func__);
-
-	force_dump = 1;
-
-	notify_modem_fatal();
-	subsystem_restart(EXTERNAL_MODEM);
-}
-EXPORT_SYMBOL(mdm_force_fatal);
-
 static void mdm_fatal_fn(struct work_struct *work)
 {
 	pr_info("%s: Reseting the mdm due to an errfatal\n", __func__);
@@ -334,6 +350,34 @@
 
 static DECLARE_WORK(mdm_fatal_work, mdm_fatal_fn);
 
+static void mdm_reconnect_fn(struct work_struct *work)
+{
+	pr_info("mdm: check 2nd enumeration\n");
+
+	if (mdm_check_main_connect(rmnet_pm_dev))
+		return;
+
+	pr_info("mdm: silent reset!!\n");
+
+	mdm_drv->boot_type = CHARM_NORMAL_BOOT;
+	complete(&mdm_needs_reload);
+	if (!wait_for_completion_timeout(&mdm_boot,
+			msecs_to_jiffies(MDM_BOOT_TIMEOUT))) {
+		mdm_drv->mdm_boot_status = -ETIMEDOUT;
+		pr_info("%s: mdm modem restart timed out.\n", __func__);
+		panic("%s[%p]: Failed to powerup!", __func__, current);
+	} else {
+		pr_info("%s: mdm modem has been restarted\n", __func__);
+
+		/* Log the reason for the restart */
+		if (mdm_drv->pdata->sfr_query)
+			queue_work(mdm_sfr_queue, &sfr_reason_work);
+	}
+	INIT_COMPLETION(mdm_boot);
+}
+
+static DECLARE_DELAYED_WORK(mdm_reconnect_work, mdm_reconnect_fn);
+
 static void mdm_status_fn(struct work_struct *work)
 {
 	int value = gpio_get_value(mdm_drv->mdm2ap_status_gpio);
@@ -345,12 +389,31 @@
 	if (value) {
 		request_boot_lock_release(rmnet_pm_dev);
 		request_active_lock_set(rmnet_pm_dev);
+		queue_delayed_work(mdm_queue, &mdm_reconnect_work,
+							msecs_to_jiffies(3000));
 	}
 #endif
 }
 
 static DECLARE_WORK(mdm_status_work, mdm_status_fn);
 
+/* temporary implemented, it should be removed at mass production */
+/* simply declare this function as extern at test point, and call it */
+void mdm_force_fatal(void)
+{
+	pr_info("%s: Reseting the mdm due to AP request\n", __func__);
+
+	force_dump = 1;
+
+	if (in_irq())
+		queue_work(mdm_queue, &mdm_fatal_work);
+	else {
+		notify_modem_fatal();
+		subsystem_restart(EXTERNAL_MODEM);
+	}
+}
+EXPORT_SYMBOL(mdm_force_fatal);
+
 static void mdm_disable_irqs(void)
 {
 	disable_irq_nosync(mdm_drv->mdm_errfatal_irq);
@@ -370,6 +433,73 @@
 	return IRQ_HANDLED;
 }
 
+#ifdef CONFIG_SIM_DETECT
+
+/*
+ * SIM state gpio shows level when SIM inserted
+ *
+ * sim_polarity == 1
+   HIGH: attach
+   sim_polarity == 0
+ * LOW : attach
+ */
+void get_sim_state_at_boot(void)
+{
+	if (mdm_drv) {
+		mdm_drv->sim_state =
+			mdm_drv->pdata->sim_polarity ==
+				gpio_get_value(mdm_drv->sim_detect_gpio);
+		mdm_drv->sim_changed = 0;
+		pr_info("%s: sim state = %s\n", __func__,
+				mdm_drv->sim_state == 1 ? "Attach" : "Detach");
+	}
+}
+
+static void sim_status_check(struct work_struct *work)
+{
+	int cur_sim_state;
+
+	if (!mdm_drv->mdm_ready)
+		return;
+
+	cur_sim_state =
+		mdm_drv->pdata->sim_polarity ==
+			gpio_get_value(mdm_drv->sim_detect_gpio);
+
+	if (cur_sim_state != mdm_drv->sim_state) {
+		mdm_drv->sim_state = cur_sim_state;
+		mdm_drv->sim_changed = 1;
+		pr_info("sim state = %s\n",
+			mdm_drv->sim_state == 1 ? "Attach" : "Detach");
+#ifdef CONFIG_FAST_BOOT
+		if (fake_shut_down)
+			mdm_drv->sim_shutdown_req = true;
+#endif
+		wake_up_interruptible(&mdm_drv->wq);
+	} else
+		mdm_drv->sim_changed = 0;
+
+	mdm_drv->sim_irq = false;
+}
+
+static DECLARE_DELAYED_WORK(sim_status_check_work, sim_status_check);
+
+#define SIM_DEBOUNCE_TIME_MS	1000
+static irqreturn_t sim_detect_irq_handler(int irq, void *dev_id)
+{
+	if (mdm_drv->mdm_ready) {
+		pr_info("%s: sim gpio level = %d\n", __func__,
+				gpio_get_value(mdm_drv->sim_detect_gpio));
+
+		mdm_drv->sim_irq = true;
+		schedule_delayed_work(&sim_status_check_work,
+					msecs_to_jiffies(SIM_DEBOUNCE_TIME_MS));
+	}
+
+	return IRQ_HANDLED;
+}
+#endif
+
 static unsigned char *mdm_read_err_report(void)
 {
 	/* Read CP error report from mdm_err.log in tombstones */
@@ -391,6 +521,20 @@
 	return (unsigned char *) buf;
 }
 
+#ifdef CONFIG_SIM_DETECT
+static unsigned int mdm_modem_poll(struct file *file, poll_table *wait)
+{
+	int mask = 0;
+	poll_wait(file, &mdm_drv->wq, wait);
+	if (mdm_drv->sim_changed == 1) {
+		mdm_drv->sim_changed = 0;
+		mask = POLLHUP;
+	}
+
+	return mask;
+}
+#endif
+
 static int mdm_modem_open(struct inode *inode, struct file *file)
 {
 	return 0;
@@ -400,6 +544,9 @@
 	.owner		= THIS_MODULE,
 	.open		= mdm_modem_open,
 	.unlocked_ioctl	= mdm_modem_ioctl,
+#ifdef CONFIG_SIM_DETECT
+	.poll = mdm_modem_poll,
+#endif
 };
 
 
@@ -444,6 +591,7 @@
 {
 	int soft_reset_direction =
 		mdm_drv->pdata->soft_reset_inverted ? 1 : 0;
+	mdm_drv->mdm_ready = 0;
 	mdm_disable_irqs();
 	notify_modem_fatal();
 	gpio_direction_output(mdm_drv->ap2mdm_soft_reset_gpio,
@@ -500,6 +648,10 @@
 		 */
 		msleep(mdm_drv->pdata->ramdump_delay_ms);
 	}
+
+	/* close silent log */
+	silent_log_panic_handler();
+
 	#if 0
 	if (!mdm_drv->mdm_unexpected_reset_occurred)
 		mdm_drv->ops->reset_mdm_cb(mdm_drv);
@@ -599,6 +751,17 @@
 }
 #endif
 
+#ifdef CONFIG_FAST_BOOT
+static void sim_detect_complete(struct device *dev)
+{
+	if (!mdm_drv->sim_irq && mdm_drv->sim_shutdown_req) {
+		pr_info("fake shutdown sim changed shutdown\n");
+		kernel_power_off();
+		/*kernel_restart(NULL);*/
+		mdm_drv->sim_shutdown_req = false;
+	}
+}
+#endif
 
 static void mdm_modem_initialize_data(struct platform_device  *pdev,
 				struct mdm_ops *mdm_ops)
@@ -664,6 +827,17 @@
 							"MDM2AP_PBLRDY");
 	if (pres)
 		mdm_drv->mdm2ap_pblrdy = pres->start;
+#ifdef CONFIG_SIM_DETECT
+	/* SIM_DETECT */
+	pres = platform_get_resource_byname(pdev, IORESOURCE_IO,
+							"SIM_DETECT");
+	if (pres)
+		mdm_drv->sim_detect_gpio = pres->start;
+	else
+		pr_err("%s: fail to get resource\n", __func__);
+
+#endif
+	mdm_drv->sim_irq = false;
 
 	mdm_drv->boot_type                  = CHARM_NORMAL_BOOT;
 
@@ -671,6 +845,10 @@
 	mdm_drv->pdata    = pdev->dev.platform_data;
 	dump_timeout_ms = mdm_drv->pdata->ramdump_timeout_ms > 0 ?
 		mdm_drv->pdata->ramdump_timeout_ms : MDM_RDUMP_TIMEOUT;
+#ifdef CONFIG_FAST_BOOT
+	mdm_drv->pdata->modem_complete = sim_detect_complete;
+	mdm_drv->sim_shutdown_req = false;
+#endif
 }
 
 int mdm_common_create(struct platform_device  *pdev,
@@ -695,6 +873,9 @@
 		gpio_request(mdm_drv->ap2mdm_kpdpwr_n_gpio, "AP2MDM_KPDPWR_N");
 	gpio_request(mdm_drv->mdm2ap_status_gpio, "MDM2AP_STATUS");
 	gpio_request(mdm_drv->mdm2ap_errfatal_gpio, "MDM2AP_ERRFATAL");
+#ifdef CONFIG_SIM_DETECT
+	gpio_request(mdm_drv->sim_detect_gpio, "SIM_DETECT");
+#endif
 	if (mdm_drv->mdm2ap_pblrdy > 0)
 		gpio_request(mdm_drv->mdm2ap_pblrdy, "MDM2AP_PBLRDY");
 
@@ -743,6 +924,10 @@
 
 	gpio_direction_input(mdm_drv->mdm2ap_status_gpio);
 	gpio_direction_input(mdm_drv->mdm2ap_errfatal_gpio);
+#ifdef CONFIG_SIM_DETECT
+	gpio_direction_input(mdm_drv->sim_detect_gpio);
+	init_waitqueue_head(&mdm_drv->wq);
+#endif
 
 	mdm_queue = create_singlethread_workqueue("mdm_queue");
 	if (!mdm_queue) {
@@ -831,6 +1016,38 @@
 	enable_irq_wake(irq);
 
 status_err:
+#ifdef CONFIG_SIM_DETECT
+	/* sim detect irq */
+#ifdef CONFIG_ARCH_EXYNOS
+	s3c_gpio_cfgpin(mdm_drv->sim_detect_gpio, S3C_GPIO_SFN(0xf));
+	s3c_gpio_setpull(mdm_drv->sim_detect_gpio, S3C_GPIO_PULL_NONE);
+	irq = gpio_to_irq(mdm_drv->sim_detect_gpio);
+#else
+	irq = MSM_GPIO_TO_INT(mdm_drv->sim_detect_gpio);
+#endif
+	if (irq < 0) {
+		pr_err("%s: could not get SIM DETECT IRQ resource. "
+			"error=%d No IRQ will be generated on status change.",
+			__func__, irq);
+		goto simdetect_err;
+	}
+
+	ret = request_threaded_irq(irq, NULL, sim_detect_irq_handler,
+		IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING | IRQF_SHARED,
+		"sim detect", mdm_drv);
+
+	if (ret < 0) {
+		pr_err("%s: SIM_DETECT IRQ#%d request failed with error=%d"
+			". No IRQ will be generated on status change.",
+			__func__, irq, ret);
+		goto simdetect_err;
+	}
+
+	mdm_drv->mdm_status_irq = irq;
+	enable_irq_wake(irq);
+simdetect_err:
+#endif
+
 	if (mdm_drv->mdm2ap_pblrdy > 0) {
 #ifdef CONFIG_ARCH_EXYNOS
 		s3c_gpio_cfgpin(mdm_drv->mdm2ap_pblrdy, S3C_GPIO_SFN(0xf));
@@ -885,6 +1102,9 @@
 		gpio_free(mdm_drv->ap2mdm_pmic_pwr_en_gpio);
 	gpio_free(mdm_drv->mdm2ap_status_gpio);
 	gpio_free(mdm_drv->mdm2ap_errfatal_gpio);
+#ifdef CONFIG_MACH_SIM_DETECT
+	gpio_free(mdm_drv->sim_detect_gpio);
+#endif
 	if (mdm_drv->ap2mdm_soft_reset_gpio > 0)
 		gpio_free(mdm_drv->ap2mdm_soft_reset_gpio);
 
@@ -910,6 +1130,9 @@
 		gpio_free(mdm_drv->ap2mdm_pmic_pwr_en_gpio);
 	gpio_free(mdm_drv->mdm2ap_status_gpio);
 	gpio_free(mdm_drv->mdm2ap_errfatal_gpio);
+#ifdef CONFIG_SIM_DETECT
+	gpio_free(mdm_drv->sim_detect_gpio);
+#endif
 	if (mdm_drv->ap2mdm_soft_reset_gpio > 0)
 		gpio_free(mdm_drv->ap2mdm_soft_reset_gpio);
 
diff -Naur ./arch/arm/mach-exynos/mdm_device.c ../../HK_JB/Kernel/arch/arm/mach-exynos/mdm_device.c
--- ./arch/arm/mach-exynos/mdm_device.c	2012-12-08 20:40:46.153821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/mdm_device.c	2012-11-22 09:13:15.000000000 +0100
@@ -56,6 +56,15 @@
 		.name	= "AP2MDM_WAKEUP",
 		.flags	= IORESOURCE_IO,
 	},
+#ifdef CONFIG_SIM_DETECT
+	{
+		.start	= GPIO_SIM_DETECT,
+		.end	= GPIO_SIM_DETECT,
+		.name	= "SIM_DETECT",
+		.flags	= IORESOURCE_IO,
+	},
+#endif
+
 };
 
 #ifdef CONFIG_MDM_HSIC_PM
@@ -99,7 +108,7 @@
 
 static struct mdm_platform_data mdm_platform_data = {
 	.mdm_version = "3.0",
-	.ramdump_delay_ms = 2000,
+	.ramdump_delay_ms = 3000,
 	.early_power_on = 1,
 	.sfr_query = 0,
 	.vddmin_resource = NULL,
@@ -110,6 +119,14 @@
 	.peripheral_platform_device_ohci = &s5p_device_ohci,
 #endif
 	.ramdump_timeout_ms = 120000,
+#if defined(CONFIG_MACH_P4NOTE) && defined(CONFIG_QC_MODEM) \
+	&& defined(CONFIG_SIM_DETECT)
+	.sim_polarity = 0,
+#endif
+#if (defined(CONFIG_MACH_GC1_USA_VZW) || defined(CONFIG_TARGET_LOCALE_EUR)) \
+	&& defined(CONFIG_QC_MODEM) && defined(CONFIG_SIM_DETECT)
+	.sim_polarity = 1,
+#endif
 };
 
 static int exynos_frequency_lock(struct device *dev)
diff -Naur ./arch/arm/mach-exynos/mdm_hsic_pm.c ../../HK_JB/Kernel/arch/arm/mach-exynos/mdm_hsic_pm.c
--- ./arch/arm/mach-exynos/mdm_hsic_pm.c	2012-12-08 20:40:46.153821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/mdm_hsic_pm.c	2012-11-22 09:13:16.000000000 +0100
@@ -36,14 +36,16 @@
 #include <linux/usb/hcd.h>
 #include <linux/usb/ehci_def.h>
 
+#ifdef CONFIG_CPU_FREQ_TETHERING
 #include <linux/kernel.h>
 #include <linux/netdevice.h>
 #include <mach/mdm2.h>
 #include <linux/usb/android_composite.h>
+#endif
 
 #define EXTERNAL_MODEM "external_modem"
 #define EHCI_REG_DUMP
-#define DEFAULT_RAW_WAKE_TIME (6*HZ)
+#define DEFAULT_RAW_WAKE_TIME (0*HZ)
 
 BLOCKING_NOTIFIER_HEAD(mdm_reset_notifier_list);
 
@@ -85,8 +87,10 @@
 
 	/* control variables */
 	struct notifier_block pm_notifier;
+#ifdef CONFIG_CPU_FREQ_TETHERING
 	struct notifier_block netdev_notifier;
 	struct notifier_block usb_composite_notifier;
+#endif
 
 	bool block_request;
 	bool state_busy;
@@ -117,11 +121,17 @@
 	struct delayed_work fast_dormancy_work;
 
 	struct mdm_hsic_pm_platform_data *mdm_pdata;
+
+	/* QMICM mode value */
+	bool qmicm_mode;
 };
 
 /* indicate wakeup from lpa state */
 bool lpa_handling;
 
+/* indicate receive hallo_packet_rx */
+int hello_packet_rx;
+
 #ifdef EHCI_REG_DUMP
 struct dump_ehci_regs {
 	unsigned caps_hc_capbase;
@@ -233,12 +243,56 @@
 	return NULL;
 }
 
+/* do not call in irq context */
+int pm_dev_runtime_get_enabled(struct usb_device *udev)
+{
+	int spin = 50;
+
+	while (spin--) {
+		pr_debug("%s: rpm status: %d\n", __func__,
+						udev->dev.power.runtime_status);
+		if (udev->dev.power.runtime_status == RPM_ACTIVE ||
+			udev->dev.power.runtime_status == RPM_SUSPENDED) {
+			usb_mark_last_busy(udev);
+			break;
+		}
+		msleep(20);
+	}
+	if (spin <= 0) {
+		pr_err("%s: rpm status %d, return -EAGAIN\n", __func__,
+						udev->dev.power.runtime_status);
+		return -EAGAIN;
+	}
+	usb_mark_last_busy(udev);
+
+	return 0;
+}
+
+/* do not call in irq context */
+int pm_dev_wait_lpa_wake(void)
+{
+	int spin = 50;
+
+	while (lpa_handling && spin--) {
+		pr_debug("%s: lpa wake wait loop\n", __func__);
+		msleep(20);
+	}
+
+	if (lpa_handling) {
+		pr_err("%s: in lpa wakeup, return EAGAIN\n", __func__);
+		return -EAGAIN;
+	}
+
+	return 0;
+}
+
 void notify_modem_fatal(void)
 {
 	struct mdm_hsic_pm_data *pm_data =
 				get_pm_data_by_dev_name("mdm_hsic_pm0");
 
 	pr_info("%s or shutdown\n", __func__);
+	print_mdm_gpio_state();
 
 	if (!pm_data || !pm_data->intf_cnt || !pm_data->udev)
 		return;
@@ -253,6 +307,8 @@
 
 		pm_runtime_get_noresume(dev);
 		pm_runtime_dont_use_autosuspend(dev);
+		/* if it's in going suspend, give settle time before wake up */
+		msleep(100);
 		wake_up_all(&dev->power.wait_queue);
 		pm_runtime_resume(dev);
 		pm_runtime_get_noresume(dev);
@@ -265,6 +321,7 @@
 {
 	struct mdm_hsic_pm_data *pm_data =
 					get_pm_data_by_dev_name("mdm_hsic_pm0");
+	int spin = 5;
 
 	if (!pm_data || !pm_data->udev)
 		return;
@@ -275,6 +332,15 @@
 		if (!atomic_read(&pm_data->pmlock_cnt)) {
 			atomic_inc(&pm_data->pmlock_cnt);
 			pr_info("get lock\n");
+
+			do {
+				if (!pm_dev_runtime_get_enabled(pm_data->udev))
+					break;
+			} while (spin--);
+
+			if (spin <= 0)
+				mdm_force_fatal();
+
 			pm_runtime_get(&pm_data->udev->dev);
 			pm_runtime_forbid(&pm_data->udev->dev);
 		} else
@@ -287,6 +353,8 @@
 			pm_runtime_allow(&pm_data->udev->dev);
 			pm_runtime_put(&pm_data->udev->dev);
 		}
+		/* initailize hello_packet_rx */
+		hello_packet_rx = 0;
 	}
 }
 
@@ -341,13 +409,22 @@
 		return;
 	}
 
+	/* crash during kernel suspend/resume, do not control host ready pin */
+	/* and it has to be controlled when host driver initialized again */
+	if (pm_data->block_request && pm_data->shutdown)
+		return;
+
 	if (pm_data->gpio_host_ready) {
 		pr_info("dev rdy val = %d\n",
 				gpio_get_value(pm_data->gpio_device_ready));
 		pr_info("%s:set host port power status to [%d]\n",
 							__func__, status);
 
-		/*10ms delay location moved*/
+		/*
+		 * need get some delay for MDM9x15 suspend
+		 * if L3 drive goes out to modem in suspending
+		 * modem goes to unstable PM state. now 10 ms is enough
+		 */
 		if(status == POWER_OFF)
 			mdelay(10);
 
@@ -368,6 +445,10 @@
 		return -ENODEV;
 	}
 
+	/* in shutdown(including modem fatal) do not need to wait dev ready */
+	if (pm_data->shutdown)
+		return 0;
+
 	pr_info("%s:[%s]...\n", __func__, status ? "PWR ON" : "PWR OFF");
 
 	if (pm_data->gpio_device_ready) {
@@ -382,8 +463,10 @@
 
 	if (gpio_get_value(pm_data->gpio_device_ready) == status)
 		pr_info(" done\n");
-	else
+	else {
 		subsystem_restart(EXTERNAL_MODEM);
+		return -ETIMEDOUT;
+	}
 	return 0;
 }
 
@@ -420,28 +503,19 @@
 {
 	/* if modem need to check survive, get status in variable */
 	int val = 1;
+	int ret = 0;
 
 	/* set state for LPA enter */
 	if (val) {
 		switch (states) {
 		case STATE_HSIC_LPA_ENTER:
-			/*
-			 * need get some delay for MDM9x15 suspend
-			 * if L3 drive goes out to modem in suspending
-			 * modem goes to unstable PM state. now 10 ms is enough
-			 */
-			/*10ms delay location moved*/
-			//mdelay(10);
 			set_host_stat("mdm_hsic_pm0", POWER_OFF);
-			wait_dev_pwr_stat("mdm_hsic_pm0", POWER_OFF);
+			ret = wait_dev_pwr_stat("mdm_hsic_pm0", POWER_OFF);
+			if (ret)
+				return ret;
 			pr_info("set hsic lpa enter\n");
 			break;
 		case STATE_HSIC_LPA_WAKE:
-			/* host control is done by ehci runtime resume code */
-			#if 0
-			set_host_stat("mdm_hsic_pm0", POWER_ON);
-			wait_dev_pwr_stat("mdm_hsic_pm0", POWER_ON);
-			#endif
 			lpa_handling = true;
 			pr_info("%s: set lpa handling to true\n", __func__);
 			request_active_lock_set("mdm_hsic_pm0");
@@ -466,6 +540,24 @@
 	return 0;
 }
 
+bool mdm_check_main_connect(const char *name)
+{
+	/* find pm device from list by name */
+	struct mdm_hsic_pm_data *pm_data = get_pm_data_by_dev_name(name);
+
+	if (!pm_data) {
+		pr_err("%s:no pm device(%s)\n", __func__, name);
+		return false;
+	}
+
+	print_pm_dev_info(pm_data);
+
+	if (pm_data->intf_cnt == 3)
+		return true;
+	else
+		return false;
+}
+
 #define PM_START_DELAY_MS 3000
 int register_udev_to_pm_dev(const char *name, struct usb_device *udev)
 {
@@ -486,6 +578,10 @@
 		pm_data->udev = udev;
 		atomic_set(&pm_data->pmlock_cnt, 0);
 		usb_disable_autosuspend(udev);
+		pm_data->shutdown = false;
+#ifdef CONFIG_SIM_DETECT
+		get_sim_state_at_boot();
+#endif
 	} else if (pm_data->udev && pm_data->udev != udev) {
 		pr_err("%s:udev mismatching: pm_data->udev(0x%p), udev(0x%p)\n",
 		__func__, pm_data->udev, udev);
@@ -501,6 +597,22 @@
 	return 0;
 }
 
+int set_qmicm_mode(const char *name)
+{
+	/* find pm device from list by name */
+	struct mdm_hsic_pm_data *pm_data = get_pm_data_by_dev_name(name);
+
+	if (!pm_data) {
+		pr_err("%s:no pm device(%s) exist\n", __func__, name);
+		return -ENODEV;
+	}
+
+	pm_data->qmicm_mode = true;
+	pr_info("%s: set QMICM mode\n", __func__);
+
+	return 0;
+}
+
 /* force fatal for debug when HSIC disconnect */
 extern void mdm_force_fatal(void);
 
@@ -825,6 +937,11 @@
 		if (ret < 0)
 			return ret;
 		gpio_direction_output(pm_data->gpio_host_ready, 1);
+		s3c_gpio_cfgpin(pm_data->gpio_host_ready, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(pm_data->gpio_host_ready, S3C_GPIO_PULL_NONE);
+		s5p_gpio_set_drvstr(pm_data->gpio_host_ready,
+							S5P_GPIO_DRVSTR_LV4);
+		gpio_set_value(pm_data->gpio_host_ready, 1);
 	} else
 		return -ENXIO;
 
@@ -879,6 +996,7 @@
 		gpio_free(pm_data->gpio_host_wake);
 }
 
+#ifdef CONFIG_CPU_FREQ_TETHERING
 static int link_pm_netdev_event(struct notifier_block *this,
 				unsigned long event, void *ptr)
 {
@@ -932,6 +1050,7 @@
 
 	return NOTIFY_DONE;
 }
+#endif
 
 static int mdm_hsic_pm_probe(struct platform_device *pdev)
 {
@@ -992,17 +1111,20 @@
 	blocking_notifier_chain_register(&mdm_reset_notifier_list,
 							&mdm_reset_main_block);
 
+#ifdef CONFIG_CPU_FREQ_TETHERING
 	pm_data->netdev_notifier.notifier_call = link_pm_netdev_event;
 	register_netdevice_notifier(&pm_data->netdev_notifier);
 
 	pm_data->usb_composite_notifier.notifier_call =
 		usb_composite_notifier_event;
 	register_usb_composite_notifier(&pm_data->usb_composite_notifier);
+#endif
 
 	wake_lock_init(&pm_data->l2_wake, WAKE_LOCK_SUSPEND, pm_data->name);
 	wake_lock_init(&pm_data->boot_wake, WAKE_LOCK_SUSPEND, "mdm_boot");
 	wake_lock_init(&pm_data->fd_wake, WAKE_LOCK_SUSPEND, "fast_dormancy");
 	pm_data->fd_wake_time = DEFAULT_RAW_WAKE_TIME;
+	pm_data->qmicm_mode = false;
 
 	print_pm_dev_info(pm_data);
 	list_add(&pm_data->list, &hsic_pm_dev_list);
diff -Naur ./arch/arm/mach-exynos/mdm_private.h ../../HK_JB/Kernel/arch/arm/mach-exynos/mdm_private.h
--- ./arch/arm/mach-exynos/mdm_private.h	2012-12-08 20:40:46.153821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/mdm_private.h	2012-11-22 09:13:15.000000000 +0100
@@ -36,7 +36,9 @@
 	unsigned ap2mdm_soft_reset_gpio;
 	unsigned ap2mdm_pmic_pwr_en_gpio;
 	unsigned mdm2ap_pblrdy;
-
+#ifdef CONFIG_SIM_DETECT
+	unsigned sim_detect_gpio;
+#endif
 	int proto_is_dload;
 
 	int mdm_errfatal_irq;
@@ -47,9 +49,16 @@
 	enum charm_boot_type boot_type;
 	int mdm_debug_on;
 	int mdm_unexpected_reset_occurred;
-
+#ifdef CONFIG_SIM_DETECT
+	int sim_state;
+	bool sim_changed;
+	wait_queue_head_t wq;
+#endif
 	struct mdm_ops *ops;
 	struct mdm_platform_data *pdata;
+
+	bool sim_shutdown_req;
+	bool sim_irq;
 };
 
 int mdm_common_create(struct platform_device  *pdev,
@@ -61,9 +70,13 @@
 
 void notify_modem_fatal(void);
 void request_autopm_lock(int status);
-
+bool mdm_check_main_connect(const char *);
+#ifdef CONFIG_SIM_DETECT
+void get_sim_state_at_boot(void);
+#endif
 extern unsigned int lpcharge;
 extern void ctrl_bridge_stop_all(void);
 extern void rmnet_usb_ctrl_stop_all(void);
+extern void silent_log_panic_handler(void);
 #endif
 
diff -Naur ./arch/arm/mach-exynos/midas-camera.c ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-camera.c
--- ./arch/arm/mach-exynos/midas-camera.c	2012-12-08 20:40:46.153821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-camera.c	2012-11-22 09:13:15.000000000 +0100
@@ -60,6 +60,10 @@
 #include <media/sr200pc20_platform.h>
 #endif
 
+#ifdef CONFIG_VIDEO_SR130PC20
+#include <media/sr130pc20_platform.h>
+#endif
+
 struct class *camera_class;
 
 static int __init camera_class_init(void)
@@ -90,6 +94,8 @@
 #elif defined(CONFIG_MACH_BAFFIN)
 #define FRONT_CAM_MCLK_DEVIDED_REVISION	0x00
 #define USE_8M_CAM_SENSOR_CORE_REVISION	0x00
+#elif defined(CONFIG_MACH_M3_USA_TMO)
+#define USE_8M_CAM_SENSOR_CORE_REVISION	0x00
 #else
 #if defined(CONFIG_MACH_C1_KOR_SKT) || defined(CONFIG_MACH_C1_KOR_KT)
 #define FRONT_CAM_MCLK_DEVIDED_REVISION	0x07
@@ -228,7 +234,7 @@
 
 #ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
 #ifdef CONFIG_VIDEO_S5K6A3
-#ifdef CONFIG_MACH_P4NOTE
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
 /* For P4Note PegasusQ */
 static int s5k6a3_power_on(void)
 {
@@ -331,6 +337,191 @@
 
 	return ret;
 }
+#elif defined(CONFIG_MACH_M3_JPN_DCM)
+static int s5k6a3_gpio_request(void)
+{
+	int ret = 0;
+
+	/* SENSOR_A2.8V */
+	if (system_rev < 3)
+		ret = gpio_request(GPIO_CAM_IO_EN_R1, "GPM0");
+	else
+		ret = gpio_request(GPIO_CAM_IO_EN, "GPM0");
+
+	if (ret) {
+		printk(KERN_ERR "fail to request gpio(GPIO_CAM_IO_EN)\n");
+		return ret;
+	}
+
+#if defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_M3) || \
+	defined(CONFIG_MACH_SLP_T0_LTE)
+	ret = gpio_request(GPIO_VTCAM_MCLK, "GPM2");
+	if (ret) {
+		printk(KERN_ERR "fail to request gpio(GPIO_VTCAM_MCLK)\n");
+		return ret;
+	}
+#else
+	if (system_rev < FRONT_CAM_MCLK_DEVIDED_REVISION)
+		ret = gpio_request(GPIO_CAM_MCLK, "GPJ1");
+	else
+		ret = gpio_request(GPIO_VTCAM_MCLK, "GPM2");
+	if (ret) {
+		printk(KERN_ERR "fail to request gpio(GPIO_VTCAM_MCLK)\n");
+		return ret;
+	}
+#endif
+
+	ret = gpio_request(GPIO_CAM_VT_nRST, "GPM1");
+	if (ret) {
+		printk(KERN_ERR "fail to request gpio(GPIO_CAM_VT_nRST)\n");
+		return ret;
+	}
+
+	return ret;
+}
+
+static int s5k6a3_power_on(void)
+{
+	struct regulator *regulator;
+	int ret = 0;
+
+	printk(KERN_DEBUG "%s: in\n", __func__);
+
+	s5k6a3_gpio_request();
+
+	/* CAM_SENSOR_A2.8V */
+	if (system_rev < 3)
+		ret = gpio_direction_output(GPIO_CAM_IO_EN_R1, 1);
+	else
+		ret = gpio_direction_output(GPIO_CAM_IO_EN, 1);
+
+	CAM_CHECK_ERR_RET(ret, "output GPIO_CAM_IO_EN");
+	/* delay is needed : external LDO control is slower than MCLK control*/
+	udelay(100);
+
+	/* MCLK */
+#if defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_M3) ||\
+	defined(CONFIG_MACH_SLP_T0_LTE)
+	ret = s3c_gpio_cfgpin(GPIO_VTCAM_MCLK, S3C_GPIO_SFN(3));
+	s3c_gpio_setpull(GPIO_VTCAM_MCLK, S3C_GPIO_PULL_NONE);
+#if defined(CONFIG_MACH_T0)  || defined(CONFIG_MACH_SLP_T0_LTE)
+	s5p_gpio_set_drvstr(GPIO_VTCAM_MCLK, S5P_GPIO_DRVSTR_LV1);
+#else
+	s5p_gpio_set_drvstr(GPIO_VTCAM_MCLK, S5P_GPIO_DRVSTR_LV2);
+#endif
+#else
+	if (system_rev < FRONT_CAM_MCLK_DEVIDED_REVISION) {
+		ret = s3c_gpio_cfgpin(GPIO_CAM_MCLK, S3C_GPIO_SFN(2));
+		s3c_gpio_setpull(GPIO_CAM_MCLK, S3C_GPIO_PULL_NONE);
+		s5p_gpio_set_drvstr(GPIO_CAM_MCLK, S5P_GPIO_DRVSTR_LV2);
+	} else {
+		ret = s3c_gpio_cfgpin(GPIO_VTCAM_MCLK, S3C_GPIO_SFN(3));
+		s3c_gpio_setpull(GPIO_VTCAM_MCLK, S3C_GPIO_PULL_NONE);
+		s5p_gpio_set_drvstr(GPIO_VTCAM_MCLK, S5P_GPIO_DRVSTR_LV2);
+	}
+#endif
+	CAM_CHECK_ERR_RET(ret, "cfg mclk");
+
+	/* VT_RESET */
+	ret = gpio_direction_output(GPIO_CAM_VT_nRST, 1);
+	CAM_CHECK_ERR_RET(ret, "output GPIO_CAM_VT_nRST");
+
+	/* VT_CORE_1.8V */
+	regulator = regulator_get(NULL, "vt_cam_1.8v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	ret = regulator_enable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR_RET(ret, "enable vt_cam_1.8v");
+
+	if (system_rev < 3)
+		gpio_free(GPIO_CAM_IO_EN_R1);
+	else
+		gpio_free(GPIO_CAM_IO_EN);
+
+	gpio_free(GPIO_CAM_VT_nRST);
+
+#if defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_M3) || \
+	defined(CONFIG_MACH_SLP_T0_LTE)
+	gpio_free(GPIO_VTCAM_MCLK);
+#else
+	if (system_rev < FRONT_CAM_MCLK_DEVIDED_REVISION)
+		gpio_free(GPIO_CAM_MCLK);
+	else
+		gpio_free(GPIO_VTCAM_MCLK);
+#endif
+
+	return ret;
+}
+
+static int s5k6a3_power_down(void)
+{
+	struct regulator *regulator;
+	int ret = 0;
+
+	printk(KERN_DEBUG "%s: in\n", __func__);
+
+	s5k6a3_gpio_request();
+
+	/* VT_RESET */
+	ret = gpio_direction_output(GPIO_CAM_VT_nRST, 0);
+	CAM_CHECK_ERR_RET(ret, "output GPIO_CAM_VT_nRST");
+
+	/* VT_CORE_1.8V */
+	regulator = regulator_get(NULL, "vt_cam_1.8v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	if (regulator_is_enabled(regulator))
+		ret = regulator_force_disable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR(ret, "disable vt_cam_1.8v");
+
+	/* CAM_SENSOR_A2.8V */
+	if (system_rev < 3)
+		ret = gpio_direction_output(GPIO_CAM_IO_EN_R1, 0);
+	else
+		ret = gpio_direction_output(GPIO_CAM_IO_EN, 0);
+
+	CAM_CHECK_ERR_RET(ret, "output GPIO_CAM_IO_EN");
+	/* delay is needed : external LDO control is slower than MCLK control*/
+	udelay(500);
+
+	/* MCLK */
+#if defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_M3) || \
+	defined(CONFIG_MACH_SLP_T0_LTE)
+	ret = s3c_gpio_cfgpin(GPIO_VTCAM_MCLK, S3C_GPIO_INPUT);
+	s3c_gpio_setpull(GPIO_VTCAM_MCLK, S3C_GPIO_PULL_DOWN);
+#else
+	if (system_rev < FRONT_CAM_MCLK_DEVIDED_REVISION) {
+		ret = s3c_gpio_cfgpin(GPIO_CAM_MCLK, S3C_GPIO_INPUT);
+		s3c_gpio_setpull(GPIO_CAM_MCLK, S3C_GPIO_PULL_DOWN);
+
+	} else {
+		ret = s3c_gpio_cfgpin(GPIO_VTCAM_MCLK, S3C_GPIO_INPUT);
+		s3c_gpio_setpull(GPIO_VTCAM_MCLK, S3C_GPIO_PULL_DOWN);
+	}
+#endif
+	CAM_CHECK_ERR(ret, "cfg mclk");
+
+	if (system_rev < 3)
+		gpio_free(GPIO_CAM_IO_EN_R1);
+	else
+		gpio_free(GPIO_CAM_IO_EN);
+
+	gpio_free(GPIO_CAM_VT_nRST);
+
+#if defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_M3) || \
+	defined(CONFIG_MACH_SLP_T0_LTE)
+	gpio_free(GPIO_VTCAM_MCLK);
+#else
+	if (system_rev < FRONT_CAM_MCLK_DEVIDED_REVISION)
+		gpio_free(GPIO_CAM_MCLK);
+	else
+		gpio_free(GPIO_VTCAM_MCLK);
+#endif
+
+	return ret;
+}
 #else /* !CONFIG_MACH_P4NOTE */
 static int s5k6a3_gpio_request(void)
 {
@@ -519,7 +710,7 @@
 
 static const char *s5k6a3_get_clk_name(void)
 {
-#if defined(CONFIG_MACH_P4NOTE) || \
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA) || \
 	defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_M3) \
 	|| defined(CONFIG_MACH_SLP_T0_LTE)
 	return "sclk_cam1";
@@ -685,11 +876,339 @@
 	CAM_CHECK_ERR_RET(ret, "output GPIO_ISP_RESET");
 	udelay(10);	/* 200 cycle */
 
-	gpio_free(GPIO_ISP_RESET);
+	gpio_free(GPIO_ISP_RESET);
+
+	return ret;
+}
+
+#if defined(CONFIG_MACH_M3_JPN_DCM)
+static int s5c73m3_gpio_request(void)
+{
+	int ret = 0;
+
+	if (system_rev < 3)
+		ret = gpio_request(GPIO_ISP_STANDBY_R1, "GPM0");
+	else
+	ret = gpio_request(GPIO_ISP_STANDBY, "GPM0");
+	if (ret) {
+		printk(KERN_ERR "faile to request gpio(GPIO_ISP_STANDBY)\n");
+		return ret;
+	}
+
+	ret = gpio_request(GPIO_ISP_RESET, "GPF1");
+	if (ret) {
+		printk(KERN_ERR "faile to request gpio(GPIO_ISP_RESET)\n");
+		return ret;
+	}
+
+	/* SENSOR_A2.8V */
+	if (system_rev < 3)
+		ret = gpio_request(GPIO_CAM_IO_EN_R1, "GPM0");
+	else
+		ret = gpio_request(GPIO_CAM_IO_EN, "GPM0");
+
+	if (ret) {
+		printk(KERN_ERR "fail to request gpio(GPIO_CAM_IO_EN)\n");
+		return ret;
+	}
+
+	if (system_rev < 3)
+		ret = gpio_request(GPIO_CAM_AF_EN_R1, "GPM1");
+	else
+		ret = gpio_request(GPIO_CAM_AF_EN, "GPM0");
+
+	if (ret) {
+		printk(KERN_ERR "faile to request gpio(GPIO_CAM_AF_EN)\n");
+		return ret;
+	}
+
+	if (system_rev < 3)
+		ret = gpio_request(GPIO_ISP_CORE_EN_R1, "GPM1");
+	else
+		ret = gpio_request(GPIO_ISP_CORE_EN, "GPM0");
+
+	if (ret) {
+		printk(KERN_ERR "fail to request gpio(GPIO_ISP_CORE_EN)\n");
+		return ret;
+	}
+
+#if defined(CONFIG_MACH_C1) || defined(CONFIG_MACH_T0) || \
+	defined(CONFIG_MACH_SLP_T0_LTE) || defined(CONFIG_MACH_BAFFIN)
+	if (system_rev >= USE_8M_CAM_SENSOR_CORE_REVISION) {
+		ret = gpio_request(GPIO_CAM_SENSOR_CORE_EN, "GPM0");
+		if (ret) {
+			printk(KERN_ERR "fail to request gpio(GPIO_CAM_SENSOR_CORE_EN)\n");
+			return ret;
+		}
+	}
+#endif
+
+	return ret;
+}
+
+static void s5c73m3_gpio_free(void)
+{
+	if (system_rev < 3) {
+		gpio_free(GPIO_ISP_STANDBY_R1);
+		gpio_free(GPIO_CAM_IO_EN_R1);
+		gpio_free(GPIO_ISP_RESET);
+		gpio_free(GPIO_CAM_AF_EN_R1);
+		gpio_free(GPIO_ISP_CORE_EN_R1);
+	} else {
+		gpio_free(GPIO_ISP_STANDBY);
+		gpio_free(GPIO_ISP_RESET);
+		gpio_free(GPIO_CAM_IO_EN);
+		gpio_free(GPIO_CAM_AF_EN);
+		gpio_free(GPIO_ISP_CORE_EN);
+	}
+
+#if defined(CONFIG_MACH_C1) || defined(CONFIG_MACH_T0) || \
+	defined(CONFIG_MACH_SLP_T0_LTE) || defined(CONFIG_MACH_BAFFIN)
+	if (system_rev >= USE_8M_CAM_SENSOR_CORE_REVISION)
+		gpio_free(GPIO_CAM_SENSOR_CORE_EN);
+#endif
+}
+
+static int s5c73m3_power_on(void)
+{
+	struct regulator *regulator;
+	int ret = 0;
+
+	printk(KERN_DEBUG "%s: in\n", __func__);
+
+#ifndef CONFIG_VIDEO_SLP_S5C73M3
+	s5c73m3_check_vdd_core();
+#endif
+	printk(KERN_DEBUG "s5c73m3 vddCore : %d\n", vddCore);
+
+	s5c73m3_gpio_request();
+
+	/* CAM_ISP_CORE_1.2V */
+	if (system_rev < 3)
+		ret = gpio_direction_output(GPIO_ISP_CORE_EN_R1, 1);
+	else
+		ret = gpio_direction_output(GPIO_ISP_CORE_EN, 1);
+
+	CAM_CHECK_ERR_RET(ret, "output GPIO_ISP_CORE_EN");
+
+	regulator = regulator_get(NULL, "cam_isp_core_1.2v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	regulator_set_voltage(regulator, vddCore, vddCore);
+	ret = regulator_enable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR_RET(ret, "enable cam_isp_core_1.2v");
+
+	/* CAM_SENSOR_A2.8V */
+	if (system_rev < 3)
+		ret = gpio_direction_output(GPIO_CAM_IO_EN_R1, 1);
+	else
+		ret = gpio_direction_output(GPIO_CAM_IO_EN, 1);
+
+	CAM_CHECK_ERR_RET(ret, "output IO_EN");
+
+	/* CAM_SENSOR_CORE_1.2V */
+#if defined(CONFIG_MACH_C1) || defined(CONFIG_MACH_T0) || \
+	defined(CONFIG_MACH_SLP_T0_LTE) || defined(CONFIG_MACH_BAFFIN)
+	printk(KERN_DEBUG "system_rev : %d\n", system_rev);
+	if (system_rev >= USE_8M_CAM_SENSOR_CORE_REVISION) {
+		ret = gpio_direction_output(GPIO_CAM_SENSOR_CORE_EN, 1);
+		CAM_CHECK_ERR_RET(ret, "output CAM_SENSOR_CORE_EN");
+		/* delay is needed : external LDO is slower than MCLK control*/
+		udelay(200);
+	} else {
+		regulator = regulator_get(NULL, "cam_sensor_core_1.2v");
+		if (IS_ERR(regulator))
+			return -ENODEV;
+		ret = regulator_enable(regulator);
+		regulator_put(regulator);
+		CAM_CHECK_ERR_RET(ret, "enable cam_sensor_core_1.2v");
+		/* delay is needed : pmu control is slower than gpio control*/
+		mdelay(5);
+	}
+#else
+	regulator = regulator_get(NULL, "cam_sensor_core_1.2v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	ret = regulator_enable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR_RET(ret, "enable cam_sensor_core_1.2v");
+       /* delay is needed : pmu control is slower than gpio control*/
+	mdelay(5);
+#endif
+
+	/* MCLK */
+	ret = s3c_gpio_cfgpin(GPIO_CAM_MCLK, S3C_GPIO_SFN(2));
+	CAM_CHECK_ERR_RET(ret, "cfg mclk");
+	s3c_gpio_setpull(GPIO_CAM_MCLK, S3C_GPIO_PULL_NONE);
+#if defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_SLP_T0_LTE)
+	s5p_gpio_set_drvstr(GPIO_CAM_MCLK, S5P_GPIO_DRVSTR_LV2);
+#else
+	s5p_gpio_set_drvstr(GPIO_CAM_MCLK, S5P_GPIO_DRVSTR_LV3);
+#endif
+
+	/* CAM_AF_2.8V */
+	if (system_rev < 3)
+		ret = gpio_direction_output(GPIO_CAM_AF_EN_R1, 1);
+	else
+		ret = gpio_direction_output(GPIO_CAM_AF_EN, 1);
+
+	CAM_CHECK_ERR_RET(ret, "output GPIO_CAM_AF_EN");
+	udelay(2000);
+
+	/* CAM_ISP_SENSOR_1.8V */
+	regulator = regulator_get(NULL, "cam_isp_sensor_1.8v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	ret = regulator_enable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR_RET(ret, "enable cam_isp_sensor_1.8v");
+
+	/* CAM_ISP_MIPI_1.2V */
+	regulator = regulator_get(NULL, "cam_isp_mipi_1.2v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	ret = regulator_enable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR_RET(ret, "enable cam_isp_mipi_1.2v");
+       /* delay is needed : pmu control is slower than gpio control*/
+	mdelay(5);
+
+	/* ISP_STANDBY */
+	if (system_rev < 3)
+		ret = gpio_direction_output(GPIO_ISP_STANDBY_R1, 1);
+	else
+		ret = gpio_direction_output(GPIO_ISP_STANDBY, 1);
+
+	CAM_CHECK_ERR_RET(ret, "output GPIO_ISP_STANDBY");
+	udelay(100);		/* 2000 cycle */
+
+	/* ISP_RESET */
+	ret = gpio_direction_output(GPIO_ISP_RESET, 1);
+	CAM_CHECK_ERR_RET(ret, "output GPIO_ISP_RESET");
+	udelay(10);		/* 200 cycle */
+
+	s5c73m3_gpio_free();
+
+	return ret;
+}
+
+static int s5c73m3_power_down(void)
+{
+	struct regulator *regulator;
+	int ret = 0;
+
+	printk(KERN_DEBUG "%s: in\n", __func__);
+
+	s5c73m3_gpio_request();
+
+	/* ISP_STANDBY */
+	if (system_rev < 3)
+		ret = gpio_direction_output(GPIO_ISP_STANDBY_R1, 0);
+	else
+		ret = gpio_direction_output(GPIO_ISP_STANDBY, 0);
+
+	CAM_CHECK_ERR_RET(ret, "output GPIO_ISP_STANDBY");
+	udelay(2);		/* 40 cycle */
+
+	/* ISP_RESET */
+	ret = gpio_direction_output(GPIO_ISP_RESET, 0);
+	CAM_CHECK_ERR_RET(ret, "output GPIO_ISP_RESET");
+
+	/* CAM_AF_2.8V */
+	if (system_rev < 3)
+		ret = gpio_direction_output(GPIO_CAM_AF_EN_R1, 0);
+	else
+		ret = gpio_direction_output(GPIO_CAM_AF_EN, 0);
+
+	CAM_CHECK_ERR_RET(ret, "output GPIO_CAM_AF_EN");
+
+	/* CAM_ISP_MIPI_1.2V */
+	regulator = regulator_get(NULL, "cam_isp_mipi_1.2v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	if (regulator_is_enabled(regulator))
+		ret = regulator_force_disable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR(ret, "disable cam_isp_mipi_1.2v");
+	udelay(10);		/* 200 cycle */
+
+	/* CAM_ISP_SENSOR_1.8V */
+	regulator = regulator_get(NULL, "cam_isp_sensor_1.8v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	if (regulator_is_enabled(regulator))
+		ret = regulator_force_disable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR(ret, "disable cam_isp_sensor_1.8v");
+
+	/* CAM_SENSOR_CORE_1.2V */
+#if defined(CONFIG_MACH_C1) || defined(CONFIG_MACH_T0) || \
+	defined(CONFIG_MACH_SLP_T0_LTE) || defined(CONFIG_MACH_BAFFIN)
+	if (system_rev >= USE_8M_CAM_SENSOR_CORE_REVISION) {
+		ret = gpio_direction_output(GPIO_CAM_SENSOR_CORE_EN, 0);
+		CAM_CHECK_ERR_RET(ret, "output CAM_SENSOR_CORE_EN");
+		udelay(500);
+	} else {
+		regulator = regulator_get(NULL, "cam_sensor_core_1.2v");
+		if (IS_ERR(regulator))
+			return -ENODEV;
+		if (regulator_is_enabled(regulator))
+			ret = regulator_force_disable(regulator);
+		regulator_put(regulator);
+		CAM_CHECK_ERR(ret, "disable cam_sensor_core_1.2v");
+		/* delay is needed : hw request*/
+		udelay(500);
+	}
+#else
+	regulator = regulator_get(NULL, "cam_sensor_core_1.2v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	if (regulator_is_enabled(regulator))
+		ret = regulator_force_disable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR(ret, "disable cam_sensor_core_1.2v");
+	/* delay is needed : hw request*/
+	udelay(500);
+#endif
+
+	/* CAM_SENSOR_A2.8V */
+	if (system_rev < 3)
+		ret = gpio_direction_output(GPIO_CAM_IO_EN_R1, 0);
+	else
+		ret = gpio_direction_output(GPIO_CAM_IO_EN, 0);
+
+	CAM_CHECK_ERR_RET(ret, "output GPIO_CAM_IO_EN");
+
+	/* CAM_ISP_CORE_1.2V */
+	regulator = regulator_get(NULL, "cam_isp_core_1.2v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	if (regulator_is_enabled(regulator))
+		ret = regulator_force_disable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR(ret, "disable cam_isp_core_1.2v");
+
+	if (system_rev < 3)
+		ret = gpio_direction_output(GPIO_ISP_CORE_EN_R1, 0);
+	else
+		ret = gpio_direction_output(GPIO_ISP_CORE_EN, 0);
+
+	CAM_CHECK_ERR_RET(ret, "output GPIO_CAM_ISP_CORE_EN");
+	/* delay is needed : hw request*/
+	mdelay(30);
+
+	/* MCLK */
+	ret = s3c_gpio_cfgpin(GPIO_CAM_MCLK, S3C_GPIO_INPUT);
+	s3c_gpio_setpull(GPIO_CAM_MCLK, S3C_GPIO_PULL_DOWN);
+	CAM_CHECK_ERR(ret, "cfg mclk");
+
+	s5c73m3_gpio_free();
 
 	return ret;
 }
 
+#else /* !CONFIG_MACH_M3_JPN_DCM */
 static int s5c73m3_gpio_request(void)
 {
 	int ret = 0;
@@ -712,28 +1231,22 @@
 		printk(KERN_ERR "fail to request gpio(GPIO_CAM_IO_EN)\n");
 		return ret;
 	}
-#if defined(CONFIG_MACH_M3_JPN_DCM)
-	ret = gpio_request(GPIO_CAM_AF_EN, "GPM1");
-#else
+
 	ret = gpio_request(GPIO_CAM_AF_EN, "GPM0");
-#endif
 	if (ret) {
 		printk(KERN_ERR "faile to request gpio(GPIO_CAM_AF_EN)\n");
 		return ret;
 	}
 
-#if defined(CONFIG_MACH_M3_JPN_DCM)
-	ret = gpio_request(GPIO_ISP_CORE_EN, "GPM1");
-#else
 	ret = gpio_request(GPIO_ISP_CORE_EN, "GPM0");
-#endif
 	if (ret) {
 		printk(KERN_ERR "fail to request gpio(GPIO_ISP_CORE_EN)\n");
 		return ret;
 	}
 
 #if defined(CONFIG_MACH_C1) || defined(CONFIG_MACH_T0) || \
-	defined(CONFIG_MACH_SLP_T0_LTE) || defined(CONFIG_MACH_BAFFIN)
+	defined(CONFIG_MACH_SLP_T0_LTE) || defined(CONFIG_MACH_BAFFIN) || \
+	defined(CONFIG_MACH_M3_USA_TMO)
 	if (system_rev >= USE_8M_CAM_SENSOR_CORE_REVISION) {
 		ret = gpio_request(GPIO_CAM_SENSOR_CORE_EN, "GPM0");
 		if (ret) {
@@ -749,13 +1262,14 @@
 static void s5c73m3_gpio_free(void)
 {
 	gpio_free(GPIO_ISP_STANDBY);
-	gpio_free(GPIO_ISP_RESET);
 	gpio_free(GPIO_CAM_IO_EN);
+	gpio_free(GPIO_ISP_RESET);
 	gpio_free(GPIO_CAM_AF_EN);
 	gpio_free(GPIO_ISP_CORE_EN);
 
 #if defined(CONFIG_MACH_C1) || defined(CONFIG_MACH_T0) || \
-	defined(CONFIG_MACH_SLP_T0_LTE) || defined(CONFIG_MACH_BAFFIN)
+	defined(CONFIG_MACH_SLP_T0_LTE) || defined(CONFIG_MACH_BAFFIN) || \
+	defined(CONFIG_MACH_M3_USA_TMO)
 	if (system_rev >= USE_8M_CAM_SENSOR_CORE_REVISION)
 		gpio_free(GPIO_CAM_SENSOR_CORE_EN);
 #endif
@@ -793,7 +1307,8 @@
 
 	/* CAM_SENSOR_CORE_1.2V */
 #if defined(CONFIG_MACH_C1) || defined(CONFIG_MACH_T0) || \
-	defined(CONFIG_MACH_SLP_T0_LTE) || defined(CONFIG_MACH_BAFFIN)
+	defined(CONFIG_MACH_SLP_T0_LTE) || defined(CONFIG_MACH_BAFFIN) || \
+	defined(CONFIG_MACH_M3_USA_TMO)
 	printk(KERN_DEBUG "system_rev : %d\n", system_rev);
 	if (system_rev >= USE_8M_CAM_SENSOR_CORE_REVISION) {
 		ret = gpio_direction_output(GPIO_CAM_SENSOR_CORE_EN, 1);
@@ -912,7 +1427,8 @@
 
 	/* CAM_SENSOR_CORE_1.2V */
 #if defined(CONFIG_MACH_C1) || defined(CONFIG_MACH_T0) || \
-	defined(CONFIG_MACH_SLP_T0_LTE) || defined(CONFIG_MACH_BAFFIN)
+	defined(CONFIG_MACH_SLP_T0_LTE) || defined(CONFIG_MACH_BAFFIN) || \
+	defined(CONFIG_MACH_M3_USA_TMO)
 	if (system_rev >= USE_8M_CAM_SENSOR_CORE_REVISION) {
 		ret = gpio_direction_output(GPIO_CAM_SENSOR_CORE_EN, 0);
 		CAM_CHECK_ERR_RET(ret, "output CAM_SENSOR_CORE_EN");
@@ -967,6 +1483,7 @@
 
 	return ret;
 }
+#endif /* !CONFIG_MACH_M3_JPN_DCM */
 
 static int s5c73m3_power(int enable)
 {
@@ -1076,11 +1593,8 @@
 		printk(KERN_ERR "faile to request gpio(GPIO_CAM_VGA_nRST)\n");
 		return ret;
 	}
-#if defined(CONFIG_MACH_M3_JPN_DCM)
-	ret = gpio_request(GPIO_ISP_CORE_EN, "GPM1");
-#else
-	ret = gpio_request(GPIO_ISP_CORE_EN, "GPM0");
-#endif
+
+		ret = gpio_request(GPIO_ISP_CORE_EN, "GPM0");
 	if (ret) {
 		printk(KERN_ERR "fail to request gpio(CAM_SENSOR_CORE)\n");
 		return ret;
@@ -1100,7 +1614,7 @@
 	udelay(10);
 
 	/* CAM_ISP_CORE_1.2V */
-	ret = gpio_direction_output(GPIO_ISP_CORE_EN, 1);
+		ret = gpio_direction_output(GPIO_ISP_CORE_EN, 1);
 	CAM_CHECK_ERR_RET(ret, "output GPIO_ISP_CORE_EN");
 
 	regulator = regulator_get(NULL, "cam_isp_core_1.2v");
@@ -1195,7 +1709,7 @@
 
 	gpio_free(GPIO_CAM_VT_nSTBY);
 	gpio_free(GPIO_CAM_VT_nRST);
-	gpio_free(GPIO_ISP_CORE_EN);
+		gpio_free(GPIO_ISP_CORE_EN);
 	gpio_free(GPIO_ISP_RESET);
 
 	return ret;
@@ -1218,11 +1732,7 @@
 		printk(KERN_ERR "faile to request gpio(GPIO_CAM_VGA_nRST)\n");
 		return ret;
 	}
-#if defined(CONFIG_MACH_M3_JPN_DCM)
-	ret = gpio_request(GPIO_ISP_CORE_EN, "GPM1");
-#else
-	ret = gpio_request(GPIO_ISP_CORE_EN, "GPM0");
-#endif
+		ret = gpio_request(GPIO_ISP_CORE_EN, "GPM0");
 	if (ret) {
 		printk(KERN_ERR "fail to request gpio(CAM_SENSOR_CORE)\n");
 		return ret;
@@ -1318,7 +1828,7 @@
 	udelay(5);
 
 	/* CAM_ISP_CORE_1.2V */
-	ret = gpio_direction_output(GPIO_ISP_CORE_EN, 0);
+		ret = gpio_direction_output(GPIO_ISP_CORE_EN, 0);
 	CAM_CHECK_ERR(ret, "output ISP_CORE");
 
 	regulator = regulator_get(NULL, "cam_isp_core_1.2v");
@@ -1439,11 +1949,7 @@
 
 	printk(KERN_DEBUG "%s: in\n", __func__);
 
-#if defined(CONFIG_MACH_M3_JPN_DCM)
-	ret = gpio_request(GPIO_ISP_CORE_EN, "GPM1");
-#else
 	ret = gpio_request(GPIO_ISP_CORE_EN, "GPM0");
-#endif
 	if (ret) {
 		printk(KERN_ERR "faile to request gpio(GPIO_ISP_CORE_EN)\n");
 		return ret;
@@ -1517,7 +2023,7 @@
 	CAM_CHECK_ERR_RET(ret, "output reset");
 	mdelay(4);
 
-	gpio_free(GPIO_ISP_CORE_EN);
+		gpio_free(GPIO_ISP_CORE_EN);
 	gpio_free(GPIO_ISP_RESET);
 
 	return ret;
@@ -1542,11 +2048,8 @@
 			return ret;
 		}
 	}
-#if defined(CONFIG_MACH_M3_JPN_DCM)
-	ret = gpio_request(GPIO_ISP_CORE_EN, "GPM1");
-#else
-	ret = gpio_request(GPIO_ISP_CORE_EN, "GPM0");
-#endif
+
+		ret = gpio_request(GPIO_ISP_CORE_EN, "GPM0");
 	if (ret) {
 		printk(KERN_ERR "faile to request gpio(GPIO_ISP_CORE_EN)\n");
 		return ret;
@@ -1637,7 +2140,7 @@
 	CAM_CHECK_ERR(ret, "disable, cam_isp_1.2v");
 
 	/* CAM_ISP_CORE_1.2V */
-	ret = gpio_direction_output(GPIO_ISP_CORE_EN, 0);
+		ret = gpio_direction_output(GPIO_ISP_CORE_EN, 0);
 	CAM_CHECK_ERR(ret, "output ISP_CORE");
 
 	if (system_rev > 0) {
@@ -1653,7 +2156,7 @@
 		gpio_free(GPIO_SAMBAZ_RESET);
 	}
 
-	gpio_free(GPIO_ISP_CORE_EN);
+		gpio_free(GPIO_ISP_CORE_EN);
 	gpio_free(GPIO_ISP_RESET);
 
 	return ret;
@@ -1958,17 +2461,257 @@
 
 	atomic_set(&flash_status, onoff);
 
-out:
-	mutex_unlock(&flash_lock);
-	return 0;
+out:
+	mutex_unlock(&flash_lock);
+	return 0;
+}
+
+static int isx012_is_flash_on(void)
+{
+	return atomic_read(&flash_status);
+}
+
+#ifdef CONFIG_MACH_KONA
+static int isx012_power_on(void)
+{
+	struct regulator *regulator;
+	int ret = 0;
+
+	printk(KERN_DEBUG "[ISX012] power on\n");
+
+	ret = gpio_request(GPIO_5M_nSTBY, "GPJ0");
+	if (unlikely(ret)) {
+		printk(KERN_ERR "error: request 5M_nSTBY\n");
+		return ret;
+	}
+	ret = gpio_request(GPIO_5M_nRST, "GPL1");
+	if (unlikely(ret)) {
+		printk(KERN_ERR "error: request 5M_nRST\n");
+		return ret;
+	}
+#if 0
+	ret = gpio_request(GPIO_CAM_EN2, "GPJ0");
+	if (unlikely(ret)) {
+		printk(KERN_ERR "error: request CAM_EN2\n");
+		return ret;
+	}
+#endif
+	ret = gpio_request(GPIO_VT_CAM_nSTBY, "GPF2");
+	if (unlikely(ret)) {
+		printk(KERN_ERR "error: request VT_CAM_nSTBY\n");
+		return ret;
+	}
+
+	ret = gpio_request(GPIO_VT_CAM_nRST, "GPJ1");
+	if (unlikely(ret)) {
+		printk(KERN_ERR "error: request VT_CAM_nRST\n");
+		return ret;
+	}
+
+	/* 5M_CORE_1.2V */
+	regulator = regulator_get(NULL, "3mp_core_1.2v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	ret = regulator_enable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR_RET(ret, "3mp_core_1.2v");
+	udelay(10);
+
+	/* CAM_IO_1.8V */
+	regulator = regulator_get(NULL, "cam_io_1.8v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	ret = regulator_enable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR_RET(ret, "cam_io_1.8v");
+	udelay(10);
+
+	/* CAM_A2.8V */
+#if 1
+	regulator = regulator_get(NULL, "cam_a2.8v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	ret = regulator_enable(regulator);
+	regulator_put(regulator);
+#else
+	ret = gpio_direction_output(GPIO_CAM_EN2, 1);
+#endif
+	CAM_CHECK_ERR_RET(ret, "CAM_A2.8V");
+	udelay(10);
+
+	/* VT_CORE_1.8V */
+	regulator = regulator_get(NULL, "vt_core_1.8v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	ret = regulator_enable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR_RET(ret, "vt_core_1.8v");
+	udelay(300); /* fix me. 300 is too big */
+
+	/* VT enable */
+	ret = gpio_direction_output(GPIO_VT_CAM_nSTBY, 1);
+	CAM_CHECK_ERR(ret, "VT_CAM_nSTBY");
+
+	/* CAM_MCLK */
+	/*s5p_gpio_set_drvstr(GPIO_CAM_MCLK, S5P_GPIO_DRVSTR_LV2);*/
+	ret = s3c_gpio_cfgpin(GPIO_CAM_MCLK, S3C_GPIO_SFN(2));
+	CAM_CHECK_ERR_RET(ret, "cfg mclk");
+	s3c_gpio_setpull(GPIO_CAM_MCLK, S3C_GPIO_PULL_NONE);
+	usleep_range(11000, 12000); /* fix me later */
+
+	/* VT Reset */
+	ret = gpio_direction_output(GPIO_VT_CAM_nRST, 1);
+	CAM_CHECK_ERR(ret, "VT_CAM_nRST");
+	usleep_range(1100, 1200);
+
+	/* VT disable */
+	ret = gpio_direction_output(GPIO_VT_CAM_nSTBY, 0);
+	CAM_CHECK_ERR(ret, "VT_CAM_nSTBY off");
+	udelay(20);
+
+	/* 5M Reset */
+	ret = gpio_direction_output(GPIO_5M_nRST, 1);
+	CAM_CHECK_ERR_RET(ret, "5M_nRST");
+	udelay(10);
+
+	/* 5MP_AF_2.8V */
+	regulator = regulator_get(NULL, "3mp_af_2.8v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	ret = regulator_enable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR_RET(ret, "3mp_af_2.8v");
+	usleep_range(6000, 6500);
+
+	gpio_free(GPIO_5M_nSTBY);
+	gpio_free(GPIO_5M_nRST);
+#if 0
+	gpio_free(GPIO_CAM_EN2);
+#endif
+	gpio_free(GPIO_VT_CAM_nSTBY);
+	gpio_free(GPIO_VT_CAM_nRST);
+
+	return ret;
+}
+
+static int isx012_power_down(void)
+{
+	struct regulator *regulator;
+	int ret = 0;
+
+	printk(KERN_DEBUG "[ISX012] power down\n");
+
+	ret = gpio_request(GPIO_5M_nSTBY, "GPJ0");
+	if (unlikely(ret)) {
+		printk(KERN_ERR "error: request 3M_nSTBY\n");
+		return ret;
+	}
+	ret = gpio_request(GPIO_5M_nRST, "GPL1");
+	if (unlikely(ret)) {
+		printk(KERN_ERR "error: request 3M_nRST\n");
+		return ret;
+	}
+#if 0
+	ret = gpio_request(GPIO_CAM_EN2, "GPJ0");
+	if (unlikely(ret)) {
+		printk(KERN_ERR "error: request CAM_EN2\n");
+		return ret;
+	}
+#endif
+	ret = gpio_request(GPIO_VT_CAM_nRST, "GPJ1");
+	if (unlikely(ret)) {
+		printk(KERN_ERR "error: request VT_CAM_nRST\n");
+		return ret;
+	}
+
+	/* 5MP_AF_2.8V */
+	regulator = regulator_get(NULL, "3mp_af_2.8v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	if (regulator_is_enabled(regulator))
+		ret = regulator_force_disable(regulator);
+	CAM_CHECK_ERR_RET(ret, "3mp_af_2.8v");
+	udelay(10);
+
+	/* VT Reset */
+	ret = gpio_direction_output(GPIO_VT_CAM_nRST, 0);
+	CAM_CHECK_ERR(ret, "VT_CAM_nRST");
+	udelay(10);
+
+	/* 5M_nSTBY */
+	ret = gpio_direction_output(GPIO_5M_nSTBY, 0);
+	CAM_CHECK_ERR(ret, "5M_nSTBY");
+	udelay(10);
+
+	/* Check delay */
+
+	/* 5M_nRST */
+	ret = gpio_direction_output(GPIO_5M_nRST, 0);
+	CAM_CHECK_ERR(ret, "5M_nRST");
+	udelay(50);
+
+	/* CAM_MCLK */
+	ret = s3c_gpio_cfgpin(GPIO_CAM_MCLK, S3C_GPIO_INPUT);
+	s3c_gpio_setpull(GPIO_CAM_MCLK, S3C_GPIO_PULL_DOWN);
+	CAM_CHECK_ERR(ret, "cfg mclk");
+	udelay(10);
+
+	/* VT_CORE_1.8V */
+	regulator = regulator_get(NULL, "vt_core_1.8v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	if (regulator_is_enabled(regulator))
+		ret = regulator_force_disable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR(ret, "vt_core_1.8v");
+	udelay(5);
+
+
+	/* CAM_A2.8V */
+#if 1
+	regulator = regulator_get(NULL, "cam_a2.8v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	if (regulator_is_enabled(regulator))
+		ret = regulator_force_disable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR(ret, "cam_a2.8v");
+#else
+	ret = gpio_direction_output(GPIO_CAM_EN2, 0);
+#endif
+	CAM_CHECK_ERR_RET(ret, "CAM_A2.8V");
+	udelay(5);
+
+	/* CAM_IO_1.8V */
+	regulator = regulator_get(NULL, "cam_io_1.8v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	if (regulator_is_enabled(regulator))
+		ret = regulator_force_disable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR(ret, "cam_io_1.8v");
+	udelay(5);
+
+	/* 5MP_CORE_1.2V */
+	regulator = regulator_get(NULL, "3mp_core_1.2v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	if (regulator_is_enabled(regulator))
+		ret = regulator_force_disable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR(ret, "3mp_core_1.2v");
+
+	gpio_free(GPIO_5M_nSTBY);
+	gpio_free(GPIO_5M_nRST);
+#if 0
+	gpio_free(GPIO_CAM_EN2);
+#endif
+	gpio_free(GPIO_VT_CAM_nRST);
+	return ret;
 }
 
-static int isx012_is_flash_on(void)
-{
-	return atomic_read(&flash_status);
-}
+#else /* ! CONFIG_MACH_KONA */
 
-/* Power up/down func for P4C, P2. */
 static int isx012_power_on(void)
 {
 	struct regulator *regulator;
@@ -2125,6 +2868,7 @@
 
 	return ret;
 }
+#endif /* CONFIG_MACH_KONA */
 
 static int isx012_power(int enable)
 {
@@ -2773,6 +3517,294 @@
 };
 #endif /* #ifdef CONFIG_VIDEO_S5K5CCGX_COMMON */
 
+#ifdef CONFIG_VIDEO_SR130PC20
+static int sr130pc20_get_i2c_busnum(void)
+{
+	return 0;
+}
+
+static int sr130pc20_flash_en(u32 mode, u32 onoff)
+{
+	pr_info("[SR130PC20] not supported!\n");
+	return 0;
+}
+
+static int sr130pc20_is_flash_on(void)
+{
+	pr_info("[SR130PC20] not supported!\n");
+	return 0;
+}
+
+static int sr130pc20_power_on(void)
+{
+	struct regulator *regulator;
+	int ret = 0;
+
+	printk(KERN_DEBUG "[SR130PC20] power on\n");
+#if 0
+	ret = gpio_request(GPIO_CAM_EN2, "GPJ0");
+	if (unlikely(ret)) {
+		printk(KERN_ERR "error: request CAM_EN2\n");
+		return ret;
+	}
+#endif
+	ret = gpio_request(GPIO_VT_CAM_nSTBY, "GPF2");
+	if (unlikely(ret)) {
+		printk(KERN_ERR "error: request VT_CAM_nSTBY\n");
+		return ret;
+	}
+
+	ret = gpio_request(GPIO_VT_CAM_nRST, "GPJ1");
+	if (unlikely(ret)) {
+		printk(KERN_ERR "error: request VT_CAM_nRST\n");
+		return ret;
+	}
+
+	/* 5M_CORE_1.2V */
+	regulator = regulator_get(NULL, "3mp_core_1.2v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	ret = regulator_enable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR_RET(ret, "3mp_core_1.2v");
+	udelay(10);
+
+	/* CAM_IO_1.8V */
+	regulator = regulator_get(NULL, "cam_io_1.8v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	ret = regulator_enable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR_RET(ret, "cam_io_1.8v");
+	udelay(10);
+
+	/* CAM_A2.8V */
+#if 1
+	regulator = regulator_get(NULL, "cam_a2.8v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	ret = regulator_enable(regulator);
+	regulator_put(regulator);
+#else
+	ret = gpio_direction_output(GPIO_CAM_EN2, 1);
+#endif
+	CAM_CHECK_ERR_RET(ret, "CAM_A2.8V");
+	udelay(10);
+
+	/* VT_CORE_1.8V */
+	regulator = regulator_get(NULL, "vt_core_1.8v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	ret = regulator_enable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR_RET(ret, "vt_core_1.8v");
+	udelay(300); /* fix me. 300 is too big */
+
+	/* VT enable */
+	ret = gpio_direction_output(GPIO_VT_CAM_nSTBY, 1);
+	CAM_CHECK_ERR(ret, "VT_CAM_nSTBY");
+	udelay(20); /* fix me. Delete */
+
+	/* CAM_MCLK */
+	/*s5p_gpio_set_drvstr(GPIO_VTCAM_MCLK, S5P_GPIO_DRVSTR_LV2);*/
+	ret = s3c_gpio_cfgpin(GPIO_VTCAM_MCLK, S3C_GPIO_SFN(3));
+	s3c_gpio_setpull(GPIO_VTCAM_MCLK, S3C_GPIO_PULL_NONE);
+	CAM_CHECK_ERR_RET(ret, "cfg mclk");
+	usleep_range(11000, 12000); /* fix me later */
+
+	/* VT Reset */
+	ret = gpio_direction_output(GPIO_VT_CAM_nRST, 1);
+	CAM_CHECK_ERR(ret, "VT_CAM_nRST");
+	usleep_range(1100, 1200);
+
+#if 0
+	gpio_free(GPIO_CAM_EN2);
+#endif
+	gpio_free(GPIO_VT_CAM_nSTBY);
+	gpio_free(GPIO_VT_CAM_nRST);
+	return ret;
+}
+
+static int sr130pc20_power_down(void)
+{
+	struct regulator *regulator;
+	int ret = 0;
+
+	printk(KERN_DEBUG "[SR130PC20] power down\n");
+
+#if 0
+	ret = gpio_request(GPIO_CAM_EN2, "GPJ0");
+	if (unlikely(ret)) {
+		printk(KERN_ERR "error: request CAM_EN2\n");
+		return ret;
+	}
+#endif
+	ret = gpio_request(GPIO_VT_CAM_nSTBY, "GPF2");
+	if (unlikely(ret)) {
+		printk(KERN_ERR "error: request VT_CAM_nSTBY\n");
+		return ret;
+	}
+
+	ret = gpio_request(GPIO_VT_CAM_nRST, "GPJ1");
+	if (unlikely(ret)) {
+		printk(KERN_ERR "error: request VT_CAM_nRST\n");
+		return ret;
+	}
+
+	/* VT Reset */
+	ret = gpio_direction_output(GPIO_VT_CAM_nRST, 0);
+	CAM_CHECK_ERR(ret, "VT_CAM_nRST");
+	usleep_range(1000, 1100);
+
+	/* CAM_MCLK */
+	ret = s3c_gpio_cfgpin(GPIO_VTCAM_MCLK, S3C_GPIO_INPUT);
+	s3c_gpio_setpull(GPIO_VTCAM_MCLK, S3C_GPIO_PULL_DOWN);
+	CAM_CHECK_ERR(ret, "cfg mclk");
+	udelay(50);
+
+	/* VT disable */
+	ret = gpio_direction_output(GPIO_VT_CAM_nSTBY, 0);
+	CAM_CHECK_ERR(ret, "VT_CAM_nSTBY");
+
+	/* VT_CORE_1.8V */
+	regulator = regulator_get(NULL, "vt_core_1.8v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	if (regulator_is_enabled(regulator))
+		ret = regulator_force_disable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR(ret, "vt_core_1.8v");
+	udelay(5);
+
+	/* CAM_A2.8V */
+#if 1
+	regulator = regulator_get(NULL, "cam_a2.8v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	if (regulator_is_enabled(regulator))
+		ret = regulator_force_disable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR(ret, "cam_a2.8v");
+#else
+	ret = gpio_direction_output(GPIO_CAM_EN2, 0);
+#endif
+	CAM_CHECK_ERR_RET(ret, "CAM_A2.8V");
+	udelay(5);
+
+	/* CAM_IO_1.8V */
+	regulator = regulator_get(NULL, "cam_io_1.8v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	if (regulator_is_enabled(regulator))
+		ret = regulator_force_disable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR(ret, "cam_io_1.8v");
+	udelay(5);
+
+	/* 5MP_CORE_1.2V */
+	regulator = regulator_get(NULL, "3mp_core_1.2v");
+	if (IS_ERR(regulator))
+		return -ENODEV;
+	if (regulator_is_enabled(regulator))
+		ret = regulator_force_disable(regulator);
+	regulator_put(regulator);
+	CAM_CHECK_ERR(ret, "3mp_core_1.2v");
+
+#if 0
+	gpio_free(GPIO_CAM_EN2);
+#endif
+	gpio_free(GPIO_VT_CAM_nSTBY);
+	gpio_free(GPIO_VT_CAM_nRST);
+	return ret;
+}
+
+static int sr130pc20_power(int enable)
+{
+	int ret = 0;
+
+	if (enable)
+		ret = sr130pc20_power_on();
+	else
+		ret = sr130pc20_power_down();
+
+	if (unlikely(ret)) {
+		pr_err("%s: power-on/down failed\n", __func__);
+		return ret;
+	}
+
+	ret = s3c_csis_power(enable);
+	if (unlikely(ret)) {
+		pr_err("%s: csis power-on failed\n", __func__);
+		return ret;
+	}
+
+	return ret;
+}
+
+static int sr130pc20_enable_standby(bool enable)
+{
+	pr_info("[SR130PC20] not supported!\n");
+	return 0;
+}
+
+static const char *sr130pc20_get_clk_name(void)
+{
+	return "sclk_cam0";
+}
+
+static struct sr130pc20_platform_data sr130pc20_plat = {
+	.default_width = 640,
+	.default_height = 480,
+	.pixelformat = V4L2_PIX_FMT_UYVY,
+	.freq = 24000000,
+	.is_mipi = 1,
+	.streamoff_delay = SR130PC20_STREAMOFF_DELAY,
+	.flash_en = sr130pc20_flash_en,
+	.is_flash_on = sr130pc20_is_flash_on,
+	.stby_on = sr130pc20_enable_standby,
+	.dbg_level = CAMDBG_LEVEL_DEFAULT,
+};
+
+static struct i2c_board_info  sr130pc20_i2c_info = {
+	I2C_BOARD_INFO("SR130PC20", 0x40>>1),
+	.platform_data = &sr130pc20_plat,
+};
+
+static struct s3c_platform_camera sr130pc20 = {
+	.id		= CAMERA_CSI_D,
+	.get_clk_name	= sr130pc20_get_clk_name,
+	.get_i2c_busnum	= sr130pc20_get_i2c_busnum,
+	.cam_power	= sr130pc20_power, /*smdkv310_mipi_cam0_reset,*/
+	.type		= CAM_TYPE_MIPI,
+	.fmt		= ITU_601_YCBCR422_8BIT, /*MIPI_CSI_YCBCR422_8BIT*/
+	.order422	= CAM_ORDER422_8BIT_CBYCRY,
+	.info		= &sr130pc20_i2c_info,
+	.pixelformat	= V4L2_PIX_FMT_UYVY,
+	.srclk_name	= "xusbxti", /* "mout_mpll" */
+	.clk_rate	= 24000000, /* 48000000 */
+	.line_length	= 640,
+	.width		= 640,
+	.height		= 480,
+	.window		= {
+		.left	= 0,
+		.top	= 0,
+		.width	= 640,
+		.height	= 480,
+	},
+
+	.mipi_lanes	= 1,
+	.mipi_settle	= 6,
+	.mipi_align	= 32,
+
+	/* Polarity */
+	.inv_pclk	= 0,
+	.inv_vsync	= 1,
+	.inv_href	= 0,
+	.inv_hsync	= 0,
+	.reset_camera	= 0,
+	.initialized	= 0,
+};
+#endif /* CONFIG_VIDEO_SR130PC20*/
 
 #ifdef CONFIG_VIDEO_SR200PC20M
 static int sr200pc20m_get_i2c_busnum(void)
@@ -2795,11 +3827,7 @@
 		printk(KERN_ERR "faile to request gpio(GPIO_CAM_VGA_nRST)\n");
 		return ret;
 	}
-#if defined(CONFIG_MACH_M3_JPN_DCM)
-	ret = gpio_request(GPIO_ISP_CORE_EN, "GPM1");
-#else
 	ret = gpio_request(GPIO_ISP_CORE_EN, "GPM0");
-#endif
 	if (ret) {
 		printk(KERN_ERR "fail to request gpio(CAM_SENSOR_CORE)\n");
 		return ret;
@@ -2823,7 +3851,7 @@
 	CAM_CHECK_ERR(ret, "output reset");
 
 	/* CAM_ISP_CORE_1.2V */
-	ret = gpio_direction_output(GPIO_ISP_CORE_EN, 1);
+		ret = gpio_direction_output(GPIO_ISP_CORE_EN, 1);
 	CAM_CHECK_ERR_RET(ret, "output GPIO_ISP_CORE_EN");
 
 	regulator = regulator_get(NULL, "cam_isp_core_1.2v");
@@ -2894,7 +3922,7 @@
 
 	gpio_free(GPIO_CAM_VT_nSTBY);
 	gpio_free(GPIO_CAM_VT_nRST);
-	gpio_free(GPIO_ISP_CORE_EN);
+		gpio_free(GPIO_ISP_CORE_EN);
 	gpio_free(GPIO_ISP_RESET);
 
 	return ret;
@@ -2917,11 +3945,7 @@
 		printk(KERN_ERR "faile to request gpio(GPIO_CAM_VGA_nRST)\n");
 		return ret;
 	}
-#if defined(CONFIG_MACH_M3_JPN_DCM)
-	ret = gpio_request(GPIO_ISP_CORE_EN, "GPM1");
-#else
 	ret = gpio_request(GPIO_ISP_CORE_EN, "GPM0");
-#endif
 	if (ret) {
 		printk(KERN_ERR "fail to request gpio(CAM_SENSOR_CORE)\n");
 		return ret;
@@ -2962,7 +3986,7 @@
 	udelay(5);
 
 	/* CAM_ISP_CORE_1.2V */
-	ret = gpio_direction_output(GPIO_ISP_CORE_EN, 0);
+		ret = gpio_direction_output(GPIO_ISP_CORE_EN, 0);
 	CAM_CHECK_ERR(ret, "output ISP_CORE");
 
 	regulator = regulator_get(NULL, "cam_isp_core_1.2v");
@@ -3005,7 +4029,7 @@
 
 	gpio_free(GPIO_CAM_VT_nSTBY);
 	gpio_free(GPIO_CAM_VT_nRST);
-	gpio_free(GPIO_ISP_CORE_EN);
+		gpio_free(GPIO_ISP_CORE_EN);
 	gpio_free(GPIO_ISP_RESET);
 
 	return ret;
@@ -3584,7 +4608,9 @@
 #endif
 #endif /* CONFIG_VIDEO_S5P_FIMC */
 
-#if defined(CONFIG_MACH_P4NOTE) && defined(CONFIG_VIDEO_ISX012)
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
+#if defined(CONFIG_VIDEO_ISX012)
 	px_cam_cfg_init();
 #endif
+#endif
 }
diff -Naur ./arch/arm/mach-exynos/midas-gpio.c ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-gpio.c
--- ./arch/arm/mach-exynos/midas-gpio.c	2012-12-08 20:40:46.153821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-gpio.c	2012-11-22 09:13:15.000000000 +0100
@@ -103,10 +103,10 @@
 	{EXYNOS4_GPA0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPA0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPA0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
-	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
-	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
 	{EXYNOS4_GPA0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 
 	{EXYNOS4_GPA1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPA1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
@@ -772,10 +772,10 @@
 	{EXYNOS4_GPA0(1),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPA0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPA0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
-	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
-	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
 	{EXYNOS4_GPA0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 
 	{EXYNOS4_GPA1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPA1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
@@ -1201,10 +1201,10 @@
 	{EXYNOS4_GPA0(1),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPA0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPA0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
-	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
-	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
 	{EXYNOS4_GPA0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 
 	{EXYNOS4_GPA1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPA1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
@@ -1565,10 +1565,10 @@
 	{EXYNOS4_GPA0(1),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* BT_UART_TXD */
 	{EXYNOS4_GPA0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* BT_UART_CTS */
 	{EXYNOS4_GPA0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /* BT_UART_RTS */
-	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* GPS_UART_RXD */
-	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* GPS_UART_TXD */
-	{EXYNOS4_GPA0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* GPS_UART_CTS */
-	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /* GPS_UART_RTS */
+	{EXYNOS4_GPA0(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /*GPS_RXD*/
+	{EXYNOS4_GPA0(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /*GPS_TXD*/
+	{EXYNOS4_GPA0(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /*GPS_CTS*/
+	{EXYNOS4_GPA0(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /*GPS_RTS*/
 
 	{EXYNOS4_GPA1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* AP_RXD */
 	{EXYNOS4_GPA1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* AP_TXD */
@@ -2021,8 +2021,8 @@
 	{EXYNOS4_GPA0(1), S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPA0(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPA0(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
-	{EXYNOS4_GPA0(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-	{EXYNOS4_GPA0(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPA0(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPA0(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
 	{EXYNOS4_GPA0(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPA0(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 
@@ -2254,8 +2254,11 @@
 	{EXYNOS4212_GPM0(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4212_GPM0(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4212_GPM0(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#if defined(CONFIG_MACH_M0_DUOSCTC)
+	{EXYNOS4212_GPM0(7), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_DOWN}, /*SIMSEL*/
+#else
 	{EXYNOS4212_GPM0(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
-
+#endif
 	{EXYNOS4212_GPM1(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4212_GPM1(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4212_GPM1(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* NC */
@@ -2337,8 +2340,8 @@
 	{EXYNOS4_GPA0(1), S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPA0(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPA0(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
-	{EXYNOS4_GPA0(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-	{EXYNOS4_GPA0(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPA0(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPA0(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
 	{EXYNOS4_GPA0(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPA0(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 
diff -Naur ./arch/arm/mach-exynos/midas-lcd.c ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-lcd.c
--- ./arch/arm/mach-exynos/midas-lcd.c	2012-12-08 20:40:46.153821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-lcd.c	2012-11-22 09:13:15.000000000 +0100
@@ -360,8 +360,13 @@
 	.p_width = 217,
 	.p_height = 135,
 	.bpp = 24,
-
+#if defined(CONFIG_MACH_P4NOTELTE_USA_SPR) || \
+	defined(CONFIG_MACH_P4NOTELTE_USA_VZW) || \
+	defined(CONFIG_MACH_P4NOTELTE_USA_USCC)
+	.freq = 55,
+#else
 	.freq = 60,
+#endif
 	.timing = {
 		.h_fp = 18,
 		.h_bp = 36,
@@ -475,7 +480,7 @@
 	.bpp = 24,
 
 	.freq = 60,
-#if defined(CONFIG_S6E8AA0_AMS480GYXX)
+#if defined(CONFIG_S6E8AA0_AMS480GYXX) || defined(CONFIG_S6E8AA0_AMS465XX)
 	.freq_limit = 40,
 #endif
 
@@ -515,10 +520,10 @@
 	.name = "ea8061",
 	.height = 1280,
 	.width = 720,
-	.p_width = 74,
-	.p_height = 131,
+	.p_width = 69,
+	.p_height = 123,
 	.bpp = 24,
-	.freq = 60,
+	.freq = 58,
 
 	/* minumun value is 0 except for wr_act time. */
 	.cpu_timing = {
@@ -530,7 +535,7 @@
 
 	.timing = {
 		.h_fp = 52,
-		.h_bp = 96,
+		.h_bp = 121,
 		.h_sw = 4,
 		.v_fp = 13,
 		.v_fpe = 1,
@@ -556,8 +561,8 @@
 	.name = "s6evr02",
 	.height = 1280,
 	.width = 720,
-	.p_width = 74,
-	.p_height = 131,
+	.p_width = 69,
+	.p_height = 123,
 	.bpp = 24,
 	.freq = 58,
 	.freq_limit = 41,
@@ -595,10 +600,10 @@
 	.name = "ea8061",
 	.height = 1280,
 	.width = 720,
-	.p_width = 64,
-	.p_height = 106,
+	.p_width = 69,
+	.p_height = 123,
 	.bpp = 24,
-	.freq = 60,
+	.freq = 58,
 
 	/* minumun value is 0 except for wr_act time. */
 	.cpu_timing = {
@@ -610,7 +615,7 @@
 
 	.timing = {
 		.h_fp = 52,
-		.h_bp = 96,
+		.h_bp = 121,
 		.h_sw = 4,
 		.v_fp = 13,
 		.v_fpe = 1,
@@ -723,6 +728,7 @@
 	.bpp = 24,
 
 	.freq = 60,
+	.freq_limit = 51,
 
 	/* minumun value is 0 except for wr_act time. */
 	.cpu_timing = {
@@ -733,15 +739,15 @@
 	},
 
 	.timing = {
-		.h_fp = 50,
-		.h_bp = 15,
+		.h_fp = 60,
+		.h_bp = 60,
 		.h_sw = 3,
-		.v_fp = 3,
+		.v_fp = 36,
 		.v_fpe = 1,
 		.v_bp = 2,
 		.v_bpe = 1,
 		.v_sw = 2,
-		.cmd_allow_len = 11,	 /* v_fp=stable_vfp + cmd_allow_len */
+		.cmd_allow_len = 11,	 /* v_fp=stable_vfp + cmd_allow_len+ mask_len*/
 		.stable_vfp = 2,
 	},
 
@@ -781,8 +787,9 @@
 		.v_bp = 12,
 		.v_bpe = 1,
 		.v_sw = 4,
-		.cmd_allow_len = 6,	 /* v_fp=stable_vfp + cmd_allow_len */
-		.stable_vfp = 2,
+		.cmd_allow_len = 7,
+		/* v_fp=stable_vfp + cmd_allow_len */
+		.stable_vfp = 1,
 	},
 	.polarity = {
 		.rise_vclk = 1,
@@ -792,8 +799,52 @@
 	},
 };
 #endif
+
+#ifdef CONFIG_FB_S5P_NT71391
+/* for Geminus based on MIPI-DSI interface */
+static struct s3cfb_lcd nt71391 = {
+	.name = "nt71391",
+	.width = 1280,
+	.height = 800,
+	.p_width = 172,
+	.p_height = 108,
+	.bpp = 24,
+	.freq = 60,
+
+	/* minumun value is 0 except for wr_act time. */
+	.cpu_timing = {
+		.cs_setup = 0,
+		.wr_setup = 0,
+		.wr_act = 1,
+		.wr_hold = 0,
+	},
+
+	.timing = {
+		.h_fp = 17,
+		.h_bp = 17,
+		.h_sw = 18,
+		.v_fp = 8, /* spec = 3 */
+		.v_fpe = 1,
+		.v_bp = 3,
+		.v_bpe = 1,
+		.v_sw = 6,
+		/* v_fp=stable_vfp + cmd_allow_len + mask_len*/
+		.cmd_allow_len = 7,
+		.stable_vfp = 1,
+	},
+
+	.polarity = {
+		.rise_vclk = 1,
+		.inv_hsync = 0,
+		.inv_vsync = 0,
+		.inv_vden = 0,
+	},
+};
+#endif
+
 static int reset_lcd(void)
 {
+#if defined(GPIO_MLCD_RST)
 	int err;
 
 	err = gpio_request(GPIO_MLCD_RST, "MLCD_RST");
@@ -810,18 +861,23 @@
 	gpio_set_value(GPIO_MLCD_RST, 1);
 	usleep_range(5000, 5000);
 	gpio_free(GPIO_MLCD_RST);
+#endif
 	return 0;
 }
 
 static void lcd_cfg_gpio(void)
 {
+#if defined(GPIO_MLCD_RST)
 	/* MLCD_RST */
 	s3c_gpio_cfgpin(GPIO_MLCD_RST, S3C_GPIO_OUTPUT);
 	s3c_gpio_setpull(GPIO_MLCD_RST, S3C_GPIO_PULL_NONE);
+#endif
 
+#if defined(GPIO_LCD_22V_EN_00)
 	/* LCD_EN */
 	s3c_gpio_cfgpin(GPIO_LCD_22V_EN_00, S3C_GPIO_OUTPUT);
 	s3c_gpio_setpull(GPIO_LCD_22V_EN_00, S3C_GPIO_PULL_NONE);
+#endif
 
 	return;
 }
@@ -884,7 +940,7 @@
 return 0;
 
 }
-#else
+#elif defined(CONFIG_S6E8AA0_AMS465XX)
 static int lcd_power_on(void *ld, int enable)
 {
 	struct regulator *regulator;
@@ -899,15 +955,108 @@
 		return -EPERM;
 	}
 
+#if defined(GPIO_LCD_22V_EN_00)
 	err = gpio_request(GPIO_LCD_22V_EN_00, "LCD_EN");
 	if (err) {
 		printk(KERN_ERR "failed to request GPM4[4] for "
 			"LCD_2.2V_EN control\n");
 		return -EPERM;
 	}
+#endif
+	if (enable) {
+#if defined(GPIO_LCD_22V_EN_00)
+		gpio_set_value(GPIO_LCD_22V_EN_00, GPIO_LEVEL_HIGH);
+#endif
+		regulator = regulator_get(NULL, "vlcd_3.1v");
+
+		if (IS_ERR(regulator))
+			goto out;
+		regulator_enable(regulator);
+		regulator_put(regulator);
+	} else {
+		regulator = regulator_get(NULL, "vlcd_3.1v");
+
+		if (IS_ERR(regulator))
+			goto out;
+		if (regulator_is_enabled(regulator))
+			regulator_force_disable(regulator);
+		regulator_put(regulator);
+
+#if defined(GPIO_LCD_22V_EN_00)
+		gpio_set_value(GPIO_LCD_22V_EN_00, GPIO_LEVEL_LOW);
+#endif
+		gpio_set_value(GPIO_MLCD_RST, 0);
+	}
+
+out:
+/* Release GPIO */
+	gpio_free(GPIO_MLCD_RST);
+#if defined(GPIO_LCD_22V_EN_00)
+	gpio_free(GPIO_LCD_22V_EN_00);
+#endif
+	return 0;
+}
+#elif defined(CONFIG_FB_S5P_NT71391)
+static int lcd_power_on(void *ld, int enable)
+{
+	int err;
+
+	printk(KERN_INFO "NT71391 %s : enable=%d\n", __func__, enable);
+
+	err = gpio_request(GPIO_LCD_EN, "LCD_EN");
+	if (err) {
+		printk(KERN_ERR "failed to request LCD_EN control\n");
+		return -EPERM;
+	}
+
+	if (enable)
+		gpio_set_value(GPIO_LCD_EN, GPIO_LEVEL_HIGH);
+	else
+		gpio_set_value(GPIO_LCD_EN, GPIO_LEVEL_LOW);
+
+	gpio_free(GPIO_LCD_EN);
+
+	return 0;
+}
+
+#ifdef CONFIG_FB_S5P_MDNIE
+static struct lcd_platform_data nt71391_platform_data = {
+};
+
+struct platform_device lcd_nt71391 = {
+	.name   = "nt71391",
+	.id	= -1,
+	.dev.platform_data = &nt71391_platform_data,
+};
+#endif
 
+#else
+static int lcd_power_on(void *ld, int enable)
+{
+	struct regulator *regulator;
+	int err;
+
+	printk(KERN_INFO "%s : enable=%d\n", __func__, enable);
+
+	err = gpio_request(GPIO_MLCD_RST, "MLCD_RST");
+	if (err) {
+		printk(KERN_ERR "failed to request GPY4[5] for "
+			"MLCD_RST control\n");
+		return -EPERM;
+	}
+
+#if defined(GPIO_LCD_22V_EN_00)
+	err = gpio_request(GPIO_LCD_22V_EN_00, "LCD_EN");
+	if (err) {
+		printk(KERN_ERR "failed to request GPM4[4] for "
+			"LCD_2.2V_EN control\n");
+		return -EPERM;
+	}
+#endif
 	if (enable) {
+#if defined(GPIO_LCD_22V_EN_00)
 		gpio_set_value(GPIO_LCD_22V_EN_00, GPIO_LEVEL_HIGH);
+#endif
 
 #if defined(CONFIG_MACH_T0)
 		regulator = regulator_get(NULL, "vcc_1.8v_lcd");
@@ -955,16 +1104,19 @@
 			regulator_force_disable(regulator);
 		regulator_put(regulator);
 #endif
+#if defined(GPIO_LCD_22V_EN_00)
 		gpio_set_value(GPIO_LCD_22V_EN_00, GPIO_LEVEL_LOW);
+#endif
 		gpio_set_value(GPIO_MLCD_RST, 0);
 	}
 
 out:
 /* Release GPIO */
 	gpio_free(GPIO_MLCD_RST);
+#if defined(GPIO_LCD_22V_EN_00)
 	gpio_free(GPIO_LCD_22V_EN_00);
-return 0;
-
+#endif
+	return 0;
 }
 #endif
 
@@ -1051,6 +1203,10 @@
 	dsim_lcd_info->lcd_panel_info = (void *)&s6d6aa1;
 #endif
 
+#if defined(CONFIG_FB_S5P_NT71391)
+	dsim_lcd_info->lcd_panel_info = (void *)&nt71391;
+#endif
+
 #if defined(CONFIG_MACH_T0) && defined(CONFIG_FB_S5P_S6EVR02) && defined(GPIO_OLED_ID)
 	if (!gpio_get_value(GPIO_OLED_ID)) {	/* for EA8061 DDI */
 		dsim_lcd_info->lcd_panel_info = (void *)&ea8061;
@@ -1068,9 +1224,14 @@
 #elif defined(CONFIG_FB_S5P_LMS501XX)
 	dsim_lcd_info->lcd_panel_info = (void *)&lms501xx;
 	dsim_pd->dsim_info->e_no_data_lane = DSIM_DATA_LANE_2;
-	/* 440Mbps */
+	/* 428Mbps */
 	dsim_pd->dsim_info->p = 3;
-	dsim_pd->dsim_info->m = 110;
+	dsim_pd->dsim_info->m = 107;
+	dsim_pd->dsim_info->s = 1;
+#elif defined(CONFIG_MACH_GC1_USA_VZW)
+	/* 480Mbps */
+	dsim_pd->dsim_info->p = 3;
+	dsim_pd->dsim_info->m = 120;
 	dsim_pd->dsim_info->s = 1;
 #else
 	/* 500Mbps */
@@ -1127,6 +1288,9 @@
 #if defined(CONFIG_FB_S5P_LMS501XX)
 	.lcd		= &lms501xx
 #endif
+#if defined(CONFIG_FB_S5P_NT71391)
+	.lcd		= &nt71391
+#endif
 };
 #endif
 
@@ -1136,6 +1300,9 @@
 #if defined(CONFIG_FB_S5P_S6C1372)
 	.lcd_pd		= &s6c1372_platform_data,
 #endif
+#if defined(CONFIG_FB_S5P_NT71391)
+	.lcd_pd		= &nt71391_platform_data,
+#endif
 };
 #endif
 
diff -Naur ./arch/arm/mach-exynos/midas-mhl.c ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-mhl.c
--- ./arch/arm/mach-exynos/midas-mhl.c	2012-12-08 20:40:46.153821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-mhl.c	2012-11-22 09:13:16.000000000 +0100
@@ -15,6 +15,10 @@
 #include "midas.h"
 #include <plat/udc-hs.h>
 
+#ifdef	CONFIG_MACH_M3_USA_TMO
+#define	CONFIG_USE_HPD_EN
+#endif
+
 /*Event of receiving*/
 #define PSY_BAT_NAME "battery"
 /*Event of sending*/
@@ -23,6 +27,7 @@
 #ifdef CONFIG_SAMSUNG_MHL
 static void sii9234_cfg_gpio(void)
 {
+	int ret;
 	printk(KERN_INFO "%s()\n", __func__);
 
 	/* AP_MHL_SDA */
@@ -38,7 +43,11 @@
 	irq_set_irq_type(MHL_WAKEUP_IRQ, IRQ_TYPE_EDGE_RISING);
 	s3c_gpio_setpull(GPIO_MHL_WAKE_UP, S3C_GPIO_PULL_DOWN);
 
-	gpio_request(GPIO_MHL_INT, "MHL_INT");
+	ret = gpio_request(GPIO_MHL_INT, "MHL_INT");
+	if (unlikely(ret)) {
+		pr_err("[ERROR] %s(): failed on gpio_request()!\n", __func__);
+		return;
+	}
 	s5p_register_gpio_interrupt(GPIO_MHL_INT);
 	s3c_gpio_setpull(GPIO_MHL_INT, S3C_GPIO_PULL_DOWN);
 	irq_set_irq_type(MHL_INT_IRQ, IRQ_TYPE_EDGE_RISING);
@@ -54,12 +63,19 @@
 
 #if !defined(CONFIG_MACH_C1_KOR_LGT) && !defined(CONFIG_SAMSUNG_MHL_9290)
 #if !defined(CONFIG_MACH_P4NOTE) && !defined(CONFIG_MACH_T0) && \
-	!defined(CONFIG_MACH_M3) && !defined(CONFIG_MACH_SLP_T0_LTE)
+	!defined(CONFIG_MACH_M3) && !defined(CONFIG_MACH_SLP_T0_LTE) && \
+	!defined(CONFIG_MACH_KONA)
 	s3c_gpio_cfgpin(GPIO_MHL_SEL, S3C_GPIO_OUTPUT);
 	s3c_gpio_setpull(GPIO_MHL_SEL, S3C_GPIO_PULL_NONE);
 	gpio_set_value(GPIO_MHL_SEL, GPIO_LEVEL_LOW);
 #endif
 #endif
+
+#ifdef	CONFIG_USE_HPD_EN
+	s3c_gpio_cfgpin(GPIO_HDMI_HPD_EN, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_HDMI_HPD_EN, S3C_GPIO_PULL_NONE);
+	gpio_set_value(GPIO_HDMI_HPD_EN, GPIO_LEVEL_LOW);
+#endif
 }
 
 static void sii9234_power_onoff(bool on)
@@ -75,6 +91,10 @@
 		s3c_gpio_setpull(GPIO_MHL_SCL_1_8V, S3C_GPIO_PULL_DOWN);
 		s3c_gpio_setpull(GPIO_MHL_SCL_1_8V, S3C_GPIO_PULL_NONE);
 
+#ifdef	CONFIG_USE_HPD_EN
+		gpio_set_value(GPIO_HDMI_HPD_EN, GPIO_LEVEL_HIGH);
+#endif
+
 		/* sii9234_unmaks_interrupt(); // - need to add */
 		/* VCC_SUB_2.0V is always on */
 	} else {
@@ -88,6 +108,10 @@
 		gpio_set_value(GPIO_HDMI_EN, GPIO_LEVEL_LOW);
 
 		gpio_set_value(GPIO_MHL_RST, GPIO_LEVEL_LOW);
+
+#ifdef	CONFIG_USE_HPD_EN
+		gpio_set_value(GPIO_HDMI_HPD_EN, GPIO_LEVEL_LOW);
+#endif
 	}
 }
 
@@ -181,7 +205,8 @@
 }
 
 #ifndef CONFIG_SAMSUNG_USE_11PIN_CONNECTOR
-#ifndef CONFIG_MACH_P4NOTE
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
+#else
 static void mhl_usb_switch_control(bool on)
 {
 	printk(KERN_INFO "%s() [MHL] USB path change : %s\n",
@@ -204,7 +229,7 @@
 static struct sii9234_platform_data sii9234_pdata = {
 	.init = sii9234_cfg_gpio,
 #if defined(CONFIG_SAMSUNG_USE_11PIN_CONNECTOR) || \
-		defined(CONFIG_MACH_P4NOTE)
+		defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
 	.mhl_sel = NULL,
 #else
 	.mhl_sel = mhl_usb_switch_control,
@@ -258,7 +283,8 @@
 	}
 #if defined(CONFIG_MACH_T0_EUR_OPEN) || defined(CONFIG_MACH_T0_CHN_OPEN)
 	sii9234_pdata.ddc_i2c_num = 6;
-#elif defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_T0)
+#elif defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_T0) \
+	 || defined(CONFIG_MACH_KONA)
 	sii9234_pdata.ddc_i2c_num = 5;
 #else
 	sii9234_pdata.ddc_i2c_num = (system_rev == 3 ? 16 : 5);
diff -Naur ./arch/arm/mach-exynos/midas-power.c ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-power.c
--- ./arch/arm/mach-exynos/midas-power.c	2012-12-08 20:40:46.153821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-power.c	2012-11-22 09:13:16.000000000 +0100
@@ -327,6 +327,10 @@
 static struct regulator_consumer_supply ldo13_supply[] = {
 	REGULATOR_SUPPLY("vusbhub_osc_1.8v", NULL),
 };
+#elif defined(CONFIG_MACH_M3_USA_TMO)
+static struct regulator_consumer_supply ldo13_supply[] = {
+	REGULATOR_SUPPLY("vcc_adc_1.8v", NULL),
+};
 #endif
 
 static struct regulator_consumer_supply ldo14_supply[] = {
@@ -445,6 +449,9 @@
 	defined(CONFIG_MACH_M0_DUOSCTC) || defined(CONFIG_MACH_M0_GRANDECTC)
 REGULATOR_INIT(ldo13, "VUSBHUB_OSC_1.8V", 1800000, 1800000, 0,
 	       REGULATOR_CHANGE_STATUS, 1);
+#elif defined(CONFIG_MACH_M3_USA_TMO)
+REGULATOR_INIT(ldo13, "VCC_ADC_1.8V", 1800000, 1800000, 0,
+	       REGULATOR_CHANGE_STATUS, 1);
 #endif
 REGULATOR_INIT(ldo14, "VABB2_1.95V", 1950000, 1950000, 1,
 	       REGULATOR_CHANGE_STATUS, 1);
@@ -516,12 +523,16 @@
 static struct regulator_init_data max77686_buck1_data = {
 	.constraints = {
 		.name = "vdd_mif range",
-		.min_uV = 600000,
+		.min_uV = 850000,
 #ifdef CONFIG_SLP
 		.max_uV = 1100000,
 #else
+#if defined(CONFIG_MACH_M3_JPN_DCM)
+		.max_uV = 1200000,
+#else
 		.max_uV = 1050000,
 #endif
+#endif
 		.always_on = 1,
 		.boot_on = 1,
 		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE,
@@ -533,7 +544,7 @@
 static struct regulator_init_data max77686_buck2_data = {
 	.constraints = {
 		.name = "vdd_arm range",
-		.min_uV = 600000,
+		.min_uV = 850000,
 		.max_uV = 1500000,
 		.apply_uV = 1,
 		.always_on = 1,
@@ -547,12 +558,20 @@
 static struct regulator_init_data max77686_buck3_data = {
 	.constraints = {
 		.name = "vdd_int range",
-		.min_uV = 600000,
+#if defined(CONFIG_MACH_M3_JPN_DCM)
+		.min_uV = 825000,
+#else
+		.min_uV = 850000,
+#endif
 #ifdef CONFIG_SLP
 		.max_uV = 1150000,
 #else
+#if defined(CONFIG_MACH_M3_JPN_DCM)
+		.max_uV = 1300000,
+#else
 		.max_uV = 1100000,
 #endif
+#endif
 		.always_on = 1,
 		.boot_on = 1,
 		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE,
@@ -564,11 +583,15 @@
 static struct regulator_init_data max77686_buck4_data = {
 	.constraints = {
 		.name = "vdd_g3d range",
-		.min_uV = 600000,
+		.min_uV = 850000,
 #ifdef CONFIG_SLP
 		.max_uV = 1100000,
 #else
-		.max_uV = 1400000,
+#if defined(CONFIG_MACH_M3_JPN_DCM)
+		.max_uV = 1200000,
+#else
+		.max_uV = 1075000,
+#endif
 #endif
 		.boot_on = 1,
 		.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE |
@@ -622,7 +645,9 @@
 	{MAX77686_LDO12, &ldo12_init_data,},
 #if defined(CONFIG_MACH_C1_KOR_SKT) || defined(CONFIG_MACH_C1_KOR_KT) || \
 	defined(CONFIG_MACH_C1_KOR_LGT) || defined(CONFIG_MACH_C1) || \
-	defined(CONFIG_MACH_M0_DUOSCTC) || defined(CONFIG_MACH_M0_GRANDECTC)
+	defined(CONFIG_MACH_M0_DUOSCTC) || \
+	defined(CONFIG_MACH_M0_GRANDECTC) || \
+	defined(CONFIG_MACH_M3_USA_TMO)
 	{MAX77686_LDO13, &ldo13_init_data,},
 #endif
 	{MAX77686_LDO14, &ldo14_init_data,},
@@ -645,7 +670,9 @@
 	[MAX77686_LDO12] = {MAX77686_LDO12, MAX77686_OPMODE_STANDBY},
 #if defined(CONFIG_MACH_C1_KOR_SKT) || defined(CONFIG_MACH_C1_KOR_KT) || \
 	defined(CONFIG_MACH_C1_KOR_LGT) || defined(CONFIG_MACH_C1) || \
-	defined(CONFIG_MACH_M0_DUOSCTC) || defined(CONFIG_MACH_M0_GRANDECTC)
+	defined(CONFIG_MACH_M0_DUOSCTC) || \
+	defined(CONFIG_MACH_M0_GRANDECTC) || \
+	defined(CONFIG_MACH_M3_USA_TMO)
 	[MAX77686_LDO13] = {MAX77686_LDO13, MAX77686_OPMODE_NORMAL},
 #endif
 	[MAX77686_LDO14] = {MAX77686_LDO14, MAX77686_OPMODE_STANDBY},
diff -Naur ./arch/arm/mach-exynos/midas-sensor.c ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-sensor.c
--- ./arch/arm/mach-exynos/midas-sensor.c	2012-12-08 20:40:46.153821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-sensor.c	2012-11-22 09:13:16.000000000 +0100
@@ -8,6 +8,12 @@
 #ifdef CONFIG_SENSORS_AK8963C
 #include <linux/sensor/ak8963.h>
 #endif
+#ifdef CONFIG_INPUT_MPU6050
+#include <linux/mpu6050_input.h>
+#endif
+#ifdef CONFIG_SENSORS_AK8963
+#include <linux/akm8963.h>
+#endif
 #include <linux/sensor/k3dh.h>
 #include <linux/sensor/gp2a.h>
 #include <linux/sensor/lsm330dlc_accel.h>
@@ -44,6 +50,16 @@
 };
 #endif
 
+#ifdef CONFIG_INPUT_MPU6050
+static struct mpu6050_input_platform_data mpu6050_pdata = {
+	.orientation = {-1, 0, 0,
+				0, 1, 0,
+				0, 0, -1},
+	.acc_cal_path = "/efs/calibration_data",
+	.gyro_cal_path = "/efs/gyro_cal_data",
+};
+#endif
+
 #ifdef CONFIG_SENSORS_SSP
 static int wakeup_mcu(void);
 static int check_mcu_busy(void);
@@ -81,6 +97,11 @@
 		.platform_data = &ssp_pdata,
 		.irq = GPIO_MCU_AP_INT,
 	},
+#elif defined(CONFIG_INPUT_MPU6050)
+	{
+		I2C_BOARD_INFO("mpu6050_input", 0x68),
+		.platform_data = &mpu6050_pdata,
+	},
 #endif
 };
 
@@ -156,7 +177,11 @@
 	int position = 0;
 
 #if defined(CONFIG_MACH_M3) /* C2_SPR, M3 */
-		position = 2; /* top/lower-right */
+#if defined(CONFIG_MACH_M3_USA_TMO)
+	position = 4;
+#else
+	position = 2; /* top/lower-right */
+#endif
 #elif defined(CONFIG_MACH_M0_CMCC)
 	if (system_rev == 2)
 		position = 0; /* top/upper-left */
@@ -198,8 +223,13 @@
 		position = 1; /* top/upper-right */
 	else
 		position = 0; /* top/upper-left */
-#elif defined(CONFIG_MACH_BAFFIN)
-		position = 6; /* bottom/lower-right */
+#elif defined(CONFIG_MACH_BAFFIN_KOR_SKT) || defined(CONFIG_MACH_BAFFIN_KOR_KT)
+	if (system_rev >= 2)
+		position = 3; /* top/lower-left */
+	else
+		position = 2; /* top/lower-right */
+#elif defined(CONFIG_MACH_BAFFIN_KOR_LGT)
+		position = 3; /* top/lower-left */
 #else /* Common */
 	position = 2; /* top/lower-right */
 #endif
@@ -229,7 +259,7 @@
 }
 #endif
 
-#ifdef CONFIG_SENSORS_LSM330DLC
+#if defined(CONFIG_SENSORS_LSM330DLC)
 static int gyro_gpio_init(void)
 {
 	int ret = gpio_request(GPIO_GYRO_INT, "lsm330dlc_gyro_irq");
@@ -276,6 +306,32 @@
 }
 #endif
 
+#ifdef CONFIG_INPUT_MPU6050
+static int mpu_gpio_init(void)
+{
+	int ret = gpio_request(GPIO_GYRO_INT, "mpu_irq");
+
+	pr_info("%s\n", __func__);
+
+	if (ret) {
+		pr_err("%s, Failed to request gpio mpu_irq(%d)\n",
+			__func__, ret);
+		return ret;
+	}
+
+	/* Accelerometer sensor interrupt pin initialization */
+	s5p_register_gpio_interrupt(GPIO_GYRO_INT);
+	s3c_gpio_cfgpin(GPIO_GYRO_INT, S3C_GPIO_INPUT);
+	gpio_set_value(GPIO_GYRO_INT, 2);
+	s3c_gpio_setpull(GPIO_GYRO_INT, S3C_GPIO_PULL_NONE);
+	s5p_gpio_set_drvstr(GPIO_GYRO_INT, S5P_GPIO_DRVSTR_LV1);
+	i2c_devs1[0].irq = gpio_to_irq(GPIO_GYRO_INT);
+
+	return ret;
+}
+#endif
+
+
 #if defined(CONFIG_SENSORS_GP2A) || defined(CONFIG_SENSORS_CM36651) || \
 	defined(CONFIG_SENSORS_CM3663)
 static int proximity_leda_on(bool onoff)
@@ -346,9 +402,49 @@
 #endif
 
 #if defined(CONFIG_SENSORS_GP2A)
+static unsigned long gp2a_get_threshold(u8 *thesh_diff)
+{
+	u8 threshold = 0x09;
+
+	if (thesh_diff)
+		*thesh_diff = 1;
+
+#if defined(CONFIG_MACH_BAFFIN_KOR_SKT) || defined(CONFIG_MACH_BAFFIN_KOR_KT)
+	if (system_rev > 4)
+		threshold = 0x06;
+	else
+		threshold = 0x07;
+	if (thesh_diff)
+		*thesh_diff = 2;
+#elif defined(CONFIG_MACH_BAFFIN_KOR_LGT)
+	if (system_rev > 5)
+		threshold = 0x06;
+	else
+		threshold = 0x07;
+	if (thesh_diff)
+		*thesh_diff = 2;
+#elif defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	threshold = 0x07;
+	if (thesh_diff)
+		*thesh_diff = 2;
+#elif defined(CONFIG_MACH_M3_USA_TMO)
+	threshold = 0x07;
+	if (thesh_diff)
+		*thesh_diff = 2;
+#endif
+
+	if (thesh_diff)
+		pr_info("%s, threshold low = 0x%x, high = 0x%x\n",
+			__func__, threshold, (threshold + *thesh_diff));
+	else
+		pr_info("%s, threshold = 0x%x\n", __func__, threshold);
+	return threshold;
+}
+
 static struct gp2a_platform_data gp2a_pdata = {
 	.gp2a_led_on	= proximity_leda_on,
 	.p_out = GPIO_PS_ALS_INT,
+	.gp2a_get_threshold = gp2a_get_threshold,
 };
 
 static struct platform_device opt_gp2a = {
@@ -468,7 +564,63 @@
 	return ret;
 }
 #endif
+#ifdef CONFIG_SENSORS_AK8963
+
+static char ak_get_layout(void)
+{
+	char layout = 0;
+#ifdef CONFIG_MACH_BAFFIN
+	if (system_rev >= 1)
+		layout = 3;
+	else
+		layout = 4;
+#endif
+	return layout;
+}
 
+static struct akm8963_platform_data akm8963_pdata = {
+	.layout = ak_get_layout,
+	.outbit = 1,
+	.gpio_RST = GPIO_MSENSE_RST_N,
+};
+
+static struct i2c_board_info i2c_devs10_emul[] __initdata = {
+	{
+		I2C_BOARD_INFO("akm8963", 0x0C),
+		.platform_data = &akm8963_pdata,
+	},
+};
+
+static int ak8963c_gpio_init(void)
+{
+	int ret;
+
+	pr_info("%s\n", __func__);
+
+	ret = gpio_request(GPIO_MSENSOR_INT, "gpio_akm_int");
+	if (ret) {
+		pr_err("%s, Failed to request gpio akm_int.(%d)\n",
+			__func__, ret);
+		return ret;
+	}
+	s5p_register_gpio_interrupt(GPIO_MSENSOR_INT);
+	s3c_gpio_setpull(GPIO_MSENSOR_INT, S3C_GPIO_PULL_DOWN);
+	s3c_gpio_cfgpin(GPIO_MSENSOR_INT, S3C_GPIO_SFN(0xF));
+	i2c_devs10_emul[0].irq = gpio_to_irq(GPIO_MSENSOR_INT);
+
+	ret = gpio_request(GPIO_MSENSE_RST_N, "gpio_akm_rst");
+	if (ret) {
+		pr_err("%s, Failed to request gpio akm_rst.(%d)\n",
+			__func__, ret);
+		return ret;
+	}
+	s3c_gpio_cfgpin(GPIO_MSENSE_RST_N, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_MSENSE_RST_N, S3C_GPIO_PULL_NONE);
+	gpio_direction_output(GPIO_MSENSE_RST_N, 1);
+
+	return ret;
+}
+#endif
 
 #ifdef CONFIG_SENSORS_LPS331
 static int lps331_gpio_init(void)
@@ -524,6 +676,12 @@
 		pr_err("%s, accel_gpio_init fail(err=%d)\n", __func__, ret);
 		return ret;
 	}
+#elif defined(CONFIG_INPUT_MPU6050)
+	ret = mpu_gpio_init();
+	if (ret < 0) {
+		pr_err("%s, mpu_gpio_init fail(err=%d)\n", __func__, ret);
+		return ret;
+	}
 #elif defined(CONFIG_SENSORS_SSP)
 	initialize_ssp_gpio();
 #endif
@@ -591,7 +749,21 @@
 			return ret;
 		}
 #endif
-
+#ifdef CONFIG_SENSORS_AK8963
+		ret = ak8963c_gpio_init();
+		if (ret < 0) {
+			pr_err("%s, ak8963c_gpio_init fail(err=%d)\n",
+							 __func__, ret);
+			return ret;
+		}
+		ret = i2c_add_devices(10, i2c_devs10_emul,
+						ARRAY_SIZE(i2c_devs10_emul));
+		if (ret < 0) {
+			pr_err("%s, i2c10 adding i2c fail(err=%d)\n",
+							__func__, ret);
+			return ret;
+		}
+#endif
 	/* Pressure Sensor */
 #ifdef CONFIG_SENSORS_LPS331
 	ret = lps331_gpio_init();
diff -Naur ./arch/arm/mach-exynos/midas-sound.c ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-sound.c
--- ./arch/arm/mach-exynos/midas-sound.c	2012-12-08 20:40:46.153821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-sound.c	2012-11-22 09:13:16.000000000 +0100
@@ -187,6 +187,16 @@
 };
 
 static struct wm8994_drc_cfg drc_value[] = {
+#if defined(CONFIG_MACH_GC1)
+	{
+		.name = "AIF1DAC DRC -3 dB",
+		.regs[0] = 0x009C,
+		.regs[1] = 0x0845,
+		.regs[2] = 0x0000,
+		.regs[3] = 0x0004,
+		.regs[4] = 0x0000,
+	},
+#else
 	{
 		.name = "voice call DRC",
 		.regs[0] = 0x009B,
@@ -195,7 +205,9 @@
 		.regs[3] = 0x0210,
 		.regs[4] = 0x0000,
 	},
-#if defined(CONFIG_MACH_C1_KOR_LGT)
+#endif
+
+#if defined(CONFIG_MACH_C1_KOR_LGT) || defined(CONFIG_MACH_BAFFIN_KOR_LGT)
 	{
 		.name = "voice call DRC",
 		.regs[0] = 0x008c,
@@ -205,7 +217,7 @@
 		.regs[4] = 0x0000,
 	},
 #endif
-#if defined(CONFIG_MACH_P4NOTE)
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
 {
 		.name = "cam rec DRC",
 		.regs[0] = 0x019B,
@@ -253,6 +265,8 @@
 	.micbias = {0x22, 0x22},
 #elif defined(CONFIG_MACH_C1_USA_ATT)
 	.micbias = {0x2f, 0x29},
+#elif defined(CONFIG_MACH_GC1)
+	.micbias = {0x2f, 0x2b},
 #else
 	.micbias = {0x2f, 0x27},
 #endif
@@ -273,7 +287,8 @@
 	defined(CONFIG_MACH_C1_KOR_KT) || defined(CONFIG_MACH_C1_KOR_LGT) || \
 	defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_GC1) || \
 	defined(CONFIG_MACH_C1_USA_ATT) || defined(CONFIG_MACH_T0) || \
-	defined(CONFIG_MACH_M3) || defined(CONFIG_MACH_BAFFIN)
+	defined(CONFIG_MACH_M3) || defined(CONFIG_MACH_BAFFIN) || \
+	defined(CONFIG_MACH_KONA)
 	.lineout2fb = 0,
 #else
 	.lineout2fb = 1,
@@ -297,7 +312,7 @@
 	.gpio_bp = GPIO_FM34_BYPASS,
 	.set_mclk = midas_snd_set_mclk,
 };
-#ifdef CONFIG_MACH_C1_KOR_LGT
+#if defined(CONFIG_MACH_C1_KOR_LGT) || defined(CONFIG_MACH_BAFFIN_KOR_LGT)
 static struct fm34_platform_data fm34_we395_pdata_rev05 = {
 	.gpio_pwdn = GPIO_FM34_PWDN,
 	.gpio_rst = GPIO_FM34_RESET_05,
@@ -313,7 +328,7 @@
 	},
 };
 
-#if defined(CONFIG_MACH_C1_KOR_LGT)
+#if defined(CONFIG_MACH_C1_KOR_LGT) || defined(CONFIG_MACH_BAFFIN_KOR_LGT)
 static struct i2c_gpio_platform_data gpio_i2c_fm34 = {
 	.sda_pin = GPIO_FM34_SDA,
 	.scl_pin = GPIO_FM34_SCL,
@@ -331,11 +346,16 @@
 	defined(CONFIG_FM_SI4705_MODULE)
 static void fmradio_power(int on)
 {
+	int err;
 #if defined(CONFIG_MACH_M0) || defined(CONFIG_MACH_M0_CTC)
 	gpio_set_value(si47xx_data.gpio_sw, GPIO_LEVEL_HIGH);
 #endif
 	if (on) {
-		gpio_request(GPIO_FM_INT, "GPC1");
+		err = gpio_request(GPIO_FM_INT, "GPC1");
+		if (err) {
+			pr_err(KERN_ERR "GPIO_FM_INT GPIO set error!\n");
+			return;
+		}
 		gpio_direction_output(GPIO_FM_INT, 1);
 		gpio_set_value(si47xx_data.gpio_rst, GPIO_LEVEL_LOW);
 		gpio_set_value(GPIO_FM_INT, GPIO_LEVEL_LOW);
@@ -431,7 +451,7 @@
 #endif
 
 static struct platform_device *midas_sound_devices[] __initdata = {
-#if defined(CONFIG_MACH_C1_KOR_LGT)
+#if defined(CONFIG_MACH_C1_KOR_LGT) || defined(CONFIG_MACH_BAFFIN_KOR_LGT)
 #ifdef CONFIG_FM34_WE395
 	&s3c_device_fm34,
 #endif
@@ -460,7 +480,7 @@
 	i2c_register_board_info(I2C_NUM_CODEC, i2c_wm1811,
 					ARRAY_SIZE(i2c_wm1811));
 #else /* for CONFIG_ARCH_EXYNOS4 */
-#ifdef CONFIG_MACH_P4NOTE
+#if defined(CONFIG_MACH_P4NOTE)
 	i2c_wm1811[0].irq = 0;
 	SET_PLATDATA_CODEC(NULL);
 	i2c_register_board_info(I2C_NUM_CODEC, i2c_wm1811,
@@ -471,8 +491,16 @@
 		i2c_register_board_info(I2C_NUM_CODEC, i2c_wm1811,
 						ARRAY_SIZE(i2c_wm1811));
 
+#elif defined(CONFIG_MACH_M3)
+		SET_PLATDATA_CODEC(NULL);
+		i2c_register_board_info(I2C_NUM_CODEC, i2c_wm1811,
+						ARRAY_SIZE(i2c_wm1811));
+#elif defined(CONFIG_MACH_BAFFIN)
+		SET_PLATDATA_CODEC(NULL);
+		i2c_register_board_info(I2C_NUM_CODEC, i2c_wm1811,
+						ARRAY_SIZE(i2c_wm1811));
 #else
-	if (system_rev != 3 && system_rev >= 0) {
+	if (system_rev != 3) {
 		SET_PLATDATA_CODEC(NULL);
 		i2c_register_board_info(I2C_NUM_CODEC, i2c_wm1811,
 						ARRAY_SIZE(i2c_wm1811));
@@ -488,6 +516,9 @@
 	if (system_rev > 5)
 		i2c_2mic[0].platform_data = &fm34_we395_pdata_rev05;
 #endif
+#if defined(CONFIG_MACH_BAFFIN_KOR_LGT)
+		i2c_2mic[0].platform_data = &fm34_we395_pdata_rev05;
+#endif
 
 	i2c_register_board_info(I2C_NUM_2MIC, i2c_2mic, ARRAY_SIZE(i2c_2mic));
 #endif
@@ -505,4 +536,3 @@
 #endif
 
 }
-
diff -Naur ./arch/arm/mach-exynos/midas-thermistor.c ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-thermistor.c
--- ./arch/arm/mach-exynos/midas-thermistor.c	2012-12-08 20:40:46.153821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-thermistor.c	2012-11-22 09:13:16.000000000 +0100
@@ -25,7 +25,7 @@
 #endif
 
 #if defined(CONFIG_MACH_C1_KOR_SKT) || defined(CONFIG_MACH_C1_KOR_KT) || \
-	defined(CONFIG_MACH_C1_KOR_LGT)
+	defined(CONFIG_MACH_C1_KOR_LGT) || defined(CONFIG_MACH_BAFFIN)
 extern int siopLevellimit;
 #endif
 
@@ -239,6 +239,254 @@
 	{ 1824, -200 },
 };
 #elif defined(CONFIG_MACH_GC1)/*Sample # 3*/
+#if defined(CONFIG_MACH_GC1_USA_ATT)
+static struct adc_table_data ap_adc_temper_table_battery[] = {
+	{ 250,	700 },
+	{ 254,	690 },
+	{ 258,	680 },
+	{ 262,	670 },
+	{ 266,	660 },
+	{ 270,	650 },
+	{ 276,	640 },
+	{ 282,	630 },
+	{ 288,	620 },
+	{ 294,	610 },
+	{ 300,	600 },
+	{ 302,	590 },
+	{ 304,	580 },
+	{ 306,	570 },
+	{ 308,	560 },
+	{ 400,	550 },
+	{ 414,	540 },
+	{ 428,	530 },
+	{ 442,	520 },
+	{ 456,	510 },
+	{ 470,	500 },
+	{ 486,	490 },
+	{ 502,	480 },
+	{ 518,	470 },
+	{ 534,	460 },
+	{ 550,	450 },
+	{ 566,	440 },
+	{ 582,	430 },
+	{ 598,	420 },
+	{ 614,	410 },
+	{ 630,	400 },
+	{ 650,	390 },
+	{ 670,	380 },
+	{ 690,	370 },
+	{ 710,	360 },
+	{ 730,	350 },
+	{ 750,	340 },
+	{ 770,	330 },
+	{ 790,	320 },
+	{ 810,	310 },
+	{ 830,	300 },
+	{ 854,	290 },
+	{ 878,	280 },
+	{ 902,	270 },
+	{ 926,	260 },
+	{ 950,	250 },
+	{ 970,	240 },
+	{ 990,	230 },
+	{ 1010,	220 },
+	{ 1030,	210 },
+	{ 1050,	200 },
+	{ 1078,	190 },
+	{ 1106,	180 },
+	{ 1134,	170 },
+	{ 1162,	160 },
+	{ 1190,	150 },
+	{ 1214,	140 },
+	{ 1238,	130 },
+	{ 1262,	120 },
+	{ 1286,	110 },
+	{ 1310,	100 },
+	{ 1328,	90 },
+	{ 1346,	80 },
+	{ 1364,	70 },
+	{ 1382,	60 },
+	{ 1400,	50 },
+	{ 1425,	40 },
+	{ 1450,	30 },
+	{ 1475,	20 },
+	{ 1500,	10 },
+	{ 1525,	0 },
+	{ 1544,	-10 },
+	{ 1563,	-20 },
+	{ 1582,	-30 },
+	{ 1601,	-40 },
+	{ 1620,	-50 },
+	{ 1634,	-60 },
+	{ 1648,	-70 },
+	{ 1662,	-80 },
+	{ 1676,	-90 },
+	{ 1690,	-100 },
+};
+#elif defined(CONFIG_TARGET_LOCALE_KOR)
+static struct adc_table_data ap_adc_temper_table_battery[] = {
+	{  250,	 650 },
+	{  259,	 640 },
+	{  270,	 630 },
+	{  279,	 620 },
+	{  297,	 610 },
+	{  312,	 600 },
+	{  324,	 590 },
+	{  336,	 580 },
+	{  344,	 570 },
+	{  358,	 560 },
+	{  369,	 550 },
+	{  378,	 540 },
+	{  390,	 530 },
+	{  405,	 520 },
+	{  419,	 510 },
+	{  433,	 500 },
+	{  447,	 490 },
+	{  464,	 480 },
+	{  471,	 470 },
+	{  485,	 460 },
+	{  510,	 450 },
+	{  515,	 440 },
+	{  537,	 430 },
+	{  552,	 420 },
+	{  577,	 410 },
+	{  591,	 400 },
+	{  606,	 390 },
+	{  621,	 380 },
+	{  655,	 370 },
+	{  677,	 360 },
+	{  711,	 350 },
+	{  727,	 340 },
+	{  730,	 330 },
+	{  755,	 320 },
+	{  795,	 310 },
+	{  819,	 300 },
+	{  832,	 290 },
+	{  855,	 280 },
+	{  883,	 270 },
+	{  895,	 260 },
+	{  939,	 250 },
+	{  946,	 240 },
+	{  958,	 230 },
+	{ 986,	 220 },
+	{ 1023,	 210 },
+	{ 1055,	 200 },
+	{ 1065,	 190 },
+	{ 1118,	 180 },
+	{ 1147,	 170 },
+	{ 1171,	 160 },
+	{ 1190,	 150 },
+	{ 1220,	 140 },
+	{ 1224,	 130 },
+	{ 1251,	 120 },
+	{ 1271,	 110 },
+	{ 1316,	 100 },
+	{ 1325,	  90 },
+	{ 1333,	  80 },
+	{ 1365,	  70 },
+	{ 1382,	  60 },
+	{ 1404,	  50 },
+	{ 1445,	  40 },
+	{ 1461,	  30 },
+	{ 1469,	  20 },
+	{ 1492,	  10 },
+	{ 1518,	   0 },
+	{ 1552,	 -10 },
+	{ 1560,	 -20 },
+	{ 1588,	 -30 },
+	{ 1592,	 -40 },
+	{ 1613,	 -50 },
+	{ 1632,	 -60 },
+	{ 1647,	 -70 },
+	{ 1661,	-80 },
+	{ 1685,	-90 },
+	{ 1692,	-100 },
+};
+#elif defined(CONFIG_MACH_GC1_USA_VZW)
+static struct adc_table_data ap_adc_temper_table_battery[] = {
+	{ 240, 700 },
+	{ 248, 690 },
+	{ 256, 680 },
+	{ 264, 670 },
+	{ 272, 660 },
+	{ 280, 650 },
+	{ 292, 640 },
+	{ 304, 630 },
+	{ 317, 620 },
+	{ 330, 610 },
+	{ 341, 600 },
+	{ 352, 590 },
+	{ 364, 580 },
+	{ 376, 570 },
+	{ 388, 560 },
+	{ 400, 550 },
+	{ 414, 540 },
+	{ 428, 530 },
+	{ 442, 520 },
+	{ 456, 510 },
+	{ 470, 500 },
+	{ 487, 490 },
+	{ 504, 480 },
+	{ 520, 470 },
+	{ 540, 460 },
+	{ 560, 450 },
+	{ 566, 440 },
+	{ 572, 430 },
+	{ 578, 420 },
+	{ 584, 410 },
+	{ 590, 400 },
+	{ 628, 390 },
+	{ 666, 380 },
+	{ 704, 370 },
+	{ 742, 360 },
+	{ 780, 350 },
+	{ 798, 340 },
+	{ 816, 330 },
+	{ 834, 320 },
+	{ 852, 310 },
+	{ 870, 300 },
+	{ 894, 290 },
+	{ 918, 280 },
+	{ 942, 270 },
+	{ 966, 260 },
+	{ 990, 250 },
+	{ 1028, 240 },
+	{ 1066, 230 },
+	{ 1104, 220 },
+	{ 1142, 210 },
+	{ 1180, 200 },
+	{ 1202, 190 },
+	{ 1224, 180 },
+	{ 1246, 170 },
+	{ 1268, 160 },
+	{ 1290, 150 },
+	{ 1316, 140 },
+	{ 1342, 130 },
+	{ 1368, 120 },
+	{ 1394, 110 },
+	{ 1420, 100 },
+	{ 1430, 90 },
+	{ 1440, 80 },
+	{ 1450, 70 },
+	{ 1460, 60 },
+	{ 1470, 50 },
+	{ 1477, 40 },
+	{ 1484, 30 },
+	{ 1492, 20 },
+	{ 1500, 15 },
+	{ 1523, 0 },
+	{ 1546, -10 },
+	{ 1569, -20 },
+	{ 1592, -30 },
+	{ 1616, -40 },
+	{ 1640, -49 },
+	{ 1648, -60 },
+	{ 1656, -70 },
+	{ 1664, -80 },
+	{ 1672, -90 },
+	{ 1680, -100 },
+};
+#else/*EUR*/
 static struct adc_table_data ap_adc_temper_table_battery[] = {
 	{  250,	 700 },
 	{  259,	 690 },
@@ -322,6 +570,7 @@
 	{ 1685,	-90 },
 	{ 1692,	-100 },
 };
+#endif
 #elif defined(CONFIG_MACH_M3)
 static struct adc_table_data ap_adc_temper_table_battery[] = {
 	{  264,  700 },
@@ -505,109 +754,121 @@
 	{ 1839,	-200 },
 	{ 1903,	-250 },
 };
-#elif defined(CONFIG_MACH_BAFFIN)
+#elif defined(CONFIG_MACH_T0_CHN_CTC)
 static struct adc_table_data ap_adc_temper_table_battery[] = {
-	{  178,	 800 },
-	{  186,	 790 },
-	{  193,	 780 },
-	{  198,	 770 },
-	{  204,	 760 },
-	{  210,	 750 },
-	{  220,	 740 },
-	{  226,	 730 },
-	{  232,	 720 },
-	{  247,	 710 },
-	{  254,	 700 },
-	{  261,	 690 },
-	{  270,	 680 },
-	{  278,	 670 },
-	{  285,	 660 },
-	{  292,	 650 },
-	{  304,	 640 },
-	{  319,	 630 },
-	{  325,	 620 },
-	{  331,	 610 },
-	{  343,	 600 },
-	{  354,	 590 },
-	{  373,	 580 },
-	{  387,	 570 },
-	{  392,	 560 },
-	{  408,	 550 },
-	{  422,	 540 },
-	{  433,	 530 },
-	{  452,	 520 },
-	{  466,	 510 },
-	{  479,	 500 },
-	{  497,	 490 },
-	{  510,	 480 },
-	{  529,	 470 },
-	{  545,	 460 },
-	{  562,	 450 },
-	{  578,	 440 },
-	{  594,	 430 },
-	{  620,	 420 },
-	{  632,	 410 },
-	{  651,	 400 },
-	{  663,	 390 },
-	{  681,	 380 },
-	{  705,	 370 },
-	{  727,	 360 },
-	{  736,	 350 },
-	{  778,	 340 },
-	{  793,	 330 },
-	{  820,	 320 },
-	{  834,	 310 },
-	{  859,	 300 },
-	{  872,	 290 },
-	{  891,	 280 },
-	{  914,	 270 },
-	{  939,	 260 },
-	{  951,	 250 },
-	{  967,	 240 },
-	{  999,	 230 },
-	{ 1031,	 220 },
-	{ 1049,	 210 },
-	{ 1073,	 200 },
-	{ 1097,	 190 },
-	{ 1128,	 180 },
-	{ 1140,	 170 },
-	{ 1171,	 160 },
-	{ 1188,	 150 },
-	{ 1198,	 140 },
-	{ 1223,	 130 },
-	{ 1236,	 120 },
-	{ 1274,	 110 },
-	{ 1290,	 100 },
-	{ 1312,	  90 },
-	{ 1321,	  80 },
-	{ 1353,	  70 },
-	{ 1363,	  60 },
-	{ 1404,	  50 },
-	{ 1413,	  40 },
-	{ 1444,	  30 },
-	{ 1461,	  20 },
-	{ 1470,	  10 },
-	{ 1516,	   0 },
-	{ 1522,	 -10 },
-	{ 1533,	 -20 },
-	{ 1540,	 -30 },
-	{ 1558,	 -40 },
-	{ 1581,	 -50 },
-	{ 1595,	 -60 },
-	{ 1607,	 -70 },
-	{ 1614,  -80 },
-	{ 1627,  -90 },
-	{ 1655, -100 },
-	{ 1664, -110 },
-	{ 1670, -120 },
-	{ 1676, -130 },
-	{ 1692, -140 },
-	{ 1713, -150 },
-	{ 1734, -160 },
-	{ 1746, -170 },
-	{ 1789, -180 },
-	{ 1805, -190 },
-	{ 1824, -200 },
+	{  200,  800 },
+	{  207,  790 },
+	{  214,  780 },
+	{  221,  770 },
+	{  228,  760 },
+	{  235,  750 },
+	{  248,  740 },
+	{  260,  730 },
+	{  273,  720 },
+	{  286,  710 },
+	{  299,  700 },
+	{  310,  690 },
+	{  321,  680 },
+	{  332,  670 },
+	{  345,  660 },
+	{  353,  650 },
+	{  358,  640 },
+	{  363,  630 },
+	{  370,  620 },
+	{  375,  610 },
+	{  381,  600 },
+	{  393,  590 },
+	{  423,  580 },
+	{  435,  570 },
+	{  448,  560 },
+	{  460,  550 },
+	{  473,  540 },
+	{  485,  530 },
+	{  511,  520 },
+	{  524,  510 },
+	{  537,  500 },
+	{  550,  490 },
+	{  566,  480 },
+	{  582,  470 },
+	{  598,  460 },
+	{  620,  450 },
+	{  649,  440 },
+	{  668,  430 },
+	{  687,  420 },
+	{  706,  410 },
+	{  725,  400 },
+	{  744,  390 },
+	{  763,  380 },
+	{  782,  370 },
+	{  801,  360 },
+	{  820,  350 },
+	{  841,  340 },
+	{  862,  330 },
+	{  883,  320 },
+	{  904,  310 },
+	{  925,  300 },
+	{  946,  290 },
+	{  967,  280 },
+	{  988,  270 },
+	{ 1009,  260 },
+	{ 1030,  250 },
+	{ 1050,  240 },
+	{ 1070,  230 },
+	{ 1090,  220 },
+	{ 1110,  210 },
+	{ 1130,  200 },
+	{ 1154,  190 },
+	{ 1178,  180 },
+	{ 1202,  170 },
+	{ 1226,  160 },
+	{ 1250,  150 },
+	{ 1272,  140 },
+	{ 1294,  130 },
+	{ 1315,  120 },
+	{ 1337,  110 },
+	{ 1359,  100 },
+	{ 1381,   90 },
+	{ 1403,   80 },
+	{ 1424,   70 },
+	{ 1446,   60 },
+	{ 1468,   50 },
+	{ 1489,   40 },
+	{ 1510,   30 },
+	{ 1532,   20 },
+	{ 1553,   10 },
+	{ 1574,    0 },
+	{ 1591,  -10 },
+	{ 1609,  -20 },
+	{ 1626,  -30 },
+	{ 1644,  -40 },
+	{ 1661,  -50 },
+	{ 1676,  -60 },
+	{ 1691,  -70 },
+	{ 1707,  -80 },
+	{ 1722,  -90 },
+	{ 1737, -100 },
+	{ 1749, -110 },
+	{ 1760, -120 },
+	{ 1772, -130 },
+	{ 1783, -140 },
+	{ 1795, -150 },
+	{ 1803, -160 },
+	{ 1811, -170 },
+	{ 1819, -180 },
+	{ 1827, -190 },
+	{ 1836, -200 },
+};
+#elif defined(CONFIG_MACH_T0_CHN_OPEN_DUOS)
+static struct adc_table_data ap_adc_temper_table_battery[] = {
+	{ 358,   600 },
+	{ 500,   500 },
+	{ 600,   400 },
+	{ 794,   300 },
+	{ 1132,  200 },
+	{ 1363,  100 },
+	{ 1574,    0 },
+	{ 1732, -100 },
+	{ 1860, -200 },
 };
 #else	/* T0 3G(default) */
 static struct adc_table_data ap_adc_temper_table_battery[] = {
@@ -622,6 +883,217 @@
 	{ 1860, -200 },
 };
 #endif
+#elif defined(CONFIG_MACH_BAFFIN_KOR_SKT) || \
+	defined(CONFIG_MACH_BAFFIN_KOR_KT) || \
+	defined(CONFIG_MACH_BAFFIN_KOR_LGT)
+static struct adc_table_data ap_adc_temper_table_battery[] = {
+	{  170,  800 },
+	{  176,  790 },
+	{  183,  780 },
+	{  189,  770 },
+	{  195,  760 },
+	{  202,  750 },
+	{  210,  740 },
+	{  217,  730 },
+	{  225,  720 },
+	{  232,  710 },
+	{  240,  700 },
+	{  247,  690 },
+	{  255,  680 },
+	{  262,  670 },
+	{  269,  660 },
+	{  276,  650 },
+	{  279,  640 },
+	{  303,  630 },
+	{  320,  620 },
+	{  330,  610 },
+	{  340,  600 },
+	{  354,  590 },
+	{  363,  580 },
+	{  373,  570 },
+	{  382,  560 },
+	{  390,  550 },
+	{  405,  540 },
+	{  418,  530 },
+	{  433,  520 },
+	{  448,  510 },
+	{  465,  500 },
+	{  483,  490 },
+	{  500,  480 },
+	{  512,  470 },
+	{  523,  460 },
+	{  535,  450 },
+	{  550,  440 },
+	{  580,  430 },
+	{  585,  420 },
+	{  605,  410 },
+	{  635,  400 },
+	{  648,  390 },
+	{  665,  380 },
+	{  682,  370 },
+	{  706,  360 },
+	{  723,  350 },
+	{  748,  340 },
+	{  773,  330 },
+	{  795,  320 },
+	{  807,  310 },
+	{  820,  300 },
+	{  835,  290 },
+	{  855,  280 },
+	{  878,  270 },
+	{  899,  260 },
+	{  920,  250 },
+	{  937,  240 },
+	{  962,  230 },
+	{  992,  220 },
+	{ 1025,  210 },
+	{ 1050,  200 },
+	{ 1074,  190 },
+	{ 1102,  180 },
+	{ 1121,  170 },
+	{ 1150,  160 },
+	{ 1176,  150 },
+	{ 1192,  140 },
+	{ 1230,  130 },
+	{ 1248,  120 },
+	{ 1284,  110 },
+	{ 1305,  100 },
+	{ 1322,   90 },
+	{ 1333,   80 },
+	{ 1360,   70 },
+	{ 1375,   60 },
+	{ 1410,   50 },
+	{ 1420,   40 },
+	{ 1454,   30 },
+	{ 1478,   20 },
+	{ 1495,   10 },
+	{ 1515,    0 },
+	{ 1532,  -10 },
+	{ 1543,  -20 },
+	{ 1560,  -30 },
+	{ 1580,  -40 },
+	{ 1605,  -50 },
+	{ 1635,  -60 },
+	{ 1648,  -70 },
+	{ 1657,  -80 },
+	{ 1667,  -90 },
+	{ 1685, -100 },
+	{ 1697, -110 },
+	{ 1705, -120 },
+	{ 1716, -130 },
+	{ 1735, -140 },
+	{ 1760, -150 },
+	{ 1772, -160 },
+	{ 1785, -170 },
+	{ 1798, -180 },
+	{ 1810, -190 },
+	{ 1824, -200 },
+};
+#elif defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+static struct adc_table_data ap_adc_temper_table_battery[] = {
+	{  149,  800 },
+	{  154,  790 },
+	{  159,  780 },
+	{  164,  770 },
+	{  169,  760 },
+	{  174,  750 },
+	{  181,  740 },
+	{  188,  730 },
+	{  195,  720 },
+	{  202,  710 },
+	{  209,  700 },
+	{  217,  690 },
+	{  225,  680 },
+	{  233,  670 },
+	{  241,  660 },
+	{  249,  650 },
+	{  258,  640 },
+	{  268,  630 },
+	{  277,  620 },
+	{  287,  610 },
+	{  296,  600 },
+	{  307,  590 },
+	{  317,  580 },
+	{  328,  570 },
+	{  338,  560 },
+	{  349,  550 },
+	{  361,  540 },
+	{  374,  530 },
+	{  386,  520 },
+	{  399,  510 },
+	{  411,  500 },
+	{  426,  490 },
+	{  441,  480 },
+	{  455,  470 },
+	{  470,  460 },
+	{  485,  450 },
+	{  501,  440 },
+	{  517,  430 },
+	{  532,  420 },
+	{  548,  410 },
+	{  564,  400 },
+	{  583,  390 },
+	{  601,  380 },
+	{  620,  370 },
+	{  638,  360 },
+	{  657,  350 },
+	{  677,  340 },
+	{  697,  330 },
+	{  717,  320 },
+	{  737,  310 },
+	{  757,  300 },
+	{  781,  290 },
+	{  804,  280 },
+	{  828,  270 },
+	{  851,  260 },
+	{  875,  250 },
+	{  898,  240 },
+	{  920,  230 },
+	{  943,  220 },
+	{  965,  210 },
+	{  988,  200 },
+	{ 1013,  190 },
+	{ 1038,  180 },
+	{ 1063,  170 },
+	{ 1088,  160 },
+	{ 1113,  150 },
+	{ 1137,  140 },
+	{ 1162,  130 },
+	{ 1186,  120 },
+	{ 1211,  110 },
+	{ 1235,  100 },
+	{ 1260,   90 },
+	{ 1286,   80 },
+	{ 1311,   70 },
+	{ 1337,   60 },
+	{ 1362,   50 },
+	{ 1383,   40 },
+	{ 1404,   30 },
+	{ 1426,   20 },
+	{ 1447,   10 },
+	{ 1468,    0 },
+	{ 1488,  -10 },
+	{ 1508,  -20 },
+	{ 1527,  -30 },
+	{ 1547,  -40 },
+	{ 1567,  -50 },
+	{ 1585,  -60 },
+	{ 1603,  -70 },
+	{ 1621,  -80 },
+	{ 1639,  -90 },
+	{ 1657, -100 },
+	{ 1674, -110 },
+	{ 1690, -120 },
+	{ 1707, -130 },
+	{ 1723, -140 },
+	{ 1740, -150 },
+	{ 1755, -160 },
+	{ 1769, -170 },
+	{ 1784, -180 },
+	{ 1798, -190 },
+	{ 1813, -200 },
+};
+
 #else	/* sample */
 static struct adc_table_data ap_adc_temper_table_battery[] = {
 	{ 305,  650 },
@@ -894,6 +1366,101 @@
 		if (level > prev_level)
 			level = prev_level;
 	}
+
+#elif defined(CONFIG_MACH_BAFFIN_KOR_SKT) || \
+	defined(CONFIG_MACH_BAFFIN_KOR_KT)
+	if (temp > prev_temp) {
+		if (temp >= 560)
+			level = 4;
+		else if (temp >= 550)
+			level = 3;
+		else if (temp >= 530)
+			level = 2;
+		else if (temp >= 460)
+			level = 1;
+		else
+			level = 0;
+	} else {
+		if (temp < 410)
+			level = 0;
+		else if (temp < 460)
+			level = 1;
+		else if (temp < 530)
+			level = 2;
+		else if (temp < 550)
+			level = 3;
+		else
+			level = 4;
+
+		if (level > prev_level)
+			level = prev_level;
+	}
+
+	if (siopLevellimit != 0 && level > siopLevellimit)
+		level = siopLevellimit;
+
+#elif defined(CONFIG_MACH_BAFFIN_KOR_LGT)
+	if (temp > prev_temp) {
+		if (temp >= 550)
+			level = 4;
+		else if (temp >= 540)
+			level = 3;
+		else if (temp >= 510)
+			level = 2;
+		else if (temp >= 450)
+			level = 1;
+		else
+			level = 0;
+	} else {
+		if (temp < 410)
+			level = 0;
+		else if (temp < 450)
+			level = 1;
+		else if (temp < 510)
+			level = 2;
+		else if (temp < 540)
+			level = 3;
+		else
+			level = 4;
+
+		if (level > prev_level)
+			level = prev_level;
+	}
+
+	if (siopLevellimit != 0 && level > siopLevellimit)
+		level = siopLevellimit;
+
+#elif defined(CONFIG_MACH_SUPERIOR_KOR_SKT)
+	if (temp > prev_temp) {
+		if (temp >= 540)
+			level = 4;
+		else if (temp >= 530)
+			level = 3;
+		else if (temp >= 480)
+			level = 2;
+		else if (temp >= 440)
+			level = 1;
+		else
+			level = 0;
+	} else {
+		if (temp < 410)
+			level = 0;
+		else if (temp < 440)
+			level = 1;
+		else if (temp < 480)
+			level = 2;
+		else if (temp < 530)
+			level = 3;
+		else
+			level = 4;
+
+		if (level > prev_level)
+			level = prev_level;
+	}
+
+	if (siopLevellimit != 0 && level > siopLevellimit)
+		level = siopLevellimit;
+
 #else
 	if (temp > prev_temp) {
 		if (temp >= 540)
@@ -947,6 +1514,35 @@
 };
 #endif
 
+#ifdef CONFIG_SEC_SUBTHERMISTOR
+static struct sec_therm_adc_table subtemper_table_ap[] = {
+	{ 345,   600 },
+	{ 390,   520 },
+	{ 410,   500 },
+	{ 698,   400 },
+	{ 898,   300 },
+	{ 1132,  200 },
+	{ 1363,  100 },
+	{ 1574,    0 },
+	{ 1732, -100 },
+	{ 1860, -200 },
+};
+
+static struct sec_therm_platform_data sec_subtherm_pdata = {
+	.adc_channel	= 3,
+	.adc_arr_size	= ARRAY_SIZE(subtemper_table_ap),
+	.adc_table	= subtemper_table_ap,
+	.polling_interval = 20 * 1000, /* msecs */
+	.get_siop_level = NULL,
+};
+
+struct platform_device sec_device_subthermistor = {
+	.name = "sec-subthermistor",
+	.id = -1,
+	.dev.platform_data = &sec_subtherm_pdata,
+};
+#endif
+
 #ifdef CONFIG_STMPE811_ADC
 /* temperature table for ADC ch7 */
 static struct adc_table_data temper_table_battery[] = {
diff -Naur ./arch/arm/mach-exynos/midas-tsp.c ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-tsp.c
--- ./arch/arm/mach-exynos/midas-tsp.c	2012-12-08 20:40:46.153821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-tsp.c	2012-11-22 09:13:16.000000000 +0100
@@ -24,11 +24,17 @@
 #include <linux/platform_data/mms152_ts.h>
 #elif defined(CONFIG_TOUCHSCREEN_ATMEL_MXT540S)
 #include <linux/i2c/mxt540s.h>
-#elif defined(CONFIG_TOUCHSCREEN_CYTTSP4)
-#include <linux/platform_data/cypress_cyttsp4.h>
+#elif defined(CONFIG_TOUCHSCREEN_CYPRESS_TMA46X)
+#include <linux/cyttsp4_bus.h>
+#include <linux/cyttsp4_core.h>
+#include <linux/cyttsp4_btn.h>
+#include <linux/cyttsp4_mt.h>
 #include <linux/delay.h>
 #include <linux/input.h>
-
+#include <linux/interrupt.h>
+#elif defined(CONFIG_TOUCHSCREEN_SYNAPTICS_I2C_RMI)
+#include <linux/i2c/synaptics_rmi.h>
+#include <linux/interrupt.h>
 #else
 #include <linux/platform_data/mms_ts.h>
 #endif
@@ -1238,6 +1244,165 @@
 		 __func__, i2c_devs3[0].irq);
 }
 
+#elif defined(CONFIG_TOUCHSCREEN_SYNAPTICS_I2C_RMI)
+static struct synaptics_rmi_callbacks *charger_callbacks;
+void tsp_charger_infom(bool en)
+{
+	if (charger_callbacks && charger_callbacks->inform_charger)
+		charger_callbacks->inform_charger(charger_callbacks, en);
+}
+
+#ifdef CONFIG_LCD_FREQ_SWITCH
+static struct tsp_lcd_callbacks *lcd_callbacks;
+struct tsp_lcd_callbacks {
+	void (*inform_lcd)(struct tsp_lcd_callbacks *, bool);
+};
+
+void tsp_lcd_infom(bool en)
+{
+	if (lcd_callbacks && lcd_callbacks->inform_lcd)
+		lcd_callbacks->inform_lcd(lcd_callbacks, en);
+}
+#endif
+
+void __init midas_tsp_set_lcdtype(int lcd_type)
+{
+}
+
+static int synaptics_power(bool on)
+{
+	struct regulator *regulator_vdd;
+	struct regulator *regulator_avdd;
+	static bool enabled;
+
+	if (enabled == on)
+		return 0;
+
+	regulator_vdd = regulator_get(NULL, "touch_1.8v");
+	if (IS_ERR(regulator_vdd)) {
+		printk(KERN_ERR "[TSP]ts_power_on : tsp_vdd regulator_get failed\n");
+		return PTR_ERR(regulator_vdd);
+	}
+
+	regulator_avdd = regulator_get(NULL, "touch");
+	if (IS_ERR(regulator_avdd)) {
+		printk(KERN_ERR "[TSP]ts_power_on : tsp_avdd regulator_get failed\n");
+		return PTR_ERR(regulator_avdd);
+	}
+
+	printk(KERN_INFO "[TSP] %s %s\n", __func__, on ? "on" : "off");
+
+	if (on) {
+		regulator_enable(regulator_vdd);
+		regulator_enable(regulator_avdd);
+	} else {
+		/*
+		 * TODO: If there is a case the regulator must be disabled
+		 * (e,g firmware update?), consider regulator_force_disable.
+		 */
+		if (regulator_is_enabled(regulator_avdd))
+			regulator_disable(regulator_avdd);
+		if (regulator_is_enabled(regulator_vdd))
+			regulator_disable(regulator_vdd);
+	}
+
+	enabled = on;
+	regulator_put(regulator_vdd);
+	regulator_put(regulator_avdd);
+
+	return 0;
+}
+
+static int synaptics_gpio_setup(unsigned gpio, bool configure)
+{
+	if (configure) {
+		gpio_request(gpio, "TSP_INT");
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(0xf));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+		s5p_register_gpio_interrupt(gpio);
+	} else {
+		pr_warn("%s: No way to deconfigure gpio %d.",
+		       __func__, gpio);
+	}
+
+	return 0;
+}
+
+#if NO_0D_WHILE_2D
+static unsigned char tm1940_f1a_button_codes[] = {KEY_MENU, KEY_BACK};
+
+static struct synaptics_rmi_f1a_button_map tm1940_f1a_button_map = {
+	.nbuttons = ARRAY_SIZE(tm1940_f1a_button_codes),
+	.map = tm1940_f1a_button_codes,
+};
+
+static int ts_led_power_on(bool on)
+{
+	struct regulator *regulator;
+
+	if (on) {
+		regulator = regulator_get(NULL, "touchkey_led");
+		if (IS_ERR(regulator)) {
+			printk(KERN_ERR
+			"[TSP_KEY] ts_led_power_on : TK_LED regulator_get failed\n");
+			return -EIO;
+		}
+
+		regulator_enable(regulator);
+		regulator_put(regulator);
+	} else {
+		regulator = regulator_get(NULL, "touchkey_led");
+		if (IS_ERR(regulator)) {
+			printk(KERN_ERR
+			"[TSP_KEY] ts_led_power_on : TK_LED regulator_get failed\n");
+			return -EIO;
+		}
+
+		if (regulator_is_enabled(regulator))
+			regulator_force_disable(regulator);
+		regulator_put(regulator);
+	}
+
+	return 0;
+}
+#endif
+
+#define TM1940_ADDR 0x20
+#define TM1940_ATTN 130
+
+static struct synaptics_rmi4_platform_data rmi4_platformdata = {
+	.irq_type = IRQF_TRIGGER_FALLING,
+	.gpio = GPIO_TSP_INT,
+	.power = synaptics_power,
+	.gpio_config = synaptics_gpio_setup,
+#if NO_0D_WHILE_2D
+	.led_power_on = ts_led_power_on,
+	.f1a_button_map = &tm1940_f1a_button_map,
+#endif
+};
+
+static struct i2c_board_info i2c_devs3[] = {
+	{
+		I2C_BOARD_INFO("synaptics_rmi4_i2c", 0x20),
+		.platform_data = &rmi4_platformdata,
+	}
+};
+
+void __init midas_tsp_init(void)
+{
+	/* touch interrupt */
+	gpio_request(GPIO_TSP_INT, "TSP_INT");
+	s3c_gpio_cfgpin(GPIO_TSP_INT, S3C_GPIO_SFN(0xf));
+	s3c_gpio_setpull(GPIO_TSP_INT, S3C_GPIO_PULL_NONE);
+	s5p_register_gpio_interrupt(GPIO_TSP_INT);
+
+	i2c_devs3[0].irq = gpio_to_irq(GPIO_TSP_INT);
+	i2c_register_board_info(3, i2c_devs3, ARRAY_SIZE(i2c_devs3));
+
+	printk(KERN_ERR "%s touch : %d\n",
+		 __func__, i2c_devs3[0].irq);
+}
+
 #elif defined(CONFIG_TOUCHSCREEN_MELFAS_NOTE)
 /* MELFAS TSP(T0) */
 static bool enabled;
@@ -1433,6 +1598,25 @@
 	pr_debug("[TSP] melfas_register_callback\n");
 }
 
+#ifdef CONFIG_LCD_FREQ_SWITCH
+struct tsp_lcd_callbacks *lcd_callbacks;
+struct tsp_lcd_callbacks {
+	void (*inform_lcd)(struct tsp_lcd_callbacks *, bool);
+};
+
+void tsp_lcd_infom(bool en)
+{
+	if (lcd_callbacks && lcd_callbacks->inform_lcd)
+		lcd_callbacks->inform_lcd(lcd_callbacks, en);
+}
+
+static void melfas_register_lcd_callback(void *cb)
+{
+	lcd_callbacks = cb;
+	pr_debug("[TSP] melfas_register_lcd_callback\n");
+}
+#endif
+
 static struct melfas_tsi_platform_data mms_ts_pdata = {
 	.max_x = 720,
 	.max_y = 1280,
@@ -1449,11 +1633,14 @@
 	.power = melfas_power,
 	.mux_fw_flash = melfas_mux_fw_flash,
 	.is_vdd_on = is_melfas_vdd_on,
-	.config_fw_version = "N7100_Me_0813",
+	.config_fw_version = "N7100_Me_0910",
 /*	.set_touch_i2c		= melfas_set_touch_i2c, */
 /*	.set_touch_i2c_to_gpio	= melfas_set_touch_i2c_to_gpio, */
 	.lcd_type = melfas_get_lcdtype,
 	.register_cb = melfas_register_callback,
+#ifdef CONFIG_LCD_FREQ_SWITCH
+	.register_lcd_cb = melfas_register_lcd_callback,
+#endif
 };
 
 static struct i2c_board_info i2c_devs3[] = {
@@ -1493,118 +1680,20 @@
 	i2c_register_board_info(3, i2c_devs3, ARRAY_SIZE(i2c_devs3));
 }
 
-#elif defined(CONFIG_TOUCHSCREEN_CYTTSP4)
-
-#define CY_I2C_NAME     "cyttsp4-i2c"
+#elif defined(CONFIG_TOUCHSCREEN_CYPRESS_TMA46X)
 
-#define CY_USE_TMA400_SP2
-/* use the following define if the device is a TMA400 family part
- */
-#define CY_USE_TMA400
-#define CY_USE_BUTTON_TEST_PANEL
+#define CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_INCLUDE_FW
 
-#ifdef CY_USE_TMA400
-#define CY_I2C_TCH_ADR	0x24
-#define CY_I2C_LDR_ADR	0x24
-#ifdef CY_USE_BUTTON_TEST_PANEL
-#define CY_MAXX 480
-#define CY_MAXY 800
-#else
-#define CY_MAXX 880
-#define CY_MAXY 1280
-#endif
-#define CY_MINX 0
-#define CY_MINY 0
-#endif /* --CY_USE_TMA400 */
-
-#define CY_ABS_MIN_X CY_MINX
-#define CY_ABS_MIN_Y CY_MINY
-#define CY_ABS_MIN_P 0
-#define CY_ABS_MIN_W 0
-#ifdef CY_USE_TMA400
-#define CY_ABS_MIN_T 0
-#endif /* --CY_USE_TMA400 */
-
-#define CY_ABS_MAX_X CY_MAXX
-#define CY_ABS_MAX_Y CY_MAXY
-#define CY_ABS_MAX_P 255
-#define CY_ABS_MAX_W 255
-#ifdef CY_USE_TMA400
-#define CY_ABS_MAX_T 15
-#endif /* --CY_USE_TMA400 */
-#define CY_IGNORE_VALUE 0xFFFF
-
-
-
-#include "cyttsp4_params.h"
-
-static struct touch_settings cyttsp4_sett_param_regs = {
-	.data = (uint8_t *)&cyttsp4_param_regs[0],
-	.size = ARRAY_SIZE(cyttsp4_param_regs),
-	.tag = 0,
-};
-
-static struct touch_settings cyttsp4_sett_param_size = {
-	.data = (uint8_t *)&cyttsp4_param_size[0],
-	.size = ARRAY_SIZE(cyttsp4_param_size),
-	.tag = 0,
-};
-
-
-/* Design Data Table */
-static u8 cyttsp4_ddata[] = {
-	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
-	16, 17, 18, 19, 20, 21, 22, 23, 24 /* test padding
-	, 25, 26, 27, 28, 29, 30, 31 */
-};
-
-static struct touch_settings cyttsp4_sett_ddata = {
-	.data = (uint8_t *)&cyttsp4_ddata[0],
-	.size = ARRAY_SIZE(cyttsp4_ddata),
-	.tag = 0,
-};
-
-/* Manufacturing Data Table */
-static u8 cyttsp4_mdata[] = {
-	65, 64, /* test truncation */63, 62, 61, 60, 59, 58, 57, 56, 55,
-	54, 53, 52, 51, 50, 49, 48,
-	47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32,
-	31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,
-	15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0
-};
-
-static struct touch_settings cyttsp4_sett_mdata = {
-	.data = (uint8_t *)&cyttsp4_mdata[0],
-	.size = ARRAY_SIZE(cyttsp4_mdata),
-	.tag = 0,
-};
-
-/* Button to keycode conversion */
-static u16 cyttsp4_btn_keys[] = {
-	/* use this table to map buttons to keycodes (see input.h) */
-	KEY_MENU,		/* 139 */
-	KEY_BACK,		/* 158 */
-};
-
-static struct touch_settings cyttsp4_sett_btn_keys = {
-	.data = (uint8_t *)&cyttsp4_btn_keys[0],
-	.size = ARRAY_SIZE(cyttsp4_btn_keys),
-	.tag = 0,
-};
-
-/* use this define to include auto boot image
- */
-#define CY_USE_INCLUDE_FBL
-#ifdef CY_USE_INCLUDE_FBL
+#ifdef CONFIG_TOUCHSCREEN_CYPRESS_CYTTSP4_INCLUDE_FW
 #include "cyttsp4_img.h"
-static struct touch_firmware cyttsp4_firmware = {
+static struct cyttsp4_touch_firmware cyttsp4_firmware = {
 	.img = cyttsp4_img,
 	.size = ARRAY_SIZE(cyttsp4_img),
 	.ver = cyttsp4_ver,
 	.vsize = ARRAY_SIZE(cyttsp4_ver),
 };
 #else
-static struct touch_firmware cyttsp4_firmware = {
+static struct cyttsp4_touch_firmware cyttsp4_firmware = {
 	.img = NULL,
 	.size = 0,
 	.ver = NULL,
@@ -1612,340 +1701,256 @@
 };
 #endif
 
-static const uint16_t cyttsp4_abs[] = {
-	ABS_MT_POSITION_X, CY_ABS_MIN_X, CY_ABS_MAX_X, 0, 0,
-	ABS_MT_POSITION_Y, CY_ABS_MIN_Y, CY_ABS_MAX_Y, 0, 0,
-	ABS_MT_PRESSURE, CY_ABS_MIN_P, CY_ABS_MAX_P, 0, 0,
-#ifdef CY_USE_TMA400
-	CY_IGNORE_VALUE, CY_ABS_MIN_W, CY_ABS_MAX_W, 0, 0,
-#endif /* --CY_USE_TMA400 */
-#ifndef CY_USE_TMA400
-	ABS_MT_TOUCH_MAJOR, CY_ABS_MIN_W, CY_ABS_MAX_W, 0, 0,
-#endif /* --CY_USE_TMA400 */
-	ABS_MT_TRACKING_ID, CY_ABS_MIN_T, CY_ABS_MAX_T, 0, 0,
-#ifdef CY_USE_TMA400_SP2
-#ifdef CY_USE_TMA400
-	ABS_MT_TOUCH_MAJOR, 0, 255, 0, 0,
-	ABS_MT_TOUCH_MINOR, 0, 255, 0, 0,
-	ABS_MT_ORIENTATION, -128, 127, 0, 0,
-#endif /* --CY_USE_TMA400 */
-#endif /* --CY_USE_TMA400_SP2 */
-};
+#define CYTTSP4_USE_I2C
 
-struct touch_framework cyttsp4_framework = {
-	.abs = (uint16_t *)&cyttsp4_abs[0],
-	.size = ARRAY_SIZE(cyttsp4_abs),
-	.enable_vkeys = 0,
-};
+#ifdef CYTTSP4_USE_I2C
+#define CYTTSP4_I2C_NAME "cyttsp4_i2c_adapter"
+#define CYTTSP4_I2C_TCH_ADR 0x24
+#define CYTTSP4_LDR_TCH_ADR 0x24
 
-static bool enabled;
-int TSP_VDD_18V(int on)
-{
-	struct regulator *regulator;
+#define CYTTSP4_I2C_IRQ_GPIO GPIO_TSP_INT
+#define TMA400_GPIO_TSP_INT GPIO_TSP_INT
 
-	if (enabled == on)
-		return 0;
+#define CYTTSP4_I2C_IRQ_UDELAY 0
+#endif
 
-	regulator = regulator_get(NULL, "touch_1.8v");
-	if (IS_ERR(regulator))
-		return PTR_ERR(regulator);
+#define CY_MAXX 480
+#define CY_MAXY 800
+#define CY_MINX 0
+#define CY_MINY 0
 
-	if (on) {
-		regulator_enable(regulator);
-		/*printk(KERN_INFO "[TSP] melfas power on\n"); */
-	} else {
-		/*
-		 * TODO: If there is a case the regulator must be disabled
-		 * (e,g firmware update?), consider regulator_force_disable.
-		 */
-		if (regulator_is_enabled(regulator))
-			regulator_disable(regulator);
-	}
+#define CY_ABS_MIN_X CY_MINX
+#define CY_ABS_MIN_Y CY_MINY
+#define CY_ABS_MAX_X CY_MAXX
+#define CY_ABS_MAX_Y CY_MAXY
+#define CY_ABS_MIN_P 0
+#define CY_ABS_MAX_P 255
+#define CY_ABS_MIN_W 0
+#define CY_ABS_MAX_W 255
 
-	enabled = on;
-	regulator_put(regulator);
+#define CY_ABS_MIN_T 0
 
-	return 0;
-}
+#define CY_ABS_MAX_T 15
 
-int melfas_power(int on)
+#define CY_IGNORE_VALUE 0xFFFF
+
+#define P_BOARD 0
+
+static bool enabled;
+
+int cyttsp4_hw_power(int on, int use_irq, int irq_gpio)
 {
+
 	struct regulator *regulator_vdd;
 	struct regulator *regulator_avdd;
-	int ret;
-	if (enabled == on)
-		return 0;
+	int ret = 0;
+
+	printk(KERN_INFO "%s : %d, on: %d\n", __func__, __LINE__, on);
 
 	regulator_vdd = regulator_get(NULL, "touch_1.8v");
-	if (IS_ERR(regulator_vdd))
-			return PTR_ERR(regulator_vdd);
+	if (IS_ERR(regulator_vdd)) {
+		ret = PTR_ERR(regulator_vdd);
+		goto exit;
+	}
 
 	regulator_avdd = regulator_get(NULL, "touch");
-	if (IS_ERR(regulator_avdd))
-		return PTR_ERR(regulator_avdd);
-
-	printk(KERN_DEBUG "[TSP] %s %s\n", __func__, on ? "on" : "off");
+	if (IS_ERR(regulator_avdd)) {
+		ret = PTR_ERR(regulator_avdd);
+		goto exit;
+	}
 
 	if (on) {
-		regulator_enable(regulator_vdd);
-		regulator_enable(regulator_avdd);
+		if (!regulator_is_enabled(regulator_vdd))
+			regulator_enable(regulator_vdd);
+		if (!regulator_is_enabled(regulator_avdd))
+			regulator_enable(regulator_avdd);
+
+		/* Enable the IRQ */
+		if (use_irq) {
+			enable_irq(gpio_to_irq(irq_gpio));
+			pr_debug("Enabled IRQ %d for TSP\n",
+				gpio_to_irq(irq_gpio));
+		}
 	} else {
-		/*
-		 * TODO: If there is a case the regulator must be disabled
-		 * (e,g firmware update?), consider regulator_force_disable.
-		 */
+		/* Disable the IRQ */
+		if (use_irq) {
+			pr_debug("Disabling IRQ %d for TSP\n",
+				gpio_to_irq(irq_gpio));
+			disable_irq_nosync(gpio_to_irq(irq_gpio));
+		}
+
 		if (regulator_is_enabled(regulator_vdd))
 			regulator_disable(regulator_vdd);
 		if (regulator_is_enabled(regulator_avdd))
 			regulator_disable(regulator_avdd);
 	}
 
-	enabled = on;
 	regulator_put(regulator_vdd);
 	regulator_put(regulator_avdd);
 
-	return 0;
+exit:
+	return ret;
 }
 
-int is_melfas_vdd_on(void)
+static int cyttsp4_xres(struct cyttsp4_core_platform_data *pdata,
+		struct device *dev)
 {
-	int ret;
-	/* 3.3V */
-	static struct regulator *regulator;
+	int irq_gpio = pdata->irq_gpio;
+	int rc = 0;
 
-	if (!regulator) {
-		regulator = regulator_get(NULL, "touch");
-		if (IS_ERR(regulator)) {
-			ret = PTR_ERR(regulator);
-			pr_err("could not get touch, rc = %d\n", ret);
-			return ret;
-		}
-	}
+	printk(KERN_INFO "%s : %d\n", __func__, __LINE__);
 
-	if (regulator_is_enabled(regulator))
-		return 1;
-	else
-		return 0;
-}
+	cyttsp4_hw_power(0, true, irq_gpio);
 
-int melfas_mux_fw_flash(bool to_gpios)
-{
-	pr_info("%s:to_gpios=%d\n", __func__, to_gpios);
+	/* Delay for 10 msec */
+	mdelay(10);
 
-	/* TOUCH_EN is always an output */
-	if (to_gpios) {
-		if (gpio_request(GPIO_TSP_SCL_18V, "GPIO_TSP_SCL"))
-			pr_err("failed to request gpio(GPIO_TSP_SCL)\n");
-		if (gpio_request(GPIO_TSP_SDA_18V, "GPIO_TSP_SDA"))
-			pr_err("failed to request gpio(GPIO_TSP_SDA)\n");
+	cyttsp4_hw_power(1, true, irq_gpio);
 
-		gpio_direction_output(GPIO_TSP_INT, 0);
-		s3c_gpio_cfgpin(GPIO_TSP_INT, S3C_GPIO_OUTPUT);
-		s3c_gpio_setpull(GPIO_TSP_INT, S3C_GPIO_PULL_NONE);
+	return rc;
+}
 
-		gpio_direction_output(GPIO_TSP_SCL_18V, 0);
-		s3c_gpio_cfgpin(GPIO_TSP_SCL_18V, S3C_GPIO_OUTPUT);
-		s3c_gpio_setpull(GPIO_TSP_SCL_18V, S3C_GPIO_PULL_NONE);
+static int cyttsp4_init(struct cyttsp4_core_platform_data *pdata,
+		int on, struct device *dev)
+{
+	int irq_gpio = pdata->irq_gpio;
+	int rc = 0;
 
-		gpio_direction_output(GPIO_TSP_SDA_18V, 0);
-		s3c_gpio_cfgpin(GPIO_TSP_SDA_18V, S3C_GPIO_OUTPUT);
-		s3c_gpio_setpull(GPIO_TSP_SDA_18V, S3C_GPIO_PULL_NONE);
+	printk(KERN_INFO "%s : %d\n", __func__, __LINE__);
+
+	if (on) {
+		rc = gpio_request(irq_gpio, NULL);
+		if (rc < 0) {
+			gpio_free(irq_gpio);
+			rc = gpio_request(irq_gpio, NULL);
+		}
+		if (rc < 0)
+			dev_err(dev, "%s: Fail request gpio=%d\n",
+				__func__, irq_gpio);
+		else
+			gpio_direction_input(irq_gpio);
 
+		cyttsp4_hw_power(1, false, 0);
 	} else {
-		gpio_direction_output(GPIO_TSP_INT, 1);
-		gpio_direction_input(GPIO_TSP_INT);
-		s3c_gpio_cfgpin(GPIO_TSP_INT, S3C_GPIO_SFN(0xf));
-		/*s3c_gpio_cfgpin(GPIO_TSP_INT, S3C_GPIO_INPUT); */
-		s3c_gpio_setpull(GPIO_TSP_INT, S3C_GPIO_PULL_NONE);
-		/*S3C_GPIO_PULL_UP */
+		cyttsp4_hw_power(0, false, 0);
+		gpio_free(irq_gpio);
+	}
 
-		gpio_direction_output(GPIO_TSP_SCL_18V, 1);
-		gpio_direction_input(GPIO_TSP_SCL_18V);
-		s3c_gpio_cfgpin(GPIO_TSP_SCL_18V, S3C_GPIO_SFN(3));
-		s3c_gpio_setpull(GPIO_TSP_SCL_18V, S3C_GPIO_PULL_NONE);
+	dev_info(dev, "%s: INIT CYTTSP IRQ gpio=%d r=%d\n",
+			__func__, irq_gpio, rc);
 
-		gpio_direction_output(GPIO_TSP_SDA_18V, 1);
-		gpio_direction_input(GPIO_TSP_SDA_18V);
-		s3c_gpio_cfgpin(GPIO_TSP_SDA_18V, S3C_GPIO_SFN(3));
-		s3c_gpio_setpull(GPIO_TSP_SDA_18V, S3C_GPIO_PULL_NONE);
-
-		gpio_free(GPIO_TSP_SCL_18V);
-		gpio_free(GPIO_TSP_SDA_18V);
-	}
-	return 0;
+	return rc;
 }
 
-void melfas_set_touch_i2c(void)
+static int cyttsp4_wakeup(struct cyttsp4_core_platform_data *pdata,
+		struct device *dev, atomic_t *ignore_irq)
 {
-	s3c_gpio_cfgpin(GPIO_TSP_SDA_18V, S3C_GPIO_SFN(3));
-	s3c_gpio_setpull(GPIO_TSP_SDA_18V, S3C_GPIO_PULL_UP);
-	s3c_gpio_cfgpin(GPIO_TSP_SCL_18V, S3C_GPIO_SFN(3));
-	s3c_gpio_setpull(GPIO_TSP_SCL_18V, S3C_GPIO_PULL_UP);
-	gpio_free(GPIO_TSP_SDA_18V);
-	gpio_free(GPIO_TSP_SCL_18V);
-	s3c_gpio_cfgpin(GPIO_TSP_INT, S3C_GPIO_SFN(0xf));
-	/* s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP); */
-	s3c_gpio_setpull(GPIO_TSP_INT, S3C_GPIO_PULL_NONE);
-}
+	int irq_gpio = pdata->irq_gpio;
 
-void melfas_set_touch_i2c_to_gpio(void)
-{
-	int ret;
-	s3c_gpio_cfgpin(GPIO_TSP_SDA_18V, S3C_GPIO_OUTPUT);
-	s3c_gpio_setpull(GPIO_TSP_SDA_18V, S3C_GPIO_PULL_UP);
-	s3c_gpio_cfgpin(GPIO_TSP_SCL_18V, S3C_GPIO_OUTPUT);
-	s3c_gpio_setpull(GPIO_TSP_SCL_18V, S3C_GPIO_PULL_UP);
-	ret = gpio_request(GPIO_TSP_SDA_18V, "GPIO_TSP_SDA");
-	if (ret)
-		pr_err("failed to request gpio(GPIO_TSP_SDA)\n");
-	ret = gpio_request(GPIO_TSP_SCL_18V, "GPIO_TSP_SCL");
-	if (ret)
-		pr_err("failed to request gpio(GPIO_TSP_SCL)\n");
+	printk(KERN_INFO "%s : %d\n", __func__, __LINE__);
 
+	return cyttsp4_hw_power(1, true, irq_gpio);
 }
 
-int get_lcd_type;
-void __init midas_tsp_set_lcdtype(int lcd_type)
+static int cyttsp4_sleep(struct cyttsp4_core_platform_data *pdata,
+		struct device *dev, atomic_t *ignore_irq)
 {
-	get_lcd_type = lcd_type;
-}
+	int irq_gpio = pdata->irq_gpio;
 
-int melfas_get_lcdtype(void)
-{
-	return get_lcd_type;
-}
-struct tsp_callbacks *charger_callbacks;
-struct tsp_callbacks {
-	void (*inform_charger)(struct tsp_callbacks *, bool);
-};
+	printk(KERN_INFO "%s : %d\n", __func__, __LINE__);
 
-void tsp_charger_infom(bool en)
-{
-	if (charger_callbacks && charger_callbacks->inform_charger)
-		charger_callbacks->inform_charger(charger_callbacks, en);
+	return cyttsp4_hw_power(0, true, irq_gpio);
 }
 
-static void melfas_register_callback(void *cb)
+static int cyttsp4_power(struct cyttsp4_core_platform_data *pdata,
+		int on, struct device *dev, atomic_t *ignore_irq)
 {
-	charger_callbacks = cb;
-	pr_debug("[TSP] melfas_register_callback\n");
+	if (on)
+		return cyttsp4_wakeup(pdata, dev, ignore_irq);
+	else
+		return cyttsp4_sleep(pdata, dev, ignore_irq);
 }
 
-int cyttsp4_hw_reset(void)
+static int cyttsp4_irq_stat(struct cyttsp4_core_platform_data *pdata,
+		struct device *dev)
 {
-	struct regulator *regulator;
-	int ret = 0;
-
-	regulator = regulator_get(NULL, "touch");
-
-	regulator_enable(regulator);
-	TSP_VDD_18V(1);
-	mdelay(20);
+	int irq_stat = 0;
+	int retval = 0;
 
-	if (regulator_is_enabled(regulator)) {
-		regulator_disable(regulator);
-		TSP_VDD_18V(0);
+	retval = gpio_request(TMA400_GPIO_TSP_INT, NULL);
+	if (retval < 0) {
+		pr_err("%s: Fail request IRQ pin r=%d\n", __func__, retval);
+		pr_err("%s: Try free IRQ gpio=%d\n", __func__,
+			TMA400_GPIO_TSP_INT);
+		gpio_free(TMA400_GPIO_TSP_INT);
+		retval = gpio_request(TMA400_GPIO_TSP_INT, NULL);
+		if (retval < 0) {
+			pr_err("%s: Fail 2nd request IRQ pin r=%d\n",
+				__func__, retval);
+		}
 	}
-	mdelay(40);
-
-	regulator_enable(regulator);
-	TSP_VDD_18V(1);
-	mdelay(20);
 
-	regulator_put(regulator);
+	if (!(retval < 0)) {
+		irq_stat = gpio_get_value(TMA400_GPIO_TSP_INT);
+		gpio_free(TMA400_GPIO_TSP_INT);
+	}
 
-	return ret;
+	return irq_stat;
+#if P_BOARD
+	return gpio_get_value(pdata->irq_gpio);
+#endif
 }
 
-int cyttsp4_hw_power(int on)
+int cyttsp4_led_power(int on)
 {
-	struct regulator *regulator_vdd;
-	struct regulator *regulator_avdd;
-	int ret;
-
-	if (enabled == on)
-		return 0;
-
-	regulator_vdd = regulator_get(NULL, "touch_1.8v");
-	if (IS_ERR(regulator_vdd))
-		return PTR_ERR(regulator_vdd);
-
-	regulator_avdd = regulator_get(NULL, "touch");
-	if (IS_ERR(regulator_avdd))
-		return PTR_ERR(regulator_avdd);
-
-	printk(KERN_DEBUG "[TSP] %s %s\n", __func__, on ? "on" : "off");
+	printk(KERN_INFO "%s - on: %d\n", __func__, on);
 
 	if (on) {
-		regulator_enable(regulator_vdd);
-		regulator_enable(regulator_avdd);
-	} else {
-		if (regulator_is_enabled(regulator_vdd))
-			regulator_disable(regulator_vdd);
-		if (regulator_is_enabled(regulator_avdd))
-			regulator_disable(regulator_avdd);
-	}
-
-	enabled = on;
-	regulator_put(regulator_vdd);
-	regulator_put(regulator_avdd);
+		s3c_gpio_cfgpin(GPIO_LED_VDD_EN, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_LED_VDD_EN, S3C_GPIO_PULL_NONE);
+		gpio_direction_output(GPIO_LED_VDD_EN, GPIO_LEVEL_HIGH);
+		mdelay(1);
+
+		s3c_gpio_cfgpin(GPIO_KEY_LED_CTRL, S3C_GPIO_OUTPUT);
+		s3c_gpio_setpull(GPIO_KEY_LED_CTRL, S3C_GPIO_PULL_NONE);
+		gpio_direction_output(GPIO_KEY_LED_CTRL, GPIO_LEVEL_HIGH);
 
-	return 0;
-}
+		return 1;
+	} else {
+		s3c_gpio_setpull(GPIO_KEY_LED_CTRL, S3C_GPIO_PULL_NONE);
+		gpio_direction_output(GPIO_KEY_LED_CTRL, GPIO_LEVEL_LOW);
+		mdelay(1);
 
-#define CY_WAKE_DFLT                99	/* causes wake strobe on INT line
-					 * in sample board configuration
-					 * platform data->hw_recov() function
-					 */
-int cyttsp4_hw_recov(int on)
-{
-	int retval = 0;
-	int gpio;
-	int ret;
+		s3c_gpio_setpull(GPIO_LED_VDD_EN, S3C_GPIO_PULL_NONE);
+		gpio_direction_output(GPIO_LED_VDD_EN, GPIO_LEVEL_LOW);
 
-	switch (on) {
-	case 0:
-		cyttsp4_hw_reset();
-		retval = 0;
-		break;
-	case CY_WAKE_DFLT:
-		gpio = GPIO_TSP_INT;
-		ret = gpio_request(gpio, "TSP_INT");
-		retval = gpio_direction_output(gpio, 0);
-		if (retval < 0) {
-			pr_err("%s: Fail switch IRQ pin to OUT r=%d\n",
-				__func__, retval);
-		} else {
-			udelay(2000);
-			retval = gpio_direction_input(gpio);
-			if (retval < 0) {
-				pr_err("%s: Fail switch IRQ pin to IN"
-					" r=%d\n", __func__, retval);
-			}
-		}
-		break;
-	default:
-		retval = -ENOSYS;
-		break;
+		return 1;
 	}
 
-	return retval;
+	return -1;
 }
 
-int cyttsp4_irq_stat(void)
-{
-	int irq_stat = 0;
-	int gpio;
-	int ret;
-
-	gpio = GPIO_TSP_INT;
-	ret = gpio_request(gpio, "TSP_INT");
-	irq_stat = gpio_get_value(gpio);
+/* Button to keycode conversion */
+static u16 cyttsp4_btn_keys[] = {
+	/* use this table to map buttons to keycodes (see input.h) */
+	KEY_MENU,		/* 139 */
+	KEY_BACK,		/* 158 */
+};
 
-	return irq_stat;
-}
+static struct touch_settings cyttsp4_sett_btn_keys = {
+	.data = (uint8_t *)&cyttsp4_btn_keys[0],
+	.size = ARRAY_SIZE(cyttsp4_btn_keys),
+	.tag = 0,
+};
 
-struct touch_platform_data cyttsp4_i2c_touch_platform_data = {
+static struct cyttsp4_core_platform_data _cyttsp4_core_platform_data = {
+	.irq_gpio = CYTTSP4_I2C_IRQ_GPIO,
+	.level_irq_udelay = CYTTSP4_I2C_IRQ_UDELAY,
+	.xres = cyttsp4_xres,
+	.init = cyttsp4_init,
+	.power = cyttsp4_power,
+	.irq_stat = cyttsp4_irq_stat,
+	.led_power = cyttsp4_led_power,
 	.sett = {
 		NULL,	/* Reserved */
 		NULL,	/* Command Registers */
@@ -1953,8 +1958,8 @@
 		NULL,	/* Cypress Data Record */
 		NULL,	/* Test Record */
 		NULL,	/* Panel Configuration Record */
-		&cyttsp4_sett_param_regs, /* &cyttsp4_sett_param_regs, */
-		&cyttsp4_sett_param_size, /* &cyttsp4_sett_param_size, */
+		NULL, /* &cyttsp4_sett_param_regs, */
+		NULL, /* &cyttsp4_sett_param_size, */
 		NULL,	/* Reserved */
 		NULL,	/* Reserved */
 		NULL,	/* Operational Configuration Record */
@@ -1964,30 +1969,95 @@
 		&cyttsp4_sett_btn_keys,	/* button-to-keycode table */
 	},
 	.fw = &cyttsp4_firmware,
+};
+
+static struct cyttsp4_core_info cyttsp4_core_device = {
+	.name = CYTTSP4_CORE_NAME,
+	.id = "main_ttsp_core",
+	.adap_id = CYTTSP4_I2C_NAME,
+	.platform_data = &_cyttsp4_core_platform_data,
+};
+
+static const uint16_t cyttsp4_abs[] = {
+	ABS_MT_POSITION_X, CY_ABS_MIN_X, CY_ABS_MAX_X, 0, 0,
+	ABS_MT_POSITION_Y, CY_ABS_MIN_Y, CY_ABS_MAX_Y, 0, 0,
+	ABS_MT_PRESSURE, CY_ABS_MIN_P, CY_ABS_MAX_P, 0, 0,
+	CY_IGNORE_VALUE, CY_ABS_MIN_W, CY_ABS_MAX_W, 0, 0,
+	ABS_MT_TRACKING_ID, CY_ABS_MIN_T, CY_ABS_MAX_T, 0, 0,
+	ABS_MT_TOUCH_MAJOR, 0, 255, 0, 0,
+	ABS_MT_TOUCH_MINOR, 0, 255, 0, 0,
+	ABS_MT_ORIENTATION, -128, 127, 0, 0,
+};
+
+struct touch_framework cyttsp4_framework = {
+	.abs = (uint16_t *)&cyttsp4_abs[0],
+	.size = ARRAY_SIZE(cyttsp4_abs),
+	.enable_vkeys = 0,
+};
+
+static struct cyttsp4_mt_platform_data _cyttsp4_mt_platform_data = {
 	.frmwrk = &cyttsp4_framework,
-	.addr = {CY_I2C_TCH_ADR, CY_I2C_LDR_ADR},
 	.flags = 0x00,
-	.hw_reset = cyttsp4_hw_reset,
-	.hw_power = cyttsp4_hw_power,
-	.hw_recov = cyttsp4_hw_recov,
-	.irq_stat = cyttsp4_irq_stat,
+	.inp_dev_name = CYTTSP4_MT_NAME,
 };
 
-static struct i2c_board_info i2c_devs3[] = {
-	{
-		I2C_BOARD_INFO(CY_I2C_NAME, CY_I2C_TCH_ADR),
-		.platform_data = &cyttsp4_i2c_touch_platform_data
-	},
+struct cyttsp4_device_info cyttsp4_mt_device = {
+	.name = CYTTSP4_MT_NAME,
+	.core_id = "main_ttsp_core",
+	.platform_data = &_cyttsp4_mt_platform_data,
 };
 
-void __init midas_tsp_set_platdata(struct touch_platform_data *pdata)
-{
-	if (!pdata)
-		pdata = &cyttsp4_i2c_touch_platform_data;
+static struct cyttsp4_btn_platform_data _cyttsp4_btn_platform_data = {
+	.inp_dev_name = CYTTSP4_BTN_NAME,
+};
 
-	i2c_devs3[0].platform_data = pdata;
+struct cyttsp4_device_info cyttsp4_btn_device = {
+	.name = CYTTSP4_BTN_NAME,
+	.core_id = "main_ttsp_core",
+	.platform_data = &_cyttsp4_btn_platform_data,
+};
+
+#ifdef CYTTSP4_VIRTUAL_KEYS
+static ssize_t cyttps4_virtualkeys_show(struct kobject *kobj,
+		struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf,
+		__stringify(EV_KEY) ":"
+		__stringify(KEY_BACK) ":1360:90:160:180"
+		":" __stringify(EV_KEY) ":"
+		__stringify(KEY_MENU) ":1360:270:160:180"
+		":" __stringify(EV_KEY) ":"
+		__stringify(KEY_HOME) ":1360:450:160:180"
+		":" __stringify(EV_KEY) ":"
+		__stringify(KEY_SEARCH) ":1360:630:160:180"
+		"\n");
 }
 
+static struct kobj_attribute cyttsp4_virtualkeys_attr = {
+	.attr = {
+		.name = "virtualkeys.cyttsp4_mt",
+		.mode = S_IRUGO,
+	},
+	.show = &cyttps4_virtualkeys_show,
+};
+
+static struct attribute *cyttsp4_properties_attrs[] = {
+	&cyttsp4_virtualkeys_attr.attr,
+	NULL
+};
+
+static struct attribute_group cyttsp4_properties_attr_group = {
+	.attrs = cyttsp4_properties_attrs,
+};
+#endif
+
+static struct i2c_board_info i2c_devs3[] = {
+	{
+		I2C_BOARD_INFO(CYTTSP4_I2C_NAME, CYTTSP4_I2C_TCH_ADR),
+		.platform_data = CYTTSP4_I2C_NAME,
+	},
+};
+
 void __init midas_tsp_init(void)
 {
 	int gpio;
@@ -1996,6 +2066,7 @@
 
 	/* TSP_INT: XEINT_4 */
 	gpio = GPIO_TSP_INT;
+
 	ret = gpio_request(gpio, "TSP_INT");
 	if (ret)
 		pr_err("failed to request gpio(TSP_INT)\n");
@@ -2004,11 +2075,27 @@
 	s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
 
 	s5p_register_gpio_interrupt(gpio);
+	gpio_direction_input(gpio);
+
 	i2c_devs3[0].irq = gpio_to_irq(gpio);
 
 	printk(KERN_INFO "%s touch : %d\n", __func__, i2c_devs3[0].irq);
 
 	i2c_register_board_info(3, i2c_devs3, ARRAY_SIZE(i2c_devs3));
+
+	gpio = GPIO_LED_VDD_EN;
+	ret = gpio_request(gpio, "LED_VDD_EN");
+	if (ret)
+		pr_err("failed to request gpio(LED_VDD_EN)\n");
+
+	gpio = GPIO_KEY_LED_CTRL;
+	ret = gpio_request(gpio, "KEY_LED_CTRL");
+	if (ret)
+		pr_err("failed to request gpio(KEY_LED_CTRL)\n");
+
+	cyttsp4_register_core_device(&cyttsp4_core_device);
+	cyttsp4_register_device(&cyttsp4_mt_device);
+	cyttsp4_register_device(&cyttsp4_btn_device);
 }
 
 #else /* CONFIG_TOUCHSCREEN_ATMEL_MXT224_U1 */
@@ -2184,8 +2271,13 @@
 static struct melfas_tsi_platform_data mms_ts_pdata = {
 	.max_x = 720,
 	.max_y = 1280,
+#if defined(CONFIG_MACH_M3_USA_TMO)
+	.invert_x = 1,
+	.invert_y = 1,
+#else
 	.invert_x = 0,
 	.invert_y = 0,
+#endif
 	.gpio_int = GPIO_TSP_INT,
 	.gpio_scl = GPIO_TSP_SCL_18V,
 	.gpio_sda = GPIO_TSP_SDA_18V,
@@ -2247,8 +2339,6 @@
 {
 	cpufreq_ondemand_flexrate_request(10000, 10);
 }
-static DECLARE_WORK(flex_work, flexrate_work);
-#endif
 
 #include <linux/pm_qos_params.h>
 static struct pm_qos_request_list busfreq_qos;
@@ -2257,14 +2347,13 @@
 	pm_qos_update_request(&busfreq_qos, 0);
 }
 
+static DECLARE_WORK(flex_work, flexrate_work);
 static DECLARE_DELAYED_WORK(busqos_work, flexrate_qos_cancel);
 
 void midas_tsp_request_qos(void *data)
 {
-#ifdef CONFIG_CPU_FREQ_GOV_ONDEMAND_FLEXRATE
 	if (!work_pending(&flex_work))
 		schedule_work_on(0, &flex_work);
-#endif
 
 	/* Guarantee that the bus runs at >= 266MHz */
 	if (!pm_qos_request_active(&busfreq_qos))
@@ -2278,3 +2367,4 @@
 	/* Cancel the QoS request after 1/10 sec */
 	schedule_delayed_work_on(0, &busqos_work, HZ / 5);
 }
+#endif
diff -Naur ./arch/arm/mach-exynos/midas-wacom.c ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-wacom.c
--- ./arch/arm/mach-exynos/midas-wacom.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/midas-wacom.c	2012-11-22 09:13:16.000000000 +0100
@@ -0,0 +1,242 @@
+/*
+ * linux/arch/arm/mach-exynos/midas-wacom.c
+ *
+ * Copyright (c) 2011 Samsung Electronics Co., Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/i2c.h>
+
+#include <linux/err.h>
+#include <linux/gpio.h>
+
+#include <linux/wacom_i2c.h>
+
+#include <linux/regulator/consumer.h>
+#include <plat/gpio-cfg.h>
+
+#ifdef CONFIG_CPU_FREQ_GOV_ONDEMAND_FLEXRATE
+#include <linux/cpufreq.h>
+#endif
+
+static struct wacom_g5_callbacks *wacom_callbacks;
+
+#ifdef CONFIG_MACH_KONA
+#define GPIO_WACOM_LDO_EN	GPIO_PEN_LDO_EN
+#define GPIO_WACOM_SENSE	GPIO_PEN_DETECT
+#endif
+
+static int wacom_early_suspend_hw(void)
+{
+#ifndef CONFIG_MACH_KONA
+	gpio_set_value(GPIO_PEN_RESET_N, 0);
+#endif
+#if defined(CONFIG_MACH_T0_EUR_OPEN) || defined(CONFIG_MACH_T0_CHN_OPEN)
+	if (system_rev >= 10)
+		gpio_direction_output(GPIO_WACOM_LDO_EN, 0);
+	else
+		gpio_direction_output(GPIO_WACOM_LDO_EN, 1);
+#else
+	gpio_direction_output(GPIO_WACOM_LDO_EN, 0);
+#endif
+	/* Set GPIO_PEN_IRQ to pull-up to reduce leakage */
+	s3c_gpio_setpull(GPIO_PEN_IRQ, S3C_GPIO_PULL_UP);
+
+	return 0;
+}
+
+static int wacom_late_resume_hw(void)
+{
+	s3c_gpio_setpull(GPIO_PEN_IRQ, S3C_GPIO_PULL_NONE);
+	gpio_direction_output(GPIO_WACOM_LDO_EN, 1);
+	msleep(100);
+#ifndef CONFIG_MACH_KONA
+	gpio_set_value(GPIO_PEN_RESET_N, 1);
+#endif
+	return 0;
+}
+
+static int wacom_suspend_hw(void)
+{
+	return wacom_early_suspend_hw();
+}
+
+static int wacom_resume_hw(void)
+{
+	return wacom_late_resume_hw();
+}
+
+static int wacom_reset_hw(void)
+{
+	wacom_early_suspend_hw();
+	msleep(100);
+	wacom_late_resume_hw();
+
+	return 0;
+}
+
+static void wacom_register_callbacks(struct wacom_g5_callbacks *cb)
+{
+	wacom_callbacks = cb;
+};
+
+#ifdef WACOM_HAVE_FWE_PIN
+static void wacom_compulsory_flash_mode(bool en)
+{
+	gpio_set_value(GPIO_PEN_FWE1, en);
+}
+#endif
+
+
+static struct wacom_g5_platform_data wacom_platform_data = {
+	.x_invert = 1,
+	.y_invert = 0,
+	.xy_switch = 1,
+	.min_x = 0,
+	.max_x = WACOM_POSX_MAX,
+	.min_y = 0,
+	.max_y = WACOM_POSY_MAX,
+	.min_pressure = 0,
+	.max_pressure = WACOM_PRESSURE_MAX,
+	.gpio_pendct = GPIO_PEN_PDCT,
+#ifdef WACOM_STATE_CHECK
+#if defined(CONFIG_TARGET_LOCALE_KOR)
+#if defined(CONFIG_MACH_T0) && defined(CONFIG_TDMB_ANT_DET)
+	.gpio_esd_check = GPIO_TDMB_ANT_DET_REV08,
+#endif
+#endif
+#endif
+	/*.init_platform_hw = midas_wacom_init,*/
+	/*      .exit_platform_hw =,    */
+	.suspend_platform_hw = wacom_suspend_hw,
+	.resume_platform_hw = wacom_resume_hw,
+	.early_suspend_platform_hw = wacom_early_suspend_hw,
+	.late_resume_platform_hw = wacom_late_resume_hw,
+	.reset_platform_hw = wacom_reset_hw,
+	.register_cb = wacom_register_callbacks,
+#ifdef WACOM_HAVE_FWE_PIN
+	.compulsory_flash_mode = wacom_compulsory_flash_mode,
+#endif
+#ifdef WACOM_PEN_DETECT
+	.gpio_pen_insert = GPIO_WACOM_SENSE,
+#endif
+};
+
+/* I2C Setting */
+#if defined(CONFIG_MACH_KONA)
+/* I2C6 */
+static struct i2c_board_info i2c_devs6[] __initdata = {
+	{
+		I2C_BOARD_INFO("wacom_g5sp_i2c", 0x56),
+			.platform_data = &wacom_platform_data,
+	},
+};
+#elif defined(CONFIG_MACH_T0)
+#if defined(CONFIG_MACH_T0_EUR_OPEN) ||\
+	(defined(CONFIG_TARGET_LOCALE_CHN) && !defined(CONFIG_MACH_T0_CHN_CTC))
+/* I2C5 */
+static struct i2c_board_info i2c_devs5[] __initdata = {
+	{
+		I2C_BOARD_INFO("wacom_g5sp_i2c", 0x56),
+			.platform_data = &wacom_platform_data,
+	},
+};
+#else
+/* I2C2 */
+static struct i2c_board_info i2c_devs2[] __initdata = {
+	{
+		I2C_BOARD_INFO("wacom_g5sp_i2c", 0x56),
+		.platform_data = &wacom_platform_data,
+	},
+};
+#endif
+#endif
+
+void __init midas_wacom_init(void)
+{
+	int gpio;
+	int ret;
+
+#ifndef CONFIG_MACH_KONA
+	/*RESET*/
+	gpio = GPIO_PEN_RESET_N;
+	ret = gpio_request(gpio, "PEN_RESET");
+	s3c_gpio_cfgpin(gpio, S3C_GPIO_OUTPUT);
+	gpio_direction_output(gpio, 0);
+#endif
+
+	/*SLP & FWE1*/
+#ifdef CONFIG_MACH_T0
+	if (system_rev < WACOM_FWE1_HWID) {
+		printk(KERN_INFO "[E-PEN] Use SLP\n");
+		gpio = GPIO_PEN_SLP;
+		ret = gpio_request(gpio, "PEN_SLP");
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(0x1));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+	} else {
+		printk(KERN_INFO "[E-PEN] Use FWE\n");
+		gpio = GPIO_PEN_FWE1;
+		ret = gpio_request(gpio, "PEN_FWE1");
+		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(0x1));
+		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+	}
+#elif defined(CONFIG_MACH_KONA)
+	printk(KERN_INFO "[E-PEN] Use FWE\n");
+	gpio = GPIO_PEN_FWE1;
+	ret = gpio_request(gpio, "PEN_FWE1");
+	s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(0x1));
+	s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+#endif
+	gpio_direction_output(gpio, 0);
+
+	/*PDCT*/
+	gpio = GPIO_PEN_PDCT;
+	ret = gpio_request(gpio, "PEN_PDCT");
+	s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(0xf));
+	s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
+	s5p_register_gpio_interrupt(gpio);
+	gpio_direction_input(gpio);
+
+	irq_set_irq_type(gpio_to_irq(gpio), IRQ_TYPE_EDGE_BOTH);
+
+	/*IRQ*/
+	gpio = GPIO_PEN_IRQ;
+	ret = gpio_request(gpio, "PEN_IRQ");
+	s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+	s5p_register_gpio_interrupt(gpio);
+	gpio_direction_input(gpio);
+
+#if defined(CONFIG_MACH_KONA)
+	i2c_devs6[0].irq = gpio_to_irq(gpio);
+	irq_set_irq_type(i2c_devs6[0].irq, IRQ_TYPE_EDGE_RISING);
+#elif defined(CONFIG_MACH_T0_EUR_OPEN) ||\
+	(defined(CONFIG_TARGET_LOCALE_CHN) && !defined(CONFIG_MACH_T0_CHN_CTC))
+	i2c_devs5[0].irq = gpio_to_irq(gpio);
+	irq_set_irq_type(i2c_devs5[0].irq, IRQ_TYPE_EDGE_RISING);
+#else
+	i2c_devs2[0].irq = gpio_to_irq(gpio);
+	irq_set_irq_type(i2c_devs2[0].irq, IRQ_TYPE_EDGE_RISING);
+#endif
+
+	s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(0xf));
+
+	/*LDO_EN*/
+	gpio = GPIO_WACOM_LDO_EN;
+	ret = gpio_request(gpio, "PEN_LDO_EN");
+	s3c_gpio_cfgpin(gpio, S3C_GPIO_OUTPUT);
+	gpio_direction_output(gpio, 0);
+
+#if defined(CONFIG_MACH_KONA)
+	i2c_register_board_info(6, i2c_devs6, ARRAY_SIZE(i2c_devs6));
+#elif defined(CONFIG_MACH_T0_EUR_OPEN) ||\
+	(defined(CONFIG_TARGET_LOCALE_CHN) && !defined(CONFIG_MACH_T0_CHN_CTC))
+	i2c_register_board_info(5, i2c_devs5, ARRAY_SIZE(i2c_devs5));
+#else
+	i2c_register_board_info(2, i2c_devs2, ARRAY_SIZE(i2c_devs2));
+#endif
+
+	printk(KERN_INFO "[E-PEN] : wacom IC initialized.\n");
+}
diff -Naur ./arch/arm/mach-exynos/p10-battery.c ../../HK_JB/Kernel/arch/arm/mach-exynos/p10-battery.c
--- ./arch/arm/mach-exynos/p10-battery.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/p10-battery.c	2012-11-22 09:13:16.000000000 +0100
@@ -0,0 +1,511 @@
+/*
+ * Copyright (C) 2012 Samsung Electronics, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/irq.h>
+#include <linux/i2c.h>
+#include <linux/i2c-gpio.h>
+#include <linux/gpio.h>
+
+#include <mach/gpio-p10.h>
+#include <mach/regs-pmu.h>	/* S5P_INFORMX */
+
+#include <plat/gpio-cfg.h>
+
+#ifdef CONFIG_STMPE811_ADC
+#include <linux/stmpe811-adc.h>
+#endif
+
+#if defined(CONFIG_BATTERY_SAMSUNG_P1X)
+#include <linux/battery/sec_battery.h>
+#include <linux/battery/sec_fuelgauge.h>
+#include <linux/battery/sec_charger.h>
+
+#define SEC_BATTERY_PMIC_NAME ""
+#define SEC_FUELGAUGE_I2C_ID 9
+#define SEC_CHARGER_I2C_ID 10
+
+static bool sec_bat_adc_none_init(struct platform_device *pdev) { return true; }
+static bool sec_bat_adc_none_exit(void) { return true; }
+static int sec_bat_adc_none_read(unsigned int channel) { return 0; }
+
+static bool sec_bat_adc_ap_init(struct platform_device *pdev) { return true; }
+static bool sec_bat_adc_ap_exit(void) { return true; }
+static int sec_bat_adc_ap_read(unsigned int channel) { return 0; }
+
+/* CHECK ME */
+#define SMTPE811_CHANNEL_ADC_CHECK_1	6
+#define SMTPE811_CHANNEL_VICHG		4	/* Not supported in P10 */
+
+static bool sec_bat_adc_ic_init(struct platform_device *pdev) { return true; }
+static bool sec_bat_adc_ic_exit(void) { return true; }
+static int sec_bat_adc_ic_read(unsigned int channel)
+{
+	int data = 0;
+	int max_voltage = 3300;
+
+	switch (channel) {
+	case SEC_BAT_ADC_CHANNEL_CABLE_CHECK:
+		data = stmpe811_get_adc_data(SMTPE811_CHANNEL_ADC_CHECK_1);
+		data = data * max_voltage / 4095;	/* 4096 ? */
+		break;
+	}
+
+	return data;
+}
+
+static bool sec_bat_gpio_init(void)
+{
+#if defined(CONFIG_MACH_P10_LTE_00_BD) || defined(CONFIG_MACH_P10_WIFI_00_BD)
+	s3c_gpio_cfgpin(GPIO_TA_nCONNECTED, S3C_GPIO_INPUT);
+	s3c_gpio_setpull(GPIO_TA_nCONNECTED, S3C_GPIO_PULL_NONE);
+#else
+	/* IRQ to detect cable insertion and removal */
+	s3c_gpio_cfgpin(GPIO_TA_INT, S3C_GPIO_INPUT);
+	s3c_gpio_setpull(GPIO_TA_INT, S3C_GPIO_PULL_NONE);
+#endif
+
+	return true;
+}
+
+static bool sec_fg_gpio_init(void)
+{
+	/* IRQ to detect low battery from fuel gauge */
+	s3c_gpio_cfgpin(GPIO_FUEL_ALERT, S3C_GPIO_INPUT);
+	s3c_gpio_setpull(GPIO_FUEL_ALERT, S3C_GPIO_PULL_UP);
+
+	return true;
+}
+
+static bool sec_chg_gpio_init(void)
+{
+	s3c_gpio_cfgpin(GPIO_TA_EN, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_TA_EN, S3C_GPIO_PULL_UP);
+/*	gpio_set_value(GPIO_TA_EN, 1); */
+
+	s3c_gpio_cfgpin(GPIO_TA_nCHG, S3C_GPIO_INPUT);
+	s3c_gpio_setpull(GPIO_TA_nCHG, S3C_GPIO_PULL_UP);
+
+#if defined(CONFIG_MACH_P10_LTE_00_BD) || defined(CONFIG_MACH_P10_WIFI_00_BD)
+	/* GPIO_CHG_INT not supported */
+#else
+	/* IRQ to detect charger status change */
+	s3c_gpio_cfgpin(GPIO_CHG_INT, S3C_GPIO_INPUT);
+	s3c_gpio_setpull(GPIO_CHG_INT, S3C_GPIO_PULL_UP);
+#endif
+
+	return true;
+}
+
+static bool sec_bat_is_lpm(void)
+{
+	u32 val = __raw_readl(S5P_INFORM2);
+
+	pr_info("%s: LP charging: (INFORM2) 0x%x\n", __func__, val);
+
+	if (val == 0x1)
+		return true;
+
+	return false;
+}
+
+static void sec_bat_initial_check(void)
+{
+	struct power_supply *psy = power_supply_get_by_name("battery");
+	union power_supply_propval value;
+	int ret = 0;
+
+	value.intval = gpio_get_value(GPIO_TA_nCONNECTED);
+	pr_debug("%s: %d\n", __func__, value.intval);
+
+	ret = psy->set_property(psy, POWER_SUPPLY_PROP_ONLINE, &value);
+	if (ret) {
+		pr_err("%s: fail to set power_suppy ONLINE property(%d)\n",
+			__func__, ret);
+	}
+}
+
+static bool sec_bat_check_jig_status(void)
+{
+	/* TODO: */
+	return false;
+}
+
+static void sec_bat_switch_to_check(void)
+{
+	pr_debug("%s\n", __func__);
+
+	s3c_gpio_cfgpin(GPIO_USB_SEL1, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_USB_SEL1, S3C_GPIO_PULL_NONE);
+	gpio_set_value(GPIO_USB_SEL1, 0);
+
+	mdelay(300);
+}
+
+static void sec_bat_switch_to_normal(void)
+{
+	pr_debug("%s\n", __func__);
+
+	s3c_gpio_cfgpin(GPIO_USB_SEL1, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_USB_SEL1, S3C_GPIO_PULL_NONE);
+	gpio_set_value(GPIO_USB_SEL1, 1);
+}
+
+static int current_cable_type = POWER_SUPPLY_TYPE_BATTERY;
+
+static int sec_bat_check_cable_callback(void)
+{
+	return current_cable_type;
+}
+
+static bool sec_bat_check_cable_result_callback(
+				int cable_type)
+{
+	current_cable_type = cable_type;
+
+	switch (cable_type) {
+	case POWER_SUPPLY_TYPE_USB:
+		pr_info("%s set vbus applied\n",
+			__func__);
+		break;
+	case POWER_SUPPLY_TYPE_BATTERY:
+		pr_info("%s set vbus cut\n",
+			__func__);
+		break;
+	case POWER_SUPPLY_TYPE_MAINS:
+	default:
+		pr_err("%s cable type (%d)\n",
+			__func__, cable_type);
+		return false;
+	}
+
+	return true;
+}
+
+/* callback for battery check
+ * return : bool
+ * true - battery detected, false battery NOT detected
+ */
+static bool sec_bat_check_callback(void) { return true; }
+static bool sec_bat_check_result_callback(void) { return true; }
+
+/* callback for OVP/UVLO check
+ * return : int
+ * battery health
+ */
+static int sec_bat_ovp_uvlo_callback(void)
+{
+	int health;
+	health = POWER_SUPPLY_HEALTH_GOOD;
+
+	return health;
+}
+
+static bool sec_bat_ovp_uvlo_result_callback(int health) { return true; }
+
+/*
+ * val.intval : temperature
+ */
+static bool sec_bat_get_temperature_callback(
+		enum power_supply_property psp,
+		union power_supply_propval *val) { return true; }
+
+static bool sec_fg_fuelalert_process(bool is_fuel_alerted) { return true; }
+
+/* ADC region should be exclusive */
+static sec_bat_adc_region_t cable_adc_value_table[] = {
+	{ 0,	500 },	/* POWER_SUPPLY_TYPE_BATTERY */
+	{ 0,	0 },	/* POWER_SUPPLY_TYPE_UPS */
+	{ 1000,	1500 },	/* POWER_SUPPLY_TYPE_MAINS */
+	{ 0,	0 },	/* POWER_SUPPLY_TYPE_USB */
+	{ 0,	0 },	/* POWER_SUPPLY_TYPE_OTG */
+	{ 0,	0 },	/* POWER_SUPPLY_TYPE_DOCK */
+	{ 0,	0 },	/* POWER_SUPPLY_TYPE_MISC */
+};
+
+/* charging current (mA, 0 - NOT supported) */
+/* matching with power_supply_type in power_supply.h */
+static sec_charging_current_t charging_current_table[] = {
+	{0,	0,	0,	0},	/* POWER_SUPPLY_TYPE_BATTERY */
+	{0,	0,	0,	0},	/* POWER_SUPPLY_TYPE_UPS */
+	{2000,	2000,	256,	0},	/* POWER_SUPPLY_TYPE_MAINS */
+	{500,	500,	256,	0},	/* POWER_SUPPLY_TYPE_USB */
+	{500,	500,	256,	0},	/* POWER_SUPPLY_TYPE_USB_DCP */
+	{500,	500,	256,	0},	/* POWER_SUPPLY_TYPE_USB_CDP */
+	{500,	500,	256,	0},	/* POWER_SUPPLY_TYPE_USB_ACA */
+	{0,	0,	0,	0},	/* POWER_SUPPLY_TYPE_OTG */
+	{0,	0,	0,	0},	/* POWER_SUPPLY_TYPE_DOCK */
+	{500,	500,	256,	0},	/* POWER_SUPPLY_TYPE_MISC */
+	{0,	0,	0,	0},	/* POWER_SUPPLY_TYPE_WIRELESS */
+};
+
+/* unit: seconds */
+static int polling_time_table[] = {
+	10,	/* BASIC */
+	30,	/* CHARGING */
+	30,	/* DISCHARGING */
+	30,	/* NOT_CHARGING */
+	300,	/* SLEEP */
+};
+
+/* for MAX17050, MAX17047 */
+static struct battery_data_t p10_battery_data[] = {
+	/* SDI battery data */
+	{
+		.Capacity = 0x2008,
+		.low_battery_comp_voltage = 3600,
+		.low_battery_table = {
+			/* range, slope, offset */
+			{-5000,	0,	0},	/* dummy for top limit */
+			{-1250, 0,	3320},
+			{-750, 97,	3451},
+			{-100, 96,	3461},
+			{0, 0,	3456},
+		},
+		.temp_adjust_table = {
+			/* range, slope, offset */
+			{47000, 122,	8950},
+			{60000, 200,	51000},
+			{100000, 0,	0},	/* dummy for top limit */
+		},
+		.type_str = "SDI",
+	}
+};
+
+static sec_battery_platform_data_t sec_battery_pdata = {
+	/* NO NEED TO BE CHANGED */
+	.initial_check = sec_bat_initial_check,
+	.bat_gpio_init = sec_bat_gpio_init,
+	.fg_gpio_init = sec_fg_gpio_init,
+	.chg_gpio_init = sec_chg_gpio_init,
+
+	.is_lpm = sec_bat_is_lpm,
+	.check_jig_status = sec_bat_check_jig_status,
+	.check_cable_callback =
+		sec_bat_check_cable_callback,
+	.cable_switch_check = sec_bat_switch_to_check,
+	.cable_switch_normal = sec_bat_switch_to_normal,
+	.check_cable_result_callback =
+		sec_bat_check_cable_result_callback,
+	.check_battery_callback =
+		sec_bat_check_callback,
+	.check_battery_result_callback =
+		sec_bat_check_result_callback,
+	.ovp_uvlo_callback = sec_bat_ovp_uvlo_callback,
+	.ovp_uvlo_result_callback =
+		sec_bat_ovp_uvlo_result_callback,
+	.fuelalert_process = sec_fg_fuelalert_process,
+	.get_temperature_callback =
+		sec_bat_get_temperature_callback,
+
+	.adc_api[SEC_BATTERY_ADC_TYPE_NONE] = {
+		.init = sec_bat_adc_none_init,
+		.exit = sec_bat_adc_none_exit,
+		.read = sec_bat_adc_none_read
+		},
+	.adc_api[SEC_BATTERY_ADC_TYPE_AP] = {
+		.init = sec_bat_adc_ap_init,
+		.exit = sec_bat_adc_ap_exit,
+		.read = sec_bat_adc_ap_read
+		},
+	.adc_api[SEC_BATTERY_ADC_TYPE_IC] = {
+		.init = sec_bat_adc_ic_init,
+		.exit = sec_bat_adc_ic_exit,
+		.read = sec_bat_adc_ic_read
+		},
+	.cable_adc_value = cable_adc_value_table,
+	.charging_current = charging_current_table,
+	.polling_time = polling_time_table,
+	/* NO NEED TO BE CHANGED */
+
+	.pmic_name = SEC_BATTERY_PMIC_NAME,
+
+	.adc_check_count = 7,
+	.adc_type = {
+		SEC_BATTERY_ADC_TYPE_IC,	/* CABLE_CHECK */
+		SEC_BATTERY_ADC_TYPE_NONE,	/* BAT_CHECK */
+		SEC_BATTERY_ADC_TYPE_NONE,	/* TEMP */
+		SEC_BATTERY_ADC_TYPE_NONE,	/* TEMP_AMB */
+		SEC_BATTERY_ADC_TYPE_NONE,	/* FULL_CHECK */
+	},
+
+	/* Battery */
+	.vendor = "SDI SDI",
+	.technology = POWER_SUPPLY_TECHNOLOGY_LION,
+	.battery_data = (void *)p10_battery_data,
+	.bat_gpio_ta_nconnected = GPIO_TA_nCONNECTED,
+	.bat_polarity_ta_nconnected = 1,	/* active HIGH */
+	.bat_irq = IRQ_EINT(0),	/* GPIO_TA_INT */
+	.bat_irq_attr =
+		IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING,
+	.cable_check_type =
+		SEC_BATTERY_CABLE_CHECK_NOUSBCHARGE |
+		SEC_BATTERY_CABLE_CHECK_INT,
+	.cable_source_type = SEC_BATTERY_CABLE_SOURCE_ADC,
+
+	.event_check = false,
+	.event_waiting_time = 60,
+
+	/* Monitor setting */
+	.polling_type = SEC_BATTERY_MONITOR_ALARM,
+	.monitor_initial_count = 3,
+
+	/* Battery check */
+	.battery_check_type = SEC_BATTERY_CHECK_NONE,
+	.check_count = 3,
+
+	/* Battery check by ADC */
+	.check_adc_max = 0,
+	.check_adc_min = 0,
+
+	/* OVP/UVLO check */
+	.ovp_uvlo_check_type = SEC_BATTERY_OVP_UVLO_CHGINT,
+
+	/* Temperature check */
+	.thermal_source = SEC_BATTERY_THERMAL_SOURCE_FG,
+
+	.temp_check_type = SEC_BATTERY_TEMP_CHECK_TEMP,
+	.temp_check_count = 3,
+	.temp_high_threshold_event = 650,
+	.temp_high_recovery_event = 450,
+	.temp_low_threshold_event = 0,
+	.temp_low_recovery_event = -50,
+	.temp_high_threshold_normal = 470,
+	.temp_high_recovery_normal = 400,
+	.temp_low_threshold_normal = 0,
+	.temp_low_recovery_normal = -30,
+	.temp_high_threshold_lpm = 600,
+	.temp_high_recovery_lpm = 420,
+	.temp_low_threshold_lpm = 2,
+	.temp_low_recovery_lpm = -30,
+
+	.full_check_type = SEC_BATTERY_FULLCHARGED_CHGGPIO,
+	.full_check_count = 3,
+	.full_check_adc_1st = 26500,	/* CHECK ME */
+	.full_check_adc_2nd = 25800,	/* CHECK ME */
+	.chg_gpio_full_check = GPIO_TA_nCHG,	/* STAT of bq24191 */
+	.chg_polarity_full_check = 1,
+	.full_condition_type =
+		SEC_BATTERY_FULL_CONDITION_SOC |
+		SEC_BATTERY_FULL_CONDITION_OCV,
+	.full_condition_soc = 99,
+	.full_condition_ocv = 4170,
+
+	.recharge_condition_type =
+		SEC_BATTERY_RECHARGE_CONDITION_SOC |
+		SEC_BATTERY_RECHARGE_CONDITION_VCELL,
+	.recharge_condition_soc = 98,
+	.recharge_condition_avgvcell = 4150,
+	.recharge_condition_vcell = 4150,
+
+	.charging_total_time = 6 * 60 * 60,
+	.recharging_total_time = 90 * 60,
+	.charging_reset_time = 10 * 60,
+
+	/* Fuel Gauge */
+	.fg_irq = IRQ_EINT(19),	/* GPIO_FUEL_ALERT */
+	.fg_irq_attr = IRQF_TRIGGER_LOW | IRQF_ONESHOT,
+	.fuel_alert_soc = 1,
+	.repeated_fuelalert = false,
+	.capacity_calculation_type =
+		SEC_FUELGAUGE_CAPACITY_TYPE_RAW,
+		/* SEC_FUELGAUGE_CAPACITY_TYPE_SCALE | */
+		/* SEC_FUELGAUGE_CAPACITY_TYPE_ATOMIC, */
+	.capacity_max = 1000,
+	.capacity_min = 0,
+
+	/* Charger */
+	.chg_gpio_en = GPIO_TA_EN,
+	.chg_polarity_en = 0,	/* active LOW charge enable */
+	.chg_gpio_status = GPIO_TA_nCHG,
+	.chg_polarity_status = 0,
+#if defined(CONFIG_MACH_P10_LTE_00_BD) || defined(CONFIG_MACH_P10_WIFI_00_BD)
+	.chg_irq = 0,
+	.chg_irq_attr = 0,
+#else
+	.chg_irq = IRQ_EINT(4),	/* GPIO_CHG_INT */
+	.chg_irq_attr = IRQF_TRIGGER_FALLING | IRQF_ONESHOT,
+#endif
+	.chg_float_voltage = 4200,
+};
+
+static struct platform_device sec_device_battery = {
+	.name = "sec-battery",
+	.id = -1,
+	.dev.platform_data = &sec_battery_pdata,
+};
+
+static struct i2c_gpio_platform_data gpio_i2c_data_fuelgauge = {
+	.sda_pin = GPIO_FUEL_SDA_18V,
+	.scl_pin = GPIO_FUEL_SCL_18V,
+};
+
+struct platform_device sec_device_fuelgauge = {
+	.name = "i2c-gpio",
+	.id = SEC_FUELGAUGE_I2C_ID,
+	.dev.platform_data = &gpio_i2c_data_fuelgauge,
+};
+
+static struct i2c_board_info sec_brdinfo_fuelgauge[] __initdata = {
+	{
+		I2C_BOARD_INFO("sec-fuelgauge",
+			SEC_FUELGAUGE_I2C_SLAVEADDR),
+		.platform_data	= &sec_battery_pdata,
+	},
+};
+
+static struct i2c_gpio_platform_data gpio_i2c_data_charger = {
+	.sda_pin = GPIO_CHG_SDA_18V,
+	.scl_pin = GPIO_CHG_SCL_18V,
+};
+
+struct platform_device sec_device_charger = {
+	.name = "i2c-gpio",
+	.id = SEC_CHARGER_I2C_ID,
+	.dev.platform_data = &gpio_i2c_data_charger,
+};
+
+static struct i2c_board_info sec_brdinfo_charger[] __initdata = {
+	{
+		I2C_BOARD_INFO("sec-charger",
+			SEC_CHARGER_I2C_SLAVEADDR),
+		.platform_data	= &sec_battery_pdata,
+	},
+};
+
+static struct platform_device *sec_battery_devices[] __initdata = {
+	&sec_device_charger,
+	&sec_device_fuelgauge,
+	&sec_device_battery,
+};
+
+void __init p10_battery_init(void)
+{
+	platform_add_devices(
+		sec_battery_devices,
+		ARRAY_SIZE(sec_battery_devices));
+
+	i2c_register_board_info(
+		SEC_CHARGER_I2C_ID,
+		sec_brdinfo_charger,
+		ARRAY_SIZE(sec_brdinfo_charger));
+
+	i2c_register_board_info(
+		SEC_FUELGAUGE_I2C_ID,
+		sec_brdinfo_fuelgauge,
+		ARRAY_SIZE(sec_brdinfo_fuelgauge));
+}
+#endif	/* CONFIG_BATTERY_SAMSUNG_P1X */
diff -Naur ./arch/arm/mach-exynos/p10-gpio.c ../../HK_JB/Kernel/arch/arm/mach-exynos/p10-gpio.c
--- ./arch/arm/mach-exynos/p10-gpio.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/p10-gpio.c	2012-11-22 09:13:16.000000000 +0100
@@ -0,0 +1,580 @@
+/*
+ *  linux/arch/arm/mach-exynos/p10-gpio.c
+ *
+ * Copyright (c) 2010 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com/
+ *
+ * EXYNOS - GPIO setting in set board
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/gpio.h>
+#include <linux/serial_core.h>
+#include <plat/devs.h>
+#include <plat/gpio-cfg.h>
+#include <plat/regs-serial.h>
+#include <mach/gpio-midas.h>
+#include <plat/cpu.h>
+#include <mach/pmu.h>
+
+struct gpio_init_data {
+	uint num;
+	uint cfg;
+	uint val;
+	uint pud;
+	uint drv;
+};
+
+extern int s3c_gpio_slp_cfgpin(unsigned int pin, unsigned int config);
+extern int s3c_gpio_slp_setpull_updown(unsigned int pin, unsigned int config);
+
+/* this is sample code for p10 board */
+static struct gpio_init_data p10_init_gpios[] = {
+
+	/* BT_UART_RXD */
+	{EXYNOS5_GPA0(0), S3C_GPIO_SFN(2), 2, S3C_GPIO_PULL_UP},
+	/* BT_UART_TXD */
+	{EXYNOS5_GPA0(1), S3C_GPIO_SFN(2), 2, S3C_GPIO_PULL_NONE},
+	/* BT_UART_CTS */
+	{EXYNOS5_GPA0(2), S3C_GPIO_SFN(2), 2, S3C_GPIO_PULL_NONE},
+	/* BT_UART_RTS */
+	{EXYNOS5_GPA0(3), S3C_GPIO_SFN(2), 2, S3C_GPIO_PULL_NONE},
+
+	/* UART switch: configure as output */
+	{EXYNOS5_GPE0(5), S3C_GPIO_OUTPUT, 2, S3C_GPIO_PULL_NONE},
+	/* USB switch: configure as output */
+	{EXYNOS5_GPH0(1), S3C_GPIO_OUTPUT, 2, S3C_GPIO_PULL_NONE},
+
+	{EXYNOS5_GPB2(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* CODEC_SDA_1.8V */
+	{EXYNOS5_GPB2(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* CODEC_SCL_1.8V */
+
+	{EXYNOS5_GPX0(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* DET_3.5 */
+	{EXYNOS5_GPX0(2), S3C_GPIO_SFN(0xF), S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* AP_PMIC_IRQ */
+
+	{EXYNOS5_GPX2(0), S3C_GPIO_SFN(2), S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* VOL_UP */
+	{EXYNOS5_GPX2(1), S3C_GPIO_SFN(2), S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* VOL_DOWN */
+	{EXYNOS5_GPX2(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* ADC_INT */
+	{EXYNOS5_GPX2(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* BT_HOST_WAKE */
+};
+
+/* Initialize gpio set in p10 board */
+void p10_config_gpio_table(void)
+{
+	u32 i, gpio;
+
+	printk(KERN_DEBUG "%s\n", __func__);
+
+	for (i = 0; i < ARRAY_SIZE(p10_init_gpios); i++) {
+		gpio = p10_init_gpios[i].num;
+		s3c_gpio_cfgpin(gpio, p10_init_gpios[i].cfg);
+		s3c_gpio_setpull(gpio, p10_init_gpios[i].pud);
+
+		if (p10_init_gpios[i].val != S3C_GPIO_SETPIN_NONE)
+			gpio_set_value(gpio, p10_init_gpios[i].val);
+
+		s5p_gpio_set_drvstr(gpio, p10_init_gpios[i].drv);
+	}
+}
+
+/* this table only for p10 board */
+static unsigned int exynos5_sleep_gpio_table[][3] = {
+	{EXYNOS4_GPA0(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_UP},	/* BT_UART_RXD */
+	{EXYNOS4_GPA0(1),  S3C_GPIO_SLP_OUT1,
+		S3C_GPIO_PULL_NONE},	/* BT_UART_TXD */
+	{EXYNOS4_GPA0(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* BT_UART_CTS */
+	{EXYNOS4_GPA0(3),  S3C_GPIO_SLP_OUT1,
+		S3C_GPIO_PULL_NONE},	/* BT_UART_RTS */
+	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_UP},	/* GPS_UART_RXD */
+	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_UP},	/* GPS_UART_TXD */
+	{EXYNOS4_GPA0(6),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* GPS_UART_CTS */
+	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* GPS_UART_RTS */
+
+	{EXYNOS4_GPA1(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* AP_RXD */
+	{EXYNOS4_GPA1(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* AP_TXD */
+	{EXYNOS4_GPA1(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* TSP_SDA_1.8V */
+	{EXYNOS4_GPA1(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* TSP_SCL_1.8V */
+	{EXYNOS4_GPA1(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* AP_FLM_RXD */
+	{EXYNOS4_GPA1(5),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* AP_FLM_TXD */
+
+	{EXYNOS5_GPA2(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* CHG_SDA_1.8V */
+	{EXYNOS5_GPA2(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* CHG_SCL_1.8V */
+	{EXYNOS5_GPA2(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* AP_PMIC_SDA */
+	{EXYNOS5_GPA2(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* AP_PMIC_SCL */
+	{EXYNOS5_GPA2(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* 5M_SPI_CLK */
+	{EXYNOS5_GPA2(5),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* 5M_SPI_CS */
+	{EXYNOS5_GPA2(6),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* 5M_SPI_DI */
+	{EXYNOS5_GPA2(7),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* 5M_SPI_DO */
+
+	{EXYNOS5_GPB0(0),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* AP_CP_INT */
+	{EXYNOS5_GPB0(1),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* CMC221_CPU_RST */
+	{EXYNOS5_GPB0(2),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* CMC_SPI_CLK_REQ */
+	{EXYNOS5_GPB0(3),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPB0(4),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+
+	{EXYNOS5_GPB1(0),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* BARO_INT */
+	{EXYNOS5_GPB1(1),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPB1(2),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPB1(3),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPB1(4),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+
+	{EXYNOS5_GPB2(0),   S3C_GPIO_SLP_OUT0,
+		S3C_GPIO_PULL_NONE},	/* LCD_PWM_IN_1.8V */
+	{EXYNOS5_GPB2(1),   S3C_GPIO_SLP_OUT0,
+		S3C_GPIO_PULL_NONE},	/* MOTOR_PWM */
+	{EXYNOS5_GPB2(2),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* CODEC_SDA_1.8V */
+	{EXYNOS5_GPB2(3),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* CODEC_SCL_1.8V */
+
+	{EXYNOS5_GPB3(0),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* MHL_DSDA_1.8V */
+	{EXYNOS5_GPB3(1),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* MHL_DSCL_1.8V */
+	{EXYNOS5_GPB3(2),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* GSENSE_SDA_1.8V */
+	{EXYNOS5_GPB3(3),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/*  GSENSE_SCL_1.8V */
+
+	{EXYNOS5_GPC0(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NAND_CLK */
+	{EXYNOS5_GPC0(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NAND_CMD */
+	{EXYNOS5_GPC0(2),  S3C_GPIO_SLP_OUT0,
+		S3C_GPIO_PULL_NONE},	/* eMMC_EN */
+	{EXYNOS5_GPC0(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NAND_D(0) */
+	{EXYNOS5_GPC0(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NAND_D(1) */
+	{EXYNOS5_GPC0(5),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NAND_D(2) */
+	{EXYNOS5_GPC0(6),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NAND_D(3) */
+
+	{EXYNOS5_GPC1(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPC1(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPC1(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPC1(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NAND_D(4) */
+	{EXYNOS5_GPC1(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NAND_D(5) */
+	{EXYNOS5_GPC1(5),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NAND_D(6) */
+	{EXYNOS5_GPC1(6),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NAND_D(7) */
+
+	{EXYNOS5_GPC2(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* T_FLASH_CLK */
+	{EXYNOS5_GPC2(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* T_FLASH_CMD */
+	{EXYNOS5_GPC2(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPC2(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* T_FLASH_D(0) */
+	{EXYNOS5_GPC2(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* T_FLASH_D(1) */
+	{EXYNOS5_GPC2(5),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* T_FLASH_D(2) */
+	{EXYNOS5_GPC2(6),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* T_FLASH_D(3) */
+
+	{EXYNOS5_GPC3(0),  S3C_GPIO_SLP_OUT0,
+		S3C_GPIO_PULL_NONE},	/* WLAN_SDIO_CLK */
+	{EXYNOS5_GPC3(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},		/* WLAN_SDIO_CMD */
+	{EXYNOS5_GPC3(2),  S3C_GPIO_SLP_OUT0,
+		S3C_GPIO_PULL_NONE},	/* OTG_EN */
+	{EXYNOS5_GPC3(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* WLAN_SDIO_D(0) */
+	{EXYNOS5_GPC3(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* WLAN_SDIO_D(1) */
+	{EXYNOS5_GPC3(5),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* WLAN_SDIO_D(2) */
+	{EXYNOS5_GPC3(6),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* WLAN_SDIO_D(3) */
+
+	{EXYNOS5_GPD0(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* FUEL_SDA_1.8V */
+	{EXYNOS5_GPD0(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* FUEL_SCL_1.8V */
+	{EXYNOS5_GPD0(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* BSENSE_SDA_1.8V */
+	{EXYNOS5_GPD0(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* BSENSE_SCL_1.8V */
+	{EXYNOS5_GPD0(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* MHL_SDA_1.8V */
+	{EXYNOS5_GPD0(5),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* MHL_SCL_1.8V */
+	{EXYNOS5_GPD0(6),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* LCDP_SCL__1.8V */
+	{EXYNOS5_GPD0(7),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* LCDP_SDA__1.8V */
+
+	{EXYNOS5_GPD1(0),  S3C_GPIO_SLP_OUT0,
+		S3C_GPIO_PULL_NONE},	/* HDMI_EN */
+	{EXYNOS5_GPD1(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPD1(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* MOTOR_SDA_1.8V */
+	{EXYNOS5_GPD1(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* MOTOR_SCL_1.8V */
+	{EXYNOS5_GPD1(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* LCD_ID */
+	{EXYNOS5_GPD1(5),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* CMC_PMIC_PWRON */
+	{EXYNOS5_GPD1(6),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NFC_EN, NC */
+	{EXYNOS5_GPD1(7),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NFC_FIRMWARE, NC */
+
+	{EXYNOS5_GPE0(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* CIS_nRST */
+	{EXYNOS5_GPE0(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* CHG_SDA_1.8V */
+	{EXYNOS5_GPE0(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* CHG_SCL_1.8V */
+	{EXYNOS5_GPE0(3),  S3C_GPIO_SLP_OUT0,
+		S3C_GPIO_PULL_NONE},	/* PDA_ACTIVE */
+	{EXYNOS5_GPE0(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* ACCESSORY_CHECK */
+	{EXYNOS5_GPE0(5),  S3C_GPIO_SLP_PREV,
+		S3C_GPIO_PULL_NONE},	/* UART_SEL */
+	{EXYNOS5_GPE0(6),  S3C_GPIO_SLP_PREV,
+		S3C_GPIO_PULL_NONE},	/* GPS_nRST */
+	{EXYNOS5_GPE0(7),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* ISP_TXD */
+
+	{EXYNOS5_GPE1(0),  S3C_GPIO_SLP_PREV,
+		S3C_GPIO_PULL_NONE},	/* GPS_EN */
+	{EXYNOS5_GPE1(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* ISP_RXD */
+
+	{EXYNOS5_GPF0(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* 5M_CAM_SDA_1.8V */
+	{EXYNOS5_GPF0(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* 5M_CAM_SCL_1.8V */
+	{EXYNOS5_GPF0(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* VT_CAM_SDA_1.8V */
+	{EXYNOS5_GPF0(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* VT_CAM_SCL_1.8V */
+
+	{EXYNOS5_GPF1(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPF1(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPF1(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPF1(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+
+	{EXYNOS5_GPG0(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* ALS_SDA_1.8V */
+	{EXYNOS5_GPG0(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/*ALS_SCL_1.8V */
+	{EXYNOS5_GPG0(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* USB3.0_EN */
+	{EXYNOS5_GPG0(3),  S3C_GPIO_SLP_PREV,
+		S3C_GPIO_PULL_NONE},	/* FM34_PWDN */
+	{EXYNOS5_GPG0(4),  S3C_GPIO_SLP_PREV,
+		S3C_GPIO_PULL_NONE},	/* FM34_RESET */
+	{EXYNOS5_GPG0(6),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* MHL_INT */
+	{EXYNOS5_GPG0(7),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* MHL_RST */
+
+	{EXYNOS5_GPG1(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* CAM_FLASH_EN */
+	{EXYNOS5_GPG1(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* CAM_FLASH_SET */
+	{EXYNOS5_GPG1(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* TOUCH_CHG */
+	{EXYNOS5_GPG1(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* TOUCH_RESET */
+	{EXYNOS5_GPG1(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* TA_nCHG */
+	{EXYNOS5_GPG1(5),  S3C_GPIO_SLP_PREV,
+		S3C_GPIO_PULL_NONE},	/* TA_EN */
+	{EXYNOS5_GPG1(6),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* CAM_VT_nRST */
+	{EXYNOS5_GPG1(7),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+
+	{EXYNOS5_GPG2(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPG2(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* VTCAM_MCLK */
+
+	{EXYNOS5_GPH0(0),  S3C_GPIO_SLP_PREV,
+		S3C_GPIO_PULL_NONE},	/* WLAN_EN */
+	{EXYNOS5_GPH0(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* USB_SEL1 */
+	{EXYNOS5_GPH0(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPH0(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* CAM_MCLK */
+
+	{EXYNOS5_GPH1(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPH1(1),  S3C_GPIO_SLP_PREV,
+		S3C_GPIO_PULL_NONE},	/* CODEC_LDO_EN */
+	{EXYNOS5_GPH1(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* LIGHT_nINT */
+	{EXYNOS5_GPH1(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* BT_WAKE */
+	{EXYNOS5_GPH1(4),  S3C_GPIO_SLP_PREV,
+		S3C_GPIO_PULL_NONE},	/* FM34_BYPASS */
+	{EXYNOS5_GPH1(5),  S3C_GPIO_SLP_PREV,
+		S3C_GPIO_PULL_NONE},	/* ACCESSORY_EN */
+	{EXYNOS5_GPH1(6),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPH1(7),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* LCD_EN */
+
+	{EXYNOS5_GPV0(0),  S3C_GPIO_SLP_OUT0,
+		S3C_GPIO_PULL_NONE},	/* BUCK4_SEL */
+	{EXYNOS5_GPV0(1),  S3C_GPIO_SLP_OUT0,
+		S3C_GPIO_PULL_NONE},	/* BUCK3_SEL */
+	{EXYNOS5_GPV0(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* 5M_CORE_EN */
+	{EXYNOS5_GPV0(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* CAM_IO_EN */
+	{EXYNOS5_GPV0(4),  S3C_GPIO_SLP_OUT0,
+		S3C_GPIO_PULL_NONE},	/* BUCK2_SEL */
+	{EXYNOS5_GPV0(5),  S3C_GPIO_SLP_OUT0,
+		S3C_GPIO_PULL_NONE},	/* PMIC_DVS3 */
+	{EXYNOS5_GPV0(6),  S3C_GPIO_SLP_OUT0,
+		S3C_GPIO_PULL_NONE},	/* PMIC_DVS2 */
+	{EXYNOS5_GPV0(7),  S3C_GPIO_SLP_OUT0,
+		S3C_GPIO_PULL_NONE},	/* PMIC_DVS1 */
+
+	{EXYNOS5_GPV1(0),  S3C_GPIO_SLP_PREV,
+		S3C_GPIO_PULL_NONE},	/* WLAN_WAKE */
+	{EXYNOS5_GPV1(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* HW_REV3 */
+	{EXYNOS5_GPV1(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* HW_REV2 */
+	{EXYNOS5_GPV1(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* HW_REV1 */
+	{EXYNOS5_GPV1(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* HW_REV0 */
+	{EXYNOS5_GPV1(5),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPV1(6),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPV1(7),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+
+	{EXYNOS5_GPV2(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPV2(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPV2(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPV2(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPV2(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* HUM_SCL_1.8V */
+	{EXYNOS5_GPV2(5),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* HUM_SDA_1.8V */
+	{EXYNOS5_GPV2(6),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* MSENSE_SCL_1.8V */
+	{EXYNOS5_GPV2(7),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* MSENSE_SDA_1.8V */
+
+	{EXYNOS5_GPV3(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* ADC_SCL_1.8V */
+	{EXYNOS5_GPV3(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_NONE},	/* ADC_SDA_1.8V */
+	{EXYNOS5_GPV3(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPV3(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPV3(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPV3(5),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPV3(6),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPV3(7),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+
+	{EXYNOS5_GPY0(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_CSN */
+	{EXYNOS5_GPY0(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPY0(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPY0(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPY0(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_REN */
+	{EXYNOS5_GPY0(5),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_WEN */
+
+	{EXYNOS5_GPY1(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPY1(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPY1(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPY1(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+
+	{EXYNOS5_GPY2(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* TF_EN */
+	{EXYNOS5_GPY2(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPY2(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPY2(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPY2(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPY2(5),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+
+	{EXYNOS5_GPY3(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_A(0) */
+	{EXYNOS5_GPY3(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_A(1) */
+	{EXYNOS5_GPY3(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_A(2) */
+	{EXYNOS5_GPY3(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_A(3) */
+	{EXYNOS5_GPY3(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_A(4) */
+	{EXYNOS5_GPY3(5),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_A(5) */
+	{EXYNOS5_GPY3(6),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_A(6) */
+	{EXYNOS5_GPY3(7),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_A(7) */
+
+	{EXYNOS5_GPY4(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_A(8) */
+	{EXYNOS5_GPY4(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_A(9) */
+	{EXYNOS5_GPY4(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_A(10) */
+	{EXYNOS5_GPY4(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_A(11) */
+	{EXYNOS5_GPY4(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_A(12) */
+	{EXYNOS5_GPY4(5),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_A(13) */
+	{EXYNOS5_GPY4(6),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPY4(7),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+
+	{EXYNOS5_GPY5(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_D(0) */
+	{EXYNOS5_GPY5(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_D(1) */
+	{EXYNOS5_GPY5(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_D(2) */
+	{EXYNOS5_GPY5(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_D(3) */
+	{EXYNOS5_GPY5(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_D(4) */
+	{EXYNOS5_GPY5(5),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_D(5) */
+	{EXYNOS5_GPY5(6),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_D(6) */
+	{EXYNOS5_GPY5(7),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_D(7) */
+
+	{EXYNOS5_GPY6(0),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_D(8) */
+	{EXYNOS5_GPY6(1),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_D(9) */
+	{EXYNOS5_GPY6(2),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_D(10) */
+	{EXYNOS5_GPY6(3),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_D(11) */
+	{EXYNOS5_GPY6(4),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_D(12) */
+	{EXYNOS5_GPY6(5),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_D(13) */
+	{EXYNOS5_GPY6(6),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_D(14) */
+	{EXYNOS5_GPY6(7),  S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* DPRAM_D(15) */
+
+	{EXYNOS5_GPZ(0),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* MM_I2S_CLK */
+	{EXYNOS5_GPZ(1),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPZ(2),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* MM_I2S_SYNC */
+	{EXYNOS5_GPZ(3),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* MM_I2S_DI */
+	{EXYNOS5_GPZ(4),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* MM_I2S_DO */
+	{EXYNOS5_GPZ(5),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+	{EXYNOS5_GPZ(6),   S3C_GPIO_SLP_INPUT,
+		S3C_GPIO_PULL_DOWN},	/* NC */
+};
+
+static void config_sleep_gpio_table(int array_size,
+				    unsigned int (*gpio_table)[3])
+{
+	u32 i, gpio;
+
+	for (i = 0; i < array_size; i++) {
+		gpio = gpio_table[i][0];
+		s3c_gpio_slp_cfgpin(gpio, gpio_table[i][1]);
+		s3c_gpio_slp_setpull_updown(gpio, gpio_table[i][2]);
+	}
+}
+
+/* To save power consumption, gpio pin set before enterling sleep */
+void p10_config_sleep_gpio_table(void)
+{
+	config_sleep_gpio_table(ARRAY_SIZE(exynos5_sleep_gpio_table),
+			exynos5_sleep_gpio_table);
+}
diff -Naur ./arch/arm/mach-exynos/p10-input.c ../../HK_JB/Kernel/arch/arm/mach-exynos/p10-input.c
--- ./arch/arm/mach-exynos/p10-input.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/p10-input.c	2012-11-22 09:13:16.000000000 +0100
@@ -0,0 +1,347 @@
+/*
+ *  arch/arm/mach-exynos/p4-input.c
+ *
+ * Copyright (c) 2012 Samsung Electronics Co., Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/i2c.h>
+#include <linux/err.h>
+#include <linux/gpio.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <linux/regulator/consumer.h>
+#include <plat/gpio-cfg.h>
+#include <plat/iic.h>
+
+#if defined(CONFIG_TOUCHSCREEN_ATMEL_MXT1664S)
+#include <linux/i2c/mxt1664s.h>
+#endif
+
+#if defined(CONFIG_KEYBOARD_GPIO)
+#include <mach/sec_debug.h>
+#include <linux/gpio_keys.h>
+#include <linux/input.h>
+#endif
+
+#define GPIO_TOUCH_EN	EXYNOS5_GPD1(1)
+
+#if defined(CONFIG_TOUCHSCREEN_ATMEL_MXT1664S)
+
+static int ts_power_on(void)
+{
+	struct regulator *regulator;
+
+	/* touch reset pin */
+	s3c_gpio_cfgpin(GPIO_TOUCH_RESET, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_TOUCH_RESET, S3C_GPIO_PULL_NONE);
+	gpio_set_value(GPIO_TOUCH_RESET, 0);
+
+	/* touch xvdd en pin */
+	s3c_gpio_cfgpin(GPIO_TOUCH_EN, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_TOUCH_EN, S3C_GPIO_PULL_NONE);
+	gpio_set_value(GPIO_TOUCH_EN, 0);
+
+	regulator = regulator_get(NULL, "touch_vdd_1.8v");
+	if (IS_ERR(regulator)) {
+		printk(KERN_ERR "[TSP]ts_power_on : regulator_get failed\n");
+		return -EIO;
+	}
+
+	regulator_enable(regulator);
+	regulator_put(regulator);
+
+	regulator = regulator_get(NULL, "touch_avdd");
+	if (IS_ERR(regulator)) {
+		printk(KERN_ERR "[TSP]ts_power_on : regulator_get failed\n");
+		return -EIO;
+	}
+	regulator_enable(regulator);
+	regulator_put(regulator);
+
+	/* enable touch xvdd */
+	gpio_set_value(GPIO_TOUCH_EN, 1);
+
+	/* reset ic */
+	mdelay(1);
+	gpio_set_value(GPIO_TOUCH_RESET, 1);
+
+	/* touch interrupt pin */
+	/* s3c_gpio_cfgpin(GPIO_TOUCH_CHG, S3C_GPIO_INPUT); */
+
+	s3c_gpio_cfgpin(GPIO_TOUCH_CHG, S3C_GPIO_SFN(0xf));
+	s3c_gpio_setpull(GPIO_TOUCH_CHG, S3C_GPIO_PULL_NONE);
+
+	msleep(MXT_1664S_HW_RESET_TIME);
+
+	printk(KERN_ERR "mxt_power_on is finished\n");
+
+	return 0;
+}
+
+static int ts_power_off(void)
+{
+	struct regulator *regulator;
+
+	regulator = regulator_get(NULL, "touch_avdd");
+	if (IS_ERR(regulator)) {
+		printk(KERN_ERR "[TSP]ts_power_off : regulator_get failed\n");
+		return -EIO;
+	}
+
+	if (regulator_is_enabled(regulator))
+		regulator_force_disable(regulator);
+
+	regulator_put(regulator);
+
+	/* CAUTION : EVT1 board has CHG_INT problem
+	* so it need a workaround code to ensure charging during sleep mode
+	*/
+	if (system_rev != 2) {
+		regulator = regulator_get(NULL, "touch_vdd_1.8v");
+		if (IS_ERR(regulator)) {
+			printk(KERN_ERR "[TSP]ts_power_on : regulator_get failed\n");
+			return -EIO;
+		}
+
+		if (regulator_is_enabled(regulator))
+			regulator_force_disable(regulator);
+
+		regulator_put(regulator);
+	}
+
+	/* touch interrupt pin */
+	s3c_gpio_cfgpin(GPIO_TOUCH_CHG, S3C_GPIO_INPUT);
+	s3c_gpio_setpull(GPIO_TOUCH_CHG, S3C_GPIO_PULL_NONE);
+
+	/* touch reset pin */
+	s3c_gpio_cfgpin(GPIO_TOUCH_RESET, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_TOUCH_RESET, S3C_GPIO_PULL_NONE);
+	gpio_set_value(GPIO_TOUCH_RESET, 0);
+
+	/* touch xvdd en pin */
+	s3c_gpio_cfgpin(GPIO_TOUCH_EN, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_TOUCH_EN, S3C_GPIO_PULL_NONE);
+	gpio_set_value(GPIO_TOUCH_EN, 0);
+
+	printk(KERN_ERR "mxt_power_off is finished\n");
+
+	return 0;
+}
+
+/*
+	Configuration for MXT1664-S
+*/
+#define MXT1664S_MAX_MT_FINGERS	10
+#define MXT1664S_BLEN_BATT 208
+#define MXT1664S_CHRGTIME_BATT  130
+#define MXT1664S_THRESHOLD_BATT	70
+
+static u8 t7_config_s[] = { GEN_POWERCONFIG_T7,
+	255, 255, 50, 3
+};
+
+static u8 t8_config_s[] = { GEN_ACQUISITIONCONFIG_T8,
+	MXT1664S_CHRGTIME_BATT, 0, 10, 10, 0, 0, 20, 35, 0, 0
+};
+
+static u8 t9_config_s[] = { TOUCH_MULTITOUCHSCREEN_T9,
+	139, 0, 0, 32, 52, 0, MXT1664S_BLEN_BATT, MXT1664S_THRESHOLD_BATT, 2, 1,
+	0, 5, 2, 0, MXT1664S_MAX_MT_FINGERS, 10, 20, 20, 63, 6,
+	255, 9, 0, 0, 0, 0, 0, 0, 0, 0,
+	15, 15, 42, 42, 0, 0
+};
+
+static u8 t15_config_s[] = { TOUCH_KEYARRAY_T15,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0
+};
+
+static u8 t18_config_s[] = { SPT_COMCONFIG_T18,
+	0, 0
+};
+
+static u8 t24_config_s[] = {
+	PROCI_ONETOUCHGESTUREPROCESSOR_T24,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0
+};
+
+static u8 t25_config_s[] = {
+	SPT_SELFTEST_T25,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 200
+};
+
+static u8 t27_config_s[] = {
+	PROCI_TWOTOUCHGESTUREPROCESSOR_T27,
+	0, 0, 0, 0, 0, 0, 0
+};
+
+static u8 t40_config_s[] = { PROCI_GRIPSUPPRESSION_T40,
+	0, 0, 0, 0, 0
+};
+
+static u8 t42_config_s[] = { PROCI_TOUCHSUPPRESSION_T42,
+	0, 60, 100, 60, 0, 20, 0, 0, 0, 0
+};
+
+static u8 t43_config_s[] = { SPT_DIGITIZER_T43,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0
+};
+
+static u8 t46_config_s[] = { SPT_CTECONFIG_T46,
+	4, 0, 24, 24, 0, 0, 2, 0, 0, 0,
+	0
+};
+
+static u8 t47_config_s[] = { PROCI_STYLUS_T47,
+	73, 20, 45, 4, 5, 30, 1, 120, 3, 32,
+	0, 0, 15, 0, 32, 230, 0, 0, 0, 0
+};
+
+static u8 t55_config_s[] = {ADAPTIVE_T55,
+	0, 0, 0, 0, 0, 0
+};
+
+static u8 t56_config_s[] = {PROCI_SHIELDLESS_T56,
+	1, 0, 1, 24, 28, 28, 28, 28, 28, 28,
+	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
+	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
+	28, 28, 28, 28, 28, 28, 2, 16, 0, 2,
+	0, 5, 0, 0, 0, 0, 0, 0, 0, 0,
+	0
+};
+
+static u8 t57_config_s[] = {PROCI_EXTRATOUCHSCREENDATA_T57,
+	226, 25, 0
+};
+
+static u8 t61_config_s[] = {SPT_TIMER_T61,
+	0, 0, 0, 0, 0
+};
+
+static u8 t62_config_s[] = {PROCG_NOISESUPPRESSION_T62,
+	3, 0, 0, 23, 2, 0, 0, 0, 50, 0,
+	0, 0, 0, 0, 5, 0, 10, 3, 5, 144,
+	50, 20, 48, 20, 100, 16, 16, 4, 255, 0,
+	0, 0, 0, 0, 176, 80, 2, 5, 1, 48,
+	10, 20, 30, 0, 0, 0, 0, 0, 0, 0,
+	0, 16, 10, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0
+};
+static u8 end_config_s[] = { RESERVED_T255 };
+
+static const u8 *MXT1644S_config[] = {
+	t7_config_s,
+	t8_config_s,
+	t9_config_s,
+	t15_config_s,
+	t18_config_s,
+	t24_config_s,
+	t25_config_s,
+	t27_config_s,
+	t40_config_s,
+	t42_config_s,
+	t43_config_s,
+	t46_config_s,
+	t47_config_s,
+	t55_config_s,
+	t56_config_s,
+	t57_config_s,
+	t61_config_s,
+	t62_config_s,
+	end_config_s,
+};
+
+static struct mxt_platform_data mxt_data = {
+	.max_finger_touches = MXT1664S_MAX_MT_FINGERS,
+	.gpio_read_done = GPIO_TOUCH_CHG,
+	.min_x = 0,
+	.max_x = 2559,
+	.min_y = 0,
+	.max_y = 1599,
+	.min_z = 0,
+	.max_z = 255,
+	.min_w = 0,
+	.max_w = 255,
+	.config = MXT1644S_config,
+	.power_on = ts_power_on,
+	.power_off = ts_power_off,
+	.boot_address = 0x26,
+};
+#endif
+
+static struct i2c_board_info i2c_devs3[] __initdata = {
+	{
+		I2C_BOARD_INFO(MXT_DEV_NAME, 0x4A),
+		.platform_data = &mxt_data,
+	}
+};
+
+void __init p10_tsp_init(void)
+{
+	int gpio;
+
+	gpio = GPIO_TOUCH_CHG;
+	gpio_request(gpio, "TSP_INT");
+	s3c_gpio_cfgpin(gpio, S3C_GPIO_INPUT);
+	s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+	s5p_register_gpio_interrupt(GPIO_TOUCH_CHG);
+	i2c_devs3[0].irq = gpio_to_irq(gpio);
+
+	s3c_i2c3_set_platdata(NULL);
+	i2c_register_board_info(3, i2c_devs3, ARRAY_SIZE(i2c_devs3));
+
+	printk(KERN_ERR "%s touch : %d\n", __func__, i2c_devs3[0].irq);
+}
+
+#if defined(CONFIG_KEYBOARD_GPIO)
+#if defined(CONFIG_SEC_DEBUG)
+#define GPIO_KEYS(_code, _gpio, _active_low, _iswake, _hook)	\
+	{							\
+		.code = _code,					\
+		.gpio = _gpio,					\
+		.active_low = _active_low,			\
+		.type = EV_KEY,					\
+		.wakeup = _iswake,				\
+		.debounce_interval = 10,			\
+		.isr_hook = _hook,				\
+		.value = 1					\
+	}
+
+struct gpio_keys_button p10_buttons[] = {
+	GPIO_KEYS(KEY_VOLUMEUP, GPIO_VOL_UP,
+		  1, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_VOLUMEDOWN, GPIO_VOL_DOWN,
+		  1, 0, sec_debug_check_crash_key),
+	GPIO_KEYS(KEY_POWER, GPIO_nPOWER,
+		  1, 1, sec_debug_check_crash_key),
+};
+#endif
+
+struct gpio_keys_platform_data p10_gpiokeys_platform_data = {
+	p10_buttons,
+	ARRAY_SIZE(p10_buttons),
+};
+
+static struct platform_device p10_keypad = {
+	.name	= "gpio-keys",
+	.dev	= {
+		.platform_data = &p10_gpiokeys_platform_data,
+	},
+};
+#endif
+
+void __init p10_key_init(void)
+{
+#if defined(CONFIG_KEYBOARD_GPIO)
+	platform_device_register(&p10_keypad);
+#endif
+}
+
diff -Naur ./arch/arm/mach-exynos/p10-mhl.c ../../HK_JB/Kernel/arch/arm/mach-exynos/p10-mhl.c
--- ./arch/arm/mach-exynos/p10-mhl.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/p10-mhl.c	2012-11-22 09:13:16.000000000 +0100
@@ -0,0 +1,130 @@
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/i2c.h>
+#include <linux/i2c-gpio.h>
+#include <linux/irq.h>
+#include <linux/delay.h>
+#include <linux/sii9234.h>
+
+#include <plat/gpio-cfg.h>
+#include <mach/regs-gpio.h>
+#include <mach/gpio.h>
+#include "midas.h"
+
+#ifdef CONFIG_SAMSUNG_MHL
+#define I2C_BUS_ID_MHL	15
+static void sii9234_cfg_gpio(void)
+{
+	printk(KERN_INFO "%s()\n", __func__);
+
+	/* AP_MHL_SDA */
+	s3c_gpio_cfgpin(GPIO_MHL_SDA_18V, S3C_GPIO_SFN(0x0));
+	s3c_gpio_setpull(GPIO_MHL_SDA_18V, S3C_GPIO_PULL_NONE);
+
+	/* AP_MHL_SCL */
+	s3c_gpio_cfgpin(GPIO_MHL_SCL_18V, S3C_GPIO_SFN(0x1));
+	s3c_gpio_setpull(GPIO_MHL_SCL_18V, S3C_GPIO_PULL_NONE);
+
+
+	gpio_request(GPIO_MHL_INT, "MHL_INT");
+	s5p_register_gpio_interrupt(GPIO_MHL_INT);
+	s3c_gpio_setpull(GPIO_MHL_INT, S3C_GPIO_PULL_DOWN);
+	irq_set_irq_type(MHL_INT_IRQ, IRQ_TYPE_EDGE_RISING);
+	s3c_gpio_cfgpin(GPIO_MHL_INT, GPIO_MHL_INT_AF);
+
+	s3c_gpio_cfgpin(GPIO_HDMI_EN, S3C_GPIO_OUTPUT);	/* HDMI_EN */
+	gpio_set_value(GPIO_HDMI_EN, GPIO_LEVEL_LOW);
+	s3c_gpio_setpull(GPIO_HDMI_EN, S3C_GPIO_PULL_NONE);
+
+	s3c_gpio_cfgpin(GPIO_MHL_RST, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_MHL_RST, S3C_GPIO_PULL_NONE);
+	gpio_set_value(GPIO_MHL_RST, GPIO_LEVEL_LOW);
+}
+
+static void sii9234_power_onoff(bool on)
+{
+	printk(KERN_INFO "%s(%d)\n", __func__, on);
+
+	if (on) {
+		/* To avoid floating state of the HPD pin *
+		 * in the absence of external pull-up     */
+		s3c_gpio_setpull(GPIO_HDMI_HPD, S3C_GPIO_PULL_NONE);
+		gpio_set_value(GPIO_HDMI_EN, GPIO_LEVEL_HIGH);
+
+		s3c_gpio_setpull(GPIO_MHL_SCL_18V, S3C_GPIO_PULL_DOWN);
+		s3c_gpio_setpull(GPIO_MHL_SCL_18V, S3C_GPIO_PULL_NONE);
+
+		/* sii9234_unmaks_interrupt(); // - need to add */
+		/* VCC_SUB_2.0V is always on */
+	} else {
+		gpio_set_value(GPIO_MHL_RST, GPIO_LEVEL_LOW);
+		usleep_range(10000, 20000);
+		gpio_set_value(GPIO_MHL_RST, GPIO_LEVEL_HIGH);
+
+		/* To avoid floating state of the HPD pin *
+		 * in the absence of external pull-up     */
+		s3c_gpio_setpull(GPIO_HDMI_HPD, S3C_GPIO_PULL_DOWN);
+		gpio_set_value(GPIO_HDMI_EN, GPIO_LEVEL_LOW);
+
+		gpio_set_value(GPIO_MHL_RST, GPIO_LEVEL_LOW);
+	}
+}
+
+static void sii9234_reset(void)
+{
+	printk(KERN_INFO "%s()\n", __func__);
+
+	s3c_gpio_cfgpin(GPIO_MHL_RST, S3C_GPIO_OUTPUT);
+	s3c_gpio_setpull(GPIO_MHL_RST, S3C_GPIO_PULL_NONE);
+
+
+	gpio_set_value(GPIO_MHL_RST, GPIO_LEVEL_LOW);
+	usleep_range(10000, 20000);
+	gpio_set_value(GPIO_MHL_RST, GPIO_LEVEL_HIGH);
+}
+
+
+
+static struct sii9234_platform_data sii9234_pdata = {
+	.init = sii9234_cfg_gpio,
+	.mhl_sel = NULL,
+	.hw_onoff = sii9234_power_onoff,
+	.hw_reset = sii9234_reset,
+	.enable_vbus = NULL,
+	.vbus_present = NULL,
+};
+
+static struct i2c_board_info __initdata i2c_devs_sii9234[] = {
+	{
+		I2C_BOARD_INFO("sii9234_mhl_tx", 0x72>>1),
+		.platform_data = &sii9234_pdata,
+	},
+	{
+		I2C_BOARD_INFO("sii9234_tpi", 0x7A>>1),
+		.platform_data = &sii9234_pdata,
+	},
+	{
+		I2C_BOARD_INFO("sii9234_hdmi_rx", 0x92>>1),
+		.platform_data = &sii9234_pdata,
+	},
+	{
+		I2C_BOARD_INFO("sii9234_cbus", 0xC8>>1),
+		.platform_data = &sii9234_pdata,
+	},
+};
+
+static struct i2c_board_info i2c_dev_hdmi_ddc __initdata = {
+	I2C_BOARD_INFO("s5p_ddc", (0x74 >> 1)),
+};
+
+static int __init p10_mhl_init(void)
+{
+	i2c_add_devices(I2C_BUS_ID_MHL, i2c_devs_sii9234,
+			ARRAY_SIZE(i2c_devs_sii9234));
+
+	i2c_add_devices(sii9234_pdata.ddc_i2c_num, &i2c_dev_hdmi_ddc, 1);
+
+	return 0;
+}
+module_init(p10_mhl_init);
+#endif
diff -Naur ./arch/arm/mach-exynos/p10-switch.c ../../HK_JB/Kernel/arch/arm/mach-exynos/p10-switch.c
--- ./arch/arm/mach-exynos/p10-switch.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/p10-switch.c	2012-11-22 09:13:16.000000000 +0100
@@ -0,0 +1,239 @@
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <linux/err.h>
+#include <linux/semaphore.h>
+#include <linux/regulator/machine.h>
+#include <linux/regulator/fixed.h>
+#include <plat/gpio-cfg.h>
+#include <mach/gpio.h>
+#include <mach/usb_switch.h>
+
+struct device *sec_switch_dev;
+
+enum usb_path_t current_path = USB_PATH_NONE;
+
+static struct semaphore usb_switch_sem;
+
+static bool usb_connected;
+
+static ssize_t show_usb_sel(struct device *dev,
+			    struct device_attribute *attr, char *buf)
+{
+	const char *mode;
+
+	if (current_path & USB_PATH_CP) {
+		/* CP */
+		mode = "MODEM";
+	} else {
+		/* AP */
+		mode = "PDA";
+	}
+
+	pr_info("%s: %s\n", __func__, mode);
+
+	return sprintf(buf, "%s\n", mode);
+}
+
+static ssize_t store_usb_sel(struct device *dev,
+			     struct device_attribute *attr,
+			     const char *buf, size_t count)
+{
+	pr_info("%s: %s\n", __func__, buf);
+
+	if (!strncasecmp(buf, "PDA", 3)) {
+		usb_switch_lock();
+		usb_switch_clr_path(USB_PATH_CP);
+		usb_switch_unlock();
+	} else if (!strncasecmp(buf, "MODEM", 5)) {
+		usb_switch_lock();
+		usb_switch_set_path(USB_PATH_CP);
+		usb_switch_unlock();
+	} else {
+		pr_err("%s: wrong usb_sel value(%s)!!\n", __func__, buf);
+		return -EINVAL;
+	}
+
+	return count;
+}
+
+static ssize_t show_uart_sel(struct device *dev,
+			     struct device_attribute *attr, char *buf)
+{
+	int val_sel;
+	const char *mode;
+
+	val_sel = gpio_get_value(GPIO_UART_SEL);
+
+	if (val_sel == 0) {
+		/* CP */
+		mode = "CP";
+	} else {
+		/* AP */
+		mode = "AP";
+	}
+
+	pr_info("%s: %s\n", __func__, mode);
+
+	return sprintf(buf, "%s\n", mode);
+}
+
+static ssize_t store_uart_sel(struct device *dev,
+			      struct device_attribute *attr,
+			      const char *buf, size_t count)
+{
+	int uart_sel = -1;
+
+	pr_info("%s: %s\n", __func__, buf);
+
+	if (!strncasecmp(buf, "AP", 2)) {
+		uart_sel = 1;
+	} else if (!strncasecmp(buf, "CP", 2)) {
+		uart_sel = 0;
+	} else {
+		pr_err("%s: wrong uart_sel value(%s)!!\n", __func__, buf);
+		return -EINVAL;
+	}
+
+	/* 1 for AP, 0 for CP */
+	gpio_set_value(GPIO_UART_SEL, uart_sel);
+
+	return count;
+}
+
+static ssize_t show_usb_state(struct device *dev,
+			     struct device_attribute *attr, char *buf)
+{
+	const char *state;
+
+	if (usb_connected)
+		state = "USB_STATE_CONFIGURED";
+	else
+		state = "USB_STATE_NOTCONFIGURED";
+
+	pr_info("%s: %s\n", __func__, state);
+
+	return sprintf(buf, "%s\n", state);
+}
+
+static DEVICE_ATTR(usb_sel, 0664, show_usb_sel, store_usb_sel);
+static DEVICE_ATTR(uart_sel, 0664, show_uart_sel, store_uart_sel);
+static DEVICE_ATTR(usb_state, S_IRUGO, show_usb_state, NULL);
+
+static struct attribute *px_switch_attributes[] = {
+	&dev_attr_usb_sel.attr,
+	&dev_attr_uart_sel.attr,
+	&dev_attr_usb_state.attr,
+	NULL
+};
+
+static const struct attribute_group px_switch_group = {
+	.attrs = px_switch_attributes,
+};
+
+void set_usb_connection_state(bool connected)
+{
+	pr_info("%s: set %s\n", __func__, (connected ? "True" : "False"));
+
+	if (usb_connected != connected) {
+		usb_connected = connected;
+
+		pr_info("%s: send \"usb_state\" sysfs_notify\n", __func__);
+		sysfs_notify(&sec_switch_dev->kobj, NULL, "usb_state");
+	}
+}
+
+static void usb_apply_path(enum usb_path_t path)
+{
+	pr_info("%s: current gpio before changing : sel1:%d\n",
+	       __func__, gpio_get_value(GPIO_USB_SEL1));
+	pr_info("%s: target path %x\n", __func__, path);
+
+	if (path & USB_PATH_ADCCHECK) {
+		gpio_set_value(GPIO_USB_SEL1, 0);
+		return;
+	}
+
+	/* default : AP */
+	gpio_set_value(GPIO_USB_SEL1, 1);
+	return;
+
+}
+
+/*
+  Typical usage of usb switch:
+
+  usb_switch_lock();  (alternatively from hard/soft irq context)
+  ( or usb_switch_trylock() )
+  ...
+  usb_switch_set_path(USB_PATH_ADCCHECK);
+  ...
+  usb_switch_set_path(USB_PATH_TA);
+  ...
+  usb_switch_unlock(); (this restores previous usb switch settings)
+*/
+void usb_switch_set_path(enum usb_path_t path)
+{
+	pr_info("%s: %x current_path before changing\n",
+		__func__, current_path);
+
+	current_path |= path;
+	usb_apply_path(current_path);
+}
+
+void usb_switch_clr_path(enum usb_path_t path)
+{
+	pr_info("%s: %x current_path before changing\n",
+		__func__, current_path);
+
+	current_path &= ~path;
+	usb_apply_path(current_path);
+}
+
+int usb_switch_lock(void)
+{
+	return down_interruptible(&usb_switch_sem);
+}
+
+int usb_switch_trylock(void)
+{
+	return down_trylock(&usb_switch_sem);
+}
+
+void usb_switch_unlock(void)
+{
+	up(&usb_switch_sem);
+}
+
+static int __init usb_switch_init(void)
+{
+	int ret;
+
+	gpio_request(GPIO_USB_SEL1, "GPIO_USB_SEL1");
+	gpio_request(GPIO_UART_SEL, "GPIO_UART_SEL");
+
+	gpio_export(GPIO_USB_SEL1, 1);
+	gpio_export(GPIO_UART_SEL, 1);
+
+	BUG_ON(!sec_class);
+	sec_switch_dev = device_create(sec_class, NULL, 0, NULL, "switch");
+
+	BUG_ON(!sec_switch_dev);
+	gpio_export_link(sec_switch_dev, "GPIO_USB_SEL1", GPIO_USB_SEL1);
+	gpio_export_link(sec_switch_dev, "GPIO_UART_SEL", GPIO_UART_SEL);
+
+	/*init_MUTEX(&usb_switch_sem);*/
+	sema_init(&usb_switch_sem, 1);
+
+	/* create sysfs group */
+	ret = sysfs_create_group(&sec_switch_dev->kobj, &px_switch_group);
+	if (ret) {
+		pr_err("failed to create px switch attribute group\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+device_initcall(usb_switch_init);
diff -Naur ./arch/arm/mach-exynos/p2-gpio.c ../../HK_JB/Kernel/arch/arm/mach-exynos/p2-gpio.c
--- ./arch/arm/mach-exynos/p2-gpio.c	2012-12-08 20:40:46.157821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/p2-gpio.c	2012-11-22 09:13:16.000000000 +0100
@@ -286,8 +286,8 @@
 	{EXYNOS4_GPA0(1),  S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPA0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPA0(3),  S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},
-	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
 	{EXYNOS4_GPA0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 
diff -Naur ./arch/arm/mach-exynos/p4-gpio.c ../../HK_JB/Kernel/arch/arm/mach-exynos/p4-gpio.c
--- ./arch/arm/mach-exynos/p4-gpio.c	2012-12-08 20:40:46.157821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/p4-gpio.c	2012-11-22 09:13:16.000000000 +0100
@@ -174,8 +174,8 @@
 	{EXYNOS4_GPA0(1),  S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPA0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPA0(3),  S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},
-	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
 	{EXYNOS4_GPA0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 
diff -Naur ./arch/arm/mach-exynos/p4-input.c ../../HK_JB/Kernel/arch/arm/mach-exynos/p4-input.c
--- ./arch/arm/mach-exynos/p4-input.c	2012-12-08 20:40:46.157821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/p4-input.c	2012-11-22 09:13:16.000000000 +0100
@@ -156,6 +156,7 @@
 
 /* Added for the LTE model */
 static u8 inform_data_rev9[] = {0,
+	7, 0, 48, 255,
 	7, 1, 11, 255,
 	46, 3, 16, 24,
 	47, 1, 35, 45,
@@ -344,6 +345,12 @@
 	Configuration for MXT1664-S
 */
 #define MXT1664S_CONFIG_DATE		"N80XX_ATM_0703"
+#if defined(CONFIG_MACH_P4NOTELTE_USA_VZW)
+#define MXT1664S_CONFIG_DATE_FOR_OVER_HW9	"I925_ATM_1121"
+#else
+#define MXT1664S_CONFIG_DATE_FOR_OVER_HW9	"N80XX_LTE_ATM_0905"
+#endif
+
 #define MXT1664S_MAX_MT_FINGERS	10
 #define MXT1664S_BLEN_BATT		112
 #define MXT1664S_CHRGTIME_BATT	180
@@ -360,7 +367,7 @@
 };
 
 static u8 t9_config_s[] = { TOUCH_MULTITOUCHSCREEN_T9,
-	0x83, 0, 0, P4_NOTE_X_NUM, P4_NOTE_Y_NUM,
+	0x8B, 0, 0, P4_NOTE_X_NUM, P4_NOTE_Y_NUM,
 	0, MXT1664S_BLEN_BATT, MXT1664S_THRESHOLD_BATT, 1, 1,
 	10, 15, 1, 65, MXT1664S_MAX_MT_FINGERS, 20, 30, 20, 255, 15,
 	255, 15, 5, 246, 5, 5, 0, 0, 0, 0,
@@ -549,9 +556,13 @@
 
 		t8_config_s[1] = 1;
 
+		t9_config_s[7] = 116;
 		t9_config_s[8] = 55;
+		t9_config_s[14] = 50;
+		t9_config_s[24] = 0;
 		t9_config_s[27] = 64;
 
+		t40_config_s[3] = 15;
 		t40_config_s[4] = 2;
 		t40_config_s[5] = 2;
 
@@ -585,9 +596,15 @@
 		t62_config_s[14] = 1;
 		t62_config_s[20] = 136;
 		t62_config_s[22] = 35;
+#if defined(CONFIG_MACH_P4NOTELTE_USA_VZW)
+		t62_config_s[23] = 48;
+		t62_config_s[26] = 24;
+		t62_config_s[27] = 24;
+#endif
 		t62_config_s[35] = 80;
-		t62_config_s[36] = 50;
+		t62_config_s[36] = 40;
 		t62_config_s[38] = 5;
+		t62_config_s[40] = 50;
 		t62_config_s[42] = 30;
 		t62_config_s[43] = 40;
 		t62_config_s[44] = 10;
@@ -595,6 +612,10 @@
 		t62_config_s[48] = 30;
 		t62_config_s[49] = 30;
 		t62_config_s[53] = 20;
+
+		/* Change Config Name for LTE */
+		mxt1664s_pdata.config_version =
+			MXT1664S_CONFIG_DATE_FOR_OVER_HW9;
 	}
 }
 
@@ -609,30 +630,42 @@
 	printk(KERN_DEBUG "[TSP] TSP IC : %s\n",
 		(5 <= hw_rev) ? "Atmel" : "Synaptics");
 
-	gpio = GPIO_TSP_RST;
-	gpio_request(gpio, "TSP_RST");
-	gpio_direction_output(gpio, 1);
-	gpio_export(gpio, 0);
-
-	gpio = GPIO_TSP_LDO_ON;
-	gpio_request(gpio, "TSP_LDO_ON");
-	gpio_direction_output(gpio, 1);
-	gpio_export(gpio, 0);
-
 	if (5 <= hw_rev) {
+		gpio = GPIO_TSP_LDO_ON2;
+		gpio_request(gpio, "TSP_LDO_ON2");
+		gpio_direction_output(gpio, 0);
+		gpio_export(gpio, 0);
+
 		gpio = GPIO_TSP_LDO_ON1;
 		gpio_request(gpio, "TSP_LDO_ON1");
+		gpio_direction_output(gpio, 0);
+		gpio_export(gpio, 0);
+
+		gpio = GPIO_TSP_LDO_ON;
+		gpio_request(gpio, "TSP_LDO_ON");
+		gpio_direction_output(gpio, 0);
+		gpio_export(gpio, 0);
+
+		gpio = GPIO_TSP_RST;
+		gpio_request(gpio, "TSP_RST");
+		gpio_direction_output(gpio, 0);
+		gpio_export(gpio, 0);
+
+		switch_config(hw_rev);
+	} else {
+		gpio = GPIO_TSP_RST;
+		gpio_request(gpio, "TSP_RST");
 		gpio_direction_output(gpio, 1);
 		gpio_export(gpio, 0);
 
-		gpio = GPIO_TSP_LDO_ON2;
-		gpio_request(gpio, "TSP_LDO_ON2");
+		gpio = GPIO_TSP_LDO_ON;
+		gpio_request(gpio, "TSP_LDO_ON");
 		gpio_direction_output(gpio, 1);
 		gpio_export(gpio, 0);
 
-		switch_config(hw_rev);
-	} else if (1 <= hw_rev)
-		have_tsp_ldo = true;
+		if (1 <= hw_rev)
+			have_tsp_ldo = true;
+	}
 
 	gpio = GPIO_TSP_INT;
 	gpio_request(gpio, "TSP_INT");
@@ -669,6 +702,7 @@
 static int wacom_early_suspend_hw(void);
 static int wacom_late_resume_hw(void);
 static int wacom_reset_hw(void);
+static void wacom_compulsory_flash_mode(bool en);
 static void wacom_register_callbacks(struct wacom_g5_callbacks *cb);
 
 static struct wacom_g5_platform_data wacom_platform_data = {
@@ -680,7 +714,7 @@
 	.gpio_pen_insert = GPIO_S_PEN_IRQ,
 #endif
 #ifdef WACOM_HAVE_FWE_PIN
-	.gpio_fwe = GPIO_PEN_FWE0,
+	.compulsory_flash_mode = wacom_compulsory_flash_mode,
 #endif
 	.init_platform_hw = wacom_init_hw,
 	.suspend_platform_hw = wacom_suspend_hw,
@@ -752,6 +786,14 @@
 	return 0;
 }
 
+#ifdef WACOM_HAVE_FWE_PIN
+static void wacom_compulsory_flash_mode(bool en)
+{
+	gpio_set_value(GPIO_PEN_FWE0, en);
+}
+
+#endif
+
 static int wacom_suspend_hw(void)
 {
 	return wacom_early_suspend_hw();
diff -Naur ./arch/arm/mach-exynos/p4note-gpio.c ../../HK_JB/Kernel/arch/arm/mach-exynos/p4note-gpio.c
--- ./arch/arm/mach-exynos/p4note-gpio.c	2012-12-08 20:40:46.157821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/p4note-gpio.c	2012-11-22 09:13:16.000000000 +0100
@@ -36,6 +36,15 @@
  * P4NOTE GPIO Init Table
  */
 static struct gpio_init_data p4note_init_gpios[] = {
+#if defined(CONFIG_QC_MODEM)
+	{EXYNOS4_GPA0(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+	{EXYNOS4_GPA0(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+	{EXYNOS4_GPA0(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+#endif
+
 #if defined(CONFIG_SEC_MODEM)
 	{EXYNOS4_GPA1(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
@@ -136,7 +145,7 @@
 	{EXYNOS4_GPK3(6), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* WLAN_SDIO_D(3) */
 
-#if !defined(CONFIG_SEC_MODEM)
+#if !defined(CONFIG_SEC_MODEM) && !defined(CONFIG_QC_MODEM)
 	{EXYNOS4212_GPM0(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
 #endif
@@ -165,6 +174,9 @@
 #if defined(CONFIG_QC_MODEM)
 	{EXYNOS4212_GPM3(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_UP, S5P_GPIO_DRVSTR_LV1}, /* AP2MDM_PMIC_RESET_N */
+#elif !defined(COMFIG_SEC_MODEM)
+	{EXYNOS4212_GPM3(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_ZERO,
+			S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
 #endif
 };
 
@@ -177,10 +189,10 @@
 	{EXYNOS4_GPA0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPA0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
 #if !defined(CONFIG_QC_MODEM)
-	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
-	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
 	{EXYNOS4_GPA0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 #else
 	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* AP_PEN_FWE0 */
@@ -192,7 +204,7 @@
 	{EXYNOS4_GPA1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPA1(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPA1(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-#if defined(CONFIG_SEC_MODEM)
+#if defined(CONFIG_SEC_MODEM) || defined(CONFIG_QC_MODEM)
 	{EXYNOS4_GPA1(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC(IPC_RXD) */
 	{EXYNOS4_GPA1(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC(IPC_TXD) */
 #else
@@ -450,7 +462,7 @@
 	{EXYNOS4212_GPM0(4),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* TSP_RST */
 	{EXYNOS4212_GPM0(5),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* LVDS_nSHDN */
 	{EXYNOS4212_GPM0(6),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* 3M_nSTBY */
-#if defined(CONFIG_SEC_MODEM)
+#if defined(CONFIG_SEC_MODEM) || defined(CONFIG_QC_MODEM)
 	{EXYNOS4212_GPM0(7),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* USB_SEL_CP */
 #else
 	{EXYNOS4212_GPM0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
diff -Naur ./arch/arm/mach-exynos/p4note-jack.c ../../HK_JB/Kernel/arch/arm/mach-exynos/p4note-jack.c
--- ./arch/arm/mach-exynos/p4note-jack.c	2012-12-08 20:40:46.157821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/p4note-jack.c	2012-11-22 09:13:16.000000000 +0100
@@ -76,25 +76,25 @@
 static struct sec_jack_zone sec_jack_zones[] = {
 	{
 		/* adc == 0, unstable zone, default to 3pole if it stays
-		 * in this range for 300ms (15ms delays, 20 samples)
+		 * in this range for 100ms (10ms delays, 10 samples)
 		 */
 		.adc_high = 0,
-		.delay_ms = 15,
-		.check_count = 20,
+		.delay_ms = 10,
+		.check_count = 10,
 		.jack_type = SEC_HEADSET_3POLE,
 	},
 	{
 		/* 0 < adc <= 1200, unstable zone, default to 3pole if it stays
-		 * in this range for 300ms (15ms delays, 20 samples)
+		 * in this range for 100ms (10ms delays, 10 samples)
 		 */
 		.adc_high = 1200,
 		.delay_ms = 10,
-		.check_count = 80,
+		.check_count = 10,
 		.jack_type = SEC_HEADSET_3POLE,
 	},
 	{
 		/* 1200 < adc <= 2600, unstable zone, default to 4pole if it
-		 * stays in this range for 800ms (10ms delays, 80 samples)
+		 * stays in this range for 100ms (10ms delays, 10 samples)
 		 */
 		.adc_high = 2600,
 		.delay_ms = 10,
@@ -102,8 +102,8 @@
 		.jack_type = SEC_HEADSET_4POLE,
 	},
 	{
-		/* 2600 < adc <= 3800, 3 pole zone, default to 3pole if it
-		 * stays in this range for 100ms (10ms delays, 10 samples)
+		/* 2600 < adc <= 3800, 4 pole zone, default to 4pole if it
+		 * stays in this range for 50ms (10ms delays, 5 samples)
 		 */
 		.adc_high = 3800,
 		.delay_ms = 10,
diff -Naur ./arch/arm/mach-exynos/p8-gpio.c ../../HK_JB/Kernel/arch/arm/mach-exynos/p8-gpio.c
--- ./arch/arm/mach-exynos/p8-gpio.c	2012-12-08 20:40:46.157821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/p8-gpio.c	2012-11-22 09:13:16.000000000 +0100
@@ -189,8 +189,8 @@
 	{ EXYNOS4_GPA0(1),  S3C_GPIO_SLP_OUT1,	S3C_GPIO_PULL_NONE},
 	{ EXYNOS4_GPA0(2),  S3C_GPIO_SLP_INPUT,	S3C_GPIO_PULL_DOWN},
 	{ EXYNOS4_GPA0(3),  S3C_GPIO_SLP_OUT1,	S3C_GPIO_PULL_NONE},
-	{ EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT,	S3C_GPIO_PULL_DOWN},
-	{ EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT,	S3C_GPIO_PULL_DOWN},
+	{ EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT,	S3C_GPIO_PULL_UP},
+	{ EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT,	S3C_GPIO_PULL_UP},
 	{ EXYNOS4_GPA0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{ EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 
diff -Naur ./arch/arm/mach-exynos/platsmp.c ../../HK_JB/Kernel/arch/arm/mach-exynos/platsmp.c
--- ./arch/arm/mach-exynos/platsmp.c	2012-12-08 20:40:46.157821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/platsmp.c	2012-11-22 09:13:16.000000000 +0100
@@ -23,7 +23,6 @@
 
 #include <asm/cacheflush.h>
 #include <asm/hardware/gic.h>
-#include <asm/smp_plat.h>
 #include <asm/smp_scu.h>
 #include <asm/unified.h>
 
@@ -267,7 +266,7 @@
 	if (scu_base_addr())
 		scu_enable(scu_base_addr());
 	else
-		flush_cache_louis();
+		flush_cache_all();
 
 	/* Set up secondary boot base and core power cofiguration base address */
 	for (i = 1; i < max_cpus; i++) {
diff -Naur ./arch/arm/mach-exynos/pm.c ../../HK_JB/Kernel/arch/arm/mach-exynos/pm.c
--- ./arch/arm/mach-exynos/pm.c	2012-12-08 20:40:46.157821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/pm.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,430 +0,0 @@
-/* linux/arch/arm/mach-exynos4/pm.c
- *
- * Copyright (c) 2011 Samsung Electronics Co., Ltd.
- *		http://www.samsung.com
- *
- * EXYNOS4210 - Power Management support
- *
- * Based on arch/arm/mach-s3c2410/pm.c
- * Copyright (c) 2006 Simtec Electronics
- *	Ben Dooks <ben@simtec.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
-*/
-
-#include <linux/init.h>
-#include <linux/suspend.h>
-#include <linux/syscore_ops.h>
-#include <linux/io.h>
-#include <linux/err.h>
-#include <linux/clk.h>
-
-#include <asm/cacheflush.h>
-#include <asm/hardware/cache-l2x0.h>
-
-#include <plat/cpu.h>
-#include <plat/pm.h>
-#include <plat/pll.h>
-#include <plat/regs-srom.h>
-
-#include <mach/regs-irq.h>
-#include <mach/regs-gpio.h>
-#include <mach/regs-clock.h>
-#include <mach/regs-pmu.h>
-#include <mach/pm-core.h>
-#include <mach/pmu.h>
-
-static struct sleep_save exynos4_set_clksrc[] = {
-	{ .reg = S5P_CLKSRC_MASK_TOP			, .val = 0x00000001, },
-	{ .reg = S5P_CLKSRC_MASK_CAM			, .val = 0x11111111, },
-	{ .reg = S5P_CLKSRC_MASK_TV			, .val = 0x00000111, },
-	{ .reg = S5P_CLKSRC_MASK_LCD0			, .val = 0x00001111, },
-	{ .reg = S5P_CLKSRC_MASK_MAUDIO			, .val = 0x00000001, },
-	{ .reg = S5P_CLKSRC_MASK_FSYS			, .val = 0x01011111, },
-	{ .reg = S5P_CLKSRC_MASK_PERIL0			, .val = 0x01111111, },
-	{ .reg = S5P_CLKSRC_MASK_PERIL1			, .val = 0x01110111, },
-	{ .reg = S5P_CLKSRC_MASK_DMC			, .val = 0x00010000, },
-};
-
-static struct sleep_save exynos4210_set_clksrc[] = {
-	{ .reg = S5P_CLKSRC_MASK_LCD1			, .val = 0x00001111, },
-};
-
-static struct sleep_save exynos4_epll_save[] = {
-	SAVE_ITEM(S5P_EPLL_CON0),
-	SAVE_ITEM(S5P_EPLL_CON1),
-};
-
-static struct sleep_save exynos4_vpll_save[] = {
-	SAVE_ITEM(S5P_VPLL_CON0),
-	SAVE_ITEM(S5P_VPLL_CON1),
-};
-
-static struct sleep_save exynos4_core_save[] = {
-	/* GIC side */
-	SAVE_ITEM(S5P_VA_GIC_CPU + 0x000),
-	SAVE_ITEM(S5P_VA_GIC_CPU + 0x004),
-	SAVE_ITEM(S5P_VA_GIC_CPU + 0x008),
-	SAVE_ITEM(S5P_VA_GIC_CPU + 0x00C),
-	SAVE_ITEM(S5P_VA_GIC_CPU + 0x014),
-	SAVE_ITEM(S5P_VA_GIC_CPU + 0x018),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x000),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x004),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x100),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x104),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x108),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x300),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x304),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x308),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x400),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x404),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x408),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x40C),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x410),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x414),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x418),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x41C),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x420),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x424),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x428),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x42C),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x430),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x434),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x438),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x43C),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x440),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x444),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x448),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x44C),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x450),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x454),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x458),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x45C),
-
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x800),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x804),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x808),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x80C),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x810),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x814),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x818),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x81C),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x820),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x824),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x828),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x82C),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x830),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x834),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x838),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x83C),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x840),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x844),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x848),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x84C),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x850),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x854),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x858),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0x85C),
-
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0xC00),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0xC04),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0xC08),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0xC0C),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0xC10),
-	SAVE_ITEM(S5P_VA_GIC_DIST + 0xC14),
-
-	SAVE_ITEM(S5P_VA_COMBINER_BASE + 0x000),
-	SAVE_ITEM(S5P_VA_COMBINER_BASE + 0x010),
-	SAVE_ITEM(S5P_VA_COMBINER_BASE + 0x020),
-	SAVE_ITEM(S5P_VA_COMBINER_BASE + 0x030),
-	SAVE_ITEM(S5P_VA_COMBINER_BASE + 0x040),
-	SAVE_ITEM(S5P_VA_COMBINER_BASE + 0x050),
-	SAVE_ITEM(S5P_VA_COMBINER_BASE + 0x060),
-	SAVE_ITEM(S5P_VA_COMBINER_BASE + 0x070),
-	SAVE_ITEM(S5P_VA_COMBINER_BASE + 0x080),
-	SAVE_ITEM(S5P_VA_COMBINER_BASE + 0x090),
-
-	/* SROM side */
-	SAVE_ITEM(S5P_SROM_BW),
-	SAVE_ITEM(S5P_SROM_BC0),
-	SAVE_ITEM(S5P_SROM_BC1),
-	SAVE_ITEM(S5P_SROM_BC2),
-	SAVE_ITEM(S5P_SROM_BC3),
-};
-
-static struct sleep_save exynos4_l2cc_save[] = {
-	SAVE_ITEM(S5P_VA_L2CC + L2X0_TAG_LATENCY_CTRL),
-	SAVE_ITEM(S5P_VA_L2CC + L2X0_DATA_LATENCY_CTRL),
-	SAVE_ITEM(S5P_VA_L2CC + L2X0_PREFETCH_CTRL),
-	SAVE_ITEM(S5P_VA_L2CC + L2X0_POWER_CTRL),
-	SAVE_ITEM(S5P_VA_L2CC + L2X0_AUX_CTRL),
-};
-
-/* For Cortex-A9 Diagnostic and Power control register */
-static unsigned int save_arm_register[2];
-
-static int exynos4_cpu_suspend(unsigned long arg)
-{
-	outer_flush_all();
-
-	/* issue the standby signal into the pm unit. */
-	cpu_do_idle();
-
-	/* we should never get past here */
-	panic("sleep resumed to originator?");
-}
-
-static void exynos4_pm_prepare(void)
-{
-	u32 tmp;
-
-	s3c_pm_do_save(exynos4_core_save, ARRAY_SIZE(exynos4_core_save));
-	s3c_pm_do_save(exynos4_l2cc_save, ARRAY_SIZE(exynos4_l2cc_save));
-	s3c_pm_do_save(exynos4_epll_save, ARRAY_SIZE(exynos4_epll_save));
-	s3c_pm_do_save(exynos4_vpll_save, ARRAY_SIZE(exynos4_vpll_save));
-
-	tmp = __raw_readl(S5P_INFORM1);
-
-	/* Set value of power down register for sleep mode */
-
-	exynos4_sys_powerdown_conf(SYS_SLEEP);
-	__raw_writel(S5P_CHECK_SLEEP, S5P_INFORM1);
-
-	/* ensure at least INFORM0 has the resume address */
-
-	__raw_writel(virt_to_phys(s3c_cpu_resume), S5P_INFORM0);
-
-	/* Before enter central sequence mode, clock src register have to set */
-
-	s3c_pm_do_restore_core(exynos4_set_clksrc, ARRAY_SIZE(exynos4_set_clksrc));
-
-	if (soc_is_exynos4210())
-		s3c_pm_do_restore_core(exynos4210_set_clksrc, ARRAY_SIZE(exynos4210_set_clksrc));
-
-}
-
-static int exynos4_pm_add(struct device *dev)
-{
-	pm_cpu_prep = exynos4_pm_prepare;
-	pm_cpu_sleep = exynos4_cpu_suspend;
-
-	return 0;
-}
-
-/* This function copy from linux/arch/arm/kernel/smp_scu.c */
-
-void exynos4_scu_enable(void __iomem *scu_base)
-{
-	u32 scu_ctrl;
-
-	scu_ctrl = __raw_readl(scu_base);
-	/* already enabled? */
-	if (scu_ctrl & 1)
-		return;
-
-	scu_ctrl |= 1;
-	__raw_writel(scu_ctrl, scu_base);
-
-	/*
-	 * Ensure that the data accessed by CPU0 before the SCU was
-	 * initialised is visible to the other CPUs.
-	 */
-	flush_cache_all();
-}
-
-static unsigned long pll_base_rate;
-
-static void exynos4_restore_pll(void)
-{
-	unsigned long pll_con, locktime, lockcnt;
-	unsigned long pll_in_rate;
-	unsigned int p_div, epll_wait = 0, vpll_wait = 0;
-
-	if (pll_base_rate == 0)
-		return;
-
-	pll_in_rate = pll_base_rate;
-
-	/* EPLL */
-	pll_con = exynos4_epll_save[0].val;
-
-	if (pll_con & (1 << 31)) {
-		pll_con &= (PLL46XX_PDIV_MASK << PLL46XX_PDIV_SHIFT);
-		p_div = (pll_con >> PLL46XX_PDIV_SHIFT);
-
-		pll_in_rate /= 1000000;
-
-		locktime = (3000 / pll_in_rate) * p_div;
-		lockcnt = locktime * 10000 / (10000 / pll_in_rate);
-
-		__raw_writel(lockcnt, S5P_EPLL_LOCK);
-
-		s3c_pm_do_restore_core(exynos4_epll_save,
-					ARRAY_SIZE(exynos4_epll_save));
-		epll_wait = 1;
-	}
-
-	pll_in_rate = pll_base_rate;
-
-	/* VPLL */
-	pll_con = exynos4_vpll_save[0].val;
-
-	if (pll_con & (1 << 31)) {
-		pll_in_rate /= 1000000;
-		/* 750us */
-		locktime = 750;
-		lockcnt = locktime * 10000 / (10000 / pll_in_rate);
-
-		__raw_writel(lockcnt, S5P_VPLL_LOCK);
-
-		s3c_pm_do_restore_core(exynos4_vpll_save,
-					ARRAY_SIZE(exynos4_vpll_save));
-		vpll_wait = 1;
-	}
-
-	/* Wait PLL locking */
-
-	do {
-		if (epll_wait) {
-			pll_con = __raw_readl(S5P_EPLL_CON0);
-			if (pll_con & (1 << S5P_EPLLCON0_LOCKED_SHIFT))
-				epll_wait = 0;
-		}
-
-		if (vpll_wait) {
-			pll_con = __raw_readl(S5P_VPLL_CON0);
-			if (pll_con & (1 << S5P_VPLLCON0_LOCKED_SHIFT))
-				vpll_wait = 0;
-		}
-	} while (epll_wait || vpll_wait);
-}
-
-static struct subsys_interface exynos4_pm_interface = {
-	.name		= "exynos4_pm",
-	.subsys		= &exynos4_subsys,
-	.add_dev	= exynos4_pm_add,
-};
-
-static __init int exynos4_pm_drvinit(void)
-{
-	struct clk *pll_base;
-	unsigned int tmp;
-
-	s3c_pm_init();
-
-	/* All wakeup disable */
-
-	tmp = __raw_readl(S5P_WAKEUP_MASK);
-	tmp |= ((0xFF << 8) | (0x1F << 1));
-	__raw_writel(tmp, S5P_WAKEUP_MASK);
-
-	pll_base = clk_get(NULL, "xtal");
-
-	if (!IS_ERR(pll_base)) {
-		pll_base_rate = clk_get_rate(pll_base);
-		clk_put(pll_base);
-	}
-
-	return subsys_interface_register(&exynos4_pm_interface);
-}
-arch_initcall(exynos4_pm_drvinit);
-
-static int exynos4_pm_suspend(void)
-{
-	unsigned long tmp;
-
-	/* Setting Central Sequence Register for power down mode */
-
-	tmp = __raw_readl(S5P_CENTRAL_SEQ_CONFIGURATION);
-	tmp &= ~S5P_CENTRAL_LOWPWR_CFG;
-	__raw_writel(tmp, S5P_CENTRAL_SEQ_CONFIGURATION);
-
-	if (soc_is_exynos4212()) {
-		tmp = __raw_readl(S5P_CENTRAL_SEQ_OPTION);
-		tmp &= ~(S5P_USE_STANDBYWFI_ISP_ARM |
-			 S5P_USE_STANDBYWFE_ISP_ARM);
-		__raw_writel(tmp, S5P_CENTRAL_SEQ_OPTION);
-	}
-
-	/* Save Power control register */
-	asm ("mrc p15, 0, %0, c15, c0, 0"
-	     : "=r" (tmp) : : "cc");
-	save_arm_register[0] = tmp;
-
-	/* Save Diagnostic register */
-	asm ("mrc p15, 0, %0, c15, c0, 1"
-	     : "=r" (tmp) : : "cc");
-	save_arm_register[1] = tmp;
-
-	return 0;
-}
-
-static void exynos4_pm_resume(void)
-{
-	unsigned long tmp;
-
-	/*
-	 * If PMU failed while entering sleep mode, WFI will be
-	 * ignored by PMU and then exiting cpu_do_idle().
-	 * S5P_CENTRAL_LOWPWR_CFG bit will not be set automatically
-	 * in this situation.
-	 */
-	tmp = __raw_readl(S5P_CENTRAL_SEQ_CONFIGURATION);
-	if (!(tmp & S5P_CENTRAL_LOWPWR_CFG)) {
-		tmp |= S5P_CENTRAL_LOWPWR_CFG;
-		__raw_writel(tmp, S5P_CENTRAL_SEQ_CONFIGURATION);
-		/* No need to perform below restore code */
-		goto early_wakeup;
-	}
-	/* Restore Power control register */
-	tmp = save_arm_register[0];
-	asm volatile ("mcr p15, 0, %0, c15, c0, 0"
-		      : : "r" (tmp)
-		      : "cc");
-
-	/* Restore Diagnostic register */
-	tmp = save_arm_register[1];
-	asm volatile ("mcr p15, 0, %0, c15, c0, 1"
-		      : : "r" (tmp)
-		      : "cc");
-
-	/* For release retention */
-
-	__raw_writel((1 << 28), S5P_PAD_RET_MAUDIO_OPTION);
-	__raw_writel((1 << 28), S5P_PAD_RET_GPIO_OPTION);
-	__raw_writel((1 << 28), S5P_PAD_RET_UART_OPTION);
-	__raw_writel((1 << 28), S5P_PAD_RET_MMCA_OPTION);
-	__raw_writel((1 << 28), S5P_PAD_RET_MMCB_OPTION);
-	__raw_writel((1 << 28), S5P_PAD_RET_EBIA_OPTION);
-	__raw_writel((1 << 28), S5P_PAD_RET_EBIB_OPTION);
-
-	s3c_pm_do_restore_core(exynos4_core_save, ARRAY_SIZE(exynos4_core_save));
-
-	exynos4_restore_pll();
-
-	exynos4_scu_enable(S5P_VA_SCU);
-
-#ifdef CONFIG_CACHE_L2X0
-	s3c_pm_do_restore_core(exynos4_l2cc_save, ARRAY_SIZE(exynos4_l2cc_save));
-	outer_inv_all();
-	/* enable L2X0*/
-	writel_relaxed(1, S5P_VA_L2CC + L2X0_CTRL);
-#endif
-
-early_wakeup:
-	return;
-}
-
-static struct syscore_ops exynos4_pm_syscore_ops = {
-	.suspend	= exynos4_pm_suspend,
-	.resume		= exynos4_pm_resume,
-};
-
-static __init int exynos4_pm_syscore_init(void)
-{
-	register_syscore_ops(&exynos4_pm_syscore_ops);
-	return 0;
-}
-arch_initcall(exynos4_pm_syscore_init);
diff -Naur ./arch/arm/mach-exynos/pm-exynos4.c ../../HK_JB/Kernel/arch/arm/mach-exynos/pm-exynos4.c
--- ./arch/arm/mach-exynos/pm-exynos4.c	2012-12-08 20:40:46.157821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/pm-exynos4.c	2012-11-22 09:13:16.000000000 +0100
@@ -19,8 +19,7 @@
 #include <linux/syscore_ops.h>
 #include <linux/io.h>
 #include <linux/regulator/machine.h>
-#include <linux/err.h>
-#include <linux/clk.h>
+#include <linux/interrupt.h>
 
 #if defined(CONFIG_MACH_M0_CTC)
 #include <linux/mfd/max77693.h>
@@ -33,7 +32,6 @@
 
 #include <plat/cpu.h>
 #include <plat/pm.h>
-#include <plat/pll.h>
 #include <plat/regs-srom.h>
 
 #include <mach/regs-irq.h>
@@ -404,7 +402,7 @@
 	return pending_eint;
 }
 
-static int exynos4_pm_add(struct device *dev, struct subsys_interface *sif)
+static int exynos4_pm_add(struct sys_device *sysdev)
 {
 	pm_cpu_prep = exynos4_cpu_prepare;
 	pm_cpu_sleep = exynos4_cpu_suspend;
@@ -420,10 +418,8 @@
 	return 0;
 }
 
-static struct subsys_interface exynos4_pm_interface = {
-	.name		= "exynos4_pm",
-	.subsys		= &exynos4_subsys,
-	.add_dev	= exynos4_pm_add,
+static struct sysdev_driver exynos4_pm_driver = {
+	.add		= exynos4_pm_add,
 };
 
 static __init int exynos4_pm_drvinit(void)
@@ -441,10 +437,58 @@
 	/* Disable XXTI pad in system level normal mode */
 	__raw_writel(0x0, S5P_XXTI_CONFIGURATION);
 
-	return subsys_interface_register(&exynos4_pm_interface);
+	return sysdev_driver_register(&exynos4_sysclass, &exynos4_pm_driver);
 }
 arch_initcall(exynos4_pm_drvinit);
 
+static void exynos4_show_wakeup_reason_eint(void)
+{
+	int bit, i;
+	long unsigned int ext_int_pend;
+	unsigned long eint_wakeup_mask;
+	bool found = 0;
+
+	eint_wakeup_mask = __raw_readl(S5P_EINT_WAKEUP_MASK);
+
+	for (i = 0; i <= 4; i++) {
+		ext_int_pend = __raw_readl(S5P_EINT_PEND(i));
+
+		for_each_set_bit(bit, &ext_int_pend, 8) {
+			int irq = IRQ_EINT(i * 8) + bit;
+			struct irq_desc *desc = irq_to_desc(irq);
+
+			if (eint_wakeup_mask & (1 << (i * 8 + bit)))
+				continue;
+
+			if (desc && desc->action && desc->action->name)
+				pr_info("Resume caused by IRQ %d, %s\n", irq,
+					desc->action->name);
+			else
+				pr_info("Resume caused by IRQ %d\n", irq);
+
+			found = 1;
+		}
+	}
+
+	if (!found)
+		pr_info("Resume caused by unknown EINT\n");
+}
+
+static void exynos4_show_wakeup_reason(void)
+{
+	unsigned long wakeup_stat;
+
+	wakeup_stat = __raw_readl(S5P_WAKEUP_STAT);
+
+	if (wakeup_stat & S5P_WAKEUP_STAT_RTCALARM)
+		pr_info("Resume caused by RTC alarm\n");
+	else if (wakeup_stat & S5P_WAKEUP_STAT_EINT)
+		exynos4_show_wakeup_reason_eint();
+	else
+		pr_info("Resume caused by wakeup_stat=0x%08lx\n",
+			wakeup_stat);
+}
+
 static int exynos4_pm_suspend(void)
 {
 	unsigned long tmp;
@@ -624,6 +668,7 @@
 
 	/* Clear Check mode */
 	__raw_writel(0x0, REG_INFORM1);
+	exynos4_show_wakeup_reason();
 
 	return;
 }
diff -Naur ./arch/arm/mach-exynos/pm-exynos5.c ../../HK_JB/Kernel/arch/arm/mach-exynos/pm-exynos5.c
--- ./arch/arm/mach-exynos/pm-exynos5.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/pm-exynos5.c	2012-11-22 09:13:16.000000000 +0100
@@ -0,0 +1,516 @@
+/* linux/arch/arm/mach-exynos/pm-exynos5.c
+ *
+ * Copyright (c) 2011 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com
+ *
+ * EXYNOS5 - Power Management support
+ *
+ * Based on arch/arm/mach-s3c2410/pm.c
+ * Copyright (c) 2006 Simtec Electronics
+ *	Ben Dooks <ben@simtec.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+*/
+
+#include <linux/init.h>
+#include <linux/suspend.h>
+#include <linux/syscore_ops.h>
+#include <linux/io.h>
+#include <linux/delay.h>
+#include <linux/interrupt.h>
+
+#include <asm/cacheflush.h>
+
+#include <plat/cpu.h>
+#include <plat/pm.h>
+#include <plat/bts.h>
+
+#include <mach/regs-irq.h>
+#include <mach/regs-gpio.h>
+#include <mach/regs-clock.h>
+#include <mach/regs-pmu5.h>
+#include <mach/pm-core.h>
+#include <mach/pmu.h>
+#include <mach/smc.h>
+
+#include <mach/map-exynos5.h>
+
+void (*exynos5_sleep_gpio_table_set)(void);
+
+#ifdef CONFIG_ARM_TRUSTZONE
+#define REG_INFORM0            (S5P_VA_SYSRAM_NS + 0x8)
+#define REG_INFORM1            (S5P_VA_SYSRAM_NS + 0xC)
+#else
+#define REG_INFORM0            (EXYNOS5_INFORM0)
+#define REG_INFORM1            (EXYNOS5_INFORM1)
+#endif
+
+static struct sleep_save exynos5_set_clksrc[] = {
+	{ .reg = EXYNOS5_CLKSRC_MASK_TOP		, .val = 0xffffffff, },
+	{ .reg = EXYNOS5_CLKSRC_MASK_GSCL		, .val = 0xffffffff, },
+	{ .reg = EXYNOS5_CLKSRC_MASK_DISP1_0		, .val = 0xffffffff, },
+	{ .reg = EXYNOS5_CLKSRC_MASK_MAUDIO		, .val = 0xffffffff, },
+	{ .reg = EXYNOS5_CLKSRC_MASK_FSYS		, .val = 0xffffffff, },
+	{ .reg = EXYNOS5_CLKSRC_MASK_PERIC0		, .val = 0xffffffff, },
+	{ .reg = EXYNOS5_CLKSRC_MASK_PERIC1		, .val = 0xffffffff, },
+	{ .reg = EXYNOS5_CLKSRC_MASK_ISP		, .val = 0xffffffff, },
+};
+
+static struct sleep_save exynos5_core_save[] = {
+	/* GIC side */
+	SAVE_ITEM(S5P_VA_GIC_CPU + 0x000),
+	SAVE_ITEM(S5P_VA_GIC_CPU + 0x004),
+	SAVE_ITEM(S5P_VA_GIC_CPU + 0x008),
+	SAVE_ITEM(S5P_VA_GIC_CPU + 0x00C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x000),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x004),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x100),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x104),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x108),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x10C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x110),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x300),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x304),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x308),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x30C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x310),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x400),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x404),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x408),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x40C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x410),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x414),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x418),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x41C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x420),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x424),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x428),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x42C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x430),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x434),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x438),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x43C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x440),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x444),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x448),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x44C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x450),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x454),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x458),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x45C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x460),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x464),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x468),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x46C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x470),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x474),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x478),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x47C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x480),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x484),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x488),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x48C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x490),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x494),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x498),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x49C),
+
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x800),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x804),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x808),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x80C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x810),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x814),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x818),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x81C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x820),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x824),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x828),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x82C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x830),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x834),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x838),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x83C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x840),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x844),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x848),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x84C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x850),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x854),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x858),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x85C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x860),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x864),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x868),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x86C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x870),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x874),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x878),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x87C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x880),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x884),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x888),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x88C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x890),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x894),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x898),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0x89C),
+
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0xC00),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0xC04),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0xC08),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0xC0C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0xC10),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0xC14),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0xC18),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0xC1C),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0xC20),
+	SAVE_ITEM(S5P_VA_GIC_DIST + 0xC24),
+
+	SAVE_ITEM(S5P_VA_COMBINER_BASE + 0x000),
+	SAVE_ITEM(S5P_VA_COMBINER_BASE + 0x010),
+	SAVE_ITEM(S5P_VA_COMBINER_BASE + 0x020),
+	SAVE_ITEM(S5P_VA_COMBINER_BASE + 0x030),
+	SAVE_ITEM(S5P_VA_COMBINER_BASE + 0x040),
+	SAVE_ITEM(S5P_VA_COMBINER_BASE + 0x050),
+	SAVE_ITEM(S5P_VA_COMBINER_BASE + 0x060),
+	SAVE_ITEM(S5P_VA_COMBINER_BASE + 0x070),
+
+	SAVE_ITEM(S3C_VA_SYS + 0x234),
+};
+
+static struct sleep_save exynos5_regs_save[] = {
+	/* Common GPIO Part1 */
+        SAVE_ITEM(S5P_VA_GPIO + 0x700),
+        SAVE_ITEM(S5P_VA_GPIO + 0x704),
+        SAVE_ITEM(S5P_VA_GPIO + 0x708),
+        SAVE_ITEM(S5P_VA_GPIO + 0x70C),
+        SAVE_ITEM(S5P_VA_GPIO + 0x710),
+        SAVE_ITEM(S5P_VA_GPIO + 0x714),
+        SAVE_ITEM(S5P_VA_GPIO + 0x718),
+        SAVE_ITEM(S5P_VA_GPIO + 0x71C),
+        SAVE_ITEM(S5P_VA_GPIO + 0x720),
+        SAVE_ITEM(S5P_VA_GPIO + 0x724),
+        SAVE_ITEM(S5P_VA_GPIO + 0x728),
+        SAVE_ITEM(S5P_VA_GPIO + 0x72C),
+        SAVE_ITEM(S5P_VA_GPIO + 0x730),
+        SAVE_ITEM(S5P_VA_GPIO + 0x900),
+        SAVE_ITEM(S5P_VA_GPIO + 0x904),
+        SAVE_ITEM(S5P_VA_GPIO + 0x908),
+        SAVE_ITEM(S5P_VA_GPIO + 0x90C),
+        SAVE_ITEM(S5P_VA_GPIO + 0x910),
+        SAVE_ITEM(S5P_VA_GPIO + 0x914),
+        SAVE_ITEM(S5P_VA_GPIO + 0x918),
+        SAVE_ITEM(S5P_VA_GPIO + 0x91C),
+        SAVE_ITEM(S5P_VA_GPIO + 0x920),
+        SAVE_ITEM(S5P_VA_GPIO + 0x924),
+        SAVE_ITEM(S5P_VA_GPIO + 0x928),
+        SAVE_ITEM(S5P_VA_GPIO + 0x92C),
+        SAVE_ITEM(S5P_VA_GPIO + 0x930),
+	/* Common GPIO Part2 */
+        SAVE_ITEM(S5P_VA_GPIO2 + 0x700),
+        SAVE_ITEM(S5P_VA_GPIO2 + 0x704),
+        SAVE_ITEM(S5P_VA_GPIO2 + 0x708),
+        SAVE_ITEM(S5P_VA_GPIO2 + 0x70C),
+        SAVE_ITEM(S5P_VA_GPIO2 + 0x710),
+        SAVE_ITEM(S5P_VA_GPIO2 + 0x714),
+        SAVE_ITEM(S5P_VA_GPIO2 + 0x718),
+        SAVE_ITEM(S5P_VA_GPIO2 + 0x71C),
+        SAVE_ITEM(S5P_VA_GPIO2 + 0x720),
+        SAVE_ITEM(S5P_VA_GPIO2 + 0x900),
+        SAVE_ITEM(S5P_VA_GPIO2 + 0x904),
+        SAVE_ITEM(S5P_VA_GPIO2 + 0x908),
+        SAVE_ITEM(S5P_VA_GPIO2 + 0x90C),
+        SAVE_ITEM(S5P_VA_GPIO2 + 0x910),
+        SAVE_ITEM(S5P_VA_GPIO2 + 0x914),
+        SAVE_ITEM(S5P_VA_GPIO2 + 0x918),
+        SAVE_ITEM(S5P_VA_GPIO2 + 0x91C),
+        SAVE_ITEM(S5P_VA_GPIO2 + 0x920),
+};
+
+void exynos5_cpu_suspend(void)
+{
+	unsigned int tmp;
+
+	/* Disable wakeup by EXT_GIC */
+	tmp = __raw_readl(EXYNOS5_WAKEUP_MASK);
+	tmp |= EXYNOS5_DEFAULT_WAKEUP_MACK;
+	__raw_writel(tmp, EXYNOS5_WAKEUP_MASK);
+
+	/*
+	 * GPS LPI mask.
+	 */
+	if (samsung_rev() < EXYNOS5250_REV_1_0)
+		__raw_writel(0x10000, EXYNOS5_GPS_LPI);
+
+	if (samsung_rev() >= EXYNOS5250_REV_1_0)
+		exynos4_reset_assert_ctrl(0);
+
+#ifdef CONFIG_ARM_TRUSTZONE
+	exynos_smc(SMC_CMD_SLEEP, 0, 0, 0);
+#else
+	/* issue the standby signal into the pm unit. */
+	cpu_do_idle();
+#endif
+}
+
+static void exynos5_pm_prepare(void)
+{
+	unsigned int tmp;
+
+	if (exynos5_sleep_gpio_table_set)
+		exynos5_sleep_gpio_table_set();
+
+	if (samsung_rev() < EXYNOS5250_REV_1_0) {
+		/* Disable USE_RETENTION of JPEG_MEM_OPTION */
+		tmp = __raw_readl(EXYNOS5_JPEG_MEM_OPTION);
+		tmp &= ~EXYNOS5_OPTION_USE_RETENTION;
+		__raw_writel(tmp, EXYNOS5_JPEG_MEM_OPTION);
+	}
+
+	if (samsung_rev() >= EXYNOS5250_REV_1_0) {
+		tmp = __raw_readl(EXYNOS5_ARM_L2_OPTION);
+		tmp &= ~(1 << 4);
+		__raw_writel(tmp, EXYNOS5_ARM_L2_OPTION);
+	}
+
+	/* Set value of power down register for sleep mode */
+	exynos5_sys_powerdown_conf(SYS_SLEEP);
+	__raw_writel(S5P_CHECK_SLEEP, REG_INFORM1);
+
+	/* ensure at least INFORM0 has the resume address */
+	__raw_writel(virt_to_phys(s3c_cpu_resume), REG_INFORM0);
+
+	if (exynos4_is_c2c_use()) {
+		tmp = __raw_readl(EXYNOS5_INTRAM_MEM_OPTION);
+		tmp &= ~EXYNOS5_OPTION_USE_RETENTION;
+		__raw_writel(tmp, EXYNOS5_INTRAM_MEM_OPTION);
+	}
+
+	s3c_pm_do_restore_core(exynos5_set_clksrc, ARRAY_SIZE(exynos5_set_clksrc));
+}
+
+static int exynos5_pm_add(struct sys_device *sysdev)
+{
+	pm_cpu_prep = exynos5_pm_prepare;
+	pm_cpu_sleep = exynos5_cpu_suspend;
+
+	return 0;
+}
+
+static struct sysdev_driver exynos5_pm_driver = {
+	.add		= exynos5_pm_add,
+};
+
+static __init int exynos5_pm_drvinit(void)
+{
+	s3c_pm_init();
+
+	return sysdev_driver_register(&exynos5_sysclass, &exynos5_pm_driver);
+}
+arch_initcall(exynos5_pm_drvinit);
+
+static void exynos5_show_wakeup_reason_eint(void)
+{
+	int bit, i;
+	long unsigned int ext_int_pend;
+	unsigned long eint_wakeup_mask;
+	bool found = 0;
+
+	eint_wakeup_mask = __raw_readl(EXYNOS5_EINT_WAKEUP_MASK);
+
+	for (i = 0; i <= 4; i++) {
+		ext_int_pend = __raw_readl(S5P_EINT_PEND(i));
+
+		for_each_set_bit(bit, &ext_int_pend, 8) {
+			int irq = IRQ_EINT(i * 8) + bit;
+			struct irq_desc *desc = irq_to_desc(irq);
+
+			if (eint_wakeup_mask & (1 << (i * 8 + bit)))
+				continue;
+
+			if (desc && desc->action && desc->action->name)
+				pr_info("Resume caused by IRQ %d, %s\n", irq,
+					desc->action->name);
+			else
+				pr_info("Resume caused by IRQ %d\n", irq);
+
+			found = 1;
+		}
+	}
+
+	if (!found)
+		pr_info("Resume caused by unknown EINT\n");
+}
+
+static void exynos5_show_wakeup_reason(void)
+{
+	unsigned long wakeup_stat;
+
+	wakeup_stat = __raw_readl(EXYNOS5_WAKEUP_STAT);
+
+	if (wakeup_stat & EXYNOS5_MASK_RTC_ALARM)
+		pr_info("Resume caused by RTC alarm\n");
+	else if (wakeup_stat & EXYNOS5_MASK_EINT)
+		exynos5_show_wakeup_reason_eint();
+	else
+		pr_info("Resume caused by wakeup_stat=0x%08lx\n",
+			wakeup_stat);
+}
+
+bool isp_pwr_off;
+
+static int exynos5_pm_suspend(void)
+{
+	unsigned long tmp;
+	u32 timeout;
+
+	s3c_pm_do_save(exynos5_core_save, ARRAY_SIZE(exynos5_core_save));
+
+	s3c_pm_do_save(exynos5_regs_save, ARRAY_SIZE(exynos5_regs_save));
+
+	if (samsung_rev() < EXYNOS5250_REV_1_0) {
+		if (!(__raw_readl(EXYNOS5_ISP_STATUS) & S5P_INT_LOCAL_PWR_EN)) {
+			isp_pwr_off = true;
+			/*
+			 * Before enter suspend, ISP power domain should be on
+			 */
+			__raw_writel(S5P_INT_LOCAL_PWR_EN,
+					EXYNOS5_ISP_CONFIGURATION);
+			timeout = 1000;
+
+			while (!(__raw_readl(EXYNOS5_ISP_STATUS) & S5P_INT_LOCAL_PWR_EN)) {
+				if (timeout == 0) {
+					printk(KERN_ERR "ISP power domain can not on\n");
+				}
+				timeout--;
+				udelay(1);
+			}
+		}
+	}
+
+	tmp = __raw_readl(EXYNOS5_CENTRAL_SEQ_CONFIGURATION);
+	tmp &= ~(EXYNOS5_CENTRAL_LOWPWR_CFG);
+	__raw_writel(tmp, EXYNOS5_CENTRAL_SEQ_CONFIGURATION);
+
+	tmp = __raw_readl(EXYNOS5_CENTRAL_SEQ_OPTION);
+
+	tmp = (EXYNOS5_USE_STANDBYWFI_ARM_CORE0 |
+		EXYNOS5_USE_STANDBYWFE_ARM_CORE0);
+
+	__raw_writel(tmp, EXYNOS5_CENTRAL_SEQ_OPTION);
+
+	return 0;
+}
+
+static void exynos5_pm_resume(void)
+{
+	unsigned long tmp, srctmp;
+	u32 timeout;
+
+	if (samsung_rev() >= EXYNOS5250_REV_1_0)
+		exynos4_reset_assert_ctrl(1);
+
+	/* If PMU failed while entering sleep mode, WFI will be
+	 * ignored by PMU and then exiting cpu_do_idle().
+	 * EXYNOS5_CENTRAL_SEQ_CONFIGURATION bit will not be set
+	 * automatically in this situation.
+	 */
+	tmp = __raw_readl(EXYNOS5_CENTRAL_SEQ_CONFIGURATION);
+
+	if (!(tmp & EXYNOS5_CENTRAL_LOWPWR_CFG)) {
+		tmp |= EXYNOS5_CENTRAL_LOWPWR_CFG;
+		__raw_writel(tmp, EXYNOS5_CENTRAL_SEQ_CONFIGURATION);
+		/* No need to perform below restore code */
+		goto early_wakeup;
+	}
+
+	if ((samsung_rev() < EXYNOS5250_REV_1_0) && isp_pwr_off) {
+		srctmp = __raw_readl(EXYNOS5_CLKSRC_TOP3);
+		/*
+		 * To ISP power domain off,
+		 * first, ISP_ARM power domain be off.
+		 */
+		if ((__raw_readl(EXYNOS5_ISP_ARM_STATUS) & 0x1)) {
+			/* Disable ISP_ARM */
+			timeout = __raw_readl(EXYNOS5_ISP_ARM_OPTION);
+			timeout &= ~EXYNOS5_ISP_ARM_ENABLE;
+			__raw_writel(timeout, EXYNOS5_ISP_ARM_OPTION);
+
+			/* ISP_ARM power off */
+			__raw_writel(0x0, EXYNOS5_ISP_ARM_CONFIGURATION);
+
+			timeout = 1000;
+
+			while (__raw_readl(EXYNOS5_ISP_ARM_STATUS) & 0x1) {
+				if (timeout == 0) {
+					printk(KERN_ERR "ISP_ARM power domain can not off\n");
+					return;
+				}
+				timeout--;
+				udelay(1);
+			}
+			/* CMU_RESET_ISP_ARM off */
+			__raw_writel(0x0, EXYNOS5_CMU_RESET_ISP_SYS_PWR_REG);
+		}
+
+		__raw_writel(0x0, EXYNOS5_ISP_CONFIGURATION);
+
+		/* Wait max 1ms */
+		timeout = 1000;
+		while (__raw_readl(EXYNOS5_ISP_STATUS) & S5P_INT_LOCAL_PWR_EN) {
+			if (timeout == 0) {
+				printk(KERN_ERR "Power domain ISP disable failed.\n");
+				return;
+			}
+			timeout--;
+			udelay(1);
+		}
+
+		__raw_writel(srctmp, EXYNOS5_CLKSRC_TOP3);
+
+		isp_pwr_off = false;
+	}
+
+	/* For release retention */
+	__raw_writel((1 << 28), EXYNOS5_PAD_RETENTION_MAU_OPTION);
+	__raw_writel((1 << 28), EXYNOS5_PAD_RETENTION_GPIO_OPTION);
+	__raw_writel((1 << 28), EXYNOS5_PAD_RETENTION_UART_OPTION);
+	__raw_writel((1 << 28), EXYNOS5_PAD_RETENTION_MMCA_OPTION);
+	__raw_writel((1 << 28), EXYNOS5_PAD_RETENTION_MMCB_OPTION);
+	__raw_writel((1 << 28), EXYNOS5_PAD_RETENTION_EBIA_OPTION);
+	__raw_writel((1 << 28), EXYNOS5_PAD_RETENTION_EBIB_OPTION);
+	__raw_writel((1 << 28), EXYNOS5_PAD_RETENTION_SPI_OPTION);
+	
+	/* For Retention release on GPV block */
+	__raw_writel((1 << 28), EXYNOS5_PAD_RETENTION_GPIO_SYSMEM_OPTION);
+
+	/* Disable CPU_nIRQ[0:1] */
+	tmp = ((0x1 << 8) | (0x1 << 0));
+	__raw_writel(tmp, S5P_VA_COMBINER_BASE + 0x54);
+
+	bts_enable(PD_TOP);
+
+	s3c_pm_do_restore(exynos5_regs_save, ARRAY_SIZE(exynos5_regs_save));
+
+	s3c_pm_do_restore_core(exynos5_core_save, ARRAY_SIZE(exynos5_core_save));
+
+early_wakeup:
+	__raw_writel(0x0, REG_INFORM1);
+	exynos5_show_wakeup_reason();
+}
+
+static struct syscore_ops exynos5_pm_syscore_ops = {
+	.suspend	= exynos5_pm_suspend,
+	.resume		= exynos5_pm_resume,
+};
+
+static __init int exynos5_pm_syscore_init(void)
+{
+	register_syscore_ops(&exynos5_pm_syscore_ops);
+
+	return 0;
+}
+arch_initcall(exynos5_pm_syscore_init);
diff -Naur ./arch/arm/mach-exynos/pmu-exynos4.c ../../HK_JB/Kernel/arch/arm/mach-exynos/pmu-exynos4.c
--- ./arch/arm/mach-exynos/pmu-exynos4.c	2012-12-08 20:40:46.157821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/pmu-exynos4.c	2012-11-22 09:13:16.000000000 +0100
@@ -301,6 +301,7 @@
 	{ S5P_GPS_ALIVE_SYS,			{ 7, 0, 0 } },
 	{ S5P_CMU_SYSCLK_ISP_SYS,		{ 1, 0, 0 } },
 	{ S5P_CMU_SYSCLK_GPS_SYS,		{ 1, 0, 0 } },
+	{ S5P_LOGIC_RESET_DURATION3,	{ 0xf, 0xf, 0xf } },
 	{ S5P_XUSBXTI_SYS,			{ 1, 1, 0 } },
 };
 
diff -Naur ./arch/arm/mach-exynos/pmu-exynos5.c ../../HK_JB/Kernel/arch/arm/mach-exynos/pmu-exynos5.c
--- ./arch/arm/mach-exynos/pmu-exynos5.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/pmu-exynos5.c	2012-11-22 09:13:16.000000000 +0100
@@ -0,0 +1,298 @@
+/* linux/arch/arm/mach-exynos/pmu-exynos5.c
+ *
+ * Copyright (c) 2011 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com/
+ *
+ * EXYNOS5 - CPU PMU(Power Management Unit) support
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/io.h>
+#include <linux/kernel.h>
+
+#include <mach/regs-clock.h>
+#include <mach/regs-pmu5.h>
+#include <mach/pmu.h>
+
+#include <plat/cpu.h>
+
+static struct exynos4_pmu_conf *exynos5_pmu_config;
+
+static unsigned int entry_cnt;
+
+static struct exynos4_pmu_conf exynos52xx_pmu_config[] = {
+	/* { .reg = address, .val = { AFTR, LPA, SLEEP } */
+	{ EXYNOS5_ARM_CORE0_SYS_PWR_REG,			{ 0x0, 0x0, 0x2} },
+	{ EXYNOS5_DIS_IRQ_ARM_CORE0_LOCAL_SYS_PWR_REG,		{ 0x0, 0x0, 0x0} },
+	{ EXYNOS5_DIS_IRQ_ARM_CORE0_CENTRAL_SYS_PWR_REG,	{ 0x0, 0x0, 0x0} },
+	{ EXYNOS5_ARM_CORE1_SYS_PWR_REG,			{ 0x0, 0x0, 0x2} },
+	{ EXYNOS5_DIS_IRQ_ARM_CORE1_LOCAL_SYS_PWR_REG,		{ 0x0, 0x0, 0x0} },
+	{ EXYNOS5_DIS_IRQ_ARM_CORE1_CENTRAL_SYS_PWR_REG,	{ 0x0, 0x0, 0x0} },
+	{ EXYNOS5_FSYS_ARM_SYS_PWR_REG,				{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_DIS_IRQ_FSYS_ARM_CENTRAL_SYS_PWR_REG,		{ 0x1, 0x1, 0x1} },
+	{ EXYNOS5_ISP_ARM_SYS_PWR_REG,				{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_DIS_IRQ_ISP_ARM_LOCAL_SYS_PWR_REG,		{ 0x0, 0x0, 0x0} },
+	{ EXYNOS5_DIS_IRQ_ISP_ARM_CENTRAL_SYS_PWR_REG,		{ 0x0, 0x0, 0x0} },
+	{ EXYNOS5_ARM_COMMON_SYS_PWR_REG,			{ 0x0, 0x0, 0x2} },
+	{ EXYNOS5_ARM_L2_SYS_PWR_REG,				{ 0x0, 0x0, 0x3} },
+	{ EXYNOS5_CMU_ACLKSTOP_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_SCLKSTOP_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_RESET_SYS_PWR_REG,			{ 0x1, 0x1, 0x0} },
+	{ EXYNOS5_CMU_ACLKSTOP_SYSMEM_SYS_PWR_REG,		{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_SCLKSTOP_SYSMEM_SYS_PWR_REG,		{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_RESET_SYSMEM_SYS_PWR_REG,			{ 0x1, 0x1, 0x0} },
+	{ EXYNOS5_DRAM_FREQ_DOWN_SYS_PWR_REG,			{ 0x1, 0x1, 0x0} },
+	{ EXYNOS5_DDRPHY_DLLOFF_SYS_PWR_REG,			{ 0x1, 0x1, 0x0} },
+	{ EXYNOS5_DDRPHY_DLLLOCK_SYS_PWR_REG,			{ 0x1, 0x1, 0x1} },
+	{ EXYNOS5_APLL_SYSCLK_SYS_PWR_REG,			{ 0x0, 0x0, 0x0} },
+	{ EXYNOS5_MPLL_SYSCLK_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_VPLL_SYSCLK_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_EPLL_SYSCLK_SYS_PWR_REG,			{ 0x1, 0x1, 0x0} },
+	{ EXYNOS5_BPLL_SYSCLK_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CPLL_SYSCLK_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_MPLLUSER_SYSCLK_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_BPLLUSER_SYSCLK_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_TOP_BUS_SYS_PWR_REG,				{ 0x3, 0x0, 0x0} },
+	{ EXYNOS5_TOP_RETENTION_SYS_PWR_REG,			{ 0x1, 0x0, 0x1} },
+	{ EXYNOS5_TOP_PWR_SYS_PWR_REG,				{ 0x3, 0x0, 0x3} },
+	{ EXYNOS5_TOP_BUS_SYSMEM_SYS_PWR_REG,			{ 0x3, 0x0, 0x0} },
+	{ EXYNOS5_TOP_RETENTION_SYSMEM_SYS_PWR_REG,		{ 0x1, 0x0, 0x1} },
+	{ EXYNOS5_TOP_PWR_SYSMEM_SYS_PWR_REG,			{ 0x3, 0x0, 0x3} },
+	{ EXYNOS5_LOGIC_RESET_SYS_PWR_REG,			{ 0x1, 0x1, 0x0} },
+	{ EXYNOS5_OSCCLK_GATE_SYS_PWR_REG,			{ 0x1, 0x0, 0x1} },
+	{ EXYNOS5_LOGIC_RESET_SYSMEM_SYS_PWR_REG,		{ 0x1, 0x1, 0x0} },
+	{ EXYNOS5_OSCCLK_GATE_SYSMEM_SYS_PWR_REG,		{ 0x1, 0x0, 0x1} },
+	{ EXYNOS5_USBOTG_MEM_SYS_PWR_REG,			{ 0x3, 0x0, 0x0} },
+	{ EXYNOS5_G2D_MEM_SYS_PWR_REG,				{ 0x3, 0x0, 0x0} },
+	{ EXYNOS5_USBDRD_MEM_SYS_PWR_REG,			{ 0x3, 0x0, 0x0} },
+	{ EXYNOS5_SDMMC_MEM_SYS_PWR_REG,			{ 0x3, 0x0, 0x0} },
+	{ EXYNOS5_CSSYS_MEM_SYS_PWR_REG,			{ 0x3, 0x0, 0x0} },
+	{ EXYNOS5_SECSS_MEM_SYS_PWR_REG,			{ 0x3, 0x0, 0x0} },
+	{ EXYNOS5_ROTATOR_MEM_SYS_PWR_REG,			{ 0x3, 0x0, 0x0} },
+	{ EXYNOS5_INTRAM_MEM_SYS_PWR_REG,			{ 0x3, 0x0, 0x0} },
+	{ EXYNOS5_INTROM_MEM_SYS_PWR_REG,			{ 0x3, 0x0, 0x0} },
+	{ EXYNOS5_JPEG_MEM_SYS_PWR_REG,				{ 0x3, 0x0, 0x0} },
+	{ EXYNOS5_HSI_MEM_SYS_PWR_REG,				{ 0x3, 0x0, 0x0} },
+	{ EXYNOS5_MCUIOP_MEM_SYS_PWR_REG,			{ 0x3, 0x0, 0x0} },
+	{ EXYNOS5_SATA_MEM_SYS_PWR_REG,				{ 0x3, 0x0, 0x0} },
+	{ EXYNOS5_PAD_RETENTION_DRAM_SYS_PWR_REG,		{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_PAD_RETENTION_MAU_SYS_PWR_REG,		{ 0x1, 0x1, 0x0} },
+	{ EXYNOS5_PAD_RETENTION_GPIO_SYS_PWR_REG,		{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_PAD_RETENTION_UART_SYS_PWR_REG,		{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_PAD_RETENTION_MMCA_SYS_PWR_REG,		{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_PAD_RETENTION_MMCB_SYS_PWR_REG,		{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_PAD_RETENTION_EBIA_SYS_PWR_REG,		{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_PAD_RETENTION_EBIB_SYS_PWR_REG,		{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_PAD_RETENTION_SPI_SYS_PWR_REG,		{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_PAD_RETENTION_GPIO_SYSMEM_SYS_PWR_REG,	{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_PAD_ISOLATION_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_PAD_ISOLATION_SYSMEM_SYS_PWR_REG,		{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_PAD_ALV_SEL_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_EXT_REGULATOR_SYS_PWR_REG,			{ 0x1, 0x1, 0x0} },
+	{ EXYNOS5_GPIO_MODE_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_GPIO_MODE_SYSMEM_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_GPIO_MODE_MAU_SYS_PWR_REG,			{ 0x1, 0x1, 0x0} },
+	{ EXYNOS5_TOP_ASB_RESET_SYS_PWR_REG,			{ 0x1, 0x1, 0x1} },
+	{ EXYNOS5_TOP_ASB_ISOLATION_SYS_PWR_REG,		{ 0x1, 0x0, 0x1} },
+	{ EXYNOS5_GSCL_SYS_PWR_REG,				{ 0x7, 0x0, 0x0} },
+	{ EXYNOS5_ISP_SYS_PWR_REG,				{ 0x7, 0x0, 0x0} },
+	{ EXYNOS5_MFC_SYS_PWR_REG,				{ 0x7, 0x0, 0x0} },
+	{ EXYNOS5_G3D_SYS_PWR_REG,				{ 0x7, 0x0, 0x0} },
+	{ EXYNOS5_DISP1_SYS_PWR_REG,				{ 0x7, 0x0, 0x0} },
+	{ EXYNOS5_MAU_SYS_PWR_REG,				{ 0x7, 0x7, 0x0} },
+	{ EXYNOS5_CMU_CLKSTOP_GSCL_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_CLKSTOP_ISP_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_CLKSTOP_MFC_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_CLKSTOP_G3D_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_CLKSTOP_DISP1_SYS_PWR_REG,		{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_CLKSTOP_MAU_SYS_PWR_REG,			{ 0x1, 0x1, 0x0} },
+	{ EXYNOS5_CMU_SYSCLK_GSCL_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_SYSCLK_ISP_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_SYSCLK_MFC_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_SYSCLK_G3D_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_SYSCLK_DISP1_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_SYSCLK_MAU_SYS_PWR_REG,			{ 0x1, 0x1, 0x0} },
+	{ EXYNOS5_CMU_RESET_GSCL_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_RESET_ISP_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_RESET_MFC_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_RESET_G3D_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_RESET_DISP1_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_RESET_MAU_SYS_PWR_REG,			{ 0x1, 0x1, 0x0} },
+	{ EXYNOS5_XXTI_SYS_PWR_REG,				{ 0x1, 0x1, 0x0} },
+};
+
+static struct exynos4_pmu_conf exynos52xx_pmu_config_gps[] = {
+	/* { .reg = address, .val = { AFTR, LPA, SLEEP } */
+	{ EXYNOS5_CMU_ACLKSTOP_SYS_PWR_REG,			{ 0x1, 0x0, 0x1} },
+	{ EXYNOS5_CMU_SCLKSTOP_SYS_PWR_REG,			{ 0x1, 0x0, 0x1} },
+	{ EXYNOS5_CMU_ACLKSTOP_SYSMEM_SYS_PWR_REG,		{ 0x1, 0x0, 0x1} },
+	{ EXYNOS5_CMU_SCLKSTOP_SYSMEM_SYS_PWR_REG,		{ 0x1, 0x0, 0x1} },
+	{ EXYNOS5_DRAM_FREQ_DOWN_SYS_PWR_REG,			{ 0x1, 0x1, 0x1} },
+	{ EXYNOS5_DDRPHY_DLLOFF_SYS_PWR_REG,			{ 0x1, 0x1, 0x1} },
+	{ EXYNOS5_GPS_SYS_PWR_REG,				{ 0x7, 0x0, 0x0} },
+	{ EXYNOS5_CMU_CLKSTOP_GPS_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_SYSCLK_GPS_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_CMU_RESET_GPS_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_XXTI_SYS_PWR_REG,				{ 0x1, 0x1, 0x0} },
+	{ EXYNOS5_ARM_L2_SYS_PWR_REG,				{ 0x3, 0x3, 0x3} },
+};
+
+static struct exynos4_pmu_conf exynos52xx_pmu_c2c_config[] = {
+	/* { .reg = address, .val = { AFTR, LPA, SLEEP } */
+	{ EXYNOS5_CMU_RESET_SYSMEM_SYS_PWR_REG,			{ 0x1, 0x1, 0x1} },
+	{ EXYNOS5_DDRPHY_DLLLOCK_SYS_PWR_REG,			{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_TOP_RETENTION_SYSMEM_SYS_PWR_REG,		{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_TOP_PWR_SYSMEM_SYS_PWR_REG,			{ 0x3, 0x0, 0x0} },
+	{ EXYNOS5_LOGIC_RESET_SYSMEM_SYS_PWR_REG,		{ 0x1, 0x1, 0x1} },
+	{ EXYNOS5_OSCCLK_GATE_SYSMEM_SYS_PWR_REG,		{ 0x1, 0x0, 0x0} },
+	{ EXYNOS5_TOP_ASB_RESET_SYS_PWR_REG,			{ 0x1, 0x1, 0x0} },
+	{ EXYNOS5_TOP_ASB_ISOLATION_SYS_PWR_REG,		{ 0x1, 0x0, 0x0} },
+};
+
+void __iomem *list_both_cnt_feed[] = {
+	EXYNOS5_ARM_CORE0_OPTION,
+	EXYNOS5_ARM_CORE1_OPTION,
+	EXYNOS5_ARM_COMMON_OPTION,
+	EXYNOS5_GSCL_OPTION,
+	EXYNOS5_ISP_OPTION,
+	EXYNOS5_MFC_OPTION,
+	EXYNOS5_G3D_OPTION,
+	EXYNOS5_DISP1_OPTION,
+	EXYNOS5_MAU_OPTION,
+	EXYNOS5_TOP_PWR_OPTION,
+	EXYNOS5_TOP_PWR_SYSMEM_OPTION,
+};
+
+void __iomem *list_diable_wfi_wfe[] = {
+	EXYNOS5_ARM_CORE1_OPTION,
+	EXYNOS5_FSYS_ARM_OPTION,
+	EXYNOS5_ISP_ARM_OPTION,
+};
+
+static void exynos5_init_pmu(void)
+{
+	unsigned int i;
+	unsigned int tmp;
+
+	/*
+	 * Enable both SC_FEEDBACK and SC_COUNTER
+	 */
+	for (i = 0 ; i < ARRAY_SIZE(list_both_cnt_feed) ; i++) {
+		tmp = __raw_readl(list_both_cnt_feed[i]);
+		tmp |= (EXYNOS5_USE_SC_FEEDBACK |
+			EXYNOS5_USE_SC_COUNTER);
+		__raw_writel(tmp, list_both_cnt_feed[i]);
+	}
+
+	if (samsung_rev() < EXYNOS5250_REV_1_0) {
+		tmp = __raw_readl(EXYNOS5_GPS_OPTION);
+		tmp |= (EXYNOS5_USE_SC_FEEDBACK |
+			EXYNOS5_USE_SC_COUNTER);
+		__raw_writel(tmp, EXYNOS5_GPS_OPTION);
+	}
+
+	/*
+	 * SKIP_DEACTIVATE_ACEACP_IN_PWDN_BITFIELD Enable
+	 * MANUAL_L2RSTDISABLE_CONTROL_BITFIELD Enable
+	 */
+	if (samsung_rev() < EXYNOS5250_REV_1_0) {
+		tmp = __raw_readl(EXYNOS5_ARM_COMMON_OPTION);
+		tmp |= (EXYNOS5_MANUAL_L2RSTDISABLE_CONTROL |
+			EXYNOS5_SKIP_DEACTIVATE_ACEACP_IN_PWDN);
+		__raw_writel(tmp, EXYNOS5_ARM_COMMON_OPTION);
+	} else {
+		tmp = __raw_readl(EXYNOS5_ARM_COMMON_OPTION);
+		tmp |= EXYNOS5_SKIP_DEACTIVATE_ACEACP_IN_PWDN;
+		__raw_writel(tmp, EXYNOS5_ARM_COMMON_OPTION);
+	}
+
+	/*
+	 * Disable WFI/WFE on XXX_OPTION
+	 */
+	for (i = 0 ; i < ARRAY_SIZE(list_diable_wfi_wfe) ; i++) {
+		tmp = __raw_readl(list_diable_wfi_wfe[i]);
+		tmp &= ~(EXYNOS5_OPTION_USE_STANDBYWFE |
+			 EXYNOS5_OPTION_USE_STANDBYWFI);
+		__raw_writel(tmp, list_diable_wfi_wfe[i]);
+	}
+}
+
+void exynos5_pmu_xclkout_set(unsigned int enable, enum xclkout_select source)
+{
+	unsigned int tmp;
+
+	if (enable) {
+		tmp = __raw_readl(S5P_PMU_DEBUG);
+		/* CLKOUT enable */
+		tmp &= ~ (0xF << S5P_PMU_CLKOUT_SEL_SHIFT | S5P_CLKOUT_DISABLE);
+		tmp |= (source << S5P_PMU_CLKOUT_SEL_SHIFT);
+		__raw_writel(tmp, S5P_PMU_DEBUG);
+	} else {
+		tmp = __raw_readl(S5P_PMU_DEBUG);
+		/* CLKOUT disable */
+		tmp |= S5P_CLKOUT_DISABLE;
+		__raw_writel(tmp, S5P_PMU_DEBUG);
+	}
+
+	printk(KERN_DEBUG "pmu_debug: 0x%08x\n", __raw_readl(S5P_PMU_DEBUG));
+}
+EXPORT_SYMBOL_GPL(exynos5_pmu_xclkout_set);
+
+void exynos5_sys_powerdown_xxti_control(unsigned int enable)
+{
+	unsigned int count = entry_cnt;
+
+	if (enable)
+		exynos5_pmu_config[count - 1].val[SYS_SLEEP] = 0x1;
+	else
+		exynos5_pmu_config[count - 1].val[SYS_SLEEP] = 0x0;
+
+	printk(KERN_DEBUG "xxti_control: %ld\n",
+			exynos5_pmu_config[count - 1].val[SYS_SLEEP]);
+}
+EXPORT_SYMBOL_GPL(exynos5_sys_powerdown_xxti_control);
+
+
+void exynos5_sys_powerdown_conf(enum sys_powerdown mode)
+{
+	unsigned int count = entry_cnt;
+	unsigned int i;
+
+	exynos5_init_pmu();
+
+	for (; count > 0; count--)
+		__raw_writel(exynos5_pmu_config[count - 1].val[mode],
+				exynos5_pmu_config[count - 1].reg);
+
+	if (samsung_rev() < EXYNOS5250_REV_1_0) {
+		for (i = 0; i < ARRAY_SIZE(exynos52xx_pmu_config_gps); i++) {
+			__raw_writel(exynos52xx_pmu_config_gps[i].val[mode],
+					exynos52xx_pmu_config_gps[i].reg);
+		}
+
+	}
+
+	if ((mode != SYS_AFTR) && (exynos4_is_c2c_use())) {
+		pr_info("%s power mode enter with C2C Enabling\n"
+				, (mode == SYS_LPA) ? "LPA" : "SLEEP");
+
+		for (i = 0; i < ARRAY_SIZE(exynos52xx_pmu_c2c_config); i++) {
+			__raw_writel(exynos52xx_pmu_c2c_config[i].val[mode],
+					exynos52xx_pmu_c2c_config[i].reg);
+		}
+	}
+}
+
+static int __init exynos5_pmu_init(void)
+{
+	exynos5_pmu_config = exynos52xx_pmu_config;
+	entry_cnt = ARRAY_SIZE(exynos52xx_pmu_config);
+	printk(KERN_INFO "%s: PMU supports 52XX(%d)\n"
+				, __func__, entry_cnt);
+
+	return 0;
+}
+arch_initcall(exynos5_pmu_init);
diff -Naur ./arch/arm/mach-exynos/px-switch.c ../../HK_JB/Kernel/arch/arm/mach-exynos/px-switch.c
--- ./arch/arm/mach-exynos/px-switch.c	2012-12-08 20:40:46.157821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/px-switch.c	2012-11-22 09:13:16.000000000 +0100
@@ -86,12 +86,24 @@
 #if (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2)
 		if (val_sel2 == 0) {
 #endif /* (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2) */
-			/* AP */
-			mode = "AP";
+
+#if defined(CONFIG_MACH_KONA)
+			if (system_rev == 0) /* Keyboard DOCK */
+				mode = "DOCK";
+			else
+#endif /* CONFIG_MACH_KONA */
+				/* AP */
+				mode = "AP";
+
 #if (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2)
 		} else {
-			/* Keyboard DOCK */
-			mode = "DOCK";
+#if defined(CONFIG_MACH_KONA)
+			if (system_rev == 0) /* AP */
+				mode = "AP";
+			else
+#endif /* CONFIG_MACH_KONA */
+				/* Keyboard DOCK */
+				mode = "DOCK";
 		}
 #endif /* (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2) */
 	}
@@ -133,11 +145,16 @@
 	uart_sel = gpio_get_value(GPIO_UART_SEL);
 #if (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2)
 	uart_sel2 = gpio_get_value(GPIO_UART_SEL2);
-#endif
+#endif /* (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2) */
 	if (!strncasecmp(buf, "AP", 2)) {
 		uart_sel = 1;
 #if (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2)
-		uart_sel2 = 0;
+#if defined(CONFIG_MACH_KONA)
+		if (system_rev == 0)
+			uart_sel2 = 1;
+		else
+#endif /* CONFIG_MACH_KONA */
+			uart_sel2 = 0;
 #endif /* (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2) */
 	} else if (!strncasecmp(buf, "CP", 2)) {
 		uart_sel = 0;
@@ -145,7 +162,12 @@
 #if (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2)
 		if (!strncasecmp(buf, "DOCK", 4)) {
 			uart_sel = 1;
-			uart_sel2 = 1;
+#if defined(CONFIG_MACH_KONA)
+			if (system_rev == 0)
+				uart_sel2 = 0;
+			else
+#endif /* CONFIG_MACH_KONA */
+				uart_sel2 = 1;
 		} else {
 #endif /* (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2) */
 		pr_err("%s: wrong uart_sel value(%s)!!\n", __func__, buf);
@@ -159,7 +181,8 @@
 	gpio_set_value(GPIO_UART_SEL, uart_sel);
 	pr_info("%s: uart_sel(%d)\n", __func__, uart_sel);
 #if (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2)
-	/* 1 for (AP)DOCK, 0 for (AP)FAC */
+	/* 1 for (AP)DOCK, 0 for (AP)FAC
+	 * KONA rev 0 is 1 for (AP)FAC, 0 for (AP)DOCK */
 	gpio_set_value(GPIO_UART_SEL2, uart_sel2);
 	pr_info("%s: uart_sel2(%d)\n", __func__, uart_sel2);
 #endif /* (CONFIG_SAMSUNG_ANALOG_UART_SWITCH == 2) */
@@ -212,51 +235,51 @@
 
 static void pmic_safeout2(int onoff)
 {
-#if !defined(CONFIG_MACH_P4NOTE)
-	struct regulator *regulator;
-
-	regulator = regulator_get(NULL, "safeout2");
-	BUG_ON(IS_ERR_OR_NULL(regulator));
-
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
 	if (onoff) {
-		if (!regulator_is_enabled(regulator)) {
-			regulator_enable(regulator);
+		if (!gpio_get_value(GPIO_USB_SEL_CP)) {
+			gpio_set_value(GPIO_USB_SEL_CP, onoff);
 		} else {
 			pr_info("%s: onoff:%d No change in safeout2\n",
 			       __func__, onoff);
 		}
 	} else {
-		if (regulator_is_enabled(regulator)) {
-			regulator_force_disable(regulator);
+		if (gpio_get_value(GPIO_USB_SEL_CP)) {
+			gpio_set_value(GPIO_USB_SEL_CP, onoff);
 		} else {
 			pr_info("%s: onoff:%d No change in safeout2\n",
 			       __func__, onoff);
 		}
 	}
-
-	regulator_put(regulator);
 #else
+	struct regulator *regulator;
+
+	regulator = regulator_get(NULL, "safeout2");
+	BUG_ON(IS_ERR_OR_NULL(regulator));
+
 	if (onoff) {
-		if (!gpio_get_value(GPIO_USB_SEL_CP)) {
-			gpio_set_value(GPIO_USB_SEL_CP, onoff);
+		if (!regulator_is_enabled(regulator)) {
+			regulator_enable(regulator);
 		} else {
 			pr_info("%s: onoff:%d No change in safeout2\n",
-			       __func__, onoff);
+				__func__, onoff);
 		}
 	} else {
-		if (gpio_get_value(GPIO_USB_SEL_CP)) {
-			gpio_set_value(GPIO_USB_SEL_CP, onoff);
+		if (regulator_is_enabled(regulator)) {
+			regulator_force_disable(regulator);
 		} else {
 			pr_info("%s: onoff:%d No change in safeout2\n",
-			       __func__, onoff);
+				__func__, onoff);
 		}
 	}
+
+	regulator_put(regulator);
 #endif
 }
 
 static void usb_apply_path(enum usb_path_t path)
 {
-#if defined(CONFIG_MACH_P4NOTE)
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
 	pr_info("%s: current gpio before changing : sel0:%d sel1:%d sel_cp:%d\n",
 	       __func__, gpio_get_value(GPIO_USB_SEL0),
 	       gpio_get_value(GPIO_USB_SEL1), gpio_get_value(GPIO_USB_SEL_CP));
@@ -270,7 +293,7 @@
 
 	/* following checks are ordered according to priority */
 	if (path & USB_PATH_ADCCHECK) {
-#if defined(CONFIG_MACH_P4NOTE)
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
 		gpio_set_value(GPIO_USB_SEL0, 1);
 		gpio_set_value(GPIO_USB_SEL1, 0);
 #else
@@ -284,7 +307,7 @@
 		goto out_nochange;
 	}
 
-#if defined(CONFIG_MACH_P4NOTE)
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
 	if (path & USB_PATH_TA) {
 		gpio_set_value(GPIO_USB_SEL0, 0);
 		gpio_set_value(GPIO_USB_SEL1, 0);
@@ -294,7 +317,7 @@
 
 	if (path & USB_PATH_CP) {
 		pr_info("DEBUG: set USB path to CP\n");
-#if defined(CONFIG_MACH_P4NOTE)
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
 		gpio_set_value(GPIO_USB_SEL0, 0);
 		gpio_set_value(GPIO_USB_SEL1, 1);
 #else
@@ -308,7 +331,7 @@
 		mdelay(3);
 		goto out_cp;
 	}
-#if defined(CONFIG_MACH_P4NOTE)
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
 	if (path & USB_PATH_AP) {
 		gpio_set_value(GPIO_USB_SEL0, 1);
 		gpio_set_value(GPIO_USB_SEL1, 1);
@@ -332,7 +355,7 @@
 #endif /* CONFIG_MACH_P4NOTE */
 
 	/* default */
-#if defined(CONFIG_MACH_P4NOTE)
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
 	gpio_set_value(GPIO_USB_SEL0, 1);
 	gpio_set_value(GPIO_USB_SEL1, 1);
 #else
@@ -417,7 +440,7 @@
 	up(&usb_switch_sem);
 }
 
-#ifdef CONFIG_MACH_P4NOTE
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
 static void init_gpio(void)
 {
 	int uart_sel = -1;
@@ -515,7 +538,7 @@
 	int ret;
 
 /* USB_SEL gpio_request */
-#if defined(CONFIG_MACH_P4NOTE)
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
 	gpio_request(GPIO_USB_SEL0, "GPIO_USB_SEL0");
 	gpio_request(GPIO_USB_SEL1, "GPIO_USB_SEL1");
 	gpio_request(GPIO_USB_SEL_CP, "GPIO_USB_SEL_CP");
@@ -537,7 +560,7 @@
 #endif /* CONFIG_MACH_P8LTE */
 
 /* USB_SEL gpio_export */
-#if defined(CONFIG_MACH_P4NOTE)
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
 	gpio_export(GPIO_USB_SEL0, 1);
 	gpio_export(GPIO_USB_SEL1, 1);
 	gpio_export(GPIO_USB_SEL_CP, 1);
@@ -564,7 +587,7 @@
 	BUG_ON(!sec_switch_dev);
 
 /* USB_SEL gpio_export_link */
-#if defined(CONFIG_MACH_P4NOTE)
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
 	gpio_export_link(sec_switch_dev, "GPIO_USB_SEL0", GPIO_USB_SEL0);
 	gpio_export_link(sec_switch_dev, "GPIO_USB_SEL1", GPIO_USB_SEL1);
 	gpio_export_link(sec_switch_dev, "GPIO_USB_SEL_CP", GPIO_USB_SEL_CP);
@@ -599,14 +622,14 @@
 	/*init_MUTEX(&usb_switch_sem);*/
 	sema_init(&usb_switch_sem, 1);
 
-#ifdef CONFIG_MACH_P4NOTE
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
 	init_gpio();
 #endif
 
-#if !defined(CONFIG_MACH_P4NOTE)
-	if (!gpio_get_value(GPIO_USB_SEL1)) {
-#else
+#if defined(CONFIG_MACH_P4NOTE) || defined(CONFIG_MACH_KONA)
 	if ((!gpio_get_value(GPIO_USB_SEL0)) && (gpio_get_value(GPIO_USB_SEL1))) {
+#else
+	if (!gpio_get_value(GPIO_USB_SEL1)) {
 #endif
 		usb_switch_lock();
 		usb_switch_set_path(USB_PATH_CP);
diff -Naur ./arch/arm/mach-exynos/q1-gpio.c ../../HK_JB/Kernel/arch/arm/mach-exynos/q1-gpio.c
--- ./arch/arm/mach-exynos/q1-gpio.c	2012-12-08 20:40:46.157821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/q1-gpio.c	2012-11-22 09:13:16.000000000 +0100
@@ -149,8 +149,8 @@
 	{EXYNOS4_GPA0(1), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPA0(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPA0(3), S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},
-	{EXYNOS4_GPA0(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
-	{EXYNOS4_GPA0(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{EXYNOS4_GPA0(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPA0(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},
 	{EXYNOS4_GPA0(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPA0(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 
diff -Naur ./arch/arm/mach-exynos/sec_debug.c ../../HK_JB/Kernel/arch/arm/mach-exynos/sec_debug.c
--- ./arch/arm/mach-exynos/sec_debug.c	2012-12-08 20:40:46.161821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/sec_debug.c	2012-11-22 09:13:16.000000000 +0100
@@ -35,6 +35,9 @@
 #if defined(CONFIG_SEC_MODEM_P8LTE)
 #include <linux/miscdevice.h>
 #endif
+#ifdef CONFIG_PROC_SEC_MEMINFO
+#include "linux/sec_meminfo.h"
+#endif
 /* klaatu - schedule log */
 #ifdef CONFIG_SEC_DEBUG_SCHED_LOG
 #define SCHED_LOG_MAX 2048
@@ -68,6 +71,7 @@
 
 #ifdef CONFIG_SEC_DEBUG_AUXILIARY_LOG
 #define AUX_LOG_CPU_CLOCK_MAX 64
+#define AUX_LOG_CMA_RBTREE_MAX 64
 #define AUX_LOG_LENGTH 128
 
 struct auxiliary_info {
@@ -79,6 +83,7 @@
 /* This structure will be modified if some other items added for log */
 struct auxiliary_log {
 	struct auxiliary_info CpuClockLog[AUX_LOG_CPU_CLOCK_MAX];
+	struct auxiliary_info CmaRbtreeLog[AUX_LOG_CMA_RBTREE_MAX];
 };
 
 #else
@@ -250,6 +255,7 @@
 static struct auxiliary_log gExcpAuxLog	__cacheline_aligned;
 static struct auxiliary_log *gExcpAuxLogPtr;
 static atomic_t gExcpAuxCpuClockLogIdx = ATOMIC_INIT(-1);
+static atomic_t gExcpAuxCmaRbtreeLogIdx = ATOMIC_INIT(-1);
 #endif
 
 static int checksum_sched_log(void)
@@ -643,6 +649,9 @@
 #if defined(CONFIG_SEC_MODEM_P8LTE)
 	sec_set_cp_upload();
 #endif
+#ifdef CONFIG_PROC_SEC_MEMINFO
+	sec_meminfo_print();
+#endif
 	sec_debug_hw_reset();
 
 	return 0;
@@ -964,6 +973,14 @@
 		strncpy((*gExcpAuxLogPtr).CpuClockLog[i].log,
 			buf, AUX_LOG_LENGTH);
 		break;
+	case SEC_DEBUG_AUXLOG_CMA_RBTREE_CHANGE:
+		i = atomic_inc_return(&gExcpAuxCmaRbtreeLogIdx)
+			& (AUX_LOG_CMA_RBTREE_MAX - 1);
+		(*gExcpAuxLogPtr).CmaRbtreeLog[i].time = cpu_clock(cpu);
+		(*gExcpAuxLogPtr).CmaRbtreeLog[i].cpu = cpu;
+		strncpy((*gExcpAuxLogPtr).CmaRbtreeLog[i].log,
+			buf, AUX_LOG_LENGTH);
+		break;
 	default:
 		break;
 	}
diff -Naur ./arch/arm/mach-exynos/secmem-allocdev.c ../../HK_JB/Kernel/arch/arm/mach-exynos/secmem-allocdev.c
--- ./arch/arm/mach-exynos/secmem-allocdev.c	2012-12-08 20:40:46.161821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/secmem-allocdev.c	2012-11-22 09:13:16.000000000 +0100
@@ -224,12 +224,24 @@
 		}
 
 		pr_info("SECMEM_IOC_GET_ADDR: size:%lu\n", region.len);
-
+#ifndef CONFIG_DMA_CMA
+		region.virt_addr = kmalloc(region.len, GFP_KERNEL | GFP_DMA);
+#else
 		region.virt_addr = dma_alloc_coherent(NULL, region.len,
 						&region.phys_addr, GFP_KERNEL);
-		if (!region.virt_addr)
-			panic("SECMEM_IOC_GET_ADDR: dma_alloc_coherent failed! "
-			      "size=%lu\n", region.len);
+#endif
+		if (!region.virt_addr) {
+			printk(KERN_ERR "%s: Get memory address failed. "
+				" [size : %ld]\n", __func__, region.len);
+			return -EFAULT;
+		}
+
+#ifndef CONFIG_DMA_CMA
+		region.phys_addr = virt_to_phys(region.virt_addr);
+
+		dma_map_single(secmem.this_device, region.virt_addr,
+						region.len, DMA_TO_DEVICE);
+#endif
 
 		if (copy_to_user((void __user *)arg, &region,
 					sizeof(struct secmem_region)))
@@ -250,8 +262,12 @@
 
 		pr_info("SECMEM_IOC_RELEASE_ADDR: size:%lu\n", region.len);
 
+#ifndef CONFIG_DMA_CMA
+		kfree(region.virt_addr);
+#else
 		dma_free_coherent(NULL, region.len, region.virt_addr,
 					region.phys_addr);
+#endif
 		break;
 	}
 
diff -Naur ./arch/arm/mach-exynos/sec-reboot.c ../../HK_JB/Kernel/arch/arm/mach-exynos/sec-reboot.c
--- ./arch/arm/mach-exynos/sec-reboot.c	2012-12-08 20:40:46.157821668 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/sec-reboot.c	2012-11-22 09:13:16.000000000 +0100
@@ -8,6 +8,9 @@
 
 /* charger cable state */
 extern bool is_cable_attached;
+#ifdef CONFIG_MACH_GC1
+extern bool is_jig_attached;
+#endif
 static void sec_power_off(void)
 {
 	int poweroff_try = 0;
@@ -15,10 +18,18 @@
 	local_irq_disable();
 
 	pr_emerg("%s : cable state=%d\n", __func__, is_cable_attached);
+#ifdef CONFIG_MACH_GC1
+	pr_emerg("%s : jig state=%d\n", __func__, is_jig_attached);
+#endif
 
 	while (1) {
 		/* Check reboot charging */
+#ifdef CONFIG_MACH_GC1
+		if (is_jig_attached || is_cable_attached
+			|| (poweroff_try >= 5)) {
+#else
 		if (is_cable_attached || (poweroff_try >= 5)) {
+#endif
 			pr_emerg
 			    ("%s: charger connected(%d) or power"
 			     "off failed(%d), reboot!\n",
@@ -64,6 +75,7 @@
 #define REBOOT_MODE_RECOVERY	4
 #define REBOOT_MODE_FOTA	5
 #define REBOOT_MODE_FOTA_BL	6	/* update bootloader */
+#define REBOOT_MODE_SECURE	7	/* image secure check fail */
 
 #define REBOOT_SET_PREFIX	0xabc00000
 #define REBOOT_SET_DEBUG	0x000d0000
@@ -84,19 +96,25 @@
 		unsigned long value;
 		if (!strcmp(cmd, "fota"))
 			writel(REBOOT_MODE_PREFIX | REBOOT_MODE_FOTA,
-			       S5P_INFORM3);
+					S5P_INFORM3);
+		else if (!strcmp(cmd, "arm11_fota"))
+			writel(REBOOT_MODE_PREFIX | REBOOT_MODE_FOTA,
+					S5P_INFORM3);
 		else if (!strcmp(cmd, "fota_bl"))
 			writel(REBOOT_MODE_PREFIX | REBOOT_MODE_FOTA_BL,
 			       S5P_INFORM3);
 		else if (!strcmp(cmd, "recovery"))
 			writel(REBOOT_MODE_PREFIX | REBOOT_MODE_RECOVERY,
 			       S5P_INFORM3);
-		else if (!strcmp(cmd, "download") || !strcmp(cmd, "bootloader"))
+		else if (!strcmp(cmd, "download"))
 			writel(REBOOT_MODE_PREFIX | REBOOT_MODE_DOWNLOAD,
 			       S5P_INFORM3);
 		else if (!strcmp(cmd, "upload"))
 			writel(REBOOT_MODE_PREFIX | REBOOT_MODE_UPLOAD,
 			       S5P_INFORM3);
+		else if (!strcmp(cmd, "secure"))
+			writel(REBOOT_MODE_PREFIX | REBOOT_MODE_SECURE,
+			       S5P_INFORM3);
 		else if (!strncmp(cmd, "debug", 5)
 			 && !kstrtoul(cmd + 5, 0, &value))
 			writel(REBOOT_SET_PREFIX | REBOOT_SET_DEBUG | value,
diff -Naur ./arch/arm/mach-exynos/sec_subthermistor.c ../../HK_JB/Kernel/arch/arm/mach-exynos/sec_subthermistor.c
--- ./arch/arm/mach-exynos/sec_subthermistor.c	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/sec_subthermistor.c	2012-11-22 09:13:16.000000000 +0100
@@ -0,0 +1,324 @@
+/* sec_subthermistor.c
+ *
+ * Copyright (C) 2012 Samsung Electronics
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+#include <linux/module.h>
+#include <linux/err.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <plat/adc.h>
+#include <mach/sec_thermistor.h>
+
+#define ADC_SAMPLING_CNT	7
+
+struct sec_subtherm_info {
+	struct device *dev;
+	struct sec_therm_platform_data *pdata;
+	struct s3c_adc_client *padc;
+	struct delayed_work polling_work;
+
+	int curr_temperature;
+	int curr_temp_adc;
+};
+
+static ssize_t sec_subtherm_show_temperature(struct device *dev,
+				   struct device_attribute *attr,
+				   char *buf)
+{
+	struct sec_subtherm_info *info = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%d\n", info->curr_temperature);
+}
+
+static ssize_t sec_subtherm_show_temp_adc(struct device *dev,
+				   struct device_attribute *attr,
+				   char *buf)
+{
+	struct sec_subtherm_info *info = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%d\n", info->curr_temp_adc);
+}
+
+static DEVICE_ATTR(temperature, S_IRUGO, sec_subtherm_show_temperature, NULL);
+static DEVICE_ATTR(temp_adc, S_IRUGO, sec_subtherm_show_temp_adc, NULL);
+
+static struct attribute *sec_subtherm_attributes[] = {
+	&dev_attr_temperature.attr,
+	&dev_attr_temp_adc.attr,
+	NULL
+};
+
+static const struct attribute_group sec_subtherm_group = {
+	.attrs = sec_subtherm_attributes,
+};
+
+static int sec_subtherm_get_adc_data(struct sec_subtherm_info *info)
+{
+	int adc_ch;
+	int adc_data;
+	int adc_max = 0;
+	int adc_min = 0;
+	int adc_total = 0;
+	int i;
+	int err_value;
+
+	adc_ch = info->pdata->adc_channel;
+
+	for (i = 0; i < ADC_SAMPLING_CNT; i++) {
+		adc_data = s3c_adc_read(info->padc, adc_ch);
+
+		if (adc_data < 0) {
+			dev_err(info->dev, "%s : err(%d) returned, skip read\n",
+				__func__, adc_data);
+			err_value = adc_data;
+			goto err;
+		}
+
+		if (i != 0) {
+			if (adc_data > adc_max)
+				adc_max = adc_data;
+			else if (adc_data < adc_min)
+				adc_min = adc_data;
+		} else {
+			adc_max = adc_data;
+			adc_min = adc_data;
+		}
+		adc_total += adc_data;
+	}
+
+	return (adc_total - adc_max - adc_min) / (ADC_SAMPLING_CNT - 2);
+err:
+	return err_value;
+}
+
+static int convert_adc_to_subtemper(struct sec_subtherm_info *info,
+				int adc_data)
+{
+	int adc_value;
+	int low, mid, high;
+	struct sec_therm_adc_table *temper_table;
+
+	low = mid = high = 0;
+
+	if (!info->pdata->adc_table || !info->pdata->adc_arr_size) {
+		/* using fake temp */
+		adc_value = 300;
+		dev_dbg(info->dev, " %s : fake temp\n", __func__);
+		goto out;
+	}
+
+	temper_table = info->pdata->adc_table;
+	high = info->pdata->adc_arr_size - 1;
+
+	/* Out of table range */
+	if (adc_data <= temper_table[low].adc) {
+		adc_value = temper_table[low].temperature;
+		dev_dbg(info->dev, " %s : Out of table range\n", __func__);
+		goto out;
+	} else if (adc_data >= temper_table[high].adc) {
+		adc_value = temper_table[high].temperature;
+		dev_dbg(info->dev, " %s : Out of table range\n", __func__);
+		goto out;
+	}
+
+	while (low <= high) {
+		mid = (low + high) / 2;
+		if (temper_table[mid].adc > adc_data)
+			high = mid - 1;
+		else if (temper_table[mid].adc < adc_data)
+			low = mid + 1;
+		else
+			break;
+	}
+	adc_value = temper_table[mid].temperature;
+
+	/* high resolution */
+	if (adc_data < temper_table[mid].adc) {
+		adc_value = temper_table[mid].temperature +
+			((temper_table[mid-1].temperature -
+			  temper_table[mid].temperature) *
+			(temper_table[mid].adc - adc_data) /
+			(temper_table[mid].adc - temper_table[mid-1].adc));
+	} else {
+		adc_value = temper_table[mid].temperature -
+			((temper_table[mid].temperature -
+			  temper_table[mid+1].temperature) *
+			(adc_data - temper_table[mid].adc) /
+			(temper_table[mid+1].adc - temper_table[mid].adc));
+	}
+
+out:
+	dev_dbg(info->dev, " %s: adc data(%d), adc temperature(%d)\n", __func__,
+					adc_data, adc_value);
+
+	return adc_value;
+}
+
+static void notify_change_of_subtemperature(struct sec_subtherm_info *info)
+{
+	char temp_buf[20];
+	char siop_buf[20];
+	char *envp[3];
+	int env_offset = 0;
+	int siop_level = -1;
+
+	snprintf(temp_buf, sizeof(temp_buf), "SUBTEMPERATURE=%d",
+		 info->curr_temperature);
+	envp[env_offset++] = temp_buf;
+
+	if (info->pdata->get_siop_level)
+		siop_level =
+		    info->pdata->get_siop_level(info->curr_temperature);
+
+	if (siop_level >= 0) {
+		snprintf(siop_buf, sizeof(siop_buf), "SIOP_LEVEL=%d",
+			 siop_level);
+		envp[env_offset++] = siop_buf;
+		dev_info(info->dev, "%s: uevent: %s\n", __func__, siop_buf);
+	}
+	envp[env_offset] = NULL;
+
+	dev_info(info->dev, "%s: uevent: %s\n", __func__, temp_buf);
+	kobject_uevent_env(&info->dev->kobj, KOBJ_CHANGE, envp);
+}
+
+static void sec_subtherm_polling_work(struct work_struct *work)
+{
+	struct sec_subtherm_info *info =
+		container_of(work, struct sec_subtherm_info, polling_work.work);
+	int adc;
+	int temper;
+
+	adc = sec_subtherm_get_adc_data(info);
+	dev_dbg(info->dev, "%s: adc=%d\n", __func__, adc);
+
+	if (adc < 0)
+		goto out;
+
+	temper = convert_adc_to_subtemper(info, adc);
+	dev_dbg(info->dev, "%s: temper=%d\n", __func__, temper);
+
+	/* if temperature was changed, notify to framework */
+	if (info->curr_temperature != temper) {
+		info->curr_temp_adc = adc;
+		info->curr_temperature = temper;
+		notify_change_of_subtemperature(info);
+	}
+out:
+	schedule_delayed_work(&info->polling_work,
+			msecs_to_jiffies(info->pdata->polling_interval));
+}
+
+static __devinit int sec_subtherm_probe(struct platform_device *pdev)
+{
+	struct sec_therm_platform_data *pdata = dev_get_platdata(&pdev->dev);
+	struct sec_subtherm_info *info;
+	int ret = 0;
+
+	dev_info(&pdev->dev, "%s: SEC Sub Thermistor Driver Loading\n", __func__);
+
+	info = kzalloc(sizeof(*info), GFP_KERNEL);
+	if (!info)
+		return -ENOMEM;
+
+	platform_set_drvdata(pdev, info);
+
+	info->dev = &pdev->dev;
+	info->pdata = pdata;
+
+	info->padc = s3c_adc_register(pdev, NULL, NULL, 0);
+
+	ret = sysfs_create_group(&info->dev->kobj, &sec_subtherm_group);
+
+	if (ret) {
+		dev_err(info->dev,
+			"failed to create sysfs attribute group\n");
+	}
+
+	INIT_DELAYED_WORK_DEFERRABLE(&info->polling_work,
+			sec_subtherm_polling_work);
+	schedule_delayed_work(&info->polling_work,
+			msecs_to_jiffies(info->pdata->polling_interval));
+
+	return ret;
+}
+
+static int __devexit sec_subtherm_remove(struct platform_device *pdev)
+{
+	struct sec_subtherm_info *info = platform_get_drvdata(pdev);
+
+	if (!info)
+		return 0;
+
+	sysfs_remove_group(&info->dev->kobj, &sec_subtherm_group);
+
+	cancel_delayed_work(&info->polling_work);
+	s3c_adc_release(info->padc);
+	kfree(info);
+
+	return 0;
+}
+
+#ifdef CONFIG_PM
+static int sec_subtherm_suspend(struct device *dev)
+{
+	struct sec_subtherm_info *info = dev_get_drvdata(dev);
+
+	cancel_delayed_work(&info->polling_work);
+
+	return 0;
+}
+
+static int sec_subtherm_resume(struct device *dev)
+{
+	struct sec_subtherm_info *info = dev_get_drvdata(dev);
+
+	schedule_delayed_work(&info->polling_work,
+			msecs_to_jiffies(info->pdata->polling_interval));
+	return 0;
+}
+#else
+#define	sec_subtherm_suspend	NULL
+#define sec_subtherm_resume	NULL
+#endif
+
+static const struct dev_pm_ops sec_subthermistor_pm_ops = {
+	.suspend = sec_subtherm_suspend,
+	.resume = sec_subtherm_resume,
+};
+
+static struct platform_driver sec_subthermistor_driver = {
+	.driver = {
+		.name = "sec-subthermistor",
+		.owner = THIS_MODULE,
+		.pm = &sec_subthermistor_pm_ops,
+	},
+	.probe = sec_subtherm_probe,
+	.remove = __devexit_p(sec_subtherm_remove),
+};
+
+static int __init sec_subtherm_init(void)
+{
+	return platform_driver_register(&sec_subthermistor_driver);
+}
+module_init(sec_subtherm_init);
+
+static void __exit sec_subtherm_exit(void)
+{
+	platform_driver_unregister(&sec_subthermistor_driver);
+}
+module_exit(sec_subtherm_exit);
+
+MODULE_AUTHOR("bw.moon@samsung.com");
+MODULE_DESCRIPTION("sec sub thermistor driver");
+MODULE_LICENSE("GPL");
diff -Naur ./arch/arm/mach-exynos/sec-switch.c ../../HK_JB/Kernel/arch/arm/mach-exynos/sec-switch.c
--- ./arch/arm/mach-exynos/sec-switch.c	2012-12-08 20:40:46.161821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/sec-switch.c	2012-11-22 09:13:16.000000000 +0100
@@ -63,6 +63,7 @@
 bool is_cable_attached;
 bool is_jig_attached;
 
+#if 0
 static ssize_t midas_switch_show_vbus(struct device *dev,
 				      struct device_attribute *attr, char *buf)
 {
@@ -130,6 +131,7 @@
 
 DEVICE_ATTR(disable_vbus, 0664, midas_switch_show_vbus,
 	    midas_switch_store_vbus);
+#endif
 
 #ifdef CONFIG_TARGET_LOCALE_KOR
 #include "../../../drivers/usb/gadget/s3c_udc.h"
@@ -181,113 +183,7 @@
 
 static DEVICE_ATTR(enable, 0664,
 		   midas_switch_show_usb_lock, midas_switch_store_usb_lock);
-#endif
-
-static int __init midas_sec_switch_init(void)
-{
-	int ret = 0;
-	switch_dev = device_create(sec_class, NULL, 0, NULL, "switch");
-
-	if (IS_ERR(switch_dev)) {
-		pr_err("%s:%s= Failed to create device(switch)!\n",
-				__FILE__, __func__);
-		return -ENODEV;
-	}
-
-	ret = device_create_file(switch_dev, &dev_attr_disable_vbus);
-	if (ret) {
-		pr_err("%s:%s= Failed to create device file(disable_vbus)!\n",
-				__FILE__, __func__);
-		return ret;
-	}
-
-#ifdef CONFIG_TARGET_LOCALE_KOR
-	usb_lock = device_create(sec_class, switch_dev,
-				MKDEV(0, 0), NULL, ".usb_lock");
-
-	if (IS_ERR(usb_lock))
-		pr_err("Failed to create device (usb_lock)!\n");
-
-	if (device_create_file(usb_lock, &dev_attr_enable) < 0)
-		pr_err("Failed to create device file(.usblock/enable)!\n");
-#endif
-
-	return ret;
-};
-
-int max77693_muic_charger_cb(enum cable_type_muic cable_type)
-{
-#if !defined(USE_CHGIN_INTR)
-#ifdef CONFIG_BATTERY_MAX77693_CHARGER
-	struct power_supply *psy = power_supply_get_by_name("max77693-charger");
-	union power_supply_propval value;
-#endif
-#endif
-	pr_info("%s: %d\n", __func__, cable_type);
-
-	switch (cable_type) {
-	case CABLE_TYPE_NONE_MUIC:
-	case CABLE_TYPE_OTG_MUIC:
-	case CABLE_TYPE_JIG_UART_OFF_MUIC:
-	case CABLE_TYPE_MHL_MUIC:
-		is_cable_attached = false;
-		break;
-	case CABLE_TYPE_USB_MUIC:
-	case CABLE_TYPE_JIG_USB_OFF_MUIC:
-	case CABLE_TYPE_JIG_USB_ON_MUIC:
-		is_cable_attached = true;
-		break;
-	case CABLE_TYPE_MHL_VB_MUIC:
-		is_cable_attached = true;
-		break;
-	case CABLE_TYPE_TA_MUIC:
-	case CABLE_TYPE_CARDOCK_MUIC:
-	case CABLE_TYPE_DESKDOCK_MUIC:
-	case CABLE_TYPE_SMARTDOCK_MUIC:
-	case CABLE_TYPE_AUDIODOCK_MUIC:
-	case CABLE_TYPE_JIG_UART_OFF_VB_MUIC:
-		is_cable_attached = true;
-		break;
-	default:
-		pr_err("%s: invalid type:%d\n", __func__, cable_type);
-		return -EINVAL;
-	}
-
-#if !defined(USE_CHGIN_INTR)
-#ifdef CONFIG_BATTERY_MAX77693_CHARGER
-	if (!psy || !psy->set_property) {
-		pr_err("%s: fail to get max77693-charger psy\n", __func__);
-		return 0;
-	}
-
-	value.intval = cable_type;
-	psy->set_property(psy, POWER_SUPPLY_PROP_ONLINE, &value);
-#endif
-#endif
-
-#if defined(CONFIG_MACH_SLP_NAPLES) || defined(CONFIG_MACH_MIDAS) \
-		|| defined(CONFIG_MACH_GC1) || defined(CONFIG_MACH_T0)
-	tsp_charger_infom(is_cable_attached);
-#endif
-#ifdef CONFIG_JACK_MON
-	jack_event_handler("charger", is_cable_attached);
-#endif
-
-	return 0;
-}
-
-int max77693_get_jig_state(void)
-{
-	pr_info("%s: %d\n", __func__, is_jig_attached);
-	return is_jig_attached;
-}
-EXPORT_SYMBOL(max77693_get_jig_state);
-
-void max77693_set_jig_state(int jig_state)
-{
-	pr_info("%s: %d\n", __func__, jig_state);
-	is_jig_attached = jig_state;
-}
+#endif /* CONFIG_TARGET_LOCALE_KOR */
 
 /* usb cable call back function */
 void max77693_muic_usb_cb(u8 usb_mode)
@@ -326,21 +222,27 @@
 	if (usb_mode == USB_OTGHOST_ATTACHED
 		|| usb_mode == USB_POWERED_HOST_ATTACHED) {
 #ifdef CONFIG_USB_HOST_NOTIFY
-		if (usb_mode == USB_OTGHOST_ATTACHED)
+		if (usb_mode == USB_OTGHOST_ATTACHED) {
 			host_noti_pdata->booster(1);
-		else
+			host_noti_pdata->ndev.mode = NOTIFY_HOST_MODE;
+			if (host_noti_pdata->usbhostd_start)
+				host_noti_pdata->usbhostd_start();
+		} else
 			host_noti_pdata->powered_booster(1);
-
-		host_noti_pdata->ndev.mode = NOTIFY_HOST_MODE;
-		if (host_noti_pdata->usbhostd_start)
-			host_noti_pdata->usbhostd_start();
 #endif
 #ifdef CONFIG_USB_EHCI_S5P
+#if defined(CONFIG_MACH_T0_CHN_CTC) || \
+	defined(CONFIG_MACH_T0_CHN_CMCC)
+		msleep(40);
+#endif
 		pm_runtime_get_sync(&s5p_device_ehci.dev);
 #endif
 #ifdef CONFIG_USB_OHCI_S5P
 		pm_runtime_get_sync(&s5p_device_ohci.dev);
 #endif
+#if defined(CONFIG_HAS_EARLYSUSPEND) && defined(CONFIG_FAST_BOOT)
+		host_noti_pdata->is_host_working = 1;
+#endif
 	} else if (usb_mode == USB_OTGHOST_DETACHED
 		|| usb_mode == USB_POWERED_HOST_DETACHED) {
 #ifdef CONFIG_USB_OHCI_S5P
@@ -350,14 +252,18 @@
 		pm_runtime_put_sync(&s5p_device_ehci.dev);
 #endif
 #ifdef CONFIG_USB_HOST_NOTIFY
-		host_noti_pdata->ndev.mode = NOTIFY_NONE_MODE;
-		if (host_noti_pdata->usbhostd_stop)
-			host_noti_pdata->usbhostd_stop();
-		if (usb_mode == USB_OTGHOST_DETACHED)
+		if (usb_mode == USB_OTGHOST_DETACHED) {
+			host_noti_pdata->ndev.mode = NOTIFY_NONE_MODE;
+			if (host_noti_pdata->usbhostd_stop)
+				host_noti_pdata->usbhostd_stop();
 			host_noti_pdata->booster(0);
+		}
 		else
 			host_noti_pdata->powered_booster(0);
 #endif
+#if defined(CONFIG_HAS_EARLYSUSPEND) && defined(CONFIG_FAST_BOOT)
+		host_noti_pdata->is_host_working = 0;
+#endif
 	}
 
 #ifdef CONFIG_JACK_MON
@@ -373,6 +279,70 @@
 #endif
 }
 EXPORT_SYMBOL(max77693_muic_usb_cb);
+
+int max77693_muic_charger_cb(enum cable_type_muic cable_type)
+{
+#if !defined(USE_CHGIN_INTR)
+#ifdef CONFIG_BATTERY_MAX77693_CHARGER
+	struct power_supply *psy = power_supply_get_by_name("max77693-charger");
+	union power_supply_propval value;
+#endif
+#endif
+	pr_info("%s: %d\n", __func__, cable_type);
+
+	switch (cable_type) {
+	case CABLE_TYPE_NONE_MUIC:
+	case CABLE_TYPE_OTG_MUIC:
+	case CABLE_TYPE_JIG_UART_OFF_MUIC:
+	case CABLE_TYPE_MHL_MUIC:
+		is_cable_attached = false;
+		break;
+	case CABLE_TYPE_USB_MUIC:
+	case CABLE_TYPE_JIG_USB_OFF_MUIC:
+	case CABLE_TYPE_JIG_USB_ON_MUIC:
+		is_cable_attached = true;
+		break;
+	case CABLE_TYPE_MHL_VB_MUIC:
+		is_cable_attached = true;
+		break;
+	case CABLE_TYPE_TA_MUIC:
+	case CABLE_TYPE_CARDOCK_MUIC:
+	case CABLE_TYPE_DESKDOCK_MUIC:
+	case CABLE_TYPE_SMARTDOCK_MUIC:
+	case CABLE_TYPE_AUDIODOCK_MUIC:
+	case CABLE_TYPE_JIG_UART_OFF_VB_MUIC:
+		is_cable_attached = true;
+		break;
+	default:
+		pr_err("%s: invalid type:%d\n", __func__, cable_type);
+		return -EINVAL;
+	}
+
+#if !defined(USE_CHGIN_INTR)
+#ifdef CONFIG_BATTERY_MAX77693_CHARGER
+	if (!psy || !psy->set_property) {
+		pr_err("%s: fail to get max77693-charger psy\n", __func__);
+		return 0;
+	}
+
+	value.intval = cable_type;
+	psy->set_property(psy, POWER_SUPPLY_PROP_ONLINE, &value);
+#endif
+#endif
+
+#if defined(CONFIG_MACH_SLP_NAPLES) || defined(CONFIG_MACH_MIDAS) \
+		|| defined(CONFIG_MACH_GC1) || defined(CONFIG_MACH_T0)
+#ifndef CONFIG_TOUCHSCREEN_CYPRESS_TMA46X
+	tsp_charger_infom(is_cable_attached);
+#endif
+#endif
+#ifdef CONFIG_JACK_MON
+	jack_event_handler("charger", is_cable_attached);
+#endif
+
+	return 0;
+}
+
 #if !defined(CONFIG_MUIC_MAX77693_SEPARATE_MHL_PORT)
 /*extern void MHL_On(bool on);*/
 void max77693_muic_mhl_cb(int attached)
@@ -398,9 +368,7 @@
 #endif
 	}
 }
-#endif /* !CONFIG_MUIC_MAX77693_SEPARATE_MHL_PORT */
 
-#if !defined(CONFIG_MUIC_MAX77693_SEPARATE_MHL_PORT)
 bool max77693_muic_is_mhl_attached(void)
 {
 	int val;
@@ -451,6 +419,46 @@
 #endif
 }
 
+int max77693_muic_set_safeout(int path)
+{
+	struct regulator *regulator;
+
+	pr_info("MUIC safeout path=%d\n", path);
+
+	if (path == CP_USB_MODE) {
+		regulator = regulator_get(NULL, "safeout1");
+		if (IS_ERR(regulator))
+			return -ENODEV;
+		if (regulator_is_enabled(regulator))
+			regulator_force_disable(regulator);
+		regulator_put(regulator);
+
+		regulator = regulator_get(NULL, "safeout2");
+		if (IS_ERR(regulator))
+			return -ENODEV;
+		if (!regulator_is_enabled(regulator))
+			regulator_enable(regulator);
+		regulator_put(regulator);
+	} else {
+		/* AP_USB_MODE || AUDIO_MODE */
+		regulator = regulator_get(NULL, "safeout1");
+		if (IS_ERR(regulator))
+			return -ENODEV;
+		if (!regulator_is_enabled(regulator))
+			regulator_enable(regulator);
+		regulator_put(regulator);
+
+		regulator = regulator_get(NULL, "safeout2");
+		if (IS_ERR(regulator))
+			return -ENODEV;
+		if (regulator_is_enabled(regulator))
+			regulator_force_disable(regulator);
+		regulator_put(regulator);
+	}
+
+	return 0;
+}
+
 #if !defined(CONFIG_MACH_GC1) && !defined(CONFIG_MACH_T0) && \
 !defined(CONFIG_MACH_M3) && !defined(CONFIG_MACH_SLP_T0_LTE)
 int max77693_muic_cfg_uart_gpio(void)
@@ -469,10 +477,7 @@
 		path);
 	return path;
 }
-#endif
 
-#if !defined(CONFIG_MACH_GC1) && !defined(CONFIG_MACH_T0) && \
-!defined(CONFIG_MACH_M3) && !defined(CONFIG_MACH_SLP_T0_LTE)
 void max77693_muic_jig_uart_cb(int path)
 {
 	pr_info("func:%s : (path=%d\n", __func__, path);
@@ -497,7 +502,7 @@
 	}
 
 }
-#endif
+#endif /* !CONFIG_MACH_GC1 */
 
 #if defined(CONFIG_MUIC_DET_JACK)
 extern void jack_status_change(int attached);
@@ -511,7 +516,7 @@
 {
 	earkey_status_change(pressed, code);
 }
-#endif
+#endif /* CONFIG_MUIC_DET_JACK */
 
 #ifdef CONFIG_USB_HOST_NOTIFY
 int max77693_muic_host_notify_cb(int enable)
@@ -530,82 +535,50 @@
 	pr_info("%s: mode %d, enable %d\n", __func__, ndev->mode, enable);
 	return ndev->mode;
 }
-#endif
+#endif /* CONFIG_USB_HOST_NOTIFY */
 
-int max77693_muic_set_safeout(int path)
+int max77693_get_jig_state(void)
 {
-	struct regulator *regulator;
-
-	pr_info("MUIC safeout path=%d\n", path);
-
-	if (path == CP_USB_MODE) {
-		regulator = regulator_get(NULL, "safeout1");
-		if (IS_ERR(regulator))
-			return -ENODEV;
-		if (regulator_is_enabled(regulator))
-			regulator_force_disable(regulator);
-		regulator_put(regulator);
-
-		regulator = regulator_get(NULL, "safeout2");
-		if (IS_ERR(regulator))
-			return -ENODEV;
-		if (!regulator_is_enabled(regulator))
-			regulator_enable(regulator);
-		regulator_put(regulator);
-	} else {
-		/* AP_USB_MODE || AUDIO_MODE */
-		regulator = regulator_get(NULL, "safeout1");
-		if (IS_ERR(regulator))
-			return -ENODEV;
-		if (!regulator_is_enabled(regulator))
-			regulator_enable(regulator);
-		regulator_put(regulator);
-
-		regulator = regulator_get(NULL, "safeout2");
-		if (IS_ERR(regulator))
-			return -ENODEV;
-		if (regulator_is_enabled(regulator))
-			regulator_force_disable(regulator);
-		regulator_put(regulator);
-	}
+	pr_info("%s: %d\n", __func__, is_jig_attached);
+	return is_jig_attached;
+}
+EXPORT_SYMBOL(max77693_get_jig_state);
 
-	return 0;
+void max77693_set_jig_state(int jig_state)
+{
+	pr_info("%s: %d\n", __func__, jig_state);
+	is_jig_attached = jig_state;
 }
 
 struct max77693_muic_data max77693_muic = {
 	.usb_cb = max77693_muic_usb_cb,
 	.charger_cb = max77693_muic_charger_cb,
+	.dock_cb = max77693_muic_dock_cb,
 #if !defined(CONFIG_MUIC_MAX77693_SEPARATE_MHL_PORT)
 	.mhl_cb = max77693_muic_mhl_cb,
 	.is_mhl_attached = max77693_muic_is_mhl_attached,
-#endif
-	.set_safeout = max77693_muic_set_safeout,
+#endif /* !CONFIG_MUIC_MAX77693_SEPARATE_MHL_PORT */
 	.init_cb = max77693_muic_init_cb,
-	.dock_cb = max77693_muic_dock_cb,
-#if !defined(CONFIG_MACH_GC1) && !defined(CONFIG_MACH_T0) && \
-!defined(CONFIG_MACH_M3) && !defined(CONFIG_MACH_SLP_T0_LTE)
+	.set_safeout = max77693_muic_set_safeout,
+#if defined(CONFIG_MACH_GC1) || defined(CONFIG_MACH_T0) || \
+	defined(CONFIG_MACH_M3) || defined(CONFIG_MACH_SLP_T0_LTE)
+	.gpio_usb_sel = -1,
+#else
 	.cfg_uart_gpio = max77693_muic_cfg_uart_gpio,
 	.jig_uart_cb = max77693_muic_jig_uart_cb,
+	.gpio_usb_sel = GPIO_USB_SEL,
 #endif /* CONFIG_MACH_GC1 */
 #if defined(CONFIG_MUIC_DET_JACK)
 	.earjack_cb = max77693_muic_earjack_cb,
 	.earjackkey_cb = max77693_muic_earjackkey_cb,
-#endif
+#endif /* CONFIG_MUIC_DET_JACK */
 #ifdef CONFIG_USB_HOST_NOTIFY
 	.host_notify_cb = max77693_muic_host_notify_cb,
-#else
-	.host_notify_cb = NULL,
-#endif
-#if !defined(CONFIG_MACH_GC1) && !defined(CONFIG_MACH_T0) && \
-!defined(CONFIG_MACH_M3) && !defined(CONFIG_MACH_SLP_T0_LTE)
-	.gpio_usb_sel = GPIO_USB_SEL,
-#else
-	.gpio_usb_sel = -1,
-#endif /* CONFIG_MACH_GC1 */
+#endif /* CONFIG_USB_HOST_NOTIFY */
 	.jig_state = max77693_set_jig_state,
 };
 
-#if defined(CONFIG_MACH_SLP_PQ) ||  defined(CONFIG_MACH_REDWOOD) || \
+#if defined(CONFIG_MACH_SLP_PQ) || defined(CONFIG_MACH_REDWOOD) || \
 defined(CONFIG_MACH_SLP_T0_LTE)
 static void otg_accessory_power(int enable)
 {
@@ -614,9 +587,19 @@
 	/* max77693 otg power control */
 	otg_control(enable);
 
-	gpio_request(GPIO_OTG_EN, "USB_OTG_EN");
-	gpio_direction_output(GPIO_OTG_EN, on);
-	gpio_free(GPIO_OTG_EN);
+#if defined(CONFIG_HAS_EARLYSUSPEND) && defined(CONFIG_FAST_BOOT)
+	if (fake_shut_down) {
+		gpio_request(GPIO_OTG_EN, "USB_OTG_EN");
+		gpio_direction_output(GPIO_OTG_EN, 0);
+		gpio_free(GPIO_OTG_EN);
+	} else {
+#endif
+		gpio_request(GPIO_OTG_EN, "USB_OTG_EN");
+		gpio_direction_output(GPIO_OTG_EN, on);
+		gpio_free(GPIO_OTG_EN);
+#if defined(CONFIG_HAS_EARLYSUSPEND) && defined(CONFIG_FAST_BOOT)
+	}
+#endif
 	pr_info("%s: otg accessory power = %d\n", __func__, on);
 }
 
@@ -630,6 +613,40 @@
 	.name = "host_notifier",
 	.dev.platform_data = &host_notifier_pdata,
 };
+#endif /* CONFIG_MACH_SLP_PQ || CONFIG_MACH_REDWOOD || \
+	CONFIG_MACH_SLP_T0_LTE */
+
+static int __init midas_sec_switch_init(void)
+{
+	int ret = 0;
+	switch_dev = device_create(sec_class, NULL, 0, NULL, "switch");
+
+	if (IS_ERR(switch_dev)) {
+		pr_err("%s:%s= Failed to create device(switch)!\n",
+				__FILE__, __func__);
+		return -ENODEV;
+	}
+
+#if 0
+	ret = device_create_file(switch_dev, &dev_attr_disable_vbus);
+	if (ret) {
+		pr_err("%s:%s= Failed to create device file(disable_vbus)!\n",
+				__FILE__, __func__);
+		return ret;
+	}
 #endif
 
+#ifdef CONFIG_TARGET_LOCALE_KOR
+	usb_lock = device_create(sec_class, switch_dev,
+				MKDEV(0, 0), NULL, ".usb_lock");
+
+	if (IS_ERR(usb_lock))
+		pr_err("Failed to create device (usb_lock)!\n");
+
+	if (device_create_file(usb_lock, &dev_attr_enable) < 0)
+		pr_err("Failed to create device file(.usblock/enable)!\n");
+#endif /* CONFIG_TARGET_LOCALE_KOR */
+
+	return ret;
+}
 device_initcall(midas_sec_switch_init);
diff -Naur ./arch/arm/mach-exynos/sec-switch_max8997.c ../../HK_JB/Kernel/arch/arm/mach-exynos/sec-switch_max8997.c
--- ./arch/arm/mach-exynos/sec-switch_max8997.c	2012-12-08 20:40:46.161821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/sec-switch_max8997.c	2012-11-22 09:13:16.000000000 +0100
@@ -39,25 +39,12 @@
 #include <linux/jack.h>
 #endif
 
-#define MUIC_DEBUG 1
-#ifdef MUIC_DEBUG
-#define MUIC_PRINT_LOG()	\
-	pr_info("MUIC:[%s] func:%s\n", __FILE__, __func__);
-#else
-#define MUIC_PRINT_LOG()	{}
-#endif
-
-static struct switch_dev switch_dock = {
-	.name = "dock",
-};
-
 extern struct class *sec_class;
 
 struct device *switch_dev;
 EXPORT_SYMBOL(switch_dev);
 
-static int uart_switch_init(void);
-
+#if 0
 static ssize_t u1_switch_show_vbus(struct device *dev,
 				      struct device_attribute *attr, char *buf)
 {
@@ -127,6 +114,65 @@
 
 DEVICE_ATTR(disable_vbus, 0664, u1_switch_show_vbus,
 	    u1_switch_store_vbus);
+#endif
+
+#if defined(CONFIG_TARGET_LOCALE_NA)
+#define USB_PATH_AP	0
+#define USB_PATH_CP	1
+#define USB_PATH_ALL	2
+static int hub_usb_path;
+
+int u1_get_usb_hub_path(void)
+{
+	return hub_usb_path;
+}
+EXPORT_SYMBOL_GPL(u1_get_usb_hub_path);
+
+static ssize_t u1_switch_show_usb_path(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int i;
+
+	switch (hub_usb_path) {
+	case USB_PATH_AP:
+		i = sprintf(buf, "USB_PATH: AP\n");
+		break;
+	case USB_PATH_CP:
+		i = sprintf(buf, "USB_PATH: CP\n");
+		break;
+	case USB_PATH_ALL:
+		i = sprintf(buf, "USB_PATH: ALL\n");
+		break;
+	default:
+		i = sprintf(buf, "USB_PATH: Unknown!\n");
+		break;
+	}
+
+	return i;
+}
+
+static ssize_t u1_switch_store_usb_path(struct device *dev,
+				    struct device_attribute *attr,
+				    const char *buf, size_t count)
+{
+	if (!strncmp(buf, "AP", 2))
+		hub_usb_path = USB_PATH_AP;
+	else if (!strncmp(buf, "CP", 2))
+		hub_usb_path = USB_PATH_CP;
+	else if (!strncmp(buf, "ALL", 3))
+		hub_usb_path = USB_PATH_ALL;
+	else {
+		pr_warn("%s: Wrong command\n", __func__);
+		return count;
+	}
+	pr_info("%s: USB PATH = %d\n", __func__, hub_usb_path);
+
+	return count;
+}
+
+static DEVICE_ATTR(set_usb_path, 0664, u1_switch_show_usb_path,
+		   u1_switch_store_usb_path);
+#endif /* CONFIG_TARGET_LOCALE_NA */
 
 #ifdef CONFIG_TARGET_LOCALE_KOR
 #include "../../../drivers/usb/gadget/s3c_udc.h"
@@ -184,42 +230,11 @@
 
 static DEVICE_ATTR(enable, 0664,
 		   u1_switch_show_usb_lock, u1_switch_store_usb_lock);
-#endif
-
-static int __init u1_sec_switch_init(void)
-{
-	int ret;
-	switch_dev = device_create(sec_class, NULL, 0, NULL, "switch");
-
-	if (IS_ERR(switch_dev))
-		pr_err("Failed to create device(switch)!\n");
-
-	ret = device_create_file(switch_dev, &dev_attr_disable_vbus);
-	if (ret)
-		pr_err("Failed to create device file(disable_vbus)!\n");
-
-#ifdef CONFIG_TARGET_LOCALE_KOR
-	usb_lock = device_create(sec_class, switch_dev,
-				MKDEV(0, 0), NULL, ".usb_lock");
-
-	if (IS_ERR(usb_lock))
-		pr_err("Failed to create device (usb_lock)!\n");
-
-	if (device_create_file(usb_lock, &dev_attr_enable) < 0)
-		pr_err("Failed to create device file(.usblock/enable)!\n");
-#endif
-
-	ret = uart_switch_init();
-	if (ret)
-		pr_err("Failed to create uart_switch\n");
-
-	return 0;
-};
+#endif /* CONFIG_TARGET_LOCALE_KOR */
 
 static int uart_switch_init(void)
 {
 	int ret, val;
-	MUIC_PRINT_LOG();
 
 	ret = gpio_request(GPIO_UART_SEL, "UART_SEL");
 	if (ret < 0) {
@@ -239,256 +254,41 @@
 	return 0;
 }
 
-#if 0
-int max77693_muic_charger_cb(enum cable_type_muic cable_type)
-{
-	MUIC_PRINT_LOG();
-	return 0;
-}
-
-#define RETRY_CNT_LIMIT 100
-/* usb cable call back function */
-void max77693_muic_usb_cb(u8 usb_mode)
-{
-	struct usb_gadget *gadget = platform_get_drvdata(&s3c_device_usbgadget);
-#ifdef CONFIG_USB_EHCI_S5P
-	struct usb_hcd *ehci_hcd = platform_get_drvdata(&s5p_device_ehci);
-#endif
-#ifdef CONFIG_USB_OHCI_S5P
-	struct usb_hcd *ohci_hcd = platform_get_drvdata(&s5p_device_ohci);
-#endif
-#ifdef CONFIG_USB_HOST_NOTIFY
-	struct host_notifier_platform_data *host_noti_pdata =
-	    host_notifier_device.dev.platform_data;
-#endif
-	int retry_cnt = 1;
-
-	pr_info("MUIC usb_cb:%d\n", usb_mode);
-	if (gadget) {
-		switch (usb_mode) {
-		case USB_CABLE_DETACHED:
-			pr_info("usb: muic: USB_CABLE_DETACHED(%d)\n",
-				usb_mode);
-			usb_gadget_vbus_disconnect(gadget);
-			break;
-		case USB_CABLE_ATTACHED:
-			pr_info("usb: muic: USB_CABLE_ATTACHED(%d)\n",
-				usb_mode);
-			usb_gadget_vbus_connect(gadget);
-			break;
-		default:
-			pr_info("usb: muic: invalid mode%d\n", usb_mode);
-		}
-	}
-
-	if (usb_mode == USB_OTGHOST_ATTACHED) {
-#ifdef CONFIG_USB_EHCI_S5P
-		pm_runtime_get_sync(&s5p_device_ehci.dev);
-#endif
-#ifdef CONFIG_USB_OHCI_S5P
-		pm_runtime_get_sync(&s5p_device_ohci.dev);
-#endif
-#ifdef CONFIG_USB_HOST_NOTIFY
-		host_noti_pdata->ndev.mode = NOTIFY_HOST_MODE;
-		if (host_noti_pdata->usbhostd_start)
-			host_noti_pdata->usbhostd_start();
-
-		host_noti_pdata->booster(1);
-#endif
-	} else if (usb_mode == USB_OTGHOST_DETACHED) {
-#ifdef CONFIG_USB_EHCI_S5P
-		pm_runtime_put_sync(&s5p_device_ehci.dev);
-		/* waiting for ehci root hub suspend is done */
-		while (ehci_hcd->state != HC_STATE_SUSPENDED) {
-			msleep(50);
-			if (retry_cnt++ > RETRY_CNT_LIMIT) {
-				printk(KERN_ERR "ehci suspend not completed\n");
-				break;
-			}
-		}
-#endif
-#ifdef CONFIG_USB_OHCI_S5P
-		pm_runtime_put_sync(&s5p_device_ohci.dev);
-		/* waiting for ohci root hub suspend is done */
-		while (ohci_hcd->state != HC_STATE_SUSPENDED) {
-			msleep(50);
-			if (retry_cnt++ > RETRY_CNT_LIMIT) {
-				printk(KERN_ERR
-				       "ohci suspend is not completed\n");
-				break;
-			}
-		}
-#endif
-#ifdef CONFIG_USB_HOST_NOTIFY
-		host_noti_pdata->ndev.mode = NOTIFY_NONE_MODE;
-		if (host_noti_pdata->usbhostd_stop)
-			host_noti_pdata->usbhostd_stop();
-
-		host_noti_pdata->booster(0);
-#endif
-	}
-
-#ifdef CONFIG_JACK_MON
-	if (usb_mode == USB_OTGHOST_ATTACHED)
-		jack_event_handler("host", USB_CABLE_ATTACHED);
-	else if (usb_mode == USB_OTGHOST_DETACHED)
-		jack_event_handler("host", USB_CABLE_DETACHED);
-	else if ((usb_mode == USB_CABLE_ATTACHED)
-		|| (usb_mode == USB_CABLE_DETACHED))
-		jack_event_handler("usb", usb_mode);
-#endif
-}
-
-/*extern void MHL_On(bool on);*/
-void max77693_muic_mhl_cb(int attached)
-{
-	MUIC_PRINT_LOG();
-	pr_info("MUIC attached:%d\n", attached);
-	if (attached == MAX77693_MUIC_ATTACHED) {
-		/*MHL_On(1);*/ /* GPIO_LEVEL_HIGH */
-		pr_info("MHL Attached !!\n");
-#ifdef	CONFIG_SAMSUNG_MHL
-		sii9234_mhl_detection_sched();
-#endif
-	} else {
-		/*MHL_On(0);*/ /* GPIO_LEVEL_LOW */
-		pr_info("MHL Detached !!\n");
-	}
-}
-
-bool max77693_muic_is_mhl_attached(void)
-{
-	int val;
-	MUIC_PRINT_LOG();
-	gpio_request(GPIO_MHL_SEL, "MHL_SEL");
-	val = gpio_get_value(GPIO_MHL_SEL);
-	pr_info("MUIC val:%d\n", val);
-	gpio_free(GPIO_MHL_SEL);
-
-	return !!val;
-}
-
-void max77693_muic_deskdock_cb(bool attached)
-{
-	MUIC_PRINT_LOG();
-	pr_info("MUIC deskdock attached=%d\n", attached);
-	if (attached)
-		switch_set_state(&switch_dock, 1);
-	else
-		switch_set_state(&switch_dock, 0);
-}
-
-void max77693_muic_cardock_cb(bool attached)
-{
-	MUIC_PRINT_LOG();
-	pr_info("MUIC cardock attached=%d\n", attached);
-	pr_info("##MUIC [ %s ]- func : %s !!\n", __FILE__, __func__);
-	if (attached)
-		switch_set_state(&switch_dock, 2);
-	else
-		switch_set_state(&switch_dock, 0);
-}
-
-void max77693_muic_init_cb(void)
+static int __init u1_sec_switch_init(void)
 {
 	int ret;
+	switch_dev = device_create(sec_class, NULL, 0, NULL, "switch");
 
-	/* for CarDock, DeskDock */
-	ret = switch_dev_register(&switch_dock);
-
-	MUIC_PRINT_LOG();
-	pr_info("MUIC ret=%d\n", ret);
-
-	if (ret < 0)
-		pr_err("Failed to register dock switch. %d\n", ret);
-}
-
-int max77693_muic_cfg_uart_gpio(void)
-{
-	int val, path;
-	pr_info("## MUIC func : %s ! please  path: (uart:%d - usb:%d)\n",
-		__func__, gpio_get_value(GPIO_UART_SEL),
-		gpio_get_value(GPIO_USB_SEL));
-	val = gpio_get_value(GPIO_UART_SEL);
-	path = val ? UART_PATH_AP : UART_PATH_CP;
-	pr_info("##MUIC [ %s ]- func : %s !! -- val:%d -- path:%d\n", __FILE__,
-		__func__, val, path);
-
-	return path;
-}
-
-void max77693_muic_jig_uart_cb(int path)
-{
-	int val;
-
-	val = path == UART_PATH_AP ? 1 : 0;
-	pr_info("##MUIC [ %s ]- func : %s !! -- val:%d\n", __FILE__, __func__,
-		val);
-	gpio_set_value(GPIO_UART_SEL, val);
-}
+	if (IS_ERR(switch_dev))
+		pr_err("Failed to create device(switch)!\n");
 
-int max77693_muic_host_notify_cb(int enable)
-{
-	MUIC_PRINT_LOG();
-	pr_info("MUIC host_noti enable=%d\n", enable);
-	return 0;
-}
+#if 0
+	ret = device_create_file(switch_dev, &dev_attr_disable_vbus);
+	if (ret)
+		pr_err("Failed to create device file(disable_vbus)!\n");
+#endif
 
-int max77693_muic_set_safeout(int path)
-{
-	struct regulator *regulator;
+#ifdef CONFIG_TARGET_LOCALE_NA
+	ret = device_create_file(switch_dev, &dev_attr_set_usb_path);
+	if (ret)
+		pr_err("Failed to create device file(disable_vbus)!\n");
+#endif /* CONFIG_TARGET_LOCALE_NA */
 
-	MUIC_PRINT_LOG();
-	pr_info("MUIC safeout path=%d\n", path);
+#ifdef CONFIG_TARGET_LOCALE_KOR
+	usb_lock = device_create(sec_class, switch_dev,
+				MKDEV(0, 0), NULL, ".usb_lock");
 
-	if (path == CP_USB_MODE) {
-		regulator = regulator_get(NULL, "safeout1");
-		if (IS_ERR(regulator))
-			return -ENODEV;
-		if (regulator_is_enabled(regulator))
-			regulator_force_disable(regulator);
-		regulator_put(regulator);
+	if (IS_ERR(usb_lock))
+		pr_err("Failed to create device (usb_lock)!\n");
 
-		regulator = regulator_get(NULL, "safeout2");
-		if (IS_ERR(regulator))
-			return -ENODEV;
-		if (!regulator_is_enabled(regulator))
-			regulator_enable(regulator);
-		regulator_put(regulator);
-	} else {
-		/* AP_USB_MODE || AUDIO_MODE */
-		regulator = regulator_get(NULL, "safeout1");
-		if (IS_ERR(regulator))
-			return -ENODEV;
-		if (!regulator_is_enabled(regulator))
-			regulator_enable(regulator);
-		regulator_put(regulator);
+	if (device_create_file(usb_lock, &dev_attr_enable) < 0)
+		pr_err("Failed to create device file(.usblock/enable)!\n");
+#endif /* CONFIG_TARGET_LOCALE_KOR */
 
-		regulator = regulator_get(NULL, "safeout2");
-		if (IS_ERR(regulator))
-			return -ENODEV;
-		if (regulator_is_enabled(regulator))
-			regulator_force_disable(regulator);
-		regulator_put(regulator);
-	}
+	ret = uart_switch_init();
+	if (ret)
+		pr_err("Failed to create uart_switch\n");
 
 	return 0;
 }
-
-struct max77693_muic_data max77693_muic = {
-	.usb_cb = max77693_muic_usb_cb,
-	.charger_cb = max77693_muic_charger_cb,
-	.mhl_cb = max77693_muic_mhl_cb,
-	.is_mhl_attached = max77693_muic_is_mhl_attached,
-	.set_safeout = max77693_muic_set_safeout,
-	.init_cb = max77693_muic_init_cb,
-	.deskdock_cb = max77693_muic_deskdock_cb,
-	.cardock_cb = max77693_muic_cardock_cb,
-	.cfg_uart_gpio = max77693_muic_cfg_uart_gpio,
-	.jig_uart_cb = max77693_muic_jig_uart_cb,
-	.host_notify_cb = max77693_muic_host_notify_cb,
-	.gpio_usb_sel = GPIO_USB_SEL,
-};
-#endif
-
 device_initcall(u1_sec_switch_init);
diff -Naur ./arch/arm/mach-exynos/sec_thermistor.c ../../HK_JB/Kernel/arch/arm/mach-exynos/sec_thermistor.c
--- ./arch/arm/mach-exynos/sec_thermistor.c	2012-12-08 20:40:46.161821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/sec_thermistor.c	2012-11-22 09:13:16.000000000 +0100
@@ -32,7 +32,7 @@
 };
 
 #if defined(CONFIG_MACH_C1_KOR_SKT) || defined(CONFIG_MACH_C1_KOR_KT) || \
-	defined(CONFIG_MACH_C1_KOR_LGT)
+	defined(CONFIG_MACH_C1_KOR_LGT)  || defined(CONFIG_MACH_BAFFIN)
 static void notify_change_of_temperature(struct sec_therm_info *info);
 int siopLevellimit;
 EXPORT_SYMBOL(siopLevellimit);
@@ -57,7 +57,7 @@
 }
 
 #if defined(CONFIG_MACH_C1_KOR_SKT) || defined(CONFIG_MACH_C1_KOR_KT) || \
-	defined(CONFIG_MACH_C1_KOR_LGT)
+	defined(CONFIG_MACH_C1_KOR_LGT) || defined(CONFIG_MACH_BAFFIN)
 static ssize_t sec_therm_show_sioplevel(struct device *dev,
 				   struct device_attribute *attr,
 				   char *buf)
@@ -91,7 +91,7 @@
 	&dev_attr_temperature.attr,
 	&dev_attr_temp_adc.attr,
 #if defined(CONFIG_MACH_C1_KOR_SKT) || defined(CONFIG_MACH_C1_KOR_KT) || \
-	defined(CONFIG_MACH_C1_KOR_LGT)
+	defined(CONFIG_MACH_C1_KOR_LGT) || defined(CONFIG_MACH_BAFFIN)
 	&dev_attr_sioplevel.attr,
 #endif
 	NULL
@@ -169,7 +169,7 @@
 {
 	char temp_buf[20];
 	char siop_buf[20];
-	char *envp[2];
+	char *envp[3];
 	int env_offset = 0;
 	int siop_level = -1;
 
@@ -246,7 +246,7 @@
 			"failed to create sysfs attribute group\n");
 	}
 
-	INIT_DEFERRABLE_WORK(&info->polling_work,
+	INIT_DELAYED_WORK_DEFERRABLE(&info->polling_work,
 			sec_therm_polling_work);
 	schedule_delayed_work(&info->polling_work,
 			msecs_to_jiffies(info->pdata->polling_interval));
diff -Naur ./arch/arm/mach-exynos/sec_watchdog.c ../../HK_JB/Kernel/arch/arm/mach-exynos/sec_watchdog.c
--- ./arch/arm/mach-exynos/sec_watchdog.c	2012-12-08 20:40:46.161821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/sec_watchdog.c	2012-11-22 09:13:16.000000000 +0100
@@ -36,7 +36,7 @@
 
 /* PCLK(=PERIR=ACLK_100)/256/128 (~3200:1s) */
 #define TPS 3200
-#if defined(CONFIG_MACH_P4) && defined(CONFIG_TARGET_LOCALE_USA)
+#if 0
 #define PET_BY_WORKQUEUE
 #else
 #define PET_BY_DIRECT_TIMER
@@ -69,7 +69,7 @@
 #if defined(PET_BY_WORKQUEUE)
 static void watchdog_workfunc(struct work_struct *work)
 {
-	pr_debug("%s kicking...%x\n", __func__, readl(S3C2410_WTCNT));
+	pr_info("%s kicking...%x\n", __func__, readl(S3C2410_WTCNT));
 	writel(watchdog_reset * TPS, S3C2410_WTCNT);
 	queue_delayed_work_on(0, watchdog_wq, &watchdog_work,
 			      watchdog_pet * HZ);
@@ -77,7 +77,7 @@
 #elif defined(PET_BY_DIRECT_TIMER)
 static void pet_watchdog_timer_fn(unsigned long data)
 {
-	pr_debug("%s kicking...%x\n", __func__, readl(S3C2410_WTCNT));
+	pr_info("%s kicking...%x\n", __func__, readl(S3C2410_WTCNT));
 	writel(watchdog_reset * TPS, S3C2410_WTCNT);
 	pet_watchdog_timer.expires += watchdog_pet * HZ;
 	add_timer_on(&pet_watchdog_timer, 0);
@@ -85,7 +85,7 @@
 #else
 static enum hrtimer_restart watchdog_timerfunc(struct hrtimer *timer)
 {
-	pr_debug("%s kicking...%x\n", __func__, readl(S3C2410_WTCNT));
+	pr_info("%s kicking...%x\n", __func__, readl(S3C2410_WTCNT));
 	writel(watchdog_reset * TPS, S3C2410_WTCNT);
 	hrtimer_start(&watchdog_timer,
 		      ktime_set(watchdog_pet, 0), HRTIMER_MODE_REL);
diff -Naur ./arch/arm/mach-exynos/setup-c2c.c ../../HK_JB/Kernel/arch/arm/mach-exynos/setup-c2c.c
--- ./arch/arm/mach-exynos/setup-c2c.c	2012-12-08 20:40:46.161821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/setup-c2c.c	2012-11-22 09:13:17.000000000 +0100
@@ -32,106 +32,123 @@
 	/* TODO */
 }
 
-void exynos4_c2c_cfg_gpio(enum c2c_buswidth rx_width, enum c2c_buswidth tx_width,
-						void __iomem *etc8drv_addr)
+void exynos4_c2c_cfg_gpio(enum c2c_buswidth rx_width,
+			enum c2c_buswidth tx_width, void __iomem *etc8drv_addr)
 {
 	int i;
+	unsigned int sfn = S3C_GPIO_SFN(2);
+	s5p_gpio_pd_cfg_t pd_cfg = S5P_GPIO_PD_PREV_STATE;
+	s5p_gpio_pd_pull_t pd_pull = S5P_GPIO_PD_DOWN_ENABLE;
+	s5p_gpio_drvstr_t drvstr_lv1 = S5P_GPIO_DRVSTR_LV1;
+	s5p_gpio_drvstr_t drvstr_lv3 = S5P_GPIO_DRVSTR_LV3;
 
 	/* Set GPIO for C2C Rx */
-	s3c_gpio_cfgrange_nopull(EXYNOS4212_GPV0(0), 8, S3C_GPIO_SFN(2));
+	s3c_gpio_cfgrange_nopull(EXYNOS4212_GPV0(0), 8, sfn);
 	for (i = 0; i < 8; i++) {
-		s5p_gpio_set_drvstr(EXYNOS4212_GPV0(i), S5P_GPIO_DRVSTR_LV1);
-		s5p_gpio_set_pd_cfg(EXYNOS4212_GPV0(i), S5P_GPIO_PD_INPUT);
-		s5p_gpio_set_pd_pull(EXYNOS4212_GPV0(i), S5P_GPIO_PD_DOWN_ENABLE);
+		s5p_gpio_set_drvstr(EXYNOS4212_GPV0(i), drvstr_lv1);
+		s5p_gpio_set_pd_cfg(EXYNOS4212_GPV0(i), pd_cfg);
+		s5p_gpio_set_pd_pull(EXYNOS4212_GPV0(i), pd_pull);
 	}
 
 	if (rx_width == C2C_BUSWIDTH_16) {
-		s3c_gpio_cfgrange_nopull(EXYNOS4212_GPV1(0), 8, S3C_GPIO_SFN(2));
+		s3c_gpio_cfgrange_nopull(EXYNOS4212_GPV1(0), 8, sfn);
 		for (i = 0; i < 8; i++) {
-			s5p_gpio_set_drvstr(EXYNOS4212_GPV1(i), S5P_GPIO_DRVSTR_LV1);
-			s5p_gpio_set_pd_cfg(EXYNOS4212_GPV1(i), S5P_GPIO_PD_INPUT);
-			s5p_gpio_set_pd_pull(EXYNOS4212_GPV1(i), S5P_GPIO_PD_DOWN_ENABLE);
+			s5p_gpio_set_drvstr(EXYNOS4212_GPV1(i), drvstr_lv1);
+			s5p_gpio_set_pd_cfg(EXYNOS4212_GPV1(i), pd_cfg);
+			s5p_gpio_set_pd_pull(EXYNOS4212_GPV1(i), pd_pull);
 		}
 	} else if (rx_width == C2C_BUSWIDTH_10) {
-		s3c_gpio_cfgrange_nopull(EXYNOS4212_GPV1(0), 2, S3C_GPIO_SFN(2));
+		s3c_gpio_cfgrange_nopull(EXYNOS4212_GPV1(0), 2, sfn);
 		for (i = 0; i < 2; i++) {
-			s5p_gpio_set_drvstr(EXYNOS4212_GPV1(i), S5P_GPIO_DRVSTR_LV1);
-			s5p_gpio_set_pd_cfg(EXYNOS4212_GPV1(i), S5P_GPIO_PD_INPUT);
-			s5p_gpio_set_pd_pull(EXYNOS4212_GPV1(i), S5P_GPIO_PD_DOWN_ENABLE);
+			s5p_gpio_set_drvstr(EXYNOS4212_GPV1(i), drvstr_lv1);
+			s5p_gpio_set_pd_cfg(EXYNOS4212_GPV1(i), pd_cfg);
+			s5p_gpio_set_pd_pull(EXYNOS4212_GPV1(i), pd_pull);
 		}
 	}
 
 	/* Set GPIO for C2C Tx */
-	s3c_gpio_cfgrange_nopull(EXYNOS4212_GPV2(0), 8, S3C_GPIO_SFN(2));
-	for (i = 0; i < 8; i++)
-		s5p_gpio_set_drvstr(EXYNOS4212_GPV2(i), S5P_GPIO_DRVSTR_LV3);
+	s3c_gpio_cfgrange_nopull(EXYNOS4212_GPV2(0), 8, sfn);
+	for (i = 0; i < 8; i++) {
+		s5p_gpio_set_drvstr(EXYNOS4212_GPV2(i), drvstr_lv3);
+		s5p_gpio_set_pd_cfg(EXYNOS4212_GPV2(i), pd_cfg);
+	}
 
 	if (tx_width == C2C_BUSWIDTH_16) {
-		s3c_gpio_cfgrange_nopull(EXYNOS4212_GPV3(0), 8, S3C_GPIO_SFN(2));
-		for (i = 0; i < 8; i++)
-			s5p_gpio_set_drvstr(EXYNOS4212_GPV3(i), S5P_GPIO_DRVSTR_LV3);
+		s3c_gpio_cfgrange_nopull(EXYNOS4212_GPV3(0), 8, sfn);
+		for (i = 0; i < 8; i++) {
+			s5p_gpio_set_drvstr(EXYNOS4212_GPV3(i), drvstr_lv3);
+			s5p_gpio_set_pd_cfg(EXYNOS4212_GPV3(i), pd_cfg);
+		}
 	} else if (tx_width == C2C_BUSWIDTH_10) {
-		s3c_gpio_cfgrange_nopull(EXYNOS4212_GPV3(0), 2, S3C_GPIO_SFN(2));
-		for (i = 0; i < 2; i++)
-			s5p_gpio_set_drvstr(EXYNOS4212_GPV3(i), S5P_GPIO_DRVSTR_LV3);
+		s3c_gpio_cfgrange_nopull(EXYNOS4212_GPV3(0), 2, sfn);
+		for (i = 0; i < 2; i++) {
+			s5p_gpio_set_drvstr(EXYNOS4212_GPV3(i), drvstr_lv3);
+			s5p_gpio_set_pd_cfg(EXYNOS4212_GPV3(i), pd_cfg);
+		}
 	}
 
 	/* Set GPIO for WakeReqOut/In */
-	s3c_gpio_cfgrange_nopull(EXYNOS4212_GPV4(0), 2, S3C_GPIO_SFN(2));
-	s5p_gpio_set_pd_cfg(EXYNOS4212_GPV4(0), S5P_GPIO_PD_INPUT);
-	s5p_gpio_set_pd_pull(EXYNOS4212_GPV4(0), S5P_GPIO_PD_DOWN_ENABLE);
+	s3c_gpio_cfgrange_nopull(EXYNOS4212_GPV4(0), 2, sfn);
+	s5p_gpio_set_pd_cfg(EXYNOS4212_GPV4(0), pd_cfg);
+	s5p_gpio_set_pd_cfg(EXYNOS4212_GPV4(1), pd_cfg);
+	s5p_gpio_set_pd_pull(EXYNOS4212_GPV4(0), pd_pull);
 
 	writel(0x5, etc8drv_addr);
 }
 
-void exynos5_c2c_cfg_gpio(enum c2c_buswidth rx_width, enum c2c_buswidth tx_width,
-						void __iomem *etc8drv_addr)
+void exynos5_c2c_cfg_gpio(enum c2c_buswidth rx_width,
+			enum c2c_buswidth tx_width, void __iomem *etc8drv_addr)
 {
 	int i;
+	unsigned int sfn = S3C_GPIO_SFN(2);
+	s5p_gpio_pd_cfg_t pd_cfg = S5P_GPIO_PD_PREV_STATE;
+	s5p_gpio_pd_pull_t pd_pull = S5P_GPIO_PD_DOWN_ENABLE;
+	s5p_gpio_drvstr_t drvstr_lv1 = S5P_GPIO_DRVSTR_LV1;
+	s5p_gpio_drvstr_t drvstr_lv3 = S5P_GPIO_DRVSTR_LV3;
 
 	/* Set GPIO for C2C Rx */
-	s3c_gpio_cfgrange_nopull(EXYNOS5_GPV0(0), 8, S3C_GPIO_SFN(2));
+	s3c_gpio_cfgrange_nopull(EXYNOS5_GPV0(0), 8, sfn);
 	for (i = 0; i < 8; i++) {
-		s5p_gpio_set_drvstr(EXYNOS5_GPV0(i), S5P_GPIO_DRVSTR_LV1);
-		s5p_gpio_set_pd_cfg(EXYNOS5_GPV0(i), S5P_GPIO_PD_INPUT);
-		s5p_gpio_set_pd_pull(EXYNOS5_GPV0(i), S5P_GPIO_PD_DOWN_ENABLE);
+		s5p_gpio_set_drvstr(EXYNOS5_GPV0(i), drvstr_lv1);
+		s5p_gpio_set_pd_cfg(EXYNOS5_GPV0(i), pd_cfg);
+		s5p_gpio_set_pd_pull(EXYNOS5_GPV0(i), pd_pull);
 	}
 
 	if (rx_width == C2C_BUSWIDTH_16) {
-		s3c_gpio_cfgrange_nopull(EXYNOS5_GPV1(0), 8, S3C_GPIO_SFN(2));
+		s3c_gpio_cfgrange_nopull(EXYNOS5_GPV1(0), 8, sfn);
 		for (i = 0; i < 8; i++) {
-			s5p_gpio_set_drvstr(EXYNOS5_GPV1(i), S5P_GPIO_DRVSTR_LV1);
-			s5p_gpio_set_pd_cfg(EXYNOS5_GPV1(i), S5P_GPIO_PD_INPUT);
-			s5p_gpio_set_pd_pull(EXYNOS5_GPV1(i), S5P_GPIO_PD_DOWN_ENABLE);
+			s5p_gpio_set_drvstr(EXYNOS5_GPV1(i), drvstr_lv1);
+			s5p_gpio_set_pd_cfg(EXYNOS5_GPV1(i), pd_cfg);
+			s5p_gpio_set_pd_pull(EXYNOS5_GPV1(i), pd_pull);
 		}
 	} else if (rx_width == C2C_BUSWIDTH_10) {
-		s3c_gpio_cfgrange_nopull(EXYNOS5_GPV1(0), 2, S3C_GPIO_SFN(2));
+		s3c_gpio_cfgrange_nopull(EXYNOS5_GPV1(0), 2, sfn);
 		for (i = 0; i < 2; i++) {
-			s5p_gpio_set_drvstr(EXYNOS5_GPV1(i), S5P_GPIO_DRVSTR_LV1);
-			s5p_gpio_set_pd_cfg(EXYNOS5_GPV1(i), S5P_GPIO_PD_INPUT);
-			s5p_gpio_set_pd_pull(EXYNOS5_GPV1(i), S5P_GPIO_PD_DOWN_ENABLE);
+			s5p_gpio_set_drvstr(EXYNOS5_GPV1(i), drvstr_lv1);
+			s5p_gpio_set_pd_cfg(EXYNOS5_GPV1(i), pd_cfg);
+			s5p_gpio_set_pd_pull(EXYNOS5_GPV1(i), pd_pull);
 		}
 	}
 
 	/* Set GPIO for C2C Tx */
-	s3c_gpio_cfgrange_nopull(EXYNOS5_GPV2(0), 8, S3C_GPIO_SFN(2));
+	s3c_gpio_cfgrange_nopull(EXYNOS5_GPV2(0), 8, sfn);
 	for (i = 0; i < 8; i++)
-		s5p_gpio_set_drvstr(EXYNOS5_GPV2(i), S5P_GPIO_DRVSTR_LV3);
+		s5p_gpio_set_drvstr(EXYNOS5_GPV2(i), drvstr_lv3);
 
 	if (tx_width == C2C_BUSWIDTH_16) {
-		s3c_gpio_cfgrange_nopull(EXYNOS5_GPV3(0), 8, S3C_GPIO_SFN(2));
+		s3c_gpio_cfgrange_nopull(EXYNOS5_GPV3(0), 8, sfn);
 		for (i = 0; i < 8; i++)
-			s5p_gpio_set_drvstr(EXYNOS5_GPV3(i), S5P_GPIO_DRVSTR_LV3);
+			s5p_gpio_set_drvstr(EXYNOS5_GPV3(i), drvstr_lv3);
 	} else if (tx_width == C2C_BUSWIDTH_10) {
-		s3c_gpio_cfgrange_nopull(EXYNOS5_GPV3(0), 2, S3C_GPIO_SFN(2));
+		s3c_gpio_cfgrange_nopull(EXYNOS5_GPV3(0), 2, sfn);
 		for (i = 0; i < 2; i++)
-			s5p_gpio_set_drvstr(EXYNOS5_GPV3(i), S5P_GPIO_DRVSTR_LV3);
+			s5p_gpio_set_drvstr(EXYNOS5_GPV3(i), drvstr_lv3);
 	}
 
 	/* Set GPIO for WakeReqOut/In */
-	s3c_gpio_cfgrange_nopull(EXYNOS5_GPV4(0), 2, S3C_GPIO_SFN(2));
-	s5p_gpio_set_pd_cfg(EXYNOS5_GPV4(0), S5P_GPIO_PD_INPUT);
-	s5p_gpio_set_pd_pull(EXYNOS5_GPV4(0), S5P_GPIO_PD_DOWN_ENABLE);
+	s3c_gpio_cfgrange_nopull(EXYNOS5_GPV4(0), 2, sfn);
+	s5p_gpio_set_pd_cfg(EXYNOS5_GPV4(0), pd_cfg);
+	s5p_gpio_set_pd_pull(EXYNOS5_GPV4(0), pd_pull);
 
 	writel(0x5, etc8drv_addr);
 }
@@ -148,4 +165,4 @@
 		etc8drv_addr = S5P_VA_GPIO3 + 0xAC;
 		exynos5_c2c_cfg_gpio(rx_width, tx_width, etc8drv_addr);
 	}
-}
\ Kein Zeilenumbruch am Dateiende.
+}
diff -Naur ./arch/arm/mach-exynos/setup-fb-s5p.c ../../HK_JB/Kernel/arch/arm/mach-exynos/setup-fb-s5p.c
--- ./arch/arm/mach-exynos/setup-fb-s5p.c	2012-12-08 20:40:46.161821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/setup-fb-s5p.c	2012-11-22 09:13:16.000000000 +0100
@@ -749,24 +749,29 @@
 
 	div = DIV_ROUND_CLOSEST(src_clk, vclk);
 
-	vclk_limit = (40 *
-		(timing->h_bp + timing->h_fp + timing->h_sw + lcd->width) *
-		(timing->v_bp + timing->v_fp + timing->v_sw + lcd->height));
+	if (lcd->freq_limit) {
+		vclk_limit = (lcd->freq_limit *
+			(timing->h_bp + timing->h_fp + timing->h_sw + lcd->width) *
+			(timing->v_bp + timing->v_fp + timing->v_sw + lcd->height));
 
-	div_limit = DIV_ROUND_CLOSEST(src_clk, vclk_limit);
+		div_limit = DIV_ROUND_CLOSEST(src_clk, vclk_limit);
 
-	fimd_div = gcd(div, div_limit);
+		fimd_div = gcd(div, div_limit);
 
-#if defined(CONFIG_MACH_MIDAS) && defined(CONFIG_FB_S5P_S6E8AA0) && !defined(CONFIG_S6E8AA0_AMS529HA01)
-	div /= fimd_div;
-#endif
+		div /= fimd_div;
+	}
 
 	if (!div) {
 		dev_err(&pdev->dev, "div(%d) should be non-zero\n", div);
 		div = 1;
 	} else if (div > 16) {
 		dev_err(&pdev->dev, "div(%d) max should be 16\n", div);
-		div = 16;
+		for (fimd_div = 2; fimd_div < div; div++) {
+			if (div%fimd_div == 0)
+				break;
+		}
+		div /= fimd_div;
+		div = (div > 16) ? 16 : div;
 	}
 
 	rate = src_clk / div;
diff -Naur ./arch/arm/mach-exynos/setup-fimc0.c ../../HK_JB/Kernel/arch/arm/mach-exynos/setup-fimc0.c
--- ./arch/arm/mach-exynos/setup-fimc0.c	2012-12-08 20:40:46.161821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/setup-fimc0.c	2012-11-22 09:13:16.000000000 +0100
@@ -38,7 +38,7 @@
 		* FIELD */
 		s3c_gpio_cfgrange_nopull(EXYNOS4210_GPJ1(0), 5,
 					S3C_GPIO_SFN(2));
-#if !defined(CONFIG_MACH_P8LTE) || !defined(CONFIG_VIDEO_S5K5BBGX)
+#if !defined(CONFIG_MACH_P8LTE) && !defined(CONFIG_VIDEO_S5K5BBGX)
 		/* CAM B port(b0011) : DATA[0-7] */
 		s3c_gpio_cfgrange_nopull(EXYNOS4210_GPE1(0), 8,
 					S3C_GPIO_SFN(3));
@@ -74,7 +74,7 @@
 	s3c_gpio_cfgpin(EXYNOS4210_GPJ1(3), S3C_GPIO_INPUT);
 	s3c_gpio_setpull(EXYNOS4210_GPJ1(3), S3C_GPIO_PULL_DOWN);
 
-#if !defined(CONFIG_MACH_P8LTE)
+#if !defined(CONFIG_MACH_P8LTE) && !defined(CONFIG_MACH_U1_NA_SPR)
 	/* CAM B port(b0011) : DATA[0-7] */
 	s3c_gpio_cfgrange_nopull(EXYNOS4210_GPE1(0), 8, S3C_GPIO_SFN(3));
 	/* CAM B port(b0011) : PCLK, VSYNC, HREF, FIELD, CLKOUT */
diff -Naur ./arch/arm/mach-exynos/setup-sdhci.c ../../HK_JB/Kernel/arch/arm/mach-exynos/setup-sdhci.c
--- ./arch/arm/mach-exynos/setup-sdhci.c	2012-12-08 20:40:46.161821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/setup-sdhci.c	2012-11-22 09:13:16.000000000 +0100
@@ -56,7 +56,7 @@
 		  S3C_SDHCI_CTRL2_DFCNT_NONE |
 		  S3C_SDHCI_CTRL2_ENCLKOUTHOLD);
 
-#if defined(CONFIG_MACH_M0) || defined(CONFIG_MACH_C1_USA_ATT) || \
+#if defined(CONFIG_MACH_M0) || defined(CONFIG_MACH_C1) || \
 	defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_M3)
 	/* set 2ns delay for TX. This setting is just for wifi sdio i/f of
 	   M0 and his brother projects. */
diff -Naur ./arch/arm/mach-exynos/setup-sdhci-gpio.c ../../HK_JB/Kernel/arch/arm/mach-exynos/setup-sdhci-gpio.c
--- ./arch/arm/mach-exynos/setup-sdhci-gpio.c	2012-12-08 20:40:46.161821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/setup-sdhci-gpio.c	2012-11-22 09:13:16.000000000 +0100
@@ -22,6 +22,7 @@
 #include <plat/gpio-cfg.h>
 #include <plat/regs-sdhci.h>
 #include <plat/sdhci.h>
+#include "u1.h"
 
 #if defined(CONFIG_ARCH_EXYNOS4)
 void exynos4_setup_sdhci0_cfg_gpio(struct platform_device *dev, int width)
@@ -155,13 +156,54 @@
 	struct s3c_sdhci_platdata *pdata = dev->dev.platform_data;
 	unsigned int gpio;
 
+#if defined(CONFIG_WIMAX_CMC) /* && defined(CONFIG_TARGET_LOCALE_NA) */
+
+	if (gpio_get_value(GPIO_WIMAX_EN)) {
+		for (gpio = EXYNOS4_GPK3(0); gpio < EXYNOS4_GPK3(2); gpio++) {
+			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(2));
+			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+		}
+		for (gpio = EXYNOS4_GPK3(3); gpio <= EXYNOS4_GPK3(6); gpio++) {
+			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(2));
+			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
+			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
+		}
+		for (gpio = EXYNOS4_GPK3(0); gpio < EXYNOS4_GPK3(2); gpio++) {
+			s3c_gpio_slp_cfgpin(gpio, S3C_GPIO_SLP_INPUT);
+			s3c_gpio_slp_setpull_updown(gpio, S3C_GPIO_PULL_NONE);
+		}
+		for (gpio = EXYNOS4_GPK3(3); gpio <= EXYNOS4_GPK3(6); gpio++) {
+			s3c_gpio_slp_cfgpin(gpio, S3C_GPIO_SLP_INPUT);
+			s3c_gpio_slp_setpull_updown(gpio, S3C_GPIO_PULL_NONE);
+		}
+	} else {
+		for (gpio = EXYNOS4_GPK3(0); gpio < EXYNOS4_GPK3(2); gpio++) {
+			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(0));
+			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_DOWN);
+		}
+		for (gpio = EXYNOS4_GPK3(3); gpio <= EXYNOS4_GPK3(6); gpio++) {
+			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(0));
+			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_DOWN);
+		}
+		for (gpio = EXYNOS4_GPK3(0); gpio < EXYNOS4_GPK3(2); gpio++) {
+			s3c_gpio_slp_cfgpin(gpio, S3C_GPIO_SLP_INPUT);
+			s3c_gpio_slp_setpull_updown(gpio, S3C_GPIO_PULL_DOWN);
+		}
+		for (gpio = EXYNOS4_GPK3(3); gpio <= EXYNOS4_GPK3(6); gpio++) {
+			s3c_gpio_slp_cfgpin(gpio, S3C_GPIO_SLP_INPUT);
+			s3c_gpio_slp_setpull_updown(gpio, S3C_GPIO_PULL_DOWN);
+		}
+	}
+#else
+
 	/* Set all the necessary GPK3[0:1] pins to special-function 2 */
 	for (gpio = EXYNOS4_GPK3(0); gpio < EXYNOS4_GPK3(2); gpio++) {
 		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(2));
 #if defined(CONFIG_MACH_U1) || defined(CONFIG_MACH_TRATS)
 		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
 		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
-#elif defined(CONFIG_MACH_M0) || defined(CONFIG_MACH_C1_USA_ATT) || \
+#elif defined(CONFIG_MACH_M0) || defined(CONFIG_MACH_C1) || \
 	defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_M3)
 		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
 		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
@@ -187,7 +229,7 @@
 #if defined(CONFIG_MACH_U1) || defined(CONFIG_MACH_TRATS)
 		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
 		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
-#elif defined(CONFIG_MACH_M0) || defined(CONFIG_MACH_C1_USA_ATT) || \
+#elif defined(CONFIG_MACH_M0) || defined(CONFIG_MACH_C1) || \
 	defined(CONFIG_MACH_T0) || defined(CONFIG_MACH_M3)
 		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
 		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
@@ -208,6 +250,7 @@
 		s3c_gpio_setpull(EXYNOS4_GPK3(2), S3C_GPIO_PULL_NONE);
 		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
 	}
+#endif
 }
 
 #endif /* CONFIG_ARCH_EXYNOS4 */
diff -Naur ./arch/arm/mach-exynos/setup-usb-phy.c ../../HK_JB/Kernel/arch/arm/mach-exynos/setup-usb-phy.c
--- ./arch/arm/mach-exynos/setup-usb-phy.c	2012-12-08 20:40:46.161821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/setup-usb-phy.c	2012-11-22 09:13:16.000000000 +0100
@@ -32,13 +32,6 @@
    #include <linux/usb/hcd.h>
 #endif
 
-#ifdef CONFIG_USB_OHCI_S5P
-   #include <plat/devs.h>
-   #include <linux/usb.h>
-   #include <linux/usb/otg.h>
-   #include <linux/usb/hcd.h>
-#endif
-
 #define ETC6PUD		(S5P_VA_GPIO2 + 0x228)
 #define EXYNOS4_USB_CFG		(S3C_VA_SYS + 0x21C)
 #define EXYNOS5_USB_CFG		(S3C_VA_SYS + 0x230)
@@ -46,15 +39,6 @@
 #define PHY_ENABLE	(1 << 0)
 #define PHY_DISABLE	(0)
 
-#ifdef CONFIG_USB_OHCI_S5P
-struct s5p_ohci_hcd {
-	struct device *dev;
-	struct usb_hcd *hcd;
-	struct clk *clk;
-	int power_on;
-};
-#endif
-
 enum usb_host_type {
 	HOST_PHY_EHCI	= (0x1 << 0),
 	HOST_PHY_OHCI	= (0x1 << 1),
@@ -476,11 +460,7 @@
 	/* set clock frequency for PLL */
 	phyclk = readl(EXYNOS4_PHYCLK) & ~(EXYNOS4210_CLKSEL_MASK);
 	phyclk |= exynos_usb_phy_set_clock(pdev);
-#ifdef CONFIG_USB_OHCI_S5P
-	phyclk |= PHY1_COMMON_ON_N;
-#else
 	phyclk &= ~(PHY1_COMMON_ON_N);
-#endif
 	writel(phyclk, EXYNOS4_PHYCLK);
 
 	/* set to normal HSIC 0 and 1 of PHY1 */
@@ -576,11 +556,7 @@
 	phyclk = exynos_usb_phy_set_clock(pdev);
 	/* COMMON Block configuration during suspend */
 	phyclk &= ~(PHY0_COMMON_ON_N);
-#ifdef CONFIG_USB_OHCI_S5P
-	phyclk |= PHY1_COMMON_ON_N;
-#else
 	phyclk &= ~(PHY1_COMMON_ON_N);
-#endif
 	writel(phyclk, EXYNOS4_PHYCLK);
 
 	/* set to normal of Device */
@@ -1051,11 +1027,16 @@
 		if (phypwr & (PHY1_STD_FORCE_SUSPEND
 			| EXYNOS4212_HSIC0_FORCE_SUSPEND
 			| EXYNOS4212_HSIC1_FORCE_SUSPEND)) {
-#if defined(CONFIG_LINK_DEVICE_HSIC) || defined(CONFIG_LINK_DEVICE_USB) \
-		|| defined(CONFIG_MDM_HSIC_PM)
 			/* HSIC LPA: LPA USB phy retention reume call the usb
 			* reset resume, so we should let CP to HSIC L3 mode. */
+#if defined(CONFIG_LINK_DEVICE_HSIC) || defined(CONFIG_LINK_DEVICE_USB)
 			set_hsic_lpa_states(STATE_HSIC_LPA_ENTER);
+#elif defined(CONFIG_MDM_HSIC_PM)
+			ret = set_hsic_lpa_states(STATE_HSIC_LPA_ENTER);
+			if (ret < 0) {
+				op = 1;
+				goto done;
+			}
 #endif
 			/* unset to normal of Host */
 			writel(readl(EXYNOS4_PHYPWR)
@@ -1157,11 +1138,6 @@
 int s5p_usb_phy_suspend(struct platform_device *pdev, int type)
 {
 	int ret = 0;
-#ifdef CONFIG_USB_OHCI_S5P
-	struct s5p_ohci_hcd *s5p_ohci = platform_get_drvdata(&s5p_device_ohci);
-	struct usb_hcd *ohci_hcd = s5p_ohci->hcd;
-	u32 phyclk;
-#endif
 
 	if (exynos_usb_phy_clock_enable(pdev))
 		return 0;
@@ -1180,16 +1156,7 @@
 		if (soc_is_exynos4210() ||
 			soc_is_exynos4212() ||
 			soc_is_exynos4412()) {
-#ifdef CONFIG_USB_OHCI_S5P
-			/* Set OHCI clock off when ohci_hcd is suspended */
-			if (ohci_hcd->state == HC_STATE_SUSPENDED) {
-				phyclk = readl(EXYNOS4_PHYCLK);
-				phyclk &= ~(PHY1_COMMON_ON_N);
-				writel(phyclk, EXYNOS4_PHYCLK);
-			}
-			dev_info(&pdev->dev, "host_phy_susp:%d\n",
-					ohci_hcd->state);
-#endif
+			dev_info(&pdev->dev, "host_phy_susp\n");
 			ret = exynos4_usb_phy1_suspend(pdev);
 		} else
 			ret = exynos5_usb_phy_host_suspend(pdev);
@@ -1218,11 +1185,6 @@
 		if (soc_is_exynos4210() ||
 			soc_is_exynos4212() ||
 			soc_is_exynos4412()) {
-#ifdef CONFIG_USB_OHCI_S5P
-			phyclk = readl(EXYNOS4_PHYCLK);
-			phyclk |= PHY1_COMMON_ON_N;
-			writel(phyclk, EXYNOS4_PHYCLK);
-#endif
 			ret = exynos4_usb_phy1_resume(pdev);
 		} else
 			ret = exynos5_usb_phy_host_resume(pdev);
diff -Naur ./arch/arm/mach-exynos/sleep-exynos5.S ../../HK_JB/Kernel/arch/arm/mach-exynos/sleep-exynos5.S
--- ./arch/arm/mach-exynos/sleep-exynos5.S	1970-01-01 01:00:00.000000000 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/sleep-exynos5.S	2012-11-22 09:13:16.000000000 +0100
@@ -0,0 +1,137 @@
+/* linux/arch/arm/mach-exynos/sleep-exynos5.S
+ *
+ * Copyright (c) 2011 Samsung Electronics Co., Ltd.
+ *		http://www.samsung.com
+ *
+ * EXYNOS5 power Manager (Suspend-To-RAM) support
+ * Based on S3C2410 sleep code by:
+ *	Ben Dooks, (c) 2004 Simtec Electronics
+ *
+ * Based on PXA/SA1100 sleep code by:
+ *	Nicolas Pitre, (c) 2002 Monta Vista Software Inc
+ *	Cliff Brake, (c) 2001
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+*/
+
+#include <linux/linkage.h>
+#include <asm/assembler.h>
+#include <asm/memory.h>
+#include <mach/smc.h>
+
+	.text
+
+	/*
+	 * s3c_cpu_save
+	 *
+	 * entry:
+	 *	r1 = v:p offset
+	 */
+
+ENTRY(s3c_cpu_save)
+
+	stmfd	sp!, { r3 - r12, lr }
+
+	adr	r0, sleep_save_misc
+
+#ifdef CONFIG_ARM_TRUSTZONE
+	mrc	p15, 0, r2, c1, c0, 1	@ read aux control register
+	str	r2, [r0], #4
+#endif
+	mrc	p15, 1, r2, c9, c0, 2	@ read l2 control register
+	str	r2, [r0], #4
+	mrc	p15, 1, r2, c15, c0, 3	@ read l2 prefetch register
+	str	r2, [r0], #4
+
+	ldr	r3, =resume_with_mmu
+	bl	cpu_suspend
+
+	bl	exynos5_cpu_suspend
+
+	/* Restore original sp */
+	mov	r0, sp
+	add	r0, r0, #4
+	ldr	sp, [r0]
+
+	mov	r0, #0
+	b	early_wakeup
+
+resume_with_mmu:
+
+	adr	r4, sleep_save_misc
+
+#ifdef CONFIG_ARM_TRUSTZONE
+        mov	r3, #0
+
+	ldr	r0, =SMC_CMD_REG
+	ldr	r1, =SMC_REG_ID_CP15(1, 0, 0, 1)	@ aux control register
+	ldr	r2, [r4], #4
+	smc	0
+	ldr	r0, =SMC_CMD_REG
+	ldr	r1, =SMC_REG_ID_CP15(9, 1, 0, 2)	@ L2 control register
+	ldr	r2, [r4], #4
+	smc	0
+	ldr	r0, =SMC_CMD_REG
+	ldr	r1, =SMC_REG_ID_CP15(15, 1, 0, 3)	@ L2 prefetch register
+	ldr	r2, [r4], #4
+	smc	0
+#else
+	ldr	r2, [r4], #4
+	mcr	p15, 1, r2, c9, c0, 2			@ L2 control register
+	ldr	r2, [r4], #4
+	mcr	p15, 1, r2, c15, c0, 3			@ L2 prefetch register
+#endif
+	mov	r0, #1
+early_wakeup:
+
+	ldmfd	sp!, { r3 - r12, pc }
+
+	.ltorg
+
+	/*
+	 * sleep magic, to allow the bootloader to check for an valid
+	 * image to resume to. Must be the first word before the
+	 * s3c_cpu_resume entry.
+	 */
+
+	.word	0x2bedf00d
+
+sleep_save_misc:
+	.long	0
+	.long	0
+	.long	0
+
+	/*
+	 * s3c_cpu_resume
+	 *
+	 * resume code entry for bootloader to call
+	 *
+	 * we must put this code here in the data segment as we have no
+	 * other way of restoring the stack pointer after sleep, and we
+	 * must not write to the code segment (code is read-only)
+	 */
+
+ENTRY(s3c_cpu_resume)
+	/*
+	 * Set for L2 Cache latency
+	 */
+	mcr	p15, 1, r0, c9, c0, 2
+	ldr	r1, =0x3ff
+	bic	r0, r0, r1
+	ldr	r1, =0x2a2
+	orr	r0, r0, r1
+	mrc	p15, 1, r0, c9, c0, 2
+
+	b	cpu_resume
diff -Naur ./arch/arm/mach-exynos/stand-hotplug.c ../../HK_JB/Kernel/arch/arm/mach-exynos/stand-hotplug.c
--- ./arch/arm/mach-exynos/stand-hotplug.c	2012-12-08 20:40:46.161821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/stand-hotplug.c	2012-11-22 09:13:16.000000000 +0100
@@ -28,9 +28,6 @@
 #include <linux/reboot.h>
 #include <linux/gpio.h>
 #include <linux/cpufreq.h>
-#include <linux/device.h>       //for second_core by tegrak
-#include <linux/miscdevice.h>   //for second_core by tegrak
-#include <linux/earlysuspend.h>
 
 #include <plat/map-base.h>
 #include <plat/gpio-cfg.h>
@@ -53,19 +50,13 @@
 
 #if defined(CONFIG_MACH_U1) || defined(CONFIG_MACH_PX) || \
 	defined(CONFIG_MACH_TRATS)
-#define TRANS_LOAD_H0 50
-#define TRANS_LOAD_L1 40
+#define TRANS_LOAD_H0 30
+#define TRANS_LOAD_L1 20
 #define TRANS_LOAD_H1 100
 
-#define TRANS_LOAD_H0_SCROFF 100
-#define TRANS_LOAD_L1_SCROFF 100
-#define TRANS_LOAD_H1_SCROFF 100
-
 #define BOOT_DELAY	60
-#define CHECK_DELAY_ON	HZ << 1
-#define CHECK_DELAY_OFF	HZ >> 1
-
-#define CPU1_ON_FREQ 800000
+#define CHECK_DELAY_ON	(.5*HZ * 4)
+#define CHECK_DELAY_OFF	(.5*HZ)
 #endif
 
 #if defined(CONFIG_MACH_MIDAS) || defined(CONFIG_MACH_SMDK4X12) \
@@ -96,7 +87,7 @@
 
 #define HOTPLUG_UNLOCKED 0
 #define HOTPLUG_LOCKED 1
-#define PM_HOTPLUG_DEBUG 0
+#define PM_HOTPLUG_DEBUG 1
 #define NUM_CPUS num_possible_cpus()
 #define CPULOAD_TABLE (NR_CPUS + 1)
 
@@ -109,18 +100,9 @@
 
 static unsigned int max_performance;
 static unsigned int freq_min = -1UL;
-module_param_named(freq_min, freq_min, uint, 0644);
 
 static unsigned int hotpluging_rate = CHECK_DELAY_OFF;
-static unsigned int check_rate = CHECK_DELAY_OFF;
-module_param_named(rate, check_rate, uint, 0644);
-static unsigned int check_rate_cpuon = CHECK_DELAY_ON;
-module_param_named(rate_cpuon, check_rate_cpuon, uint, 0644);
-static unsigned int check_rate_scroff = CHECK_DELAY_ON << 2;
-module_param_named(rate_scroff, check_rate_scroff, uint, 0644);
-static unsigned int freq_cpu1on = CPU1_ON_FREQ;
-module_param_named(freq_cpu1on, freq_cpu1on, uint, 0644);
-
+module_param_named(rate, hotpluging_rate, uint, 0644);
 static unsigned int user_lock;
 module_param_named(lock, user_lock, uint, 0644);
 static unsigned int trans_rq= TRANS_RQ;
@@ -135,13 +117,6 @@
 static unsigned int trans_load_h1 = TRANS_LOAD_H1;
 module_param_named(load_h1, trans_load_h1, uint, 0644);
 
-static unsigned int trans_load_h0_scroff = TRANS_LOAD_H0_SCROFF;
-module_param_named(load_h0_scroff, trans_load_h0, uint, 0644);
-static unsigned int trans_load_l1_scroff = TRANS_LOAD_L1_SCROFF;
-module_param_named(load_l1_scroff, trans_load_l1, uint, 0644);
-static unsigned int trans_load_h1_scroff = TRANS_LOAD_H1_SCROFF;
-module_param_named(load_h1_scroff, trans_load_h1, uint, 0644);
-
 #if (NR_CPUS > 2)
 static unsigned int trans_load_l2 = TRANS_LOAD_L2;
 module_param_named(load_l2, trans_load_l2, uint, 0644);
@@ -168,18 +143,12 @@
 	pid_t tgid;
 };
 
-static DEFINE_PER_CPU(struct cpu_time_info, hotplug_cpu_time);
 
-static bool standhotplug_enabled = true;
-static bool screen_off;
+static DEFINE_PER_CPU(struct cpu_time_info, hotplug_cpu_time);
 
 /* mutex can be used since hotplug_timer does not run in
    timer(softirq) context but in process context */
 static DEFINE_MUTEX(hotplug_lock);
-/* Second core values by tegrak */
-#define SECOND_CORE_VERSION (1)
-int second_core_on = 1;
-int hotplug_on = 1;
 
 bool hotplug_out_chk(unsigned int nr_online_cpu, unsigned int threshold_up,
 		unsigned int avg_load, unsigned int cur_freq)
@@ -187,11 +156,11 @@
 #if defined(CONFIG_MACH_P10)
 	return ((nr_online_cpu > 1) &&
 		(avg_load < threshold_up &&
-		cur_freq < freq_cpu1on));
+		cur_freq <= freq_min));
 #else
 	return ((nr_online_cpu > 1) &&
 		(avg_load < threshold_up ||
-		cur_freq < freq_cpu1on));
+		cur_freq <= freq_min));
 #endif
 }
 
@@ -212,16 +181,6 @@
 		{0, 0}
 	};
 
-	unsigned int threshold_scroff[CPULOAD_TABLE][2] = {
-		{0, trans_load_h0_scroff},
-		{trans_load_l1_scroff, trans_load_h1_scroff},
-#if (NR_CPUS > 2)
-		{trans_load_l2_scroff, trans_load_h2_scroff},
-		{trans_load_l3_scroff, 100},
-#endif
-		{0, 0}
-	};
-
 	static void __iomem *clk_fimc;
 	unsigned char fimc_stat;
 
@@ -238,13 +197,12 @@
 	if ((fimc_stat>>4 & 0x1) == 1)
 		return HOTPLUG_IN;
 
-	if (hotplug_out_chk(nr_online_cpu, (screen_off ? threshold_scroff[nr_online_cpu-1][0] : threshold[nr_online_cpu - 1][0] ),
+	if (hotplug_out_chk(nr_online_cpu, threshold[nr_online_cpu - 1][0],
 			    avg_load, cur_freq)) {
 		return HOTPLUG_OUT;
 		/* If total nr_running is less than cpu(on-state) number, hotplug do not hotplug-in */
 	} else if (nr_running() > nr_online_cpu &&
-		   avg_load > (screen_off ? threshold_scroff[nr_online_cpu-1][1] : threshold[nr_online_cpu - 1][1] )
-		   && cur_freq >= freq_cpu1on) {
+		   avg_load > threshold[nr_online_cpu - 1][1] && cur_freq > freq_min) {
 
 		return HOTPLUG_IN;
 #if defined(CONFIG_MACH_P10)
@@ -275,19 +233,6 @@
 
 	mutex_lock(&hotplug_lock);
 
-	if(!standhotplug_enabled) {
-		printk(KERN_INFO "pm-hotplug: disable cpu auto-hotplug\n");
-		goto off_hotplug;
-	}
-
-	// exit if we turned off dynamic hotplug by tegrak
-	// cancel the timer
-	if (!hotplug_on) {
-		if (!second_core_on && cpu_online(1) == 1)
-			cpu_down(1);
-		goto off_hotplug;
-	}
-
 	if (user_lock == 1)
 		goto no_hotplug;
 
@@ -339,29 +284,22 @@
 	/*standallone hotplug*/
 	flag_hotplug = standalone_hotplug(load, nr_rq_min, cpu_rq_min);
 
-	/*do not ever hotplug out CPU 0*/
-	if((cpu_rq_min == 0) && (flag_hotplug == HOTPLUG_OUT))
-		goto no_hotplug;
-
 	/*cpu hotplug*/
 	if (flag_hotplug == HOTPLUG_IN && cpu_online(select_off_cpu) == CPU_OFF) {
 		DBG_PRINT("cpu%d turning on!\n", select_off_cpu);
 		cpu_up(select_off_cpu);
 		DBG_PRINT("cpu%d on\n", select_off_cpu);
-		hotpluging_rate = check_rate_cpuon;
+		hotpluging_rate = CHECK_DELAY_ON;
 	} else if (flag_hotplug == HOTPLUG_OUT && cpu_online(cpu_rq_min) == CPU_ON) {
 		DBG_PRINT("cpu%d turnning off!\n", cpu_rq_min);
 		cpu_down(cpu_rq_min);
 		DBG_PRINT("cpu%d off!\n", cpu_rq_min);
-		if(!screen_off) hotpluging_rate = check_rate;
-		else hotpluging_rate = check_rate_scroff;
+		hotpluging_rate = CHECK_DELAY_OFF;
 	} 
 
 no_hotplug:
-	//printk("hotplug_timer done.\n");
 
 	queue_delayed_work_on(0, hotplug_wq, &hotplug_work, hotpluging_rate);
-off_hotplug:
 
 	mutex_unlock(&hotplug_lock);
 }
@@ -396,34 +334,6 @@
 	.notifier_call = exynos4_pm_hotplug_notifier_event,
 };
 
-static void hotplug_early_suspend(struct early_suspend *handler)
-{
-	mutex_lock(&hotplug_lock);
-	screen_off = true;
-	//Hotplug out all extra CPUs
-	while(num_online_cpus() > 1)
-	  cpu_down(num_online_cpus()-1);
-	hotpluging_rate = check_rate_scroff;
-	mutex_unlock(&hotplug_lock);
-}
-
-static void hotplug_late_resume(struct early_suspend *handler)
-{
-	printk(KERN_INFO "pm-hotplug: enable cpu auto-hotplug\n");
-
-	mutex_lock(&hotplug_lock);
-	screen_off = false;
-	hotpluging_rate = check_rate;
-	queue_delayed_work_on(0, hotplug_wq, &hotplug_work, hotpluging_rate);
-	mutex_unlock(&hotplug_lock);
-}
-
-static struct early_suspend hotplug_early_suspend_notifier = {
-	.suspend = hotplug_early_suspend,
-	.resume = hotplug_late_resume,
-	.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN,
-};
-
 static int hotplug_reboot_notifier_call(struct notifier_block *this,
 					unsigned long code, void *_cmd)
 {
@@ -439,126 +349,8 @@
 	.notifier_call = hotplug_reboot_notifier_call,
 };
 
-/****************************************
- * DEVICE ATTRIBUTES FUNCTION by tegrak
-****************************************/
-#define declare_show(filename) \
-	static ssize_t show_##filename(struct device *dev, struct device_attribute *attr, char *buf)
-
-#define declare_store(filename) \
-	static ssize_t store_##filename(\
-		struct device *dev, struct device_attribute *attr, const char *buf, size_t size)
-
-/****************************************
- * second_core attributes function by tegrak
- ****************************************/
-declare_show(version) {
-	return sprintf(buf, "%u\n", SECOND_CORE_VERSION);
-}
-
-declare_show(author) {
-	return sprintf(buf, "Tegrak\n");
-}
-
-declare_show(hotplug_on) {
-	return sprintf(buf, "%s\n", (hotplug_on) ? ("on") : ("off"));
-}
-
-declare_store(hotplug_on) {	
-	mutex_lock(&hotplug_lock);
-	
-	if (user_lock) {
-		goto finish;
-	}
-	
-	if (!hotplug_on && strcmp(buf, "on\n") == 0) {
-		hotplug_on = 1;
-		// restart worker thread.
-		hotpluging_rate = CHECK_DELAY_ON;
-		queue_delayed_work_on(0, hotplug_wq, &hotplug_work, hotpluging_rate);
-		printk("second_core: hotplug is on!\n");
-	}
-	else if (hotplug_on && strcmp(buf, "off\n") == 0) {
-		hotplug_on = 0;
-		second_core_on = 1;
-		if (cpu_online(1) == 0) {
-			cpu_up(1);
-		}
-		printk("second_core: hotplug is off!\n");
-	}
-	
-finish:
-	mutex_unlock(&hotplug_lock);
-	return size;
-}
-
-declare_show(second_core_on) {
-	return sprintf(buf, "%s\n", (second_core_on) ? ("on") : ("off"));
-}
-
-declare_store(second_core_on) {
-	mutex_lock(&hotplug_lock);
-	
-	if (hotplug_on || user_lock) {
-		goto finish;
-	}
-	
-	if (!second_core_on && strcmp(buf, "on\n") == 0) {
-		second_core_on = 1;
-		if (cpu_online(1) == 0) {
-			cpu_up(1);
-		}
-		printk("second_core: 2nd core is always on!\n");
-	}
-	else if (second_core_on && strcmp(buf, "off\n") == 0) {
-		second_core_on = 0;
-		if (cpu_online(1) == 1) {
-			cpu_down(1);
-		}
-		printk("second_core: 2nd core is always off!\n");
-	}
-	
-finish:
-	mutex_unlock(&hotplug_lock);
-	return size;
-}
-
-/****************************************
- * DEVICE ATTRIBUTE by tegrak
- ****************************************/
-#define declare_attr_rw(filename, perm) \
-	static DEVICE_ATTR(filename, perm, show_##filename, store_##filename)
-#define declare_attr_ro(filename, perm) \
-	static DEVICE_ATTR(filename, perm, show_##filename, NULL)
-#define declare_attr_wo(filename, perm) \
-	static DEVICE_ATTR(filename, perm, NULL, store_##filename)
-
-declare_attr_ro(version, 0444);
-declare_attr_ro(author, 0444);
-declare_attr_rw(hotplug_on, 0666);
-declare_attr_rw(second_core_on, 0666);
-
-static struct attribute *second_core_attributes[] = {
-	&dev_attr_hotplug_on.attr, 
-	&dev_attr_second_core_on.attr,
-	&dev_attr_version.attr,
-	&dev_attr_author.attr,
-	NULL
-};
-
-static struct attribute_group second_core_group = {
-		.attrs  = second_core_attributes,
-};
-
-static struct miscdevice second_core_device = {
-		.minor = MISC_DYNAMIC_MINOR,
-		.name = "second_core",
-};
-
-
 static int __init exynos4_pm_hotplug_init(void)
 {
-	int ret;
 	unsigned int i;
 	unsigned int freq;
 	unsigned int freq_max = 0;
@@ -594,20 +386,6 @@
 #endif
 	register_pm_notifier(&exynos4_pm_hotplug_notifier);
 	register_reboot_notifier(&hotplug_reboot_notifier);
-	
-	// register second_core device by tegrak
-	ret = misc_register(&second_core_device);
-	if (ret) {
-		printk(KERN_ERR "failed at(%d)\n", __LINE__);
-		return ret;
-	}
-	
-	ret = sysfs_create_group(&second_core_device.this_device->kobj, &second_core_group);
-	if (ret) {
-		printk(KERN_ERR "failed at(%d)\n", __LINE__);
-		return ret;
-	}
-	register_early_suspend(&hotplug_early_suspend_notifier);
 
 	return 0;
 }
@@ -619,63 +397,10 @@
 	.id = -1,
 };
 
-static int standhotplug_cpufreq_policy_notifier_call(struct notifier_block *this,
-				unsigned long code, void *data)
-{
-	struct cpufreq_policy *policy = data;
-
-	switch (code) {
-	case CPUFREQ_ADJUST:
-		if (
-			(!strnicmp(policy->governor->name, "pegasusq", CPUFREQ_NAME_LEN)) ||
-			(!strnicmp(policy->governor->name, "lulzactiveq", CPUFREQ_NAME_LEN)) ||
-			(!strnicmp(policy->governor->name, "abussplug", CPUFREQ_NAME_LEN)) ||
-			(!strnicmp(policy->governor->name, "hotplug", CPUFREQ_NAME_LEN))
-			)
-		{
-			if (standhotplug_enabled) {
-				DBG_PRINT("Stand-hotplug is disabled: governor=%s\n",
-								policy->governor->name);
-				mutex_lock(&hotplug_lock);
-				standhotplug_enabled = false;
-				mutex_unlock(&hotplug_lock);
-			}
-		} else {
-			if (!standhotplug_enabled) {
-				DBG_PRINT("Stand-hotplug is enabled: governor=%s\n",
-								policy->governor->name);
-				mutex_lock(&hotplug_lock);
-				standhotplug_enabled = true;
-				queue_delayed_work_on(0, hotplug_wq, &hotplug_work, hotpluging_rate);
-				mutex_unlock(&hotplug_lock);
-			}
-		}
-		break;
-	case CPUFREQ_INCOMPATIBLE:
-	case CPUFREQ_NOTIFY:
-	default:
-		break;
-	}
-
-	return NOTIFY_DONE;
-}
-static struct notifier_block standhotplug_cpufreq_policy_notifier = {
-	.notifier_call = standhotplug_cpufreq_policy_notifier_call,
-};
-
-
-
 static int __init exynos4_pm_hotplug_device_init(void)
 {
 	int ret;
 
-#if defined(CONFIG_CPU_FREQ_DEFAULT_GOV_PEGASUSQ) || \
-	defined(CONFIG_CPU_FREQ_DEFAULT_GOV_HOTPLUG) || \
-	defined(CONFIG_CPU_FREQ_DEFAULT_GOV_LULZACTIVEQ)
-	standhotplug_enabled = 0;
-#else
-	standhotplug_enabled = 1;
-#endif
 	ret = platform_device_register(&exynos4_pm_hotplug_device);
 
 	if (ret) {
@@ -685,8 +410,6 @@
 
 	printk(KERN_INFO "exynos4_pm_hotplug_device_init: %d\n", ret);
 
-	cpufreq_register_notifier(&standhotplug_cpufreq_policy_notifier,
-						CPUFREQ_POLICY_NOTIFIER);
 	return ret;
 }
 
diff -Naur ./arch/arm/mach-exynos/subsystem_restart.c ../../HK_JB/Kernel/arch/arm/mach-exynos/subsystem_restart.c
--- ./arch/arm/mach-exynos/subsystem_restart.c	2012-12-08 20:40:46.165821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/subsystem_restart.c	2012-11-22 09:13:16.000000000 +0100
@@ -23,6 +23,7 @@
 #include <linux/wakelock.h>
 #include <linux/suspend.h>
 #include <mach/subsystem_restart.h>
+#include <mach/sec_debug.h>
 
 struct subsys_soc_restart_order {
 	const char * const *subsystem_list;
@@ -227,6 +228,12 @@
 
 	subsys->ongoing = true;
 
+	/* check debug level */
+	if (!sec_debug_level.uint_val) {
+		/* debug level is low, set mdm_dump to Zero */
+		mdm_dump = 0;
+	}
+
 	data = kzalloc(sizeof(struct restart_wq_data), GFP_KERNEL);
 	if (!data) {
 		pr_warn("Failed to alloc restart data. Resetting.\n");
diff -Naur ./arch/arm/mach-exynos/t0-gpio.c ../../HK_JB/Kernel/arch/arm/mach-exynos/t0-gpio.c
--- ./arch/arm/mach-exynos/t0-gpio.c	2012-12-08 20:40:46.165821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/t0-gpio.c	2012-11-22 09:13:16.000000000 +0100
@@ -77,7 +77,10 @@
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* GSENSE_SDA_1.8V */
 	{EXYNOS4_GPD1(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* GSENSE_SCL_1.8V */
-
+#if defined(CONFIG_MACH_T0_JPN_LTE_DCM)
+	{EXYNOS4_GPF2(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+#endif
 	{EXYNOS4_GPX0(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* MCU_AP_INT_1.8V */
 	{EXYNOS4_GPX0(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
@@ -86,7 +89,7 @@
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
 	{EXYNOS4_GPX0(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
-#if defined(CONFIG_MACH_T0_EUR_OPEN)
+#if defined(CONFIG_MACH_T0_EUR_OPEN) || defined(CONFIG_MACH_T0_CHN_OPEN)
 	{EXYNOS4_GPX0(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
 #endif
@@ -95,13 +98,16 @@
 
 	{EXYNOS4_GPX0(7), S3C_GPIO_SFN(0xF), S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* AP_PMIC_IRQ */
-
+#if defined(CONFIG_MACH_T0_JPN_LTE_DCM)
+	{EXYNOS4_GPX1(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+#endif
 	{EXYNOS4_GPX1(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* V_BUS_INT */
 	{EXYNOS4_GPX1(7), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* NFC_IRQ */
 
-#if !defined(CONFIG_MACH_T0_EUR_OPEN)
+#if defined(CONFIG_JACK_GROUND_DET)
 	{EXYNOS4_GPX2(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* G_DET_N */
 #endif
@@ -120,9 +126,14 @@
 
 #if !defined(CONFIG_MACH_T0_CHN_CU_DUOS) \
 	&& !defined(CONFIG_MACH_T0_CHN_OPEN_DUOS)
+#if defined(CONFIG_MACH_T0_JPN_LTE_DCM)
+	{EXYNOS4_GPX3(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+#else
 	{EXYNOS4_GPX3(0), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* WPC_INT */
 #endif
+#endif
 	{EXYNOS4_GPX3(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* BT_WAKE */
 	{EXYNOS4_GPX3(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
@@ -177,7 +188,8 @@
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
 	{EXYNOS4_GPY2(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
-#if defined(CONFIG_MACH_T0_EUR_OPEN)
+#if defined(CONFIG_MACH_T0_EUR_OPEN) || defined(CONFIG_MACH_T0_CHN_OPEN) \
+		|| defined(CONFIG_MACH_T0_CHN_CMCC)
 	{EXYNOS4_GPY2(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
 #else
@@ -190,8 +202,8 @@
 	{EXYNOS4212_GPM2(2), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* VTCAM_MCLK */
 #if defined(CONFIG_MACH_T0_CHN_CMCC)
-	{EXYNOS4212_GPM0(4), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_ZERO,
-		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* USBSW_EN */
+	{EXYNOS4212_GPM0(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_ZERO,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* USBSW_EN */
 #endif
 	{EXYNOS4212_GPM4(1), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* SENSOR_CORE_EN */
@@ -215,10 +227,10 @@
 	{EXYNOS4_GPA0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* BT_UART_CTS */
 	{EXYNOS4_GPA0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},   /* BT_UART_RTS */
 #if defined(CONFIG_MACH_T0_EUR_OPEN)
-	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* GPS_UART_RXD */
-	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* GPS_UART_TXD */
-	{EXYNOS4_GPA0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* GPS_UART_CTS */
-	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},   /* GPS_UART_RTS */
+	{EXYNOS4_GPA0(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /*GPS_RXD*/
+	{EXYNOS4_GPA0(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /*GPS_TXD*/
+	{EXYNOS4_GPA0(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /*GPS_CTS*/
+	{EXYNOS4_GPA0(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /*GPS_RTS*/
 #else
 	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
@@ -275,7 +287,7 @@
 	{EXYNOS4_GPC1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 #endif
 	{EXYNOS4_GPC1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* PLD_SPI_CLK */
-	{EXYNOS4_GPC1(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* PLD_SPI_CS */
+	{EXYNOS4_GPC1(2),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* PLD_SPI_CS */
 #if defined(CONFIG_MACH_T0_EUR_OPEN) || defined(CONFIG_MACH_T0_CHN_OPEN)
 	{EXYNOS4_GPC1(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* MHL_DSDA_1.8V */
 	{EXYNOS4_GPC1(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* MHL_DSCL_1.8V */
@@ -327,7 +339,7 @@
 #endif
 	{EXYNOS4_GPF2(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* MLCD_RST */
 #if 1 /* defined(CONFIG_MACH_T0_EUR_OPEN) */
-	{EXYNOS4_GPF2(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CP_USB_EN */
+	{EXYNOS4_GPF2(2),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /* CP_USB_EN */
 	{EXYNOS4_GPF2(3),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /* PLD2_RST */
 	{EXYNOS4_GPF2(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* BOOT_SW_SEL_CP2 */
 #else
@@ -419,13 +431,10 @@
 	{EXYNOS4_GPY2(0),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},  /* TF_EN */
 	{EXYNOS4_GPY2(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP},    /* PEN_RESET_N_1.8V */
 	{EXYNOS4_GPY2(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},  /* MCU_NRST_1.8V */
-#if defined(CONFIG_MACH_T0_EUR_OPEN)
-	{EXYNOS4_GPY2(3),  S3C_GPIO_SLP_INPUT,
-						S3C_GPIO_PULL_DOWN}, /* NC */
+#if 1 /* defined(CONFIG_MACH_T0_EUR_OPEN) */
+	{EXYNOS4_GPY2(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 #else
-	/* AP2MDM_PMIC_RESET_N */
-	{EXYNOS4_GPY2(3),  S3C_GPIO_SLP_PREV,
-						S3C_GPIO_PULL_UP},
+	{EXYNOS4_GPY2(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* AP2MDM_PMIC_RESET_N */
 #endif
 	{EXYNOS4_GPY2(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* NFC_SDA_1.8V */
 	{EXYNOS4_GPY2(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* NFC_SCL_1.8V */
@@ -481,7 +490,7 @@
 #else
 	{EXYNOS4212_GPJ0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 #endif
-	{EXYNOS4212_GPJ0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* UART_SEL */
+	{EXYNOS4212_GPJ0(2),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /* UART_SEL */
 	{EXYNOS4212_GPJ0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* 2_TOUCH_INT */
 	{EXYNOS4212_GPJ0(4),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /* CODEC_LDO_EN */
 	{EXYNOS4212_GPJ0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
@@ -492,7 +501,7 @@
 	{EXYNOS4212_GPJ1(1),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /* TORCH_EN */
 	{EXYNOS4212_GPJ1(2),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /* TORCH_SET */
 	{EXYNOS4212_GPJ1(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* CAM_MCLK */
-	{EXYNOS4212_GPJ1(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* USB_SEL */
+	{EXYNOS4212_GPJ1(4),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /* USB_SEL */
 
 	{EXYNOS4212_GPM0(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4212_GPM0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
@@ -592,14 +601,14 @@
 
 static unsigned int t0_sleep_gpio_table[][3] = {
 	{EXYNOS4_GPA0(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* BT_UART_RXD */
-	{EXYNOS4_GPA0(1),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* BT_UART_TXD */
+	{EXYNOS4_GPA0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /* BT_UART_TXD */
 	{EXYNOS4_GPA0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* BT_UART_CTS */
 	{EXYNOS4_GPA0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /* BT_UART_RTS */
 #if defined(CONFIG_MACH_T0_EUR_OPEN) || defined(CONFIG_TARGET_LOCALE_CHN)
-	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* GPS_UART_RXD */
-	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* GPS_UART_TXD */
-	{EXYNOS4_GPA0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* GPS_UART_CTS */
-	{EXYNOS4_GPA0(7),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /* GPS_UART_RTS */
+	{EXYNOS4_GPA0(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /*GPS_RXD*/
+	{EXYNOS4_GPA0(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_UP}, /*GPS_TXD*/
+	{EXYNOS4_GPA0(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* GPS_CTS*/
+	{EXYNOS4_GPA0(7), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* GPS_RTS */
 #else
 	{EXYNOS4_GPA0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4_GPA0(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
@@ -656,7 +665,12 @@
 #else
 	{EXYNOS4_GPC1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 #endif
+#if defined(CONFIG_MACH_T0_CHN_CU_DUOS) \
+	|| defined(CONFIG_MACH_T0_CHN_OPEN_DUOS)
+	{EXYNOS4_GPC1(2),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* PLD_SPI_CS */
+#else
 	{EXYNOS4_GPC1(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#endif
 #if defined(CONFIG_MACH_T0_EUR_OPEN)
 	{EXYNOS4_GPC1(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* MHL_DSDA_1.8V */
 	{EXYNOS4_GPC1(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* MHL_DSCL_1.8V */
@@ -681,21 +695,22 @@
 
 	{EXYNOS4_GPF0(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* BARCODE_SDA_1.8V */
 	{EXYNOS4_GPF0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* BARCODE_SCL_1.8V */
-#if !defined(CONFIG_MACH_T0_CHN_CU_DUOS) \
-	&& !defined(CONFIG_MACH_T0_CHN_OPEN_DUOS)
+
 	{EXYNOS4_GPF0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* CRESET_B */
 	{EXYNOS4_GPF0(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* CDONE */
-#endif
 
 #if defined(CONFIG_MACH_T0_CHN_CU_DUOS) \
 	|| defined(CONFIG_MACH_T0_CHN_OPEN_DUOS)
 	{EXYNOS4_GPF0(4),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* ESC_OFF */
+#elif defined(CONFIG_MACH_T0_CHN_CMCC)
+	{EXYNOS4_GPF0(4),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /* AP_CP_INT2 */
 #else
 	{EXYNOS4_GPF0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* MHL_SDA_1.8V */
 #endif
 	{EXYNOS4_GPF0(5),  S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE}, /* FPGA_RST_N */
 #if defined(CONFIG_MACH_T0_CHN_CU_DUOS) \
-	|| defined(CONFIG_MACH_T0_CHN_OPEN_DUOS)
+	|| defined(CONFIG_MACH_T0_CHN_OPEN_DUOS) \
+	|| defined(CONFIG_MACH_T0_CHN_CMCC)
 	{EXYNOS4_GPF0(6),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* PLD_RESET_N */
 #else
 	{EXYNOS4_GPF0(6),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* MHL_SCL_1.8V */
@@ -737,7 +752,11 @@
 	{EXYNOS4_GPF2(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 #else
 	{EXYNOS4_GPF2(2),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* MDM2AP_HSIC_PWR_ACTIVE */
+#if defined(CONFIG_MACH_T0_CHN_CMCC)
+	{EXYNOS4_GPF2(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* WCN_PRIORITY */
+#else
 	{EXYNOS4_GPF2(3),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* WCN_PRIORITY */
+#endif
 	{EXYNOS4_GPF2(4),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* MDM_LTE_FRAME_SYNC */
 #endif
 #if defined(CONFIG_MACH_T0_EUR_OPEN)
@@ -756,6 +775,9 @@
 	|| defined(CONFIG_MACH_T0_CHN_OPEN_DUOS)
 	{EXYNOS4_GPF3(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* CDONE */
 	{EXYNOS4_GPF3(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE}, /* CRESET_B */
+#elif defined(CONFIG_MACH_T0_CHN_CMCC)
+	{EXYNOS4_GPF3(4),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /* TD_PDA_ACTIVE */
+	{EXYNOS4_GPF3(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 #else
 	{EXYNOS4_GPF3(4),  S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE}, /* MHL_RST */
 	{EXYNOS4_GPF3(5),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* MHL_INT */
@@ -797,7 +819,11 @@
 	{EXYNOS4_GPL0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* 2TOUCH_SCL */
 	{EXYNOS4_GPL0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* 2TOUCH_SDA */
 	{EXYNOS4_GPL0(3),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /* VPS_SOUND_EN */
+#if defined(CONFIG_MACH_T0_CHN_CMCC)
+	{EXYNOS4_GPL0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* HDMI_EN */
+#else
 	{EXYNOS4_GPL0(4),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* HDMI_EN */
+#endif
 	{EXYNOS4_GPL0(6),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /*BT_EN */
 
 	{EXYNOS4_GPL1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
@@ -811,11 +837,10 @@
 	{EXYNOS4_GPL2(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* GPS_EN(NC) */
 #if defined(CONFIG_MACH_T0_CHN_CMCC) && defined(CONFIG_SEC_DUAL_MODEM_MODE)
 	{EXYNOS4_GPL2(3),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* CP_CTRL1 */
-	{EXYNOS4_GPL2(4),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* CP_CTRL2 */
 #else
 	{EXYNOS4_GPL2(3),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
-	{EXYNOS4_GPL2(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 #endif
+	{EXYNOS4_GPL2(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 #if defined(CONFIG_MACH_T0_EUR_OPEN) || defined(CONFIG_MACH_T0_CHN_CMCC) \
 	|| defined(CONFIG_MACH_T0_CHN_OPEN) || defined(CONFIG_MACH_T0_CHN_CU_DUOS) \
 	|| defined(CONFIG_MACH_T0_CHN_OPEN_DUOS)
@@ -937,13 +962,13 @@
 	{EXYNOS4212_GPM0(1),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* TDCP_ON */
 	{EXYNOS4212_GPM0(2),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* CP_USB_ON */
 	{EXYNOS4212_GPM0(3),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* PCM_SEL */
-	{EXYNOS4212_GPM0(4),  S3C_GPIO_SLP_PREV, S3C_GPIO_PULL_NONE}, /* USBSW_EN */
+	{EXYNOS4212_GPM0(4),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* USBSW_EN */
 #elif defined(CONFIG_MACH_T0_CHN_CU_DUOS) \
 	|| defined(CONFIG_MACH_T0_CHN_OPEN_DUOS)
 	{EXYNOS4212_GPM0(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4212_GPM0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
-	{EXYNOS4212_GPM0(2),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_DOWN}, /*CP2_RST */
-	{EXYNOS4212_GPM0(3),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_DOWN}, /*CP2_ON */
+	{EXYNOS4212_GPM0(2),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /*CP2_RST */
+	{EXYNOS4212_GPM0(3),  S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /*CP2_ON */
 #else
 	{EXYNOS4212_GPM0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4212_GPM0(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
@@ -1063,9 +1088,11 @@
 	{EXYNOS4_GPC1(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 #endif
 	{EXYNOS4_GPF2(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#if !defined(CONFIG_MACH_T0_JPN_LTE_DCM)
 	{EXYNOS4212_GPJ1(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4212_GPJ1(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 	{EXYNOS4212_GPJ1(2),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#endif
 };
 
 /*
diff -Naur ./arch/arm/mach-exynos/t0-sound.c ../../HK_JB/Kernel/arch/arm/mach-exynos/t0-sound.c
--- ./arch/arm/mach-exynos/t0-sound.c	2012-12-08 20:40:46.165821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/t0-sound.c	2012-11-22 09:13:16.000000000 +0100
@@ -202,7 +202,7 @@
 	.jd_ext_cap = 1,
 
 	/* Regulated mode at highest output voltage */
-	.micbias = {0x2f, 0x27},
+	.micbias = {0x2f, 0x2b},
 
 	.micd_lvl_sel = 0xFF,
 
@@ -377,9 +377,6 @@
 	/* Main Microphone BIAS */
 	gpio_set_value(GPIO_MIC_BIAS_EN, on);
 
-	if (on)
-		msleep(100);
-
 	pr_info("%s: main_mic bias on = %d\n", __func__, on);
 #endif
 }
@@ -390,9 +387,6 @@
 	/* Sub Microphone BIAS */
 	gpio_set_value(GPIO_SUB_MIC_BIAS_EN, on);
 
-	if (on)
-		msleep(100);
-
 	pr_info("%s: sub_mic bias on = %d\n", __func__, on);
 #endif
 }
@@ -458,6 +452,21 @@
 #if defined(CONFIG_MACH_T0_EUR_LTE)
 	t0_sound_pdata.dcs_offset_l = -11;
 	t0_sound_pdata.dcs_offset_r = -8;
+#elif defined(CONFIG_MACH_T0_USA_VZW)
+	t0_sound_pdata.dcs_offset_l = -12;
+	t0_sound_pdata.dcs_offset_r = -9;
+#elif defined(CONFIG_MACH_T0_USA_ATT)
+	t0_sound_pdata.dcs_offset_l = -13;
+	t0_sound_pdata.dcs_offset_r = -9;
+#elif defined(CONFIG_MACH_T0_USA_TMO)
+	t0_sound_pdata.dcs_offset_l = -11;
+	t0_sound_pdata.dcs_offset_r = -9;
+#elif defined(CONFIG_MACH_T0_USA_SPR)
+	t0_sound_pdata.dcs_offset_l = -12;
+	t0_sound_pdata.dcs_offset_r = -9;
+#elif defined(CONFIG_MACH_T0_USA_USCC)
+	t0_sound_pdata.dcs_offset_l = -11;
+	t0_sound_pdata.dcs_offset_r = -8;
 #endif
 
 	t0_gpio_init();
diff -Naur ./arch/arm/mach-exynos/tmu.c ../../HK_JB/Kernel/arch/arm/mach-exynos/tmu.c
--- ./arch/arm/mach-exynos/tmu.c	2012-12-08 20:40:46.165821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/tmu.c	2012-11-22 09:13:16.000000000 +0100
@@ -1178,12 +1178,12 @@
 
 	/* To support periodic temprature monitoring */
 	if (mask & ENABLE_TEMP_MON) {
-		INIT_DEFERRABLE_WORK(&info->monitor,
+		INIT_DELAYED_WORK_DEFERRABLE(&info->monitor,
 					exynos4_poll_cur_temp);
 		queue_delayed_work_on(0, tmu_monitor_wq, &info->monitor,
 			info->monitor_period);
 	}
-	INIT_DEFERRABLE_WORK(&info->polling, exynos4_handler_tmu_state);
+	INIT_DELAYED_WORK_DEFERRABLE(&info->polling, exynos4_handler_tmu_state);
 
 	info->irq = platform_get_irq(pdev, 0);
 	if (info->irq < 0) {
diff -Naur ./arch/arm/mach-exynos/u1-gpio.c ../../HK_JB/Kernel/arch/arm/mach-exynos/u1-gpio.c
--- ./arch/arm/mach-exynos/u1-gpio.c	2012-12-08 20:40:46.165821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/u1-gpio.c	2012-11-22 09:13:16.000000000 +0100
@@ -196,22 +196,25 @@
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* GPIO_BOOT_MODE */
 	{EXYNOS4_GPX2(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* GPIO_FUEL_ALERT */
+#if defined(CONFIG_TARGET_LOCALE_NAATT_TEMP)
+	{EXYNOS4_GPX2(4), S3C_GPIO_INPUT,  S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1}, /* NC */
+#endif
 	{EXYNOS4_GPX3(1), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_ZERO,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* GPIO_BT_WAKE */
 	{EXYNOS4_GPX3(2), S3C_GPIO_SFN(GPIO_DET_35_AF), S3C_GPIO_SETPIN_NONE,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1}, /* GPIO_DET_35 */
-	{EXYNOS4_GPX3(3), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_ZERO,
-		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
 #if defined(CONFIG_TARGET_LOCALE_NA)
 	/* NC */
 	{EXYNOS4_GPX3(3), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_ZERO,
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
 #else
-	{EXYNOS4_GPX3(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+	{EXYNOS4_GPX3(3), S3C_GPIO_OUTPUT, S3C_GPIO_SETPIN_ZERO,
 		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
 #endif /*CONFIG_TARGET_LOCALE_NA*/
-
-#if defined(CONFIG_TARGET_LOCALE_NA)
+	{EXYNOS4_GPX3(4), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_NONE,
+		S3C_GPIO_PULL_NONE, S5P_GPIO_DRVSTR_LV1},
+#if defined(CONFIG_TARGET_LOCALE_NA) || defined(CONFIG_TARGET_LOCALE_NAATT_TEMP)
 	/* NC*/
 	{EXYNOS4_GPX3(5), S3C_GPIO_INPUT, S3C_GPIO_SETPIN_ZERO,
 		S3C_GPIO_PULL_DOWN, S5P_GPIO_DRVSTR_LV1},
@@ -468,7 +471,8 @@
 	{EXYNOS4_GPB(3), S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPB(4), S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPB(5), S3C_GPIO_SLP_OUT0, S3C_GPIO_PULL_NONE},
-#elif defined(CONFIG_TARGET_LOCALE_NTT)
+#elif defined(CONFIG_TARGET_LOCALE_NTT) \
+	|| defined(CONFIG_TARGET_LOCALE_NAATT_TEMP)
 	{EXYNOS4_GPB(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPB(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
 	{EXYNOS4_GPB(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
@@ -490,7 +494,9 @@
 	{EXYNOS4_GPB(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPB(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 #endif/*CONFIG_MACH_U1_NA_USCC*/
+#if !defined(CONFIG_TARGET_LOCAL_NA)
 	{EXYNOS4_GPB(4), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
+#endif
 	{EXYNOS4_GPB(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 #endif
 	{EXYNOS4_GPB(6), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
@@ -564,16 +570,17 @@
 	{EXYNOS4210_GPE0(4), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},
 #else
 	{EXYNOS4210_GPE0(3), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},
+#if !defined(CONFIG_TARGET_LOCAL_NA)
 	{EXYNOS4210_GPE0(4), S3C_GPIO_SLP_OUT1,  S3C_GPIO_PULL_NONE},
 #endif
+#endif
 #endif /*end CONFIG_VIDEO_TSI*/
+#endif /* CONFIG_TARGET_LOCALE_NA */
 	{EXYNOS4210_GPE1(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4210_GPE1(1), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4210_GPE1(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4210_GPE1(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 	{EXYNOS4210_GPE1(4), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
-#endif /* CONFIG_TARGET_LOCALE_NA */
-
 #if !defined(CONFIG_VIDEO_TSI)
 #if defined(CONFIG_MACH_U1_KOR_LGT)
 	{EXYNOS4210_GPE1(5), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
@@ -586,7 +593,10 @@
 #endif
 #endif /* end CONFIG_VIDEO_TSI */
 
-#if defined(CONFIG_MACH_U1_KOR_LGT)
+
+#if defined(CONFIG_TARGET_LOCALE_NA)
+	{ EXYNOS4210_GPE2(0),  S3C_GPIO_SLP_PREV,	S3C_GPIO_PULL_NONE},
+#elif defined(CONFIG_MACH_U1_KOR_LGT)
 	{EXYNOS4210_GPE2(0), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
 #else
 	{EXYNOS4210_GPE2(0), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_DOWN},
@@ -812,7 +822,7 @@
 	{EXYNOS4_GPL0(0), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPL0(1), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPL0(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
-	{EXYNOS4_GPL0(3), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE}, /* MXT224 */
+	{EXYNOS4_GPL0(3), S3C_GPIO_SLP_OUT0,  S3C_GPIO_PULL_NONE},
 	{EXYNOS4_GPL0(4), S3C_GPIO_SLP_PREV,  S3C_GPIO_PULL_NONE},
 #if defined(CONFIG_TARGET_LOCALE_NA)
 	/* 3_TOUCH_INT */
@@ -910,7 +920,7 @@
 #endif /*CONFIG_TARGET_LOCALE_NA*/
 #if defined(CONFIG_MACH_U1_KOR_LGT)
 	{EXYNOS4_GPY2(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_NONE},
-#else
+#elif !defined(CONFIG_MACH_U1_NA_SPR)
 	{EXYNOS4_GPY2(2), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
 #endif
 	{EXYNOS4_GPY2(3), S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN}, /* NC */
@@ -1045,6 +1055,9 @@
 #endif /* CONFIG_TARGET_LOCALE_NA */
 
 #if defined(CONFIG_MACH_U1_NA_SPR) || defined(CONFIG_MACH_U1_NA_USCC)
+	{ EXYNOS4_GPY0(0),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+	{ EXYNOS4_GPY0(1),  S3C_GPIO_SLP_INPUT, S3C_GPIO_PULL_DOWN},
+
 	/* SIDE_CLK_EN */
 	{ EXYNOS4_GPY2(5),  S3C_GPIO_SLP_OUT0,	S3C_GPIO_PULL_NONE},
 	/* SIDE_INT */
@@ -1107,6 +1120,30 @@
 		s3c_gpio_slp_cfgpin(gpio, gpio_table[i][1]);
 		s3c_gpio_slp_setpull_updown(gpio, gpio_table[i][2]);
 	}
+#if defined(CONFIG_TARGET_LOCALE_NA)
+	gpio_direction_input(EXYNOS4_GPX1(5));
+	s3c_gpio_setpull(EXYNOS4_GPX1(5), S3C_GPIO_PULL_DOWN);
+	gpio_direction_output(EXYNOS4_GPX1(7), 0);
+	s3c_gpio_setpull(EXYNOS4_GPX1(7), S3C_GPIO_PULL_NONE);
+	gpio_direction_input(EXYNOS4_GPX2(4));
+	s3c_gpio_setpull(EXYNOS4_GPX2(4), S3C_GPIO_PULL_DOWN);
+	gpio_direction_input(EXYNOS4_GPX3(3));
+	s3c_gpio_setpull(EXYNOS4_GPX3(3), S3C_GPIO_PULL_DOWN);
+	gpio_direction_input(EXYNOS4_GPX3(5));
+	s3c_gpio_setpull(EXYNOS4_GPX3(5), S3C_GPIO_PULL_DOWN);
+	if (!gpio_get_value(GPIO_WIMAX_EN)) {
+		for (i = 0; i <= 6; i++) {
+			if (i != 2) {
+				s3c_gpio_slp_cfgpin(EXYNOS4_GPK3(i),
+				S3C_GPIO_SLP_INPUT);
+				s3c_gpio_slp_setpull_updown(EXYNOS4_GPK3(i),
+				S3C_GPIO_PULL_DOWN);
+			}
+		}
+	}
+#endif /* CONFIG_TARGET_LOCALE_NA */
+
+
 }
 
 void u1_config_sleep_gpio_table(void)
diff -Naur ./arch/arm/mach-exynos/u1-panel_a2.c ../../HK_JB/Kernel/arch/arm/mach-exynos/u1-panel_a2.c
--- ./arch/arm/mach-exynos/u1-panel_a2.c	2012-12-08 20:40:46.165821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/u1-panel_a2.c	2012-11-22 09:13:16.000000000 +0100
@@ -832,60 +832,6 @@
 	ENDDEF, 0x00
 };
 
-static const unsigned short ld9040_sm2_a2_22_20_dimming[] = {
-	0xF9, 0x0C,
-	DATA_ONLY, 0x81 - 3,
-	DATA_ONLY, 0xB4 - 3,
-	DATA_ONLY, 0xB8 - 3,
-	DATA_ONLY, 0xD1 - 3,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x48 - 9,
-	DATA_ONLY, 0x0C - 0,
-	DATA_ONLY, 0x7A - 9,
-	DATA_ONLY, 0xAD - 1,
-	DATA_ONLY, 0xBD - 4,
-	DATA_ONLY, 0xD4 - 2,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x57 - 9,
-	DATA_ONLY, 0x0C - 0,
-	DATA_ONLY, 0xBB - 3,
-	DATA_ONLY, 0xAE - 3,
-	DATA_ONLY, 0xC3 - 3,
-	DATA_ONLY, 0xD5 - 4,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x56 - 9,
-	0xFB, 0x02,
-	DATA_ONLY, 0x5A,
-	ENDDEF, 0x00
-};
-
-static const unsigned short ld9040_sm2_a2_22_10_dimming[] = {
-	0xF9, 0x0C,
-	DATA_ONLY, 0x91 - 5,
-	DATA_ONLY, 0xB4 - 5,
-	DATA_ONLY, 0xB8 - 5,
-	DATA_ONLY, 0xD1 - 5,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x48 - 15,
-	DATA_ONLY, 0x0C - 0,
-	DATA_ONLY, 0x7A - 15,
-	DATA_ONLY, 0xAD - 3,
-	DATA_ONLY, 0xBD - 3,
-	DATA_ONLY, 0xD4 - 7,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x57 - 15,
-	DATA_ONLY, 0x0C - 0,
-	DATA_ONLY, 0xBB - 5,
-	DATA_ONLY, 0xAE - 5,
-	DATA_ONLY, 0xC3 - 5,
-	DATA_ONLY, 0xD5 - 7,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x56 - 15,
-	0xFB, 0x02,
-	DATA_ONLY, 0x5A,
-	ENDDEF, 0x00
-};
-
 static const unsigned short ld9040_sm2_a2_19_300[] = {
 	0xF9, 0x0C,
 	DATA_ONLY, 0xB2,
@@ -1642,69 +1588,16 @@
 	ENDDEF, 0x00
 };
 
-static const unsigned short ld9040_sm2_a2_19_20_dimming[] = {
-	0xF9, 0x0C,
-	DATA_ONLY, 0xB0 - 3,
-	DATA_ONLY, 0xB9 - 3,
-	DATA_ONLY, 0xB1 - 3,
-	DATA_ONLY, 0xD1 - 3,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x38 - 9,
-	DATA_ONLY, 0x0C - 0,
-	DATA_ONLY, 0x97 - 9,
-	DATA_ONLY, 0xBE - 1,
-	DATA_ONLY, 0xB2 - 4,
-	DATA_ONLY, 0xD3 - 2,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x49 - 9,
-	DATA_ONLY, 0x0C - 0,
-	DATA_ONLY, 0xBC - 3,
-	DATA_ONLY, 0xC2 - 3,
-	DATA_ONLY, 0xB7 - 3,
-	DATA_ONLY, 0xD2 - 4,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x48 - 9,
-	0xFB, 0x02,    
-	DATA_ONLY, 0x5A,
-	ENDDEF, 0x00
-};
-
-static const unsigned short ld9040_sm2_a2_19_10_dimming[] = {
-	0xF9, 0x0C,
-	DATA_ONLY, 0xB0 - 5,
-	DATA_ONLY, 0xB9 - 5,
-	DATA_ONLY, 0xB1 - 5,
-	DATA_ONLY, 0xD1 - 5,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x38 - 15,
-	DATA_ONLY, 0x0C - 0,
-	DATA_ONLY, 0x97 - 15,
-	DATA_ONLY, 0xBE - 3,
-	DATA_ONLY, 0xB2 - 3,
-	DATA_ONLY, 0xD3 - 7,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x49 - 15,
-	DATA_ONLY, 0x0C - 0,
-	DATA_ONLY, 0xBC - 5,
-	DATA_ONLY, 0xC2 - 5,
-	DATA_ONLY, 0xB7 - 5,
-	DATA_ONLY, 0xD2 - 7,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x48 - 15,
-	0xFB, 0x02,    
-	DATA_ONLY, 0x5A,
-	ENDDEF, 0x00
-};
-
 /* LD9040, 4.27", SM2 A2 Panel Gamma Table */
 static const unsigned short *psm2_a2_22Gamma_set[] = {
-	ld9040_sm2_a2_22_10_dimming,
-	ld9040_sm2_a2_22_30_dimming,
-	ld9040_sm2_a2_22_40,
+#if defined(CONFIG_TARGET_LOCALE_NAATT)
 	ld9040_sm2_a2_22_50,
 	ld9040_sm2_a2_22_60,
+#else
+	ld9040_sm2_a2_22_30_dimming,
+	ld9040_sm2_a2_22_40,
+#endif
 	ld9040_sm2_a2_22_70,
-	ld9040_sm2_a2_22_80,
 	ld9040_sm2_a2_22_90,
 	ld9040_sm2_a2_22_100,
 	ld9040_sm2_a2_22_110,
@@ -1722,21 +1615,18 @@
 	ld9040_sm2_a2_22_230,
 	ld9040_sm2_a2_22_240,
 	ld9040_sm2_a2_22_250,
-	ld9040_sm2_a2_22_260,
-	ld9040_sm2_a2_22_270,
-	ld9040_sm2_a2_22_280,
-	ld9040_sm2_a2_22_290,
 	ld9040_sm2_a2_22_300,
 };
 
 static const unsigned short *psm2_a2_19Gamma_set[] = {
-	ld9040_sm2_a2_19_10_dimming,
-	ld9040_sm2_a2_19_30_dimming,
-	ld9040_sm2_a2_19_40,
+#if defined(CONFIG_TARGET_LOCALE_NAATT)
 	ld9040_sm2_a2_19_50,
 	ld9040_sm2_a2_19_60,
+#else
+	ld9040_sm2_a2_19_30_dimming,
+	ld9040_sm2_a2_19_40,
+#endif
 	ld9040_sm2_a2_19_70,
-	ld9040_sm2_a2_19_80,
 	ld9040_sm2_a2_19_90,
 	ld9040_sm2_a2_19_100,
 	ld9040_sm2_a2_19_110,
@@ -1754,10 +1644,6 @@
 	ld9040_sm2_a2_19_230,
 	ld9040_sm2_a2_19_240,
 	ld9040_sm2_a2_19_250,
-	ld9040_sm2_a2_19_260,
-	ld9040_sm2_a2_19_270,
-	ld9040_sm2_a2_19_280,
-	ld9040_sm2_a2_19_290,
 	ld9040_sm2_a2_19_300,
 };
 
diff -Naur ./arch/arm/mach-exynos/u1-panel.c ../../HK_JB/Kernel/arch/arm/mach-exynos/u1-panel.c
--- ./arch/arm/mach-exynos/u1-panel.c	2012-12-08 20:40:46.165821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/u1-panel.c	2012-11-22 09:13:16.000000000 +0100
@@ -836,60 +836,6 @@
 	ENDDEF, 0x00
 };
 
-static const unsigned short ld9040_sm2_a1_22_20_dimming[] = {
-	0xF9, 0x2E,
-	DATA_ONLY, 0x81 - 3,
-	DATA_ONLY, 0xB7 - 3,
-	DATA_ONLY, 0xBA - 3,
-	DATA_ONLY, 0xCD - 3,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x41 - 9,
-	DATA_ONLY, 0x36 - 0,
-	DATA_ONLY, 0x80 - 9,
-	DATA_ONLY, 0xA7 - 1,
-	DATA_ONLY, 0xB1 - 4,
-	DATA_ONLY, 0xCB - 2,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x4C - 9,
-	DATA_ONLY, 0x2E - 0,
-	DATA_ONLY, 0xAB - 3,
-	DATA_ONLY, 0xB1 - 3,
-	DATA_ONLY, 0xB2 - 3,
-	DATA_ONLY, 0xCC - 4,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x56 - 9,
-	0xFB, 0x02,    
-	DATA_ONLY, 0x5A,
-	ENDDEF, 0x00
-};
-
-static const unsigned short ld9040_sm2_a1_22_10_dimming[] = {
-	0xF9, 0x2E,
-	DATA_ONLY, 0x81 - 5,
-	DATA_ONLY, 0xB7 - 5,
-	DATA_ONLY, 0xBA - 5,
-	DATA_ONLY, 0xCD - 5,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x41 - 15,
-	DATA_ONLY, 0x36 - 0,
-	DATA_ONLY, 0x80 - 15,
-	DATA_ONLY, 0xA7 - 3,
-	DATA_ONLY, 0xB1 - 3,
-	DATA_ONLY, 0xCB - 7,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x4C - 15,
-	DATA_ONLY, 0x2E - 0,
-	DATA_ONLY, 0xAB - 5,
-	DATA_ONLY, 0xB1 - 5,
-	DATA_ONLY, 0xB2 - 5,
-	DATA_ONLY, 0xCC - 7,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x56 - 15,
-	0xFB, 0x02,    
-	DATA_ONLY, 0x5A,
-	ENDDEF, 0x00
-};
-
 
 static const unsigned short ld9040_sm2_a1_19_300[] = {
 	0xF9, 0x2E,
@@ -1647,69 +1593,12 @@
 	ENDDEF, 0x00
 };
 
-static const unsigned short ld9040_sm2_a1_19_20_dimming[] = {
-	0xF9, 0x2E,
-	DATA_ONLY, 0xA7 - 3,
-	DATA_ONLY, 0xC5 - 3,
-	DATA_ONLY, 0xC0 - 3,
-	DATA_ONLY, 0xD5 - 3,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x40 - 9,
-	DATA_ONLY, 0x36 - 0,
-	DATA_ONLY, 0x93 - 9,
-	DATA_ONLY, 0xB7 - 1,
-	DATA_ONLY, 0xB8 - 4,
-	DATA_ONLY, 0xD2 - 2,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x4C - 9,
-	DATA_ONLY, 0x2E - 0,
-	DATA_ONLY, 0xB5 - 3,
-	DATA_ONLY, 0xB9 - 3,
-	DATA_ONLY, 0xBA - 3,
-	DATA_ONLY, 0xD2 - 4,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x56 - 9,
-	0xFB, 0x02,    
-	DATA_ONLY, 0x5A,
-	ENDDEF, 0x00
-};
-
-static const unsigned short ld9040_sm2_a1_19_10_dimming[] = {
-	0xF9, 0x2E,
-	DATA_ONLY, 0xA7 - 5,
-	DATA_ONLY, 0xC5 - 5,
-	DATA_ONLY, 0xC0 - 5,
-	DATA_ONLY, 0xD5 - 5,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x40 - 15,
-	DATA_ONLY, 0x36 - 0,
-	DATA_ONLY, 0x93 - 15,
-	DATA_ONLY, 0xB7 - 3,
-	DATA_ONLY, 0xB8 - 3,
-	DATA_ONLY, 0xD2 - 7,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x4C - 15,
-	DATA_ONLY, 0x2E - 0,
-	DATA_ONLY, 0xB5 - 5,
-	DATA_ONLY, 0xB9 - 5,
-	DATA_ONLY, 0xBA - 5,
-	DATA_ONLY, 0xD2 - 7,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x56 - 15,
-	0xFB, 0x02,    
-	DATA_ONLY, 0x5A,
-	ENDDEF, 0x00
-};
 
 /* LD9040, 4.27", SM2 A1 Panel Gamma Table */
 static const unsigned short *psm2_a1_22Gamma_set[] = {
-	ld9040_sm2_a1_22_10_dimming,
 	ld9040_sm2_a1_22_30_dimming,
 	ld9040_sm2_a1_22_40,
-	ld9040_sm2_a1_22_50,
-	ld9040_sm2_a1_22_60,
 	ld9040_sm2_a1_22_70,
-	ld9040_sm2_a1_22_80,
 	ld9040_sm2_a1_22_90,
 	ld9040_sm2_a1_22_100,
 	ld9040_sm2_a1_22_110,
@@ -1731,13 +1620,9 @@
 };
 
 static const unsigned short *psm2_a1_19Gamma_set[] = {
-	ld9040_sm2_a1_19_10_dimming,
 	ld9040_sm2_a1_19_30_dimming,
 	ld9040_sm2_a1_19_40,
-	ld9040_sm2_a1_19_50,
-	ld9040_sm2_a1_19_60,
 	ld9040_sm2_a1_19_70,
-	ld9040_sm2_a1_19_80,
 	ld9040_sm2_a1_19_90,
 	ld9040_sm2_a1_19_100,
 	ld9040_sm2_a1_19_110,
diff -Naur ./arch/arm/mach-exynos/u1-panel_m2.c ../../HK_JB/Kernel/arch/arm/mach-exynos/u1-panel_m2.c
--- ./arch/arm/mach-exynos/u1-panel_m2.c	2012-12-08 20:40:46.165821667 +0100
+++ ../../HK_JB/Kernel/arch/arm/mach-exynos/u1-panel_m2.c	2012-11-22 09:13:16.000000000 +0100
@@ -832,60 +832,6 @@
 	ENDDEF, 0x00
 };
 
-static const unsigned short ld9040_22_20_dimming[] = {
-	0xF9, 0x00,
-	DATA_ONLY, 0xD9 - 3,
-	DATA_ONLY, 0xD3 - 3,
-	DATA_ONLY, 0xCC - 3,
-	DATA_ONLY, 0xDA - 3,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x46 - 9,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0xB1 - 9,
-	DATA_ONLY, 0xC9 - 1,
-	DATA_ONLY, 0xC9 - 4,
-	DATA_ONLY, 0xD9 - 2,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x58 - 9,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0xD2 - 3,
-	DATA_ONLY, 0xD0 - 3,
-	DATA_ONLY, 0xC9 - 3,
-	DATA_ONLY, 0xD8 - 4,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x5E - 9,
-	0xFB, 0x02,    
-	DATA_ONLY, 0x5A,
-	ENDDEF, 0x00
-};
-
-static const unsigned short ld9040_22_10_dimming[] = {
-	0xF9, 0x00,
-	DATA_ONLY, 0xD9 - 5,
-	DATA_ONLY, 0xD3 - 5,
-	DATA_ONLY, 0xCC - 5,
-	DATA_ONLY, 0xDA - 5,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x46 - 15,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0xB1 - 15,
-	DATA_ONLY, 0xC9 - 3,
-	DATA_ONLY, 0xC9 - 3,
-	DATA_ONLY, 0xD9 - 7,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x58 - 15,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0xD2 - 5,
-	DATA_ONLY, 0xD0 - 5,
-	DATA_ONLY, 0xC9 - 5,
-	DATA_ONLY, 0xD8 - 7,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x5E - 15,
-	0xFB, 0x02,    
-	DATA_ONLY, 0x5A,
-	ENDDEF, 0x00
-};
-
 static const unsigned short ld9040_19_300[] = {
 	0xF9, 0x00,
 	DATA_ONLY, 0xCD,
@@ -1642,69 +1588,12 @@
 	ENDDEF, 0x00
 };
 
-static const unsigned short ld9040_19_20_dimming[] = {
-	0xF9, 0x00,
-	DATA_ONLY, 0xDC - 3,
-	DATA_ONLY, 0xD5 - 3,
-	DATA_ONLY, 0xD2 - 3,
-	DATA_ONLY, 0xDE - 3,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x46 - 9,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0xC3 - 9,
-	DATA_ONLY, 0xD2 - 1,
-	DATA_ONLY, 0xCF - 4,
-	DATA_ONLY, 0xDE - 2,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x58 - 9,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0xD3 - 3,
-	DATA_ONLY, 0xD4 - 3,
-	DATA_ONLY, 0xCF - 3,
-	DATA_ONLY, 0xDD - 4,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x5E - 9,
-	0xFB, 0x02,    
-	DATA_ONLY, 0x5A,
-	ENDDEF, 0x00
-};
-
-static const unsigned short ld9040_19_10_dimming[] = {
-	0xF9, 0x00,
-	DATA_ONLY, 0xDC - 5,
-	DATA_ONLY, 0xD5 - 5,
-	DATA_ONLY, 0xD2 - 5,
-	DATA_ONLY, 0xDE - 5,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x46 - 15,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0xC3 - 15,
-	DATA_ONLY, 0xD2 - 3,
-	DATA_ONLY, 0xCF - 3,
-	DATA_ONLY, 0xDE - 7,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x58 - 15,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0xD3 - 5,
-	DATA_ONLY, 0xD4 - 5,
-	DATA_ONLY, 0xCF - 5,
-	DATA_ONLY, 0xDD - 7,
-	DATA_ONLY, 0x00 - 0,
-	DATA_ONLY, 0x5E - 15,
-	0xFB, 0x02,    
-	DATA_ONLY, 0x5A,
-	ENDDEF, 0x00
-};
 
 /* LD9040, 4.27", SM2 M2 Panel Gamma Table : Useless - too old */
 static const unsigned short *p22Gamma_set[] = {
-	ld9040_22_10_dimming,
 	ld9040_22_30_dimming,
 	ld9040_22_40,
-	ld9040_22_50,
-	ld9040_22_60,
 	ld9040_22_70,
-	ld9040_22_80,
 	ld9040_22_90,
 	ld9040_22_100,
 	ld9040_22_110,
@@ -1722,21 +1611,13 @@
 	ld9040_22_230,
 	ld9040_22_240,
 	ld9040_22_250,
-	ld9040_22_260,
-	ld9040_22_270,
-	ld9040_22_280,
-	ld9040_22_290,
 	ld9040_22_300,
 };
 
 static const unsigned short *p19Gamma_set[] = {
-	ld9040_19_10_dimming,
 	ld9040_19_30_dimming,
 	ld9040_19_40,
-	ld9040_19_50,
-	ld9040_19_60,
 	ld9040_19_70,
-	ld9040_19_80,
 	ld9040_19_90,
 	ld9040_19_100,
 	ld9040_19_110,
@@ -1754,10 +1635,6 @@
 	ld9040_19_230,
 	ld9040_19_240,
 	ld9040_19_250,
-	ld9040_19_260,
-	ld9040_19_270,
-	ld9040_19_280,
-	ld9040_19_290,
 	ld9040_19_300,
 };
 
